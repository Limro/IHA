
KeyboardSound.elf:     file format elf32-littlenios2
KeyboardSound.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000130f0 memsz 0x000130f0 flags r-x
    LOAD off    0x00014110 vaddr 0x00093110 paddr 0x00094cfc align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x000168e8 vaddr 0x000968e8 paddr 0x000968e8 align 2**12
         filesz 0x00000000 memsz 0x000002f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000125b0  000801b8  000801b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000009a8  00092768  00092768  00013768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  00093110  00094cfc  00014110  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f4  000968e8  000968e8  000168e8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00015cfc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001018  00000000  00000000  00015d20  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001c3e  00000000  00000000  00016d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002ee1d  00000000  00000000  00018976  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009c05  00000000  00000000  00047793  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001a0b9  00000000  00000000  00051398  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022ac  00000000  00000000  0006b454  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002b27  00000000  00000000  0006d700  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ea25  00000000  00000000  00070227  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0007ec4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a70  00000000  00000000  0007ec90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008353f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00083542  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00083547  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00083548  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0008354c  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00083550  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00083554  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0008355f  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0008356a  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000a  00000000  00000000  00083575  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002d  00000000  00000000  0008357f  2**0
                  CONTENTS, READONLY
 28 .jdi          0000423d  00000000  00000000  000835ac  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00062c97  00000000  00000000  000877e9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b8 l    d  .text	00000000 .text
00092768 l    d  .rodata	00000000 .rodata
00093110 l    d  .rwdata	00000000 .rwdata
000968e8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 HEX.c
00000000 l    df *ABS*	00000000 LCD.c
00000000 l    df *ABS*	00000000 keyboard.c
00000000 l    df *ABS*	00000000 keys.c
00000000 l    df *ABS*	00000000 master_main.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
000929b4 l     O .rodata	00000108 two_over_pi
00092934 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00092abc l     O .rodata	00000010 init_jk
00092acc l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 dp-bit.c
000833fc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00084284 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00084e14 l     F .text	00000058 std
00084f20 l     F .text	00000008 __fp_lock
00084f28 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
00093110 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00086acc l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00086d18 l     F .text	00000058 __sprint_r
00092c96 l     O .rodata	00000010 blanks.3452
00092c86 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00088e7c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00094cc8 l     O .rwdata	00000004 charset
00092cc8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00092e10 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0008d91c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008d97c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008da80 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0008dba4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008dc84 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008dde4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0008def0 l     F .text	000000f8 alt_file_locked
0008e174 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0008e590 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00094ce4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008e848 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00093acc l     O .rwdata	00001060 jtag_uart_0
00094b2c l     O .rwdata	00000120 lcd_0
00094c4c l     O .rwdata	00000030 audio_and_video_config_0
00094c7c l     O .rwdata	00000038 ps2_port
0008e99c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008ebd4 l     F .text	0000022c altera_avalon_jtag_uart_irq
0008ee00 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00094ce8 l     O .rwdata	00000004 colstart
0008f47c l     F .text	000000b8 lcd_write_command
0008f534 l     F .text	000000d4 lcd_write_data
0008f608 l     F .text	000000d8 lcd_clear_screen
0008f6e0 l     F .text	00000214 lcd_repaint_screen
0008f8f4 l     F .text	000000e0 lcd_scroll_up
0008f9d4 l     F .text	000002e4 lcd_handle_escape
000901f4 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00090454 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000915fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000919c4 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00092f8d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00092550 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00092704 l     F .text	00000040 alt_sim_halt
000906a4 g     F .text	00000038 alt_up_av_config_reset
0008b3cc g     F .text	00000094 _mprec_log10
000806dc g     F .text	000001f4 convertKeyboardToAscii
00090b48 g     F .text	00000064 alt_up_av_config_read_D5M_cfg_register
0008b4b8 g     F .text	00000088 __any_on
0008abb0 g     F .text	00000070 _isatty_r
00092de8 g     O .rodata	00000028 __mprec_tinytens
00090714 g     F .text	00000030 alt_up_av_config_disable_interrupt
0008de44 g     F .text	0000006c alt_main
00086854 g     F .text	000000a0 _puts_r
0009694c g     O .bss	00000100 alt_irq
00090f24 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
00082fbc g     F .text	00000018 fabs
0008ace4 g     F .text	00000078 _lseek_r
00094cfc g       *ABS*	00000000 __flash_rwdata_start
0008a674 g     F .text	000000a0 __sflags
00083f1c g     F .text	00000088 __eqdf2
00096bdc g       *ABS*	00000000 __alt_heap_start
000907e4 g     F .text	000000ac alt_up_av_config_write_audio_cfg_register
000867dc g     F .text	00000044 printf
00086b60 g     F .text	00000068 __sseek
00084e7c g     F .text	000000a4 __sinit
000922d0 g     F .text	00000130 __swbuf_r
00090d3c g     F .text	00000034 read_CE_bit
0008ac44 g     F .text	00000084 _setlocale_r
00084f7c g     F .text	0000009c __sfmoreglue
0008ded0 g     F .text	00000020 __malloc_unlock
000910d0 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
00096914 g     O .bss	00000004 altera_avalon_timer_ts_freq
0008aee0 g     F .text	000000e0 memmove
00084f6c g     F .text	00000010 _cleanup
0008b540 g     F .text	000000bc _Balloc
00083fa4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00085b18 g     F .text	00000074 _fstat_r
000808d0 g     F .text	000000ec updateKeyKeys
000968e8 g     O .bss	00000004 errno
00082fd4 g     F .text	00000224 floor
00096908 g     O .bss	00000004 alt_argv
0009ccb4 g       *ABS*	00000000 _gp
00091e78 g     F .text	00000030 usleep
0009394c g     O .rwdata	00000180 alt_fd_list
000810cc g     F .text	00000828 __ieee754_rem_pio2
00091724 g     F .text	00000094 alt_find_dev
0008ae40 g     F .text	000000a0 memcpy
00084f60 g     F .text	0000000c _cleanup_r
000840b4 g     F .text	000000f8 __floatsidf
00091a9c g     F .text	00000078 alt_io_redirect
0008d600 g     F .text	00000088 __ltdf2
00092768 g       *ABS*	00000000 __DTOR_END__
000868f4 g     F .text	00000014 puts
00091ea8 g     F .text	00000020 altera_nios2_irq_init
0008b31c g     F .text	000000b0 __ratio
0008f018 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00086820 g     F .text	00000034 _printf_r
000843c0 g     F .text	00000008 __udivsi3
0008dae0 g     F .text	000000c4 isatty
00092cf8 g     O .rodata	000000c8 __mprec_tens
0008ac20 g     F .text	00000008 __locale_charset
000818f4 g     F .text	0000052c __kernel_cos
000968ec g     O .bss	00000004 __malloc_top_pad
00090618 g     F .text	0000008c alt_up_av_config_read_data
00094cc4 g     O .rwdata	00000004 __mb_cur_max
0008ac28 g     F .text	0000000c _localeconv_r
0008bca4 g     F .text	0000003c __i2b
0008a714 g     F .text	0000049c __sfvwrite_r
00086ae8 g     F .text	00000070 _sbrk_r
0008c04c g     F .text	00000078 _read_r
00093918 g     O .rwdata	0000000c __lc_ctype
00094cdc g     O .rwdata	00000004 alt_max_fd
000848c0 g     F .text	00000138 __unpack_d
00084ac0 g     F .text	00000110 _fclose_r
00090d70 g     F .text	00000034 read_num_bytes_available
00084de0 g     F .text	00000034 fflush
000968f0 g     O .bss	00000004 __malloc_max_sbrked_mem
00091b14 g     F .text	000001c0 alt_irq_register
00090cd8 g     F .text	00000034 read_RI_bit
00082ca4 g     F .text	00000318 __kernel_sin
0008388c g     F .text	00000074 __adddf3
0008b1fc g     F .text	00000120 __b2d
0008cf18 g     F .text	00000660 __umoddi3
0008dcf0 g     F .text	000000f4 lseek
00094cb8 g     O .rwdata	00000004 _global_impure_ptr
0008c0c4 g     F .text	000005f4 _realloc_r
00096bdc g       *ABS*	00000000 __bss_end
00091d6c g     F .text	0000010c alt_tick
0008c8ac g     F .text	0000066c __udivdi3
00092dc0 g     O .rodata	00000028 __mprec_bigtens
0008bf2c g     F .text	00000120 __s2b
0008d688 g     F .text	00000194 __floatunsidf
0008b11c g     F .text	00000060 __mcmp
00090dd8 g     F .text	0000002c read_data_byte
00094cf8 g     O .rwdata	00000004 __ctype_ptr
00084f48 g     F .text	00000018 __fp_lock_all
00091cd4 g     F .text	00000098 alt_alarm_stop
00090d0c g     F .text	00000030 read_RE_bit
00096918 g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000cc alt_irq_handler
00093924 g     O .rwdata	00000028 alt_dev_null
00081e20 g     F .text	00000e84 __kernel_rem_pio2
00090f7c g     F .text	00000078 alt_up_ps2_write_data_byte
0009152c g     F .text	0000001c alt_dcache_flush_all
0008afe8 g     F .text	00000070 __hi0bits
000841ac g     F .text	000000d8 __fixdfsi
00094cfc g       *ABS*	00000000 __ram_rwdata_end
00094cd4 g     O .rwdata	00000008 alt_dev_list
0008e724 g     F .text	00000124 write
000921e8 g     F .text	000000e8 _putc_r
00093110 g       *ABS*	00000000 __ram_rodata_end
0008d9a8 g     F .text	000000d8 fstat
00085218 g     F .text	0000002c fprintf
0008be0c g     F .text	00000120 __pow5mult
000968f8 g     O .bss	00000004 __nlocale_changed
000843c8 g     F .text	00000008 __umodsi3
00096bdc g       *ABS*	00000000 end
000912f0 g     F .text	000000a8 alt_up_ps2_write_fd
000802dc g     F .text	000000b0 writeToLCD
0008fcb8 g     F .text	0000053c altera_avalon_lcd_16207_write
00085af4 g     F .text	00000024 fseek
0008eb1c g     F .text	000000b8 altera_avalon_jtag_uart_init
0008038c g     F .text	00000244 updateKeyboardKeys
00092764 g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
000904c8 g     F .text	00000088 alt_avalon_timer_sc_init
0008452c g     F .text	00000080 __clzsi2
0008f23c g     F .text	00000240 altera_avalon_jtag_uart_write
00084e6c g     F .text	00000004 __sfp_lock_acquire
0008ad5c g     F .text	000000e4 memchr
00086d70 g     F .text	00001ec4 ___vfprintf_internal_r
000853a4 g     F .text	00000314 _free_r
0008e1d4 g     F .text	00000258 alt_printf
00092554 g     F .text	000001b0 __call_exitprocs
000801f4 g     F .text	000000a8 BCDto7Seg
000968fc g     O .bss	00000004 __mlocale_changed
00094cc0 g     O .rwdata	00000004 __malloc_sbrk_base
000801b8 g     F .text	0000003c _start
0009691c g     O .bss	00000004 _alt_tick_rate
00080f60 g     F .text	0000016c sin
0008b904 g     F .text	0000014c __lshift
000905b4 g     F .text	00000064 alt_up_av_config_write_data
00096920 g     O .bss	00000004 _alt_nticks
0008e46c g     F .text	00000124 read
0008e8dc g     F .text	000000c0 alt_sys_init
00086764 g     F .text	00000078 _open_r
0009241c g     F .text	00000134 __register_exitproc
00090c74 g     F .text	00000064 alt_up_av_config_write_LTM_cfg_register
000911fc g     F .text	00000058 alt_up_ps2_clear_fifo
0008ba50 g     F .text	00000254 __multiply
0008eeb0 g     F .text	00000074 altera_avalon_jtag_uart_close
000843d0 g     F .text	00000038 __mulsi3
00093110 g       *ABS*	00000000 __ram_rwdata_start
00092768 g       *ABS*	00000000 __ram_rodata_start
00096924 g     O .bss	00000028 __malloc_current_mallinfo
0008b5fc g     F .text	0000017c __d2b
0008e9d4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
000918d8 g     F .text	000000d0 alt_get_fd
00091ec8 g     F .text	0000015c alt_busy_sleep
000849f8 g     F .text	000000c8 __fpcmp_parts_d
00088e0c g     F .text	00000070 _close_r
00092070 g     F .text	00000074 memcmp
0008ea84 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00096bdc g       *ABS*	00000000 __alt_stack_base
0008eacc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00085d0c g     F .text	000000ac _fwrite_r
00088cd0 g     F .text	0000013c __swsetup_r
00083cc4 g     F .text	00000258 __divdf3
00085018 g     F .text	000000f0 __sfp
0008b460 g     F .text	00000058 __copybits
00093510 g     O .rwdata	00000408 __malloc_av_
00084e78 g     F .text	00000004 __sinit_lock_release
00083900 g     F .text	000003c4 __muldf3
00086c44 g     F .text	00000060 __sread
000917b8 g     F .text	00000120 alt_find_file
00091548 g     F .text	000000b4 alt_dev_llist_insert
0008deb0 g     F .text	00000020 __malloc_lock
00085244 g     F .text	00000034 _fprintf_r
0008e668 g     F .text	000000bc sbrk
00084be4 g     F .text	000001fc _fflush_r
0008c7e4 g     F .text	000000c8 _calloc_r
000851fc g     F .text	0000001c fopen
000968e8 g       *ABS*	00000000 __bss_start
000866cc g     F .text	00000098 memset
0008029c g     F .text	00000040 printBCDon7Seg
00080ae4 g     F .text	0000047c main
0009690c g     O .bss	00000004 alt_envp
000968f4 g     O .bss	00000004 __malloc_max_total_mem
0008ea2c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00092400 g     F .text	0000001c __swbuf
000902c0 g     F .text	0000013c altera_avalon_lcd_16207_init
00086b58 g     F .text	00000008 __sclose
00100000 g       *ABS*	00000000 __alt_heap_limit
00084bd0 g     F .text	00000014 fclose
00091180 g     F .text	0000007c alt_up_ps2_read_data_byte
00096a4c g     O .bss	00000190 _atexit0
000890c0 g     F .text	000015b4 _dtoa_r
00085f8c g     F .text	00000740 _malloc_r
00094ce0 g     O .rwdata	00000004 alt_errno
00085c54 g     F .text	000000b8 _fwalk
00091398 g     F .text	00000040 alt_up_ps2_open_dev
000920e4 g     F .text	00000104 putc
00084300 g     F .text	00000060 __divsi3
00092b0c g     O .rodata	00000014 __thenan_df
00085278 g     F .text	0000012c _malloc_trim_r
00090ed0 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
00092768 g       *ABS*	00000000 __CTOR_END__
0008c728 g     F .text	000000bc strcmp
00092768 g       *ABS*	00000000 __flash_rodata_start
00092768 g       *ABS*	00000000 __DTOR_LIST__
000833d8 g     F .text	00000024 copysign
0008d578 g     F .text	00000088 __nedf2
00080000 g       *ABS*	00000000 __alt_mem_sram_0
00090550 g     F .text	00000064 alt_up_av_config_open_dev
0008e8a8 g     F .text	00000034 alt_irq_init
0008e5f0 g     F .text	00000078 alt_release_fd
00090da4 g     F .text	00000034 read_data_valid
00092b20 g     O .rodata	00000100 __clz_tab
00096900 g     O .bss	00000004 _PathLocale
00091064 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
00092024 g     F .text	00000014 atexit
00088c58 g     F .text	00000078 _write_r
000907ac g     F .text	00000038 alt_up_av_config_read_ready
0008acc8 g     F .text	0000001c setlocale
00094cb4 g     O .rwdata	00000004 _impure_ptr
00096904 g     O .bss	00000004 alt_argc
000831f8 g     F .text	000001e0 scalbn
00096910 g     O .bss	00000004 altera_avalon_timer_ts_base
000916c0 g     F .text	00000064 _do_dtors
000856b8 g     F .text	0000043c _fseek_r
00086908 g     F .text	000001c4 __srefill_r
00080020 g       .exceptions	00000000 alt_irq_entry
0008b17c g     F .text	00000080 __ulp
0008c6b8 g     F .text	00000040 __isinfd
00084f30 g     F .text	00000018 __fp_unlock_all
000903fc g     F .text	00000058 altera_avalon_lcd_16207_write_fd
00094ccc g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
0008ac34 g     F .text	00000010 localeconv
000906dc g     F .text	00000038 alt_up_av_config_enable_interrupt
00085db8 g     F .text	00000040 fwrite
00090744 g     F .text	00000068 alt_up_av_config_read_acknowledge
00090ae4 g     F .text	00000064 alt_up_av_config_write_DC2_cfg_register
00094cfc g       *ABS*	00000000 _edata
00096bdc g       *ABS*	00000000 _end
000801b8 g       *ABS*	00000000 __ram_exceptions_end
0008ef24 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000805d0 g     F .text	0000010c keyboardKeyToHertz
00086bc8 g     F .text	0000007c __swrite
00094cbc g     O .rwdata	00000004 __malloc_trim_threshold
00092038 g     F .text	00000038 exit
00085b8c g     F .text	000000c8 _fwalk_reent
00090e04 g     F .text	000000cc alt_up_ps2_init
0008b778 g     F .text	0000018c __mdiff
00090c10 g     F .text	00000064 alt_up_av_config_read_LTM_cfg_register
00084360 g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00084e70 g     F .text	00000004 __sfp_lock_release
00092e8c g     O .rodata	00000101 _ctype_
00085108 g     F .text	000000f4 _fopen_r
00092744 g     F .text	00000020 _exit
0008c6f8 g     F .text	00000030 __isnand
000913d8 g     F .text	00000154 alt_alarm_start
00084408 g     F .text	00000124 __muldi3
00085df8 g     F .text	00000194 __smakebuf_r
00090ff4 g     F .text	00000070 alt_up_ps2_wait_for_ack
00086ca4 g     F .text	00000074 strlen
0008dfe8 g     F .text	0000018c open
0008402c g     F .text	00000088 __gedf2
0008e42c g     F .text	00000040 alt_putchar
00090890 g     F .text	000000f8 alt_up_av_config_read_video_cfg_register
000919a8 g     F .text	0000001c alt_icache_flush_all
00094cec g     O .rwdata	00000004 alt_priority_mask
00088c34 g     F .text	00000024 __vfprintf_internal
00090bac g     F .text	00000064 alt_up_av_config_write_D5M_cfg_register
000809bc g     F .text	00000128 initCodecAsMaster
00091254 g     F .text	0000009c alt_up_ps2_read_fd
0008380c g     F .text	00000080 __subdf3
0008b058 g     F .text	000000c4 __lo0bits
00094cf0 g     O .rwdata	00000008 alt_alarm_list
0009165c g     F .text	00000064 _do_ctors
0008d81c g     F .text	00000100 close
0008dc04 g     F .text	00000080 alt_load
00090988 g     F .text	000000f8 alt_up_av_config_write_video_cfg_register
000845ac g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00084e74 g     F .text	00000004 __sinit_lock_acquire
0008bce0 g     F .text	0000012c __multadd
0008afc0 g     F .text	00000028 _Bfree
00090a80 g     F .text	00000064 alt_up_av_config_read_DC2_cfg_register



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406e14 	ori	at,at,440
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000171e 	bne	r2,zero,80188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00274 	movhi	r3,9
   80134:	18da5304 	addi	r3,r3,26956
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11800017 	ldw	r6,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00274 	movhi	r3,9
   8014c:	18da5304 	addi	r3,r3,26956
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	e17ffd17 	ldw	r5,-12(fp)
   80164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80168:	0005313a 	rdctl	r2,ipending
   8016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
   80170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80178:	e0bfff17 	ldw	r2,-4(fp)
   8017c:	1004c03a 	cmpne	r2,r2,zero
   80180:	103fe21e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80184:	00000706 	br	801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80188:	e0bffe17 	ldw	r2,-8(fp)
   8018c:	1085883a 	add	r2,r2,r2
   80190:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80194:	e0bffd17 	ldw	r2,-12(fp)
   80198:	10800044 	addi	r2,r2,1
   8019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a0:	003fdd06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a4:	e037883a 	mov	sp,fp
   801a8:	dfc00117 	ldw	ra,4(sp)
   801ac:	df000017 	ldw	fp,0(sp)
   801b0:	dec00204 	addi	sp,sp,8
   801b4:	f800283a 	ret

Disassembly of section .text:

000801b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b8:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801c0:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801c4:	d6b32d14 	ori	gp,gp,52404
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c8:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801cc:	109a3a14 	ori	r2,r2,26856

    movhi r3, %hi(__bss_end)
   801d0:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801d4:	18daf714 	ori	r3,r3,27612

    beq r2, r3, 1f
   801d8:	10c00326 	beq	r2,r3,801e8 <_start+0x30>

0:
    stw zero, (r2)
   801dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e4:	10fffd36 	bltu	r2,r3,801dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e8:	008dc040 	call	8dc04 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801ec:	008de440 	call	8de44 <alt_main>

000801f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801f0:	003fff06 	br	801f0 <alt_after_alt_main>

000801f4 <BCDto7Seg>:
#include "HEX.h"

int BCDto7Seg(int bcd)
{
   801f4:	defffb04 	addi	sp,sp,-20
   801f8:	dfc00415 	stw	ra,16(sp)
   801fc:	df000315 	stw	fp,12(sp)
   80200:	dc400215 	stw	r17,8(sp)
   80204:	dc000115 	stw	r16,4(sp)
   80208:	df000104 	addi	fp,sp,4
   8020c:	e13fff15 	stw	r4,-4(fp)
	return bcd%10
   80210:	e13fff17 	ldw	r4,-4(fp)
   80214:	01400284 	movi	r5,10
   80218:	00843600 	call	84360 <__modsi3>
   8021c:	1021883a 	mov	r16,r2
   80220:	e13fff17 	ldw	r4,-4(fp)
   80224:	0149c404 	movi	r5,10000
   80228:	00843600 	call	84360 <__modsi3>
   8022c:	1009883a 	mov	r4,r2
   80230:	0140fa04 	movi	r5,1000
   80234:	00843000 	call	84300 <__divsi3>
   80238:	1022913a 	slli	r17,r2,4
   8023c:	e13fff17 	ldw	r4,-4(fp)
   80240:	0140fa04 	movi	r5,1000
   80244:	00843600 	call	84360 <__modsi3>
   80248:	1009883a 	mov	r4,r2
   8024c:	01401904 	movi	r5,100
   80250:	00843000 	call	84300 <__divsi3>
   80254:	8885883a 	add	r2,r17,r2
   80258:	1022913a 	slli	r17,r2,4
   8025c:	e13fff17 	ldw	r4,-4(fp)
   80260:	01401904 	movi	r5,100
   80264:	00843600 	call	84360 <__modsi3>
   80268:	1009883a 	mov	r4,r2
   8026c:	01400284 	movi	r5,10
   80270:	00843000 	call	84300 <__divsi3>
   80274:	8885883a 	add	r2,r17,r2
   80278:	1004913a 	slli	r2,r2,4
   8027c:	8085883a 	add	r2,r16,r2
				+(((bcd%100)/10)*16)
				+(((bcd%1000)/100)*16*16)
				+(((bcd%10000)/1000)*16*16*16);
};
   80280:	e037883a 	mov	sp,fp
   80284:	dfc00317 	ldw	ra,12(sp)
   80288:	df000217 	ldw	fp,8(sp)
   8028c:	dc400117 	ldw	r17,4(sp)
   80290:	dc000017 	ldw	r16,0(sp)
   80294:	dec00404 	addi	sp,sp,16
   80298:	f800283a 	ret

0008029c <printBCDon7Seg>:

void printBCDon7Seg(int bcd)
{
   8029c:	defffd04 	addi	sp,sp,-12
   802a0:	dfc00215 	stw	ra,8(sp)
   802a4:	df000115 	stw	fp,4(sp)
   802a8:	df000104 	addi	fp,sp,4
   802ac:	e13fff15 	stw	r4,-4(fp)
	// Update HEX-LEDs
	IOWR_16DIRECT(MM_BUS_SEVEN_SEG_FOUR_DIGIT_0_BASE, 2, BCDto7Seg(bcd));
   802b0:	e13fff17 	ldw	r4,-4(fp)
   802b4:	00801f40 	call	801f4 <BCDto7Seg>
   802b8:	1007883a 	mov	r3,r2
   802bc:	00800434 	movhi	r2,16
   802c0:	10850084 	addi	r2,r2,5122
   802c4:	10c0002d 	sthio	r3,0(r2)
}
   802c8:	e037883a 	mov	sp,fp
   802cc:	dfc00117 	ldw	ra,4(sp)
   802d0:	df000017 	ldw	fp,0(sp)
   802d4:	dec00204 	addi	sp,sp,8
   802d8:	f800283a 	ret

000802dc <writeToLCD>:
#include "LCD.h"

void writeToLCD(char* str, char line)
{
   802dc:	defffb04 	addi	sp,sp,-20
   802e0:	dfc00415 	stw	ra,16(sp)
   802e4:	df000315 	stw	fp,12(sp)
   802e8:	df000304 	addi	fp,sp,12
   802ec:	e13ffe15 	stw	r4,-8(fp)
   802f0:	e17fff05 	stb	r5,-4(fp)
	FILE* fp = fopen(LCD_0_NAME,"w");
   802f4:	01000274 	movhi	r4,9
   802f8:	2109da04 	addi	r4,r4,10088
   802fc:	01400274 	movhi	r5,9
   80300:	2949dd04 	addi	r5,r5,10100
   80304:	00851fc0 	call	851fc <fopen>
   80308:	e0bffd15 	stw	r2,-12(fp)
	if(fp != NULL)
   8030c:	e0bffd17 	ldw	r2,-12(fp)
   80310:	1005003a 	cmpeq	r2,r2,zero
   80314:	1000111e 	bne	r2,zero,8035c <writeToLCD+0x80>
	{
		fprintf(fp,SET_POS(%u,1),line);	// move cursor to
   80318:	e1bfff07 	ldb	r6,-4(fp)
   8031c:	e13ffd17 	ldw	r4,-12(fp)
   80320:	01400274 	movhi	r5,9
   80324:	2949de04 	addi	r5,r5,10104
   80328:	00852180 	call	85218 <fprintf>
		fprintf(fp,CLR_LINE());			// clear the line
   8032c:	01000274 	movhi	r4,9
   80330:	2109e004 	addi	r4,r4,10112
   80334:	01400044 	movi	r5,1
   80338:	018000c4 	movi	r6,3
   8033c:	e1fffd17 	ldw	r7,-12(fp)
   80340:	0085db80 	call	85db8 <fwrite>
		fprintf(fp,str);				// write the string
   80344:	e13ffd17 	ldw	r4,-12(fp)
   80348:	e17ffe17 	ldw	r5,-8(fp)
   8034c:	00852180 	call	85218 <fprintf>
		fclose(fp);
   80350:	e13ffd17 	ldw	r4,-12(fp)
   80354:	0084bd00 	call	84bd0 <fclose>
   80358:	00000706 	br	80378 <writeToLCD+0x9c>
	} else {
		printf("Error using %s! Trying to write \"%s\" to line %u\n",LCD_0_NAME,str,line);
   8035c:	e1ffff07 	ldb	r7,-4(fp)
   80360:	01000274 	movhi	r4,9
   80364:	2109e104 	addi	r4,r4,10116
   80368:	01400274 	movhi	r5,9
   8036c:	2949da04 	addi	r5,r5,10088
   80370:	e1bffe17 	ldw	r6,-8(fp)
   80374:	00867dc0 	call	867dc <printf>
	}
}
   80378:	e037883a 	mov	sp,fp
   8037c:	dfc00117 	ldw	ra,4(sp)
   80380:	df000017 	ldw	fp,0(sp)
   80384:	dec00204 	addi	sp,sp,8
   80388:	f800283a 	ret

0008038c <updateKeyboardKeys>:
#include "keyboard.h"

unsigned char updateKeyboardKeys(alt_up_ps2_dev *PS2_dev, unsigned char* keys, char bufferSize)
{
   8038c:	defff904 	addi	sp,sp,-28
   80390:	dfc00615 	stw	ra,24(sp)
   80394:	df000515 	stw	fp,20(sp)
   80398:	df000504 	addi	fp,sp,20
   8039c:	e13ffc15 	stw	r4,-16(fp)
   803a0:	e17ffd15 	stw	r5,-12(fp)
   803a4:	e1bffe05 	stb	r6,-8(fp)
	unsigned char PS2_original_data, PS2_ascii_data, i=0;
   803a8:	e03ffb05 	stb	zero,-20(fp)
	while(alt_up_ps2_read_data_byte (PS2_dev, &PS2_original_data) == 0)
   803ac:	00006306 	br	8053c <updateKeyboardKeys+0x1b0>
	{
		if(PS2_original_data == 0xF0) // If a key was released
   803b0:	e0bffb83 	ldbu	r2,-18(fp)
   803b4:	10803fcc 	andi	r2,r2,255
   803b8:	10803c18 	cmpnei	r2,r2,240
   803bc:	1000391e 	bne	r2,zero,804a4 <updateKeyboardKeys+0x118>
		{
			// Getting respond on which char is released
			while(alt_up_ps2_read_data_byte (PS2_dev, &PS2_original_data) != 0) {}
   803c0:	e17ffb84 	addi	r5,fp,-18
   803c4:	e13ffc17 	ldw	r4,-16(fp)
   803c8:	00911800 	call	91180 <alt_up_ps2_read_data_byte>
   803cc:	1004c03a 	cmpne	r2,r2,zero
   803d0:	103ffb1e 	bne	r2,zero,803c0 <updateKeyboardKeys+0x34>
			PS2_ascii_data = convertKeyboardToAscii(PS2_original_data);
   803d4:	e0bffb83 	ldbu	r2,-18(fp)
   803d8:	11003fcc 	andi	r4,r2,255
   803dc:	00806dc0 	call	806dc <convertKeyboardToAscii>
   803e0:	e0bffb45 	stb	r2,-19(fp)
			if(PS2_ascii_data != NULL_TERMINATE) // Not supported key - don't care!
   803e4:	e0bffb43 	ldbu	r2,-19(fp)
   803e8:	1005003a 	cmpeq	r2,r2,zero
   803ec:	1000531e 	bne	r2,zero,8053c <updateKeyboardKeys+0x1b0>
			{
				i = 0;
   803f0:	e03ffb05 	stb	zero,-20(fp)
				while(*(keys+i) != PS2_ascii_data && *(keys+i) != NULL_TERMINATE)
   803f4:	00000306 	br	80404 <updateKeyboardKeys+0x78>
				// Find key in array. If not there, null terminate is reached there is
				// nothing more interesting in array since the last also will be null terminate
				{
					i++;
   803f8:	e0bffb03 	ldbu	r2,-20(fp)
   803fc:	10800044 	addi	r2,r2,1
   80400:	e0bffb05 	stb	r2,-20(fp)
			while(alt_up_ps2_read_data_byte (PS2_dev, &PS2_original_data) != 0) {}
			PS2_ascii_data = convertKeyboardToAscii(PS2_original_data);
			if(PS2_ascii_data != NULL_TERMINATE) // Not supported key - don't care!
			{
				i = 0;
				while(*(keys+i) != PS2_ascii_data && *(keys+i) != NULL_TERMINATE)
   80404:	e0bffb03 	ldbu	r2,-20(fp)
   80408:	1007883a 	mov	r3,r2
   8040c:	e0bffd17 	ldw	r2,-12(fp)
   80410:	1885883a 	add	r2,r3,r2
   80414:	10800003 	ldbu	r2,0(r2)
   80418:	10c03fcc 	andi	r3,r2,255
   8041c:	e0bffb43 	ldbu	r2,-19(fp)
   80420:	18801726 	beq	r3,r2,80480 <updateKeyboardKeys+0xf4>
   80424:	e0bffb03 	ldbu	r2,-20(fp)
   80428:	1007883a 	mov	r3,r2
   8042c:	e0bffd17 	ldw	r2,-12(fp)
   80430:	1885883a 	add	r2,r3,r2
   80434:	10800003 	ldbu	r2,0(r2)
   80438:	10803fcc 	andi	r2,r2,255
   8043c:	1004c03a 	cmpne	r2,r2,zero
   80440:	103fed1e 	bne	r2,zero,803f8 <updateKeyboardKeys+0x6c>
				// Find key in array. If not there, null terminate is reached there is
				// nothing more interesting in array since the last also will be null terminate
				{
					i++;
				}
				while(*(keys+i) != NULL_TERMINATE)
   80444:	00000e06 	br	80480 <updateKeyboardKeys+0xf4>
				// Shift keys until we get to null terminate (end of array)
				{
					*(keys+i) = *(keys+i+1);
   80448:	e0bffb03 	ldbu	r2,-20(fp)
   8044c:	1007883a 	mov	r3,r2
   80450:	e0bffd17 	ldw	r2,-12(fp)
   80454:	1889883a 	add	r4,r3,r2
   80458:	e0bffb03 	ldbu	r2,-20(fp)
   8045c:	1007883a 	mov	r3,r2
   80460:	e0bffd17 	ldw	r2,-12(fp)
   80464:	1885883a 	add	r2,r3,r2
   80468:	10800044 	addi	r2,r2,1
   8046c:	10800003 	ldbu	r2,0(r2)
   80470:	20800005 	stb	r2,0(r4)
					i++;
   80474:	e0bffb03 	ldbu	r2,-20(fp)
   80478:	10800044 	addi	r2,r2,1
   8047c:	e0bffb05 	stb	r2,-20(fp)
				// Find key in array. If not there, null terminate is reached there is
				// nothing more interesting in array since the last also will be null terminate
				{
					i++;
				}
				while(*(keys+i) != NULL_TERMINATE)
   80480:	e0bffb03 	ldbu	r2,-20(fp)
   80484:	1007883a 	mov	r3,r2
   80488:	e0bffd17 	ldw	r2,-12(fp)
   8048c:	1885883a 	add	r2,r3,r2
   80490:	10800003 	ldbu	r2,0(r2)
   80494:	10803fcc 	andi	r2,r2,255
   80498:	1004c03a 	cmpne	r2,r2,zero
   8049c:	103fea1e 	bne	r2,zero,80448 <updateKeyboardKeys+0xbc>
   804a0:	00002606 	br	8053c <updateKeyboardKeys+0x1b0>
				// We could return here, but there might be more chars in the buffer!
			}
		}
		else
		{
			PS2_ascii_data = convertKeyboardToAscii(PS2_original_data);
   804a4:	e0bffb83 	ldbu	r2,-18(fp)
   804a8:	11003fcc 	andi	r4,r2,255
   804ac:	00806dc0 	call	806dc <convertKeyboardToAscii>
   804b0:	e0bffb45 	stb	r2,-19(fp)
			if(PS2_ascii_data != NULL_TERMINATE) // Not supported key - don't care!
   804b4:	e0bffb43 	ldbu	r2,-19(fp)
   804b8:	1005003a 	cmpeq	r2,r2,zero
   804bc:	10001f1e 	bne	r2,zero,8053c <updateKeyboardKeys+0x1b0>
			{
				for(i = 0; i < bufferSize; i++)
   804c0:	e03ffb05 	stb	zero,-20(fp)
   804c4:	00001a06 	br	80530 <updateKeyboardKeys+0x1a4>
				{
					if(*(keys+i) == PS2_ascii_data)
   804c8:	e0bffb03 	ldbu	r2,-20(fp)
   804cc:	1007883a 	mov	r3,r2
   804d0:	e0bffd17 	ldw	r2,-12(fp)
   804d4:	1885883a 	add	r2,r3,r2
   804d8:	10800003 	ldbu	r2,0(r2)
   804dc:	10c03fcc 	andi	r3,r2,255
   804e0:	e0bffb43 	ldbu	r2,-19(fp)
   804e4:	18801526 	beq	r3,r2,8053c <updateKeyboardKeys+0x1b0>
						break; // We don't need a new one, since it's already in the array
					else if(*(keys+i) == NULL_TERMINATE)
   804e8:	e0bffb03 	ldbu	r2,-20(fp)
   804ec:	1007883a 	mov	r3,r2
   804f0:	e0bffd17 	ldw	r2,-12(fp)
   804f4:	1885883a 	add	r2,r3,r2
   804f8:	10800003 	ldbu	r2,0(r2)
   804fc:	10803fcc 	andi	r2,r2,255
   80500:	1004c03a 	cmpne	r2,r2,zero
   80504:	1000071e 	bne	r2,zero,80524 <updateKeyboardKeys+0x198>
					{
						// Put key into last available place
						*(keys+i) = PS2_ascii_data;
   80508:	e0bffb03 	ldbu	r2,-20(fp)
   8050c:	1007883a 	mov	r3,r2
   80510:	e0bffd17 	ldw	r2,-12(fp)
   80514:	1887883a 	add	r3,r3,r2
   80518:	e0bffb43 	ldbu	r2,-19(fp)
   8051c:	18800005 	stb	r2,0(r3)
						// We could return here, but there might be more chars in the buffer!
						break;
   80520:	00000606 	br	8053c <updateKeyboardKeys+0x1b0>
		else
		{
			PS2_ascii_data = convertKeyboardToAscii(PS2_original_data);
			if(PS2_ascii_data != NULL_TERMINATE) // Not supported key - don't care!
			{
				for(i = 0; i < bufferSize; i++)
   80524:	e0bffb03 	ldbu	r2,-20(fp)
   80528:	10800044 	addi	r2,r2,1
   8052c:	e0bffb05 	stb	r2,-20(fp)
   80530:	e0fffb03 	ldbu	r3,-20(fp)
   80534:	e0bffe07 	ldb	r2,-8(fp)
   80538:	18bfe316 	blt	r3,r2,804c8 <updateKeyboardKeys+0x13c>
#include "keyboard.h"

unsigned char updateKeyboardKeys(alt_up_ps2_dev *PS2_dev, unsigned char* keys, char bufferSize)
{
	unsigned char PS2_original_data, PS2_ascii_data, i=0;
	while(alt_up_ps2_read_data_byte (PS2_dev, &PS2_original_data) == 0)
   8053c:	e17ffb84 	addi	r5,fp,-18
   80540:	e13ffc17 	ldw	r4,-16(fp)
   80544:	00911800 	call	91180 <alt_up_ps2_read_data_byte>
   80548:	1005003a 	cmpeq	r2,r2,zero
   8054c:	103f981e 	bne	r2,zero,803b0 <updateKeyboardKeys+0x24>
				}
			}
		}
	}

	for(i = 0; i < bufferSize; i++)
   80550:	e03ffb05 	stb	zero,-20(fp)
   80554:	00001406 	br	805a8 <updateKeyboardKeys+0x21c>
	{
		if(*(keys+i+1) == NULL_TERMINATE)
   80558:	e0bffb03 	ldbu	r2,-20(fp)
   8055c:	1007883a 	mov	r3,r2
   80560:	e0bffd17 	ldw	r2,-12(fp)
   80564:	1885883a 	add	r2,r3,r2
   80568:	10800044 	addi	r2,r2,1
   8056c:	10800003 	ldbu	r2,0(r2)
   80570:	10803fcc 	andi	r2,r2,255
   80574:	1004c03a 	cmpne	r2,r2,zero
   80578:	1000081e 	bne	r2,zero,8059c <updateKeyboardKeys+0x210>
		{
			// Next char is null terminate, so the current is the last
			// Note: Current might also be null terminate (if first)
			return *(keys+i);
   8057c:	e0bffb03 	ldbu	r2,-20(fp)
   80580:	1007883a 	mov	r3,r2
   80584:	e0bffd17 	ldw	r2,-12(fp)
   80588:	1885883a 	add	r2,r3,r2
   8058c:	10800003 	ldbu	r2,0(r2)
   80590:	10803fcc 	andi	r2,r2,255
   80594:	e0bfff15 	stw	r2,-4(fp)
   80598:	00000706 	br	805b8 <updateKeyboardKeys+0x22c>
				}
			}
		}
	}

	for(i = 0; i < bufferSize; i++)
   8059c:	e0bffb03 	ldbu	r2,-20(fp)
   805a0:	10800044 	addi	r2,r2,1
   805a4:	e0bffb05 	stb	r2,-20(fp)
   805a8:	e0fffb03 	ldbu	r3,-20(fp)
   805ac:	e0bffe07 	ldb	r2,-8(fp)
   805b0:	18bfe916 	blt	r3,r2,80558 <updateKeyboardKeys+0x1cc>
			// Next char is null terminate, so the current is the last
			// Note: Current might also be null terminate (if first)
			return *(keys+i);
		}
	}
	return 0; // We should never get here!
   805b4:	e03fff15 	stw	zero,-4(fp)
   805b8:	e0bfff17 	ldw	r2,-4(fp)
}
   805bc:	e037883a 	mov	sp,fp
   805c0:	dfc00117 	ldw	ra,4(sp)
   805c4:	df000017 	ldw	fp,0(sp)
   805c8:	dec00204 	addi	sp,sp,8
   805cc:	f800283a 	ret

000805d0 <keyboardKeyToHertz>:

int keyboardKeyToHertz(unsigned char key)
{
   805d0:	defffb04 	addi	sp,sp,-20
   805d4:	dfc00415 	stw	ra,16(sp)
   805d8:	df000315 	stw	fp,12(sp)
   805dc:	df000304 	addi	fp,sp,12
   805e0:	e13ffd05 	stb	r4,-12(fp)
	switch(key)
   805e4:	e0bffd03 	ldbu	r2,-12(fp)
   805e8:	10bfe7c4 	addi	r2,r2,-97
   805ec:	e0bfff15 	stw	r2,-4(fp)
   805f0:	e0ffff17 	ldw	r3,-4(fp)
   805f4:	188001e8 	cmpgeui	r2,r3,7
   805f8:	1000251e 	bne	r2,zero,80690 <keyboardKeyToHertz+0xc0>
   805fc:	e13fff17 	ldw	r4,-4(fp)
   80600:	e13fff17 	ldw	r4,-4(fp)
   80604:	2105883a 	add	r2,r4,r4
   80608:	1087883a 	add	r3,r2,r2
   8060c:	00800234 	movhi	r2,8
   80610:	10818804 	addi	r2,r2,1568
   80614:	1885883a 	add	r2,r3,r2
   80618:	10800017 	ldw	r2,0(r2)
   8061c:	1000683a 	jmp	r2
   80620:	0008063c 	xorhi	zero,zero,8216
   80624:	00080648 	cmpgei	zero,zero,8217
   80628:	00080654 	movui	zero,8217
   8062c:	00080660 	cmpeqi	zero,zero,8217
   80630:	0008066c 	andhi	zero,zero,8217
   80634:	00080678 	rdprs	zero,zero,8217
   80638:	00080684 	movi	zero,8218
	{
		/* LETTERS */
		case 'a':
			return 440;
   8063c:	00806e04 	movi	r2,440
   80640:	e0bffe15 	stw	r2,-8(fp)
   80644:	00001f06 	br	806c4 <keyboardKeyToHertz+0xf4>
		case 'b':
			return 494;
   80648:	00c07b84 	movi	r3,494
   8064c:	e0fffe15 	stw	r3,-8(fp)
   80650:	00001c06 	br	806c4 <keyboardKeyToHertz+0xf4>
		case 'c':
			return 262;
   80654:	01004184 	movi	r4,262
   80658:	e13ffe15 	stw	r4,-8(fp)
   8065c:	00001906 	br	806c4 <keyboardKeyToHertz+0xf4>
		case 'd':
			return 294;
   80660:	00804984 	movi	r2,294
   80664:	e0bffe15 	stw	r2,-8(fp)
   80668:	00001606 	br	806c4 <keyboardKeyToHertz+0xf4>
		case 'e':
			return 330;
   8066c:	00c05284 	movi	r3,330
   80670:	e0fffe15 	stw	r3,-8(fp)
   80674:	00001306 	br	806c4 <keyboardKeyToHertz+0xf4>
		case 'f':
			return 349;
   80678:	01005744 	movi	r4,349
   8067c:	e13ffe15 	stw	r4,-8(fp)
   80680:	00001006 	br	806c4 <keyboardKeyToHertz+0xf4>
		case 'g':
			return 392;
   80684:	00806204 	movi	r2,392
   80688:	e0bffe15 	stw	r2,-8(fp)
   8068c:	00000d06 	br	806c4 <keyboardKeyToHertz+0xf4>
	}

	/* NUMBERS */
	if(key >= '1' && key <= '9')
   80690:	e0bffd03 	ldbu	r2,-12(fp)
   80694:	10800c70 	cmpltui	r2,r2,49
   80698:	1000091e 	bne	r2,zero,806c0 <keyboardKeyToHertz+0xf0>
   8069c:	e0bffd03 	ldbu	r2,-12(fp)
   806a0:	10800ea8 	cmpgeui	r2,r2,58
   806a4:	1000061e 	bne	r2,zero,806c0 <keyboardKeyToHertz+0xf0>
		return (key-48)*100; // Ex: if 4 (ASCII: 52): (52-48)*100 = 400
   806a8:	e13ffd03 	ldbu	r4,-12(fp)
   806ac:	01401904 	movi	r5,100
   806b0:	00843d00 	call	843d0 <__mulsi3>
   806b4:	10bb5004 	addi	r2,r2,-4800
   806b8:	e0bffe15 	stw	r2,-8(fp)
   806bc:	00000106 	br	806c4 <keyboardKeyToHertz+0xf4>
	else
		return 0;
   806c0:	e03ffe15 	stw	zero,-8(fp)
   806c4:	e0bffe17 	ldw	r2,-8(fp)
}
   806c8:	e037883a 	mov	sp,fp
   806cc:	dfc00117 	ldw	ra,4(sp)
   806d0:	df000017 	ldw	fp,0(sp)
   806d4:	dec00204 	addi	sp,sp,8
   806d8:	f800283a 	ret

000806dc <convertKeyboardToAscii>:

unsigned char convertKeyboardToAscii(unsigned char orig_key)
{
   806dc:	defffc04 	addi	sp,sp,-16
   806e0:	df000315 	stw	fp,12(sp)
   806e4:	df000304 	addi	fp,sp,12
   806e8:	e13ffd05 	stb	r4,-12(fp)
	switch(orig_key)
   806ec:	e0bffd03 	ldbu	r2,-12(fp)
   806f0:	10bffa84 	addi	r2,r2,-22
   806f4:	e0bfff15 	stw	r2,-4(fp)
   806f8:	e0ffff17 	ldw	r3,-4(fp)
   806fc:	18800c68 	cmpgeui	r2,r3,49
   80700:	10006d1e 	bne	r2,zero,808b8 <convertKeyboardToAscii+0x1dc>
   80704:	e13fff17 	ldw	r4,-4(fp)
   80708:	e13fff17 	ldw	r4,-4(fp)
   8070c:	2105883a 	add	r2,r4,r4
   80710:	1087883a 	add	r3,r2,r2
   80714:	00800234 	movhi	r2,8
   80718:	1081ca04 	addi	r2,r2,1832
   8071c:	1885883a 	add	r2,r3,r2
   80720:	10800017 	ldw	r2,0(r2)
   80724:	1000683a 	jmp	r2
   80728:	0008084c 	andi	zero,zero,8225
   8072c:	000808b8 	rdprs	zero,zero,8226
   80730:	000808b8 	rdprs	zero,zero,8226
   80734:	000808b8 	rdprs	zero,zero,8226
   80738:	000808b8 	rdprs	zero,zero,8226
   8073c:	000808b8 	rdprs	zero,zero,8226
   80740:	000807ec 	andhi	zero,zero,8223
   80744:	000808b8 	rdprs	zero,zero,8226
   80748:	00080858 	cmpnei	zero,zero,8225
   8074c:	000808b8 	rdprs	zero,zero,8226
   80750:	000808b8 	rdprs	zero,zero,8226
   80754:	00080804 	movi	zero,8224
   80758:	000808b8 	rdprs	zero,zero,8226
   8075c:	00080810 	cmplti	zero,zero,8224
   80760:	0008081c 	xori	zero,zero,8224
   80764:	00080870 	cmpltui	zero,zero,8225
   80768:	00080864 	muli	zero,zero,8225
   8076c:	000808b8 	rdprs	zero,zero,8226
   80770:	000808b8 	rdprs	zero,zero,8226
   80774:	000808b8 	rdprs	zero,zero,8226
   80778:	000808b8 	rdprs	zero,zero,8226
   8077c:	00080828 	cmpgeui	zero,zero,8224
   80780:	000808b8 	rdprs	zero,zero,8226
   80784:	000808b8 	rdprs	zero,zero,8226
   80788:	0008087c 	xorhi	zero,zero,8225
   8078c:	000808b8 	rdprs	zero,zero,8226
   80790:	000808b8 	rdprs	zero,zero,8226
   80794:	000808b8 	rdprs	zero,zero,8226
   80798:	000807f8 	rdprs	zero,zero,8223
   8079c:	000808b8 	rdprs	zero,zero,8226
   807a0:	00080834 	movhi	zero,8224
   807a4:	000808b8 	rdprs	zero,zero,8226
   807a8:	00080888 	cmpgei	zero,zero,8226
   807ac:	000808b8 	rdprs	zero,zero,8226
   807b0:	000808b8 	rdprs	zero,zero,8226
   807b4:	000808b8 	rdprs	zero,zero,8226
   807b8:	000808b8 	rdprs	zero,zero,8226
   807bc:	000808b8 	rdprs	zero,zero,8226
   807c0:	000808b8 	rdprs	zero,zero,8226
   807c4:	00080894 	movui	zero,8226
   807c8:	000808a0 	cmpeqi	zero,zero,8226
   807cc:	000808b8 	rdprs	zero,zero,8226
   807d0:	000808b8 	rdprs	zero,zero,8226
   807d4:	000808b8 	rdprs	zero,zero,8226
   807d8:	000808b8 	rdprs	zero,zero,8226
   807dc:	000808b8 	rdprs	zero,zero,8226
   807e0:	000808b8 	rdprs	zero,zero,8226
   807e4:	00080840 	call	8084 <__reset-0x77f7c>
   807e8:	000808ac 	andhi	zero,zero,8226
	{
		/* LETTERS */
		case 0x1C:
			return 'a';
   807ec:	00801844 	movi	r2,97
   807f0:	e0bffe15 	stw	r2,-8(fp)
   807f4:	00003106 	br	808bc <convertKeyboardToAscii+0x1e0>
		case 0x32:
			return 'b';
   807f8:	00c01884 	movi	r3,98
   807fc:	e0fffe15 	stw	r3,-8(fp)
   80800:	00002e06 	br	808bc <convertKeyboardToAscii+0x1e0>
		case 0x21:
			return 'c';
   80804:	010018c4 	movi	r4,99
   80808:	e13ffe15 	stw	r4,-8(fp)
   8080c:	00002b06 	br	808bc <convertKeyboardToAscii+0x1e0>
		case 0x23:
			return 'd';
   80810:	00801904 	movi	r2,100
   80814:	e0bffe15 	stw	r2,-8(fp)
   80818:	00002806 	br	808bc <convertKeyboardToAscii+0x1e0>
		case 0x24:
			return 'e';
   8081c:	00c01944 	movi	r3,101
   80820:	e0fffe15 	stw	r3,-8(fp)
   80824:	00002506 	br	808bc <convertKeyboardToAscii+0x1e0>
		case 0x2B:
			return 'f';
   80828:	01001984 	movi	r4,102
   8082c:	e13ffe15 	stw	r4,-8(fp)
   80830:	00002206 	br	808bc <convertKeyboardToAscii+0x1e0>
		case 0x34:
			return 'g';
   80834:	008019c4 	movi	r2,103
   80838:	e0bffe15 	stw	r2,-8(fp)
   8083c:	00001f06 	br	808bc <convertKeyboardToAscii+0x1e0>

		/* NUMBERS */
		case 0x45:
			return '0';
   80840:	00c00c04 	movi	r3,48
   80844:	e0fffe15 	stw	r3,-8(fp)
   80848:	00001c06 	br	808bc <convertKeyboardToAscii+0x1e0>
		case 0x16:
			return '1';
   8084c:	01000c44 	movi	r4,49
   80850:	e13ffe15 	stw	r4,-8(fp)
   80854:	00001906 	br	808bc <convertKeyboardToAscii+0x1e0>
		case 0x1E:
			return '2';
   80858:	00800c84 	movi	r2,50
   8085c:	e0bffe15 	stw	r2,-8(fp)
   80860:	00001606 	br	808bc <convertKeyboardToAscii+0x1e0>
		case 0x26:
			return '3';
   80864:	00c00cc4 	movi	r3,51
   80868:	e0fffe15 	stw	r3,-8(fp)
   8086c:	00001306 	br	808bc <convertKeyboardToAscii+0x1e0>
		case 0x25:
			return '4';
   80870:	01000d04 	movi	r4,52
   80874:	e13ffe15 	stw	r4,-8(fp)
   80878:	00001006 	br	808bc <convertKeyboardToAscii+0x1e0>
		case 0x2E:
			return '5';
   8087c:	00800d44 	movi	r2,53
   80880:	e0bffe15 	stw	r2,-8(fp)
   80884:	00000d06 	br	808bc <convertKeyboardToAscii+0x1e0>
		case 0x36:
			return '6';
   80888:	00c00d84 	movi	r3,54
   8088c:	e0fffe15 	stw	r3,-8(fp)
   80890:	00000a06 	br	808bc <convertKeyboardToAscii+0x1e0>
		case 0x3D:
			return '7';
   80894:	01000dc4 	movi	r4,55
   80898:	e13ffe15 	stw	r4,-8(fp)
   8089c:	00000706 	br	808bc <convertKeyboardToAscii+0x1e0>
		case 0x3E:
			return '8';
   808a0:	00800e04 	movi	r2,56
   808a4:	e0bffe15 	stw	r2,-8(fp)
   808a8:	00000406 	br	808bc <convertKeyboardToAscii+0x1e0>
		case 0x46:
			return '9';
   808ac:	00c00e44 	movi	r3,57
   808b0:	e0fffe15 	stw	r3,-8(fp)
   808b4:	00000106 	br	808bc <convertKeyboardToAscii+0x1e0>
	}

	return NULL_TERMINATE;
   808b8:	e03ffe15 	stw	zero,-8(fp)
   808bc:	e0bffe17 	ldw	r2,-8(fp)
}
   808c0:	e037883a 	mov	sp,fp
   808c4:	df000017 	ldw	fp,0(sp)
   808c8:	dec00104 	addi	sp,sp,4
   808cc:	f800283a 	ret

000808d0 <updateKeyKeys>:
#include "keys.h"

void updateKeyKeys(char* keys_char)
{
   808d0:	defff804 	addi	sp,sp,-32
   808d4:	df000715 	stw	fp,28(sp)
   808d8:	df000704 	addi	fp,sp,28
   808dc:	e13ffa15 	stw	r4,-24(fp)
	unsigned char keys_binary = ~IORD_ALTERA_AVALON_PIO_DATA(PIO_INPUT_KEY_BASE);
   808e0:	00800434 	movhi	r2,16
   808e4:	10859404 	addi	r2,r2,5712
   808e8:	10800037 	ldwio	r2,0(r2)
   808ec:	0084303a 	nor	r2,zero,r2
   808f0:	e0bff905 	stb	r2,-28(fp)
	keys_char[0] = ((keys_binary & 1) == 1 ? '1' : ' ');
   808f4:	e0bff903 	ldbu	r2,-28(fp)
   808f8:	1080004c 	andi	r2,r2,1
   808fc:	10803fcc 	andi	r2,r2,255
   80900:	1005003a 	cmpeq	r2,r2,zero
   80904:	1000031e 	bne	r2,zero,80914 <updateKeyKeys+0x44>
   80908:	00800c44 	movi	r2,49
   8090c:	e0bfff05 	stb	r2,-4(fp)
   80910:	00000206 	br	8091c <updateKeyKeys+0x4c>
   80914:	00c00804 	movi	r3,32
   80918:	e0ffff05 	stb	r3,-4(fp)
   8091c:	e0bffa17 	ldw	r2,-24(fp)
   80920:	e0ffff03 	ldbu	r3,-4(fp)
   80924:	10c00005 	stb	r3,0(r2)
	keys_char[1] = ((keys_binary & 2) == 2 ? '2' : ' ');
   80928:	e0bffa17 	ldw	r2,-24(fp)
   8092c:	10800044 	addi	r2,r2,1
   80930:	e0bffe15 	stw	r2,-8(fp)
   80934:	e0bff903 	ldbu	r2,-28(fp)
   80938:	1080008c 	andi	r2,r2,2
   8093c:	1005003a 	cmpeq	r2,r2,zero
   80940:	1000031e 	bne	r2,zero,80950 <updateKeyKeys+0x80>
   80944:	00800c84 	movi	r2,50
   80948:	e0bffd05 	stb	r2,-12(fp)
   8094c:	00000206 	br	80958 <updateKeyKeys+0x88>
   80950:	00c00804 	movi	r3,32
   80954:	e0fffd05 	stb	r3,-12(fp)
   80958:	e0bffd03 	ldbu	r2,-12(fp)
   8095c:	e0fffe17 	ldw	r3,-8(fp)
   80960:	18800005 	stb	r2,0(r3)
	keys_char[2] = ((keys_binary & 4) == 4 ? '3' : ' ');
   80964:	e0bffa17 	ldw	r2,-24(fp)
   80968:	10800084 	addi	r2,r2,2
   8096c:	e0bffc15 	stw	r2,-16(fp)
   80970:	e0bff903 	ldbu	r2,-28(fp)
   80974:	1080010c 	andi	r2,r2,4
   80978:	1005003a 	cmpeq	r2,r2,zero
   8097c:	1000031e 	bne	r2,zero,8098c <updateKeyKeys+0xbc>
   80980:	00800cc4 	movi	r2,51
   80984:	e0bffb05 	stb	r2,-20(fp)
   80988:	00000206 	br	80994 <updateKeyKeys+0xc4>
   8098c:	00c00804 	movi	r3,32
   80990:	e0fffb05 	stb	r3,-20(fp)
   80994:	e0bffb03 	ldbu	r2,-20(fp)
   80998:	e0fffc17 	ldw	r3,-16(fp)
   8099c:	18800005 	stb	r2,0(r3)
	keys_char[3] = NULL_TERMINATE;
   809a0:	e0bffa17 	ldw	r2,-24(fp)
   809a4:	108000c4 	addi	r2,r2,3
   809a8:	10000005 	stb	zero,0(r2)
}
   809ac:	e037883a 	mov	sp,fp
   809b0:	df000017 	ldw	fp,0(sp)
   809b4:	dec00104 	addi	sp,sp,4
   809b8:	f800283a 	ret

000809bc <initCodecAsMaster>:
#define SOUND_HERTZ 48000
#define MAX_CODEC_SIZE 16777216
#define HALF_MAX_CODEC_SIZE (MAX_CODEC_SIZE/2)
#define PI 3.14159265

void initCodecAsMaster(void){
   809bc:	defffc04 	addi	sp,sp,-16
   809c0:	dfc00315 	stw	ra,12(sp)
   809c4:	df000215 	stw	fp,8(sp)
   809c8:	df000204 	addi	fp,sp,8
	int err = 0;
   809cc:	e03fff15 	stw	zero,-4(fp)
	alt_up_av_config_dev* audio_dev = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
   809d0:	01000274 	movhi	r4,9
   809d4:	2109ee04 	addi	r4,r4,10168
   809d8:	00905500 	call	90550 <alt_up_av_config_open_dev>
   809dc:	e0bffe15 	stw	r2,-8(fp)
	err = alt_up_av_config_write_audio_cfg_register(audio_dev, 0x00, 0x17); // Left line-in 0dB attn, Mute disable
   809e0:	e13ffe17 	ldw	r4,-8(fp)
   809e4:	000b883a 	mov	r5,zero
   809e8:	018005c4 	movi	r6,23
   809ec:	00907e40 	call	907e4 <alt_up_av_config_write_audio_cfg_register>
   809f0:	e0bfff15 	stw	r2,-4(fp)
	err = alt_up_av_config_write_audio_cfg_register(audio_dev, 0x01, 0x17); // Right line-in 0dB attn, Mute disable
   809f4:	e13ffe17 	ldw	r4,-8(fp)
   809f8:	01400044 	movi	r5,1
   809fc:	018005c4 	movi	r6,23
   80a00:	00907e40 	call	907e4 <alt_up_av_config_write_audio_cfg_register>
   80a04:	e0bfff15 	stw	r2,-4(fp)
	err = alt_up_av_config_write_audio_cfg_register(audio_dev, 0x02, 0x79);
   80a08:	e13ffe17 	ldw	r4,-8(fp)
   80a0c:	01400084 	movi	r5,2
   80a10:	01801e44 	movi	r6,121
   80a14:	00907e40 	call	907e4 <alt_up_av_config_write_audio_cfg_register>
   80a18:	e0bfff15 	stw	r2,-4(fp)
	err = alt_up_av_config_write_audio_cfg_register(audio_dev, 0x03, 0x79);
   80a1c:	e13ffe17 	ldw	r4,-8(fp)
   80a20:	014000c4 	movi	r5,3
   80a24:	01801e44 	movi	r6,121
   80a28:	00907e40 	call	907e4 <alt_up_av_config_write_audio_cfg_register>
   80a2c:	e0bfff15 	stw	r2,-4(fp)
	err = alt_up_av_config_write_audio_cfg_register(audio_dev, 0x04, 0x12);
   80a30:	e13ffe17 	ldw	r4,-8(fp)
   80a34:	01400104 	movi	r5,4
   80a38:	01800484 	movi	r6,18
   80a3c:	00907e40 	call	907e4 <alt_up_av_config_write_audio_cfg_register>
   80a40:	e0bfff15 	stw	r2,-4(fp)
	err = alt_up_av_config_write_audio_cfg_register(audio_dev, 0x05, 0x00);
   80a44:	e13ffe17 	ldw	r4,-8(fp)
   80a48:	01400144 	movi	r5,5
   80a4c:	000d883a 	mov	r6,zero
   80a50:	00907e40 	call	907e4 <alt_up_av_config_write_audio_cfg_register>
   80a54:	e0bfff15 	stw	r2,-4(fp)
	err = alt_up_av_config_write_audio_cfg_register(audio_dev, 0x06, 0x00);
   80a58:	e13ffe17 	ldw	r4,-8(fp)
   80a5c:	01400184 	movi	r5,6
   80a60:	000d883a 	mov	r6,zero
   80a64:	00907e40 	call	907e4 <alt_up_av_config_write_audio_cfg_register>
   80a68:	e0bfff15 	stw	r2,-4(fp)
	err = alt_up_av_config_write_audio_cfg_register(audio_dev, 0x07, 0x4A);
   80a6c:	e13ffe17 	ldw	r4,-8(fp)
   80a70:	014001c4 	movi	r5,7
   80a74:	01801284 	movi	r6,74
   80a78:	00907e40 	call	907e4 <alt_up_av_config_write_audio_cfg_register>
   80a7c:	e0bfff15 	stw	r2,-4(fp)
	err = alt_up_av_config_write_audio_cfg_register(audio_dev, 0x08, 0x01);
   80a80:	e13ffe17 	ldw	r4,-8(fp)
   80a84:	01400204 	movi	r5,8
   80a88:	01800044 	movi	r6,1
   80a8c:	00907e40 	call	907e4 <alt_up_av_config_write_audio_cfg_register>
   80a90:	e0bfff15 	stw	r2,-4(fp)
	err = alt_up_av_config_write_audio_cfg_register(audio_dev, 0x09, 0x01);
   80a94:	e13ffe17 	ldw	r4,-8(fp)
   80a98:	01400244 	movi	r5,9
   80a9c:	01800044 	movi	r6,1
   80aa0:	00907e40 	call	907e4 <alt_up_av_config_write_audio_cfg_register>
   80aa4:	e0bfff15 	stw	r2,-4(fp)
	if(err < 0)
   80aa8:	e0bfff17 	ldw	r2,-4(fp)
   80aac:	1004403a 	cmpge	r2,r2,zero
   80ab0:	1000041e 	bne	r2,zero,80ac4 <initCodecAsMaster+0x108>
		printf("Audio Configuration Failed\n");
   80ab4:	01000274 	movhi	r4,9
   80ab8:	2109f604 	addi	r4,r4,10200
   80abc:	00868f40 	call	868f4 <puts>
   80ac0:	00000306 	br	80ad0 <initCodecAsMaster+0x114>
	else
		printf("Audio Configuration Succesful\n");
   80ac4:	01000274 	movhi	r4,9
   80ac8:	2109fd04 	addi	r4,r4,10228
   80acc:	00868f40 	call	868f4 <puts>
}
   80ad0:	e037883a 	mov	sp,fp
   80ad4:	dfc00117 	ldw	ra,4(sp)
   80ad8:	df000017 	ldw	fp,0(sp)
   80adc:	dec00204 	addi	sp,sp,8
   80ae0:	f800283a 	ret

00080ae4 <main>:

int main(void)
{
   80ae4:	deffb404 	addi	sp,sp,-304
   80ae8:	dfc04b15 	stw	ra,300(sp)
   80aec:	df004a15 	stw	fp,296(sp)
   80af0:	dc804915 	stw	r18,292(sp)
   80af4:	dc404815 	stw	r17,288(sp)
   80af8:	dc004715 	stw	r16,284(sp)
   80afc:	df004704 	addi	fp,sp,284
	/* Used for sound buffer */
	long quarter_sound_samples[QUARTER_SOUND_SAMPLES];
	unsigned char quarter_samples = 0, full_samples = 0, sample_i = 0;
   80b00:	e03fbe85 	stb	zero,-262(fp)
   80b04:	e03fbe45 	stb	zero,-263(fp)
   80b08:	e03fbe05 	stb	zero,-264(fp)
	int hertz = 0, old_hertz = 0;
   80b0c:	e03fbd15 	stw	zero,-268(fp)
   80b10:	e03fbc15 	stw	zero,-272(fp)
	char key_keys[KEY_BUFFER_SIZE_WITH_TERMINATE];

	/* used for PS/2 port data */
	alt_up_ps2_dev *PS2_dev;
	unsigned char keyboard_keys[KEYBOARD_BUFFER_SIZE_WITH_TERMINATE];
	unsigned char keyboard_key = NULL_TERMINATE, keyboard_oldkey = NULL_TERMINATE, i=0;
   80b14:	e03fba85 	stb	zero,-278(fp)
   80b18:	e03fba45 	stb	zero,-279(fp)
   80b1c:	e03fba05 	stb	zero,-280(fp)

	// Init Keyboard-buffer - also the extra space in the end (constantly null terminate)
	for(i=0; i<KEYBOARD_BUFFER_SIZE_WITH_TERMINATE;i++)
   80b20:	e03fba05 	stb	zero,-280(fp)
   80b24:	00000706 	br	80b44 <main+0x60>
	{
		keyboard_keys[i] = NULL_TERMINATE;
   80b28:	e0ffba03 	ldbu	r3,-280(fp)
   80b2c:	e0bffcc4 	addi	r2,fp,-13
   80b30:	10c5883a 	add	r2,r2,r3
   80b34:	10000005 	stb	zero,0(r2)
	alt_up_ps2_dev *PS2_dev;
	unsigned char keyboard_keys[KEYBOARD_BUFFER_SIZE_WITH_TERMINATE];
	unsigned char keyboard_key = NULL_TERMINATE, keyboard_oldkey = NULL_TERMINATE, i=0;

	// Init Keyboard-buffer - also the extra space in the end (constantly null terminate)
	for(i=0; i<KEYBOARD_BUFFER_SIZE_WITH_TERMINATE;i++)
   80b38:	e0bfba03 	ldbu	r2,-280(fp)
   80b3c:	10800044 	addi	r2,r2,1
   80b40:	e0bfba05 	stb	r2,-280(fp)
   80b44:	e0bfba03 	ldbu	r2,-280(fp)
   80b48:	108001f0 	cmpltui	r2,r2,7
   80b4c:	103ff61e 	bne	r2,zero,80b28 <main+0x44>
	{
		keyboard_keys[i] = NULL_TERMINATE;
	}

	initCodecAsMaster();
   80b50:	00809bc0 	call	809bc <initCodecAsMaster>

	// Open the PS2 port
	PS2_dev = alt_up_ps2_open_dev (PS2_PORT_NAME);
   80b54:	01000274 	movhi	r4,9
   80b58:	210a0504 	addi	r4,r4,10260
   80b5c:	00913980 	call	91398 <alt_up_ps2_open_dev>
   80b60:	e0bfbb15 	stw	r2,-276(fp)
	if (PS2_dev == NULL)
   80b64:	e0bfbb17 	ldw	r2,-276(fp)
   80b68:	1004c03a 	cmpne	r2,r2,zero
   80b6c:	1000061e 	bne	r2,zero,80b88 <main+0xa4>
	{
		alt_printf ("Error: could not open PS/2 device!!!\n");
   80b70:	01000274 	movhi	r4,9
   80b74:	210a0904 	addi	r4,r4,10276
   80b78:	008e1d40 	call	8e1d4 <alt_printf>
		return -1;
   80b7c:	00bfffc4 	movi	r2,-1
   80b80:	e0bfff15 	stw	r2,-4(fp)
   80b84:	0000ed06 	br	80f3c <main+0x458>
	}
	else
	{
		alt_printf ("Opened PS/2 device\n");
   80b88:	01000274 	movhi	r4,9
   80b8c:	210a1304 	addi	r4,r4,10316
   80b90:	008e1d40 	call	8e1d4 <alt_printf>
		(void) alt_up_ps2_write_data_byte (PS2_dev, 0xFF);	// Reset PS/2
   80b94:	e13fbb17 	ldw	r4,-276(fp)
   80b98:	01403fc4 	movi	r5,255
   80b9c:	0090f7c0 	call	90f7c <alt_up_ps2_write_data_byte>
   80ba0:	00000006 	br	80ba4 <main+0xc0>
	}

	// Loop main functions
	while(1)
	{
		long switches = IORD_ALTERA_AVALON_PIO_DATA(PIO_INPUT_SW_BASE);
   80ba4:	00800434 	movhi	r2,16
   80ba8:	10859c04 	addi	r2,r2,5744
   80bac:	10800037 	ldwio	r2,0(r2)
   80bb0:	e0bfb915 	stw	r2,-284(fp)
		if(switches & 1 == 1)
   80bb4:	e0bfb917 	ldw	r2,-284(fp)
   80bb8:	1080004c 	andi	r2,r2,1
   80bbc:	10803fcc 	andi	r2,r2,255
   80bc0:	1005003a 	cmpeq	r2,r2,zero
   80bc4:	10000c1e 	bne	r2,zero,80bf8 <main+0x114>
		{
			updateKeyKeys(&key_keys);
   80bc8:	e13ffb04 	addi	r4,fp,-20
   80bcc:	00808d00 	call	808d0 <updateKeyKeys>

			// Write information on LCD
			writeToLCD("Keys pressed:",1);
   80bd0:	01000274 	movhi	r4,9
   80bd4:	210a1804 	addi	r4,r4,10336
   80bd8:	01400044 	movi	r5,1
   80bdc:	00802dc0 	call	802dc <writeToLCD>
			writeToLCD(key_keys,2);
   80be0:	e13ffb04 	addi	r4,fp,-20
   80be4:	01400084 	movi	r5,2
   80be8:	00802dc0 	call	802dc <writeToLCD>
			hertz= 440;
   80bec:	00806e04 	movi	r2,440
   80bf0:	e0bfbd15 	stw	r2,-268(fp)
   80bf4:	00001806 	br	80c58 <main+0x174>
		} else
		{
			keyboard_key = updateKeyboardKeys(PS2_dev,&keyboard_keys,KEYBOARD_BUFFER_SIZE);
   80bf8:	e17ffcc4 	addi	r5,fp,-13
   80bfc:	e13fbb17 	ldw	r4,-276(fp)
   80c00:	01800184 	movi	r6,6
   80c04:	008038c0 	call	8038c <updateKeyboardKeys>
   80c08:	e0bfba85 	stb	r2,-278(fp)
			if(keyboard_key != keyboard_oldkey)
   80c0c:	e0ffba83 	ldbu	r3,-278(fp)
   80c10:	e0bfba43 	ldbu	r2,-279(fp)
   80c14:	18800926 	beq	r3,r2,80c3c <main+0x158>
			{
				printf ("Last pressed down PS/2-key: %c\n", keyboard_key);
   80c18:	e17fba83 	ldbu	r5,-278(fp)
   80c1c:	01000274 	movhi	r4,9
   80c20:	210a1c04 	addi	r4,r4,10352
   80c24:	00867dc0 	call	867dc <printf>
				keyboard_oldkey = keyboard_key;
   80c28:	e0bfba83 	ldbu	r2,-278(fp)
   80c2c:	e0bfba45 	stb	r2,-279(fp)
				hertz = keyboardKeyToHertz(keyboard_key);
   80c30:	e13fba83 	ldbu	r4,-278(fp)
   80c34:	00805d00 	call	805d0 <keyboardKeyToHertz>
   80c38:	e0bfbd15 	stw	r2,-268(fp)
				//hertz = getHertzFromKeyboardKey(keyboard_key);

			}

			// Write information on LCD
			writeToLCD("Keyboard press:",1);
   80c3c:	01000274 	movhi	r4,9
   80c40:	210a2404 	addi	r4,r4,10384
   80c44:	01400044 	movi	r5,1
   80c48:	00802dc0 	call	802dc <writeToLCD>
			writeToLCD(keyboard_keys,2);
   80c4c:	e13ffcc4 	addi	r4,fp,-13
   80c50:	01400084 	movi	r5,2
   80c54:	00802dc0 	call	802dc <writeToLCD>
		}

		// Do all the sound-things if hertz have changed!
		if(hertz != old_hertz)
   80c58:	e0ffbd17 	ldw	r3,-268(fp)
   80c5c:	e0bfbc17 	ldw	r2,-272(fp)
   80c60:	18bfd026 	beq	r3,r2,80ba4 <main+0xc0>
		{
			old_hertz = hertz;
   80c64:	e0bfbd17 	ldw	r2,-268(fp)
   80c68:	e0bfbc15 	stw	r2,-272(fp)

			printBCDon7Seg(hertz);
   80c6c:	e13fbd17 	ldw	r4,-268(fp)
   80c70:	008029c0 	call	8029c <printBCDon7Seg>
			printf("Printed hertz: %u\n",hertz);
   80c74:	01000274 	movhi	r4,9
   80c78:	210a2804 	addi	r4,r4,10400
   80c7c:	e17fbd17 	ldw	r5,-268(fp)
   80c80:	00867dc0 	call	867dc <printf>

			// Find sound-samples and send to VHDL
			if(hertz == 0)
   80c84:	e0bfbd17 	ldw	r2,-268(fp)
   80c88:	1005003a 	cmpeq	r2,r2,zero
   80c8c:	103fc51e 	bne	r2,zero,80ba4 <main+0xc0>
			{
				// SEND 0 to VHDL
			}
			else
			{
				quarter_samples = SOUND_HERTZ/hertz/4;
   80c90:	010bb804 	movi	r4,12000
   80c94:	e17fbd17 	ldw	r5,-268(fp)
   80c98:	00843000 	call	84300 <__divsi3>
   80c9c:	e0bfbe85 	stb	r2,-262(fp)
				full_samples = quarter_samples*4;
   80ca0:	e0bfbe83 	ldbu	r2,-262(fp)
   80ca4:	1085883a 	add	r2,r2,r2
   80ca8:	1085883a 	add	r2,r2,r2
   80cac:	e0bfbe45 	stb	r2,-263(fp)

				// Write number of samples to RAM-controller
				IOWR_16DIRECT(RAM_SOUND_0_BASE, 0, full_samples);
   80cb0:	e0ffbe43 	ldbu	r3,-263(fp)
   80cb4:	0005883a 	mov	r2,zero
   80cb8:	10c0002d 	sthio	r3,0(r2)

				if(quarter_samples > QUARTER_SOUND_SAMPLES)
   80cbc:	e0bfbe83 	ldbu	r2,-262(fp)
   80cc0:	10800f70 	cmpltui	r2,r2,61
   80cc4:	1000071e 	bne	r2,zero,80ce4 <main+0x200>
				{
					printf("ERROR: Number of samples (%u) exceeds size of sample-buffer (%u) for %u Hz!\n",
   80cc8:	e17fbe43 	ldbu	r5,-263(fp)
   80ccc:	01000274 	movhi	r4,9
   80cd0:	210a2d04 	addi	r4,r4,10420
   80cd4:	01803c04 	movi	r6,240
   80cd8:	e1ffbd17 	ldw	r7,-268(fp)
   80cdc:	00867dc0 	call	867dc <printf>
   80ce0:	003fb006 	br	80ba4 <main+0xc0>
							full_samples, QUARTER_SOUND_SAMPLES*4, hertz);
				}
				else
				{
					// FIRST QUARTER
					for(sample_i = 0; sample_i < quarter_samples; sample_i++)
   80ce4:	e03fbe05 	stb	zero,-264(fp)
   80ce8:	00004c06 	br	80e1c <main+0x338>
					{
						quarter_sound_samples[sample_i] = (1+sin((sample_i*2*PI)/full_samples))*HALF_MAX_CODEC_SIZE;
   80cec:	e4bfbe03 	ldbu	r18,-264(fp)
   80cf0:	e0bfbe03 	ldbu	r2,-264(fp)
   80cf4:	1085883a 	add	r2,r2,r2
   80cf8:	1009883a 	mov	r4,r2
   80cfc:	00840b40 	call	840b4 <__floatsidf>
   80d00:	100b883a 	mov	r5,r2
   80d04:	180d883a 	mov	r6,r3
   80d08:	2809883a 	mov	r4,r5
   80d0c:	300b883a 	mov	r5,r6
   80d10:	0194f274 	movhi	r6,21449
   80d14:	31b53c44 	addi	r6,r6,-11023
   80d18:	01d00274 	movhi	r7,16393
   80d1c:	39c87ec4 	addi	r7,r7,8699
   80d20:	00839000 	call	83900 <__muldf3>
   80d24:	1009883a 	mov	r4,r2
   80d28:	180b883a 	mov	r5,r3
   80d2c:	2021883a 	mov	r16,r4
   80d30:	2823883a 	mov	r17,r5
   80d34:	e13fbe43 	ldbu	r4,-263(fp)
   80d38:	00840b40 	call	840b4 <__floatsidf>
   80d3c:	100f883a 	mov	r7,r2
   80d40:	1811883a 	mov	r8,r3
   80d44:	8009883a 	mov	r4,r16
   80d48:	880b883a 	mov	r5,r17
   80d4c:	380d883a 	mov	r6,r7
   80d50:	400f883a 	mov	r7,r8
   80d54:	0083cc40 	call	83cc4 <__divdf3>
   80d58:	1009883a 	mov	r4,r2
   80d5c:	180b883a 	mov	r5,r3
   80d60:	2005883a 	mov	r2,r4
   80d64:	2807883a 	mov	r3,r5
   80d68:	1009883a 	mov	r4,r2
   80d6c:	180b883a 	mov	r5,r3
   80d70:	0080f600 	call	80f60 <sin>
   80d74:	100b883a 	mov	r5,r2
   80d78:	180d883a 	mov	r6,r3
   80d7c:	2809883a 	mov	r4,r5
   80d80:	300b883a 	mov	r5,r6
   80d84:	000d883a 	mov	r6,zero
   80d88:	01cffc34 	movhi	r7,16368
   80d8c:	008388c0 	call	8388c <__adddf3>
   80d90:	1009883a 	mov	r4,r2
   80d94:	180b883a 	mov	r5,r3
   80d98:	2005883a 	mov	r2,r4
   80d9c:	2807883a 	mov	r3,r5
   80da0:	1009883a 	mov	r4,r2
   80da4:	180b883a 	mov	r5,r3
   80da8:	000d883a 	mov	r6,zero
   80dac:	01d05834 	movhi	r7,16736
   80db0:	00839000 	call	83900 <__muldf3>
   80db4:	1009883a 	mov	r4,r2
   80db8:	180b883a 	mov	r5,r3
   80dbc:	2005883a 	mov	r2,r4
   80dc0:	2807883a 	mov	r3,r5
   80dc4:	1009883a 	mov	r4,r2
   80dc8:	180b883a 	mov	r5,r3
   80dcc:	00841ac0 	call	841ac <__fixdfsi>
   80dd0:	1007883a 	mov	r3,r2
   80dd4:	9485883a 	add	r2,r18,r18
   80dd8:	1085883a 	add	r2,r2,r2
   80ddc:	e13fb904 	addi	r4,fp,-284
   80de0:	1105883a 	add	r2,r2,r4
   80de4:	10800604 	addi	r2,r2,24
   80de8:	10c00015 	stw	r3,0(r2)
						//printf("%u,",quarter_sound_samples[sample_i]);
						IOWR_16DIRECT(RAM_SOUND_0_BASE, 4, quarter_sound_samples[sample_i]);
   80dec:	e0bfbe03 	ldbu	r2,-264(fp)
   80df0:	1085883a 	add	r2,r2,r2
   80df4:	1085883a 	add	r2,r2,r2
   80df8:	e0ffb904 	addi	r3,fp,-284
   80dfc:	10c5883a 	add	r2,r2,r3
   80e00:	10800604 	addi	r2,r2,24
   80e04:	10c00017 	ldw	r3,0(r2)
   80e08:	00800104 	movi	r2,4
   80e0c:	10c0002d 	sthio	r3,0(r2)
							full_samples, QUARTER_SOUND_SAMPLES*4, hertz);
				}
				else
				{
					// FIRST QUARTER
					for(sample_i = 0; sample_i < quarter_samples; sample_i++)
   80e10:	e0bfbe03 	ldbu	r2,-264(fp)
   80e14:	10800044 	addi	r2,r2,1
   80e18:	e0bfbe05 	stb	r2,-264(fp)
   80e1c:	e0ffbe03 	ldbu	r3,-264(fp)
   80e20:	e0bfbe83 	ldbu	r2,-262(fp)
   80e24:	18bfb136 	bltu	r3,r2,80cec <main+0x208>
						//printf("%u,",quarter_sound_samples[sample_i]);
						IOWR_16DIRECT(RAM_SOUND_0_BASE, 4, quarter_sound_samples[sample_i]);
					}

					// SECOND QUARTER
					for(sample_i = quarter_samples; sample_i > 0; sample_i--)
   80e28:	e0bfbe83 	ldbu	r2,-262(fp)
   80e2c:	e0bfbe05 	stb	r2,-264(fp)
   80e30:	00000d06 	br	80e68 <main+0x384>
					{
						// SEND TO PORT
						//printf("%u,",quarter_sound_samples[sample_i-1]);
						IOWR_16DIRECT(RAM_SOUND_0_BASE, 4, quarter_sound_samples[sample_i-1]);
   80e34:	e0bfbe03 	ldbu	r2,-264(fp)
   80e38:	10bfffc4 	addi	r2,r2,-1
   80e3c:	1085883a 	add	r2,r2,r2
   80e40:	1085883a 	add	r2,r2,r2
   80e44:	e13fb904 	addi	r4,fp,-284
   80e48:	1105883a 	add	r2,r2,r4
   80e4c:	10800604 	addi	r2,r2,24
   80e50:	10c00017 	ldw	r3,0(r2)
   80e54:	00800104 	movi	r2,4
   80e58:	10c0002d 	sthio	r3,0(r2)
						//printf("%u,",quarter_sound_samples[sample_i]);
						IOWR_16DIRECT(RAM_SOUND_0_BASE, 4, quarter_sound_samples[sample_i]);
					}

					// SECOND QUARTER
					for(sample_i = quarter_samples; sample_i > 0; sample_i--)
   80e5c:	e0bfbe03 	ldbu	r2,-264(fp)
   80e60:	10bfffc4 	addi	r2,r2,-1
   80e64:	e0bfbe05 	stb	r2,-264(fp)
   80e68:	e0bfbe03 	ldbu	r2,-264(fp)
   80e6c:	1004c03a 	cmpne	r2,r2,zero
   80e70:	103ff01e 	bne	r2,zero,80e34 <main+0x350>
						//printf("%u,",quarter_sound_samples[sample_i-1]);
						IOWR_16DIRECT(RAM_SOUND_0_BASE, 4, quarter_sound_samples[sample_i-1]);
					}

					// THIRD QUARTER
					for(sample_i = 0; sample_i < quarter_samples; sample_i++)
   80e74:	e03fbe05 	stb	zero,-264(fp)
   80e78:	00000e06 	br	80eb4 <main+0x3d0>
					{
						// SEND TO PORT
						//printf("%u,", MAX_CODEC_SIZE-quarter_sound_samples[sample_i]);
						IOWR_16DIRECT(RAM_SOUND_0_BASE, 4, MAX_CODEC_SIZE-quarter_sound_samples[sample_i]);
   80e7c:	e0bfbe03 	ldbu	r2,-264(fp)
   80e80:	1085883a 	add	r2,r2,r2
   80e84:	1085883a 	add	r2,r2,r2
   80e88:	e0ffb904 	addi	r3,fp,-284
   80e8c:	10c5883a 	add	r2,r2,r3
   80e90:	10800604 	addi	r2,r2,24
   80e94:	10c00017 	ldw	r3,0(r2)
   80e98:	00804034 	movhi	r2,256
   80e9c:	10c7c83a 	sub	r3,r2,r3
   80ea0:	00800104 	movi	r2,4
   80ea4:	10c0002d 	sthio	r3,0(r2)
						//printf("%u,",quarter_sound_samples[sample_i-1]);
						IOWR_16DIRECT(RAM_SOUND_0_BASE, 4, quarter_sound_samples[sample_i-1]);
					}

					// THIRD QUARTER
					for(sample_i = 0; sample_i < quarter_samples; sample_i++)
   80ea8:	e0bfbe03 	ldbu	r2,-264(fp)
   80eac:	10800044 	addi	r2,r2,1
   80eb0:	e0bfbe05 	stb	r2,-264(fp)
   80eb4:	e0ffbe03 	ldbu	r3,-264(fp)
   80eb8:	e0bfbe83 	ldbu	r2,-262(fp)
   80ebc:	18bfef36 	bltu	r3,r2,80e7c <main+0x398>
						//printf("%u,", MAX_CODEC_SIZE-quarter_sound_samples[sample_i]);
						IOWR_16DIRECT(RAM_SOUND_0_BASE, 4, MAX_CODEC_SIZE-quarter_sound_samples[sample_i]);
					}

					// FOURTH QUARTER
					for(sample_i = quarter_samples; sample_i > 0; sample_i--)
   80ec0:	e0bfbe83 	ldbu	r2,-262(fp)
   80ec4:	e0bfbe05 	stb	r2,-264(fp)
   80ec8:	00000f06 	br	80f08 <main+0x424>
					{
						// SEND TO PORT
						//printf("%u,",MAX_CODEC_SIZE-quarter_sound_samples[sample_i-1]);
						IOWR_16DIRECT(RAM_SOUND_0_BASE, 4, MAX_CODEC_SIZE-quarter_sound_samples[sample_i-1]);
   80ecc:	e0bfbe03 	ldbu	r2,-264(fp)
   80ed0:	10bfffc4 	addi	r2,r2,-1
   80ed4:	1085883a 	add	r2,r2,r2
   80ed8:	1085883a 	add	r2,r2,r2
   80edc:	e13fb904 	addi	r4,fp,-284
   80ee0:	1105883a 	add	r2,r2,r4
   80ee4:	10800604 	addi	r2,r2,24
   80ee8:	10c00017 	ldw	r3,0(r2)
   80eec:	00804034 	movhi	r2,256
   80ef0:	10c7c83a 	sub	r3,r2,r3
   80ef4:	00800104 	movi	r2,4
   80ef8:	10c0002d 	sthio	r3,0(r2)
						//printf("%u,", MAX_CODEC_SIZE-quarter_sound_samples[sample_i]);
						IOWR_16DIRECT(RAM_SOUND_0_BASE, 4, MAX_CODEC_SIZE-quarter_sound_samples[sample_i]);
					}

					// FOURTH QUARTER
					for(sample_i = quarter_samples; sample_i > 0; sample_i--)
   80efc:	e0bfbe03 	ldbu	r2,-264(fp)
   80f00:	10bfffc4 	addi	r2,r2,-1
   80f04:	e0bfbe05 	stb	r2,-264(fp)
   80f08:	e0bfbe03 	ldbu	r2,-264(fp)
   80f0c:	1004c03a 	cmpne	r2,r2,zero
   80f10:	103fee1e 	bne	r2,zero,80ecc <main+0x3e8>
						// SEND TO PORT
						//printf("%u,",MAX_CODEC_SIZE-quarter_sound_samples[sample_i-1]);
						IOWR_16DIRECT(RAM_SOUND_0_BASE, 4, MAX_CODEC_SIZE-quarter_sound_samples[sample_i-1]);
					}

					printf("Printed %u samples to MM\n",full_samples);
   80f14:	e17fbe43 	ldbu	r5,-263(fp)
   80f18:	01000274 	movhi	r4,9
   80f1c:	210a4104 	addi	r4,r4,10500
   80f20:	00867dc0 	call	867dc <printf>
					IOWR_16DIRECT(RAM_SOUND_0_BASE, 2, 0);
   80f24:	00800084 	movi	r2,2
   80f28:	1000002d 	sthio	zero,0(r2)
					printf("Started playing...\n");
   80f2c:	01000274 	movhi	r4,9
   80f30:	210a4804 	addi	r4,r4,10528
   80f34:	00868f40 	call	868f4 <puts>
				}
			}
		}
	}
   80f38:	003f1a06 	br	80ba4 <main+0xc0>
}
   80f3c:	e0bfff17 	ldw	r2,-4(fp)
   80f40:	e037883a 	mov	sp,fp
   80f44:	dfc00417 	ldw	ra,16(sp)
   80f48:	df000317 	ldw	fp,12(sp)
   80f4c:	dc800217 	ldw	r18,8(sp)
   80f50:	dc400117 	ldw	r17,4(sp)
   80f54:	dc000017 	ldw	r16,0(sp)
   80f58:	dec00504 	addi	sp,sp,20
   80f5c:	f800283a 	ret

00080f60 <sin>:
   80f60:	00a00034 	movhi	r2,32768
   80f64:	10bfffc4 	addi	r2,r2,-1
   80f68:	defffa04 	addi	sp,sp,-24
   80f6c:	114c703a 	and	r6,r2,r5
   80f70:	008ffa74 	movhi	r2,16361
   80f74:	10887ec4 	addi	r2,r2,8699
   80f78:	dfc00515 	stw	ra,20(sp)
   80f7c:	2011883a 	mov	r8,r4
   80f80:	1180220e 	bge	r2,r6,8100c <sin+0xac>
   80f84:	009ffc34 	movhi	r2,32752
   80f88:	10bfffc4 	addi	r2,r2,-1
   80f8c:	11800a0e 	bge	r2,r6,80fb8 <sin+0x58>
   80f90:	280f883a 	mov	r7,r5
   80f94:	400d883a 	mov	r6,r8
   80f98:	008380c0 	call	8380c <__subdf3>
   80f9c:	100d883a 	mov	r6,r2
   80fa0:	180f883a 	mov	r7,r3
   80fa4:	3005883a 	mov	r2,r6
   80fa8:	3807883a 	mov	r3,r7
   80fac:	dfc00517 	ldw	ra,20(sp)
   80fb0:	dec00604 	addi	sp,sp,24
   80fb4:	f800283a 	ret
   80fb8:	d9800104 	addi	r6,sp,4
   80fbc:	00810cc0 	call	810cc <__ieee754_rem_pio2>
   80fc0:	10c000cc 	andi	r3,r2,3
   80fc4:	01000044 	movi	r4,1
   80fc8:	19001b26 	beq	r3,r4,81038 <sin+0xd8>
   80fcc:	00800084 	movi	r2,2
   80fd0:	18803126 	beq	r3,r2,81098 <sin+0x138>
   80fd4:	1800241e 	bne	r3,zero,81068 <sin+0x108>
   80fd8:	d8800117 	ldw	r2,4(sp)
   80fdc:	da000317 	ldw	r8,12(sp)
   80fe0:	d8c00217 	ldw	r3,8(sp)
   80fe4:	da400417 	ldw	r9,16(sp)
   80fe8:	d9000015 	stw	r4,0(sp)
   80fec:	400d883a 	mov	r6,r8
   80ff0:	480f883a 	mov	r7,r9
   80ff4:	180b883a 	mov	r5,r3
   80ff8:	1009883a 	mov	r4,r2
   80ffc:	0082ca40 	call	82ca4 <__kernel_sin>
   81000:	100d883a 	mov	r6,r2
   81004:	180f883a 	mov	r7,r3
   81008:	003fe606 	br	80fa4 <sin+0x44>
   8100c:	000d883a 	mov	r6,zero
   81010:	000f883a 	mov	r7,zero
   81014:	d8000015 	stw	zero,0(sp)
   81018:	0082ca40 	call	82ca4 <__kernel_sin>
   8101c:	100d883a 	mov	r6,r2
   81020:	180f883a 	mov	r7,r3
   81024:	3005883a 	mov	r2,r6
   81028:	3807883a 	mov	r3,r7
   8102c:	dfc00517 	ldw	ra,20(sp)
   81030:	dec00604 	addi	sp,sp,24
   81034:	f800283a 	ret
   81038:	d8800117 	ldw	r2,4(sp)
   8103c:	da000317 	ldw	r8,12(sp)
   81040:	d8c00217 	ldw	r3,8(sp)
   81044:	da400417 	ldw	r9,16(sp)
   81048:	400d883a 	mov	r6,r8
   8104c:	180b883a 	mov	r5,r3
   81050:	480f883a 	mov	r7,r9
   81054:	1009883a 	mov	r4,r2
   81058:	00818f40 	call	818f4 <__kernel_cos>
   8105c:	100d883a 	mov	r6,r2
   81060:	180f883a 	mov	r7,r3
   81064:	003fcf06 	br	80fa4 <sin+0x44>
   81068:	d8800117 	ldw	r2,4(sp)
   8106c:	da000317 	ldw	r8,12(sp)
   81070:	d8c00217 	ldw	r3,8(sp)
   81074:	da400417 	ldw	r9,16(sp)
   81078:	400d883a 	mov	r6,r8
   8107c:	180b883a 	mov	r5,r3
   81080:	480f883a 	mov	r7,r9
   81084:	1009883a 	mov	r4,r2
   81088:	00818f40 	call	818f4 <__kernel_cos>
   8108c:	100d883a 	mov	r6,r2
   81090:	19e0003c 	xorhi	r7,r3,32768
   81094:	003fc306 	br	80fa4 <sin+0x44>
   81098:	d8800117 	ldw	r2,4(sp)
   8109c:	da000317 	ldw	r8,12(sp)
   810a0:	d8c00217 	ldw	r3,8(sp)
   810a4:	da400417 	ldw	r9,16(sp)
   810a8:	d9000015 	stw	r4,0(sp)
   810ac:	400d883a 	mov	r6,r8
   810b0:	480f883a 	mov	r7,r9
   810b4:	180b883a 	mov	r5,r3
   810b8:	1009883a 	mov	r4,r2
   810bc:	0082ca40 	call	82ca4 <__kernel_sin>
   810c0:	100d883a 	mov	r6,r2
   810c4:	19e0003c 	xorhi	r7,r3,32768
   810c8:	003fb606 	br	80fa4 <sin+0x44>

000810cc <__ieee754_rem_pio2>:
   810cc:	deffe304 	addi	sp,sp,-116
   810d0:	00a00034 	movhi	r2,32768
   810d4:	10bfffc4 	addi	r2,r2,-1
   810d8:	dd801915 	stw	r22,100(sp)
   810dc:	28ac703a 	and	r22,r5,r2
   810e0:	008ffa74 	movhi	r2,16361
   810e4:	10887ec4 	addi	r2,r2,8699
   810e8:	df001b15 	stw	fp,108(sp)
   810ec:	dfc01c15 	stw	ra,112(sp)
   810f0:	ddc01a15 	stw	r23,104(sp)
   810f4:	dd401815 	stw	r21,96(sp)
   810f8:	dd001715 	stw	r20,92(sp)
   810fc:	dcc01615 	stw	r19,88(sp)
   81100:	dc801515 	stw	r18,84(sp)
   81104:	dc401415 	stw	r17,80(sp)
   81108:	dc001315 	stw	r16,76(sp)
   8110c:	2013883a 	mov	r9,r4
   81110:	d9400a15 	stw	r5,40(sp)
   81114:	3039883a 	mov	fp,r6
   81118:	15801216 	blt	r2,r22,81164 <__ieee754_rem_pio2+0x98>
   8111c:	e1400115 	stw	r5,4(fp)
   81120:	30000315 	stw	zero,12(r6)
   81124:	e1000015 	stw	r4,0(fp)
   81128:	d8000b15 	stw	zero,44(sp)
   8112c:	30000215 	stw	zero,8(r6)
   81130:	d8800b17 	ldw	r2,44(sp)
   81134:	dfc01c17 	ldw	ra,112(sp)
   81138:	df001b17 	ldw	fp,108(sp)
   8113c:	ddc01a17 	ldw	r23,104(sp)
   81140:	dd801917 	ldw	r22,100(sp)
   81144:	dd401817 	ldw	r21,96(sp)
   81148:	dd001717 	ldw	r20,92(sp)
   8114c:	dcc01617 	ldw	r19,88(sp)
   81150:	dc801517 	ldw	r18,84(sp)
   81154:	dc401417 	ldw	r17,80(sp)
   81158:	dc001317 	ldw	r16,76(sp)
   8115c:	dec01d04 	addi	sp,sp,116
   81160:	f800283a 	ret
   81164:	009000f4 	movhi	r2,16387
   81168:	10b65ec4 	addi	r2,r2,-9861
   8116c:	15800f0e 	bge	r2,r22,811ac <__ieee754_rem_pio2+0xe0>
   81170:	00904e74 	movhi	r2,16697
   81174:	10887ec4 	addi	r2,r2,8699
   81178:	1580330e 	bge	r2,r22,81248 <__ieee754_rem_pio2+0x17c>
   8117c:	009ffc34 	movhi	r2,32752
   81180:	10bfffc4 	addi	r2,r2,-1
   81184:	1580fe0e 	bge	r2,r22,81580 <__ieee754_rem_pio2+0x4b4>
   81188:	280f883a 	mov	r7,r5
   8118c:	480d883a 	mov	r6,r9
   81190:	008380c0 	call	8380c <__subdf3>
   81194:	e0c00115 	stw	r3,4(fp)
   81198:	d8000b15 	stw	zero,44(sp)
   8119c:	e0800015 	stw	r2,0(fp)
   811a0:	e0800215 	stw	r2,8(fp)
   811a4:	e0c00315 	stw	r3,12(fp)
   811a8:	003fe106 	br	81130 <__ieee754_rem_pio2+0x64>
   811ac:	d9000a17 	ldw	r4,40(sp)
   811b0:	0100ce0e 	bge	zero,r4,814ec <__ieee754_rem_pio2+0x420>
   811b4:	04151034 	movhi	r16,21568
   811b8:	044ffe74 	movhi	r17,16377
   811bc:	8c487ec4 	addi	r17,r17,8699
   811c0:	4809883a 	mov	r4,r9
   811c4:	800d883a 	mov	r6,r16
   811c8:	880f883a 	mov	r7,r17
   811cc:	008380c0 	call	8380c <__subdf3>
   811d0:	1025883a 	mov	r18,r2
   811d4:	1827883a 	mov	r19,r3
   811d8:	b4413c26 	beq	r22,r17,816cc <__ieee754_rem_pio2+0x600>
   811dc:	040698b4 	movhi	r16,6754
   811e0:	8418cc44 	addi	r16,r16,25393
   811e4:	044f7474 	movhi	r17,15825
   811e8:	8c6d1844 	addi	r17,r17,-19359
   811ec:	1009883a 	mov	r4,r2
   811f0:	180b883a 	mov	r5,r3
   811f4:	800d883a 	mov	r6,r16
   811f8:	880f883a 	mov	r7,r17
   811fc:	008380c0 	call	8380c <__subdf3>
   81200:	100d883a 	mov	r6,r2
   81204:	9009883a 	mov	r4,r18
   81208:	980b883a 	mov	r5,r19
   8120c:	180f883a 	mov	r7,r3
   81210:	e0800015 	stw	r2,0(fp)
   81214:	e0c00115 	stw	r3,4(fp)
   81218:	008380c0 	call	8380c <__subdf3>
   8121c:	1009883a 	mov	r4,r2
   81220:	800d883a 	mov	r6,r16
   81224:	880f883a 	mov	r7,r17
   81228:	180b883a 	mov	r5,r3
   8122c:	008380c0 	call	8380c <__subdf3>
   81230:	1009883a 	mov	r4,r2
   81234:	00800044 	movi	r2,1
   81238:	d8800b15 	stw	r2,44(sp)
   8123c:	e0c00315 	stw	r3,12(fp)
   81240:	e1000215 	stw	r4,8(fp)
   81244:	003fba06 	br	81130 <__ieee754_rem_pio2+0x64>
   81248:	0082fbc0 	call	82fbc <fabs>
   8124c:	021b72b4 	movhi	r8,28106
   81250:	423220c4 	addi	r8,r8,-14205
   81254:	024ff934 	movhi	r9,16356
   81258:	4a57cc04 	addi	r9,r9,24368
   8125c:	480f883a 	mov	r7,r9
   81260:	400d883a 	mov	r6,r8
   81264:	1009883a 	mov	r4,r2
   81268:	180b883a 	mov	r5,r3
   8126c:	1025883a 	mov	r18,r2
   81270:	1827883a 	mov	r19,r3
   81274:	00839000 	call	83900 <__muldf3>
   81278:	0011883a 	mov	r8,zero
   8127c:	024ff834 	movhi	r9,16352
   81280:	480f883a 	mov	r7,r9
   81284:	400d883a 	mov	r6,r8
   81288:	180b883a 	mov	r5,r3
   8128c:	1009883a 	mov	r4,r2
   81290:	008388c0 	call	8388c <__adddf3>
   81294:	180b883a 	mov	r5,r3
   81298:	1009883a 	mov	r4,r2
   8129c:	00841ac0 	call	841ac <__fixdfsi>
   812a0:	1009883a 	mov	r4,r2
   812a4:	d8800b15 	stw	r2,44(sp)
   812a8:	00840b40 	call	840b4 <__floatsidf>
   812ac:	1823883a 	mov	r17,r3
   812b0:	1009883a 	mov	r4,r2
   812b4:	d8800c15 	stw	r2,48(sp)
   812b8:	00effe74 	movhi	r3,49145
   812bc:	18c87ec4 	addi	r3,r3,8699
   812c0:	00951034 	movhi	r2,21568
   812c4:	880b883a 	mov	r5,r17
   812c8:	180f883a 	mov	r7,r3
   812cc:	100d883a 	mov	r6,r2
   812d0:	dc400d15 	stw	r17,52(sp)
   812d4:	00839000 	call	83900 <__muldf3>
   812d8:	180f883a 	mov	r7,r3
   812dc:	980b883a 	mov	r5,r19
   812e0:	9009883a 	mov	r4,r18
   812e4:	100d883a 	mov	r6,r2
   812e8:	008388c0 	call	8388c <__adddf3>
   812ec:	d9000c17 	ldw	r4,48(sp)
   812f0:	020698b4 	movhi	r8,6754
   812f4:	4218cc44 	addi	r8,r8,25393
   812f8:	024f7474 	movhi	r9,15825
   812fc:	4a6d1844 	addi	r9,r9,-19359
   81300:	880b883a 	mov	r5,r17
   81304:	480f883a 	mov	r7,r9
   81308:	400d883a 	mov	r6,r8
   8130c:	1025883a 	mov	r18,r2
   81310:	1827883a 	mov	r19,r3
   81314:	00839000 	call	83900 <__muldf3>
   81318:	d9000b17 	ldw	r4,44(sp)
   8131c:	100f883a 	mov	r7,r2
   81320:	1811883a 	mov	r8,r3
   81324:	008007c4 	movi	r2,31
   81328:	dc800e15 	stw	r18,56(sp)
   8132c:	3821883a 	mov	r16,r7
   81330:	dcc00f15 	stw	r19,60(sp)
   81334:	4023883a 	mov	r17,r8
   81338:	11010a0e 	bge	r2,r4,81764 <__ieee754_rem_pio2+0x698>
   8133c:	d9000e17 	ldw	r4,56(sp)
   81340:	d9400f17 	ldw	r5,60(sp)
   81344:	800d883a 	mov	r6,r16
   81348:	880f883a 	mov	r7,r17
   8134c:	008380c0 	call	8380c <__subdf3>
   81350:	1810d53a 	srli	r8,r3,20
   81354:	b02dd53a 	srai	r22,r22,20
   81358:	1009883a 	mov	r4,r2
   8135c:	4201ffcc 	andi	r8,r8,2047
   81360:	180b883a 	mov	r5,r3
   81364:	b211c83a 	sub	r8,r22,r8
   81368:	00800404 	movi	r2,16
   8136c:	dd801015 	stw	r22,64(sp)
   81370:	e1000015 	stw	r4,0(fp)
   81374:	e1400115 	stw	r5,4(fp)
   81378:	1200430e 	bge	r2,r8,81488 <__ieee754_rem_pio2+0x3bc>
   8137c:	d9000c17 	ldw	r4,48(sp)
   81380:	d9400d17 	ldw	r5,52(sp)
   81384:	00869834 	movhi	r2,6752
   81388:	00cf7474 	movhi	r3,15825
   8138c:	18ed1844 	addi	r3,r3,-19359
   81390:	180f883a 	mov	r7,r3
   81394:	100d883a 	mov	r6,r2
   81398:	00839000 	call	83900 <__muldf3>
   8139c:	d9000e17 	ldw	r4,56(sp)
   813a0:	d9400f17 	ldw	r5,60(sp)
   813a4:	100d883a 	mov	r6,r2
   813a8:	180f883a 	mov	r7,r3
   813ac:	1025883a 	mov	r18,r2
   813b0:	1827883a 	mov	r19,r3
   813b4:	008380c0 	call	8380c <__subdf3>
   813b8:	d9000c17 	ldw	r4,48(sp)
   813bc:	d9400d17 	ldw	r5,52(sp)
   813c0:	058b80f4 	movhi	r22,11779
   813c4:	b59c1cc4 	addi	r22,r22,28787
   813c8:	05cee8f4 	movhi	r23,15267
   813cc:	bdc66284 	addi	r23,r23,6538
   813d0:	b00d883a 	mov	r6,r22
   813d4:	b80f883a 	mov	r7,r23
   813d8:	d8801115 	stw	r2,68(sp)
   813dc:	d8c01215 	stw	r3,72(sp)
   813e0:	d8800815 	stw	r2,32(sp)
   813e4:	00839000 	call	83900 <__muldf3>
   813e8:	d9001217 	ldw	r4,72(sp)
   813ec:	d9400f17 	ldw	r5,60(sp)
   813f0:	d9800817 	ldw	r6,32(sp)
   813f4:	d9000915 	stw	r4,36(sp)
   813f8:	d9c01217 	ldw	r7,72(sp)
   813fc:	d9000e17 	ldw	r4,56(sp)
   81400:	1021883a 	mov	r16,r2
   81404:	1823883a 	mov	r17,r3
   81408:	008380c0 	call	8380c <__subdf3>
   8140c:	180b883a 	mov	r5,r3
   81410:	900d883a 	mov	r6,r18
   81414:	980f883a 	mov	r7,r19
   81418:	1009883a 	mov	r4,r2
   8141c:	008380c0 	call	8380c <__subdf3>
   81420:	180f883a 	mov	r7,r3
   81424:	880b883a 	mov	r5,r17
   81428:	8009883a 	mov	r4,r16
   8142c:	100d883a 	mov	r6,r2
   81430:	008380c0 	call	8380c <__subdf3>
   81434:	d9000817 	ldw	r4,32(sp)
   81438:	d9401217 	ldw	r5,72(sp)
   8143c:	180f883a 	mov	r7,r3
   81440:	100d883a 	mov	r6,r2
   81444:	1021883a 	mov	r16,r2
   81448:	1823883a 	mov	r17,r3
   8144c:	008380c0 	call	8380c <__subdf3>
   81450:	1810d53a 	srli	r8,r3,20
   81454:	1009883a 	mov	r4,r2
   81458:	d8801017 	ldw	r2,64(sp)
   8145c:	4201ffcc 	andi	r8,r8,2047
   81460:	180b883a 	mov	r5,r3
   81464:	1211c83a 	sub	r8,r2,r8
   81468:	00800c44 	movi	r2,49
   8146c:	e1000015 	stw	r4,0(fp)
   81470:	e1400115 	stw	r5,4(fp)
   81474:	1200f016 	blt	r2,r8,81838 <__ieee754_rem_pio2+0x76c>
   81478:	d8c00817 	ldw	r3,32(sp)
   8147c:	d9001217 	ldw	r4,72(sp)
   81480:	d8c00e15 	stw	r3,56(sp)
   81484:	d9000f15 	stw	r4,60(sp)
   81488:	e1800017 	ldw	r6,0(fp)
   8148c:	e1c00117 	ldw	r7,4(fp)
   81490:	d9400f17 	ldw	r5,60(sp)
   81494:	d9000e17 	ldw	r4,56(sp)
   81498:	008380c0 	call	8380c <__subdf3>
   8149c:	180b883a 	mov	r5,r3
   814a0:	800d883a 	mov	r6,r16
   814a4:	880f883a 	mov	r7,r17
   814a8:	1009883a 	mov	r4,r2
   814ac:	008380c0 	call	8380c <__subdf3>
   814b0:	d9400a17 	ldw	r5,40(sp)
   814b4:	e0800215 	stw	r2,8(fp)
   814b8:	e1800204 	addi	r6,fp,8
   814bc:	30c00115 	stw	r3,4(r6)
   814c0:	283f1b0e 	bge	r5,zero,81130 <__ieee754_rem_pio2+0x64>
   814c4:	e0c00117 	ldw	r3,4(fp)
   814c8:	d8800b17 	ldw	r2,44(sp)
   814cc:	18e0003c 	xorhi	r3,r3,32768
   814d0:	0085c83a 	sub	r2,zero,r2
   814d4:	e0c00115 	stw	r3,4(fp)
   814d8:	d8800b15 	stw	r2,44(sp)
   814dc:	30800117 	ldw	r2,4(r6)
   814e0:	10a0003c 	xorhi	r2,r2,32768
   814e4:	30800115 	stw	r2,4(r6)
   814e8:	003f1106 	br	81130 <__ieee754_rem_pio2+0x64>
   814ec:	04151034 	movhi	r16,21568
   814f0:	044ffe74 	movhi	r17,16377
   814f4:	8c487ec4 	addi	r17,r17,8699
   814f8:	4809883a 	mov	r4,r9
   814fc:	800d883a 	mov	r6,r16
   81500:	880f883a 	mov	r7,r17
   81504:	008388c0 	call	8388c <__adddf3>
   81508:	1025883a 	mov	r18,r2
   8150c:	1827883a 	mov	r19,r3
   81510:	b440a326 	beq	r22,r17,817a0 <__ieee754_rem_pio2+0x6d4>
   81514:	040698b4 	movhi	r16,6754
   81518:	8418cc44 	addi	r16,r16,25393
   8151c:	044f7474 	movhi	r17,15825
   81520:	8c6d1844 	addi	r17,r17,-19359
   81524:	1009883a 	mov	r4,r2
   81528:	180b883a 	mov	r5,r3
   8152c:	800d883a 	mov	r6,r16
   81530:	880f883a 	mov	r7,r17
   81534:	008388c0 	call	8388c <__adddf3>
   81538:	100d883a 	mov	r6,r2
   8153c:	9009883a 	mov	r4,r18
   81540:	980b883a 	mov	r5,r19
   81544:	180f883a 	mov	r7,r3
   81548:	e0800015 	stw	r2,0(fp)
   8154c:	e0c00115 	stw	r3,4(fp)
   81550:	008380c0 	call	8380c <__subdf3>
   81554:	1009883a 	mov	r4,r2
   81558:	800d883a 	mov	r6,r16
   8155c:	880f883a 	mov	r7,r17
   81560:	180b883a 	mov	r5,r3
   81564:	008388c0 	call	8388c <__adddf3>
   81568:	1009883a 	mov	r4,r2
   8156c:	00bfffc4 	movi	r2,-1
   81570:	d8800b15 	stw	r2,44(sp)
   81574:	e0c00315 	stw	r3,12(fp)
   81578:	e1000215 	stw	r4,8(fp)
   8157c:	003eec06 	br	81130 <__ieee754_rem_pio2+0x64>
   81580:	b005d53a 	srai	r2,r22,20
   81584:	4821883a 	mov	r16,r9
   81588:	05505c34 	movhi	r21,16752
   8158c:	15fefa84 	addi	r23,r2,-1046
   81590:	b826953a 	slli	r19,r23,20
   81594:	0029883a 	mov	r20,zero
   81598:	048000c4 	movi	r18,3
   8159c:	b4e7c83a 	sub	r19,r22,r19
   815a0:	980b883a 	mov	r5,r19
   815a4:	00841ac0 	call	841ac <__fixdfsi>
   815a8:	1009883a 	mov	r4,r2
   815ac:	00840b40 	call	840b4 <__floatsidf>
   815b0:	980b883a 	mov	r5,r19
   815b4:	8009883a 	mov	r4,r16
   815b8:	180f883a 	mov	r7,r3
   815bc:	100d883a 	mov	r6,r2
   815c0:	d8800215 	stw	r2,8(sp)
   815c4:	d8c00315 	stw	r3,12(sp)
   815c8:	008380c0 	call	8380c <__subdf3>
   815cc:	180b883a 	mov	r5,r3
   815d0:	a00d883a 	mov	r6,r20
   815d4:	a80f883a 	mov	r7,r21
   815d8:	1009883a 	mov	r4,r2
   815dc:	00839000 	call	83900 <__muldf3>
   815e0:	180b883a 	mov	r5,r3
   815e4:	1009883a 	mov	r4,r2
   815e8:	1823883a 	mov	r17,r3
   815ec:	1021883a 	mov	r16,r2
   815f0:	00841ac0 	call	841ac <__fixdfsi>
   815f4:	1009883a 	mov	r4,r2
   815f8:	00840b40 	call	840b4 <__floatsidf>
   815fc:	880b883a 	mov	r5,r17
   81600:	8009883a 	mov	r4,r16
   81604:	180f883a 	mov	r7,r3
   81608:	100d883a 	mov	r6,r2
   8160c:	d8800415 	stw	r2,16(sp)
   81610:	d8c00515 	stw	r3,20(sp)
   81614:	008380c0 	call	8380c <__subdf3>
   81618:	180b883a 	mov	r5,r3
   8161c:	000d883a 	mov	r6,zero
   81620:	a80f883a 	mov	r7,r21
   81624:	1009883a 	mov	r4,r2
   81628:	00839000 	call	83900 <__muldf3>
   8162c:	d8c00715 	stw	r3,28(sp)
   81630:	d8800615 	stw	r2,24(sp)
   81634:	00000106 	br	8163c <__ieee754_rem_pio2+0x570>
   81638:	8025883a 	mov	r18,r16
   8163c:	943fffc4 	addi	r16,r18,-1
   81640:	800890fa 	slli	r4,r16,3
   81644:	d9400204 	addi	r5,sp,8
   81648:	000d883a 	mov	r6,zero
   8164c:	2149883a 	add	r4,r4,r5
   81650:	20c00117 	ldw	r3,4(r4)
   81654:	20800017 	ldw	r2,0(r4)
   81658:	000f883a 	mov	r7,zero
   8165c:	180b883a 	mov	r5,r3
   81660:	1009883a 	mov	r4,r2
   81664:	0083f1c0 	call	83f1c <__eqdf2>
   81668:	103ff326 	beq	r2,zero,81638 <__ieee754_rem_pio2+0x56c>
   8166c:	00800084 	movi	r2,2
   81670:	00c00274 	movhi	r3,9
   81674:	18ca6d04 	addi	r3,r3,10676
   81678:	b80d883a 	mov	r6,r23
   8167c:	900f883a 	mov	r7,r18
   81680:	d9000204 	addi	r4,sp,8
   81684:	e00b883a 	mov	r5,fp
   81688:	d8800015 	stw	r2,0(sp)
   8168c:	d8c00115 	stw	r3,4(sp)
   81690:	0081e200 	call	81e20 <__kernel_rem_pio2>
   81694:	d8800b15 	stw	r2,44(sp)
   81698:	d8800a17 	ldw	r2,40(sp)
   8169c:	103ea40e 	bge	r2,zero,81130 <__ieee754_rem_pio2+0x64>
   816a0:	e0800117 	ldw	r2,4(fp)
   816a4:	d8c00b17 	ldw	r3,44(sp)
   816a8:	e1000204 	addi	r4,fp,8
   816ac:	10a0003c 	xorhi	r2,r2,32768
   816b0:	00c7c83a 	sub	r3,zero,r3
   816b4:	e0800115 	stw	r2,4(fp)
   816b8:	d8c00b15 	stw	r3,44(sp)
   816bc:	20c00117 	ldw	r3,4(r4)
   816c0:	18e0003c 	xorhi	r3,r3,32768
   816c4:	20c00115 	stw	r3,4(r4)
   816c8:	003e9906 	br	81130 <__ieee754_rem_pio2+0x64>
   816cc:	00869834 	movhi	r2,6752
   816d0:	00cf7474 	movhi	r3,15825
   816d4:	18ed1844 	addi	r3,r3,-19359
   816d8:	9009883a 	mov	r4,r18
   816dc:	980b883a 	mov	r5,r19
   816e0:	180f883a 	mov	r7,r3
   816e4:	100d883a 	mov	r6,r2
   816e8:	008380c0 	call	8380c <__subdf3>
   816ec:	048b80f4 	movhi	r18,11779
   816f0:	949c1cc4 	addi	r18,r18,28787
   816f4:	04cee8f4 	movhi	r19,15267
   816f8:	9cc66284 	addi	r19,r19,6538
   816fc:	1009883a 	mov	r4,r2
   81700:	180b883a 	mov	r5,r3
   81704:	900d883a 	mov	r6,r18
   81708:	980f883a 	mov	r7,r19
   8170c:	1021883a 	mov	r16,r2
   81710:	1823883a 	mov	r17,r3
   81714:	008380c0 	call	8380c <__subdf3>
   81718:	100d883a 	mov	r6,r2
   8171c:	8009883a 	mov	r4,r16
   81720:	880b883a 	mov	r5,r17
   81724:	180f883a 	mov	r7,r3
   81728:	e0800015 	stw	r2,0(fp)
   8172c:	e0c00115 	stw	r3,4(fp)
   81730:	008380c0 	call	8380c <__subdf3>
   81734:	180b883a 	mov	r5,r3
   81738:	1009883a 	mov	r4,r2
   8173c:	900d883a 	mov	r6,r18
   81740:	980f883a 	mov	r7,r19
   81744:	008380c0 	call	8380c <__subdf3>
   81748:	180b883a 	mov	r5,r3
   8174c:	1009883a 	mov	r4,r2
   81750:	00c00044 	movi	r3,1
   81754:	d8c00b15 	stw	r3,44(sp)
   81758:	e1400315 	stw	r5,12(fp)
   8175c:	e1000215 	stw	r4,8(fp)
   81760:	003e7306 	br	81130 <__ieee754_rem_pio2+0x64>
   81764:	2105883a 	add	r2,r4,r4
   81768:	1085883a 	add	r2,r2,r2
   8176c:	00c00274 	movhi	r3,9
   81770:	18ca4d04 	addi	r3,r3,10548
   81774:	10c5883a 	add	r2,r2,r3
   81778:	113fff17 	ldw	r4,-4(r2)
   8177c:	b13eef26 	beq	r22,r4,8133c <__ieee754_rem_pio2+0x270>
   81780:	980b883a 	mov	r5,r19
   81784:	400f883a 	mov	r7,r8
   81788:	9009883a 	mov	r4,r18
   8178c:	800d883a 	mov	r6,r16
   81790:	008380c0 	call	8380c <__subdf3>
   81794:	e0c00115 	stw	r3,4(fp)
   81798:	e0800015 	stw	r2,0(fp)
   8179c:	003f3a06 	br	81488 <__ieee754_rem_pio2+0x3bc>
   817a0:	00869834 	movhi	r2,6752
   817a4:	00cf7474 	movhi	r3,15825
   817a8:	18ed1844 	addi	r3,r3,-19359
   817ac:	9009883a 	mov	r4,r18
   817b0:	980b883a 	mov	r5,r19
   817b4:	180f883a 	mov	r7,r3
   817b8:	100d883a 	mov	r6,r2
   817bc:	008388c0 	call	8388c <__adddf3>
   817c0:	048b80f4 	movhi	r18,11779
   817c4:	949c1cc4 	addi	r18,r18,28787
   817c8:	04cee8f4 	movhi	r19,15267
   817cc:	9cc66284 	addi	r19,r19,6538
   817d0:	1009883a 	mov	r4,r2
   817d4:	180b883a 	mov	r5,r3
   817d8:	900d883a 	mov	r6,r18
   817dc:	980f883a 	mov	r7,r19
   817e0:	1021883a 	mov	r16,r2
   817e4:	1823883a 	mov	r17,r3
   817e8:	008388c0 	call	8388c <__adddf3>
   817ec:	100d883a 	mov	r6,r2
   817f0:	8009883a 	mov	r4,r16
   817f4:	880b883a 	mov	r5,r17
   817f8:	180f883a 	mov	r7,r3
   817fc:	e0800015 	stw	r2,0(fp)
   81800:	e0c00115 	stw	r3,4(fp)
   81804:	008380c0 	call	8380c <__subdf3>
   81808:	180b883a 	mov	r5,r3
   8180c:	1009883a 	mov	r4,r2
   81810:	900d883a 	mov	r6,r18
   81814:	980f883a 	mov	r7,r19
   81818:	008388c0 	call	8388c <__adddf3>
   8181c:	180b883a 	mov	r5,r3
   81820:	1009883a 	mov	r4,r2
   81824:	00ffffc4 	movi	r3,-1
   81828:	d8c00b15 	stw	r3,44(sp)
   8182c:	e1400315 	stw	r5,12(fp)
   81830:	e1000215 	stw	r4,8(fp)
   81834:	003e3e06 	br	81130 <__ieee754_rem_pio2+0x64>
   81838:	d9000c17 	ldw	r4,48(sp)
   8183c:	d9400d17 	ldw	r5,52(sp)
   81840:	018b8034 	movhi	r6,11776
   81844:	b80f883a 	mov	r7,r23
   81848:	00839000 	call	83900 <__muldf3>
   8184c:	d9000817 	ldw	r4,32(sp)
   81850:	d9401217 	ldw	r5,72(sp)
   81854:	100d883a 	mov	r6,r2
   81858:	180f883a 	mov	r7,r3
   8185c:	1025883a 	mov	r18,r2
   81860:	1827883a 	mov	r19,r3
   81864:	008380c0 	call	8380c <__subdf3>
   81868:	d9400d17 	ldw	r5,52(sp)
   8186c:	d9000c17 	ldw	r4,48(sp)
   81870:	02094834 	movhi	r8,9504
   81874:	42127044 	addi	r8,r8,18881
   81878:	024e5f34 	movhi	r9,14716
   8187c:	4a60e684 	addi	r9,r9,-31846
   81880:	480f883a 	mov	r7,r9
   81884:	400d883a 	mov	r6,r8
   81888:	182b883a 	mov	r21,r3
   8188c:	d8800e15 	stw	r2,56(sp)
   81890:	00839000 	call	83900 <__muldf3>
   81894:	d9000817 	ldw	r4,32(sp)
   81898:	d9401217 	ldw	r5,72(sp)
   8189c:	d9800e17 	ldw	r6,56(sp)
   818a0:	a80f883a 	mov	r7,r21
   818a4:	1021883a 	mov	r16,r2
   818a8:	1823883a 	mov	r17,r3
   818ac:	dd400f15 	stw	r21,60(sp)
   818b0:	008380c0 	call	8380c <__subdf3>
   818b4:	180b883a 	mov	r5,r3
   818b8:	900d883a 	mov	r6,r18
   818bc:	980f883a 	mov	r7,r19
   818c0:	1009883a 	mov	r4,r2
   818c4:	008380c0 	call	8380c <__subdf3>
   818c8:	180f883a 	mov	r7,r3
   818cc:	880b883a 	mov	r5,r17
   818d0:	8009883a 	mov	r4,r16
   818d4:	100d883a 	mov	r6,r2
   818d8:	008380c0 	call	8380c <__subdf3>
   818dc:	d9000e17 	ldw	r4,56(sp)
   818e0:	1021883a 	mov	r16,r2
   818e4:	1823883a 	mov	r17,r3
   818e8:	a80b883a 	mov	r5,r21
   818ec:	180f883a 	mov	r7,r3
   818f0:	003fa606 	br	8178c <__ieee754_rem_pio2+0x6c0>

000818f4 <__kernel_cos>:
   818f4:	defff104 	addi	sp,sp,-60
   818f8:	00a00034 	movhi	r2,32768
   818fc:	10bfffc4 	addi	r2,r2,-1
   81900:	dd800c15 	stw	r22,48(sp)
   81904:	116c703a 	and	r22,r2,r5
   81908:	0005883a 	mov	r2,zero
   8190c:	dd000a15 	stw	r20,40(sp)
   81910:	d8800215 	stw	r2,8(sp)
   81914:	2029883a 	mov	r20,r4
   81918:	008f9034 	movhi	r2,15936
   8191c:	10bfffc4 	addi	r2,r2,-1
   81920:	0009883a 	mov	r4,zero
   81924:	dd400b15 	stw	r21,44(sp)
   81928:	dfc00e15 	stw	ra,56(sp)
   8192c:	ddc00d15 	stw	r23,52(sp)
   81930:	dcc00915 	stw	r19,36(sp)
   81934:	dc800815 	stw	r18,32(sp)
   81938:	dc400715 	stw	r17,28(sp)
   8193c:	dc000615 	stw	r16,24(sp)
   81940:	282b883a 	mov	r21,r5
   81944:	d9800415 	stw	r6,16(sp)
   81948:	d9c00515 	stw	r7,20(sp)
   8194c:	d9000315 	stw	r4,12(sp)
   81950:	15809216 	blt	r2,r22,81b9c <__kernel_cos+0x2a8>
   81954:	a009883a 	mov	r4,r20
   81958:	00841ac0 	call	841ac <__fixdfsi>
   8195c:	10011c26 	beq	r2,zero,81dd0 <__kernel_cos+0x4dc>
   81960:	a009883a 	mov	r4,r20
   81964:	a80b883a 	mov	r5,r21
   81968:	a00d883a 	mov	r6,r20
   8196c:	a80f883a 	mov	r7,r21
   81970:	00839000 	call	83900 <__muldf3>
   81974:	1021883a 	mov	r16,r2
   81978:	1823883a 	mov	r17,r3
   8197c:	1025883a 	mov	r18,r2
   81980:	1827883a 	mov	r19,r3
   81984:	00afa234 	movhi	r2,48776
   81988:	108e3504 	addi	r2,r2,14548
   8198c:	00ef6a74 	movhi	r3,48553
   81990:	18feba44 	addi	r3,r3,-1303
   81994:	8009883a 	mov	r4,r16
   81998:	880b883a 	mov	r5,r17
   8199c:	180f883a 	mov	r7,r3
   819a0:	100d883a 	mov	r6,r2
   819a4:	00839000 	call	83900 <__muldf3>
   819a8:	022f6d74 	movhi	r8,48565
   819ac:	422c7104 	addi	r8,r8,-20028
   819b0:	024f88b4 	movhi	r9,15906
   819b4:	4a7ba784 	addi	r9,r9,-4450
   819b8:	480f883a 	mov	r7,r9
   819bc:	400d883a 	mov	r6,r8
   819c0:	180b883a 	mov	r5,r3
   819c4:	1009883a 	mov	r4,r2
   819c8:	008388c0 	call	8388c <__adddf3>
   819cc:	180f883a 	mov	r7,r3
   819d0:	8009883a 	mov	r4,r16
   819d4:	880b883a 	mov	r5,r17
   819d8:	100d883a 	mov	r6,r2
   819dc:	00839000 	call	83900 <__muldf3>
   819e0:	02202734 	movhi	r8,32924
   819e4:	4214ab44 	addi	r8,r8,21165
   819e8:	024fa4b4 	movhi	r9,16018
   819ec:	4a5f93c4 	addi	r9,r9,32335
   819f0:	480f883a 	mov	r7,r9
   819f4:	400d883a 	mov	r6,r8
   819f8:	180b883a 	mov	r5,r3
   819fc:	1009883a 	mov	r4,r2
   81a00:	008380c0 	call	8380c <__subdf3>
   81a04:	180f883a 	mov	r7,r3
   81a08:	8009883a 	mov	r4,r16
   81a0c:	880b883a 	mov	r5,r17
   81a10:	100d883a 	mov	r6,r2
   81a14:	00839000 	call	83900 <__muldf3>
   81a18:	020672f4 	movhi	r8,6603
   81a1c:	42056404 	addi	r8,r8,5520
   81a20:	024fbeb4 	movhi	r9,16122
   81a24:	4a406804 	addi	r9,r9,416
   81a28:	480f883a 	mov	r7,r9
   81a2c:	400d883a 	mov	r6,r8
   81a30:	180b883a 	mov	r5,r3
   81a34:	1009883a 	mov	r4,r2
   81a38:	008388c0 	call	8388c <__adddf3>
   81a3c:	180f883a 	mov	r7,r3
   81a40:	8009883a 	mov	r4,r16
   81a44:	880b883a 	mov	r5,r17
   81a48:	100d883a 	mov	r6,r2
   81a4c:	00839000 	call	83900 <__muldf3>
   81a50:	0205b074 	movhi	r8,5825
   81a54:	42145dc4 	addi	r8,r8,20855
   81a58:	024fd5f4 	movhi	r9,16215
   81a5c:	4a705b04 	addi	r9,r9,-16020
   81a60:	480f883a 	mov	r7,r9
   81a64:	400d883a 	mov	r6,r8
   81a68:	180b883a 	mov	r5,r3
   81a6c:	1009883a 	mov	r4,r2
   81a70:	008380c0 	call	8380c <__subdf3>
   81a74:	180f883a 	mov	r7,r3
   81a78:	8009883a 	mov	r4,r16
   81a7c:	880b883a 	mov	r5,r17
   81a80:	100d883a 	mov	r6,r2
   81a84:	00839000 	call	83900 <__muldf3>
   81a88:	02155574 	movhi	r8,21845
   81a8c:	42155304 	addi	r8,r8,21836
   81a90:	024fe974 	movhi	r9,16293
   81a94:	4a555544 	addi	r9,r9,21845
   81a98:	480f883a 	mov	r7,r9
   81a9c:	400d883a 	mov	r6,r8
   81aa0:	180b883a 	mov	r5,r3
   81aa4:	1009883a 	mov	r4,r2
   81aa8:	008388c0 	call	8388c <__adddf3>
   81aac:	180f883a 	mov	r7,r3
   81ab0:	880b883a 	mov	r5,r17
   81ab4:	8009883a 	mov	r4,r16
   81ab8:	100d883a 	mov	r6,r2
   81abc:	00839000 	call	83900 <__muldf3>
   81ac0:	1021883a 	mov	r16,r2
   81ac4:	1823883a 	mov	r17,r3
   81ac8:	0005883a 	mov	r2,zero
   81acc:	00cff834 	movhi	r3,16352
   81ad0:	9009883a 	mov	r4,r18
   81ad4:	980b883a 	mov	r5,r19
   81ad8:	180f883a 	mov	r7,r3
   81adc:	100d883a 	mov	r6,r2
   81ae0:	00839000 	call	83900 <__muldf3>
   81ae4:	980b883a 	mov	r5,r19
   81ae8:	880f883a 	mov	r7,r17
   81aec:	9009883a 	mov	r4,r18
   81af0:	800d883a 	mov	r6,r16
   81af4:	1025883a 	mov	r18,r2
   81af8:	1827883a 	mov	r19,r3
   81afc:	00839000 	call	83900 <__muldf3>
   81b00:	d9c00517 	ldw	r7,20(sp)
   81b04:	d9800417 	ldw	r6,16(sp)
   81b08:	a80b883a 	mov	r5,r21
   81b0c:	a009883a 	mov	r4,r20
   81b10:	1021883a 	mov	r16,r2
   81b14:	1823883a 	mov	r17,r3
   81b18:	00839000 	call	83900 <__muldf3>
   81b1c:	180f883a 	mov	r7,r3
   81b20:	880b883a 	mov	r5,r17
   81b24:	8009883a 	mov	r4,r16
   81b28:	100d883a 	mov	r6,r2
   81b2c:	008380c0 	call	8380c <__subdf3>
   81b30:	180f883a 	mov	r7,r3
   81b34:	980b883a 	mov	r5,r19
   81b38:	9009883a 	mov	r4,r18
   81b3c:	100d883a 	mov	r6,r2
   81b40:	008380c0 	call	8380c <__subdf3>
   81b44:	0011883a 	mov	r8,zero
   81b48:	024ffc34 	movhi	r9,16368
   81b4c:	480b883a 	mov	r5,r9
   81b50:	180f883a 	mov	r7,r3
   81b54:	4009883a 	mov	r4,r8
   81b58:	100d883a 	mov	r6,r2
   81b5c:	008380c0 	call	8380c <__subdf3>
   81b60:	100d883a 	mov	r6,r2
   81b64:	180f883a 	mov	r7,r3
   81b68:	3005883a 	mov	r2,r6
   81b6c:	3807883a 	mov	r3,r7
   81b70:	dfc00e17 	ldw	ra,56(sp)
   81b74:	ddc00d17 	ldw	r23,52(sp)
   81b78:	dd800c17 	ldw	r22,48(sp)
   81b7c:	dd400b17 	ldw	r21,44(sp)
   81b80:	dd000a17 	ldw	r20,40(sp)
   81b84:	dcc00917 	ldw	r19,36(sp)
   81b88:	dc800817 	ldw	r18,32(sp)
   81b8c:	dc400717 	ldw	r17,28(sp)
   81b90:	dc000617 	ldw	r16,24(sp)
   81b94:	dec00f04 	addi	sp,sp,60
   81b98:	f800283a 	ret
   81b9c:	280f883a 	mov	r7,r5
   81ba0:	a009883a 	mov	r4,r20
   81ba4:	a00d883a 	mov	r6,r20
   81ba8:	00839000 	call	83900 <__muldf3>
   81bac:	1021883a 	mov	r16,r2
   81bb0:	1823883a 	mov	r17,r3
   81bb4:	1025883a 	mov	r18,r2
   81bb8:	1827883a 	mov	r19,r3
   81bbc:	00afa234 	movhi	r2,48776
   81bc0:	108e3504 	addi	r2,r2,14548
   81bc4:	00ef6a74 	movhi	r3,48553
   81bc8:	18feba44 	addi	r3,r3,-1303
   81bcc:	8009883a 	mov	r4,r16
   81bd0:	880b883a 	mov	r5,r17
   81bd4:	180f883a 	mov	r7,r3
   81bd8:	100d883a 	mov	r6,r2
   81bdc:	00839000 	call	83900 <__muldf3>
   81be0:	022f6d74 	movhi	r8,48565
   81be4:	422c7104 	addi	r8,r8,-20028
   81be8:	024f88b4 	movhi	r9,15906
   81bec:	4a7ba784 	addi	r9,r9,-4450
   81bf0:	480f883a 	mov	r7,r9
   81bf4:	400d883a 	mov	r6,r8
   81bf8:	180b883a 	mov	r5,r3
   81bfc:	1009883a 	mov	r4,r2
   81c00:	008388c0 	call	8388c <__adddf3>
   81c04:	180f883a 	mov	r7,r3
   81c08:	8009883a 	mov	r4,r16
   81c0c:	880b883a 	mov	r5,r17
   81c10:	100d883a 	mov	r6,r2
   81c14:	00839000 	call	83900 <__muldf3>
   81c18:	02202734 	movhi	r8,32924
   81c1c:	4214ab44 	addi	r8,r8,21165
   81c20:	024fa4b4 	movhi	r9,16018
   81c24:	4a5f93c4 	addi	r9,r9,32335
   81c28:	480f883a 	mov	r7,r9
   81c2c:	400d883a 	mov	r6,r8
   81c30:	180b883a 	mov	r5,r3
   81c34:	1009883a 	mov	r4,r2
   81c38:	008380c0 	call	8380c <__subdf3>
   81c3c:	180f883a 	mov	r7,r3
   81c40:	8009883a 	mov	r4,r16
   81c44:	880b883a 	mov	r5,r17
   81c48:	100d883a 	mov	r6,r2
   81c4c:	00839000 	call	83900 <__muldf3>
   81c50:	020672f4 	movhi	r8,6603
   81c54:	42056404 	addi	r8,r8,5520
   81c58:	024fbeb4 	movhi	r9,16122
   81c5c:	4a406804 	addi	r9,r9,416
   81c60:	480f883a 	mov	r7,r9
   81c64:	400d883a 	mov	r6,r8
   81c68:	180b883a 	mov	r5,r3
   81c6c:	1009883a 	mov	r4,r2
   81c70:	008388c0 	call	8388c <__adddf3>
   81c74:	180f883a 	mov	r7,r3
   81c78:	8009883a 	mov	r4,r16
   81c7c:	880b883a 	mov	r5,r17
   81c80:	100d883a 	mov	r6,r2
   81c84:	00839000 	call	83900 <__muldf3>
   81c88:	0205b074 	movhi	r8,5825
   81c8c:	42145dc4 	addi	r8,r8,20855
   81c90:	024fd5f4 	movhi	r9,16215
   81c94:	4a705b04 	addi	r9,r9,-16020
   81c98:	480f883a 	mov	r7,r9
   81c9c:	400d883a 	mov	r6,r8
   81ca0:	180b883a 	mov	r5,r3
   81ca4:	1009883a 	mov	r4,r2
   81ca8:	008380c0 	call	8380c <__subdf3>
   81cac:	180f883a 	mov	r7,r3
   81cb0:	8009883a 	mov	r4,r16
   81cb4:	880b883a 	mov	r5,r17
   81cb8:	100d883a 	mov	r6,r2
   81cbc:	00839000 	call	83900 <__muldf3>
   81cc0:	02155574 	movhi	r8,21845
   81cc4:	42155304 	addi	r8,r8,21836
   81cc8:	024fe974 	movhi	r9,16293
   81ccc:	4a555544 	addi	r9,r9,21845
   81cd0:	480f883a 	mov	r7,r9
   81cd4:	400d883a 	mov	r6,r8
   81cd8:	180b883a 	mov	r5,r3
   81cdc:	1009883a 	mov	r4,r2
   81ce0:	008388c0 	call	8388c <__adddf3>
   81ce4:	180f883a 	mov	r7,r3
   81ce8:	880b883a 	mov	r5,r17
   81cec:	8009883a 	mov	r4,r16
   81cf0:	100d883a 	mov	r6,r2
   81cf4:	00839000 	call	83900 <__muldf3>
   81cf8:	1021883a 	mov	r16,r2
   81cfc:	008ff4f4 	movhi	r2,16339
   81d00:	108ccc84 	addi	r2,r2,13106
   81d04:	1823883a 	mov	r17,r3
   81d08:	15bf6f0e 	bge	r2,r22,81ac8 <__kernel_cos+0x1d4>
   81d0c:	008ffa74 	movhi	r2,16361
   81d10:	1580320e 	bge	r2,r22,81ddc <__kernel_cos+0x4e8>
   81d14:	0005883a 	mov	r2,zero
   81d18:	010ff9f4 	movhi	r4,16359
   81d1c:	002d883a 	mov	r22,zero
   81d20:	d8800015 	stw	r2,0(sp)
   81d24:	05cff4b4 	movhi	r23,16338
   81d28:	d9000115 	stw	r4,4(sp)
   81d2c:	0005883a 	mov	r2,zero
   81d30:	00cff834 	movhi	r3,16352
   81d34:	9009883a 	mov	r4,r18
   81d38:	980b883a 	mov	r5,r19
   81d3c:	180f883a 	mov	r7,r3
   81d40:	100d883a 	mov	r6,r2
   81d44:	00839000 	call	83900 <__muldf3>
   81d48:	180b883a 	mov	r5,r3
   81d4c:	b80f883a 	mov	r7,r23
   81d50:	1009883a 	mov	r4,r2
   81d54:	b00d883a 	mov	r6,r22
   81d58:	008380c0 	call	8380c <__subdf3>
   81d5c:	980b883a 	mov	r5,r19
   81d60:	880f883a 	mov	r7,r17
   81d64:	9009883a 	mov	r4,r18
   81d68:	800d883a 	mov	r6,r16
   81d6c:	1025883a 	mov	r18,r2
   81d70:	1827883a 	mov	r19,r3
   81d74:	00839000 	call	83900 <__muldf3>
   81d78:	d9c00517 	ldw	r7,20(sp)
   81d7c:	d9800417 	ldw	r6,16(sp)
   81d80:	a80b883a 	mov	r5,r21
   81d84:	a009883a 	mov	r4,r20
   81d88:	1021883a 	mov	r16,r2
   81d8c:	1823883a 	mov	r17,r3
   81d90:	00839000 	call	83900 <__muldf3>
   81d94:	180f883a 	mov	r7,r3
   81d98:	880b883a 	mov	r5,r17
   81d9c:	8009883a 	mov	r4,r16
   81da0:	100d883a 	mov	r6,r2
   81da4:	008380c0 	call	8380c <__subdf3>
   81da8:	180f883a 	mov	r7,r3
   81dac:	980b883a 	mov	r5,r19
   81db0:	9009883a 	mov	r4,r18
   81db4:	100d883a 	mov	r6,r2
   81db8:	008380c0 	call	8380c <__subdf3>
   81dbc:	d9400117 	ldw	r5,4(sp)
   81dc0:	d9000017 	ldw	r4,0(sp)
   81dc4:	180f883a 	mov	r7,r3
   81dc8:	100d883a 	mov	r6,r2
   81dcc:	003f6306 	br	81b5c <__kernel_cos+0x268>
   81dd0:	000d883a 	mov	r6,zero
   81dd4:	01cffc34 	movhi	r7,16368
   81dd8:	003f6306 	br	81b68 <__kernel_cos+0x274>
   81ddc:	00bff834 	movhi	r2,65504
   81de0:	b0ad883a 	add	r22,r22,r2
   81de4:	dd800315 	stw	r22,12(sp)
   81de8:	d9000317 	ldw	r4,12(sp)
   81dec:	0005883a 	mov	r2,zero
   81df0:	00cffc34 	movhi	r3,16368
   81df4:	002d883a 	mov	r22,zero
   81df8:	200f883a 	mov	r7,r4
   81dfc:	202f883a 	mov	r23,r4
   81e00:	180b883a 	mov	r5,r3
   81e04:	1009883a 	mov	r4,r2
   81e08:	b00d883a 	mov	r6,r22
   81e0c:	d8800215 	stw	r2,8(sp)
   81e10:	008380c0 	call	8380c <__subdf3>
   81e14:	d8800015 	stw	r2,0(sp)
   81e18:	d8c00115 	stw	r3,4(sp)
   81e1c:	003fc306 	br	81d2c <__kernel_cos+0x438>

00081e20 <__kernel_rem_pio2>:
   81e20:	deff5304 	addi	sp,sp,-692
   81e24:	d880ad17 	ldw	r2,692(sp)
   81e28:	d9009615 	stw	r4,600(sp)
   81e2c:	d9409715 	stw	r5,604(sp)
   81e30:	1087883a 	add	r3,r2,r2
   81e34:	18c7883a 	add	r3,r3,r3
   81e38:	00800274 	movhi	r2,9
   81e3c:	108aaf04 	addi	r2,r2,10940
   81e40:	1887883a 	add	r3,r3,r2
   81e44:	18c00017 	ldw	r3,0(r3)
   81e48:	313fff44 	addi	r4,r6,-3
   81e4c:	01400604 	movi	r5,24
   81e50:	df00ab15 	stw	fp,684(sp)
   81e54:	dc00a315 	stw	r16,652(sp)
   81e58:	d8c09515 	stw	r3,596(sp)
   81e5c:	dfc0ac15 	stw	ra,688(sp)
   81e60:	ddc0aa15 	stw	r23,680(sp)
   81e64:	dd80a915 	stw	r22,676(sp)
   81e68:	dd40a815 	stw	r21,672(sp)
   81e6c:	dd00a715 	stw	r20,668(sp)
   81e70:	dcc0a615 	stw	r19,664(sp)
   81e74:	dc80a515 	stw	r18,660(sp)
   81e78:	dc40a415 	stw	r17,656(sp)
   81e7c:	3021883a 	mov	r16,r6
   81e80:	d9c09815 	stw	r7,608(sp)
   81e84:	00843000 	call	84300 <__divsi3>
   81e88:	d8c09817 	ldw	r3,608(sp)
   81e8c:	d8808c15 	stw	r2,560(sp)
   81e90:	1f3fffc4 	addi	fp,r3,-1
   81e94:	10031a16 	blt	r2,zero,82b00 <__kernel_rem_pio2+0xce0>
   81e98:	d9008c17 	ldw	r4,560(sp)
   81e9c:	017ffa04 	movi	r5,-24
   81ea0:	00843d00 	call	843d0 <__mulsi3>
   81ea4:	d9009517 	ldw	r4,596(sp)
   81ea8:	8085883a 	add	r2,r16,r2
   81eac:	10bffa04 	addi	r2,r2,-24
   81eb0:	2707883a 	add	r3,r4,fp
   81eb4:	d8809315 	stw	r2,588(sp)
   81eb8:	18001616 	blt	r3,zero,81f14 <__kernel_rem_pio2+0xf4>
   81ebc:	d9408c17 	ldw	r5,560(sp)
   81ec0:	d980ae17 	ldw	r6,696(sp)
   81ec4:	dc801404 	addi	r18,sp,80
   81ec8:	2f21c83a 	sub	r16,r5,fp
   81ecc:	8405883a 	add	r2,r16,r16
   81ed0:	1085883a 	add	r2,r2,r2
   81ed4:	30a3883a 	add	r17,r6,r2
   81ed8:	80e7883a 	add	r19,r16,r3
   81edc:	00000106 	br	81ee4 <__kernel_rem_pio2+0xc4>
   81ee0:	84000044 	addi	r16,r16,1
   81ee4:	0009883a 	mov	r4,zero
   81ee8:	000b883a 	mov	r5,zero
   81eec:	80000416 	blt	r16,zero,81f00 <__kernel_rem_pio2+0xe0>
   81ef0:	89000017 	ldw	r4,0(r17)
   81ef4:	00840b40 	call	840b4 <__floatsidf>
   81ef8:	1009883a 	mov	r4,r2
   81efc:	180b883a 	mov	r5,r3
   81f00:	91400115 	stw	r5,4(r18)
   81f04:	91000015 	stw	r4,0(r18)
   81f08:	8c400104 	addi	r17,r17,4
   81f0c:	94800204 	addi	r18,r18,8
   81f10:	84fff31e 	bne	r16,r19,81ee0 <__kernel_rem_pio2+0xc0>
   81f14:	d9c09517 	ldw	r7,596(sp)
   81f18:	38002416 	blt	r7,zero,81fac <__kernel_rem_pio2+0x18c>
   81f1c:	da809817 	ldw	r10,608(sp)
   81f20:	e029883a 	mov	r20,fp
   81f24:	dd406404 	addi	r21,sp,400
   81f28:	3aaf883a 	add	r23,r7,r10
   81f2c:	e02c403a 	cmpge	r22,fp,zero
   81f30:	b0023e26 	beq	r22,zero,8282c <__kernel_rem_pio2+0xa0c>
   81f34:	dcc09617 	ldw	r19,600(sp)
   81f38:	0021883a 	mov	r16,zero
   81f3c:	0025883a 	mov	r18,zero
   81f40:	0023883a 	mov	r17,zero
   81f44:	a489c83a 	sub	r4,r20,r18
   81f48:	200890fa 	slli	r4,r4,3
   81f4c:	99800017 	ldw	r6,0(r19)
   81f50:	99c00117 	ldw	r7,4(r19)
   81f54:	26c9883a 	add	r4,r4,sp
   81f58:	20c01517 	ldw	r3,84(r4)
   81f5c:	20801417 	ldw	r2,80(r4)
   81f60:	94800044 	addi	r18,r18,1
   81f64:	180b883a 	mov	r5,r3
   81f68:	1009883a 	mov	r4,r2
   81f6c:	00839000 	call	83900 <__muldf3>
   81f70:	180f883a 	mov	r7,r3
   81f74:	880b883a 	mov	r5,r17
   81f78:	8009883a 	mov	r4,r16
   81f7c:	100d883a 	mov	r6,r2
   81f80:	008388c0 	call	8388c <__adddf3>
   81f84:	1021883a 	mov	r16,r2
   81f88:	d8809817 	ldw	r2,608(sp)
   81f8c:	9cc00204 	addi	r19,r19,8
   81f90:	1823883a 	mov	r17,r3
   81f94:	14bfeb1e 	bne	r2,r18,81f44 <__kernel_rem_pio2+0x124>
   81f98:	a5000044 	addi	r20,r20,1
   81f9c:	ac400115 	stw	r17,4(r21)
   81fa0:	ac000015 	stw	r16,0(r21)
   81fa4:	ad400204 	addi	r21,r21,8
   81fa8:	a5ffe11e 	bne	r20,r23,81f30 <__kernel_rem_pio2+0x110>
   81fac:	d8c09517 	ldw	r3,596(sp)
   81fb0:	d9409317 	ldw	r5,588(sp)
   81fb4:	e038403a 	cmpge	fp,fp,zero
   81fb8:	d8c08d15 	stw	r3,564(sp)
   81fbc:	d9008d17 	ldw	r4,564(sp)
   81fc0:	18c5883a 	add	r2,r3,r3
   81fc4:	10c7883a 	add	r3,r2,r3
   81fc8:	1907883a 	add	r3,r3,r4
   81fcc:	1085883a 	add	r2,r2,r2
   81fd0:	16c5883a 	add	r2,r2,sp
   81fd4:	1ec7883a 	add	r3,r3,sp
   81fd8:	29400050 	cmplti	r5,r5,1
   81fdc:	df00a215 	stw	fp,648(sp)
   81fe0:	d8809915 	stw	r2,612(sp)
   81fe4:	d8c0a115 	stw	r3,644(sp)
   81fe8:	d940a015 	stw	r5,640(sp)
   81fec:	d9808d17 	ldw	r6,564(sp)
   81ff0:	300490fa 	slli	r2,r6,3
   81ff4:	16c5883a 	add	r2,r2,sp
   81ff8:	15006417 	ldw	r20,400(r2)
   81ffc:	15406517 	ldw	r21,404(r2)
   82000:	01802e0e 	bge	zero,r6,820bc <__kernel_rem_pio2+0x29c>
   82004:	102d883a 	mov	r22,r2
   82008:	302f883a 	mov	r23,r6
   8200c:	d839883a 	mov	fp,sp
   82010:	0005883a 	mov	r2,zero
   82014:	00cf9c34 	movhi	r3,15984
   82018:	180f883a 	mov	r7,r3
   8201c:	100d883a 	mov	r6,r2
   82020:	a009883a 	mov	r4,r20
   82024:	a80b883a 	mov	r5,r21
   82028:	00839000 	call	83900 <__muldf3>
   8202c:	180b883a 	mov	r5,r3
   82030:	1009883a 	mov	r4,r2
   82034:	00841ac0 	call	841ac <__fixdfsi>
   82038:	1009883a 	mov	r4,r2
   8203c:	00840b40 	call	840b4 <__floatsidf>
   82040:	1021883a 	mov	r16,r2
   82044:	1823883a 	mov	r17,r3
   82048:	0005883a 	mov	r2,zero
   8204c:	00f05c34 	movhi	r3,49520
   82050:	180f883a 	mov	r7,r3
   82054:	8009883a 	mov	r4,r16
   82058:	880b883a 	mov	r5,r17
   8205c:	100d883a 	mov	r6,r2
   82060:	00839000 	call	83900 <__muldf3>
   82064:	180b883a 	mov	r5,r3
   82068:	a80f883a 	mov	r7,r21
   8206c:	a00d883a 	mov	r6,r20
   82070:	1009883a 	mov	r4,r2
   82074:	008388c0 	call	8388c <__adddf3>
   82078:	180b883a 	mov	r5,r3
   8207c:	1009883a 	mov	r4,r2
   82080:	00841ac0 	call	841ac <__fixdfsi>
   82084:	e0800015 	stw	r2,0(fp)
   82088:	b5bffe04 	addi	r22,r22,-8
   8208c:	b0806417 	ldw	r2,400(r22)
   82090:	b0c06517 	ldw	r3,404(r22)
   82094:	8009883a 	mov	r4,r16
   82098:	880b883a 	mov	r5,r17
   8209c:	180f883a 	mov	r7,r3
   820a0:	100d883a 	mov	r6,r2
   820a4:	008388c0 	call	8388c <__adddf3>
   820a8:	bdffffc4 	addi	r23,r23,-1
   820ac:	e7000104 	addi	fp,fp,4
   820b0:	1029883a 	mov	r20,r2
   820b4:	182b883a 	mov	r21,r3
   820b8:	b83fd51e 	bne	r23,zero,82010 <__kernel_rem_pio2+0x1f0>
   820bc:	d9809317 	ldw	r6,588(sp)
   820c0:	a80b883a 	mov	r5,r21
   820c4:	a009883a 	mov	r4,r20
   820c8:	00831f80 	call	831f8 <scalbn>
   820cc:	0009883a 	mov	r4,zero
   820d0:	014ff034 	movhi	r5,16320
   820d4:	280f883a 	mov	r7,r5
   820d8:	200d883a 	mov	r6,r4
   820dc:	180b883a 	mov	r5,r3
   820e0:	1009883a 	mov	r4,r2
   820e4:	1021883a 	mov	r16,r2
   820e8:	1823883a 	mov	r17,r3
   820ec:	00839000 	call	83900 <__muldf3>
   820f0:	180b883a 	mov	r5,r3
   820f4:	1009883a 	mov	r4,r2
   820f8:	0082fd40 	call	82fd4 <floor>
   820fc:	0011883a 	mov	r8,zero
   82100:	02700834 	movhi	r9,49184
   82104:	480f883a 	mov	r7,r9
   82108:	400d883a 	mov	r6,r8
   8210c:	180b883a 	mov	r5,r3
   82110:	1009883a 	mov	r4,r2
   82114:	00839000 	call	83900 <__muldf3>
   82118:	180f883a 	mov	r7,r3
   8211c:	100d883a 	mov	r6,r2
   82120:	880b883a 	mov	r5,r17
   82124:	8009883a 	mov	r4,r16
   82128:	008388c0 	call	8388c <__adddf3>
   8212c:	180b883a 	mov	r5,r3
   82130:	1009883a 	mov	r4,r2
   82134:	1823883a 	mov	r17,r3
   82138:	1021883a 	mov	r16,r2
   8213c:	00841ac0 	call	841ac <__fixdfsi>
   82140:	1009883a 	mov	r4,r2
   82144:	d8809415 	stw	r2,592(sp)
   82148:	00840b40 	call	840b4 <__floatsidf>
   8214c:	880b883a 	mov	r5,r17
   82150:	8009883a 	mov	r4,r16
   82154:	180f883a 	mov	r7,r3
   82158:	100d883a 	mov	r6,r2
   8215c:	008380c0 	call	8380c <__subdf3>
   82160:	d9c0a017 	ldw	r7,640(sp)
   82164:	180d883a 	mov	r6,r3
   82168:	1021883a 	mov	r16,r2
   8216c:	1823883a 	mov	r17,r3
   82170:	38017d1e 	bne	r7,zero,82768 <__kernel_rem_pio2+0x948>
   82174:	da808d17 	ldw	r10,564(sp)
   82178:	d9009317 	ldw	r4,588(sp)
   8217c:	00c00604 	movi	r3,24
   82180:	50bfffc4 	addi	r2,r10,-1
   82184:	1085883a 	add	r2,r2,r2
   82188:	1085883a 	add	r2,r2,r2
   8218c:	16c5883a 	add	r2,r2,sp
   82190:	11400017 	ldw	r5,0(r2)
   82194:	1907c83a 	sub	r3,r3,r4
   82198:	d9c09317 	ldw	r7,588(sp)
   8219c:	28cdd83a 	sra	r6,r5,r3
   821a0:	010005c4 	movi	r4,23
   821a4:	da809417 	ldw	r10,592(sp)
   821a8:	30c6983a 	sll	r3,r6,r3
   821ac:	21c9c83a 	sub	r4,r4,r7
   821b0:	5195883a 	add	r10,r10,r6
   821b4:	28cbc83a 	sub	r5,r5,r3
   821b8:	2909d83a 	sra	r4,r5,r4
   821bc:	da809415 	stw	r10,592(sp)
   821c0:	11400015 	stw	r5,0(r2)
   821c4:	d9009215 	stw	r4,584(sp)
   821c8:	d9409217 	ldw	r5,584(sp)
   821cc:	0140270e 	bge	zero,r5,8226c <__kernel_rem_pio2+0x44c>
   821d0:	d9809417 	ldw	r6,592(sp)
   821d4:	d9c08d17 	ldw	r7,564(sp)
   821d8:	31800044 	addi	r6,r6,1
   821dc:	d9809415 	stw	r6,592(sp)
   821e0:	01c1a50e 	bge	zero,r7,82878 <__kernel_rem_pio2+0xa58>
   821e4:	002d883a 	mov	r22,zero
   821e8:	000b883a 	mov	r5,zero
   821ec:	d809883a 	mov	r4,sp
   821f0:	01c04034 	movhi	r7,256
   821f4:	01804034 	movhi	r6,256
   821f8:	31bfffc4 	addi	r6,r6,-1
   821fc:	00000806 	br	82220 <__kernel_rem_pio2+0x400>
   82200:	38c5c83a 	sub	r2,r7,r3
   82204:	18000226 	beq	r3,zero,82210 <__kernel_rem_pio2+0x3f0>
   82208:	05800044 	movi	r22,1
   8220c:	20800015 	stw	r2,0(r4)
   82210:	da808d17 	ldw	r10,564(sp)
   82214:	29400044 	addi	r5,r5,1
   82218:	21000104 	addi	r4,r4,4
   8221c:	51400926 	beq	r10,r5,82244 <__kernel_rem_pio2+0x424>
   82220:	b004c03a 	cmpne	r2,r22,zero
   82224:	20c00017 	ldw	r3,0(r4)
   82228:	103ff526 	beq	r2,zero,82200 <__kernel_rem_pio2+0x3e0>
   8222c:	da808d17 	ldw	r10,564(sp)
   82230:	30c5c83a 	sub	r2,r6,r3
   82234:	29400044 	addi	r5,r5,1
   82238:	20800015 	stw	r2,0(r4)
   8223c:	21000104 	addi	r4,r4,4
   82240:	517ff71e 	bne	r10,r5,82220 <__kernel_rem_pio2+0x400>
   82244:	d880a017 	ldw	r2,640(sp)
   82248:	1000051e 	bne	r2,zero,82260 <__kernel_rem_pio2+0x440>
   8224c:	d8c09317 	ldw	r3,588(sp)
   82250:	00800044 	movi	r2,1
   82254:	18814e26 	beq	r3,r2,82790 <__kernel_rem_pio2+0x970>
   82258:	00800084 	movi	r2,2
   8225c:	18815826 	beq	r3,r2,827c0 <__kernel_rem_pio2+0x9a0>
   82260:	d9c09217 	ldw	r7,584(sp)
   82264:	00800084 	movi	r2,2
   82268:	38806926 	beq	r7,r2,82410 <__kernel_rem_pio2+0x5f0>
   8226c:	000d883a 	mov	r6,zero
   82270:	000f883a 	mov	r7,zero
   82274:	8009883a 	mov	r4,r16
   82278:	880b883a 	mov	r5,r17
   8227c:	0083f1c0 	call	83f1c <__eqdf2>
   82280:	1000811e 	bne	r2,zero,82488 <__kernel_rem_pio2+0x668>
   82284:	da808d17 	ldw	r10,564(sp)
   82288:	d8809517 	ldw	r2,596(sp)
   8228c:	51bfffc4 	addi	r6,r10,-1
   82290:	30800c16 	blt	r6,r2,822c4 <__kernel_rem_pio2+0x4a4>
   82294:	3185883a 	add	r2,r6,r6
   82298:	1085883a 	add	r2,r2,r2
   8229c:	16c9883a 	add	r4,r2,sp
   822a0:	3007883a 	mov	r3,r6
   822a4:	000b883a 	mov	r5,zero
   822a8:	20800017 	ldw	r2,0(r4)
   822ac:	d9c09517 	ldw	r7,596(sp)
   822b0:	18ffffc4 	addi	r3,r3,-1
   822b4:	213fff04 	addi	r4,r4,-4
   822b8:	288ab03a 	or	r5,r5,r2
   822bc:	19fffa0e 	bge	r3,r7,822a8 <__kernel_rem_pio2+0x488>
   822c0:	2800791e 	bne	r5,zero,824a8 <__kernel_rem_pio2+0x688>
   822c4:	da809917 	ldw	r10,612(sp)
   822c8:	50bfff17 	ldw	r2,-4(r10)
   822cc:	1001511e 	bne	r2,zero,82814 <__kernel_rem_pio2+0x9f4>
   822d0:	d880a117 	ldw	r2,644(sp)
   822d4:	01000044 	movi	r4,1
   822d8:	10ffff04 	addi	r3,r2,-4
   822dc:	18ffff04 	addi	r3,r3,-4
   822e0:	18800017 	ldw	r2,0(r3)
   822e4:	21000044 	addi	r4,r4,1
   822e8:	103ffc26 	beq	r2,zero,822dc <__kernel_rem_pio2+0x4bc>
   822ec:	d8c08d17 	ldw	r3,564(sp)
   822f0:	192f883a 	add	r23,r3,r4
   822f4:	1f000044 	addi	fp,r3,1
   822f8:	bf00020e 	bge	r23,fp,82304 <__kernel_rem_pio2+0x4e4>
   822fc:	ddc08d15 	stw	r23,564(sp)
   82300:	003f3a06 	br	81fec <__kernel_rem_pio2+0x1cc>
   82304:	d9408c17 	ldw	r5,560(sp)
   82308:	d9009817 	ldw	r4,608(sp)
   8230c:	da80ae17 	ldw	r10,696(sp)
   82310:	1945883a 	add	r2,r3,r5
   82314:	190f883a 	add	r7,r3,r4
   82318:	1085883a 	add	r2,r2,r2
   8231c:	380a90fa 	slli	r5,r7,3
   82320:	e00c90fa 	slli	r6,fp,3
   82324:	1085883a 	add	r2,r2,r2
   82328:	5085883a 	add	r2,r10,r2
   8232c:	d8c01404 	addi	r3,sp,80
   82330:	d9006404 	addi	r4,sp,400
   82334:	10800104 	addi	r2,r2,4
   82338:	196b883a 	add	r21,r3,r5
   8233c:	21a1883a 	add	r16,r4,r6
   82340:	d8809115 	stw	r2,580(sp)
   82344:	d9c09015 	stw	r7,576(sp)
   82348:	d8809117 	ldw	r2,580(sp)
   8234c:	11000017 	ldw	r4,0(r2)
   82350:	00840b40 	call	840b4 <__floatsidf>
   82354:	a8c00115 	stw	r3,4(r21)
   82358:	d8c0a217 	ldw	r3,648(sp)
   8235c:	a8800015 	stw	r2,0(r21)
   82360:	18002826 	beq	r3,zero,82404 <__kernel_rem_pio2+0x5e4>
   82364:	d9009017 	ldw	r4,576(sp)
   82368:	dd009617 	ldw	r20,600(sp)
   8236c:	0023883a 	mov	r17,zero
   82370:	200490fa 	slli	r2,r4,3
   82374:	002d883a 	mov	r22,zero
   82378:	0025883a 	mov	r18,zero
   8237c:	16e7883a 	add	r19,r2,sp
   82380:	98801417 	ldw	r2,80(r19)
   82384:	98c01517 	ldw	r3,84(r19)
   82388:	a1800017 	ldw	r6,0(r20)
   8238c:	a1c00117 	ldw	r7,4(r20)
   82390:	180b883a 	mov	r5,r3
   82394:	1009883a 	mov	r4,r2
   82398:	00839000 	call	83900 <__muldf3>
   8239c:	180f883a 	mov	r7,r3
   823a0:	900b883a 	mov	r5,r18
   823a4:	8809883a 	mov	r4,r17
   823a8:	100d883a 	mov	r6,r2
   823ac:	008388c0 	call	8388c <__adddf3>
   823b0:	d9409817 	ldw	r5,608(sp)
   823b4:	b5800044 	addi	r22,r22,1
   823b8:	9cfffe04 	addi	r19,r19,-8
   823bc:	1023883a 	mov	r17,r2
   823c0:	1825883a 	mov	r18,r3
   823c4:	a5000204 	addi	r20,r20,8
   823c8:	2dbfed1e 	bne	r5,r22,82380 <__kernel_rem_pio2+0x560>
   823cc:	d9809117 	ldw	r6,580(sp)
   823d0:	d9c09017 	ldw	r7,576(sp)
   823d4:	e7000044 	addi	fp,fp,1
   823d8:	31800104 	addi	r6,r6,4
   823dc:	39c00044 	addi	r7,r7,1
   823e0:	84800115 	stw	r18,4(r16)
   823e4:	84400015 	stw	r17,0(r16)
   823e8:	d9809115 	stw	r6,580(sp)
   823ec:	ad400204 	addi	r21,r21,8
   823f0:	84000204 	addi	r16,r16,8
   823f4:	d9c09015 	stw	r7,576(sp)
   823f8:	bf3fd30e 	bge	r23,fp,82348 <__kernel_rem_pio2+0x528>
   823fc:	ddc08d15 	stw	r23,564(sp)
   82400:	003efa06 	br	81fec <__kernel_rem_pio2+0x1cc>
   82404:	0023883a 	mov	r17,zero
   82408:	0025883a 	mov	r18,zero
   8240c:	003fef06 	br	823cc <__kernel_rem_pio2+0x5ac>
   82410:	0029883a 	mov	r20,zero
   82414:	054ffc34 	movhi	r21,16368
   82418:	880f883a 	mov	r7,r17
   8241c:	800d883a 	mov	r6,r16
   82420:	a009883a 	mov	r4,r20
   82424:	a80b883a 	mov	r5,r21
   82428:	008380c0 	call	8380c <__subdf3>
   8242c:	1025883a 	mov	r18,r2
   82430:	b005003a 	cmpeq	r2,r22,zero
   82434:	1827883a 	mov	r19,r3
   82438:	9021883a 	mov	r16,r18
   8243c:	1823883a 	mov	r17,r3
   82440:	103f8a1e 	bne	r2,zero,8226c <__kernel_rem_pio2+0x44c>
   82444:	d9809317 	ldw	r6,588(sp)
   82448:	0009883a 	mov	r4,zero
   8244c:	a80b883a 	mov	r5,r21
   82450:	00831f80 	call	831f8 <scalbn>
   82454:	180f883a 	mov	r7,r3
   82458:	9009883a 	mov	r4,r18
   8245c:	980b883a 	mov	r5,r19
   82460:	100d883a 	mov	r6,r2
   82464:	008380c0 	call	8380c <__subdf3>
   82468:	1021883a 	mov	r16,r2
   8246c:	1823883a 	mov	r17,r3
   82470:	000d883a 	mov	r6,zero
   82474:	000f883a 	mov	r7,zero
   82478:	8009883a 	mov	r4,r16
   8247c:	880b883a 	mov	r5,r17
   82480:	0083f1c0 	call	83f1c <__eqdf2>
   82484:	103f7f26 	beq	r2,zero,82284 <__kernel_rem_pio2+0x464>
   82488:	000d883a 	mov	r6,zero
   8248c:	000f883a 	mov	r7,zero
   82490:	8009883a 	mov	r4,r16
   82494:	880b883a 	mov	r5,r17
   82498:	0083f1c0 	call	83f1c <__eqdf2>
   8249c:	10019a1e 	bne	r2,zero,82b08 <__kernel_rem_pio2+0xce8>
   824a0:	da808d17 	ldw	r10,564(sp)
   824a4:	51bfffc4 	addi	r6,r10,-1
   824a8:	3185883a 	add	r2,r6,r6
   824ac:	1085883a 	add	r2,r2,r2
   824b0:	d9009317 	ldw	r4,588(sp)
   824b4:	16c5883a 	add	r2,r2,sp
   824b8:	10c00017 	ldw	r3,0(r2)
   824bc:	213ffa04 	addi	r4,r4,-24
   824c0:	d9009315 	stw	r4,588(sp)
   824c4:	1801d41e 	bne	r3,zero,82c18 <__kernel_rem_pio2+0xdf8>
   824c8:	d9808d15 	stw	r6,564(sp)
   824cc:	1007883a 	mov	r3,r2
   824d0:	d9408d17 	ldw	r5,564(sp)
   824d4:	d9809317 	ldw	r6,588(sp)
   824d8:	18ffff04 	addi	r3,r3,-4
   824dc:	18800017 	ldw	r2,0(r3)
   824e0:	297fffc4 	addi	r5,r5,-1
   824e4:	31bffa04 	addi	r6,r6,-24
   824e8:	d9408d15 	stw	r5,564(sp)
   824ec:	d9809315 	stw	r6,588(sp)
   824f0:	103ff726 	beq	r2,zero,824d0 <__kernel_rem_pio2+0x6b0>
   824f4:	d9809317 	ldw	r6,588(sp)
   824f8:	0005883a 	mov	r2,zero
   824fc:	00cffc34 	movhi	r3,16368
   82500:	180b883a 	mov	r5,r3
   82504:	1009883a 	mov	r4,r2
   82508:	00831f80 	call	831f8 <scalbn>
   8250c:	d9808d17 	ldw	r6,564(sp)
   82510:	1021883a 	mov	r16,r2
   82514:	1823883a 	mov	r17,r3
   82518:	30004616 	blt	r6,zero,82634 <__kernel_rem_pio2+0x814>
   8251c:	300690fa 	slli	r3,r6,3
   82520:	3185883a 	add	r2,r6,r6
   82524:	1085883a 	add	r2,r2,r2
   82528:	16e9883a 	add	r20,r2,sp
   8252c:	1ee5883a 	add	r18,r3,sp
   82530:	3027883a 	mov	r19,r6
   82534:	057fffc4 	movi	r21,-1
   82538:	a1000017 	ldw	r4,0(r20)
   8253c:	9cffffc4 	addi	r19,r19,-1
   82540:	a53fff04 	addi	r20,r20,-4
   82544:	00840b40 	call	840b4 <__floatsidf>
   82548:	800d883a 	mov	r6,r16
   8254c:	880f883a 	mov	r7,r17
   82550:	180b883a 	mov	r5,r3
   82554:	1009883a 	mov	r4,r2
   82558:	00839000 	call	83900 <__muldf3>
   8255c:	0015883a 	mov	r10,zero
   82560:	02cf9c34 	movhi	r11,15984
   82564:	880b883a 	mov	r5,r17
   82568:	8009883a 	mov	r4,r16
   8256c:	90c06515 	stw	r3,404(r18)
   82570:	90806415 	stw	r2,400(r18)
   82574:	580f883a 	mov	r7,r11
   82578:	500d883a 	mov	r6,r10
   8257c:	00839000 	call	83900 <__muldf3>
   82580:	1021883a 	mov	r16,r2
   82584:	1823883a 	mov	r17,r3
   82588:	94bffe04 	addi	r18,r18,-8
   8258c:	9d7fea1e 	bne	r19,r21,82538 <__kernel_rem_pio2+0x718>
   82590:	d9c09517 	ldw	r7,596(sp)
   82594:	dd808d17 	ldw	r22,564(sp)
   82598:	002b883a 	mov	r21,zero
   8259c:	382e403a 	cmpge	r23,r7,zero
   825a0:	b800aa26 	beq	r23,zero,8284c <__kernel_rem_pio2+0xa2c>
   825a4:	a800a916 	blt	r21,zero,8284c <__kernel_rem_pio2+0xa2c>
   825a8:	b00690fa 	slli	r3,r22,3
   825ac:	d8806404 	addi	r2,sp,400
   825b0:	0021883a 	mov	r16,zero
   825b4:	10e9883a 	add	r20,r2,r3
   825b8:	0027883a 	mov	r19,zero
   825bc:	0023883a 	mov	r17,zero
   825c0:	04800274 	movhi	r18,9
   825c4:	948ab304 	addi	r18,r18,10956
   825c8:	00000106 	br	825d0 <__kernel_rem_pio2+0x7b0>
   825cc:	acc01116 	blt	r21,r19,82614 <__kernel_rem_pio2+0x7f4>
   825d0:	91000017 	ldw	r4,0(r18)
   825d4:	91400117 	ldw	r5,4(r18)
   825d8:	a1800017 	ldw	r6,0(r20)
   825dc:	a1c00117 	ldw	r7,4(r20)
   825e0:	9cc00044 	addi	r19,r19,1
   825e4:	94800204 	addi	r18,r18,8
   825e8:	00839000 	call	83900 <__muldf3>
   825ec:	180f883a 	mov	r7,r3
   825f0:	880b883a 	mov	r5,r17
   825f4:	8009883a 	mov	r4,r16
   825f8:	100d883a 	mov	r6,r2
   825fc:	008388c0 	call	8388c <__adddf3>
   82600:	da809517 	ldw	r10,596(sp)
   82604:	a5000204 	addi	r20,r20,8
   82608:	1021883a 	mov	r16,r2
   8260c:	1823883a 	mov	r17,r3
   82610:	54ffee0e 	bge	r10,r19,825cc <__kernel_rem_pio2+0x7ac>
   82614:	a80490fa 	slli	r2,r21,3
   82618:	b5bfffc4 	addi	r22,r22,-1
   8261c:	ad400044 	addi	r21,r21,1
   82620:	16c5883a 	add	r2,r2,sp
   82624:	14403d15 	stw	r17,244(r2)
   82628:	14003c15 	stw	r16,240(r2)
   8262c:	00bfffc4 	movi	r2,-1
   82630:	b0bfdb1e 	bne	r22,r2,825a0 <__kernel_rem_pio2+0x780>
   82634:	d8c0ad17 	ldw	r3,692(sp)
   82638:	00800084 	movi	r2,2
   8263c:	10c09316 	blt	r2,r3,8288c <__kernel_rem_pio2+0xa6c>
   82640:	00c1120e 	bge	zero,r3,82a8c <__kernel_rem_pio2+0xc6c>
   82644:	d9808d17 	ldw	r6,564(sp)
   82648:	30018d16 	blt	r6,zero,82c80 <__kernel_rem_pio2+0xe60>
   8264c:	d8c08d17 	ldw	r3,564(sp)
   82650:	0011883a 	mov	r8,zero
   82654:	0013883a 	mov	r9,zero
   82658:	180490fa 	slli	r2,r3,3
   8265c:	1823883a 	mov	r17,r3
   82660:	04bfffc4 	movi	r18,-1
   82664:	16e1883a 	add	r16,r2,sp
   82668:	80803c17 	ldw	r2,240(r16)
   8266c:	80c03d17 	ldw	r3,244(r16)
   82670:	480b883a 	mov	r5,r9
   82674:	4009883a 	mov	r4,r8
   82678:	180f883a 	mov	r7,r3
   8267c:	100d883a 	mov	r6,r2
   82680:	008388c0 	call	8388c <__adddf3>
   82684:	8c7fffc4 	addi	r17,r17,-1
   82688:	843ffe04 	addi	r16,r16,-8
   8268c:	1011883a 	mov	r8,r2
   82690:	1813883a 	mov	r9,r3
   82694:	8cbff41e 	bne	r17,r18,82668 <__kernel_rem_pio2+0x848>
   82698:	d9009217 	ldw	r4,584(sp)
   8269c:	20015b1e 	bne	r4,zero,82c0c <__kernel_rem_pio2+0xdec>
   826a0:	4009883a 	mov	r4,r8
   826a4:	480b883a 	mov	r5,r9
   826a8:	d9809717 	ldw	r6,604(sp)
   826ac:	d8803c17 	ldw	r2,240(sp)
   826b0:	480f883a 	mov	r7,r9
   826b4:	31400115 	stw	r5,4(r6)
   826b8:	31000015 	stw	r4,0(r6)
   826bc:	d8c03d17 	ldw	r3,244(sp)
   826c0:	400d883a 	mov	r6,r8
   826c4:	1009883a 	mov	r4,r2
   826c8:	180b883a 	mov	r5,r3
   826cc:	008380c0 	call	8380c <__subdf3>
   826d0:	d9c08d17 	ldw	r7,564(sp)
   826d4:	1011883a 	mov	r8,r2
   826d8:	1813883a 	mov	r9,r3
   826dc:	01c00d0e 	bge	zero,r7,82714 <__kernel_rem_pio2+0x8f4>
   826e0:	0023883a 	mov	r17,zero
   826e4:	dc003e04 	addi	r16,sp,248
   826e8:	81800017 	ldw	r6,0(r16)
   826ec:	81c00117 	ldw	r7,4(r16)
   826f0:	480b883a 	mov	r5,r9
   826f4:	4009883a 	mov	r4,r8
   826f8:	008388c0 	call	8388c <__adddf3>
   826fc:	da808d17 	ldw	r10,564(sp)
   82700:	8c400044 	addi	r17,r17,1
   82704:	1011883a 	mov	r8,r2
   82708:	1813883a 	mov	r9,r3
   8270c:	84000204 	addi	r16,r16,8
   82710:	8abff51e 	bne	r17,r10,826e8 <__kernel_rem_pio2+0x8c8>
   82714:	d8809217 	ldw	r2,584(sp)
   82718:	10000226 	beq	r2,zero,82724 <__kernel_rem_pio2+0x904>
   8271c:	48e0003c 	xorhi	r3,r9,32768
   82720:	1813883a 	mov	r9,r3
   82724:	d8c09717 	ldw	r3,604(sp)
   82728:	1a400315 	stw	r9,12(r3)
   8272c:	1a000215 	stw	r8,8(r3)
   82730:	d8c09417 	ldw	r3,592(sp)
   82734:	188001cc 	andi	r2,r3,7
   82738:	dfc0ac17 	ldw	ra,688(sp)
   8273c:	df00ab17 	ldw	fp,684(sp)
   82740:	ddc0aa17 	ldw	r23,680(sp)
   82744:	dd80a917 	ldw	r22,676(sp)
   82748:	dd40a817 	ldw	r21,672(sp)
   8274c:	dd00a717 	ldw	r20,668(sp)
   82750:	dcc0a617 	ldw	r19,664(sp)
   82754:	dc80a517 	ldw	r18,660(sp)
   82758:	dc40a417 	ldw	r17,656(sp)
   8275c:	dc00a317 	ldw	r16,652(sp)
   82760:	dec0ad04 	addi	sp,sp,692
   82764:	f800283a 	ret
   82768:	d8809317 	ldw	r2,588(sp)
   8276c:	10001f1e 	bne	r2,zero,827ec <__kernel_rem_pio2+0x9cc>
   82770:	d8c08d17 	ldw	r3,564(sp)
   82774:	18c5883a 	add	r2,r3,r3
   82778:	1085883a 	add	r2,r2,r2
   8277c:	16c5883a 	add	r2,r2,sp
   82780:	10ffff17 	ldw	r3,-4(r2)
   82784:	1807d5fa 	srai	r3,r3,23
   82788:	d8c09215 	stw	r3,584(sp)
   8278c:	003e8e06 	br	821c8 <__kernel_rem_pio2+0x3a8>
   82790:	d9008d17 	ldw	r4,564(sp)
   82794:	d9409317 	ldw	r5,588(sp)
   82798:	2145c83a 	sub	r2,r4,r5
   8279c:	1085883a 	add	r2,r2,r2
   827a0:	1085883a 	add	r2,r2,r2
   827a4:	16c5883a 	add	r2,r2,sp
   827a8:	10c00017 	ldw	r3,0(r2)
   827ac:	01002034 	movhi	r4,128
   827b0:	213fffc4 	addi	r4,r4,-1
   827b4:	1906703a 	and	r3,r3,r4
   827b8:	10c00015 	stw	r3,0(r2)
   827bc:	003ea806 	br	82260 <__kernel_rem_pio2+0x440>
   827c0:	d9808d17 	ldw	r6,564(sp)
   827c4:	01001034 	movhi	r4,64
   827c8:	213fffc4 	addi	r4,r4,-1
   827cc:	30bfffc4 	addi	r2,r6,-1
   827d0:	1085883a 	add	r2,r2,r2
   827d4:	1085883a 	add	r2,r2,r2
   827d8:	16c5883a 	add	r2,r2,sp
   827dc:	10c00017 	ldw	r3,0(r2)
   827e0:	1906703a 	and	r3,r3,r4
   827e4:	10c00015 	stw	r3,0(r2)
   827e8:	003e9d06 	br	82260 <__kernel_rem_pio2+0x440>
   827ec:	0005883a 	mov	r2,zero
   827f0:	00cff834 	movhi	r3,16352
   827f4:	300b883a 	mov	r5,r6
   827f8:	180f883a 	mov	r7,r3
   827fc:	8009883a 	mov	r4,r16
   82800:	100d883a 	mov	r6,r2
   82804:	008402c0 	call	8402c <__gedf2>
   82808:	10001d0e 	bge	r2,zero,82880 <__kernel_rem_pio2+0xa60>
   8280c:	d8009215 	stw	zero,584(sp)
   82810:	003e9606 	br	8226c <__kernel_rem_pio2+0x44c>
   82814:	d8c08d17 	ldw	r3,564(sp)
   82818:	01000044 	movi	r4,1
   8281c:	192f883a 	add	r23,r3,r4
   82820:	1f000044 	addi	fp,r3,1
   82824:	bf3eb516 	blt	r23,fp,822fc <__kernel_rem_pio2+0x4dc>
   82828:	003eb606 	br	82304 <__kernel_rem_pio2+0x4e4>
   8282c:	0021883a 	mov	r16,zero
   82830:	0023883a 	mov	r17,zero
   82834:	a5000044 	addi	r20,r20,1
   82838:	ac400115 	stw	r17,4(r21)
   8283c:	ac000015 	stw	r16,0(r21)
   82840:	ad400204 	addi	r21,r21,8
   82844:	a5fdba1e 	bne	r20,r23,81f30 <__kernel_rem_pio2+0x110>
   82848:	003dd806 	br	81fac <__kernel_rem_pio2+0x18c>
   8284c:	a80490fa 	slli	r2,r21,3
   82850:	0021883a 	mov	r16,zero
   82854:	0023883a 	mov	r17,zero
   82858:	16c5883a 	add	r2,r2,sp
   8285c:	14403d15 	stw	r17,244(r2)
   82860:	14003c15 	stw	r16,240(r2)
   82864:	b5bfffc4 	addi	r22,r22,-1
   82868:	00bfffc4 	movi	r2,-1
   8286c:	ad400044 	addi	r21,r21,1
   82870:	b0bf4b1e 	bne	r22,r2,825a0 <__kernel_rem_pio2+0x780>
   82874:	003f6f06 	br	82634 <__kernel_rem_pio2+0x814>
   82878:	002d883a 	mov	r22,zero
   8287c:	003e7106 	br	82244 <__kernel_rem_pio2+0x424>
   82880:	01000084 	movi	r4,2
   82884:	d9009215 	stw	r4,584(sp)
   82888:	003e5106 	br	821d0 <__kernel_rem_pio2+0x3b0>
   8288c:	d900ad17 	ldw	r4,692(sp)
   82890:	008000c4 	movi	r2,3
   82894:	20bfa61e 	bne	r4,r2,82730 <__kernel_rem_pio2+0x910>
   82898:	d9c08d17 	ldw	r7,564(sp)
   8289c:	01c02c0e 	bge	zero,r7,82950 <__kernel_rem_pio2+0xb30>
   828a0:	3805883a 	mov	r2,r7
   828a4:	00000106 	br	828ac <__kernel_rem_pio2+0xa8c>
   828a8:	d8808e17 	ldw	r2,568(sp)
   828ac:	113fffc4 	addi	r4,r2,-1
   828b0:	100690fa 	slli	r3,r2,3
   828b4:	200490fa 	slli	r2,r4,3
   828b8:	d9008e15 	stw	r4,568(sp)
   828bc:	1ef9883a 	add	fp,r3,sp
   828c0:	16c5883a 	add	r2,r2,sp
   828c4:	d8809a15 	stw	r2,616(sp)
   828c8:	11403c04 	addi	r5,r2,240
   828cc:	e1803c04 	addi	r6,fp,240
   828d0:	14003c17 	ldw	r16,240(r2)
   828d4:	e5003c17 	ldw	r20,240(fp)
   828d8:	d9409b15 	stw	r5,620(sp)
   828dc:	d9809c15 	stw	r6,624(sp)
   828e0:	35400117 	ldw	r21,4(r6)
   828e4:	2c400117 	ldw	r17,4(r5)
   828e8:	8009883a 	mov	r4,r16
   828ec:	a00d883a 	mov	r6,r20
   828f0:	880b883a 	mov	r5,r17
   828f4:	a80f883a 	mov	r7,r21
   828f8:	008388c0 	call	8388c <__adddf3>
   828fc:	100d883a 	mov	r6,r2
   82900:	880b883a 	mov	r5,r17
   82904:	8009883a 	mov	r4,r16
   82908:	180f883a 	mov	r7,r3
   8290c:	1025883a 	mov	r18,r2
   82910:	1827883a 	mov	r19,r3
   82914:	008380c0 	call	8380c <__subdf3>
   82918:	180f883a 	mov	r7,r3
   8291c:	a80b883a 	mov	r5,r21
   82920:	a009883a 	mov	r4,r20
   82924:	100d883a 	mov	r6,r2
   82928:	008388c0 	call	8388c <__adddf3>
   8292c:	e0803c15 	stw	r2,240(fp)
   82930:	d9c09c17 	ldw	r7,624(sp)
   82934:	38c00115 	stw	r3,4(r7)
   82938:	da809a17 	ldw	r10,616(sp)
   8293c:	54803c15 	stw	r18,240(r10)
   82940:	d8809b17 	ldw	r2,620(sp)
   82944:	14c00115 	stw	r19,4(r2)
   82948:	d8c08e17 	ldw	r3,568(sp)
   8294c:	183fd61e 	bne	r3,zero,828a8 <__kernel_rem_pio2+0xa88>
   82950:	d9008d17 	ldw	r4,564(sp)
   82954:	00800044 	movi	r2,1
   82958:	1100cc0e 	bge	r2,r4,82c8c <__kernel_rem_pio2+0xe6c>
   8295c:	d8808d17 	ldw	r2,564(sp)
   82960:	117fffc4 	addi	r5,r2,-1
   82964:	100690fa 	slli	r3,r2,3
   82968:	280490fa 	slli	r2,r5,3
   8296c:	d9408f15 	stw	r5,572(sp)
   82970:	1ef9883a 	add	fp,r3,sp
   82974:	16c5883a 	add	r2,r2,sp
   82978:	d8809d15 	stw	r2,628(sp)
   8297c:	11803c04 	addi	r6,r2,240
   82980:	e1c03c04 	addi	r7,fp,240
   82984:	14003c17 	ldw	r16,240(r2)
   82988:	e5003c17 	ldw	r20,240(fp)
   8298c:	d9809e15 	stw	r6,632(sp)
   82990:	d9c09f15 	stw	r7,636(sp)
   82994:	34400117 	ldw	r17,4(r6)
   82998:	3d400117 	ldw	r21,4(r7)
   8299c:	8009883a 	mov	r4,r16
   829a0:	880b883a 	mov	r5,r17
   829a4:	a00d883a 	mov	r6,r20
   829a8:	a80f883a 	mov	r7,r21
   829ac:	008388c0 	call	8388c <__adddf3>
   829b0:	100d883a 	mov	r6,r2
   829b4:	880b883a 	mov	r5,r17
   829b8:	8009883a 	mov	r4,r16
   829bc:	180f883a 	mov	r7,r3
   829c0:	1025883a 	mov	r18,r2
   829c4:	1827883a 	mov	r19,r3
   829c8:	008380c0 	call	8380c <__subdf3>
   829cc:	180f883a 	mov	r7,r3
   829d0:	a80b883a 	mov	r5,r21
   829d4:	a009883a 	mov	r4,r20
   829d8:	100d883a 	mov	r6,r2
   829dc:	008388c0 	call	8388c <__adddf3>
   829e0:	e0803c15 	stw	r2,240(fp)
   829e4:	da809f17 	ldw	r10,636(sp)
   829e8:	50c00115 	stw	r3,4(r10)
   829ec:	d8c09d17 	ldw	r3,628(sp)
   829f0:	d8808f17 	ldw	r2,572(sp)
   829f4:	1c803c15 	stw	r18,240(r3)
   829f8:	d9009e17 	ldw	r4,632(sp)
   829fc:	00c00044 	movi	r3,1
   82a00:	24c00115 	stw	r19,4(r4)
   82a04:	d9408f17 	ldw	r5,572(sp)
   82a08:	28ffd51e 	bne	r5,r3,82960 <__kernel_rem_pio2+0xb40>
   82a0c:	dc008d17 	ldw	r16,564(sp)
   82a10:	0011883a 	mov	r8,zero
   82a14:	1825883a 	mov	r18,r3
   82a18:	800490fa 	slli	r2,r16,3
   82a1c:	0013883a 	mov	r9,zero
   82a20:	16e3883a 	add	r17,r2,sp
   82a24:	88803c17 	ldw	r2,240(r17)
   82a28:	88c03d17 	ldw	r3,244(r17)
   82a2c:	480b883a 	mov	r5,r9
   82a30:	4009883a 	mov	r4,r8
   82a34:	180f883a 	mov	r7,r3
   82a38:	100d883a 	mov	r6,r2
   82a3c:	008388c0 	call	8388c <__adddf3>
   82a40:	843fffc4 	addi	r16,r16,-1
   82a44:	8c7ffe04 	addi	r17,r17,-8
   82a48:	1011883a 	mov	r8,r2
   82a4c:	1813883a 	mov	r9,r3
   82a50:	84bff41e 	bne	r16,r18,82a24 <__kernel_rem_pio2+0xc04>
   82a54:	d9809217 	ldw	r6,584(sp)
   82a58:	30007a1e 	bne	r6,zero,82c44 <__kernel_rem_pio2+0xe24>
   82a5c:	d9c09717 	ldw	r7,604(sp)
   82a60:	d8803c17 	ldw	r2,240(sp)
   82a64:	d9003e17 	ldw	r4,248(sp)
   82a68:	3a400515 	stw	r9,20(r7)
   82a6c:	d8c03d17 	ldw	r3,244(sp)
   82a70:	d9403f17 	ldw	r5,252(sp)
   82a74:	3a000415 	stw	r8,16(r7)
   82a78:	38c00115 	stw	r3,4(r7)
   82a7c:	39400315 	stw	r5,12(r7)
   82a80:	38800015 	stw	r2,0(r7)
   82a84:	39000215 	stw	r4,8(r7)
   82a88:	003f2906 	br	82730 <__kernel_rem_pio2+0x910>
   82a8c:	183f281e 	bne	r3,zero,82730 <__kernel_rem_pio2+0x910>
   82a90:	d9408d17 	ldw	r5,564(sp)
   82a94:	28008016 	blt	r5,zero,82c98 <__kernel_rem_pio2+0xe78>
   82a98:	dc008d17 	ldw	r16,564(sp)
   82a9c:	000d883a 	mov	r6,zero
   82aa0:	000f883a 	mov	r7,zero
   82aa4:	800490fa 	slli	r2,r16,3
   82aa8:	04bfffc4 	movi	r18,-1
   82aac:	16e3883a 	add	r17,r2,sp
   82ab0:	88803c17 	ldw	r2,240(r17)
   82ab4:	88c03d17 	ldw	r3,244(r17)
   82ab8:	380b883a 	mov	r5,r7
   82abc:	3009883a 	mov	r4,r6
   82ac0:	180f883a 	mov	r7,r3
   82ac4:	100d883a 	mov	r6,r2
   82ac8:	008388c0 	call	8388c <__adddf3>
   82acc:	843fffc4 	addi	r16,r16,-1
   82ad0:	8c7ffe04 	addi	r17,r17,-8
   82ad4:	100d883a 	mov	r6,r2
   82ad8:	180f883a 	mov	r7,r3
   82adc:	84bff41e 	bne	r16,r18,82ab0 <__kernel_rem_pio2+0xc90>
   82ae0:	da809217 	ldw	r10,584(sp)
   82ae4:	50000226 	beq	r10,zero,82af0 <__kernel_rem_pio2+0xcd0>
   82ae8:	38e0003c 	xorhi	r3,r7,32768
   82aec:	180f883a 	mov	r7,r3
   82af0:	d8809717 	ldw	r2,604(sp)
   82af4:	11c00115 	stw	r7,4(r2)
   82af8:	11800015 	stw	r6,0(r2)
   82afc:	003f0c06 	br	82730 <__kernel_rem_pio2+0x910>
   82b00:	d8008c15 	stw	zero,560(sp)
   82b04:	003ce406 	br	81e98 <__kernel_rem_pio2+0x78>
   82b08:	d9c09317 	ldw	r7,588(sp)
   82b0c:	880b883a 	mov	r5,r17
   82b10:	8009883a 	mov	r4,r16
   82b14:	01cdc83a 	sub	r6,zero,r7
   82b18:	00831f80 	call	831f8 <scalbn>
   82b1c:	0011883a 	mov	r8,zero
   82b20:	02505c34 	movhi	r9,16752
   82b24:	480f883a 	mov	r7,r9
   82b28:	1009883a 	mov	r4,r2
   82b2c:	180b883a 	mov	r5,r3
   82b30:	400d883a 	mov	r6,r8
   82b34:	102d883a 	mov	r22,r2
   82b38:	182f883a 	mov	r23,r3
   82b3c:	008402c0 	call	8402c <__gedf2>
   82b40:	10003716 	blt	r2,zero,82c20 <__kernel_rem_pio2+0xe00>
   82b44:	0005883a 	mov	r2,zero
   82b48:	00cf9c34 	movhi	r3,15984
   82b4c:	180f883a 	mov	r7,r3
   82b50:	100d883a 	mov	r6,r2
   82b54:	b009883a 	mov	r4,r22
   82b58:	b80b883a 	mov	r5,r23
   82b5c:	00839000 	call	83900 <__muldf3>
   82b60:	180b883a 	mov	r5,r3
   82b64:	1009883a 	mov	r4,r2
   82b68:	00841ac0 	call	841ac <__fixdfsi>
   82b6c:	1009883a 	mov	r4,r2
   82b70:	00840b40 	call	840b4 <__floatsidf>
   82b74:	da808d17 	ldw	r10,564(sp)
   82b78:	1023883a 	mov	r17,r2
   82b7c:	1825883a 	mov	r18,r3
   82b80:	0005883a 	mov	r2,zero
   82b84:	00f05c34 	movhi	r3,49520
   82b88:	180f883a 	mov	r7,r3
   82b8c:	8809883a 	mov	r4,r17
   82b90:	900b883a 	mov	r5,r18
   82b94:	100d883a 	mov	r6,r2
   82b98:	52ab883a 	add	r21,r10,r10
   82b9c:	00839000 	call	83900 <__muldf3>
   82ba0:	180f883a 	mov	r7,r3
   82ba4:	b80b883a 	mov	r5,r23
   82ba8:	100d883a 	mov	r6,r2
   82bac:	b009883a 	mov	r4,r22
   82bb0:	008388c0 	call	8388c <__adddf3>
   82bb4:	100d883a 	mov	r6,r2
   82bb8:	d8808d17 	ldw	r2,564(sp)
   82bbc:	180b883a 	mov	r5,r3
   82bc0:	3009883a 	mov	r4,r6
   82bc4:	10800044 	addi	r2,r2,1
   82bc8:	ad6b883a 	add	r21,r21,r21
   82bcc:	d8808d15 	stw	r2,564(sp)
   82bd0:	00841ac0 	call	841ac <__fixdfsi>
   82bd4:	d8c08d17 	ldw	r3,564(sp)
   82bd8:	aeeb883a 	add	r21,r21,sp
   82bdc:	8809883a 	mov	r4,r17
   82be0:	900b883a 	mov	r5,r18
   82be4:	a8800015 	stw	r2,0(r21)
   82be8:	18e1883a 	add	r16,r3,r3
   82bec:	00841ac0 	call	841ac <__fixdfsi>
   82bf0:	d9009317 	ldw	r4,588(sp)
   82bf4:	8421883a 	add	r16,r16,r16
   82bf8:	86e1883a 	add	r16,r16,sp
   82bfc:	21000604 	addi	r4,r4,24
   82c00:	d9009315 	stw	r4,588(sp)
   82c04:	80800015 	stw	r2,0(r16)
   82c08:	003e3a06 	br	824f4 <__kernel_rem_pio2+0x6d4>
   82c0c:	4009883a 	mov	r4,r8
   82c10:	4960003c 	xorhi	r5,r9,32768
   82c14:	003ea406 	br	826a8 <__kernel_rem_pio2+0x888>
   82c18:	d9808d15 	stw	r6,564(sp)
   82c1c:	003e3506 	br	824f4 <__kernel_rem_pio2+0x6d4>
   82c20:	d9408d17 	ldw	r5,564(sp)
   82c24:	b009883a 	mov	r4,r22
   82c28:	2961883a 	add	r16,r5,r5
   82c2c:	8421883a 	add	r16,r16,r16
   82c30:	b80b883a 	mov	r5,r23
   82c34:	86e1883a 	add	r16,r16,sp
   82c38:	00841ac0 	call	841ac <__fixdfsi>
   82c3c:	80800015 	stw	r2,0(r16)
   82c40:	003e2c06 	br	824f4 <__kernel_rem_pio2+0x6d4>
   82c44:	d8c03d17 	ldw	r3,244(sp)
   82c48:	d9403f17 	ldw	r5,252(sp)
   82c4c:	da809717 	ldw	r10,604(sp)
   82c50:	d8803c17 	ldw	r2,240(sp)
   82c54:	d9003e17 	ldw	r4,248(sp)
   82c58:	49e0003c 	xorhi	r7,r9,32768
   82c5c:	51c00515 	stw	r7,20(r10)
   82c60:	19a0003c 	xorhi	r6,r3,32768
   82c64:	29e0003c 	xorhi	r7,r5,32768
   82c68:	51800115 	stw	r6,4(r10)
   82c6c:	51c00315 	stw	r7,12(r10)
   82c70:	50800015 	stw	r2,0(r10)
   82c74:	51000215 	stw	r4,8(r10)
   82c78:	52000415 	stw	r8,16(r10)
   82c7c:	003eac06 	br	82730 <__kernel_rem_pio2+0x910>
   82c80:	0011883a 	mov	r8,zero
   82c84:	0013883a 	mov	r9,zero
   82c88:	003e8306 	br	82698 <__kernel_rem_pio2+0x878>
   82c8c:	0011883a 	mov	r8,zero
   82c90:	0013883a 	mov	r9,zero
   82c94:	003f6f06 	br	82a54 <__kernel_rem_pio2+0xc34>
   82c98:	000d883a 	mov	r6,zero
   82c9c:	000f883a 	mov	r7,zero
   82ca0:	003f8f06 	br	82ae0 <__kernel_rem_pio2+0xcc0>

00082ca4 <__kernel_sin>:
   82ca4:	00a00034 	movhi	r2,32768
   82ca8:	10bfffc4 	addi	r2,r2,-1
   82cac:	deffef04 	addi	sp,sp,-68
   82cb0:	1144703a 	and	r2,r2,r5
   82cb4:	00cf9034 	movhi	r3,15936
   82cb8:	18ffffc4 	addi	r3,r3,-1
   82cbc:	dd400d15 	stw	r21,52(sp)
   82cc0:	dd000c15 	stw	r20,48(sp)
   82cc4:	dfc01015 	stw	ra,64(sp)
   82cc8:	ddc00f15 	stw	r23,60(sp)
   82ccc:	dd800e15 	stw	r22,56(sp)
   82cd0:	dcc00b15 	stw	r19,44(sp)
   82cd4:	dc800a15 	stw	r18,40(sp)
   82cd8:	dc400915 	stw	r17,36(sp)
   82cdc:	dc000815 	stw	r16,32(sp)
   82ce0:	2029883a 	mov	r20,r4
   82ce4:	282b883a 	mov	r21,r5
   82ce8:	d9800415 	stw	r6,16(sp)
   82cec:	d9c00515 	stw	r7,20(sp)
   82cf0:	18800216 	blt	r3,r2,82cfc <__kernel_sin+0x58>
   82cf4:	00841ac0 	call	841ac <__fixdfsi>
   82cf8:	10008826 	beq	r2,zero,82f1c <__kernel_sin+0x278>
   82cfc:	a009883a 	mov	r4,r20
   82d00:	a80b883a 	mov	r5,r21
   82d04:	a00d883a 	mov	r6,r20
   82d08:	a80f883a 	mov	r7,r21
   82d0c:	00839000 	call	83900 <__muldf3>
   82d10:	102d883a 	mov	r22,r2
   82d14:	a009883a 	mov	r4,r20
   82d18:	a80b883a 	mov	r5,r21
   82d1c:	b00d883a 	mov	r6,r22
   82d20:	180f883a 	mov	r7,r3
   82d24:	182f883a 	mov	r23,r3
   82d28:	d8800215 	stw	r2,8(sp)
   82d2c:	d8c00315 	stw	r3,12(sp)
   82d30:	00839000 	call	83900 <__muldf3>
   82d34:	d9000217 	ldw	r4,8(sp)
   82d38:	0216b434 	movhi	r8,23248
   82d3c:	42355f04 	addi	r8,r8,-10884
   82d40:	024f79b4 	movhi	r9,15846
   82d44:	4a764e84 	addi	r9,r9,-9926
   82d48:	480f883a 	mov	r7,r9
   82d4c:	400d883a 	mov	r6,r8
   82d50:	b80b883a 	mov	r5,r23
   82d54:	d8800615 	stw	r2,24(sp)
   82d58:	d8c00715 	stw	r3,28(sp)
   82d5c:	00839000 	call	83900 <__muldf3>
   82d60:	02228b34 	movhi	r8,35372
   82d64:	42273ac4 	addi	r8,r8,-25365
   82d68:	024f96f4 	movhi	r9,15963
   82d6c:	4a797984 	addi	r9,r9,-6682
   82d70:	480f883a 	mov	r7,r9
   82d74:	400d883a 	mov	r6,r8
   82d78:	180b883a 	mov	r5,r3
   82d7c:	1009883a 	mov	r4,r2
   82d80:	008380c0 	call	8380c <__subdf3>
   82d84:	d9000217 	ldw	r4,8(sp)
   82d88:	180f883a 	mov	r7,r3
   82d8c:	b80b883a 	mov	r5,r23
   82d90:	100d883a 	mov	r6,r2
   82d94:	00839000 	call	83900 <__muldf3>
   82d98:	0215ecb4 	movhi	r8,22450
   82d9c:	423f9f44 	addi	r8,r8,-387
   82da0:	024fb1f4 	movhi	r9,16071
   82da4:	4a4778c4 	addi	r9,r9,7651
   82da8:	480f883a 	mov	r7,r9
   82dac:	400d883a 	mov	r6,r8
   82db0:	180b883a 	mov	r5,r3
   82db4:	1009883a 	mov	r4,r2
   82db8:	008388c0 	call	8388c <__adddf3>
   82dbc:	d9000217 	ldw	r4,8(sp)
   82dc0:	180f883a 	mov	r7,r3
   82dc4:	b80b883a 	mov	r5,r23
   82dc8:	100d883a 	mov	r6,r2
   82dcc:	00839000 	call	83900 <__muldf3>
   82dd0:	02067074 	movhi	r8,6593
   82dd4:	42187544 	addi	r8,r8,25045
   82dd8:	024fcab4 	movhi	r9,16170
   82ddc:	4a406804 	addi	r9,r9,416
   82de0:	480f883a 	mov	r7,r9
   82de4:	400d883a 	mov	r6,r8
   82de8:	180b883a 	mov	r5,r3
   82dec:	1009883a 	mov	r4,r2
   82df0:	008380c0 	call	8380c <__subdf3>
   82df4:	d9000217 	ldw	r4,8(sp)
   82df8:	180f883a 	mov	r7,r3
   82dfc:	b80b883a 	mov	r5,r23
   82e00:	100d883a 	mov	r6,r2
   82e04:	00839000 	call	83900 <__muldf3>
   82e08:	02044474 	movhi	r8,4369
   82e0c:	423e2984 	addi	r8,r8,-1882
   82e10:	024fe074 	movhi	r9,16257
   82e14:	4a444444 	addi	r9,r9,4369
   82e18:	180b883a 	mov	r5,r3
   82e1c:	480f883a 	mov	r7,r9
   82e20:	1009883a 	mov	r4,r2
   82e24:	400d883a 	mov	r6,r8
   82e28:	008388c0 	call	8388c <__adddf3>
   82e2c:	1021883a 	mov	r16,r2
   82e30:	d8800617 	ldw	r2,24(sp)
   82e34:	1823883a 	mov	r17,r3
   82e38:	d8800015 	stw	r2,0(sp)
   82e3c:	d8800717 	ldw	r2,28(sp)
   82e40:	d8800115 	stw	r2,4(sp)
   82e44:	d8801117 	ldw	r2,68(sp)
   82e48:	10004126 	beq	r2,zero,82f50 <__kernel_sin+0x2ac>
   82e4c:	d9000417 	ldw	r4,16(sp)
   82e50:	d9400517 	ldw	r5,20(sp)
   82e54:	0005883a 	mov	r2,zero
   82e58:	00cff834 	movhi	r3,16352
   82e5c:	180f883a 	mov	r7,r3
   82e60:	100d883a 	mov	r6,r2
   82e64:	00839000 	call	83900 <__muldf3>
   82e68:	d9000017 	ldw	r4,0(sp)
   82e6c:	d9400717 	ldw	r5,28(sp)
   82e70:	800d883a 	mov	r6,r16
   82e74:	880f883a 	mov	r7,r17
   82e78:	1021883a 	mov	r16,r2
   82e7c:	1823883a 	mov	r17,r3
   82e80:	00839000 	call	83900 <__muldf3>
   82e84:	180f883a 	mov	r7,r3
   82e88:	880b883a 	mov	r5,r17
   82e8c:	8009883a 	mov	r4,r16
   82e90:	100d883a 	mov	r6,r2
   82e94:	008380c0 	call	8380c <__subdf3>
   82e98:	d9000217 	ldw	r4,8(sp)
   82e9c:	b80b883a 	mov	r5,r23
   82ea0:	180f883a 	mov	r7,r3
   82ea4:	100d883a 	mov	r6,r2
   82ea8:	00839000 	call	83900 <__muldf3>
   82eac:	d9c00517 	ldw	r7,20(sp)
   82eb0:	d9800417 	ldw	r6,16(sp)
   82eb4:	180b883a 	mov	r5,r3
   82eb8:	1009883a 	mov	r4,r2
   82ebc:	008380c0 	call	8380c <__subdf3>
   82ec0:	d9000017 	ldw	r4,0(sp)
   82ec4:	d9400717 	ldw	r5,28(sp)
   82ec8:	02155574 	movhi	r8,21845
   82ecc:	42155244 	addi	r8,r8,21833
   82ed0:	024ff174 	movhi	r9,16325
   82ed4:	4a555544 	addi	r9,r9,21845
   82ed8:	480f883a 	mov	r7,r9
   82edc:	400d883a 	mov	r6,r8
   82ee0:	1021883a 	mov	r16,r2
   82ee4:	1823883a 	mov	r17,r3
   82ee8:	00839000 	call	83900 <__muldf3>
   82eec:	180f883a 	mov	r7,r3
   82ef0:	880b883a 	mov	r5,r17
   82ef4:	8009883a 	mov	r4,r16
   82ef8:	100d883a 	mov	r6,r2
   82efc:	008388c0 	call	8388c <__adddf3>
   82f00:	180f883a 	mov	r7,r3
   82f04:	a80b883a 	mov	r5,r21
   82f08:	a009883a 	mov	r4,r20
   82f0c:	100d883a 	mov	r6,r2
   82f10:	008380c0 	call	8380c <__subdf3>
   82f14:	1029883a 	mov	r20,r2
   82f18:	182b883a 	mov	r21,r3
   82f1c:	a005883a 	mov	r2,r20
   82f20:	a807883a 	mov	r3,r21
   82f24:	dfc01017 	ldw	ra,64(sp)
   82f28:	ddc00f17 	ldw	r23,60(sp)
   82f2c:	dd800e17 	ldw	r22,56(sp)
   82f30:	dd400d17 	ldw	r21,52(sp)
   82f34:	dd000c17 	ldw	r20,48(sp)
   82f38:	dcc00b17 	ldw	r19,44(sp)
   82f3c:	dc800a17 	ldw	r18,40(sp)
   82f40:	dc400917 	ldw	r17,36(sp)
   82f44:	dc000817 	ldw	r16,32(sp)
   82f48:	dec01104 	addi	sp,sp,68
   82f4c:	f800283a 	ret
   82f50:	d9000217 	ldw	r4,8(sp)
   82f54:	b80b883a 	mov	r5,r23
   82f58:	800d883a 	mov	r6,r16
   82f5c:	180f883a 	mov	r7,r3
   82f60:	00839000 	call	83900 <__muldf3>
   82f64:	02155574 	movhi	r8,21845
   82f68:	42155244 	addi	r8,r8,21833
   82f6c:	024ff174 	movhi	r9,16325
   82f70:	4a555544 	addi	r9,r9,21845
   82f74:	480f883a 	mov	r7,r9
   82f78:	400d883a 	mov	r6,r8
   82f7c:	180b883a 	mov	r5,r3
   82f80:	1009883a 	mov	r4,r2
   82f84:	008380c0 	call	8380c <__subdf3>
   82f88:	d9000017 	ldw	r4,0(sp)
   82f8c:	d9400717 	ldw	r5,28(sp)
   82f90:	180f883a 	mov	r7,r3
   82f94:	100d883a 	mov	r6,r2
   82f98:	00839000 	call	83900 <__muldf3>
   82f9c:	180f883a 	mov	r7,r3
   82fa0:	a80b883a 	mov	r5,r21
   82fa4:	a009883a 	mov	r4,r20
   82fa8:	100d883a 	mov	r6,r2
   82fac:	008388c0 	call	8388c <__adddf3>
   82fb0:	1029883a 	mov	r20,r2
   82fb4:	182b883a 	mov	r21,r3
   82fb8:	003fd806 	br	82f1c <__kernel_sin+0x278>

00082fbc <fabs>:
   82fbc:	01e00034 	movhi	r7,32768
   82fc0:	39ffffc4 	addi	r7,r7,-1
   82fc4:	394e703a 	and	r7,r7,r5
   82fc8:	2005883a 	mov	r2,r4
   82fcc:	3807883a 	mov	r3,r7
   82fd0:	f800283a 	ret

00082fd4 <floor>:
   82fd4:	2805d53a 	srai	r2,r5,20
   82fd8:	defff604 	addi	sp,sp,-40
   82fdc:	dd800615 	stw	r22,24(sp)
   82fe0:	10c1ffcc 	andi	r3,r2,2047
   82fe4:	1dbf0044 	addi	r22,r3,-1023
   82fe8:	008004c4 	movi	r2,19
   82fec:	ddc00715 	stw	r23,28(sp)
   82ff0:	dc800215 	stw	r18,8(sp)
   82ff4:	dc400115 	stw	r17,4(sp)
   82ff8:	dc000015 	stw	r16,0(sp)
   82ffc:	dfc00915 	stw	ra,36(sp)
   83000:	df000815 	stw	fp,32(sp)
   83004:	dd400515 	stw	r21,20(sp)
   83008:	dd000415 	stw	r20,16(sp)
   8300c:	dcc00315 	stw	r19,12(sp)
   83010:	2021883a 	mov	r16,r4
   83014:	2823883a 	mov	r17,r5
   83018:	282f883a 	mov	r23,r5
   8301c:	2025883a 	mov	r18,r4
   83020:	15802916 	blt	r2,r22,830c8 <floor+0xf4>
   83024:	b0004816 	blt	r22,zero,83148 <floor+0x174>
   83028:	00800434 	movhi	r2,16
   8302c:	10bfffc4 	addi	r2,r2,-1
   83030:	15b9d83a 	sra	fp,r2,r22
   83034:	282f883a 	mov	r23,r5
   83038:	e144703a 	and	r2,fp,r5
   8303c:	1104b03a 	or	r2,r2,r4
   83040:	10001326 	beq	r2,zero,83090 <floor+0xbc>
   83044:	00a20034 	movhi	r2,34816
   83048:	109d6704 	addi	r2,r2,30108
   8304c:	00df8e34 	movhi	r3,32312
   83050:	18f90f04 	addi	r3,r3,-7108
   83054:	180f883a 	mov	r7,r3
   83058:	100d883a 	mov	r6,r2
   8305c:	008388c0 	call	8388c <__adddf3>
   83060:	180b883a 	mov	r5,r3
   83064:	000d883a 	mov	r6,zero
   83068:	000f883a 	mov	r7,zero
   8306c:	1009883a 	mov	r4,r2
   83070:	0083fa40 	call	83fa4 <__gtdf2>
   83074:	0080040e 	bge	zero,r2,83088 <floor+0xb4>
   83078:	88004416 	blt	r17,zero,8318c <floor+0x1b8>
   8307c:	0704303a 	nor	r2,zero,fp
   83080:	b8ae703a 	and	r23,r23,r2
   83084:	0025883a 	mov	r18,zero
   83088:	9021883a 	mov	r16,r18
   8308c:	b823883a 	mov	r17,r23
   83090:	8005883a 	mov	r2,r16
   83094:	8807883a 	mov	r3,r17
   83098:	dfc00917 	ldw	ra,36(sp)
   8309c:	df000817 	ldw	fp,32(sp)
   830a0:	ddc00717 	ldw	r23,28(sp)
   830a4:	dd800617 	ldw	r22,24(sp)
   830a8:	dd400517 	ldw	r21,20(sp)
   830ac:	dd000417 	ldw	r20,16(sp)
   830b0:	dcc00317 	ldw	r19,12(sp)
   830b4:	dc800217 	ldw	r18,8(sp)
   830b8:	dc400117 	ldw	r17,4(sp)
   830bc:	dc000017 	ldw	r16,0(sp)
   830c0:	dec00a04 	addi	sp,sp,40
   830c4:	f800283a 	ret
   830c8:	00800cc4 	movi	r2,51
   830cc:	15801616 	blt	r2,r22,83128 <floor+0x154>
   830d0:	18befb44 	addi	r2,r3,-1043
   830d4:	00ffffc4 	movi	r3,-1
   830d8:	18b8d83a 	srl	fp,r3,r2
   830dc:	e104703a 	and	r2,fp,r4
   830e0:	103feb26 	beq	r2,zero,83090 <floor+0xbc>
   830e4:	00a20034 	movhi	r2,34816
   830e8:	109d6704 	addi	r2,r2,30108
   830ec:	00df8e34 	movhi	r3,32312
   830f0:	18f90f04 	addi	r3,r3,-7108
   830f4:	180f883a 	mov	r7,r3
   830f8:	100d883a 	mov	r6,r2
   830fc:	008388c0 	call	8388c <__adddf3>
   83100:	180b883a 	mov	r5,r3
   83104:	000d883a 	mov	r6,zero
   83108:	000f883a 	mov	r7,zero
   8310c:	1009883a 	mov	r4,r2
   83110:	0083fa40 	call	83fa4 <__gtdf2>
   83114:	0080210e 	bge	zero,r2,8319c <floor+0x1c8>
   83118:	88002216 	blt	r17,zero,831a4 <floor+0x1d0>
   8311c:	0704303a 	nor	r2,zero,fp
   83120:	90a4703a 	and	r18,r18,r2
   83124:	003fd806 	br	83088 <floor+0xb4>
   83128:	00810004 	movi	r2,1024
   8312c:	b0bfd81e 	bne	r22,r2,83090 <floor+0xbc>
   83130:	800d883a 	mov	r6,r16
   83134:	280f883a 	mov	r7,r5
   83138:	008388c0 	call	8388c <__adddf3>
   8313c:	1021883a 	mov	r16,r2
   83140:	1823883a 	mov	r17,r3
   83144:	003fd206 	br	83090 <floor+0xbc>
   83148:	00a20034 	movhi	r2,34816
   8314c:	109d6704 	addi	r2,r2,30108
   83150:	00df8e34 	movhi	r3,32312
   83154:	18f90f04 	addi	r3,r3,-7108
   83158:	180f883a 	mov	r7,r3
   8315c:	100d883a 	mov	r6,r2
   83160:	008388c0 	call	8388c <__adddf3>
   83164:	180b883a 	mov	r5,r3
   83168:	000d883a 	mov	r6,zero
   8316c:	000f883a 	mov	r7,zero
   83170:	1009883a 	mov	r4,r2
   83174:	0083fa40 	call	83fa4 <__gtdf2>
   83178:	00bfc30e 	bge	zero,r2,83088 <floor+0xb4>
   8317c:	88001416 	blt	r17,zero,831d0 <floor+0x1fc>
   83180:	002f883a 	mov	r23,zero
   83184:	0025883a 	mov	r18,zero
   83188:	003fbf06 	br	83088 <floor+0xb4>
   8318c:	00800434 	movhi	r2,16
   83190:	1585d83a 	sra	r2,r2,r22
   83194:	88af883a 	add	r23,r17,r2
   83198:	003fb806 	br	8307c <floor+0xa8>
   8319c:	882f883a 	mov	r23,r17
   831a0:	003fb906 	br	83088 <floor+0xb4>
   831a4:	00800504 	movi	r2,20
   831a8:	b0801126 	beq	r22,r2,831f0 <floor+0x21c>
   831ac:	00c00d04 	movi	r3,52
   831b0:	1d87c83a 	sub	r3,r3,r22
   831b4:	00800044 	movi	r2,1
   831b8:	10c4983a 	sll	r2,r2,r3
   831bc:	8085883a 	add	r2,r16,r2
   831c0:	1400012e 	bgeu	r2,r16,831c8 <floor+0x1f4>
   831c4:	8dc00044 	addi	r23,r17,1
   831c8:	1025883a 	mov	r18,r2
   831cc:	003fd306 	br	8311c <floor+0x148>
   831d0:	00a00034 	movhi	r2,32768
   831d4:	10bfffc4 	addi	r2,r2,-1
   831d8:	8884703a 	and	r2,r17,r2
   831dc:	8084b03a 	or	r2,r16,r2
   831e0:	103fee26 	beq	r2,zero,8319c <floor+0x1c8>
   831e4:	05effc34 	movhi	r23,49136
   831e8:	0025883a 	mov	r18,zero
   831ec:	003fa606 	br	83088 <floor+0xb4>
   831f0:	8dc00044 	addi	r23,r17,1
   831f4:	003fc906 	br	8311c <floor+0x148>

000831f8 <scalbn>:
   831f8:	2011883a 	mov	r8,r4
   831fc:	291ffc2c 	andhi	r4,r5,32752
   83200:	2009d53a 	srai	r4,r4,20
   83204:	defffd04 	addi	sp,sp,-12
   83208:	dc000015 	stw	r16,0(sp)
   8320c:	dfc00215 	stw	ra,8(sp)
   83210:	dc400115 	stw	r17,4(sp)
   83214:	2813883a 	mov	r9,r5
   83218:	2815883a 	mov	r10,r5
   8321c:	3021883a 	mov	r16,r6
   83220:	2000281e 	bne	r4,zero,832c4 <scalbn+0xcc>
   83224:	00a00034 	movhi	r2,32768
   83228:	10bfffc4 	addi	r2,r2,-1
   8322c:	2884703a 	and	r2,r5,r2
   83230:	4084b03a 	or	r2,r8,r2
   83234:	10001826 	beq	r2,zero,83298 <scalbn+0xa0>
   83238:	0005883a 	mov	r2,zero
   8323c:	00d0d434 	movhi	r3,17232
   83240:	4009883a 	mov	r4,r8
   83244:	100d883a 	mov	r6,r2
   83248:	180f883a 	mov	r7,r3
   8324c:	00839000 	call	83900 <__muldf3>
   83250:	100b883a 	mov	r5,r2
   83254:	1011883a 	mov	r8,r2
   83258:	00bffff4 	movhi	r2,65535
   8325c:	108f2c04 	addi	r2,r2,15536
   83260:	180d883a 	mov	r6,r3
   83264:	1813883a 	mov	r9,r3
   83268:	8080120e 	bge	r16,r2,832b4 <scalbn+0xbc>
   8326c:	00b0be74 	movhi	r2,49913
   83270:	10bcd644 	addi	r2,r2,-3239
   83274:	00c06974 	movhi	r3,421
   83278:	18db87c4 	addi	r3,r3,28191
   8327c:	2809883a 	mov	r4,r5
   83280:	180f883a 	mov	r7,r3
   83284:	300b883a 	mov	r5,r6
   83288:	100d883a 	mov	r6,r2
   8328c:	00839000 	call	83900 <__muldf3>
   83290:	1011883a 	mov	r8,r2
   83294:	1813883a 	mov	r9,r3
   83298:	4005883a 	mov	r2,r8
   8329c:	4807883a 	mov	r3,r9
   832a0:	dfc00217 	ldw	ra,8(sp)
   832a4:	dc400117 	ldw	r17,4(sp)
   832a8:	dc000017 	ldw	r16,0(sp)
   832ac:	dec00304 	addi	sp,sp,12
   832b0:	f800283a 	ret
   832b4:	189ffc2c 	andhi	r2,r3,32752
   832b8:	1005d53a 	srai	r2,r2,20
   832bc:	1815883a 	mov	r10,r3
   832c0:	113ff284 	addi	r4,r2,-54
   832c4:	0081ffc4 	movi	r2,2047
   832c8:	20801126 	beq	r4,r2,83310 <scalbn+0x118>
   832cc:	2409883a 	add	r4,r4,r16
   832d0:	0081ff84 	movi	r2,2046
   832d4:	11001c16 	blt	r2,r4,83348 <scalbn+0x150>
   832d8:	0100290e 	bge	zero,r4,83380 <scalbn+0x188>
   832dc:	200a953a 	slli	r5,r4,20
   832e0:	01200434 	movhi	r4,32784
   832e4:	213fffc4 	addi	r4,r4,-1
   832e8:	5108703a 	and	r4,r10,r4
   832ec:	2148b03a 	or	r4,r4,r5
   832f0:	2013883a 	mov	r9,r4
   832f4:	4005883a 	mov	r2,r8
   832f8:	4807883a 	mov	r3,r9
   832fc:	dfc00217 	ldw	ra,8(sp)
   83300:	dc400117 	ldw	r17,4(sp)
   83304:	dc000017 	ldw	r16,0(sp)
   83308:	dec00304 	addi	sp,sp,12
   8330c:	f800283a 	ret
   83310:	480f883a 	mov	r7,r9
   83314:	4009883a 	mov	r4,r8
   83318:	480b883a 	mov	r5,r9
   8331c:	400d883a 	mov	r6,r8
   83320:	008388c0 	call	8388c <__adddf3>
   83324:	1011883a 	mov	r8,r2
   83328:	1813883a 	mov	r9,r3
   8332c:	4005883a 	mov	r2,r8
   83330:	4807883a 	mov	r3,r9
   83334:	dfc00217 	ldw	ra,8(sp)
   83338:	dc400117 	ldw	r17,4(sp)
   8333c:	dc000017 	ldw	r16,0(sp)
   83340:	dec00304 	addi	sp,sp,12
   83344:	f800283a 	ret
   83348:	04220034 	movhi	r16,34816
   8334c:	841d6704 	addi	r16,r16,30108
   83350:	045f8e34 	movhi	r17,32312
   83354:	8c790f04 	addi	r17,r17,-7108
   83358:	480f883a 	mov	r7,r9
   8335c:	400d883a 	mov	r6,r8
   83360:	8009883a 	mov	r4,r16
   83364:	880b883a 	mov	r5,r17
   83368:	00833d80 	call	833d8 <copysign>
   8336c:	180b883a 	mov	r5,r3
   83370:	800d883a 	mov	r6,r16
   83374:	880f883a 	mov	r7,r17
   83378:	1009883a 	mov	r4,r2
   8337c:	003fc306 	br	8328c <scalbn+0x94>
   83380:	00bff284 	movi	r2,-54
   83384:	11000716 	blt	r2,r4,833a4 <scalbn+0x1ac>
   83388:	00b0d414 	movui	r2,50000
   8338c:	143fee16 	blt	r2,r16,83348 <scalbn+0x150>
   83390:	0430be74 	movhi	r16,49913
   83394:	843cd644 	addi	r16,r16,-3239
   83398:	04406974 	movhi	r17,421
   8339c:	8c5b87c4 	addi	r17,r17,28191
   833a0:	003fed06 	br	83358 <scalbn+0x160>
   833a4:	21000d84 	addi	r4,r4,54
   833a8:	2008953a 	slli	r4,r4,20
   833ac:	01e00434 	movhi	r7,32784
   833b0:	39ffffc4 	addi	r7,r7,-1
   833b4:	51ce703a 	and	r7,r10,r7
   833b8:	390eb03a 	or	r7,r7,r4
   833bc:	024f2434 	movhi	r9,15504
   833c0:	4009883a 	mov	r4,r8
   833c4:	0011883a 	mov	r8,zero
   833c8:	380b883a 	mov	r5,r7
   833cc:	400d883a 	mov	r6,r8
   833d0:	480f883a 	mov	r7,r9
   833d4:	003fad06 	br	8328c <scalbn+0x94>

000833d8 <copysign>:
   833d8:	3813883a 	mov	r9,r7
   833dc:	01e00034 	movhi	r7,32768
   833e0:	39ffffc4 	addi	r7,r7,-1
   833e4:	394e703a 	and	r7,r7,r5
   833e8:	4aa0002c 	andhi	r10,r9,32768
   833ec:	3a8eb03a 	or	r7,r7,r10
   833f0:	2005883a 	mov	r2,r4
   833f4:	3807883a 	mov	r3,r7
   833f8:	f800283a 	ret

000833fc <_fpadd_parts>:
   833fc:	defff804 	addi	sp,sp,-32
   83400:	dcc00315 	stw	r19,12(sp)
   83404:	2027883a 	mov	r19,r4
   83408:	21000017 	ldw	r4,0(r4)
   8340c:	00c00044 	movi	r3,1
   83410:	dd400515 	stw	r21,20(sp)
   83414:	dd000415 	stw	r20,16(sp)
   83418:	ddc00715 	stw	r23,28(sp)
   8341c:	dd800615 	stw	r22,24(sp)
   83420:	dc800215 	stw	r18,8(sp)
   83424:	dc400115 	stw	r17,4(sp)
   83428:	dc000015 	stw	r16,0(sp)
   8342c:	282b883a 	mov	r21,r5
   83430:	3029883a 	mov	r20,r6
   83434:	1900632e 	bgeu	r3,r4,835c4 <_fpadd_parts+0x1c8>
   83438:	28800017 	ldw	r2,0(r5)
   8343c:	1880812e 	bgeu	r3,r2,83644 <_fpadd_parts+0x248>
   83440:	00c00104 	movi	r3,4
   83444:	20c0dc26 	beq	r4,r3,837b8 <_fpadd_parts+0x3bc>
   83448:	10c07e26 	beq	r2,r3,83644 <_fpadd_parts+0x248>
   8344c:	00c00084 	movi	r3,2
   83450:	10c06726 	beq	r2,r3,835f0 <_fpadd_parts+0x1f4>
   83454:	20c07b26 	beq	r4,r3,83644 <_fpadd_parts+0x248>
   83458:	9dc00217 	ldw	r23,8(r19)
   8345c:	28c00217 	ldw	r3,8(r5)
   83460:	9c400317 	ldw	r17,12(r19)
   83464:	2bc00317 	ldw	r15,12(r5)
   83468:	b8cdc83a 	sub	r6,r23,r3
   8346c:	9c800417 	ldw	r18,16(r19)
   83470:	2c000417 	ldw	r16,16(r5)
   83474:	3009883a 	mov	r4,r6
   83478:	30009716 	blt	r6,zero,836d8 <_fpadd_parts+0x2dc>
   8347c:	00800fc4 	movi	r2,63
   83480:	11806b16 	blt	r2,r6,83630 <_fpadd_parts+0x234>
   83484:	0100a40e 	bge	zero,r4,83718 <_fpadd_parts+0x31c>
   83488:	35bff804 	addi	r22,r6,-32
   8348c:	b000bc16 	blt	r22,zero,83780 <_fpadd_parts+0x384>
   83490:	8596d83a 	srl	r11,r16,r22
   83494:	0019883a 	mov	r12,zero
   83498:	0013883a 	mov	r9,zero
   8349c:	01000044 	movi	r4,1
   834a0:	0015883a 	mov	r10,zero
   834a4:	b000be16 	blt	r22,zero,837a0 <_fpadd_parts+0x3a4>
   834a8:	2590983a 	sll	r8,r4,r22
   834ac:	000f883a 	mov	r7,zero
   834b0:	00bfffc4 	movi	r2,-1
   834b4:	3889883a 	add	r4,r7,r2
   834b8:	408b883a 	add	r5,r8,r2
   834bc:	21cd803a 	cmpltu	r6,r4,r7
   834c0:	314b883a 	add	r5,r6,r5
   834c4:	7904703a 	and	r2,r15,r4
   834c8:	8146703a 	and	r3,r16,r5
   834cc:	10c4b03a 	or	r2,r2,r3
   834d0:	10000226 	beq	r2,zero,834dc <_fpadd_parts+0xe0>
   834d4:	02400044 	movi	r9,1
   834d8:	0015883a 	mov	r10,zero
   834dc:	5a5eb03a 	or	r15,r11,r9
   834e0:	62a0b03a 	or	r16,r12,r10
   834e4:	99400117 	ldw	r5,4(r19)
   834e8:	a8800117 	ldw	r2,4(r21)
   834ec:	28806e26 	beq	r5,r2,836a8 <_fpadd_parts+0x2ac>
   834f0:	28006626 	beq	r5,zero,8368c <_fpadd_parts+0x290>
   834f4:	7c45c83a 	sub	r2,r15,r17
   834f8:	7889803a 	cmpltu	r4,r15,r2
   834fc:	8487c83a 	sub	r3,r16,r18
   83500:	1909c83a 	sub	r4,r3,r4
   83504:	100d883a 	mov	r6,r2
   83508:	200f883a 	mov	r7,r4
   8350c:	38007716 	blt	r7,zero,836ec <_fpadd_parts+0x2f0>
   83510:	a5c00215 	stw	r23,8(r20)
   83514:	a1c00415 	stw	r7,16(r20)
   83518:	a0000115 	stw	zero,4(r20)
   8351c:	a1800315 	stw	r6,12(r20)
   83520:	a2000317 	ldw	r8,12(r20)
   83524:	a2400417 	ldw	r9,16(r20)
   83528:	00bfffc4 	movi	r2,-1
   8352c:	408b883a 	add	r5,r8,r2
   83530:	2a09803a 	cmpltu	r4,r5,r8
   83534:	488d883a 	add	r6,r9,r2
   83538:	01c40034 	movhi	r7,4096
   8353c:	39ffffc4 	addi	r7,r7,-1
   83540:	218d883a 	add	r6,r4,r6
   83544:	39801736 	bltu	r7,r6,835a4 <_fpadd_parts+0x1a8>
   83548:	31c06526 	beq	r6,r7,836e0 <_fpadd_parts+0x2e4>
   8354c:	a3000217 	ldw	r12,8(r20)
   83550:	4209883a 	add	r4,r8,r8
   83554:	00bfffc4 	movi	r2,-1
   83558:	220f803a 	cmpltu	r7,r4,r8
   8355c:	4a4b883a 	add	r5,r9,r9
   83560:	394f883a 	add	r7,r7,r5
   83564:	2095883a 	add	r10,r4,r2
   83568:	3897883a 	add	r11,r7,r2
   8356c:	510d803a 	cmpltu	r6,r10,r4
   83570:	6099883a 	add	r12,r12,r2
   83574:	32d7883a 	add	r11,r6,r11
   83578:	00840034 	movhi	r2,4096
   8357c:	10bfffc4 	addi	r2,r2,-1
   83580:	2011883a 	mov	r8,r4
   83584:	3813883a 	mov	r9,r7
   83588:	a1000315 	stw	r4,12(r20)
   8358c:	a1c00415 	stw	r7,16(r20)
   83590:	a3000215 	stw	r12,8(r20)
   83594:	12c00336 	bltu	r2,r11,835a4 <_fpadd_parts+0x1a8>
   83598:	58bfed1e 	bne	r11,r2,83550 <_fpadd_parts+0x154>
   8359c:	00bfff84 	movi	r2,-2
   835a0:	12bfeb2e 	bgeu	r2,r10,83550 <_fpadd_parts+0x154>
   835a4:	a2800417 	ldw	r10,16(r20)
   835a8:	008000c4 	movi	r2,3
   835ac:	00c80034 	movhi	r3,8192
   835b0:	18ffffc4 	addi	r3,r3,-1
   835b4:	a2400317 	ldw	r9,12(r20)
   835b8:	a0800015 	stw	r2,0(r20)
   835bc:	1a802336 	bltu	r3,r10,8364c <_fpadd_parts+0x250>
   835c0:	a027883a 	mov	r19,r20
   835c4:	9805883a 	mov	r2,r19
   835c8:	ddc00717 	ldw	r23,28(sp)
   835cc:	dd800617 	ldw	r22,24(sp)
   835d0:	dd400517 	ldw	r21,20(sp)
   835d4:	dd000417 	ldw	r20,16(sp)
   835d8:	dcc00317 	ldw	r19,12(sp)
   835dc:	dc800217 	ldw	r18,8(sp)
   835e0:	dc400117 	ldw	r17,4(sp)
   835e4:	dc000017 	ldw	r16,0(sp)
   835e8:	dec00804 	addi	sp,sp,32
   835ec:	f800283a 	ret
   835f0:	20fff41e 	bne	r4,r3,835c4 <_fpadd_parts+0x1c8>
   835f4:	31000015 	stw	r4,0(r6)
   835f8:	98800117 	ldw	r2,4(r19)
   835fc:	30800115 	stw	r2,4(r6)
   83600:	98c00217 	ldw	r3,8(r19)
   83604:	30c00215 	stw	r3,8(r6)
   83608:	98800317 	ldw	r2,12(r19)
   8360c:	30800315 	stw	r2,12(r6)
   83610:	98c00417 	ldw	r3,16(r19)
   83614:	30c00415 	stw	r3,16(r6)
   83618:	98800117 	ldw	r2,4(r19)
   8361c:	28c00117 	ldw	r3,4(r5)
   83620:	3027883a 	mov	r19,r6
   83624:	10c4703a 	and	r2,r2,r3
   83628:	30800115 	stw	r2,4(r6)
   8362c:	003fe506 	br	835c4 <_fpadd_parts+0x1c8>
   83630:	1dc02616 	blt	r3,r23,836cc <_fpadd_parts+0x2d0>
   83634:	0023883a 	mov	r17,zero
   83638:	182f883a 	mov	r23,r3
   8363c:	0025883a 	mov	r18,zero
   83640:	003fa806 	br	834e4 <_fpadd_parts+0xe8>
   83644:	a827883a 	mov	r19,r21
   83648:	003fde06 	br	835c4 <_fpadd_parts+0x1c8>
   8364c:	01800044 	movi	r6,1
   83650:	500497fa 	slli	r2,r10,31
   83654:	4808d07a 	srli	r4,r9,1
   83658:	518ad83a 	srl	r5,r10,r6
   8365c:	a2000217 	ldw	r8,8(r20)
   83660:	1108b03a 	or	r4,r2,r4
   83664:	0007883a 	mov	r3,zero
   83668:	4984703a 	and	r2,r9,r6
   8366c:	208cb03a 	or	r6,r4,r2
   83670:	28ceb03a 	or	r7,r5,r3
   83674:	42000044 	addi	r8,r8,1
   83678:	a027883a 	mov	r19,r20
   8367c:	a1c00415 	stw	r7,16(r20)
   83680:	a2000215 	stw	r8,8(r20)
   83684:	a1800315 	stw	r6,12(r20)
   83688:	003fce06 	br	835c4 <_fpadd_parts+0x1c8>
   8368c:	8bc5c83a 	sub	r2,r17,r15
   83690:	8889803a 	cmpltu	r4,r17,r2
   83694:	9407c83a 	sub	r3,r18,r16
   83698:	1909c83a 	sub	r4,r3,r4
   8369c:	100d883a 	mov	r6,r2
   836a0:	200f883a 	mov	r7,r4
   836a4:	003f9906 	br	8350c <_fpadd_parts+0x110>
   836a8:	7c45883a 	add	r2,r15,r17
   836ac:	13c9803a 	cmpltu	r4,r2,r15
   836b0:	8487883a 	add	r3,r16,r18
   836b4:	20c9883a 	add	r4,r4,r3
   836b8:	a1400115 	stw	r5,4(r20)
   836bc:	a5c00215 	stw	r23,8(r20)
   836c0:	a0800315 	stw	r2,12(r20)
   836c4:	a1000415 	stw	r4,16(r20)
   836c8:	003fb606 	br	835a4 <_fpadd_parts+0x1a8>
   836cc:	001f883a 	mov	r15,zero
   836d0:	0021883a 	mov	r16,zero
   836d4:	003f8306 	br	834e4 <_fpadd_parts+0xe8>
   836d8:	018dc83a 	sub	r6,zero,r6
   836dc:	003f6706 	br	8347c <_fpadd_parts+0x80>
   836e0:	00bfff84 	movi	r2,-2
   836e4:	117faf36 	bltu	r2,r5,835a4 <_fpadd_parts+0x1a8>
   836e8:	003f9806 	br	8354c <_fpadd_parts+0x150>
   836ec:	0005883a 	mov	r2,zero
   836f0:	1189c83a 	sub	r4,r2,r6
   836f4:	1105803a 	cmpltu	r2,r2,r4
   836f8:	01cbc83a 	sub	r5,zero,r7
   836fc:	2885c83a 	sub	r2,r5,r2
   83700:	01800044 	movi	r6,1
   83704:	a1800115 	stw	r6,4(r20)
   83708:	a5c00215 	stw	r23,8(r20)
   8370c:	a1000315 	stw	r4,12(r20)
   83710:	a0800415 	stw	r2,16(r20)
   83714:	003f8206 	br	83520 <_fpadd_parts+0x124>
   83718:	203f7226 	beq	r4,zero,834e4 <_fpadd_parts+0xe8>
   8371c:	35bff804 	addi	r22,r6,-32
   83720:	b9af883a 	add	r23,r23,r6
   83724:	b0003116 	blt	r22,zero,837ec <_fpadd_parts+0x3f0>
   83728:	959ad83a 	srl	r13,r18,r22
   8372c:	001d883a 	mov	r14,zero
   83730:	000f883a 	mov	r7,zero
   83734:	01000044 	movi	r4,1
   83738:	0011883a 	mov	r8,zero
   8373c:	b0002516 	blt	r22,zero,837d4 <_fpadd_parts+0x3d8>
   83740:	2594983a 	sll	r10,r4,r22
   83744:	0013883a 	mov	r9,zero
   83748:	00bfffc4 	movi	r2,-1
   8374c:	4889883a 	add	r4,r9,r2
   83750:	508b883a 	add	r5,r10,r2
   83754:	224d803a 	cmpltu	r6,r4,r9
   83758:	314b883a 	add	r5,r6,r5
   8375c:	8904703a 	and	r2,r17,r4
   83760:	9146703a 	and	r3,r18,r5
   83764:	10c4b03a 	or	r2,r2,r3
   83768:	10000226 	beq	r2,zero,83774 <_fpadd_parts+0x378>
   8376c:	01c00044 	movi	r7,1
   83770:	0011883a 	mov	r8,zero
   83774:	69e2b03a 	or	r17,r13,r7
   83778:	7224b03a 	or	r18,r14,r8
   8377c:	003f5906 	br	834e4 <_fpadd_parts+0xe8>
   83780:	8407883a 	add	r3,r16,r16
   83784:	008007c4 	movi	r2,31
   83788:	1185c83a 	sub	r2,r2,r6
   8378c:	1886983a 	sll	r3,r3,r2
   83790:	7996d83a 	srl	r11,r15,r6
   83794:	8198d83a 	srl	r12,r16,r6
   83798:	1ad6b03a 	or	r11,r3,r11
   8379c:	003f3e06 	br	83498 <_fpadd_parts+0x9c>
   837a0:	2006d07a 	srli	r3,r4,1
   837a4:	008007c4 	movi	r2,31
   837a8:	1185c83a 	sub	r2,r2,r6
   837ac:	1890d83a 	srl	r8,r3,r2
   837b0:	218e983a 	sll	r7,r4,r6
   837b4:	003f3e06 	br	834b0 <_fpadd_parts+0xb4>
   837b8:	113f821e 	bne	r2,r4,835c4 <_fpadd_parts+0x1c8>
   837bc:	28c00117 	ldw	r3,4(r5)
   837c0:	98800117 	ldw	r2,4(r19)
   837c4:	10ff7f26 	beq	r2,r3,835c4 <_fpadd_parts+0x1c8>
   837c8:	04c00274 	movhi	r19,9
   837cc:	9ccac304 	addi	r19,r19,11020
   837d0:	003f7c06 	br	835c4 <_fpadd_parts+0x1c8>
   837d4:	2006d07a 	srli	r3,r4,1
   837d8:	008007c4 	movi	r2,31
   837dc:	1185c83a 	sub	r2,r2,r6
   837e0:	1894d83a 	srl	r10,r3,r2
   837e4:	2192983a 	sll	r9,r4,r6
   837e8:	003fd706 	br	83748 <_fpadd_parts+0x34c>
   837ec:	9487883a 	add	r3,r18,r18
   837f0:	008007c4 	movi	r2,31
   837f4:	1185c83a 	sub	r2,r2,r6
   837f8:	1886983a 	sll	r3,r3,r2
   837fc:	899ad83a 	srl	r13,r17,r6
   83800:	919cd83a 	srl	r14,r18,r6
   83804:	1b5ab03a 	or	r13,r3,r13
   83808:	003fc906 	br	83730 <_fpadd_parts+0x334>

0008380c <__subdf3>:
   8380c:	deffea04 	addi	sp,sp,-88
   83810:	dcc01415 	stw	r19,80(sp)
   83814:	dcc00404 	addi	r19,sp,16
   83818:	2011883a 	mov	r8,r4
   8381c:	2813883a 	mov	r9,r5
   83820:	dc401315 	stw	r17,76(sp)
   83824:	d809883a 	mov	r4,sp
   83828:	980b883a 	mov	r5,r19
   8382c:	dc400904 	addi	r17,sp,36
   83830:	dfc01515 	stw	ra,84(sp)
   83834:	da400115 	stw	r9,4(sp)
   83838:	d9c00315 	stw	r7,12(sp)
   8383c:	da000015 	stw	r8,0(sp)
   83840:	d9800215 	stw	r6,8(sp)
   83844:	00848c00 	call	848c0 <__unpack_d>
   83848:	d9000204 	addi	r4,sp,8
   8384c:	880b883a 	mov	r5,r17
   83850:	00848c00 	call	848c0 <__unpack_d>
   83854:	d8800a17 	ldw	r2,40(sp)
   83858:	880b883a 	mov	r5,r17
   8385c:	9809883a 	mov	r4,r19
   83860:	d9800e04 	addi	r6,sp,56
   83864:	1080005c 	xori	r2,r2,1
   83868:	d8800a15 	stw	r2,40(sp)
   8386c:	00833fc0 	call	833fc <_fpadd_parts>
   83870:	1009883a 	mov	r4,r2
   83874:	00845ac0 	call	845ac <__pack_d>
   83878:	dfc01517 	ldw	ra,84(sp)
   8387c:	dcc01417 	ldw	r19,80(sp)
   83880:	dc401317 	ldw	r17,76(sp)
   83884:	dec01604 	addi	sp,sp,88
   83888:	f800283a 	ret

0008388c <__adddf3>:
   8388c:	deffea04 	addi	sp,sp,-88
   83890:	dcc01415 	stw	r19,80(sp)
   83894:	dcc00404 	addi	r19,sp,16
   83898:	2011883a 	mov	r8,r4
   8389c:	2813883a 	mov	r9,r5
   838a0:	dc401315 	stw	r17,76(sp)
   838a4:	d809883a 	mov	r4,sp
   838a8:	980b883a 	mov	r5,r19
   838ac:	dc400904 	addi	r17,sp,36
   838b0:	dfc01515 	stw	ra,84(sp)
   838b4:	da400115 	stw	r9,4(sp)
   838b8:	d9c00315 	stw	r7,12(sp)
   838bc:	da000015 	stw	r8,0(sp)
   838c0:	d9800215 	stw	r6,8(sp)
   838c4:	00848c00 	call	848c0 <__unpack_d>
   838c8:	d9000204 	addi	r4,sp,8
   838cc:	880b883a 	mov	r5,r17
   838d0:	00848c00 	call	848c0 <__unpack_d>
   838d4:	d9800e04 	addi	r6,sp,56
   838d8:	9809883a 	mov	r4,r19
   838dc:	880b883a 	mov	r5,r17
   838e0:	00833fc0 	call	833fc <_fpadd_parts>
   838e4:	1009883a 	mov	r4,r2
   838e8:	00845ac0 	call	845ac <__pack_d>
   838ec:	dfc01517 	ldw	ra,84(sp)
   838f0:	dcc01417 	ldw	r19,80(sp)
   838f4:	dc401317 	ldw	r17,76(sp)
   838f8:	dec01604 	addi	sp,sp,88
   838fc:	f800283a 	ret

00083900 <__muldf3>:
   83900:	deffe004 	addi	sp,sp,-128
   83904:	dc401815 	stw	r17,96(sp)
   83908:	dc400404 	addi	r17,sp,16
   8390c:	2011883a 	mov	r8,r4
   83910:	2813883a 	mov	r9,r5
   83914:	dc001715 	stw	r16,92(sp)
   83918:	d809883a 	mov	r4,sp
   8391c:	880b883a 	mov	r5,r17
   83920:	dc000904 	addi	r16,sp,36
   83924:	dfc01f15 	stw	ra,124(sp)
   83928:	da400115 	stw	r9,4(sp)
   8392c:	d9c00315 	stw	r7,12(sp)
   83930:	da000015 	stw	r8,0(sp)
   83934:	d9800215 	stw	r6,8(sp)
   83938:	ddc01e15 	stw	r23,120(sp)
   8393c:	dd801d15 	stw	r22,116(sp)
   83940:	dd401c15 	stw	r21,112(sp)
   83944:	dd001b15 	stw	r20,108(sp)
   83948:	dcc01a15 	stw	r19,104(sp)
   8394c:	dc801915 	stw	r18,100(sp)
   83950:	00848c00 	call	848c0 <__unpack_d>
   83954:	d9000204 	addi	r4,sp,8
   83958:	800b883a 	mov	r5,r16
   8395c:	00848c00 	call	848c0 <__unpack_d>
   83960:	d9000417 	ldw	r4,16(sp)
   83964:	00800044 	movi	r2,1
   83968:	1100102e 	bgeu	r2,r4,839ac <__muldf3+0xac>
   8396c:	d8c00917 	ldw	r3,36(sp)
   83970:	10c0062e 	bgeu	r2,r3,8398c <__muldf3+0x8c>
   83974:	00800104 	movi	r2,4
   83978:	20800a26 	beq	r4,r2,839a4 <__muldf3+0xa4>
   8397c:	1880cc26 	beq	r3,r2,83cb0 <__muldf3+0x3b0>
   83980:	00800084 	movi	r2,2
   83984:	20800926 	beq	r4,r2,839ac <__muldf3+0xac>
   83988:	1880191e 	bne	r3,r2,839f0 <__muldf3+0xf0>
   8398c:	d8c00a17 	ldw	r3,40(sp)
   83990:	d8800517 	ldw	r2,20(sp)
   83994:	8009883a 	mov	r4,r16
   83998:	10c4c03a 	cmpne	r2,r2,r3
   8399c:	d8800a15 	stw	r2,40(sp)
   839a0:	00000706 	br	839c0 <__muldf3+0xc0>
   839a4:	00800084 	movi	r2,2
   839a8:	1880c326 	beq	r3,r2,83cb8 <__muldf3+0x3b8>
   839ac:	d8800517 	ldw	r2,20(sp)
   839b0:	d8c00a17 	ldw	r3,40(sp)
   839b4:	8809883a 	mov	r4,r17
   839b8:	10c4c03a 	cmpne	r2,r2,r3
   839bc:	d8800515 	stw	r2,20(sp)
   839c0:	00845ac0 	call	845ac <__pack_d>
   839c4:	dfc01f17 	ldw	ra,124(sp)
   839c8:	ddc01e17 	ldw	r23,120(sp)
   839cc:	dd801d17 	ldw	r22,116(sp)
   839d0:	dd401c17 	ldw	r21,112(sp)
   839d4:	dd001b17 	ldw	r20,108(sp)
   839d8:	dcc01a17 	ldw	r19,104(sp)
   839dc:	dc801917 	ldw	r18,100(sp)
   839e0:	dc401817 	ldw	r17,96(sp)
   839e4:	dc001717 	ldw	r16,92(sp)
   839e8:	dec02004 	addi	sp,sp,128
   839ec:	f800283a 	ret
   839f0:	dd800717 	ldw	r22,28(sp)
   839f4:	dc800c17 	ldw	r18,48(sp)
   839f8:	002b883a 	mov	r21,zero
   839fc:	0023883a 	mov	r17,zero
   83a00:	a80b883a 	mov	r5,r21
   83a04:	b00d883a 	mov	r6,r22
   83a08:	880f883a 	mov	r7,r17
   83a0c:	ddc00817 	ldw	r23,32(sp)
   83a10:	dcc00d17 	ldw	r19,52(sp)
   83a14:	9009883a 	mov	r4,r18
   83a18:	00844080 	call	84408 <__muldi3>
   83a1c:	001b883a 	mov	r13,zero
   83a20:	680f883a 	mov	r7,r13
   83a24:	b009883a 	mov	r4,r22
   83a28:	000b883a 	mov	r5,zero
   83a2c:	980d883a 	mov	r6,r19
   83a30:	b82d883a 	mov	r22,r23
   83a34:	002f883a 	mov	r23,zero
   83a38:	db401615 	stw	r13,88(sp)
   83a3c:	d8801315 	stw	r2,76(sp)
   83a40:	d8c01415 	stw	r3,80(sp)
   83a44:	dcc01515 	stw	r19,84(sp)
   83a48:	00844080 	call	84408 <__muldi3>
   83a4c:	b00d883a 	mov	r6,r22
   83a50:	000b883a 	mov	r5,zero
   83a54:	9009883a 	mov	r4,r18
   83a58:	b80f883a 	mov	r7,r23
   83a5c:	1021883a 	mov	r16,r2
   83a60:	1823883a 	mov	r17,r3
   83a64:	00844080 	call	84408 <__muldi3>
   83a68:	8085883a 	add	r2,r16,r2
   83a6c:	140d803a 	cmpltu	r6,r2,r16
   83a70:	88c7883a 	add	r3,r17,r3
   83a74:	30cd883a 	add	r6,r6,r3
   83a78:	1029883a 	mov	r20,r2
   83a7c:	302b883a 	mov	r21,r6
   83a80:	da801317 	ldw	r10,76(sp)
   83a84:	dac01417 	ldw	r11,80(sp)
   83a88:	db001517 	ldw	r12,84(sp)
   83a8c:	db401617 	ldw	r13,88(sp)
   83a90:	3440612e 	bgeu	r6,r17,83c18 <__muldf3+0x318>
   83a94:	0009883a 	mov	r4,zero
   83a98:	5105883a 	add	r2,r10,r4
   83a9c:	128d803a 	cmpltu	r6,r2,r10
   83aa0:	5d07883a 	add	r3,r11,r20
   83aa4:	30cd883a 	add	r6,r6,r3
   83aa8:	0021883a 	mov	r16,zero
   83aac:	04400044 	movi	r17,1
   83ab0:	1025883a 	mov	r18,r2
   83ab4:	3027883a 	mov	r19,r6
   83ab8:	32c06236 	bltu	r6,r11,83c44 <__muldf3+0x344>
   83abc:	59807a26 	beq	r11,r6,83ca8 <__muldf3+0x3a8>
   83ac0:	680b883a 	mov	r5,r13
   83ac4:	b80f883a 	mov	r7,r23
   83ac8:	6009883a 	mov	r4,r12
   83acc:	b00d883a 	mov	r6,r22
   83ad0:	00844080 	call	84408 <__muldi3>
   83ad4:	1009883a 	mov	r4,r2
   83ad8:	000f883a 	mov	r7,zero
   83adc:	1545883a 	add	r2,r2,r21
   83ae0:	1111803a 	cmpltu	r8,r2,r4
   83ae4:	19c7883a 	add	r3,r3,r7
   83ae8:	40c7883a 	add	r3,r8,r3
   83aec:	88cb883a 	add	r5,r17,r3
   83af0:	d8c00617 	ldw	r3,24(sp)
   83af4:	8089883a 	add	r4,r16,r2
   83af8:	d8800b17 	ldw	r2,44(sp)
   83afc:	18c00104 	addi	r3,r3,4
   83b00:	240d803a 	cmpltu	r6,r4,r16
   83b04:	10c7883a 	add	r3,r2,r3
   83b08:	2013883a 	mov	r9,r4
   83b0c:	d8800a17 	ldw	r2,40(sp)
   83b10:	d9000517 	ldw	r4,20(sp)
   83b14:	314d883a 	add	r6,r6,r5
   83b18:	3015883a 	mov	r10,r6
   83b1c:	2088c03a 	cmpne	r4,r4,r2
   83b20:	00880034 	movhi	r2,8192
   83b24:	10bfffc4 	addi	r2,r2,-1
   83b28:	d9000f15 	stw	r4,60(sp)
   83b2c:	d8c01015 	stw	r3,64(sp)
   83b30:	1180162e 	bgeu	r2,r6,83b8c <__muldf3+0x28c>
   83b34:	1811883a 	mov	r8,r3
   83b38:	101f883a 	mov	r15,r2
   83b3c:	980497fa 	slli	r2,r19,31
   83b40:	9016d07a 	srli	r11,r18,1
   83b44:	500697fa 	slli	r3,r10,31
   83b48:	480cd07a 	srli	r6,r9,1
   83b4c:	500ed07a 	srli	r7,r10,1
   83b50:	12d6b03a 	or	r11,r2,r11
   83b54:	00800044 	movi	r2,1
   83b58:	198cb03a 	or	r6,r3,r6
   83b5c:	4888703a 	and	r4,r9,r2
   83b60:	9818d07a 	srli	r12,r19,1
   83b64:	001b883a 	mov	r13,zero
   83b68:	03a00034 	movhi	r14,32768
   83b6c:	3013883a 	mov	r9,r6
   83b70:	3815883a 	mov	r10,r7
   83b74:	4091883a 	add	r8,r8,r2
   83b78:	20000226 	beq	r4,zero,83b84 <__muldf3+0x284>
   83b7c:	5b64b03a 	or	r18,r11,r13
   83b80:	63a6b03a 	or	r19,r12,r14
   83b84:	7abfed36 	bltu	r15,r10,83b3c <__muldf3+0x23c>
   83b88:	da001015 	stw	r8,64(sp)
   83b8c:	00840034 	movhi	r2,4096
   83b90:	10bfffc4 	addi	r2,r2,-1
   83b94:	12801436 	bltu	r2,r10,83be8 <__muldf3+0x2e8>
   83b98:	da001017 	ldw	r8,64(sp)
   83b9c:	101f883a 	mov	r15,r2
   83ba0:	4a45883a 	add	r2,r9,r9
   83ba4:	124d803a 	cmpltu	r6,r2,r9
   83ba8:	5287883a 	add	r3,r10,r10
   83bac:	9497883a 	add	r11,r18,r18
   83bb0:	5c8f803a 	cmpltu	r7,r11,r18
   83bb4:	9cd9883a 	add	r12,r19,r19
   83bb8:	01000044 	movi	r4,1
   83bbc:	30cd883a 	add	r6,r6,r3
   83bc0:	3b0f883a 	add	r7,r7,r12
   83bc4:	423fffc4 	addi	r8,r8,-1
   83bc8:	1013883a 	mov	r9,r2
   83bcc:	3015883a 	mov	r10,r6
   83bd0:	111ab03a 	or	r13,r2,r4
   83bd4:	98003016 	blt	r19,zero,83c98 <__muldf3+0x398>
   83bd8:	5825883a 	mov	r18,r11
   83bdc:	3827883a 	mov	r19,r7
   83be0:	7abfef2e 	bgeu	r15,r10,83ba0 <__muldf3+0x2a0>
   83be4:	da001015 	stw	r8,64(sp)
   83be8:	00803fc4 	movi	r2,255
   83bec:	488e703a 	and	r7,r9,r2
   83bf0:	00802004 	movi	r2,128
   83bf4:	0007883a 	mov	r3,zero
   83bf8:	0011883a 	mov	r8,zero
   83bfc:	38801826 	beq	r7,r2,83c60 <__muldf3+0x360>
   83c00:	008000c4 	movi	r2,3
   83c04:	d9000e04 	addi	r4,sp,56
   83c08:	da801215 	stw	r10,72(sp)
   83c0c:	d8800e15 	stw	r2,56(sp)
   83c10:	da401115 	stw	r9,68(sp)
   83c14:	003f6a06 	br	839c0 <__muldf3+0xc0>
   83c18:	89802126 	beq	r17,r6,83ca0 <__muldf3+0x3a0>
   83c1c:	0009883a 	mov	r4,zero
   83c20:	5105883a 	add	r2,r10,r4
   83c24:	128d803a 	cmpltu	r6,r2,r10
   83c28:	5d07883a 	add	r3,r11,r20
   83c2c:	30cd883a 	add	r6,r6,r3
   83c30:	0021883a 	mov	r16,zero
   83c34:	0023883a 	mov	r17,zero
   83c38:	1025883a 	mov	r18,r2
   83c3c:	3027883a 	mov	r19,r6
   83c40:	32ff9e2e 	bgeu	r6,r11,83abc <__muldf3+0x1bc>
   83c44:	00800044 	movi	r2,1
   83c48:	8089883a 	add	r4,r16,r2
   83c4c:	240d803a 	cmpltu	r6,r4,r16
   83c50:	344d883a 	add	r6,r6,r17
   83c54:	2021883a 	mov	r16,r4
   83c58:	3023883a 	mov	r17,r6
   83c5c:	003f9806 	br	83ac0 <__muldf3+0x1c0>
   83c60:	403fe71e 	bne	r8,zero,83c00 <__muldf3+0x300>
   83c64:	01004004 	movi	r4,256
   83c68:	4904703a 	and	r2,r9,r4
   83c6c:	10c4b03a 	or	r2,r2,r3
   83c70:	103fe31e 	bne	r2,zero,83c00 <__muldf3+0x300>
   83c74:	94c4b03a 	or	r2,r18,r19
   83c78:	103fe126 	beq	r2,zero,83c00 <__muldf3+0x300>
   83c7c:	49c5883a 	add	r2,r9,r7
   83c80:	1251803a 	cmpltu	r8,r2,r9
   83c84:	4291883a 	add	r8,r8,r10
   83c88:	013fc004 	movi	r4,-256
   83c8c:	1112703a 	and	r9,r2,r4
   83c90:	4015883a 	mov	r10,r8
   83c94:	003fda06 	br	83c00 <__muldf3+0x300>
   83c98:	6813883a 	mov	r9,r13
   83c9c:	003fce06 	br	83bd8 <__muldf3+0x2d8>
   83ca0:	143f7c36 	bltu	r2,r16,83a94 <__muldf3+0x194>
   83ca4:	003fdd06 	br	83c1c <__muldf3+0x31c>
   83ca8:	12bf852e 	bgeu	r2,r10,83ac0 <__muldf3+0x1c0>
   83cac:	003fe506 	br	83c44 <__muldf3+0x344>
   83cb0:	00800084 	movi	r2,2
   83cb4:	20bf351e 	bne	r4,r2,8398c <__muldf3+0x8c>
   83cb8:	01000274 	movhi	r4,9
   83cbc:	210ac304 	addi	r4,r4,11020
   83cc0:	003f3f06 	br	839c0 <__muldf3+0xc0>

00083cc4 <__divdf3>:
   83cc4:	deffed04 	addi	sp,sp,-76
   83cc8:	dcc01115 	stw	r19,68(sp)
   83ccc:	dcc00404 	addi	r19,sp,16
   83cd0:	2011883a 	mov	r8,r4
   83cd4:	2813883a 	mov	r9,r5
   83cd8:	dc000e15 	stw	r16,56(sp)
   83cdc:	d809883a 	mov	r4,sp
   83ce0:	980b883a 	mov	r5,r19
   83ce4:	dc000904 	addi	r16,sp,36
   83ce8:	dfc01215 	stw	ra,72(sp)
   83cec:	da400115 	stw	r9,4(sp)
   83cf0:	d9c00315 	stw	r7,12(sp)
   83cf4:	da000015 	stw	r8,0(sp)
   83cf8:	d9800215 	stw	r6,8(sp)
   83cfc:	dc801015 	stw	r18,64(sp)
   83d00:	dc400f15 	stw	r17,60(sp)
   83d04:	00848c00 	call	848c0 <__unpack_d>
   83d08:	d9000204 	addi	r4,sp,8
   83d0c:	800b883a 	mov	r5,r16
   83d10:	00848c00 	call	848c0 <__unpack_d>
   83d14:	d9000417 	ldw	r4,16(sp)
   83d18:	00800044 	movi	r2,1
   83d1c:	11000b2e 	bgeu	r2,r4,83d4c <__divdf3+0x88>
   83d20:	d9400917 	ldw	r5,36(sp)
   83d24:	1140762e 	bgeu	r2,r5,83f00 <__divdf3+0x23c>
   83d28:	d8800517 	ldw	r2,20(sp)
   83d2c:	d8c00a17 	ldw	r3,40(sp)
   83d30:	01800104 	movi	r6,4
   83d34:	10c4f03a 	xor	r2,r2,r3
   83d38:	d8800515 	stw	r2,20(sp)
   83d3c:	21800226 	beq	r4,r6,83d48 <__divdf3+0x84>
   83d40:	00800084 	movi	r2,2
   83d44:	2080141e 	bne	r4,r2,83d98 <__divdf3+0xd4>
   83d48:	29000926 	beq	r5,r4,83d70 <__divdf3+0xac>
   83d4c:	9809883a 	mov	r4,r19
   83d50:	00845ac0 	call	845ac <__pack_d>
   83d54:	dfc01217 	ldw	ra,72(sp)
   83d58:	dcc01117 	ldw	r19,68(sp)
   83d5c:	dc801017 	ldw	r18,64(sp)
   83d60:	dc400f17 	ldw	r17,60(sp)
   83d64:	dc000e17 	ldw	r16,56(sp)
   83d68:	dec01304 	addi	sp,sp,76
   83d6c:	f800283a 	ret
   83d70:	01000274 	movhi	r4,9
   83d74:	210ac304 	addi	r4,r4,11020
   83d78:	00845ac0 	call	845ac <__pack_d>
   83d7c:	dfc01217 	ldw	ra,72(sp)
   83d80:	dcc01117 	ldw	r19,68(sp)
   83d84:	dc801017 	ldw	r18,64(sp)
   83d88:	dc400f17 	ldw	r17,60(sp)
   83d8c:	dc000e17 	ldw	r16,56(sp)
   83d90:	dec01304 	addi	sp,sp,76
   83d94:	f800283a 	ret
   83d98:	29805b26 	beq	r5,r6,83f08 <__divdf3+0x244>
   83d9c:	28802d26 	beq	r5,r2,83e54 <__divdf3+0x190>
   83da0:	d8c00617 	ldw	r3,24(sp)
   83da4:	d8800b17 	ldw	r2,44(sp)
   83da8:	d9c00817 	ldw	r7,32(sp)
   83dac:	dc400d17 	ldw	r17,52(sp)
   83db0:	188bc83a 	sub	r5,r3,r2
   83db4:	d9800717 	ldw	r6,28(sp)
   83db8:	dc000c17 	ldw	r16,48(sp)
   83dbc:	d9400615 	stw	r5,24(sp)
   83dc0:	3c403836 	bltu	r7,r17,83ea4 <__divdf3+0x1e0>
   83dc4:	89c03626 	beq	r17,r7,83ea0 <__divdf3+0x1dc>
   83dc8:	0015883a 	mov	r10,zero
   83dcc:	001d883a 	mov	r14,zero
   83dd0:	02c40034 	movhi	r11,4096
   83dd4:	001f883a 	mov	r15,zero
   83dd8:	003f883a 	mov	ra,zero
   83ddc:	04800f44 	movi	r18,61
   83de0:	00000f06 	br	83e20 <__divdf3+0x15c>
   83de4:	601d883a 	mov	r14,r12
   83de8:	681f883a 	mov	r15,r13
   83dec:	400d883a 	mov	r6,r8
   83df0:	100f883a 	mov	r7,r2
   83df4:	3191883a 	add	r8,r6,r6
   83df8:	5808d07a 	srli	r4,r11,1
   83dfc:	4185803a 	cmpltu	r2,r8,r6
   83e00:	39d3883a 	add	r9,r7,r7
   83e04:	28c6b03a 	or	r3,r5,r3
   83e08:	1245883a 	add	r2,r2,r9
   83e0c:	1815883a 	mov	r10,r3
   83e10:	2017883a 	mov	r11,r4
   83e14:	400d883a 	mov	r6,r8
   83e18:	100f883a 	mov	r7,r2
   83e1c:	fc801726 	beq	ra,r18,83e7c <__divdf3+0x1b8>
   83e20:	580a97fa 	slli	r5,r11,31
   83e24:	5006d07a 	srli	r3,r10,1
   83e28:	ffc00044 	addi	ra,ra,1
   83e2c:	3c7ff136 	bltu	r7,r17,83df4 <__divdf3+0x130>
   83e30:	3411c83a 	sub	r8,r6,r16
   83e34:	3205803a 	cmpltu	r2,r6,r8
   83e38:	3c53c83a 	sub	r9,r7,r17
   83e3c:	7298b03a 	or	r12,r14,r10
   83e40:	7adab03a 	or	r13,r15,r11
   83e44:	4885c83a 	sub	r2,r9,r2
   83e48:	89ffe61e 	bne	r17,r7,83de4 <__divdf3+0x120>
   83e4c:	343fe936 	bltu	r6,r16,83df4 <__divdf3+0x130>
   83e50:	003fe406 	br	83de4 <__divdf3+0x120>
   83e54:	9809883a 	mov	r4,r19
   83e58:	d9800415 	stw	r6,16(sp)
   83e5c:	00845ac0 	call	845ac <__pack_d>
   83e60:	dfc01217 	ldw	ra,72(sp)
   83e64:	dcc01117 	ldw	r19,68(sp)
   83e68:	dc801017 	ldw	r18,64(sp)
   83e6c:	dc400f17 	ldw	r17,60(sp)
   83e70:	dc000e17 	ldw	r16,56(sp)
   83e74:	dec01304 	addi	sp,sp,76
   83e78:	f800283a 	ret
   83e7c:	00803fc4 	movi	r2,255
   83e80:	7090703a 	and	r8,r14,r2
   83e84:	00802004 	movi	r2,128
   83e88:	0007883a 	mov	r3,zero
   83e8c:	0013883a 	mov	r9,zero
   83e90:	40800d26 	beq	r8,r2,83ec8 <__divdf3+0x204>
   83e94:	dbc00815 	stw	r15,32(sp)
   83e98:	db800715 	stw	r14,28(sp)
   83e9c:	003fab06 	br	83d4c <__divdf3+0x88>
   83ea0:	343fc92e 	bgeu	r6,r16,83dc8 <__divdf3+0x104>
   83ea4:	3185883a 	add	r2,r6,r6
   83ea8:	1189803a 	cmpltu	r4,r2,r6
   83eac:	39c7883a 	add	r3,r7,r7
   83eb0:	20c9883a 	add	r4,r4,r3
   83eb4:	297fffc4 	addi	r5,r5,-1
   83eb8:	100d883a 	mov	r6,r2
   83ebc:	200f883a 	mov	r7,r4
   83ec0:	d9400615 	stw	r5,24(sp)
   83ec4:	003fc006 	br	83dc8 <__divdf3+0x104>
   83ec8:	483ff21e 	bne	r9,zero,83e94 <__divdf3+0x1d0>
   83ecc:	01004004 	movi	r4,256
   83ed0:	7104703a 	and	r2,r14,r4
   83ed4:	10c4b03a 	or	r2,r2,r3
   83ed8:	103fee1e 	bne	r2,zero,83e94 <__divdf3+0x1d0>
   83edc:	31c4b03a 	or	r2,r6,r7
   83ee0:	103fec26 	beq	r2,zero,83e94 <__divdf3+0x1d0>
   83ee4:	7205883a 	add	r2,r14,r8
   83ee8:	1391803a 	cmpltu	r8,r2,r14
   83eec:	43d1883a 	add	r8,r8,r15
   83ef0:	013fc004 	movi	r4,-256
   83ef4:	111c703a 	and	r14,r2,r4
   83ef8:	401f883a 	mov	r15,r8
   83efc:	003fe506 	br	83e94 <__divdf3+0x1d0>
   83f00:	8009883a 	mov	r4,r16
   83f04:	003f9206 	br	83d50 <__divdf3+0x8c>
   83f08:	9809883a 	mov	r4,r19
   83f0c:	d8000715 	stw	zero,28(sp)
   83f10:	d8000815 	stw	zero,32(sp)
   83f14:	d8000615 	stw	zero,24(sp)
   83f18:	003f8d06 	br	83d50 <__divdf3+0x8c>

00083f1c <__eqdf2>:
   83f1c:	deffef04 	addi	sp,sp,-68
   83f20:	dc400f15 	stw	r17,60(sp)
   83f24:	dc400404 	addi	r17,sp,16
   83f28:	2005883a 	mov	r2,r4
   83f2c:	2807883a 	mov	r3,r5
   83f30:	dc000e15 	stw	r16,56(sp)
   83f34:	d809883a 	mov	r4,sp
   83f38:	880b883a 	mov	r5,r17
   83f3c:	dc000904 	addi	r16,sp,36
   83f40:	d8c00115 	stw	r3,4(sp)
   83f44:	d8800015 	stw	r2,0(sp)
   83f48:	d9800215 	stw	r6,8(sp)
   83f4c:	dfc01015 	stw	ra,64(sp)
   83f50:	d9c00315 	stw	r7,12(sp)
   83f54:	00848c00 	call	848c0 <__unpack_d>
   83f58:	d9000204 	addi	r4,sp,8
   83f5c:	800b883a 	mov	r5,r16
   83f60:	00848c00 	call	848c0 <__unpack_d>
   83f64:	d8800417 	ldw	r2,16(sp)
   83f68:	00c00044 	movi	r3,1
   83f6c:	180d883a 	mov	r6,r3
   83f70:	1880062e 	bgeu	r3,r2,83f8c <__eqdf2+0x70>
   83f74:	d8800917 	ldw	r2,36(sp)
   83f78:	8809883a 	mov	r4,r17
   83f7c:	800b883a 	mov	r5,r16
   83f80:	1880022e 	bgeu	r3,r2,83f8c <__eqdf2+0x70>
   83f84:	00849f80 	call	849f8 <__fpcmp_parts_d>
   83f88:	100d883a 	mov	r6,r2
   83f8c:	3005883a 	mov	r2,r6
   83f90:	dfc01017 	ldw	ra,64(sp)
   83f94:	dc400f17 	ldw	r17,60(sp)
   83f98:	dc000e17 	ldw	r16,56(sp)
   83f9c:	dec01104 	addi	sp,sp,68
   83fa0:	f800283a 	ret

00083fa4 <__gtdf2>:
   83fa4:	deffef04 	addi	sp,sp,-68
   83fa8:	dc400f15 	stw	r17,60(sp)
   83fac:	dc400404 	addi	r17,sp,16
   83fb0:	2005883a 	mov	r2,r4
   83fb4:	2807883a 	mov	r3,r5
   83fb8:	dc000e15 	stw	r16,56(sp)
   83fbc:	d809883a 	mov	r4,sp
   83fc0:	880b883a 	mov	r5,r17
   83fc4:	dc000904 	addi	r16,sp,36
   83fc8:	d8c00115 	stw	r3,4(sp)
   83fcc:	d8800015 	stw	r2,0(sp)
   83fd0:	d9800215 	stw	r6,8(sp)
   83fd4:	dfc01015 	stw	ra,64(sp)
   83fd8:	d9c00315 	stw	r7,12(sp)
   83fdc:	00848c00 	call	848c0 <__unpack_d>
   83fe0:	d9000204 	addi	r4,sp,8
   83fe4:	800b883a 	mov	r5,r16
   83fe8:	00848c00 	call	848c0 <__unpack_d>
   83fec:	d8800417 	ldw	r2,16(sp)
   83ff0:	00c00044 	movi	r3,1
   83ff4:	01bfffc4 	movi	r6,-1
   83ff8:	1880062e 	bgeu	r3,r2,84014 <__gtdf2+0x70>
   83ffc:	d8800917 	ldw	r2,36(sp)
   84000:	8809883a 	mov	r4,r17
   84004:	800b883a 	mov	r5,r16
   84008:	1880022e 	bgeu	r3,r2,84014 <__gtdf2+0x70>
   8400c:	00849f80 	call	849f8 <__fpcmp_parts_d>
   84010:	100d883a 	mov	r6,r2
   84014:	3005883a 	mov	r2,r6
   84018:	dfc01017 	ldw	ra,64(sp)
   8401c:	dc400f17 	ldw	r17,60(sp)
   84020:	dc000e17 	ldw	r16,56(sp)
   84024:	dec01104 	addi	sp,sp,68
   84028:	f800283a 	ret

0008402c <__gedf2>:
   8402c:	deffef04 	addi	sp,sp,-68
   84030:	dc400f15 	stw	r17,60(sp)
   84034:	dc400404 	addi	r17,sp,16
   84038:	2005883a 	mov	r2,r4
   8403c:	2807883a 	mov	r3,r5
   84040:	dc000e15 	stw	r16,56(sp)
   84044:	d809883a 	mov	r4,sp
   84048:	880b883a 	mov	r5,r17
   8404c:	dc000904 	addi	r16,sp,36
   84050:	d8c00115 	stw	r3,4(sp)
   84054:	d8800015 	stw	r2,0(sp)
   84058:	d9800215 	stw	r6,8(sp)
   8405c:	dfc01015 	stw	ra,64(sp)
   84060:	d9c00315 	stw	r7,12(sp)
   84064:	00848c00 	call	848c0 <__unpack_d>
   84068:	d9000204 	addi	r4,sp,8
   8406c:	800b883a 	mov	r5,r16
   84070:	00848c00 	call	848c0 <__unpack_d>
   84074:	d8800417 	ldw	r2,16(sp)
   84078:	00c00044 	movi	r3,1
   8407c:	01bfffc4 	movi	r6,-1
   84080:	1880062e 	bgeu	r3,r2,8409c <__gedf2+0x70>
   84084:	d8800917 	ldw	r2,36(sp)
   84088:	8809883a 	mov	r4,r17
   8408c:	800b883a 	mov	r5,r16
   84090:	1880022e 	bgeu	r3,r2,8409c <__gedf2+0x70>
   84094:	00849f80 	call	849f8 <__fpcmp_parts_d>
   84098:	100d883a 	mov	r6,r2
   8409c:	3005883a 	mov	r2,r6
   840a0:	dfc01017 	ldw	ra,64(sp)
   840a4:	dc400f17 	ldw	r17,60(sp)
   840a8:	dc000e17 	ldw	r16,56(sp)
   840ac:	dec01104 	addi	sp,sp,68
   840b0:	f800283a 	ret

000840b4 <__floatsidf>:
   840b4:	2006d7fa 	srli	r3,r4,31
   840b8:	defff604 	addi	sp,sp,-40
   840bc:	008000c4 	movi	r2,3
   840c0:	dfc00915 	stw	ra,36(sp)
   840c4:	dcc00815 	stw	r19,32(sp)
   840c8:	dc800715 	stw	r18,28(sp)
   840cc:	dc400615 	stw	r17,24(sp)
   840d0:	dc000515 	stw	r16,20(sp)
   840d4:	d8800015 	stw	r2,0(sp)
   840d8:	d8c00115 	stw	r3,4(sp)
   840dc:	20000f1e 	bne	r4,zero,8411c <__floatsidf+0x68>
   840e0:	00800084 	movi	r2,2
   840e4:	d8800015 	stw	r2,0(sp)
   840e8:	d809883a 	mov	r4,sp
   840ec:	00845ac0 	call	845ac <__pack_d>
   840f0:	1009883a 	mov	r4,r2
   840f4:	180b883a 	mov	r5,r3
   840f8:	2005883a 	mov	r2,r4
   840fc:	2807883a 	mov	r3,r5
   84100:	dfc00917 	ldw	ra,36(sp)
   84104:	dcc00817 	ldw	r19,32(sp)
   84108:	dc800717 	ldw	r18,28(sp)
   8410c:	dc400617 	ldw	r17,24(sp)
   84110:	dc000517 	ldw	r16,20(sp)
   84114:	dec00a04 	addi	sp,sp,40
   84118:	f800283a 	ret
   8411c:	00800f04 	movi	r2,60
   84120:	1807003a 	cmpeq	r3,r3,zero
   84124:	d8800215 	stw	r2,8(sp)
   84128:	18001126 	beq	r3,zero,84170 <__floatsidf+0xbc>
   8412c:	0027883a 	mov	r19,zero
   84130:	2025883a 	mov	r18,r4
   84134:	d9000315 	stw	r4,12(sp)
   84138:	dcc00415 	stw	r19,16(sp)
   8413c:	008452c0 	call	8452c <__clzsi2>
   84140:	11000744 	addi	r4,r2,29
   84144:	013fe80e 	bge	zero,r4,840e8 <__floatsidf+0x34>
   84148:	10bfff44 	addi	r2,r2,-3
   8414c:	10000c16 	blt	r2,zero,84180 <__floatsidf+0xcc>
   84150:	90a2983a 	sll	r17,r18,r2
   84154:	0021883a 	mov	r16,zero
   84158:	d8800217 	ldw	r2,8(sp)
   8415c:	dc400415 	stw	r17,16(sp)
   84160:	dc000315 	stw	r16,12(sp)
   84164:	1105c83a 	sub	r2,r2,r4
   84168:	d8800215 	stw	r2,8(sp)
   8416c:	003fde06 	br	840e8 <__floatsidf+0x34>
   84170:	00a00034 	movhi	r2,32768
   84174:	20800a26 	beq	r4,r2,841a0 <__floatsidf+0xec>
   84178:	0109c83a 	sub	r4,zero,r4
   8417c:	003feb06 	br	8412c <__floatsidf+0x78>
   84180:	9006d07a 	srli	r3,r18,1
   84184:	008007c4 	movi	r2,31
   84188:	1105c83a 	sub	r2,r2,r4
   8418c:	1886d83a 	srl	r3,r3,r2
   84190:	9922983a 	sll	r17,r19,r4
   84194:	9120983a 	sll	r16,r18,r4
   84198:	1c62b03a 	or	r17,r3,r17
   8419c:	003fee06 	br	84158 <__floatsidf+0xa4>
   841a0:	0009883a 	mov	r4,zero
   841a4:	01707834 	movhi	r5,49632
   841a8:	003fd306 	br	840f8 <__floatsidf+0x44>

000841ac <__fixdfsi>:
   841ac:	defff804 	addi	sp,sp,-32
   841b0:	2005883a 	mov	r2,r4
   841b4:	2807883a 	mov	r3,r5
   841b8:	d809883a 	mov	r4,sp
   841bc:	d9400204 	addi	r5,sp,8
   841c0:	d8c00115 	stw	r3,4(sp)
   841c4:	d8800015 	stw	r2,0(sp)
   841c8:	dfc00715 	stw	ra,28(sp)
   841cc:	00848c00 	call	848c0 <__unpack_d>
   841d0:	d8c00217 	ldw	r3,8(sp)
   841d4:	00800084 	movi	r2,2
   841d8:	1880051e 	bne	r3,r2,841f0 <__fixdfsi+0x44>
   841dc:	0007883a 	mov	r3,zero
   841e0:	1805883a 	mov	r2,r3
   841e4:	dfc00717 	ldw	ra,28(sp)
   841e8:	dec00804 	addi	sp,sp,32
   841ec:	f800283a 	ret
   841f0:	00800044 	movi	r2,1
   841f4:	10fff92e 	bgeu	r2,r3,841dc <__fixdfsi+0x30>
   841f8:	00800104 	movi	r2,4
   841fc:	18800426 	beq	r3,r2,84210 <__fixdfsi+0x64>
   84200:	d8c00417 	ldw	r3,16(sp)
   84204:	183ff516 	blt	r3,zero,841dc <__fixdfsi+0x30>
   84208:	00800784 	movi	r2,30
   8420c:	10c0080e 	bge	r2,r3,84230 <__fixdfsi+0x84>
   84210:	d8800317 	ldw	r2,12(sp)
   84214:	1000121e 	bne	r2,zero,84260 <__fixdfsi+0xb4>
   84218:	00e00034 	movhi	r3,32768
   8421c:	18ffffc4 	addi	r3,r3,-1
   84220:	1805883a 	mov	r2,r3
   84224:	dfc00717 	ldw	ra,28(sp)
   84228:	dec00804 	addi	sp,sp,32
   8422c:	f800283a 	ret
   84230:	00800f04 	movi	r2,60
   84234:	10d1c83a 	sub	r8,r2,r3
   84238:	40bff804 	addi	r2,r8,-32
   8423c:	d9800517 	ldw	r6,20(sp)
   84240:	d9c00617 	ldw	r7,24(sp)
   84244:	10000816 	blt	r2,zero,84268 <__fixdfsi+0xbc>
   84248:	3888d83a 	srl	r4,r7,r2
   8424c:	d8800317 	ldw	r2,12(sp)
   84250:	2007883a 	mov	r3,r4
   84254:	103fe226 	beq	r2,zero,841e0 <__fixdfsi+0x34>
   84258:	0107c83a 	sub	r3,zero,r4
   8425c:	003fe006 	br	841e0 <__fixdfsi+0x34>
   84260:	00e00034 	movhi	r3,32768
   84264:	003fde06 	br	841e0 <__fixdfsi+0x34>
   84268:	39c7883a 	add	r3,r7,r7
   8426c:	008007c4 	movi	r2,31
   84270:	1205c83a 	sub	r2,r2,r8
   84274:	1886983a 	sll	r3,r3,r2
   84278:	3208d83a 	srl	r4,r6,r8
   8427c:	1908b03a 	or	r4,r3,r4
   84280:	003ff206 	br	8424c <__fixdfsi+0xa0>

00084284 <udivmodsi4>:
   84284:	29001b2e 	bgeu	r5,r4,842f4 <udivmodsi4+0x70>
   84288:	28001a16 	blt	r5,zero,842f4 <udivmodsi4+0x70>
   8428c:	00800044 	movi	r2,1
   84290:	0007883a 	mov	r3,zero
   84294:	01c007c4 	movi	r7,31
   84298:	00000306 	br	842a8 <udivmodsi4+0x24>
   8429c:	19c01326 	beq	r3,r7,842ec <udivmodsi4+0x68>
   842a0:	18c00044 	addi	r3,r3,1
   842a4:	28000416 	blt	r5,zero,842b8 <udivmodsi4+0x34>
   842a8:	294b883a 	add	r5,r5,r5
   842ac:	1085883a 	add	r2,r2,r2
   842b0:	293ffa36 	bltu	r5,r4,8429c <udivmodsi4+0x18>
   842b4:	10000d26 	beq	r2,zero,842ec <udivmodsi4+0x68>
   842b8:	0007883a 	mov	r3,zero
   842bc:	21400236 	bltu	r4,r5,842c8 <udivmodsi4+0x44>
   842c0:	2149c83a 	sub	r4,r4,r5
   842c4:	1886b03a 	or	r3,r3,r2
   842c8:	1004d07a 	srli	r2,r2,1
   842cc:	280ad07a 	srli	r5,r5,1
   842d0:	103ffa1e 	bne	r2,zero,842bc <udivmodsi4+0x38>
   842d4:	30000226 	beq	r6,zero,842e0 <udivmodsi4+0x5c>
   842d8:	2005883a 	mov	r2,r4
   842dc:	f800283a 	ret
   842e0:	1809883a 	mov	r4,r3
   842e4:	2005883a 	mov	r2,r4
   842e8:	f800283a 	ret
   842ec:	0007883a 	mov	r3,zero
   842f0:	003ff806 	br	842d4 <udivmodsi4+0x50>
   842f4:	00800044 	movi	r2,1
   842f8:	0007883a 	mov	r3,zero
   842fc:	003fef06 	br	842bc <udivmodsi4+0x38>

00084300 <__divsi3>:
   84300:	defffe04 	addi	sp,sp,-8
   84304:	dc000015 	stw	r16,0(sp)
   84308:	dfc00115 	stw	ra,4(sp)
   8430c:	0021883a 	mov	r16,zero
   84310:	20000c16 	blt	r4,zero,84344 <__divsi3+0x44>
   84314:	000d883a 	mov	r6,zero
   84318:	28000e16 	blt	r5,zero,84354 <__divsi3+0x54>
   8431c:	00842840 	call	84284 <udivmodsi4>
   84320:	1007883a 	mov	r3,r2
   84324:	8005003a 	cmpeq	r2,r16,zero
   84328:	1000011e 	bne	r2,zero,84330 <__divsi3+0x30>
   8432c:	00c7c83a 	sub	r3,zero,r3
   84330:	1805883a 	mov	r2,r3
   84334:	dfc00117 	ldw	ra,4(sp)
   84338:	dc000017 	ldw	r16,0(sp)
   8433c:	dec00204 	addi	sp,sp,8
   84340:	f800283a 	ret
   84344:	0109c83a 	sub	r4,zero,r4
   84348:	04000044 	movi	r16,1
   8434c:	000d883a 	mov	r6,zero
   84350:	283ff20e 	bge	r5,zero,8431c <__divsi3+0x1c>
   84354:	014bc83a 	sub	r5,zero,r5
   84358:	8021003a 	cmpeq	r16,r16,zero
   8435c:	003fef06 	br	8431c <__divsi3+0x1c>

00084360 <__modsi3>:
   84360:	deffff04 	addi	sp,sp,-4
   84364:	dfc00015 	stw	ra,0(sp)
   84368:	01800044 	movi	r6,1
   8436c:	2807883a 	mov	r3,r5
   84370:	20000416 	blt	r4,zero,84384 <__modsi3+0x24>
   84374:	28000c16 	blt	r5,zero,843a8 <__modsi3+0x48>
   84378:	dfc00017 	ldw	ra,0(sp)
   8437c:	dec00104 	addi	sp,sp,4
   84380:	00842841 	jmpi	84284 <udivmodsi4>
   84384:	0109c83a 	sub	r4,zero,r4
   84388:	28000b16 	blt	r5,zero,843b8 <__modsi3+0x58>
   8438c:	180b883a 	mov	r5,r3
   84390:	01800044 	movi	r6,1
   84394:	00842840 	call	84284 <udivmodsi4>
   84398:	0085c83a 	sub	r2,zero,r2
   8439c:	dfc00017 	ldw	ra,0(sp)
   843a0:	dec00104 	addi	sp,sp,4
   843a4:	f800283a 	ret
   843a8:	014bc83a 	sub	r5,zero,r5
   843ac:	dfc00017 	ldw	ra,0(sp)
   843b0:	dec00104 	addi	sp,sp,4
   843b4:	00842841 	jmpi	84284 <udivmodsi4>
   843b8:	0147c83a 	sub	r3,zero,r5
   843bc:	003ff306 	br	8438c <__modsi3+0x2c>

000843c0 <__udivsi3>:
   843c0:	000d883a 	mov	r6,zero
   843c4:	00842841 	jmpi	84284 <udivmodsi4>

000843c8 <__umodsi3>:
   843c8:	01800044 	movi	r6,1
   843cc:	00842841 	jmpi	84284 <udivmodsi4>

000843d0 <__mulsi3>:
   843d0:	20000a26 	beq	r4,zero,843fc <__mulsi3+0x2c>
   843d4:	0007883a 	mov	r3,zero
   843d8:	2080004c 	andi	r2,r4,1
   843dc:	1005003a 	cmpeq	r2,r2,zero
   843e0:	2008d07a 	srli	r4,r4,1
   843e4:	1000011e 	bne	r2,zero,843ec <__mulsi3+0x1c>
   843e8:	1947883a 	add	r3,r3,r5
   843ec:	294b883a 	add	r5,r5,r5
   843f0:	203ff91e 	bne	r4,zero,843d8 <__mulsi3+0x8>
   843f4:	1805883a 	mov	r2,r3
   843f8:	f800283a 	ret
   843fc:	0007883a 	mov	r3,zero
   84400:	1805883a 	mov	r2,r3
   84404:	f800283a 	ret

00084408 <__muldi3>:
   84408:	defff204 	addi	sp,sp,-56
   8440c:	df000c15 	stw	fp,48(sp)
   84410:	3038d43a 	srli	fp,r6,16
   84414:	dd000815 	stw	r20,32(sp)
   84418:	dc400515 	stw	r17,20(sp)
   8441c:	2028d43a 	srli	r20,r4,16
   84420:	247fffcc 	andi	r17,r4,65535
   84424:	dc000415 	stw	r16,16(sp)
   84428:	343fffcc 	andi	r16,r6,65535
   8442c:	dcc00715 	stw	r19,28(sp)
   84430:	d9000015 	stw	r4,0(sp)
   84434:	2827883a 	mov	r19,r5
   84438:	8809883a 	mov	r4,r17
   8443c:	d9400115 	stw	r5,4(sp)
   84440:	800b883a 	mov	r5,r16
   84444:	d9800215 	stw	r6,8(sp)
   84448:	dfc00d15 	stw	ra,52(sp)
   8444c:	d9c00315 	stw	r7,12(sp)
   84450:	dd800a15 	stw	r22,40(sp)
   84454:	dd400915 	stw	r21,36(sp)
   84458:	302d883a 	mov	r22,r6
   8445c:	ddc00b15 	stw	r23,44(sp)
   84460:	dc800615 	stw	r18,24(sp)
   84464:	00843d00 	call	843d0 <__mulsi3>
   84468:	8809883a 	mov	r4,r17
   8446c:	e00b883a 	mov	r5,fp
   84470:	102b883a 	mov	r21,r2
   84474:	00843d00 	call	843d0 <__mulsi3>
   84478:	800b883a 	mov	r5,r16
   8447c:	a009883a 	mov	r4,r20
   84480:	1023883a 	mov	r17,r2
   84484:	00843d00 	call	843d0 <__mulsi3>
   84488:	a009883a 	mov	r4,r20
   8448c:	e00b883a 	mov	r5,fp
   84490:	1021883a 	mov	r16,r2
   84494:	00843d00 	call	843d0 <__mulsi3>
   84498:	a8ffffcc 	andi	r3,r21,65535
   8449c:	a82ad43a 	srli	r21,r21,16
   844a0:	8c23883a 	add	r17,r17,r16
   844a4:	1011883a 	mov	r8,r2
   844a8:	ac6b883a 	add	r21,r21,r17
   844ac:	a804943a 	slli	r2,r21,16
   844b0:	b009883a 	mov	r4,r22
   844b4:	980b883a 	mov	r5,r19
   844b8:	10c7883a 	add	r3,r2,r3
   844bc:	a812d43a 	srli	r9,r21,16
   844c0:	180d883a 	mov	r6,r3
   844c4:	ac00022e 	bgeu	r21,r16,844d0 <__muldi3+0xc8>
   844c8:	00800074 	movhi	r2,1
   844cc:	4091883a 	add	r8,r8,r2
   844d0:	4267883a 	add	r19,r8,r9
   844d4:	302d883a 	mov	r22,r6
   844d8:	00843d00 	call	843d0 <__mulsi3>
   844dc:	d9400317 	ldw	r5,12(sp)
   844e0:	d9000017 	ldw	r4,0(sp)
   844e4:	1023883a 	mov	r17,r2
   844e8:	00843d00 	call	843d0 <__mulsi3>
   844ec:	14cb883a 	add	r5,r2,r19
   844f0:	894b883a 	add	r5,r17,r5
   844f4:	b005883a 	mov	r2,r22
   844f8:	2807883a 	mov	r3,r5
   844fc:	dfc00d17 	ldw	ra,52(sp)
   84500:	df000c17 	ldw	fp,48(sp)
   84504:	ddc00b17 	ldw	r23,44(sp)
   84508:	dd800a17 	ldw	r22,40(sp)
   8450c:	dd400917 	ldw	r21,36(sp)
   84510:	dd000817 	ldw	r20,32(sp)
   84514:	dcc00717 	ldw	r19,28(sp)
   84518:	dc800617 	ldw	r18,24(sp)
   8451c:	dc400517 	ldw	r17,20(sp)
   84520:	dc000417 	ldw	r16,16(sp)
   84524:	dec00e04 	addi	sp,sp,56
   84528:	f800283a 	ret

0008452c <__clzsi2>:
   8452c:	00bfffd4 	movui	r2,65535
   84530:	11000e36 	bltu	r2,r4,8456c <__clzsi2+0x40>
   84534:	00803fc4 	movi	r2,255
   84538:	01400204 	movi	r5,8
   8453c:	0007883a 	mov	r3,zero
   84540:	11001036 	bltu	r2,r4,84584 <__clzsi2+0x58>
   84544:	000b883a 	mov	r5,zero
   84548:	20c6d83a 	srl	r3,r4,r3
   8454c:	00800274 	movhi	r2,9
   84550:	108ac804 	addi	r2,r2,11040
   84554:	1887883a 	add	r3,r3,r2
   84558:	18800003 	ldbu	r2,0(r3)
   8455c:	00c00804 	movi	r3,32
   84560:	2885883a 	add	r2,r5,r2
   84564:	1885c83a 	sub	r2,r3,r2
   84568:	f800283a 	ret
   8456c:	01400404 	movi	r5,16
   84570:	00804034 	movhi	r2,256
   84574:	10bfffc4 	addi	r2,r2,-1
   84578:	2807883a 	mov	r3,r5
   8457c:	113ff22e 	bgeu	r2,r4,84548 <__clzsi2+0x1c>
   84580:	01400604 	movi	r5,24
   84584:	2807883a 	mov	r3,r5
   84588:	20c6d83a 	srl	r3,r4,r3
   8458c:	00800274 	movhi	r2,9
   84590:	108ac804 	addi	r2,r2,11040
   84594:	1887883a 	add	r3,r3,r2
   84598:	18800003 	ldbu	r2,0(r3)
   8459c:	00c00804 	movi	r3,32
   845a0:	2885883a 	add	r2,r5,r2
   845a4:	1885c83a 	sub	r2,r3,r2
   845a8:	f800283a 	ret

000845ac <__pack_d>:
   845ac:	20c00017 	ldw	r3,0(r4)
   845b0:	defffd04 	addi	sp,sp,-12
   845b4:	dc000015 	stw	r16,0(sp)
   845b8:	dc800215 	stw	r18,8(sp)
   845bc:	dc400115 	stw	r17,4(sp)
   845c0:	00800044 	movi	r2,1
   845c4:	22000317 	ldw	r8,12(r4)
   845c8:	001f883a 	mov	r15,zero
   845cc:	22400417 	ldw	r9,16(r4)
   845d0:	24000117 	ldw	r16,4(r4)
   845d4:	10c0552e 	bgeu	r2,r3,8472c <__pack_d+0x180>
   845d8:	00800104 	movi	r2,4
   845dc:	18804f26 	beq	r3,r2,8471c <__pack_d+0x170>
   845e0:	00800084 	movi	r2,2
   845e4:	18800226 	beq	r3,r2,845f0 <__pack_d+0x44>
   845e8:	4244b03a 	or	r2,r8,r9
   845ec:	10001a1e 	bne	r2,zero,84658 <__pack_d+0xac>
   845f0:	000d883a 	mov	r6,zero
   845f4:	000f883a 	mov	r7,zero
   845f8:	0011883a 	mov	r8,zero
   845fc:	00800434 	movhi	r2,16
   84600:	10bfffc4 	addi	r2,r2,-1
   84604:	301d883a 	mov	r14,r6
   84608:	3884703a 	and	r2,r7,r2
   8460c:	400a953a 	slli	r5,r8,20
   84610:	79bffc2c 	andhi	r6,r15,65520
   84614:	308cb03a 	or	r6,r6,r2
   84618:	00e00434 	movhi	r3,32784
   8461c:	18ffffc4 	addi	r3,r3,-1
   84620:	800497fa 	slli	r2,r16,31
   84624:	30c6703a 	and	r3,r6,r3
   84628:	1946b03a 	or	r3,r3,r5
   8462c:	01600034 	movhi	r5,32768
   84630:	297fffc4 	addi	r5,r5,-1
   84634:	194a703a 	and	r5,r3,r5
   84638:	288ab03a 	or	r5,r5,r2
   8463c:	2807883a 	mov	r3,r5
   84640:	7005883a 	mov	r2,r14
   84644:	dc800217 	ldw	r18,8(sp)
   84648:	dc400117 	ldw	r17,4(sp)
   8464c:	dc000017 	ldw	r16,0(sp)
   84650:	dec00304 	addi	sp,sp,12
   84654:	f800283a 	ret
   84658:	21000217 	ldw	r4,8(r4)
   8465c:	00bf0084 	movi	r2,-1022
   84660:	20803f16 	blt	r4,r2,84760 <__pack_d+0x1b4>
   84664:	0080ffc4 	movi	r2,1023
   84668:	11002c16 	blt	r2,r4,8471c <__pack_d+0x170>
   8466c:	00803fc4 	movi	r2,255
   84670:	408c703a 	and	r6,r8,r2
   84674:	00802004 	movi	r2,128
   84678:	0007883a 	mov	r3,zero
   8467c:	000f883a 	mov	r7,zero
   84680:	2280ffc4 	addi	r10,r4,1023
   84684:	30801e26 	beq	r6,r2,84700 <__pack_d+0x154>
   84688:	00801fc4 	movi	r2,127
   8468c:	4089883a 	add	r4,r8,r2
   84690:	220d803a 	cmpltu	r6,r4,r8
   84694:	324d883a 	add	r6,r6,r9
   84698:	2011883a 	mov	r8,r4
   8469c:	3013883a 	mov	r9,r6
   846a0:	00880034 	movhi	r2,8192
   846a4:	10bfffc4 	addi	r2,r2,-1
   846a8:	12400d36 	bltu	r2,r9,846e0 <__pack_d+0x134>
   846ac:	4804963a 	slli	r2,r9,24
   846b0:	400cd23a 	srli	r6,r8,8
   846b4:	480ed23a 	srli	r7,r9,8
   846b8:	013fffc4 	movi	r4,-1
   846bc:	118cb03a 	or	r6,r2,r6
   846c0:	01400434 	movhi	r5,16
   846c4:	297fffc4 	addi	r5,r5,-1
   846c8:	3104703a 	and	r2,r6,r4
   846cc:	3946703a 	and	r3,r7,r5
   846d0:	5201ffcc 	andi	r8,r10,2047
   846d4:	100d883a 	mov	r6,r2
   846d8:	180f883a 	mov	r7,r3
   846dc:	003fc706 	br	845fc <__pack_d+0x50>
   846e0:	480897fa 	slli	r4,r9,31
   846e4:	4004d07a 	srli	r2,r8,1
   846e8:	4806d07a 	srli	r3,r9,1
   846ec:	52800044 	addi	r10,r10,1
   846f0:	2084b03a 	or	r2,r4,r2
   846f4:	1011883a 	mov	r8,r2
   846f8:	1813883a 	mov	r9,r3
   846fc:	003feb06 	br	846ac <__pack_d+0x100>
   84700:	383fe11e 	bne	r7,zero,84688 <__pack_d+0xdc>
   84704:	01004004 	movi	r4,256
   84708:	4104703a 	and	r2,r8,r4
   8470c:	10c4b03a 	or	r2,r2,r3
   84710:	103fe326 	beq	r2,zero,846a0 <__pack_d+0xf4>
   84714:	3005883a 	mov	r2,r6
   84718:	003fdc06 	br	8468c <__pack_d+0xe0>
   8471c:	000d883a 	mov	r6,zero
   84720:	000f883a 	mov	r7,zero
   84724:	0201ffc4 	movi	r8,2047
   84728:	003fb406 	br	845fc <__pack_d+0x50>
   8472c:	0005883a 	mov	r2,zero
   84730:	00c00234 	movhi	r3,8
   84734:	408cb03a 	or	r6,r8,r2
   84738:	48ceb03a 	or	r7,r9,r3
   8473c:	013fffc4 	movi	r4,-1
   84740:	01400434 	movhi	r5,16
   84744:	297fffc4 	addi	r5,r5,-1
   84748:	3104703a 	and	r2,r6,r4
   8474c:	3946703a 	and	r3,r7,r5
   84750:	100d883a 	mov	r6,r2
   84754:	180f883a 	mov	r7,r3
   84758:	0201ffc4 	movi	r8,2047
   8475c:	003fa706 	br	845fc <__pack_d+0x50>
   84760:	1109c83a 	sub	r4,r2,r4
   84764:	00800e04 	movi	r2,56
   84768:	11004316 	blt	r2,r4,84878 <__pack_d+0x2cc>
   8476c:	21fff804 	addi	r7,r4,-32
   84770:	38004516 	blt	r7,zero,84888 <__pack_d+0x2dc>
   84774:	49d8d83a 	srl	r12,r9,r7
   84778:	001b883a 	mov	r13,zero
   8477c:	0023883a 	mov	r17,zero
   84780:	01400044 	movi	r5,1
   84784:	0025883a 	mov	r18,zero
   84788:	38004716 	blt	r7,zero,848a8 <__pack_d+0x2fc>
   8478c:	29d6983a 	sll	r11,r5,r7
   84790:	0015883a 	mov	r10,zero
   84794:	00bfffc4 	movi	r2,-1
   84798:	5089883a 	add	r4,r10,r2
   8479c:	588b883a 	add	r5,r11,r2
   847a0:	228d803a 	cmpltu	r6,r4,r10
   847a4:	314b883a 	add	r5,r6,r5
   847a8:	4104703a 	and	r2,r8,r4
   847ac:	4946703a 	and	r3,r9,r5
   847b0:	10c4b03a 	or	r2,r2,r3
   847b4:	10000226 	beq	r2,zero,847c0 <__pack_d+0x214>
   847b8:	04400044 	movi	r17,1
   847bc:	0025883a 	mov	r18,zero
   847c0:	00803fc4 	movi	r2,255
   847c4:	644eb03a 	or	r7,r12,r17
   847c8:	3892703a 	and	r9,r7,r2
   847cc:	00802004 	movi	r2,128
   847d0:	6c90b03a 	or	r8,r13,r18
   847d4:	0015883a 	mov	r10,zero
   847d8:	48801626 	beq	r9,r2,84834 <__pack_d+0x288>
   847dc:	01001fc4 	movi	r4,127
   847e0:	3905883a 	add	r2,r7,r4
   847e4:	11cd803a 	cmpltu	r6,r2,r7
   847e8:	320d883a 	add	r6,r6,r8
   847ec:	100f883a 	mov	r7,r2
   847f0:	00840034 	movhi	r2,4096
   847f4:	10bfffc4 	addi	r2,r2,-1
   847f8:	3011883a 	mov	r8,r6
   847fc:	0007883a 	mov	r3,zero
   84800:	11801b36 	bltu	r2,r6,84870 <__pack_d+0x2c4>
   84804:	4004963a 	slli	r2,r8,24
   84808:	3808d23a 	srli	r4,r7,8
   8480c:	400ad23a 	srli	r5,r8,8
   84810:	1813883a 	mov	r9,r3
   84814:	1108b03a 	or	r4,r2,r4
   84818:	00bfffc4 	movi	r2,-1
   8481c:	00c00434 	movhi	r3,16
   84820:	18ffffc4 	addi	r3,r3,-1
   84824:	208c703a 	and	r6,r4,r2
   84828:	28ce703a 	and	r7,r5,r3
   8482c:	4a01ffcc 	andi	r8,r9,2047
   84830:	003f7206 	br	845fc <__pack_d+0x50>
   84834:	503fe91e 	bne	r10,zero,847dc <__pack_d+0x230>
   84838:	01004004 	movi	r4,256
   8483c:	3904703a 	and	r2,r7,r4
   84840:	0007883a 	mov	r3,zero
   84844:	10c4b03a 	or	r2,r2,r3
   84848:	10000626 	beq	r2,zero,84864 <__pack_d+0x2b8>
   8484c:	3a45883a 	add	r2,r7,r9
   84850:	11cd803a 	cmpltu	r6,r2,r7
   84854:	320d883a 	add	r6,r6,r8
   84858:	100f883a 	mov	r7,r2
   8485c:	3011883a 	mov	r8,r6
   84860:	0007883a 	mov	r3,zero
   84864:	00840034 	movhi	r2,4096
   84868:	10bfffc4 	addi	r2,r2,-1
   8486c:	123fe52e 	bgeu	r2,r8,84804 <__pack_d+0x258>
   84870:	00c00044 	movi	r3,1
   84874:	003fe306 	br	84804 <__pack_d+0x258>
   84878:	0009883a 	mov	r4,zero
   8487c:	0013883a 	mov	r9,zero
   84880:	000b883a 	mov	r5,zero
   84884:	003fe406 	br	84818 <__pack_d+0x26c>
   84888:	4a47883a 	add	r3,r9,r9
   8488c:	008007c4 	movi	r2,31
   84890:	1105c83a 	sub	r2,r2,r4
   84894:	1886983a 	sll	r3,r3,r2
   84898:	4118d83a 	srl	r12,r8,r4
   8489c:	491ad83a 	srl	r13,r9,r4
   848a0:	1b18b03a 	or	r12,r3,r12
   848a4:	003fb506 	br	8477c <__pack_d+0x1d0>
   848a8:	2806d07a 	srli	r3,r5,1
   848ac:	008007c4 	movi	r2,31
   848b0:	1105c83a 	sub	r2,r2,r4
   848b4:	1896d83a 	srl	r11,r3,r2
   848b8:	2914983a 	sll	r10,r5,r4
   848bc:	003fb506 	br	84794 <__pack_d+0x1e8>

000848c0 <__unpack_d>:
   848c0:	20c00117 	ldw	r3,4(r4)
   848c4:	22400017 	ldw	r9,0(r4)
   848c8:	00800434 	movhi	r2,16
   848cc:	10bfffc4 	addi	r2,r2,-1
   848d0:	1808d53a 	srli	r4,r3,20
   848d4:	180cd7fa 	srli	r6,r3,31
   848d8:	1894703a 	and	r10,r3,r2
   848dc:	2201ffcc 	andi	r8,r4,2047
   848e0:	281b883a 	mov	r13,r5
   848e4:	4817883a 	mov	r11,r9
   848e8:	29800115 	stw	r6,4(r5)
   848ec:	5019883a 	mov	r12,r10
   848f0:	40001e1e 	bne	r8,zero,8496c <__unpack_d+0xac>
   848f4:	4a84b03a 	or	r2,r9,r10
   848f8:	10001926 	beq	r2,zero,84960 <__unpack_d+0xa0>
   848fc:	4804d63a 	srli	r2,r9,24
   84900:	500c923a 	slli	r6,r10,8
   84904:	013f0084 	movi	r4,-1022
   84908:	00c40034 	movhi	r3,4096
   8490c:	18ffffc4 	addi	r3,r3,-1
   84910:	118cb03a 	or	r6,r2,r6
   84914:	008000c4 	movi	r2,3
   84918:	480a923a 	slli	r5,r9,8
   8491c:	68800015 	stw	r2,0(r13)
   84920:	69000215 	stw	r4,8(r13)
   84924:	19800b36 	bltu	r3,r6,84954 <__unpack_d+0x94>
   84928:	200f883a 	mov	r7,r4
   8492c:	1811883a 	mov	r8,r3
   84930:	2945883a 	add	r2,r5,r5
   84934:	1149803a 	cmpltu	r4,r2,r5
   84938:	3187883a 	add	r3,r6,r6
   8493c:	20c9883a 	add	r4,r4,r3
   84940:	100b883a 	mov	r5,r2
   84944:	200d883a 	mov	r6,r4
   84948:	39ffffc4 	addi	r7,r7,-1
   8494c:	413ff82e 	bgeu	r8,r4,84930 <__unpack_d+0x70>
   84950:	69c00215 	stw	r7,8(r13)
   84954:	69800415 	stw	r6,16(r13)
   84958:	69400315 	stw	r5,12(r13)
   8495c:	f800283a 	ret
   84960:	00800084 	movi	r2,2
   84964:	28800015 	stw	r2,0(r5)
   84968:	f800283a 	ret
   8496c:	0081ffc4 	movi	r2,2047
   84970:	40800f26 	beq	r8,r2,849b0 <__unpack_d+0xf0>
   84974:	480cd63a 	srli	r6,r9,24
   84978:	5006923a 	slli	r3,r10,8
   8497c:	4804923a 	slli	r2,r9,8
   84980:	0009883a 	mov	r4,zero
   84984:	30c6b03a 	or	r3,r6,r3
   84988:	01440034 	movhi	r5,4096
   8498c:	110cb03a 	or	r6,r2,r4
   84990:	423f0044 	addi	r8,r8,-1023
   84994:	194eb03a 	or	r7,r3,r5
   84998:	008000c4 	movi	r2,3
   8499c:	69c00415 	stw	r7,16(r13)
   849a0:	6a000215 	stw	r8,8(r13)
   849a4:	68800015 	stw	r2,0(r13)
   849a8:	69800315 	stw	r6,12(r13)
   849ac:	f800283a 	ret
   849b0:	4a84b03a 	or	r2,r9,r10
   849b4:	1000031e 	bne	r2,zero,849c4 <__unpack_d+0x104>
   849b8:	00800104 	movi	r2,4
   849bc:	28800015 	stw	r2,0(r5)
   849c0:	f800283a 	ret
   849c4:	0009883a 	mov	r4,zero
   849c8:	01400234 	movhi	r5,8
   849cc:	4904703a 	and	r2,r9,r4
   849d0:	5146703a 	and	r3,r10,r5
   849d4:	10c4b03a 	or	r2,r2,r3
   849d8:	10000526 	beq	r2,zero,849f0 <__unpack_d+0x130>
   849dc:	00800044 	movi	r2,1
   849e0:	68800015 	stw	r2,0(r13)
   849e4:	6b000415 	stw	r12,16(r13)
   849e8:	6ac00315 	stw	r11,12(r13)
   849ec:	f800283a 	ret
   849f0:	68000015 	stw	zero,0(r13)
   849f4:	003ffb06 	br	849e4 <__unpack_d+0x124>

000849f8 <__fpcmp_parts_d>:
   849f8:	21800017 	ldw	r6,0(r4)
   849fc:	00c00044 	movi	r3,1
   84a00:	19800a2e 	bgeu	r3,r6,84a2c <__fpcmp_parts_d+0x34>
   84a04:	28800017 	ldw	r2,0(r5)
   84a08:	1880082e 	bgeu	r3,r2,84a2c <__fpcmp_parts_d+0x34>
   84a0c:	00c00104 	movi	r3,4
   84a10:	30c02626 	beq	r6,r3,84aac <__fpcmp_parts_d+0xb4>
   84a14:	10c02226 	beq	r2,r3,84aa0 <__fpcmp_parts_d+0xa8>
   84a18:	00c00084 	movi	r3,2
   84a1c:	30c00526 	beq	r6,r3,84a34 <__fpcmp_parts_d+0x3c>
   84a20:	10c0071e 	bne	r2,r3,84a40 <__fpcmp_parts_d+0x48>
   84a24:	20800117 	ldw	r2,4(r4)
   84a28:	1000091e 	bne	r2,zero,84a50 <__fpcmp_parts_d+0x58>
   84a2c:	00800044 	movi	r2,1
   84a30:	f800283a 	ret
   84a34:	10c01a1e 	bne	r2,r3,84aa0 <__fpcmp_parts_d+0xa8>
   84a38:	0005883a 	mov	r2,zero
   84a3c:	f800283a 	ret
   84a40:	22000117 	ldw	r8,4(r4)
   84a44:	28800117 	ldw	r2,4(r5)
   84a48:	40800326 	beq	r8,r2,84a58 <__fpcmp_parts_d+0x60>
   84a4c:	403ff726 	beq	r8,zero,84a2c <__fpcmp_parts_d+0x34>
   84a50:	00bfffc4 	movi	r2,-1
   84a54:	f800283a 	ret
   84a58:	20c00217 	ldw	r3,8(r4)
   84a5c:	28800217 	ldw	r2,8(r5)
   84a60:	10fffa16 	blt	r2,r3,84a4c <__fpcmp_parts_d+0x54>
   84a64:	18800916 	blt	r3,r2,84a8c <__fpcmp_parts_d+0x94>
   84a68:	21c00417 	ldw	r7,16(r4)
   84a6c:	28c00417 	ldw	r3,16(r5)
   84a70:	21800317 	ldw	r6,12(r4)
   84a74:	28800317 	ldw	r2,12(r5)
   84a78:	19fff436 	bltu	r3,r7,84a4c <__fpcmp_parts_d+0x54>
   84a7c:	38c00526 	beq	r7,r3,84a94 <__fpcmp_parts_d+0x9c>
   84a80:	38c00236 	bltu	r7,r3,84a8c <__fpcmp_parts_d+0x94>
   84a84:	19ffec1e 	bne	r3,r7,84a38 <__fpcmp_parts_d+0x40>
   84a88:	30bfeb2e 	bgeu	r6,r2,84a38 <__fpcmp_parts_d+0x40>
   84a8c:	403fe71e 	bne	r8,zero,84a2c <__fpcmp_parts_d+0x34>
   84a90:	003fef06 	br	84a50 <__fpcmp_parts_d+0x58>
   84a94:	11bffa2e 	bgeu	r2,r6,84a80 <__fpcmp_parts_d+0x88>
   84a98:	403fe426 	beq	r8,zero,84a2c <__fpcmp_parts_d+0x34>
   84a9c:	003fec06 	br	84a50 <__fpcmp_parts_d+0x58>
   84aa0:	28800117 	ldw	r2,4(r5)
   84aa4:	103fe11e 	bne	r2,zero,84a2c <__fpcmp_parts_d+0x34>
   84aa8:	003fe906 	br	84a50 <__fpcmp_parts_d+0x58>
   84aac:	11bfdd1e 	bne	r2,r6,84a24 <__fpcmp_parts_d+0x2c>
   84ab0:	28c00117 	ldw	r3,4(r5)
   84ab4:	20800117 	ldw	r2,4(r4)
   84ab8:	1885c83a 	sub	r2,r3,r2
   84abc:	f800283a 	ret

00084ac0 <_fclose_r>:
   84ac0:	defffc04 	addi	sp,sp,-16
   84ac4:	dc400115 	stw	r17,4(sp)
   84ac8:	dc000015 	stw	r16,0(sp)
   84acc:	dfc00315 	stw	ra,12(sp)
   84ad0:	dc800215 	stw	r18,8(sp)
   84ad4:	2821883a 	mov	r16,r5
   84ad8:	2023883a 	mov	r17,r4
   84adc:	28002926 	beq	r5,zero,84b84 <_fclose_r+0xc4>
   84ae0:	0084e6c0 	call	84e6c <__sfp_lock_acquire>
   84ae4:	88000226 	beq	r17,zero,84af0 <_fclose_r+0x30>
   84ae8:	88800e17 	ldw	r2,56(r17)
   84aec:	10002d26 	beq	r2,zero,84ba4 <_fclose_r+0xe4>
   84af0:	8080030f 	ldh	r2,12(r16)
   84af4:	10002226 	beq	r2,zero,84b80 <_fclose_r+0xc0>
   84af8:	8809883a 	mov	r4,r17
   84afc:	800b883a 	mov	r5,r16
   84b00:	0084be40 	call	84be4 <_fflush_r>
   84b04:	1025883a 	mov	r18,r2
   84b08:	80800b17 	ldw	r2,44(r16)
   84b0c:	10000426 	beq	r2,zero,84b20 <_fclose_r+0x60>
   84b10:	81400717 	ldw	r5,28(r16)
   84b14:	8809883a 	mov	r4,r17
   84b18:	103ee83a 	callr	r2
   84b1c:	10002a16 	blt	r2,zero,84bc8 <_fclose_r+0x108>
   84b20:	8080030b 	ldhu	r2,12(r16)
   84b24:	1080200c 	andi	r2,r2,128
   84b28:	1000231e 	bne	r2,zero,84bb8 <_fclose_r+0xf8>
   84b2c:	81400c17 	ldw	r5,48(r16)
   84b30:	28000526 	beq	r5,zero,84b48 <_fclose_r+0x88>
   84b34:	80801004 	addi	r2,r16,64
   84b38:	28800226 	beq	r5,r2,84b44 <_fclose_r+0x84>
   84b3c:	8809883a 	mov	r4,r17
   84b40:	00853a40 	call	853a4 <_free_r>
   84b44:	80000c15 	stw	zero,48(r16)
   84b48:	81401117 	ldw	r5,68(r16)
   84b4c:	28000326 	beq	r5,zero,84b5c <_fclose_r+0x9c>
   84b50:	8809883a 	mov	r4,r17
   84b54:	00853a40 	call	853a4 <_free_r>
   84b58:	80001115 	stw	zero,68(r16)
   84b5c:	8000030d 	sth	zero,12(r16)
   84b60:	0084e700 	call	84e70 <__sfp_lock_release>
   84b64:	9005883a 	mov	r2,r18
   84b68:	dfc00317 	ldw	ra,12(sp)
   84b6c:	dc800217 	ldw	r18,8(sp)
   84b70:	dc400117 	ldw	r17,4(sp)
   84b74:	dc000017 	ldw	r16,0(sp)
   84b78:	dec00404 	addi	sp,sp,16
   84b7c:	f800283a 	ret
   84b80:	0084e700 	call	84e70 <__sfp_lock_release>
   84b84:	0025883a 	mov	r18,zero
   84b88:	9005883a 	mov	r2,r18
   84b8c:	dfc00317 	ldw	ra,12(sp)
   84b90:	dc800217 	ldw	r18,8(sp)
   84b94:	dc400117 	ldw	r17,4(sp)
   84b98:	dc000017 	ldw	r16,0(sp)
   84b9c:	dec00404 	addi	sp,sp,16
   84ba0:	f800283a 	ret
   84ba4:	8809883a 	mov	r4,r17
   84ba8:	0084e7c0 	call	84e7c <__sinit>
   84bac:	8080030f 	ldh	r2,12(r16)
   84bb0:	103fd11e 	bne	r2,zero,84af8 <_fclose_r+0x38>
   84bb4:	003ff206 	br	84b80 <_fclose_r+0xc0>
   84bb8:	81400417 	ldw	r5,16(r16)
   84bbc:	8809883a 	mov	r4,r17
   84bc0:	00853a40 	call	853a4 <_free_r>
   84bc4:	003fd906 	br	84b2c <_fclose_r+0x6c>
   84bc8:	04bfffc4 	movi	r18,-1
   84bcc:	003fd406 	br	84b20 <_fclose_r+0x60>

00084bd0 <fclose>:
   84bd0:	00800274 	movhi	r2,9
   84bd4:	10932d04 	addi	r2,r2,19636
   84bd8:	200b883a 	mov	r5,r4
   84bdc:	11000017 	ldw	r4,0(r2)
   84be0:	0084ac01 	jmpi	84ac0 <_fclose_r>

00084be4 <_fflush_r>:
   84be4:	defffb04 	addi	sp,sp,-20
   84be8:	dcc00315 	stw	r19,12(sp)
   84bec:	dc800215 	stw	r18,8(sp)
   84bf0:	dfc00415 	stw	ra,16(sp)
   84bf4:	dc400115 	stw	r17,4(sp)
   84bf8:	dc000015 	stw	r16,0(sp)
   84bfc:	2027883a 	mov	r19,r4
   84c00:	2825883a 	mov	r18,r5
   84c04:	20000226 	beq	r4,zero,84c10 <_fflush_r+0x2c>
   84c08:	20800e17 	ldw	r2,56(r4)
   84c0c:	10005626 	beq	r2,zero,84d68 <_fflush_r+0x184>
   84c10:	9100030b 	ldhu	r4,12(r18)
   84c14:	20ffffcc 	andi	r3,r4,65535
   84c18:	18e0001c 	xori	r3,r3,32768
   84c1c:	18e00004 	addi	r3,r3,-32768
   84c20:	1880020c 	andi	r2,r3,8
   84c24:	1000261e 	bne	r2,zero,84cc0 <_fflush_r+0xdc>
   84c28:	90c00117 	ldw	r3,4(r18)
   84c2c:	20820014 	ori	r2,r4,2048
   84c30:	9080030d 	sth	r2,12(r18)
   84c34:	1009883a 	mov	r4,r2
   84c38:	00c0400e 	bge	zero,r3,84d3c <_fflush_r+0x158>
   84c3c:	92000a17 	ldw	r8,40(r18)
   84c40:	40004026 	beq	r8,zero,84d44 <_fflush_r+0x160>
   84c44:	2084000c 	andi	r2,r4,4096
   84c48:	10005326 	beq	r2,zero,84d98 <_fflush_r+0x1b4>
   84c4c:	94001417 	ldw	r16,80(r18)
   84c50:	9080030b 	ldhu	r2,12(r18)
   84c54:	1080010c 	andi	r2,r2,4
   84c58:	1000481e 	bne	r2,zero,84d7c <_fflush_r+0x198>
   84c5c:	91400717 	ldw	r5,28(r18)
   84c60:	9809883a 	mov	r4,r19
   84c64:	800d883a 	mov	r6,r16
   84c68:	000f883a 	mov	r7,zero
   84c6c:	403ee83a 	callr	r8
   84c70:	8080261e 	bne	r16,r2,84d0c <_fflush_r+0x128>
   84c74:	9080030b 	ldhu	r2,12(r18)
   84c78:	91000417 	ldw	r4,16(r18)
   84c7c:	90000115 	stw	zero,4(r18)
   84c80:	10bdffcc 	andi	r2,r2,63487
   84c84:	10ffffcc 	andi	r3,r2,65535
   84c88:	18c4000c 	andi	r3,r3,4096
   84c8c:	9080030d 	sth	r2,12(r18)
   84c90:	91000015 	stw	r4,0(r18)
   84c94:	18002b26 	beq	r3,zero,84d44 <_fflush_r+0x160>
   84c98:	0007883a 	mov	r3,zero
   84c9c:	1805883a 	mov	r2,r3
   84ca0:	94001415 	stw	r16,80(r18)
   84ca4:	dfc00417 	ldw	ra,16(sp)
   84ca8:	dcc00317 	ldw	r19,12(sp)
   84cac:	dc800217 	ldw	r18,8(sp)
   84cb0:	dc400117 	ldw	r17,4(sp)
   84cb4:	dc000017 	ldw	r16,0(sp)
   84cb8:	dec00504 	addi	sp,sp,20
   84cbc:	f800283a 	ret
   84cc0:	94400417 	ldw	r17,16(r18)
   84cc4:	88001f26 	beq	r17,zero,84d44 <_fflush_r+0x160>
   84cc8:	90800017 	ldw	r2,0(r18)
   84ccc:	18c000cc 	andi	r3,r3,3
   84cd0:	94400015 	stw	r17,0(r18)
   84cd4:	1461c83a 	sub	r16,r2,r17
   84cd8:	18002526 	beq	r3,zero,84d70 <_fflush_r+0x18c>
   84cdc:	0005883a 	mov	r2,zero
   84ce0:	90800215 	stw	r2,8(r18)
   84ce4:	0400170e 	bge	zero,r16,84d44 <_fflush_r+0x160>
   84ce8:	90c00917 	ldw	r3,36(r18)
   84cec:	91400717 	ldw	r5,28(r18)
   84cf0:	880d883a 	mov	r6,r17
   84cf4:	800f883a 	mov	r7,r16
   84cf8:	9809883a 	mov	r4,r19
   84cfc:	183ee83a 	callr	r3
   84d00:	88a3883a 	add	r17,r17,r2
   84d04:	80a1c83a 	sub	r16,r16,r2
   84d08:	00bff616 	blt	zero,r2,84ce4 <_fflush_r+0x100>
   84d0c:	9080030b 	ldhu	r2,12(r18)
   84d10:	00ffffc4 	movi	r3,-1
   84d14:	10801014 	ori	r2,r2,64
   84d18:	9080030d 	sth	r2,12(r18)
   84d1c:	1805883a 	mov	r2,r3
   84d20:	dfc00417 	ldw	ra,16(sp)
   84d24:	dcc00317 	ldw	r19,12(sp)
   84d28:	dc800217 	ldw	r18,8(sp)
   84d2c:	dc400117 	ldw	r17,4(sp)
   84d30:	dc000017 	ldw	r16,0(sp)
   84d34:	dec00504 	addi	sp,sp,20
   84d38:	f800283a 	ret
   84d3c:	90800f17 	ldw	r2,60(r18)
   84d40:	00bfbe16 	blt	zero,r2,84c3c <_fflush_r+0x58>
   84d44:	0007883a 	mov	r3,zero
   84d48:	1805883a 	mov	r2,r3
   84d4c:	dfc00417 	ldw	ra,16(sp)
   84d50:	dcc00317 	ldw	r19,12(sp)
   84d54:	dc800217 	ldw	r18,8(sp)
   84d58:	dc400117 	ldw	r17,4(sp)
   84d5c:	dc000017 	ldw	r16,0(sp)
   84d60:	dec00504 	addi	sp,sp,20
   84d64:	f800283a 	ret
   84d68:	0084e7c0 	call	84e7c <__sinit>
   84d6c:	003fa806 	br	84c10 <_fflush_r+0x2c>
   84d70:	90800517 	ldw	r2,20(r18)
   84d74:	90800215 	stw	r2,8(r18)
   84d78:	003fda06 	br	84ce4 <_fflush_r+0x100>
   84d7c:	90800117 	ldw	r2,4(r18)
   84d80:	90c00c17 	ldw	r3,48(r18)
   84d84:	80a1c83a 	sub	r16,r16,r2
   84d88:	183fb426 	beq	r3,zero,84c5c <_fflush_r+0x78>
   84d8c:	90800f17 	ldw	r2,60(r18)
   84d90:	80a1c83a 	sub	r16,r16,r2
   84d94:	003fb106 	br	84c5c <_fflush_r+0x78>
   84d98:	91400717 	ldw	r5,28(r18)
   84d9c:	9809883a 	mov	r4,r19
   84da0:	000d883a 	mov	r6,zero
   84da4:	01c00044 	movi	r7,1
   84da8:	403ee83a 	callr	r8
   84dac:	1021883a 	mov	r16,r2
   84db0:	00bfffc4 	movi	r2,-1
   84db4:	80800226 	beq	r16,r2,84dc0 <_fflush_r+0x1dc>
   84db8:	92000a17 	ldw	r8,40(r18)
   84dbc:	003fa406 	br	84c50 <_fflush_r+0x6c>
   84dc0:	98c00017 	ldw	r3,0(r19)
   84dc4:	00800744 	movi	r2,29
   84dc8:	18bfde26 	beq	r3,r2,84d44 <_fflush_r+0x160>
   84dcc:	9080030b 	ldhu	r2,12(r18)
   84dd0:	8007883a 	mov	r3,r16
   84dd4:	10801014 	ori	r2,r2,64
   84dd8:	9080030d 	sth	r2,12(r18)
   84ddc:	003fcf06 	br	84d1c <_fflush_r+0x138>

00084de0 <fflush>:
   84de0:	01400234 	movhi	r5,8
   84de4:	2952f904 	addi	r5,r5,19428
   84de8:	2007883a 	mov	r3,r4
   84dec:	20000526 	beq	r4,zero,84e04 <fflush+0x24>
   84df0:	00800274 	movhi	r2,9
   84df4:	10932d04 	addi	r2,r2,19636
   84df8:	11000017 	ldw	r4,0(r2)
   84dfc:	180b883a 	mov	r5,r3
   84e00:	0084be41 	jmpi	84be4 <_fflush_r>
   84e04:	00800274 	movhi	r2,9
   84e08:	10932e04 	addi	r2,r2,19640
   84e0c:	11000017 	ldw	r4,0(r2)
   84e10:	0085b8c1 	jmpi	85b8c <_fwalk_reent>

00084e14 <std>:
   84e14:	00800234 	movhi	r2,8
   84e18:	109ad604 	addi	r2,r2,27480
   84e1c:	20800b15 	stw	r2,44(r4)
   84e20:	00800234 	movhi	r2,8
   84e24:	109b1104 	addi	r2,r2,27716
   84e28:	20800815 	stw	r2,32(r4)
   84e2c:	00c00234 	movhi	r3,8
   84e30:	18daf204 	addi	r3,r3,27592
   84e34:	00800234 	movhi	r2,8
   84e38:	109ad804 	addi	r2,r2,27488
   84e3c:	2140030d 	sth	r5,12(r4)
   84e40:	2180038d 	sth	r6,14(r4)
   84e44:	20c00915 	stw	r3,36(r4)
   84e48:	20800a15 	stw	r2,40(r4)
   84e4c:	20000015 	stw	zero,0(r4)
   84e50:	20000115 	stw	zero,4(r4)
   84e54:	20000215 	stw	zero,8(r4)
   84e58:	20000415 	stw	zero,16(r4)
   84e5c:	20000515 	stw	zero,20(r4)
   84e60:	20000615 	stw	zero,24(r4)
   84e64:	21000715 	stw	r4,28(r4)
   84e68:	f800283a 	ret

00084e6c <__sfp_lock_acquire>:
   84e6c:	f800283a 	ret

00084e70 <__sfp_lock_release>:
   84e70:	f800283a 	ret

00084e74 <__sinit_lock_acquire>:
   84e74:	f800283a 	ret

00084e78 <__sinit_lock_release>:
   84e78:	f800283a 	ret

00084e7c <__sinit>:
   84e7c:	20800e17 	ldw	r2,56(r4)
   84e80:	defffd04 	addi	sp,sp,-12
   84e84:	dc400115 	stw	r17,4(sp)
   84e88:	dc000015 	stw	r16,0(sp)
   84e8c:	dfc00215 	stw	ra,8(sp)
   84e90:	04400044 	movi	r17,1
   84e94:	01400104 	movi	r5,4
   84e98:	000d883a 	mov	r6,zero
   84e9c:	2021883a 	mov	r16,r4
   84ea0:	2200bb04 	addi	r8,r4,748
   84ea4:	200f883a 	mov	r7,r4
   84ea8:	10000526 	beq	r2,zero,84ec0 <__sinit+0x44>
   84eac:	dfc00217 	ldw	ra,8(sp)
   84eb0:	dc400117 	ldw	r17,4(sp)
   84eb4:	dc000017 	ldw	r16,0(sp)
   84eb8:	dec00304 	addi	sp,sp,12
   84ebc:	f800283a 	ret
   84ec0:	21000117 	ldw	r4,4(r4)
   84ec4:	00800234 	movhi	r2,8
   84ec8:	1093d804 	addi	r2,r2,20320
   84ecc:	00c000c4 	movi	r3,3
   84ed0:	80800f15 	stw	r2,60(r16)
   84ed4:	80c0b915 	stw	r3,740(r16)
   84ed8:	8200ba15 	stw	r8,744(r16)
   84edc:	84400e15 	stw	r17,56(r16)
   84ee0:	8000b815 	stw	zero,736(r16)
   84ee4:	0084e140 	call	84e14 <std>
   84ee8:	81000217 	ldw	r4,8(r16)
   84eec:	880d883a 	mov	r6,r17
   84ef0:	800f883a 	mov	r7,r16
   84ef4:	01400284 	movi	r5,10
   84ef8:	0084e140 	call	84e14 <std>
   84efc:	81000317 	ldw	r4,12(r16)
   84f00:	800f883a 	mov	r7,r16
   84f04:	01400484 	movi	r5,18
   84f08:	01800084 	movi	r6,2
   84f0c:	dfc00217 	ldw	ra,8(sp)
   84f10:	dc400117 	ldw	r17,4(sp)
   84f14:	dc000017 	ldw	r16,0(sp)
   84f18:	dec00304 	addi	sp,sp,12
   84f1c:	0084e141 	jmpi	84e14 <std>

00084f20 <__fp_lock>:
   84f20:	0005883a 	mov	r2,zero
   84f24:	f800283a 	ret

00084f28 <__fp_unlock>:
   84f28:	0005883a 	mov	r2,zero
   84f2c:	f800283a 	ret

00084f30 <__fp_unlock_all>:
   84f30:	00800274 	movhi	r2,9
   84f34:	10932d04 	addi	r2,r2,19636
   84f38:	11000017 	ldw	r4,0(r2)
   84f3c:	01400234 	movhi	r5,8
   84f40:	2953ca04 	addi	r5,r5,20264
   84f44:	0085c541 	jmpi	85c54 <_fwalk>

00084f48 <__fp_lock_all>:
   84f48:	00800274 	movhi	r2,9
   84f4c:	10932d04 	addi	r2,r2,19636
   84f50:	11000017 	ldw	r4,0(r2)
   84f54:	01400234 	movhi	r5,8
   84f58:	2953c804 	addi	r5,r5,20256
   84f5c:	0085c541 	jmpi	85c54 <_fwalk>

00084f60 <_cleanup_r>:
   84f60:	01400234 	movhi	r5,8
   84f64:	2952f404 	addi	r5,r5,19408
   84f68:	0085c541 	jmpi	85c54 <_fwalk>

00084f6c <_cleanup>:
   84f6c:	00800274 	movhi	r2,9
   84f70:	10932e04 	addi	r2,r2,19640
   84f74:	11000017 	ldw	r4,0(r2)
   84f78:	0084f601 	jmpi	84f60 <_cleanup_r>

00084f7c <__sfmoreglue>:
   84f7c:	defffc04 	addi	sp,sp,-16
   84f80:	dc000015 	stw	r16,0(sp)
   84f84:	2821883a 	mov	r16,r5
   84f88:	dc400115 	stw	r17,4(sp)
   84f8c:	01401704 	movi	r5,92
   84f90:	2023883a 	mov	r17,r4
   84f94:	8009883a 	mov	r4,r16
   84f98:	dfc00315 	stw	ra,12(sp)
   84f9c:	dcc00215 	stw	r19,8(sp)
   84fa0:	00843d00 	call	843d0 <__mulsi3>
   84fa4:	11400304 	addi	r5,r2,12
   84fa8:	8809883a 	mov	r4,r17
   84fac:	1027883a 	mov	r19,r2
   84fb0:	0085f8c0 	call	85f8c <_malloc_r>
   84fb4:	10c00304 	addi	r3,r2,12
   84fb8:	1023883a 	mov	r17,r2
   84fbc:	1809883a 	mov	r4,r3
   84fc0:	980d883a 	mov	r6,r19
   84fc4:	000b883a 	mov	r5,zero
   84fc8:	10000b26 	beq	r2,zero,84ff8 <__sfmoreglue+0x7c>
   84fcc:	14000115 	stw	r16,4(r2)
   84fd0:	10c00215 	stw	r3,8(r2)
   84fd4:	10000015 	stw	zero,0(r2)
   84fd8:	00866cc0 	call	866cc <memset>
   84fdc:	8805883a 	mov	r2,r17
   84fe0:	dfc00317 	ldw	ra,12(sp)
   84fe4:	dcc00217 	ldw	r19,8(sp)
   84fe8:	dc400117 	ldw	r17,4(sp)
   84fec:	dc000017 	ldw	r16,0(sp)
   84ff0:	dec00404 	addi	sp,sp,16
   84ff4:	f800283a 	ret
   84ff8:	0023883a 	mov	r17,zero
   84ffc:	8805883a 	mov	r2,r17
   85000:	dfc00317 	ldw	ra,12(sp)
   85004:	dcc00217 	ldw	r19,8(sp)
   85008:	dc400117 	ldw	r17,4(sp)
   8500c:	dc000017 	ldw	r16,0(sp)
   85010:	dec00404 	addi	sp,sp,16
   85014:	f800283a 	ret

00085018 <__sfp>:
   85018:	defffd04 	addi	sp,sp,-12
   8501c:	00800274 	movhi	r2,9
   85020:	10932e04 	addi	r2,r2,19640
   85024:	dc000015 	stw	r16,0(sp)
   85028:	14000017 	ldw	r16,0(r2)
   8502c:	dc400115 	stw	r17,4(sp)
   85030:	dfc00215 	stw	ra,8(sp)
   85034:	80800e17 	ldw	r2,56(r16)
   85038:	2023883a 	mov	r17,r4
   8503c:	10002626 	beq	r2,zero,850d8 <__sfp+0xc0>
   85040:	8400b804 	addi	r16,r16,736
   85044:	80800117 	ldw	r2,4(r16)
   85048:	81000217 	ldw	r4,8(r16)
   8504c:	10ffffc4 	addi	r3,r2,-1
   85050:	18000916 	blt	r3,zero,85078 <__sfp+0x60>
   85054:	2080030f 	ldh	r2,12(r4)
   85058:	10000b26 	beq	r2,zero,85088 <__sfp+0x70>
   8505c:	017fffc4 	movi	r5,-1
   85060:	00000206 	br	8506c <__sfp+0x54>
   85064:	2080030f 	ldh	r2,12(r4)
   85068:	10000726 	beq	r2,zero,85088 <__sfp+0x70>
   8506c:	18ffffc4 	addi	r3,r3,-1
   85070:	21001704 	addi	r4,r4,92
   85074:	197ffb1e 	bne	r3,r5,85064 <__sfp+0x4c>
   85078:	80800017 	ldw	r2,0(r16)
   8507c:	10001926 	beq	r2,zero,850e4 <__sfp+0xcc>
   85080:	1021883a 	mov	r16,r2
   85084:	003fef06 	br	85044 <__sfp+0x2c>
   85088:	00bfffc4 	movi	r2,-1
   8508c:	00c00044 	movi	r3,1
   85090:	2080038d 	sth	r2,14(r4)
   85094:	20c0030d 	sth	r3,12(r4)
   85098:	20000015 	stw	zero,0(r4)
   8509c:	20000215 	stw	zero,8(r4)
   850a0:	20000115 	stw	zero,4(r4)
   850a4:	20000415 	stw	zero,16(r4)
   850a8:	20000515 	stw	zero,20(r4)
   850ac:	20000615 	stw	zero,24(r4)
   850b0:	20000c15 	stw	zero,48(r4)
   850b4:	20000d15 	stw	zero,52(r4)
   850b8:	20001115 	stw	zero,68(r4)
   850bc:	20001215 	stw	zero,72(r4)
   850c0:	2005883a 	mov	r2,r4
   850c4:	dfc00217 	ldw	ra,8(sp)
   850c8:	dc400117 	ldw	r17,4(sp)
   850cc:	dc000017 	ldw	r16,0(sp)
   850d0:	dec00304 	addi	sp,sp,12
   850d4:	f800283a 	ret
   850d8:	8009883a 	mov	r4,r16
   850dc:	0084e7c0 	call	84e7c <__sinit>
   850e0:	003fd706 	br	85040 <__sfp+0x28>
   850e4:	8809883a 	mov	r4,r17
   850e8:	01400104 	movi	r5,4
   850ec:	0084f7c0 	call	84f7c <__sfmoreglue>
   850f0:	80800015 	stw	r2,0(r16)
   850f4:	103fe21e 	bne	r2,zero,85080 <__sfp+0x68>
   850f8:	00800304 	movi	r2,12
   850fc:	0009883a 	mov	r4,zero
   85100:	88800015 	stw	r2,0(r17)
   85104:	003fee06 	br	850c0 <__sfp+0xa8>

00085108 <_fopen_r>:
   85108:	defffa04 	addi	sp,sp,-24
   8510c:	dcc00415 	stw	r19,16(sp)
   85110:	2827883a 	mov	r19,r5
   85114:	300b883a 	mov	r5,r6
   85118:	d80d883a 	mov	r6,sp
   8511c:	dc800315 	stw	r18,12(sp)
   85120:	dc400215 	stw	r17,8(sp)
   85124:	dc000115 	stw	r16,4(sp)
   85128:	dfc00515 	stw	ra,20(sp)
   8512c:	2021883a 	mov	r16,r4
   85130:	008a6740 	call	8a674 <__sflags>
   85134:	1025883a 	mov	r18,r2
   85138:	8009883a 	mov	r4,r16
   8513c:	0023883a 	mov	r17,zero
   85140:	1000081e 	bne	r2,zero,85164 <_fopen_r+0x5c>
   85144:	8805883a 	mov	r2,r17
   85148:	dfc00517 	ldw	ra,20(sp)
   8514c:	dcc00417 	ldw	r19,16(sp)
   85150:	dc800317 	ldw	r18,12(sp)
   85154:	dc400217 	ldw	r17,8(sp)
   85158:	dc000117 	ldw	r16,4(sp)
   8515c:	dec00604 	addi	sp,sp,24
   85160:	f800283a 	ret
   85164:	00850180 	call	85018 <__sfp>
   85168:	1023883a 	mov	r17,r2
   8516c:	980b883a 	mov	r5,r19
   85170:	8009883a 	mov	r4,r16
   85174:	01c06d84 	movi	r7,438
   85178:	103ff226 	beq	r2,zero,85144 <_fopen_r+0x3c>
   8517c:	d9800017 	ldw	r6,0(sp)
   85180:	00867640 	call	86764 <_open_r>
   85184:	10001816 	blt	r2,zero,851e8 <_fopen_r+0xe0>
   85188:	00c00234 	movhi	r3,8
   8518c:	18daf204 	addi	r3,r3,27592
   85190:	923fffcc 	andi	r8,r18,65535
   85194:	8880038d 	sth	r2,14(r17)
   85198:	00800234 	movhi	r2,8
   8519c:	109b1104 	addi	r2,r2,27716
   851a0:	88800815 	stw	r2,32(r17)
   851a4:	88c00915 	stw	r3,36(r17)
   851a8:	00800234 	movhi	r2,8
   851ac:	109ad804 	addi	r2,r2,27488
   851b0:	00c00234 	movhi	r3,8
   851b4:	18dad604 	addi	r3,r3,27480
   851b8:	4200400c 	andi	r8,r8,256
   851bc:	8c80030d 	sth	r18,12(r17)
   851c0:	8009883a 	mov	r4,r16
   851c4:	880b883a 	mov	r5,r17
   851c8:	000d883a 	mov	r6,zero
   851cc:	01c00084 	movi	r7,2
   851d0:	88800a15 	stw	r2,40(r17)
   851d4:	88c00b15 	stw	r3,44(r17)
   851d8:	8c400715 	stw	r17,28(r17)
   851dc:	403fd926 	beq	r8,zero,85144 <_fopen_r+0x3c>
   851e0:	00856b80 	call	856b8 <_fseek_r>
   851e4:	003fd706 	br	85144 <_fopen_r+0x3c>
   851e8:	0084e6c0 	call	84e6c <__sfp_lock_acquire>
   851ec:	8800030d 	sth	zero,12(r17)
   851f0:	0084e700 	call	84e70 <__sfp_lock_release>
   851f4:	0023883a 	mov	r17,zero
   851f8:	003fd206 	br	85144 <_fopen_r+0x3c>

000851fc <fopen>:
   851fc:	01800274 	movhi	r6,9
   85200:	31932d04 	addi	r6,r6,19636
   85204:	2007883a 	mov	r3,r4
   85208:	31000017 	ldw	r4,0(r6)
   8520c:	280d883a 	mov	r6,r5
   85210:	180b883a 	mov	r5,r3
   85214:	00851081 	jmpi	85108 <_fopen_r>

00085218 <fprintf>:
   85218:	defffc04 	addi	sp,sp,-16
   8521c:	dfc00115 	stw	ra,4(sp)
   85220:	d9800215 	stw	r6,8(sp)
   85224:	d9c00315 	stw	r7,12(sp)
   85228:	d8800204 	addi	r2,sp,8
   8522c:	100d883a 	mov	r6,r2
   85230:	d8800015 	stw	r2,0(sp)
   85234:	0088c340 	call	88c34 <__vfprintf_internal>
   85238:	dfc00117 	ldw	ra,4(sp)
   8523c:	dec00404 	addi	sp,sp,16
   85240:	f800283a 	ret

00085244 <_fprintf_r>:
   85244:	defffd04 	addi	sp,sp,-12
   85248:	2807883a 	mov	r3,r5
   8524c:	dfc00115 	stw	ra,4(sp)
   85250:	d9c00215 	stw	r7,8(sp)
   85254:	d8800204 	addi	r2,sp,8
   85258:	300b883a 	mov	r5,r6
   8525c:	1809883a 	mov	r4,r3
   85260:	100d883a 	mov	r6,r2
   85264:	d8800015 	stw	r2,0(sp)
   85268:	0088c340 	call	88c34 <__vfprintf_internal>
   8526c:	dfc00117 	ldw	ra,4(sp)
   85270:	dec00304 	addi	sp,sp,12
   85274:	f800283a 	ret

00085278 <_malloc_trim_r>:
   85278:	defffb04 	addi	sp,sp,-20
   8527c:	dcc00315 	stw	r19,12(sp)
   85280:	04c00274 	movhi	r19,9
   85284:	9ccd4404 	addi	r19,r19,13584
   85288:	dc800215 	stw	r18,8(sp)
   8528c:	dc400115 	stw	r17,4(sp)
   85290:	dc000015 	stw	r16,0(sp)
   85294:	2823883a 	mov	r17,r5
   85298:	2025883a 	mov	r18,r4
   8529c:	dfc00415 	stw	ra,16(sp)
   852a0:	008deb00 	call	8deb0 <__malloc_lock>
   852a4:	98800217 	ldw	r2,8(r19)
   852a8:	9009883a 	mov	r4,r18
   852ac:	000b883a 	mov	r5,zero
   852b0:	10c00117 	ldw	r3,4(r2)
   852b4:	00bfff04 	movi	r2,-4
   852b8:	18a0703a 	and	r16,r3,r2
   852bc:	8463c83a 	sub	r17,r16,r17
   852c0:	8c43fbc4 	addi	r17,r17,4079
   852c4:	8822d33a 	srli	r17,r17,12
   852c8:	0083ffc4 	movi	r2,4095
   852cc:	8c7fffc4 	addi	r17,r17,-1
   852d0:	8822933a 	slli	r17,r17,12
   852d4:	1440060e 	bge	r2,r17,852f0 <_malloc_trim_r+0x78>
   852d8:	0086ae80 	call	86ae8 <_sbrk_r>
   852dc:	98c00217 	ldw	r3,8(r19)
   852e0:	9009883a 	mov	r4,r18
   852e4:	044bc83a 	sub	r5,zero,r17
   852e8:	80c7883a 	add	r3,r16,r3
   852ec:	10c00926 	beq	r2,r3,85314 <_malloc_trim_r+0x9c>
   852f0:	008ded00 	call	8ded0 <__malloc_unlock>
   852f4:	0005883a 	mov	r2,zero
   852f8:	dfc00417 	ldw	ra,16(sp)
   852fc:	dcc00317 	ldw	r19,12(sp)
   85300:	dc800217 	ldw	r18,8(sp)
   85304:	dc400117 	ldw	r17,4(sp)
   85308:	dc000017 	ldw	r16,0(sp)
   8530c:	dec00504 	addi	sp,sp,20
   85310:	f800283a 	ret
   85314:	9009883a 	mov	r4,r18
   85318:	0086ae80 	call	86ae8 <_sbrk_r>
   8531c:	844dc83a 	sub	r6,r16,r17
   85320:	00ffffc4 	movi	r3,-1
   85324:	9009883a 	mov	r4,r18
   85328:	000b883a 	mov	r5,zero
   8532c:	01c00274 	movhi	r7,9
   85330:	39da4904 	addi	r7,r7,26916
   85334:	31800054 	ori	r6,r6,1
   85338:	10c00926 	beq	r2,r3,85360 <_malloc_trim_r+0xe8>
   8533c:	38800017 	ldw	r2,0(r7)
   85340:	98c00217 	ldw	r3,8(r19)
   85344:	9009883a 	mov	r4,r18
   85348:	1445c83a 	sub	r2,r2,r17
   8534c:	38800015 	stw	r2,0(r7)
   85350:	19800115 	stw	r6,4(r3)
   85354:	008ded00 	call	8ded0 <__malloc_unlock>
   85358:	00800044 	movi	r2,1
   8535c:	003fe606 	br	852f8 <_malloc_trim_r+0x80>
   85360:	0086ae80 	call	86ae8 <_sbrk_r>
   85364:	99800217 	ldw	r6,8(r19)
   85368:	100f883a 	mov	r7,r2
   8536c:	9009883a 	mov	r4,r18
   85370:	1187c83a 	sub	r3,r2,r6
   85374:	008003c4 	movi	r2,15
   85378:	19400054 	ori	r5,r3,1
   8537c:	10ffdc0e 	bge	r2,r3,852f0 <_malloc_trim_r+0x78>
   85380:	00800274 	movhi	r2,9
   85384:	10933004 	addi	r2,r2,19648
   85388:	10c00017 	ldw	r3,0(r2)
   8538c:	00800274 	movhi	r2,9
   85390:	109a4904 	addi	r2,r2,26916
   85394:	31400115 	stw	r5,4(r6)
   85398:	38c7c83a 	sub	r3,r7,r3
   8539c:	10c00015 	stw	r3,0(r2)
   853a0:	003fd306 	br	852f0 <_malloc_trim_r+0x78>

000853a4 <_free_r>:
   853a4:	defffd04 	addi	sp,sp,-12
   853a8:	dc400115 	stw	r17,4(sp)
   853ac:	dc000015 	stw	r16,0(sp)
   853b0:	dfc00215 	stw	ra,8(sp)
   853b4:	2821883a 	mov	r16,r5
   853b8:	2023883a 	mov	r17,r4
   853bc:	28005a26 	beq	r5,zero,85528 <_free_r+0x184>
   853c0:	008deb00 	call	8deb0 <__malloc_lock>
   853c4:	823ffe04 	addi	r8,r16,-8
   853c8:	41400117 	ldw	r5,4(r8)
   853cc:	00bfff84 	movi	r2,-2
   853d0:	02800274 	movhi	r10,9
   853d4:	528d4404 	addi	r10,r10,13584
   853d8:	288e703a 	and	r7,r5,r2
   853dc:	41cd883a 	add	r6,r8,r7
   853e0:	30c00117 	ldw	r3,4(r6)
   853e4:	51000217 	ldw	r4,8(r10)
   853e8:	00bfff04 	movi	r2,-4
   853ec:	1892703a 	and	r9,r3,r2
   853f0:	5017883a 	mov	r11,r10
   853f4:	31006726 	beq	r6,r4,85594 <_free_r+0x1f0>
   853f8:	2880004c 	andi	r2,r5,1
   853fc:	1005003a 	cmpeq	r2,r2,zero
   85400:	32400115 	stw	r9,4(r6)
   85404:	10001a1e 	bne	r2,zero,85470 <_free_r+0xcc>
   85408:	000b883a 	mov	r5,zero
   8540c:	3247883a 	add	r3,r6,r9
   85410:	18800117 	ldw	r2,4(r3)
   85414:	1080004c 	andi	r2,r2,1
   85418:	1000231e 	bne	r2,zero,854a8 <_free_r+0x104>
   8541c:	280ac03a 	cmpne	r5,r5,zero
   85420:	3a4f883a 	add	r7,r7,r9
   85424:	2800451e 	bne	r5,zero,8553c <_free_r+0x198>
   85428:	31000217 	ldw	r4,8(r6)
   8542c:	00800274 	movhi	r2,9
   85430:	108d4604 	addi	r2,r2,13592
   85434:	20807b26 	beq	r4,r2,85624 <_free_r+0x280>
   85438:	30800317 	ldw	r2,12(r6)
   8543c:	3a07883a 	add	r3,r7,r8
   85440:	19c00015 	stw	r7,0(r3)
   85444:	11000215 	stw	r4,8(r2)
   85448:	20800315 	stw	r2,12(r4)
   8544c:	38800054 	ori	r2,r7,1
   85450:	40800115 	stw	r2,4(r8)
   85454:	28001a26 	beq	r5,zero,854c0 <_free_r+0x11c>
   85458:	8809883a 	mov	r4,r17
   8545c:	dfc00217 	ldw	ra,8(sp)
   85460:	dc400117 	ldw	r17,4(sp)
   85464:	dc000017 	ldw	r16,0(sp)
   85468:	dec00304 	addi	sp,sp,12
   8546c:	008ded01 	jmpi	8ded0 <__malloc_unlock>
   85470:	80bffe17 	ldw	r2,-8(r16)
   85474:	50c00204 	addi	r3,r10,8
   85478:	4091c83a 	sub	r8,r8,r2
   8547c:	41000217 	ldw	r4,8(r8)
   85480:	388f883a 	add	r7,r7,r2
   85484:	20c06126 	beq	r4,r3,8560c <_free_r+0x268>
   85488:	40800317 	ldw	r2,12(r8)
   8548c:	3247883a 	add	r3,r6,r9
   85490:	000b883a 	mov	r5,zero
   85494:	11000215 	stw	r4,8(r2)
   85498:	20800315 	stw	r2,12(r4)
   8549c:	18800117 	ldw	r2,4(r3)
   854a0:	1080004c 	andi	r2,r2,1
   854a4:	103fdd26 	beq	r2,zero,8541c <_free_r+0x78>
   854a8:	38800054 	ori	r2,r7,1
   854ac:	3a07883a 	add	r3,r7,r8
   854b0:	280ac03a 	cmpne	r5,r5,zero
   854b4:	40800115 	stw	r2,4(r8)
   854b8:	19c00015 	stw	r7,0(r3)
   854bc:	283fe61e 	bne	r5,zero,85458 <_free_r+0xb4>
   854c0:	00807fc4 	movi	r2,511
   854c4:	11c01f2e 	bgeu	r2,r7,85544 <_free_r+0x1a0>
   854c8:	3806d27a 	srli	r3,r7,9
   854cc:	1800481e 	bne	r3,zero,855f0 <_free_r+0x24c>
   854d0:	3804d0fa 	srli	r2,r7,3
   854d4:	100690fa 	slli	r3,r2,3
   854d8:	1acd883a 	add	r6,r3,r11
   854dc:	31400217 	ldw	r5,8(r6)
   854e0:	31405926 	beq	r6,r5,85648 <_free_r+0x2a4>
   854e4:	28800117 	ldw	r2,4(r5)
   854e8:	00ffff04 	movi	r3,-4
   854ec:	10c4703a 	and	r2,r2,r3
   854f0:	3880022e 	bgeu	r7,r2,854fc <_free_r+0x158>
   854f4:	29400217 	ldw	r5,8(r5)
   854f8:	317ffa1e 	bne	r6,r5,854e4 <_free_r+0x140>
   854fc:	29800317 	ldw	r6,12(r5)
   85500:	41800315 	stw	r6,12(r8)
   85504:	41400215 	stw	r5,8(r8)
   85508:	8809883a 	mov	r4,r17
   8550c:	2a000315 	stw	r8,12(r5)
   85510:	32000215 	stw	r8,8(r6)
   85514:	dfc00217 	ldw	ra,8(sp)
   85518:	dc400117 	ldw	r17,4(sp)
   8551c:	dc000017 	ldw	r16,0(sp)
   85520:	dec00304 	addi	sp,sp,12
   85524:	008ded01 	jmpi	8ded0 <__malloc_unlock>
   85528:	dfc00217 	ldw	ra,8(sp)
   8552c:	dc400117 	ldw	r17,4(sp)
   85530:	dc000017 	ldw	r16,0(sp)
   85534:	dec00304 	addi	sp,sp,12
   85538:	f800283a 	ret
   8553c:	31000217 	ldw	r4,8(r6)
   85540:	003fbd06 	br	85438 <_free_r+0x94>
   85544:	3806d0fa 	srli	r3,r7,3
   85548:	00800044 	movi	r2,1
   8554c:	51400117 	ldw	r5,4(r10)
   85550:	180890fa 	slli	r4,r3,3
   85554:	1807d0ba 	srai	r3,r3,2
   85558:	22c9883a 	add	r4,r4,r11
   8555c:	21800217 	ldw	r6,8(r4)
   85560:	10c4983a 	sll	r2,r2,r3
   85564:	41000315 	stw	r4,12(r8)
   85568:	41800215 	stw	r6,8(r8)
   8556c:	288ab03a 	or	r5,r5,r2
   85570:	22000215 	stw	r8,8(r4)
   85574:	8809883a 	mov	r4,r17
   85578:	51400115 	stw	r5,4(r10)
   8557c:	32000315 	stw	r8,12(r6)
   85580:	dfc00217 	ldw	ra,8(sp)
   85584:	dc400117 	ldw	r17,4(sp)
   85588:	dc000017 	ldw	r16,0(sp)
   8558c:	dec00304 	addi	sp,sp,12
   85590:	008ded01 	jmpi	8ded0 <__malloc_unlock>
   85594:	2880004c 	andi	r2,r5,1
   85598:	3a4d883a 	add	r6,r7,r9
   8559c:	1000071e 	bne	r2,zero,855bc <_free_r+0x218>
   855a0:	80bffe17 	ldw	r2,-8(r16)
   855a4:	4091c83a 	sub	r8,r8,r2
   855a8:	41000317 	ldw	r4,12(r8)
   855ac:	40c00217 	ldw	r3,8(r8)
   855b0:	308d883a 	add	r6,r6,r2
   855b4:	20c00215 	stw	r3,8(r4)
   855b8:	19000315 	stw	r4,12(r3)
   855bc:	00800274 	movhi	r2,9
   855c0:	10932f04 	addi	r2,r2,19644
   855c4:	11000017 	ldw	r4,0(r2)
   855c8:	30c00054 	ori	r3,r6,1
   855cc:	52000215 	stw	r8,8(r10)
   855d0:	40c00115 	stw	r3,4(r8)
   855d4:	313fa036 	bltu	r6,r4,85458 <_free_r+0xb4>
   855d8:	00800274 	movhi	r2,9
   855dc:	109a3b04 	addi	r2,r2,26860
   855e0:	11400017 	ldw	r5,0(r2)
   855e4:	8809883a 	mov	r4,r17
   855e8:	00852780 	call	85278 <_malloc_trim_r>
   855ec:	003f9a06 	br	85458 <_free_r+0xb4>
   855f0:	00800104 	movi	r2,4
   855f4:	10c0072e 	bgeu	r2,r3,85614 <_free_r+0x270>
   855f8:	00800504 	movi	r2,20
   855fc:	10c01936 	bltu	r2,r3,85664 <_free_r+0x2c0>
   85600:	188016c4 	addi	r2,r3,91
   85604:	100690fa 	slli	r3,r2,3
   85608:	003fb306 	br	854d8 <_free_r+0x134>
   8560c:	01400044 	movi	r5,1
   85610:	003f7e06 	br	8540c <_free_r+0x68>
   85614:	3804d1ba 	srli	r2,r7,6
   85618:	10800e04 	addi	r2,r2,56
   8561c:	100690fa 	slli	r3,r2,3
   85620:	003fad06 	br	854d8 <_free_r+0x134>
   85624:	22000315 	stw	r8,12(r4)
   85628:	22000215 	stw	r8,8(r4)
   8562c:	3a05883a 	add	r2,r7,r8
   85630:	38c00054 	ori	r3,r7,1
   85634:	11c00015 	stw	r7,0(r2)
   85638:	41000215 	stw	r4,8(r8)
   8563c:	40c00115 	stw	r3,4(r8)
   85640:	41000315 	stw	r4,12(r8)
   85644:	003f8406 	br	85458 <_free_r+0xb4>
   85648:	1005d0ba 	srai	r2,r2,2
   8564c:	00c00044 	movi	r3,1
   85650:	51000117 	ldw	r4,4(r10)
   85654:	1886983a 	sll	r3,r3,r2
   85658:	20c8b03a 	or	r4,r4,r3
   8565c:	51000115 	stw	r4,4(r10)
   85660:	003fa706 	br	85500 <_free_r+0x15c>
   85664:	00801504 	movi	r2,84
   85668:	10c00436 	bltu	r2,r3,8567c <_free_r+0x2d8>
   8566c:	3804d33a 	srli	r2,r7,12
   85670:	10801b84 	addi	r2,r2,110
   85674:	100690fa 	slli	r3,r2,3
   85678:	003f9706 	br	854d8 <_free_r+0x134>
   8567c:	00805504 	movi	r2,340
   85680:	10c00436 	bltu	r2,r3,85694 <_free_r+0x2f0>
   85684:	3804d3fa 	srli	r2,r7,15
   85688:	10801dc4 	addi	r2,r2,119
   8568c:	100690fa 	slli	r3,r2,3
   85690:	003f9106 	br	854d8 <_free_r+0x134>
   85694:	00815504 	movi	r2,1364
   85698:	10c0032e 	bgeu	r2,r3,856a8 <_free_r+0x304>
   8569c:	00801f84 	movi	r2,126
   856a0:	00c0fc04 	movi	r3,1008
   856a4:	003f8c06 	br	854d8 <_free_r+0x134>
   856a8:	3804d4ba 	srli	r2,r7,18
   856ac:	10801f04 	addi	r2,r2,124
   856b0:	100690fa 	slli	r3,r2,3
   856b4:	003f8806 	br	854d8 <_free_r+0x134>

000856b8 <_fseek_r>:
   856b8:	deffe804 	addi	sp,sp,-96
   856bc:	dd801515 	stw	r22,84(sp)
   856c0:	dcc01215 	stw	r19,72(sp)
   856c4:	dc801115 	stw	r18,68(sp)
   856c8:	dc000f15 	stw	r16,60(sp)
   856cc:	dfc01715 	stw	ra,92(sp)
   856d0:	ddc01615 	stw	r23,88(sp)
   856d4:	dd401415 	stw	r21,80(sp)
   856d8:	dd001315 	stw	r20,76(sp)
   856dc:	dc401015 	stw	r17,64(sp)
   856e0:	2025883a 	mov	r18,r4
   856e4:	2821883a 	mov	r16,r5
   856e8:	302d883a 	mov	r22,r6
   856ec:	3827883a 	mov	r19,r7
   856f0:	20000226 	beq	r4,zero,856fc <_fseek_r+0x44>
   856f4:	20800e17 	ldw	r2,56(r4)
   856f8:	10007826 	beq	r2,zero,858dc <_fseek_r+0x224>
   856fc:	8080030b 	ldhu	r2,12(r16)
   85700:	00c04204 	movi	r3,264
   85704:	1080420c 	andi	r2,r2,264
   85708:	10c07926 	beq	r2,r3,858f0 <_fseek_r+0x238>
   8570c:	85400a17 	ldw	r21,40(r16)
   85710:	a800ea26 	beq	r21,zero,85abc <_fseek_r+0x404>
   85714:	00800044 	movi	r2,1
   85718:	98805f26 	beq	r19,r2,85898 <_fseek_r+0x1e0>
   8571c:	00800084 	movi	r2,2
   85720:	98801026 	beq	r19,r2,85764 <_fseek_r+0xac>
   85724:	98000f26 	beq	r19,zero,85764 <_fseek_r+0xac>
   85728:	00800584 	movi	r2,22
   8572c:	013fffc4 	movi	r4,-1
   85730:	90800015 	stw	r2,0(r18)
   85734:	2005883a 	mov	r2,r4
   85738:	dfc01717 	ldw	ra,92(sp)
   8573c:	ddc01617 	ldw	r23,88(sp)
   85740:	dd801517 	ldw	r22,84(sp)
   85744:	dd401417 	ldw	r21,80(sp)
   85748:	dd001317 	ldw	r20,76(sp)
   8574c:	dcc01217 	ldw	r19,72(sp)
   85750:	dc801117 	ldw	r18,68(sp)
   85754:	dc401017 	ldw	r17,64(sp)
   85758:	dc000f17 	ldw	r16,60(sp)
   8575c:	dec01804 	addi	sp,sp,96
   85760:	f800283a 	ret
   85764:	81800417 	ldw	r6,16(r16)
   85768:	0023883a 	mov	r17,zero
   8576c:	002f883a 	mov	r23,zero
   85770:	3000a626 	beq	r6,zero,85a0c <_fseek_r+0x354>
   85774:	8100030b 	ldhu	r4,12(r16)
   85778:	2082068c 	andi	r2,r4,2074
   8577c:	1000081e 	bne	r2,zero,857a0 <_fseek_r+0xe8>
   85780:	2081000c 	andi	r2,r4,1024
   85784:	10001b1e 	bne	r2,zero,857f4 <_fseek_r+0x13c>
   85788:	00800234 	movhi	r2,8
   8578c:	109ad804 	addi	r2,r2,27488
   85790:	a8800926 	beq	r21,r2,857b8 <_fseek_r+0x100>
   85794:	8080030b 	ldhu	r2,12(r16)
   85798:	10820014 	ori	r2,r2,2048
   8579c:	8080030d 	sth	r2,12(r16)
   857a0:	9009883a 	mov	r4,r18
   857a4:	800b883a 	mov	r5,r16
   857a8:	0084be40 	call	84be4 <_fflush_r>
   857ac:	1000a326 	beq	r2,zero,85a3c <_fseek_r+0x384>
   857b0:	013fffc4 	movi	r4,-1
   857b4:	003fdf06 	br	85734 <_fseek_r+0x7c>
   857b8:	8140038f 	ldh	r5,14(r16)
   857bc:	283ff516 	blt	r5,zero,85794 <_fseek_r+0xdc>
   857c0:	9009883a 	mov	r4,r18
   857c4:	d80d883a 	mov	r6,sp
   857c8:	0085b180 	call	85b18 <_fstat_r>
   857cc:	103ff11e 	bne	r2,zero,85794 <_fseek_r+0xdc>
   857d0:	d8800117 	ldw	r2,4(sp)
   857d4:	00e00014 	movui	r3,32768
   857d8:	10bc000c 	andi	r2,r2,61440
   857dc:	10ffed1e 	bne	r2,r3,85794 <_fseek_r+0xdc>
   857e0:	80c0030b 	ldhu	r3,12(r16)
   857e4:	00810004 	movi	r2,1024
   857e8:	80801315 	stw	r2,76(r16)
   857ec:	1886b03a 	or	r3,r3,r2
   857f0:	80c0030d 	sth	r3,12(r16)
   857f4:	9800701e 	bne	r19,zero,859b8 <_fseek_r+0x300>
   857f8:	b029883a 	mov	r20,r22
   857fc:	b804c03a 	cmpne	r2,r23,zero
   85800:	10003f1e 	bne	r2,zero,85900 <_fseek_r+0x248>
   85804:	8100030b 	ldhu	r4,12(r16)
   85808:	2084000c 	andi	r2,r4,4096
   8580c:	1000a126 	beq	r2,zero,85a94 <_fseek_r+0x3dc>
   85810:	81801417 	ldw	r6,80(r16)
   85814:	80c00117 	ldw	r3,4(r16)
   85818:	81400c17 	ldw	r5,48(r16)
   8581c:	30e3c83a 	sub	r17,r6,r3
   85820:	28008026 	beq	r5,zero,85a24 <_fseek_r+0x36c>
   85824:	81c00f17 	ldw	r7,60(r16)
   85828:	89e3c83a 	sub	r17,r17,r7
   8582c:	80800e17 	ldw	r2,56(r16)
   85830:	81800417 	ldw	r6,16(r16)
   85834:	88c7883a 	add	r3,r17,r3
   85838:	1185c83a 	sub	r2,r2,r6
   8583c:	11cf883a 	add	r7,r2,r7
   85840:	1887c83a 	sub	r3,r3,r2
   85844:	2088000c 	andi	r2,r4,8192
   85848:	10003e1e 	bne	r2,zero,85944 <_fseek_r+0x28c>
   8584c:	a0c03d16 	blt	r20,r3,85944 <_fseek_r+0x28c>
   85850:	38c5883a 	add	r2,r7,r3
   85854:	a0803b2e 	bgeu	r20,r2,85944 <_fseek_r+0x28c>
   85858:	a0c5c83a 	sub	r2,r20,r3
   8585c:	3887c83a 	sub	r3,r7,r2
   85860:	3085883a 	add	r2,r6,r2
   85864:	80800015 	stw	r2,0(r16)
   85868:	80c00115 	stw	r3,4(r16)
   8586c:	28000526 	beq	r5,zero,85884 <_fseek_r+0x1cc>
   85870:	80801004 	addi	r2,r16,64
   85874:	28800226 	beq	r5,r2,85880 <_fseek_r+0x1c8>
   85878:	9009883a 	mov	r4,r18
   8587c:	00853a40 	call	853a4 <_free_r>
   85880:	80000c15 	stw	zero,48(r16)
   85884:	8080030b 	ldhu	r2,12(r16)
   85888:	0009883a 	mov	r4,zero
   8588c:	10bff7cc 	andi	r2,r2,65503
   85890:	8080030d 	sth	r2,12(r16)
   85894:	003fa706 	br	85734 <_fseek_r+0x7c>
   85898:	9009883a 	mov	r4,r18
   8589c:	800b883a 	mov	r5,r16
   858a0:	0084be40 	call	84be4 <_fflush_r>
   858a4:	8100030b 	ldhu	r4,12(r16)
   858a8:	2084000c 	andi	r2,r4,4096
   858ac:	10008726 	beq	r2,zero,85acc <_fseek_r+0x414>
   858b0:	84401417 	ldw	r17,80(r16)
   858b4:	2080010c 	andi	r2,r4,4
   858b8:	1000171e 	bne	r2,zero,85918 <_fseek_r+0x260>
   858bc:	2080020c 	andi	r2,r4,8
   858c0:	10003b26 	beq	r2,zero,859b0 <_fseek_r+0x2f8>
   858c4:	80800017 	ldw	r2,0(r16)
   858c8:	10003926 	beq	r2,zero,859b0 <_fseek_r+0x2f8>
   858cc:	81800417 	ldw	r6,16(r16)
   858d0:	1185c83a 	sub	r2,r2,r6
   858d4:	88a3883a 	add	r17,r17,r2
   858d8:	00001606 	br	85934 <_fseek_r+0x27c>
   858dc:	0084e7c0 	call	84e7c <__sinit>
   858e0:	8080030b 	ldhu	r2,12(r16)
   858e4:	00c04204 	movi	r3,264
   858e8:	1080420c 	andi	r2,r2,264
   858ec:	10ff871e 	bne	r2,r3,8570c <_fseek_r+0x54>
   858f0:	9009883a 	mov	r4,r18
   858f4:	800b883a 	mov	r5,r16
   858f8:	0084be40 	call	84be4 <_fflush_r>
   858fc:	003f8306 	br	8570c <_fseek_r+0x54>
   85900:	81400c17 	ldw	r5,48(r16)
   85904:	28004526 	beq	r5,zero,85a1c <_fseek_r+0x364>
   85908:	8100030b 	ldhu	r4,12(r16)
   8590c:	80c00117 	ldw	r3,4(r16)
   85910:	81c00f17 	ldw	r7,60(r16)
   85914:	003fc506 	br	8582c <_fseek_r+0x174>
   85918:	80c00117 	ldw	r3,4(r16)
   8591c:	80800c17 	ldw	r2,48(r16)
   85920:	88e3c83a 	sub	r17,r17,r3
   85924:	10002226 	beq	r2,zero,859b0 <_fseek_r+0x2f8>
   85928:	81c00f17 	ldw	r7,60(r16)
   8592c:	81800417 	ldw	r6,16(r16)
   85930:	89e3c83a 	sub	r17,r17,r7
   85934:	b46d883a 	add	r22,r22,r17
   85938:	0027883a 	mov	r19,zero
   8593c:	05c00044 	movi	r23,1
   85940:	003f8b06 	br	85770 <_fseek_r+0xb8>
   85944:	80801317 	ldw	r2,76(r16)
   85948:	81400717 	ldw	r5,28(r16)
   8594c:	9009883a 	mov	r4,r18
   85950:	0085c83a 	sub	r2,zero,r2
   85954:	a0a2703a 	and	r17,r20,r2
   85958:	880d883a 	mov	r6,r17
   8595c:	000f883a 	mov	r7,zero
   85960:	a83ee83a 	callr	r21
   85964:	00ffffc4 	movi	r3,-1
   85968:	10ff8d26 	beq	r2,r3,857a0 <_fseek_r+0xe8>
   8596c:	80800417 	ldw	r2,16(r16)
   85970:	81400c17 	ldw	r5,48(r16)
   85974:	80000115 	stw	zero,4(r16)
   85978:	80800015 	stw	r2,0(r16)
   8597c:	28000526 	beq	r5,zero,85994 <_fseek_r+0x2dc>
   85980:	80801004 	addi	r2,r16,64
   85984:	28800226 	beq	r5,r2,85990 <_fseek_r+0x2d8>
   85988:	9009883a 	mov	r4,r18
   8598c:	00853a40 	call	853a4 <_free_r>
   85990:	80000c15 	stw	zero,48(r16)
   85994:	8080030b 	ldhu	r2,12(r16)
   85998:	a463c83a 	sub	r17,r20,r17
   8599c:	10bff7cc 	andi	r2,r2,65503
   859a0:	8080030d 	sth	r2,12(r16)
   859a4:	88000c1e 	bne	r17,zero,859d8 <_fseek_r+0x320>
   859a8:	0009883a 	mov	r4,zero
   859ac:	003f6106 	br	85734 <_fseek_r+0x7c>
   859b0:	81800417 	ldw	r6,16(r16)
   859b4:	003fdf06 	br	85934 <_fseek_r+0x27c>
   859b8:	8140038f 	ldh	r5,14(r16)
   859bc:	9009883a 	mov	r4,r18
   859c0:	d80d883a 	mov	r6,sp
   859c4:	0085b180 	call	85b18 <_fstat_r>
   859c8:	103f751e 	bne	r2,zero,857a0 <_fseek_r+0xe8>
   859cc:	d8800417 	ldw	r2,16(sp)
   859d0:	b0a9883a 	add	r20,r22,r2
   859d4:	003f8906 	br	857fc <_fseek_r+0x144>
   859d8:	9009883a 	mov	r4,r18
   859dc:	800b883a 	mov	r5,r16
   859e0:	00869080 	call	86908 <__srefill_r>
   859e4:	103f6e1e 	bne	r2,zero,857a0 <_fseek_r+0xe8>
   859e8:	80c00117 	ldw	r3,4(r16)
   859ec:	1c7f6c36 	bltu	r3,r17,857a0 <_fseek_r+0xe8>
   859f0:	80800017 	ldw	r2,0(r16)
   859f4:	1c47c83a 	sub	r3,r3,r17
   859f8:	0009883a 	mov	r4,zero
   859fc:	1445883a 	add	r2,r2,r17
   85a00:	80c00115 	stw	r3,4(r16)
   85a04:	80800015 	stw	r2,0(r16)
   85a08:	003f4a06 	br	85734 <_fseek_r+0x7c>
   85a0c:	9009883a 	mov	r4,r18
   85a10:	800b883a 	mov	r5,r16
   85a14:	0085df80 	call	85df8 <__smakebuf_r>
   85a18:	003f5606 	br	85774 <_fseek_r+0xbc>
   85a1c:	8100030b 	ldhu	r4,12(r16)
   85a20:	80c00117 	ldw	r3,4(r16)
   85a24:	80800017 	ldw	r2,0(r16)
   85a28:	81800417 	ldw	r6,16(r16)
   85a2c:	1185c83a 	sub	r2,r2,r6
   85a30:	10cf883a 	add	r7,r2,r3
   85a34:	8887c83a 	sub	r3,r17,r2
   85a38:	003f8206 	br	85844 <_fseek_r+0x18c>
   85a3c:	81400717 	ldw	r5,28(r16)
   85a40:	b00d883a 	mov	r6,r22
   85a44:	980f883a 	mov	r7,r19
   85a48:	9009883a 	mov	r4,r18
   85a4c:	a83ee83a 	callr	r21
   85a50:	00ffffc4 	movi	r3,-1
   85a54:	10ff5626 	beq	r2,r3,857b0 <_fseek_r+0xf8>
   85a58:	81400c17 	ldw	r5,48(r16)
   85a5c:	28000526 	beq	r5,zero,85a74 <_fseek_r+0x3bc>
   85a60:	80801004 	addi	r2,r16,64
   85a64:	28800226 	beq	r5,r2,85a70 <_fseek_r+0x3b8>
   85a68:	9009883a 	mov	r4,r18
   85a6c:	00853a40 	call	853a4 <_free_r>
   85a70:	80000c15 	stw	zero,48(r16)
   85a74:	8080030b 	ldhu	r2,12(r16)
   85a78:	80c00417 	ldw	r3,16(r16)
   85a7c:	0009883a 	mov	r4,zero
   85a80:	10bdf7cc 	andi	r2,r2,63455
   85a84:	8080030d 	sth	r2,12(r16)
   85a88:	80c00015 	stw	r3,0(r16)
   85a8c:	80000115 	stw	zero,4(r16)
   85a90:	003f2806 	br	85734 <_fseek_r+0x7c>
   85a94:	81400717 	ldw	r5,28(r16)
   85a98:	000d883a 	mov	r6,zero
   85a9c:	9009883a 	mov	r4,r18
   85aa0:	01c00044 	movi	r7,1
   85aa4:	a83ee83a 	callr	r21
   85aa8:	100d883a 	mov	r6,r2
   85aac:	00bfffc4 	movi	r2,-1
   85ab0:	30bf3b26 	beq	r6,r2,857a0 <_fseek_r+0xe8>
   85ab4:	8100030b 	ldhu	r4,12(r16)
   85ab8:	003f5606 	br	85814 <_fseek_r+0x15c>
   85abc:	00800744 	movi	r2,29
   85ac0:	013fffc4 	movi	r4,-1
   85ac4:	90800015 	stw	r2,0(r18)
   85ac8:	003f1a06 	br	85734 <_fseek_r+0x7c>
   85acc:	81400717 	ldw	r5,28(r16)
   85ad0:	980f883a 	mov	r7,r19
   85ad4:	9009883a 	mov	r4,r18
   85ad8:	000d883a 	mov	r6,zero
   85adc:	a83ee83a 	callr	r21
   85ae0:	1023883a 	mov	r17,r2
   85ae4:	00bfffc4 	movi	r2,-1
   85ae8:	88bf3126 	beq	r17,r2,857b0 <_fseek_r+0xf8>
   85aec:	8100030b 	ldhu	r4,12(r16)
   85af0:	003f7006 	br	858b4 <_fseek_r+0x1fc>

00085af4 <fseek>:
   85af4:	00800274 	movhi	r2,9
   85af8:	10932d04 	addi	r2,r2,19636
   85afc:	2013883a 	mov	r9,r4
   85b00:	11000017 	ldw	r4,0(r2)
   85b04:	2805883a 	mov	r2,r5
   85b08:	300f883a 	mov	r7,r6
   85b0c:	480b883a 	mov	r5,r9
   85b10:	100d883a 	mov	r6,r2
   85b14:	00856b81 	jmpi	856b8 <_fseek_r>

00085b18 <_fstat_r>:
   85b18:	defffd04 	addi	sp,sp,-12
   85b1c:	dc000015 	stw	r16,0(sp)
   85b20:	04000274 	movhi	r16,9
   85b24:	841a3a04 	addi	r16,r16,26856
   85b28:	dc400115 	stw	r17,4(sp)
   85b2c:	80000015 	stw	zero,0(r16)
   85b30:	2023883a 	mov	r17,r4
   85b34:	2809883a 	mov	r4,r5
   85b38:	300b883a 	mov	r5,r6
   85b3c:	dfc00215 	stw	ra,8(sp)
   85b40:	008d9a80 	call	8d9a8 <fstat>
   85b44:	1007883a 	mov	r3,r2
   85b48:	00bfffc4 	movi	r2,-1
   85b4c:	18800626 	beq	r3,r2,85b68 <_fstat_r+0x50>
   85b50:	1805883a 	mov	r2,r3
   85b54:	dfc00217 	ldw	ra,8(sp)
   85b58:	dc400117 	ldw	r17,4(sp)
   85b5c:	dc000017 	ldw	r16,0(sp)
   85b60:	dec00304 	addi	sp,sp,12
   85b64:	f800283a 	ret
   85b68:	80800017 	ldw	r2,0(r16)
   85b6c:	103ff826 	beq	r2,zero,85b50 <_fstat_r+0x38>
   85b70:	88800015 	stw	r2,0(r17)
   85b74:	1805883a 	mov	r2,r3
   85b78:	dfc00217 	ldw	ra,8(sp)
   85b7c:	dc400117 	ldw	r17,4(sp)
   85b80:	dc000017 	ldw	r16,0(sp)
   85b84:	dec00304 	addi	sp,sp,12
   85b88:	f800283a 	ret

00085b8c <_fwalk_reent>:
   85b8c:	defff704 	addi	sp,sp,-36
   85b90:	dcc00315 	stw	r19,12(sp)
   85b94:	24c0b804 	addi	r19,r4,736
   85b98:	dd800615 	stw	r22,24(sp)
   85b9c:	dd400515 	stw	r21,20(sp)
   85ba0:	dfc00815 	stw	ra,32(sp)
   85ba4:	ddc00715 	stw	r23,28(sp)
   85ba8:	dd000415 	stw	r20,16(sp)
   85bac:	dc800215 	stw	r18,8(sp)
   85bb0:	dc400115 	stw	r17,4(sp)
   85bb4:	dc000015 	stw	r16,0(sp)
   85bb8:	202b883a 	mov	r21,r4
   85bbc:	282d883a 	mov	r22,r5
   85bc0:	0084e6c0 	call	84e6c <__sfp_lock_acquire>
   85bc4:	98002126 	beq	r19,zero,85c4c <_fwalk_reent+0xc0>
   85bc8:	002f883a 	mov	r23,zero
   85bcc:	9c800117 	ldw	r18,4(r19)
   85bd0:	9c000217 	ldw	r16,8(r19)
   85bd4:	90bfffc4 	addi	r2,r18,-1
   85bd8:	10000d16 	blt	r2,zero,85c10 <_fwalk_reent+0x84>
   85bdc:	0023883a 	mov	r17,zero
   85be0:	053fffc4 	movi	r20,-1
   85be4:	8080030f 	ldh	r2,12(r16)
   85be8:	8c400044 	addi	r17,r17,1
   85bec:	10000626 	beq	r2,zero,85c08 <_fwalk_reent+0x7c>
   85bf0:	8080038f 	ldh	r2,14(r16)
   85bf4:	800b883a 	mov	r5,r16
   85bf8:	a809883a 	mov	r4,r21
   85bfc:	15000226 	beq	r2,r20,85c08 <_fwalk_reent+0x7c>
   85c00:	b03ee83a 	callr	r22
   85c04:	b8aeb03a 	or	r23,r23,r2
   85c08:	84001704 	addi	r16,r16,92
   85c0c:	947ff51e 	bne	r18,r17,85be4 <_fwalk_reent+0x58>
   85c10:	9cc00017 	ldw	r19,0(r19)
   85c14:	983fed1e 	bne	r19,zero,85bcc <_fwalk_reent+0x40>
   85c18:	0084e700 	call	84e70 <__sfp_lock_release>
   85c1c:	b805883a 	mov	r2,r23
   85c20:	dfc00817 	ldw	ra,32(sp)
   85c24:	ddc00717 	ldw	r23,28(sp)
   85c28:	dd800617 	ldw	r22,24(sp)
   85c2c:	dd400517 	ldw	r21,20(sp)
   85c30:	dd000417 	ldw	r20,16(sp)
   85c34:	dcc00317 	ldw	r19,12(sp)
   85c38:	dc800217 	ldw	r18,8(sp)
   85c3c:	dc400117 	ldw	r17,4(sp)
   85c40:	dc000017 	ldw	r16,0(sp)
   85c44:	dec00904 	addi	sp,sp,36
   85c48:	f800283a 	ret
   85c4c:	002f883a 	mov	r23,zero
   85c50:	003ff106 	br	85c18 <_fwalk_reent+0x8c>

00085c54 <_fwalk>:
   85c54:	defff804 	addi	sp,sp,-32
   85c58:	dcc00315 	stw	r19,12(sp)
   85c5c:	24c0b804 	addi	r19,r4,736
   85c60:	dd400515 	stw	r21,20(sp)
   85c64:	dfc00715 	stw	ra,28(sp)
   85c68:	dd800615 	stw	r22,24(sp)
   85c6c:	dd000415 	stw	r20,16(sp)
   85c70:	dc800215 	stw	r18,8(sp)
   85c74:	dc400115 	stw	r17,4(sp)
   85c78:	dc000015 	stw	r16,0(sp)
   85c7c:	282b883a 	mov	r21,r5
   85c80:	0084e6c0 	call	84e6c <__sfp_lock_acquire>
   85c84:	98001f26 	beq	r19,zero,85d04 <_fwalk+0xb0>
   85c88:	002d883a 	mov	r22,zero
   85c8c:	9c800117 	ldw	r18,4(r19)
   85c90:	9c000217 	ldw	r16,8(r19)
   85c94:	90bfffc4 	addi	r2,r18,-1
   85c98:	10000c16 	blt	r2,zero,85ccc <_fwalk+0x78>
   85c9c:	0023883a 	mov	r17,zero
   85ca0:	053fffc4 	movi	r20,-1
   85ca4:	8080030f 	ldh	r2,12(r16)
   85ca8:	8c400044 	addi	r17,r17,1
   85cac:	10000526 	beq	r2,zero,85cc4 <_fwalk+0x70>
   85cb0:	8080038f 	ldh	r2,14(r16)
   85cb4:	8009883a 	mov	r4,r16
   85cb8:	15000226 	beq	r2,r20,85cc4 <_fwalk+0x70>
   85cbc:	a83ee83a 	callr	r21
   85cc0:	b0acb03a 	or	r22,r22,r2
   85cc4:	84001704 	addi	r16,r16,92
   85cc8:	947ff61e 	bne	r18,r17,85ca4 <_fwalk+0x50>
   85ccc:	9cc00017 	ldw	r19,0(r19)
   85cd0:	983fee1e 	bne	r19,zero,85c8c <_fwalk+0x38>
   85cd4:	0084e700 	call	84e70 <__sfp_lock_release>
   85cd8:	b005883a 	mov	r2,r22
   85cdc:	dfc00717 	ldw	ra,28(sp)
   85ce0:	dd800617 	ldw	r22,24(sp)
   85ce4:	dd400517 	ldw	r21,20(sp)
   85ce8:	dd000417 	ldw	r20,16(sp)
   85cec:	dcc00317 	ldw	r19,12(sp)
   85cf0:	dc800217 	ldw	r18,8(sp)
   85cf4:	dc400117 	ldw	r17,4(sp)
   85cf8:	dc000017 	ldw	r16,0(sp)
   85cfc:	dec00804 	addi	sp,sp,32
   85d00:	f800283a 	ret
   85d04:	002d883a 	mov	r22,zero
   85d08:	003ff206 	br	85cd4 <_fwalk+0x80>

00085d0c <_fwrite_r>:
   85d0c:	defff604 	addi	sp,sp,-40
   85d10:	dc000515 	stw	r16,20(sp)
   85d14:	d9400015 	stw	r5,0(sp)
   85d18:	2021883a 	mov	r16,r4
   85d1c:	300b883a 	mov	r5,r6
   85d20:	3809883a 	mov	r4,r7
   85d24:	dcc00815 	stw	r19,32(sp)
   85d28:	dc800715 	stw	r18,28(sp)
   85d2c:	dc400615 	stw	r17,24(sp)
   85d30:	dfc00915 	stw	ra,36(sp)
   85d34:	3825883a 	mov	r18,r7
   85d38:	3027883a 	mov	r19,r6
   85d3c:	00843d00 	call	843d0 <__mulsi3>
   85d40:	1023883a 	mov	r17,r2
   85d44:	00800044 	movi	r2,1
   85d48:	d8800315 	stw	r2,12(sp)
   85d4c:	dc400115 	stw	r17,4(sp)
   85d50:	dc400415 	stw	r17,16(sp)
   85d54:	dec00215 	stw	sp,8(sp)
   85d58:	80000326 	beq	r16,zero,85d68 <_fwrite_r+0x5c>
   85d5c:	80800e17 	ldw	r2,56(r16)
   85d60:	8009883a 	mov	r4,r16
   85d64:	10001226 	beq	r2,zero,85db0 <_fwrite_r+0xa4>
   85d68:	d9400a17 	ldw	r5,40(sp)
   85d6c:	8009883a 	mov	r4,r16
   85d70:	d9800204 	addi	r6,sp,8
   85d74:	008a7140 	call	8a714 <__sfvwrite_r>
   85d78:	980b883a 	mov	r5,r19
   85d7c:	10000426 	beq	r2,zero,85d90 <_fwrite_r+0x84>
   85d80:	d9000417 	ldw	r4,16(sp)
   85d84:	8909c83a 	sub	r4,r17,r4
   85d88:	00843c00 	call	843c0 <__udivsi3>
   85d8c:	1025883a 	mov	r18,r2
   85d90:	9005883a 	mov	r2,r18
   85d94:	dfc00917 	ldw	ra,36(sp)
   85d98:	dcc00817 	ldw	r19,32(sp)
   85d9c:	dc800717 	ldw	r18,28(sp)
   85da0:	dc400617 	ldw	r17,24(sp)
   85da4:	dc000517 	ldw	r16,20(sp)
   85da8:	dec00a04 	addi	sp,sp,40
   85dac:	f800283a 	ret
   85db0:	0084e7c0 	call	84e7c <__sinit>
   85db4:	003fec06 	br	85d68 <_fwrite_r+0x5c>

00085db8 <fwrite>:
   85db8:	00800274 	movhi	r2,9
   85dbc:	10932d04 	addi	r2,r2,19636
   85dc0:	2017883a 	mov	r11,r4
   85dc4:	11000017 	ldw	r4,0(r2)
   85dc8:	defffe04 	addi	sp,sp,-8
   85dcc:	3013883a 	mov	r9,r6
   85dd0:	2805883a 	mov	r2,r5
   85dd4:	d9c00015 	stw	r7,0(sp)
   85dd8:	580b883a 	mov	r5,r11
   85ddc:	100d883a 	mov	r6,r2
   85de0:	480f883a 	mov	r7,r9
   85de4:	dfc00115 	stw	ra,4(sp)
   85de8:	0085d0c0 	call	85d0c <_fwrite_r>
   85dec:	dfc00117 	ldw	ra,4(sp)
   85df0:	dec00204 	addi	sp,sp,8
   85df4:	f800283a 	ret

00085df8 <__smakebuf_r>:
   85df8:	2880030b 	ldhu	r2,12(r5)
   85dfc:	deffed04 	addi	sp,sp,-76
   85e00:	dc401015 	stw	r17,64(sp)
   85e04:	1080008c 	andi	r2,r2,2
   85e08:	dc000f15 	stw	r16,60(sp)
   85e0c:	dfc01215 	stw	ra,72(sp)
   85e10:	dc801115 	stw	r18,68(sp)
   85e14:	2821883a 	mov	r16,r5
   85e18:	2023883a 	mov	r17,r4
   85e1c:	10000b26 	beq	r2,zero,85e4c <__smakebuf_r+0x54>
   85e20:	28c010c4 	addi	r3,r5,67
   85e24:	00800044 	movi	r2,1
   85e28:	28800515 	stw	r2,20(r5)
   85e2c:	28c00415 	stw	r3,16(r5)
   85e30:	28c00015 	stw	r3,0(r5)
   85e34:	dfc01217 	ldw	ra,72(sp)
   85e38:	dc801117 	ldw	r18,68(sp)
   85e3c:	dc401017 	ldw	r17,64(sp)
   85e40:	dc000f17 	ldw	r16,60(sp)
   85e44:	dec01304 	addi	sp,sp,76
   85e48:	f800283a 	ret
   85e4c:	2940038f 	ldh	r5,14(r5)
   85e50:	28002116 	blt	r5,zero,85ed8 <__smakebuf_r+0xe0>
   85e54:	d80d883a 	mov	r6,sp
   85e58:	0085b180 	call	85b18 <_fstat_r>
   85e5c:	10001e16 	blt	r2,zero,85ed8 <__smakebuf_r+0xe0>
   85e60:	d8800117 	ldw	r2,4(sp)
   85e64:	00e00014 	movui	r3,32768
   85e68:	113c000c 	andi	r4,r2,61440
   85e6c:	20c03126 	beq	r4,r3,85f34 <__smakebuf_r+0x13c>
   85e70:	8080030b 	ldhu	r2,12(r16)
   85e74:	00c80004 	movi	r3,8192
   85e78:	10820014 	ori	r2,r2,2048
   85e7c:	8080030d 	sth	r2,12(r16)
   85e80:	20c01e26 	beq	r4,r3,85efc <__smakebuf_r+0x104>
   85e84:	04810004 	movi	r18,1024
   85e88:	8809883a 	mov	r4,r17
   85e8c:	900b883a 	mov	r5,r18
   85e90:	0085f8c0 	call	85f8c <_malloc_r>
   85e94:	1009883a 	mov	r4,r2
   85e98:	10003126 	beq	r2,zero,85f60 <__smakebuf_r+0x168>
   85e9c:	80c0030b 	ldhu	r3,12(r16)
   85ea0:	00800234 	movhi	r2,8
   85ea4:	1093d804 	addi	r2,r2,20320
   85ea8:	88800f15 	stw	r2,60(r17)
   85eac:	18c02014 	ori	r3,r3,128
   85eb0:	84800515 	stw	r18,20(r16)
   85eb4:	80c0030d 	sth	r3,12(r16)
   85eb8:	81000415 	stw	r4,16(r16)
   85ebc:	81000015 	stw	r4,0(r16)
   85ec0:	dfc01217 	ldw	ra,72(sp)
   85ec4:	dc801117 	ldw	r18,68(sp)
   85ec8:	dc401017 	ldw	r17,64(sp)
   85ecc:	dc000f17 	ldw	r16,60(sp)
   85ed0:	dec01304 	addi	sp,sp,76
   85ed4:	f800283a 	ret
   85ed8:	80c0030b 	ldhu	r3,12(r16)
   85edc:	1880200c 	andi	r2,r3,128
   85ee0:	10000426 	beq	r2,zero,85ef4 <__smakebuf_r+0xfc>
   85ee4:	04801004 	movi	r18,64
   85ee8:	18820014 	ori	r2,r3,2048
   85eec:	8080030d 	sth	r2,12(r16)
   85ef0:	003fe506 	br	85e88 <__smakebuf_r+0x90>
   85ef4:	04810004 	movi	r18,1024
   85ef8:	003ffb06 	br	85ee8 <__smakebuf_r+0xf0>
   85efc:	8140038f 	ldh	r5,14(r16)
   85f00:	8809883a 	mov	r4,r17
   85f04:	008abb00 	call	8abb0 <_isatty_r>
   85f08:	103fde26 	beq	r2,zero,85e84 <__smakebuf_r+0x8c>
   85f0c:	8080030b 	ldhu	r2,12(r16)
   85f10:	80c010c4 	addi	r3,r16,67
   85f14:	04810004 	movi	r18,1024
   85f18:	10800054 	ori	r2,r2,1
   85f1c:	8080030d 	sth	r2,12(r16)
   85f20:	00800044 	movi	r2,1
   85f24:	80c00415 	stw	r3,16(r16)
   85f28:	80800515 	stw	r2,20(r16)
   85f2c:	80c00015 	stw	r3,0(r16)
   85f30:	003fd506 	br	85e88 <__smakebuf_r+0x90>
   85f34:	80c00a17 	ldw	r3,40(r16)
   85f38:	00800234 	movhi	r2,8
   85f3c:	109ad804 	addi	r2,r2,27488
   85f40:	18bfcb1e 	bne	r3,r2,85e70 <__smakebuf_r+0x78>
   85f44:	8080030b 	ldhu	r2,12(r16)
   85f48:	00c10004 	movi	r3,1024
   85f4c:	1825883a 	mov	r18,r3
   85f50:	10c4b03a 	or	r2,r2,r3
   85f54:	8080030d 	sth	r2,12(r16)
   85f58:	80c01315 	stw	r3,76(r16)
   85f5c:	003fca06 	br	85e88 <__smakebuf_r+0x90>
   85f60:	8100030b 	ldhu	r4,12(r16)
   85f64:	2080800c 	andi	r2,r4,512
   85f68:	103fb21e 	bne	r2,zero,85e34 <__smakebuf_r+0x3c>
   85f6c:	80c010c4 	addi	r3,r16,67
   85f70:	21000094 	ori	r4,r4,2
   85f74:	00800044 	movi	r2,1
   85f78:	80800515 	stw	r2,20(r16)
   85f7c:	8100030d 	sth	r4,12(r16)
   85f80:	80c00415 	stw	r3,16(r16)
   85f84:	80c00015 	stw	r3,0(r16)
   85f88:	003faa06 	br	85e34 <__smakebuf_r+0x3c>

00085f8c <_malloc_r>:
   85f8c:	defff604 	addi	sp,sp,-40
   85f90:	28c002c4 	addi	r3,r5,11
   85f94:	00800584 	movi	r2,22
   85f98:	dc800215 	stw	r18,8(sp)
   85f9c:	dfc00915 	stw	ra,36(sp)
   85fa0:	df000815 	stw	fp,32(sp)
   85fa4:	ddc00715 	stw	r23,28(sp)
   85fa8:	dd800615 	stw	r22,24(sp)
   85fac:	dd400515 	stw	r21,20(sp)
   85fb0:	dd000415 	stw	r20,16(sp)
   85fb4:	dcc00315 	stw	r19,12(sp)
   85fb8:	dc400115 	stw	r17,4(sp)
   85fbc:	dc000015 	stw	r16,0(sp)
   85fc0:	2025883a 	mov	r18,r4
   85fc4:	10c01236 	bltu	r2,r3,86010 <_malloc_r+0x84>
   85fc8:	04400404 	movi	r17,16
   85fcc:	8940142e 	bgeu	r17,r5,86020 <_malloc_r+0x94>
   85fd0:	00800304 	movi	r2,12
   85fd4:	0007883a 	mov	r3,zero
   85fd8:	90800015 	stw	r2,0(r18)
   85fdc:	1805883a 	mov	r2,r3
   85fe0:	dfc00917 	ldw	ra,36(sp)
   85fe4:	df000817 	ldw	fp,32(sp)
   85fe8:	ddc00717 	ldw	r23,28(sp)
   85fec:	dd800617 	ldw	r22,24(sp)
   85ff0:	dd400517 	ldw	r21,20(sp)
   85ff4:	dd000417 	ldw	r20,16(sp)
   85ff8:	dcc00317 	ldw	r19,12(sp)
   85ffc:	dc800217 	ldw	r18,8(sp)
   86000:	dc400117 	ldw	r17,4(sp)
   86004:	dc000017 	ldw	r16,0(sp)
   86008:	dec00a04 	addi	sp,sp,40
   8600c:	f800283a 	ret
   86010:	00bffe04 	movi	r2,-8
   86014:	18a2703a 	and	r17,r3,r2
   86018:	883fed16 	blt	r17,zero,85fd0 <_malloc_r+0x44>
   8601c:	897fec36 	bltu	r17,r5,85fd0 <_malloc_r+0x44>
   86020:	9009883a 	mov	r4,r18
   86024:	008deb00 	call	8deb0 <__malloc_lock>
   86028:	00807dc4 	movi	r2,503
   8602c:	14402b2e 	bgeu	r2,r17,860dc <_malloc_r+0x150>
   86030:	8806d27a 	srli	r3,r17,9
   86034:	18003f1e 	bne	r3,zero,86134 <_malloc_r+0x1a8>
   86038:	880cd0fa 	srli	r6,r17,3
   8603c:	300490fa 	slli	r2,r6,3
   86040:	02c00274 	movhi	r11,9
   86044:	5acd4404 	addi	r11,r11,13584
   86048:	12cb883a 	add	r5,r2,r11
   8604c:	2c000317 	ldw	r16,12(r5)
   86050:	580f883a 	mov	r7,r11
   86054:	2c00041e 	bne	r5,r16,86068 <_malloc_r+0xdc>
   86058:	00000a06 	br	86084 <_malloc_r+0xf8>
   8605c:	1800860e 	bge	r3,zero,86278 <_malloc_r+0x2ec>
   86060:	84000317 	ldw	r16,12(r16)
   86064:	2c000726 	beq	r5,r16,86084 <_malloc_r+0xf8>
   86068:	80800117 	ldw	r2,4(r16)
   8606c:	00ffff04 	movi	r3,-4
   86070:	10c8703a 	and	r4,r2,r3
   86074:	2447c83a 	sub	r3,r4,r17
   86078:	008003c4 	movi	r2,15
   8607c:	10fff70e 	bge	r2,r3,8605c <_malloc_r+0xd0>
   86080:	31bfffc4 	addi	r6,r6,-1
   86084:	32400044 	addi	r9,r6,1
   86088:	02800274 	movhi	r10,9
   8608c:	528d4604 	addi	r10,r10,13592
   86090:	54000217 	ldw	r16,8(r10)
   86094:	8280a026 	beq	r16,r10,86318 <_malloc_r+0x38c>
   86098:	80800117 	ldw	r2,4(r16)
   8609c:	00ffff04 	movi	r3,-4
   860a0:	10ca703a 	and	r5,r2,r3
   860a4:	2c4dc83a 	sub	r6,r5,r17
   860a8:	008003c4 	movi	r2,15
   860ac:	11808316 	blt	r2,r6,862bc <_malloc_r+0x330>
   860b0:	52800315 	stw	r10,12(r10)
   860b4:	52800215 	stw	r10,8(r10)
   860b8:	30002916 	blt	r6,zero,86160 <_malloc_r+0x1d4>
   860bc:	8147883a 	add	r3,r16,r5
   860c0:	18800117 	ldw	r2,4(r3)
   860c4:	9009883a 	mov	r4,r18
   860c8:	10800054 	ori	r2,r2,1
   860cc:	18800115 	stw	r2,4(r3)
   860d0:	008ded00 	call	8ded0 <__malloc_unlock>
   860d4:	80c00204 	addi	r3,r16,8
   860d8:	003fc006 	br	85fdc <_malloc_r+0x50>
   860dc:	02c00274 	movhi	r11,9
   860e0:	5acd4404 	addi	r11,r11,13584
   860e4:	8ac5883a 	add	r2,r17,r11
   860e8:	14000317 	ldw	r16,12(r2)
   860ec:	580f883a 	mov	r7,r11
   860f0:	8806d0fa 	srli	r3,r17,3
   860f4:	14006c26 	beq	r2,r16,862a8 <_malloc_r+0x31c>
   860f8:	80c00117 	ldw	r3,4(r16)
   860fc:	00bfff04 	movi	r2,-4
   86100:	81800317 	ldw	r6,12(r16)
   86104:	1886703a 	and	r3,r3,r2
   86108:	80c7883a 	add	r3,r16,r3
   8610c:	18800117 	ldw	r2,4(r3)
   86110:	81400217 	ldw	r5,8(r16)
   86114:	9009883a 	mov	r4,r18
   86118:	10800054 	ori	r2,r2,1
   8611c:	18800115 	stw	r2,4(r3)
   86120:	31400215 	stw	r5,8(r6)
   86124:	29800315 	stw	r6,12(r5)
   86128:	008ded00 	call	8ded0 <__malloc_unlock>
   8612c:	80c00204 	addi	r3,r16,8
   86130:	003faa06 	br	85fdc <_malloc_r+0x50>
   86134:	00800104 	movi	r2,4
   86138:	10c0052e 	bgeu	r2,r3,86150 <_malloc_r+0x1c4>
   8613c:	00800504 	movi	r2,20
   86140:	10c07836 	bltu	r2,r3,86324 <_malloc_r+0x398>
   86144:	198016c4 	addi	r6,r3,91
   86148:	300490fa 	slli	r2,r6,3
   8614c:	003fbc06 	br	86040 <_malloc_r+0xb4>
   86150:	8804d1ba 	srli	r2,r17,6
   86154:	11800e04 	addi	r6,r2,56
   86158:	300490fa 	slli	r2,r6,3
   8615c:	003fb806 	br	86040 <_malloc_r+0xb4>
   86160:	00807fc4 	movi	r2,511
   86164:	1140bb36 	bltu	r2,r5,86454 <_malloc_r+0x4c8>
   86168:	2806d0fa 	srli	r3,r5,3
   8616c:	573ffe04 	addi	fp,r10,-8
   86170:	00800044 	movi	r2,1
   86174:	180890fa 	slli	r4,r3,3
   86178:	1807d0ba 	srai	r3,r3,2
   8617c:	e1c00117 	ldw	r7,4(fp)
   86180:	5909883a 	add	r4,r11,r4
   86184:	21400217 	ldw	r5,8(r4)
   86188:	10c4983a 	sll	r2,r2,r3
   8618c:	81000315 	stw	r4,12(r16)
   86190:	81400215 	stw	r5,8(r16)
   86194:	388eb03a 	or	r7,r7,r2
   86198:	2c000315 	stw	r16,12(r5)
   8619c:	24000215 	stw	r16,8(r4)
   861a0:	e1c00115 	stw	r7,4(fp)
   861a4:	4807883a 	mov	r3,r9
   861a8:	4800cd16 	blt	r9,zero,864e0 <_malloc_r+0x554>
   861ac:	1807d0ba 	srai	r3,r3,2
   861b0:	00800044 	movi	r2,1
   861b4:	10c8983a 	sll	r4,r2,r3
   861b8:	39004436 	bltu	r7,r4,862cc <_malloc_r+0x340>
   861bc:	21c4703a 	and	r2,r4,r7
   861c0:	10000a1e 	bne	r2,zero,861ec <_malloc_r+0x260>
   861c4:	2109883a 	add	r4,r4,r4
   861c8:	00bfff04 	movi	r2,-4
   861cc:	4884703a 	and	r2,r9,r2
   861d0:	3906703a 	and	r3,r7,r4
   861d4:	12400104 	addi	r9,r2,4
   861d8:	1800041e 	bne	r3,zero,861ec <_malloc_r+0x260>
   861dc:	2109883a 	add	r4,r4,r4
   861e0:	3904703a 	and	r2,r7,r4
   861e4:	4a400104 	addi	r9,r9,4
   861e8:	103ffc26 	beq	r2,zero,861dc <_malloc_r+0x250>
   861ec:	480490fa 	slli	r2,r9,3
   861f0:	4819883a 	mov	r12,r9
   861f4:	023fff04 	movi	r8,-4
   861f8:	589b883a 	add	r13,r11,r2
   861fc:	6807883a 	mov	r3,r13
   86200:	014003c4 	movi	r5,15
   86204:	1c000317 	ldw	r16,12(r3)
   86208:	1c00041e 	bne	r3,r16,8621c <_malloc_r+0x290>
   8620c:	0000a706 	br	864ac <_malloc_r+0x520>
   86210:	3000ab0e 	bge	r6,zero,864c0 <_malloc_r+0x534>
   86214:	84000317 	ldw	r16,12(r16)
   86218:	1c00a426 	beq	r3,r16,864ac <_malloc_r+0x520>
   8621c:	80800117 	ldw	r2,4(r16)
   86220:	1204703a 	and	r2,r2,r8
   86224:	144dc83a 	sub	r6,r2,r17
   86228:	29bff90e 	bge	r5,r6,86210 <_malloc_r+0x284>
   8622c:	81000317 	ldw	r4,12(r16)
   86230:	80c00217 	ldw	r3,8(r16)
   86234:	89400054 	ori	r5,r17,1
   86238:	8445883a 	add	r2,r16,r17
   8623c:	20c00215 	stw	r3,8(r4)
   86240:	19000315 	stw	r4,12(r3)
   86244:	81400115 	stw	r5,4(r16)
   86248:	1187883a 	add	r3,r2,r6
   8624c:	31000054 	ori	r4,r6,1
   86250:	50800315 	stw	r2,12(r10)
   86254:	50800215 	stw	r2,8(r10)
   86258:	19800015 	stw	r6,0(r3)
   8625c:	11000115 	stw	r4,4(r2)
   86260:	12800215 	stw	r10,8(r2)
   86264:	12800315 	stw	r10,12(r2)
   86268:	9009883a 	mov	r4,r18
   8626c:	008ded00 	call	8ded0 <__malloc_unlock>
   86270:	80c00204 	addi	r3,r16,8
   86274:	003f5906 	br	85fdc <_malloc_r+0x50>
   86278:	8109883a 	add	r4,r16,r4
   8627c:	20800117 	ldw	r2,4(r4)
   86280:	80c00217 	ldw	r3,8(r16)
   86284:	81400317 	ldw	r5,12(r16)
   86288:	10800054 	ori	r2,r2,1
   8628c:	20800115 	stw	r2,4(r4)
   86290:	28c00215 	stw	r3,8(r5)
   86294:	19400315 	stw	r5,12(r3)
   86298:	9009883a 	mov	r4,r18
   8629c:	008ded00 	call	8ded0 <__malloc_unlock>
   862a0:	80c00204 	addi	r3,r16,8
   862a4:	003f4d06 	br	85fdc <_malloc_r+0x50>
   862a8:	80800204 	addi	r2,r16,8
   862ac:	14000317 	ldw	r16,12(r2)
   862b0:	143f911e 	bne	r2,r16,860f8 <_malloc_r+0x16c>
   862b4:	1a400084 	addi	r9,r3,2
   862b8:	003f7306 	br	86088 <_malloc_r+0xfc>
   862bc:	88c00054 	ori	r3,r17,1
   862c0:	8445883a 	add	r2,r16,r17
   862c4:	80c00115 	stw	r3,4(r16)
   862c8:	003fdf06 	br	86248 <_malloc_r+0x2bc>
   862cc:	e4000217 	ldw	r16,8(fp)
   862d0:	00bfff04 	movi	r2,-4
   862d4:	80c00117 	ldw	r3,4(r16)
   862d8:	802d883a 	mov	r22,r16
   862dc:	18aa703a 	and	r21,r3,r2
   862e0:	ac401636 	bltu	r21,r17,8633c <_malloc_r+0x3b0>
   862e4:	ac49c83a 	sub	r4,r21,r17
   862e8:	008003c4 	movi	r2,15
   862ec:	1100130e 	bge	r2,r4,8633c <_malloc_r+0x3b0>
   862f0:	88800054 	ori	r2,r17,1
   862f4:	8447883a 	add	r3,r16,r17
   862f8:	80800115 	stw	r2,4(r16)
   862fc:	20800054 	ori	r2,r4,1
   86300:	18800115 	stw	r2,4(r3)
   86304:	e0c00215 	stw	r3,8(fp)
   86308:	9009883a 	mov	r4,r18
   8630c:	008ded00 	call	8ded0 <__malloc_unlock>
   86310:	80c00204 	addi	r3,r16,8
   86314:	003f3106 	br	85fdc <_malloc_r+0x50>
   86318:	39c00117 	ldw	r7,4(r7)
   8631c:	573ffe04 	addi	fp,r10,-8
   86320:	003fa006 	br	861a4 <_malloc_r+0x218>
   86324:	00801504 	movi	r2,84
   86328:	10c06736 	bltu	r2,r3,864c8 <_malloc_r+0x53c>
   8632c:	8804d33a 	srli	r2,r17,12
   86330:	11801b84 	addi	r6,r2,110
   86334:	300490fa 	slli	r2,r6,3
   86338:	003f4106 	br	86040 <_malloc_r+0xb4>
   8633c:	d0a70e17 	ldw	r2,-25544(gp)
   86340:	d0e00317 	ldw	r3,-32756(gp)
   86344:	053fffc4 	movi	r20,-1
   86348:	10800404 	addi	r2,r2,16
   8634c:	88a7883a 	add	r19,r17,r2
   86350:	1d000326 	beq	r3,r20,86360 <_malloc_r+0x3d4>
   86354:	98c3ffc4 	addi	r3,r19,4095
   86358:	00bc0004 	movi	r2,-4096
   8635c:	18a6703a 	and	r19,r3,r2
   86360:	9009883a 	mov	r4,r18
   86364:	980b883a 	mov	r5,r19
   86368:	0086ae80 	call	86ae8 <_sbrk_r>
   8636c:	1009883a 	mov	r4,r2
   86370:	15000426 	beq	r2,r20,86384 <_malloc_r+0x3f8>
   86374:	854b883a 	add	r5,r16,r21
   86378:	1029883a 	mov	r20,r2
   8637c:	11405a2e 	bgeu	r2,r5,864e8 <_malloc_r+0x55c>
   86380:	87000c26 	beq	r16,fp,863b4 <_malloc_r+0x428>
   86384:	e4000217 	ldw	r16,8(fp)
   86388:	80c00117 	ldw	r3,4(r16)
   8638c:	00bfff04 	movi	r2,-4
   86390:	1884703a 	and	r2,r3,r2
   86394:	14400336 	bltu	r2,r17,863a4 <_malloc_r+0x418>
   86398:	1449c83a 	sub	r4,r2,r17
   8639c:	008003c4 	movi	r2,15
   863a0:	113fd316 	blt	r2,r4,862f0 <_malloc_r+0x364>
   863a4:	9009883a 	mov	r4,r18
   863a8:	008ded00 	call	8ded0 <__malloc_unlock>
   863ac:	0007883a 	mov	r3,zero
   863b0:	003f0a06 	br	85fdc <_malloc_r+0x50>
   863b4:	05c00274 	movhi	r23,9
   863b8:	bdda4904 	addi	r23,r23,26916
   863bc:	b8800017 	ldw	r2,0(r23)
   863c0:	988d883a 	add	r6,r19,r2
   863c4:	b9800015 	stw	r6,0(r23)
   863c8:	d0e00317 	ldw	r3,-32756(gp)
   863cc:	00bfffc4 	movi	r2,-1
   863d0:	18808e26 	beq	r3,r2,8660c <_malloc_r+0x680>
   863d4:	2145c83a 	sub	r2,r4,r5
   863d8:	3085883a 	add	r2,r6,r2
   863dc:	b8800015 	stw	r2,0(r23)
   863e0:	20c001cc 	andi	r3,r4,7
   863e4:	18005f1e 	bne	r3,zero,86564 <_malloc_r+0x5d8>
   863e8:	000b883a 	mov	r5,zero
   863ec:	a4c5883a 	add	r2,r20,r19
   863f0:	1083ffcc 	andi	r2,r2,4095
   863f4:	00c40004 	movi	r3,4096
   863f8:	1887c83a 	sub	r3,r3,r2
   863fc:	28e7883a 	add	r19,r5,r3
   86400:	9009883a 	mov	r4,r18
   86404:	980b883a 	mov	r5,r19
   86408:	0086ae80 	call	86ae8 <_sbrk_r>
   8640c:	1007883a 	mov	r3,r2
   86410:	00bfffc4 	movi	r2,-1
   86414:	18807a26 	beq	r3,r2,86600 <_malloc_r+0x674>
   86418:	1d05c83a 	sub	r2,r3,r20
   8641c:	9885883a 	add	r2,r19,r2
   86420:	10c00054 	ori	r3,r2,1
   86424:	b8800017 	ldw	r2,0(r23)
   86428:	a021883a 	mov	r16,r20
   8642c:	a0c00115 	stw	r3,4(r20)
   86430:	9885883a 	add	r2,r19,r2
   86434:	b8800015 	stw	r2,0(r23)
   86438:	e5000215 	stw	r20,8(fp)
   8643c:	b7003626 	beq	r22,fp,86518 <_malloc_r+0x58c>
   86440:	018003c4 	movi	r6,15
   86444:	35404b36 	bltu	r6,r21,86574 <_malloc_r+0x5e8>
   86448:	00800044 	movi	r2,1
   8644c:	a0800115 	stw	r2,4(r20)
   86450:	003fcd06 	br	86388 <_malloc_r+0x3fc>
   86454:	2808d27a 	srli	r4,r5,9
   86458:	2000371e 	bne	r4,zero,86538 <_malloc_r+0x5ac>
   8645c:	2808d0fa 	srli	r4,r5,3
   86460:	200690fa 	slli	r3,r4,3
   86464:	1ad1883a 	add	r8,r3,r11
   86468:	41800217 	ldw	r6,8(r8)
   8646c:	41805b26 	beq	r8,r6,865dc <_malloc_r+0x650>
   86470:	30800117 	ldw	r2,4(r6)
   86474:	00ffff04 	movi	r3,-4
   86478:	10c4703a 	and	r2,r2,r3
   8647c:	2880022e 	bgeu	r5,r2,86488 <_malloc_r+0x4fc>
   86480:	31800217 	ldw	r6,8(r6)
   86484:	41bffa1e 	bne	r8,r6,86470 <_malloc_r+0x4e4>
   86488:	32000317 	ldw	r8,12(r6)
   8648c:	39c00117 	ldw	r7,4(r7)
   86490:	82000315 	stw	r8,12(r16)
   86494:	81800215 	stw	r6,8(r16)
   86498:	07000274 	movhi	fp,9
   8649c:	e70d4404 	addi	fp,fp,13584
   864a0:	34000315 	stw	r16,12(r6)
   864a4:	44000215 	stw	r16,8(r8)
   864a8:	003f3e06 	br	861a4 <_malloc_r+0x218>
   864ac:	63000044 	addi	r12,r12,1
   864b0:	608000cc 	andi	r2,r12,3
   864b4:	10005d26 	beq	r2,zero,8662c <_malloc_r+0x6a0>
   864b8:	18c00204 	addi	r3,r3,8
   864bc:	003f5106 	br	86204 <_malloc_r+0x278>
   864c0:	8089883a 	add	r4,r16,r2
   864c4:	003f6d06 	br	8627c <_malloc_r+0x2f0>
   864c8:	00805504 	movi	r2,340
   864cc:	10c02036 	bltu	r2,r3,86550 <_malloc_r+0x5c4>
   864d0:	8804d3fa 	srli	r2,r17,15
   864d4:	11801dc4 	addi	r6,r2,119
   864d8:	300490fa 	slli	r2,r6,3
   864dc:	003ed806 	br	86040 <_malloc_r+0xb4>
   864e0:	48c000c4 	addi	r3,r9,3
   864e4:	003f3106 	br	861ac <_malloc_r+0x220>
   864e8:	05c00274 	movhi	r23,9
   864ec:	bdda4904 	addi	r23,r23,26916
   864f0:	b8800017 	ldw	r2,0(r23)
   864f4:	988d883a 	add	r6,r19,r2
   864f8:	b9800015 	stw	r6,0(r23)
   864fc:	293fb21e 	bne	r5,r4,863c8 <_malloc_r+0x43c>
   86500:	2083ffcc 	andi	r2,r4,4095
   86504:	103fb01e 	bne	r2,zero,863c8 <_malloc_r+0x43c>
   86508:	e4000217 	ldw	r16,8(fp)
   8650c:	9d45883a 	add	r2,r19,r21
   86510:	10800054 	ori	r2,r2,1
   86514:	80800115 	stw	r2,4(r16)
   86518:	b8c00017 	ldw	r3,0(r23)
   8651c:	d0a70f17 	ldw	r2,-25540(gp)
   86520:	10c0012e 	bgeu	r2,r3,86528 <_malloc_r+0x59c>
   86524:	d0e70f15 	stw	r3,-25540(gp)
   86528:	d0a71017 	ldw	r2,-25536(gp)
   8652c:	10ff962e 	bgeu	r2,r3,86388 <_malloc_r+0x3fc>
   86530:	d0e71015 	stw	r3,-25536(gp)
   86534:	003f9406 	br	86388 <_malloc_r+0x3fc>
   86538:	00800104 	movi	r2,4
   8653c:	11001e36 	bltu	r2,r4,865b8 <_malloc_r+0x62c>
   86540:	2804d1ba 	srli	r2,r5,6
   86544:	11000e04 	addi	r4,r2,56
   86548:	200690fa 	slli	r3,r4,3
   8654c:	003fc506 	br	86464 <_malloc_r+0x4d8>
   86550:	00815504 	movi	r2,1364
   86554:	10c01d2e 	bgeu	r2,r3,865cc <_malloc_r+0x640>
   86558:	01801f84 	movi	r6,126
   8655c:	0080fc04 	movi	r2,1008
   86560:	003eb706 	br	86040 <_malloc_r+0xb4>
   86564:	00800204 	movi	r2,8
   86568:	10cbc83a 	sub	r5,r2,r3
   8656c:	2169883a 	add	r20,r4,r5
   86570:	003f9e06 	br	863ec <_malloc_r+0x460>
   86574:	00bffe04 	movi	r2,-8
   86578:	a93ffd04 	addi	r4,r21,-12
   8657c:	2088703a 	and	r4,r4,r2
   86580:	b10b883a 	add	r5,r22,r4
   86584:	00c00144 	movi	r3,5
   86588:	28c00215 	stw	r3,8(r5)
   8658c:	28c00115 	stw	r3,4(r5)
   86590:	b0800117 	ldw	r2,4(r22)
   86594:	1080004c 	andi	r2,r2,1
   86598:	2084b03a 	or	r2,r4,r2
   8659c:	b0800115 	stw	r2,4(r22)
   865a0:	313fdd2e 	bgeu	r6,r4,86518 <_malloc_r+0x58c>
   865a4:	b1400204 	addi	r5,r22,8
   865a8:	9009883a 	mov	r4,r18
   865ac:	00853a40 	call	853a4 <_free_r>
   865b0:	e4000217 	ldw	r16,8(fp)
   865b4:	003fd806 	br	86518 <_malloc_r+0x58c>
   865b8:	00800504 	movi	r2,20
   865bc:	11001536 	bltu	r2,r4,86614 <_malloc_r+0x688>
   865c0:	210016c4 	addi	r4,r4,91
   865c4:	200690fa 	slli	r3,r4,3
   865c8:	003fa606 	br	86464 <_malloc_r+0x4d8>
   865cc:	8804d4ba 	srli	r2,r17,18
   865d0:	11801f04 	addi	r6,r2,124
   865d4:	300490fa 	slli	r2,r6,3
   865d8:	003e9906 	br	86040 <_malloc_r+0xb4>
   865dc:	2009d0ba 	srai	r4,r4,2
   865e0:	01400274 	movhi	r5,9
   865e4:	294d4404 	addi	r5,r5,13584
   865e8:	00c00044 	movi	r3,1
   865ec:	28800117 	ldw	r2,4(r5)
   865f0:	1906983a 	sll	r3,r3,r4
   865f4:	10c4b03a 	or	r2,r2,r3
   865f8:	28800115 	stw	r2,4(r5)
   865fc:	003fa306 	br	8648c <_malloc_r+0x500>
   86600:	0027883a 	mov	r19,zero
   86604:	00c00044 	movi	r3,1
   86608:	003f8606 	br	86424 <_malloc_r+0x498>
   8660c:	d1200315 	stw	r4,-32756(gp)
   86610:	003f7306 	br	863e0 <_malloc_r+0x454>
   86614:	00801504 	movi	r2,84
   86618:	11001936 	bltu	r2,r4,86680 <_malloc_r+0x6f4>
   8661c:	2804d33a 	srli	r2,r5,12
   86620:	11001b84 	addi	r4,r2,110
   86624:	200690fa 	slli	r3,r4,3
   86628:	003f8e06 	br	86464 <_malloc_r+0x4d8>
   8662c:	480b883a 	mov	r5,r9
   86630:	6807883a 	mov	r3,r13
   86634:	288000cc 	andi	r2,r5,3
   86638:	18fffe04 	addi	r3,r3,-8
   8663c:	297fffc4 	addi	r5,r5,-1
   86640:	10001526 	beq	r2,zero,86698 <_malloc_r+0x70c>
   86644:	18800217 	ldw	r2,8(r3)
   86648:	10fffa26 	beq	r2,r3,86634 <_malloc_r+0x6a8>
   8664c:	2109883a 	add	r4,r4,r4
   86650:	393f1e36 	bltu	r7,r4,862cc <_malloc_r+0x340>
   86654:	203f1d26 	beq	r4,zero,862cc <_malloc_r+0x340>
   86658:	21c4703a 	and	r2,r4,r7
   8665c:	10000226 	beq	r2,zero,86668 <_malloc_r+0x6dc>
   86660:	6013883a 	mov	r9,r12
   86664:	003ee106 	br	861ec <_malloc_r+0x260>
   86668:	2109883a 	add	r4,r4,r4
   8666c:	3904703a 	and	r2,r7,r4
   86670:	63000104 	addi	r12,r12,4
   86674:	103ffc26 	beq	r2,zero,86668 <_malloc_r+0x6dc>
   86678:	6013883a 	mov	r9,r12
   8667c:	003edb06 	br	861ec <_malloc_r+0x260>
   86680:	00805504 	movi	r2,340
   86684:	11000836 	bltu	r2,r4,866a8 <_malloc_r+0x71c>
   86688:	2804d3fa 	srli	r2,r5,15
   8668c:	11001dc4 	addi	r4,r2,119
   86690:	200690fa 	slli	r3,r4,3
   86694:	003f7306 	br	86464 <_malloc_r+0x4d8>
   86698:	0104303a 	nor	r2,zero,r4
   8669c:	388e703a 	and	r7,r7,r2
   866a0:	e1c00115 	stw	r7,4(fp)
   866a4:	003fe906 	br	8664c <_malloc_r+0x6c0>
   866a8:	00815504 	movi	r2,1364
   866ac:	1100032e 	bgeu	r2,r4,866bc <_malloc_r+0x730>
   866b0:	01001f84 	movi	r4,126
   866b4:	00c0fc04 	movi	r3,1008
   866b8:	003f6a06 	br	86464 <_malloc_r+0x4d8>
   866bc:	2804d4ba 	srli	r2,r5,18
   866c0:	11001f04 	addi	r4,r2,124
   866c4:	200690fa 	slli	r3,r4,3
   866c8:	003f6606 	br	86464 <_malloc_r+0x4d8>

000866cc <memset>:
   866cc:	008000c4 	movi	r2,3
   866d0:	29403fcc 	andi	r5,r5,255
   866d4:	2007883a 	mov	r3,r4
   866d8:	1180022e 	bgeu	r2,r6,866e4 <memset+0x18>
   866dc:	2084703a 	and	r2,r4,r2
   866e0:	10000826 	beq	r2,zero,86704 <memset+0x38>
   866e4:	30000526 	beq	r6,zero,866fc <memset+0x30>
   866e8:	2805883a 	mov	r2,r5
   866ec:	30cd883a 	add	r6,r6,r3
   866f0:	18800005 	stb	r2,0(r3)
   866f4:	18c00044 	addi	r3,r3,1
   866f8:	19bffd1e 	bne	r3,r6,866f0 <memset+0x24>
   866fc:	2005883a 	mov	r2,r4
   86700:	f800283a 	ret
   86704:	2804923a 	slli	r2,r5,8
   86708:	020003c4 	movi	r8,15
   8670c:	200f883a 	mov	r7,r4
   86710:	2884b03a 	or	r2,r5,r2
   86714:	1006943a 	slli	r3,r2,16
   86718:	10c6b03a 	or	r3,r2,r3
   8671c:	41800a2e 	bgeu	r8,r6,86748 <memset+0x7c>
   86720:	4005883a 	mov	r2,r8
   86724:	31bffc04 	addi	r6,r6,-16
   86728:	38c00015 	stw	r3,0(r7)
   8672c:	38c00115 	stw	r3,4(r7)
   86730:	38c00215 	stw	r3,8(r7)
   86734:	38c00315 	stw	r3,12(r7)
   86738:	39c00404 	addi	r7,r7,16
   8673c:	11bff936 	bltu	r2,r6,86724 <memset+0x58>
   86740:	008000c4 	movi	r2,3
   86744:	1180052e 	bgeu	r2,r6,8675c <memset+0x90>
   86748:	31bfff04 	addi	r6,r6,-4
   8674c:	008000c4 	movi	r2,3
   86750:	38c00015 	stw	r3,0(r7)
   86754:	39c00104 	addi	r7,r7,4
   86758:	11bffb36 	bltu	r2,r6,86748 <memset+0x7c>
   8675c:	3807883a 	mov	r3,r7
   86760:	003fe006 	br	866e4 <memset+0x18>

00086764 <_open_r>:
   86764:	defffd04 	addi	sp,sp,-12
   86768:	dc000015 	stw	r16,0(sp)
   8676c:	04000274 	movhi	r16,9
   86770:	841a3a04 	addi	r16,r16,26856
   86774:	dc400115 	stw	r17,4(sp)
   86778:	80000015 	stw	zero,0(r16)
   8677c:	2023883a 	mov	r17,r4
   86780:	2809883a 	mov	r4,r5
   86784:	300b883a 	mov	r5,r6
   86788:	380d883a 	mov	r6,r7
   8678c:	dfc00215 	stw	ra,8(sp)
   86790:	008dfe80 	call	8dfe8 <open>
   86794:	1007883a 	mov	r3,r2
   86798:	00bfffc4 	movi	r2,-1
   8679c:	18800626 	beq	r3,r2,867b8 <_open_r+0x54>
   867a0:	1805883a 	mov	r2,r3
   867a4:	dfc00217 	ldw	ra,8(sp)
   867a8:	dc400117 	ldw	r17,4(sp)
   867ac:	dc000017 	ldw	r16,0(sp)
   867b0:	dec00304 	addi	sp,sp,12
   867b4:	f800283a 	ret
   867b8:	80800017 	ldw	r2,0(r16)
   867bc:	103ff826 	beq	r2,zero,867a0 <_open_r+0x3c>
   867c0:	88800015 	stw	r2,0(r17)
   867c4:	1805883a 	mov	r2,r3
   867c8:	dfc00217 	ldw	ra,8(sp)
   867cc:	dc400117 	ldw	r17,4(sp)
   867d0:	dc000017 	ldw	r16,0(sp)
   867d4:	dec00304 	addi	sp,sp,12
   867d8:	f800283a 	ret

000867dc <printf>:
   867dc:	defffb04 	addi	sp,sp,-20
   867e0:	dfc00115 	stw	ra,4(sp)
   867e4:	d9400215 	stw	r5,8(sp)
   867e8:	d9800315 	stw	r6,12(sp)
   867ec:	d9c00415 	stw	r7,16(sp)
   867f0:	00800274 	movhi	r2,9
   867f4:	10932d04 	addi	r2,r2,19636
   867f8:	10c00017 	ldw	r3,0(r2)
   867fc:	200b883a 	mov	r5,r4
   86800:	d8800204 	addi	r2,sp,8
   86804:	19000217 	ldw	r4,8(r3)
   86808:	100d883a 	mov	r6,r2
   8680c:	d8800015 	stw	r2,0(sp)
   86810:	0088c340 	call	88c34 <__vfprintf_internal>
   86814:	dfc00117 	ldw	ra,4(sp)
   86818:	dec00504 	addi	sp,sp,20
   8681c:	f800283a 	ret

00086820 <_printf_r>:
   86820:	defffc04 	addi	sp,sp,-16
   86824:	dfc00115 	stw	ra,4(sp)
   86828:	d9800215 	stw	r6,8(sp)
   8682c:	d9c00315 	stw	r7,12(sp)
   86830:	280d883a 	mov	r6,r5
   86834:	21400217 	ldw	r5,8(r4)
   86838:	d8c00204 	addi	r3,sp,8
   8683c:	180f883a 	mov	r7,r3
   86840:	d8c00015 	stw	r3,0(sp)
   86844:	0086d700 	call	86d70 <___vfprintf_internal_r>
   86848:	dfc00117 	ldw	ra,4(sp)
   8684c:	dec00404 	addi	sp,sp,16
   86850:	f800283a 	ret

00086854 <_puts_r>:
   86854:	defff604 	addi	sp,sp,-40
   86858:	dc400715 	stw	r17,28(sp)
   8685c:	2023883a 	mov	r17,r4
   86860:	2809883a 	mov	r4,r5
   86864:	dfc00915 	stw	ra,36(sp)
   86868:	dcc00815 	stw	r19,32(sp)
   8686c:	2827883a 	mov	r19,r5
   86870:	0086ca40 	call	86ca4 <strlen>
   86874:	89400217 	ldw	r5,8(r17)
   86878:	00c00274 	movhi	r3,9
   8687c:	18cb0904 	addi	r3,r3,11300
   86880:	01c00044 	movi	r7,1
   86884:	12000044 	addi	r8,r2,1
   86888:	d8c00515 	stw	r3,20(sp)
   8688c:	d9c00615 	stw	r7,24(sp)
   86890:	d8c00304 	addi	r3,sp,12
   86894:	01c00084 	movi	r7,2
   86898:	8809883a 	mov	r4,r17
   8689c:	d80d883a 	mov	r6,sp
   868a0:	d8c00015 	stw	r3,0(sp)
   868a4:	dcc00315 	stw	r19,12(sp)
   868a8:	da000215 	stw	r8,8(sp)
   868ac:	d9c00115 	stw	r7,4(sp)
   868b0:	d8800415 	stw	r2,16(sp)
   868b4:	008a7140 	call	8a714 <__sfvwrite_r>
   868b8:	00ffffc4 	movi	r3,-1
   868bc:	10000626 	beq	r2,zero,868d8 <_puts_r+0x84>
   868c0:	1805883a 	mov	r2,r3
   868c4:	dfc00917 	ldw	ra,36(sp)
   868c8:	dcc00817 	ldw	r19,32(sp)
   868cc:	dc400717 	ldw	r17,28(sp)
   868d0:	dec00a04 	addi	sp,sp,40
   868d4:	f800283a 	ret
   868d8:	00c00284 	movi	r3,10
   868dc:	1805883a 	mov	r2,r3
   868e0:	dfc00917 	ldw	ra,36(sp)
   868e4:	dcc00817 	ldw	r19,32(sp)
   868e8:	dc400717 	ldw	r17,28(sp)
   868ec:	dec00a04 	addi	sp,sp,40
   868f0:	f800283a 	ret

000868f4 <puts>:
   868f4:	00800274 	movhi	r2,9
   868f8:	10932d04 	addi	r2,r2,19636
   868fc:	200b883a 	mov	r5,r4
   86900:	11000017 	ldw	r4,0(r2)
   86904:	00868541 	jmpi	86854 <_puts_r>

00086908 <__srefill_r>:
   86908:	defffd04 	addi	sp,sp,-12
   8690c:	dc400115 	stw	r17,4(sp)
   86910:	dc000015 	stw	r16,0(sp)
   86914:	dfc00215 	stw	ra,8(sp)
   86918:	2023883a 	mov	r17,r4
   8691c:	2821883a 	mov	r16,r5
   86920:	20000226 	beq	r4,zero,8692c <__srefill_r+0x24>
   86924:	20800e17 	ldw	r2,56(r4)
   86928:	10004126 	beq	r2,zero,86a30 <__srefill_r+0x128>
   8692c:	80c0030b 	ldhu	r3,12(r16)
   86930:	80000115 	stw	zero,4(r16)
   86934:	1880080c 	andi	r2,r3,32
   86938:	1000361e 	bne	r2,zero,86a14 <__srefill_r+0x10c>
   8693c:	1880010c 	andi	r2,r3,4
   86940:	1000211e 	bne	r2,zero,869c8 <__srefill_r+0xc0>
   86944:	1880040c 	andi	r2,r3,16
   86948:	10005026 	beq	r2,zero,86a8c <__srefill_r+0x184>
   8694c:	1880020c 	andi	r2,r3,8
   86950:	1000541e 	bne	r2,zero,86aa4 <__srefill_r+0x19c>
   86954:	8080030b 	ldhu	r2,12(r16)
   86958:	10800114 	ori	r2,r2,4
   8695c:	8080030d 	sth	r2,12(r16)
   86960:	80800417 	ldw	r2,16(r16)
   86964:	10004526 	beq	r2,zero,86a7c <__srefill_r+0x174>
   86968:	8080030b 	ldhu	r2,12(r16)
   8696c:	108000cc 	andi	r2,r2,3
   86970:	1000361e 	bne	r2,zero,86a4c <__srefill_r+0x144>
   86974:	81800417 	ldw	r6,16(r16)
   86978:	80c00817 	ldw	r3,32(r16)
   8697c:	81400717 	ldw	r5,28(r16)
   86980:	81c00517 	ldw	r7,20(r16)
   86984:	8809883a 	mov	r4,r17
   86988:	81800015 	stw	r6,0(r16)
   8698c:	183ee83a 	callr	r3
   86990:	80c0030b 	ldhu	r3,12(r16)
   86994:	1009883a 	mov	r4,r2
   86998:	80800115 	stw	r2,4(r16)
   8699c:	00b7ffc4 	movi	r2,-8193
   869a0:	1884703a 	and	r2,r3,r2
   869a4:	8080030d 	sth	r2,12(r16)
   869a8:	0100230e 	bge	zero,r4,86a38 <__srefill_r+0x130>
   869ac:	0009883a 	mov	r4,zero
   869b0:	2005883a 	mov	r2,r4
   869b4:	dfc00217 	ldw	ra,8(sp)
   869b8:	dc400117 	ldw	r17,4(sp)
   869bc:	dc000017 	ldw	r16,0(sp)
   869c0:	dec00304 	addi	sp,sp,12
   869c4:	f800283a 	ret
   869c8:	81400c17 	ldw	r5,48(r16)
   869cc:	283fe426 	beq	r5,zero,86960 <__srefill_r+0x58>
   869d0:	80801004 	addi	r2,r16,64
   869d4:	28800226 	beq	r5,r2,869e0 <__srefill_r+0xd8>
   869d8:	8809883a 	mov	r4,r17
   869dc:	00853a40 	call	853a4 <_free_r>
   869e0:	80800f17 	ldw	r2,60(r16)
   869e4:	80000c15 	stw	zero,48(r16)
   869e8:	80800115 	stw	r2,4(r16)
   869ec:	103fdc26 	beq	r2,zero,86960 <__srefill_r+0x58>
   869f0:	80800e17 	ldw	r2,56(r16)
   869f4:	0009883a 	mov	r4,zero
   869f8:	80800015 	stw	r2,0(r16)
   869fc:	2005883a 	mov	r2,r4
   86a00:	dfc00217 	ldw	ra,8(sp)
   86a04:	dc400117 	ldw	r17,4(sp)
   86a08:	dc000017 	ldw	r16,0(sp)
   86a0c:	dec00304 	addi	sp,sp,12
   86a10:	f800283a 	ret
   86a14:	013fffc4 	movi	r4,-1
   86a18:	2005883a 	mov	r2,r4
   86a1c:	dfc00217 	ldw	ra,8(sp)
   86a20:	dc400117 	ldw	r17,4(sp)
   86a24:	dc000017 	ldw	r16,0(sp)
   86a28:	dec00304 	addi	sp,sp,12
   86a2c:	f800283a 	ret
   86a30:	0084e7c0 	call	84e7c <__sinit>
   86a34:	003fbd06 	br	8692c <__srefill_r+0x24>
   86a38:	20000b1e 	bne	r4,zero,86a68 <__srefill_r+0x160>
   86a3c:	10800814 	ori	r2,r2,32
   86a40:	013fffc4 	movi	r4,-1
   86a44:	8080030d 	sth	r2,12(r16)
   86a48:	003fd906 	br	869b0 <__srefill_r+0xa8>
   86a4c:	00800274 	movhi	r2,9
   86a50:	10932e04 	addi	r2,r2,19640
   86a54:	11000017 	ldw	r4,0(r2)
   86a58:	01400234 	movhi	r5,8
   86a5c:	295ab304 	addi	r5,r5,27340
   86a60:	0085c540 	call	85c54 <_fwalk>
   86a64:	003fc306 	br	86974 <__srefill_r+0x6c>
   86a68:	10801014 	ori	r2,r2,64
   86a6c:	013fffc4 	movi	r4,-1
   86a70:	8080030d 	sth	r2,12(r16)
   86a74:	80000115 	stw	zero,4(r16)
   86a78:	003fcd06 	br	869b0 <__srefill_r+0xa8>
   86a7c:	8809883a 	mov	r4,r17
   86a80:	800b883a 	mov	r5,r16
   86a84:	0085df80 	call	85df8 <__smakebuf_r>
   86a88:	003fb706 	br	86968 <__srefill_r+0x60>
   86a8c:	18c01014 	ori	r3,r3,64
   86a90:	00800244 	movi	r2,9
   86a94:	013fffc4 	movi	r4,-1
   86a98:	88800015 	stw	r2,0(r17)
   86a9c:	80c0030d 	sth	r3,12(r16)
   86aa0:	003fc306 	br	869b0 <__srefill_r+0xa8>
   86aa4:	8809883a 	mov	r4,r17
   86aa8:	800b883a 	mov	r5,r16
   86aac:	0084be40 	call	84be4 <_fflush_r>
   86ab0:	103fd81e 	bne	r2,zero,86a14 <__srefill_r+0x10c>
   86ab4:	8080030b 	ldhu	r2,12(r16)
   86ab8:	80000215 	stw	zero,8(r16)
   86abc:	80000615 	stw	zero,24(r16)
   86ac0:	10bffdcc 	andi	r2,r2,65527
   86ac4:	8080030d 	sth	r2,12(r16)
   86ac8:	003fa206 	br	86954 <__srefill_r+0x4c>

00086acc <lflush>:
   86acc:	20c0030b 	ldhu	r3,12(r4)
   86ad0:	01400244 	movi	r5,9
   86ad4:	0005883a 	mov	r2,zero
   86ad8:	18c0024c 	andi	r3,r3,9
   86adc:	19400126 	beq	r3,r5,86ae4 <lflush+0x18>
   86ae0:	f800283a 	ret
   86ae4:	0084de01 	jmpi	84de0 <fflush>

00086ae8 <_sbrk_r>:
   86ae8:	defffd04 	addi	sp,sp,-12
   86aec:	dc000015 	stw	r16,0(sp)
   86af0:	04000274 	movhi	r16,9
   86af4:	841a3a04 	addi	r16,r16,26856
   86af8:	dc400115 	stw	r17,4(sp)
   86afc:	80000015 	stw	zero,0(r16)
   86b00:	2023883a 	mov	r17,r4
   86b04:	2809883a 	mov	r4,r5
   86b08:	dfc00215 	stw	ra,8(sp)
   86b0c:	008e6680 	call	8e668 <sbrk>
   86b10:	1007883a 	mov	r3,r2
   86b14:	00bfffc4 	movi	r2,-1
   86b18:	18800626 	beq	r3,r2,86b34 <_sbrk_r+0x4c>
   86b1c:	1805883a 	mov	r2,r3
   86b20:	dfc00217 	ldw	ra,8(sp)
   86b24:	dc400117 	ldw	r17,4(sp)
   86b28:	dc000017 	ldw	r16,0(sp)
   86b2c:	dec00304 	addi	sp,sp,12
   86b30:	f800283a 	ret
   86b34:	80800017 	ldw	r2,0(r16)
   86b38:	103ff826 	beq	r2,zero,86b1c <_sbrk_r+0x34>
   86b3c:	88800015 	stw	r2,0(r17)
   86b40:	1805883a 	mov	r2,r3
   86b44:	dfc00217 	ldw	ra,8(sp)
   86b48:	dc400117 	ldw	r17,4(sp)
   86b4c:	dc000017 	ldw	r16,0(sp)
   86b50:	dec00304 	addi	sp,sp,12
   86b54:	f800283a 	ret

00086b58 <__sclose>:
   86b58:	2940038f 	ldh	r5,14(r5)
   86b5c:	0088e0c1 	jmpi	88e0c <_close_r>

00086b60 <__sseek>:
   86b60:	defffe04 	addi	sp,sp,-8
   86b64:	dc000015 	stw	r16,0(sp)
   86b68:	2821883a 	mov	r16,r5
   86b6c:	2940038f 	ldh	r5,14(r5)
   86b70:	dfc00115 	stw	ra,4(sp)
   86b74:	008ace40 	call	8ace4 <_lseek_r>
   86b78:	1007883a 	mov	r3,r2
   86b7c:	00bfffc4 	movi	r2,-1
   86b80:	18800926 	beq	r3,r2,86ba8 <__sseek+0x48>
   86b84:	8080030b 	ldhu	r2,12(r16)
   86b88:	80c01415 	stw	r3,80(r16)
   86b8c:	10840014 	ori	r2,r2,4096
   86b90:	8080030d 	sth	r2,12(r16)
   86b94:	1805883a 	mov	r2,r3
   86b98:	dfc00117 	ldw	ra,4(sp)
   86b9c:	dc000017 	ldw	r16,0(sp)
   86ba0:	dec00204 	addi	sp,sp,8
   86ba4:	f800283a 	ret
   86ba8:	8080030b 	ldhu	r2,12(r16)
   86bac:	10bbffcc 	andi	r2,r2,61439
   86bb0:	8080030d 	sth	r2,12(r16)
   86bb4:	1805883a 	mov	r2,r3
   86bb8:	dfc00117 	ldw	ra,4(sp)
   86bbc:	dc000017 	ldw	r16,0(sp)
   86bc0:	dec00204 	addi	sp,sp,8
   86bc4:	f800283a 	ret

00086bc8 <__swrite>:
   86bc8:	2880030b 	ldhu	r2,12(r5)
   86bcc:	defffb04 	addi	sp,sp,-20
   86bd0:	dcc00315 	stw	r19,12(sp)
   86bd4:	1080400c 	andi	r2,r2,256
   86bd8:	dc800215 	stw	r18,8(sp)
   86bdc:	dc400115 	stw	r17,4(sp)
   86be0:	dc000015 	stw	r16,0(sp)
   86be4:	3027883a 	mov	r19,r6
   86be8:	3825883a 	mov	r18,r7
   86bec:	dfc00415 	stw	ra,16(sp)
   86bf0:	2821883a 	mov	r16,r5
   86bf4:	000d883a 	mov	r6,zero
   86bf8:	01c00084 	movi	r7,2
   86bfc:	2023883a 	mov	r17,r4
   86c00:	10000226 	beq	r2,zero,86c0c <__swrite+0x44>
   86c04:	2940038f 	ldh	r5,14(r5)
   86c08:	008ace40 	call	8ace4 <_lseek_r>
   86c0c:	8080030b 	ldhu	r2,12(r16)
   86c10:	8140038f 	ldh	r5,14(r16)
   86c14:	8809883a 	mov	r4,r17
   86c18:	10bbffcc 	andi	r2,r2,61439
   86c1c:	980d883a 	mov	r6,r19
   86c20:	900f883a 	mov	r7,r18
   86c24:	8080030d 	sth	r2,12(r16)
   86c28:	dfc00417 	ldw	ra,16(sp)
   86c2c:	dcc00317 	ldw	r19,12(sp)
   86c30:	dc800217 	ldw	r18,8(sp)
   86c34:	dc400117 	ldw	r17,4(sp)
   86c38:	dc000017 	ldw	r16,0(sp)
   86c3c:	dec00504 	addi	sp,sp,20
   86c40:	0088c581 	jmpi	88c58 <_write_r>

00086c44 <__sread>:
   86c44:	defffe04 	addi	sp,sp,-8
   86c48:	dc000015 	stw	r16,0(sp)
   86c4c:	2821883a 	mov	r16,r5
   86c50:	2940038f 	ldh	r5,14(r5)
   86c54:	dfc00115 	stw	ra,4(sp)
   86c58:	008c04c0 	call	8c04c <_read_r>
   86c5c:	1007883a 	mov	r3,r2
   86c60:	10000816 	blt	r2,zero,86c84 <__sread+0x40>
   86c64:	80801417 	ldw	r2,80(r16)
   86c68:	10c5883a 	add	r2,r2,r3
   86c6c:	80801415 	stw	r2,80(r16)
   86c70:	1805883a 	mov	r2,r3
   86c74:	dfc00117 	ldw	ra,4(sp)
   86c78:	dc000017 	ldw	r16,0(sp)
   86c7c:	dec00204 	addi	sp,sp,8
   86c80:	f800283a 	ret
   86c84:	8080030b 	ldhu	r2,12(r16)
   86c88:	10bbffcc 	andi	r2,r2,61439
   86c8c:	8080030d 	sth	r2,12(r16)
   86c90:	1805883a 	mov	r2,r3
   86c94:	dfc00117 	ldw	ra,4(sp)
   86c98:	dc000017 	ldw	r16,0(sp)
   86c9c:	dec00204 	addi	sp,sp,8
   86ca0:	f800283a 	ret

00086ca4 <strlen>:
   86ca4:	208000cc 	andi	r2,r4,3
   86ca8:	2011883a 	mov	r8,r4
   86cac:	1000161e 	bne	r2,zero,86d08 <strlen+0x64>
   86cb0:	20c00017 	ldw	r3,0(r4)
   86cb4:	017fbff4 	movhi	r5,65279
   86cb8:	297fbfc4 	addi	r5,r5,-257
   86cbc:	01e02074 	movhi	r7,32897
   86cc0:	39e02004 	addi	r7,r7,-32640
   86cc4:	1945883a 	add	r2,r3,r5
   86cc8:	11c4703a 	and	r2,r2,r7
   86ccc:	00c6303a 	nor	r3,zero,r3
   86cd0:	1886703a 	and	r3,r3,r2
   86cd4:	18000c1e 	bne	r3,zero,86d08 <strlen+0x64>
   86cd8:	280d883a 	mov	r6,r5
   86cdc:	380b883a 	mov	r5,r7
   86ce0:	21000104 	addi	r4,r4,4
   86ce4:	20800017 	ldw	r2,0(r4)
   86ce8:	1187883a 	add	r3,r2,r6
   86cec:	1946703a 	and	r3,r3,r5
   86cf0:	0084303a 	nor	r2,zero,r2
   86cf4:	10c4703a 	and	r2,r2,r3
   86cf8:	103ff926 	beq	r2,zero,86ce0 <strlen+0x3c>
   86cfc:	20800007 	ldb	r2,0(r4)
   86d00:	10000326 	beq	r2,zero,86d10 <strlen+0x6c>
   86d04:	21000044 	addi	r4,r4,1
   86d08:	20800007 	ldb	r2,0(r4)
   86d0c:	103ffd1e 	bne	r2,zero,86d04 <strlen+0x60>
   86d10:	2205c83a 	sub	r2,r4,r8
   86d14:	f800283a 	ret

00086d18 <__sprint_r>:
   86d18:	30800217 	ldw	r2,8(r6)
   86d1c:	defffe04 	addi	sp,sp,-8
   86d20:	dc000015 	stw	r16,0(sp)
   86d24:	dfc00115 	stw	ra,4(sp)
   86d28:	3021883a 	mov	r16,r6
   86d2c:	0007883a 	mov	r3,zero
   86d30:	1000061e 	bne	r2,zero,86d4c <__sprint_r+0x34>
   86d34:	1805883a 	mov	r2,r3
   86d38:	30000115 	stw	zero,4(r6)
   86d3c:	dfc00117 	ldw	ra,4(sp)
   86d40:	dc000017 	ldw	r16,0(sp)
   86d44:	dec00204 	addi	sp,sp,8
   86d48:	f800283a 	ret
   86d4c:	008a7140 	call	8a714 <__sfvwrite_r>
   86d50:	1007883a 	mov	r3,r2
   86d54:	1805883a 	mov	r2,r3
   86d58:	80000115 	stw	zero,4(r16)
   86d5c:	80000215 	stw	zero,8(r16)
   86d60:	dfc00117 	ldw	ra,4(sp)
   86d64:	dc000017 	ldw	r16,0(sp)
   86d68:	dec00204 	addi	sp,sp,8
   86d6c:	f800283a 	ret

00086d70 <___vfprintf_internal_r>:
   86d70:	defea404 	addi	sp,sp,-1392
   86d74:	dd815815 	stw	r22,1376(sp)
   86d78:	dc015215 	stw	r16,1352(sp)
   86d7c:	d9c15115 	stw	r7,1348(sp)
   86d80:	dfc15b15 	stw	ra,1388(sp)
   86d84:	df015a15 	stw	fp,1384(sp)
   86d88:	ddc15915 	stw	r23,1380(sp)
   86d8c:	dd415715 	stw	r21,1372(sp)
   86d90:	dd015615 	stw	r20,1368(sp)
   86d94:	dcc15515 	stw	r19,1364(sp)
   86d98:	dc815415 	stw	r18,1360(sp)
   86d9c:	dc415315 	stw	r17,1356(sp)
   86da0:	282d883a 	mov	r22,r5
   86da4:	3021883a 	mov	r16,r6
   86da8:	d9014f15 	stw	r4,1340(sp)
   86dac:	008ac280 	call	8ac28 <_localeconv_r>
   86db0:	10800017 	ldw	r2,0(r2)
   86db4:	d9c15117 	ldw	r7,1348(sp)
   86db8:	d8814915 	stw	r2,1316(sp)
   86dbc:	d8814f17 	ldw	r2,1340(sp)
   86dc0:	10000226 	beq	r2,zero,86dcc <___vfprintf_internal_r+0x5c>
   86dc4:	10800e17 	ldw	r2,56(r2)
   86dc8:	10020d26 	beq	r2,zero,87600 <___vfprintf_internal_r+0x890>
   86dcc:	b080030b 	ldhu	r2,12(r22)
   86dd0:	1080020c 	andi	r2,r2,8
   86dd4:	10020e26 	beq	r2,zero,87610 <___vfprintf_internal_r+0x8a0>
   86dd8:	b0800417 	ldw	r2,16(r22)
   86ddc:	10020c26 	beq	r2,zero,87610 <___vfprintf_internal_r+0x8a0>
   86de0:	b200030b 	ldhu	r8,12(r22)
   86de4:	00800284 	movi	r2,10
   86de8:	40c0068c 	andi	r3,r8,26
   86dec:	18802f1e 	bne	r3,r2,86eac <___vfprintf_internal_r+0x13c>
   86df0:	b080038f 	ldh	r2,14(r22)
   86df4:	10002d16 	blt	r2,zero,86eac <___vfprintf_internal_r+0x13c>
   86df8:	b240038b 	ldhu	r9,14(r22)
   86dfc:	b2800717 	ldw	r10,28(r22)
   86e00:	b2c00917 	ldw	r11,36(r22)
   86e04:	d9014f17 	ldw	r4,1340(sp)
   86e08:	dc402904 	addi	r17,sp,164
   86e0c:	d8804004 	addi	r2,sp,256
   86e10:	00c10004 	movi	r3,1024
   86e14:	423fff4c 	andi	r8,r8,65533
   86e18:	800d883a 	mov	r6,r16
   86e1c:	880b883a 	mov	r5,r17
   86e20:	da002c0d 	sth	r8,176(sp)
   86e24:	da402c8d 	sth	r9,178(sp)
   86e28:	da803015 	stw	r10,192(sp)
   86e2c:	dac03215 	stw	r11,200(sp)
   86e30:	d8802d15 	stw	r2,180(sp)
   86e34:	d8c02e15 	stw	r3,184(sp)
   86e38:	d8802915 	stw	r2,164(sp)
   86e3c:	d8c02b15 	stw	r3,172(sp)
   86e40:	d8002f15 	stw	zero,188(sp)
   86e44:	0086d700 	call	86d70 <___vfprintf_internal_r>
   86e48:	d8814b15 	stw	r2,1324(sp)
   86e4c:	10000416 	blt	r2,zero,86e60 <___vfprintf_internal_r+0xf0>
   86e50:	d9014f17 	ldw	r4,1340(sp)
   86e54:	880b883a 	mov	r5,r17
   86e58:	0084be40 	call	84be4 <_fflush_r>
   86e5c:	1002321e 	bne	r2,zero,87728 <___vfprintf_internal_r+0x9b8>
   86e60:	d8802c0b 	ldhu	r2,176(sp)
   86e64:	1080100c 	andi	r2,r2,64
   86e68:	10000326 	beq	r2,zero,86e78 <___vfprintf_internal_r+0x108>
   86e6c:	b080030b 	ldhu	r2,12(r22)
   86e70:	10801014 	ori	r2,r2,64
   86e74:	b080030d 	sth	r2,12(r22)
   86e78:	d8814b17 	ldw	r2,1324(sp)
   86e7c:	dfc15b17 	ldw	ra,1388(sp)
   86e80:	df015a17 	ldw	fp,1384(sp)
   86e84:	ddc15917 	ldw	r23,1380(sp)
   86e88:	dd815817 	ldw	r22,1376(sp)
   86e8c:	dd415717 	ldw	r21,1372(sp)
   86e90:	dd015617 	ldw	r20,1368(sp)
   86e94:	dcc15517 	ldw	r19,1364(sp)
   86e98:	dc815417 	ldw	r18,1360(sp)
   86e9c:	dc415317 	ldw	r17,1356(sp)
   86ea0:	dc015217 	ldw	r16,1352(sp)
   86ea4:	dec15c04 	addi	sp,sp,1392
   86ea8:	f800283a 	ret
   86eac:	0005883a 	mov	r2,zero
   86eb0:	0007883a 	mov	r3,zero
   86eb4:	dd401904 	addi	r21,sp,100
   86eb8:	d8814215 	stw	r2,1288(sp)
   86ebc:	802f883a 	mov	r23,r16
   86ec0:	d8c14315 	stw	r3,1292(sp)
   86ec4:	d8014b15 	stw	zero,1324(sp)
   86ec8:	d8014815 	stw	zero,1312(sp)
   86ecc:	d8014415 	stw	zero,1296(sp)
   86ed0:	d8014715 	stw	zero,1308(sp)
   86ed4:	dd400c15 	stw	r21,48(sp)
   86ed8:	d8000e15 	stw	zero,56(sp)
   86edc:	d8000d15 	stw	zero,52(sp)
   86ee0:	b8800007 	ldb	r2,0(r23)
   86ee4:	10001926 	beq	r2,zero,86f4c <___vfprintf_internal_r+0x1dc>
   86ee8:	00c00944 	movi	r3,37
   86eec:	10c01726 	beq	r2,r3,86f4c <___vfprintf_internal_r+0x1dc>
   86ef0:	b821883a 	mov	r16,r23
   86ef4:	00000106 	br	86efc <___vfprintf_internal_r+0x18c>
   86ef8:	10c00326 	beq	r2,r3,86f08 <___vfprintf_internal_r+0x198>
   86efc:	84000044 	addi	r16,r16,1
   86f00:	80800007 	ldb	r2,0(r16)
   86f04:	103ffc1e 	bne	r2,zero,86ef8 <___vfprintf_internal_r+0x188>
   86f08:	85e7c83a 	sub	r19,r16,r23
   86f0c:	98000e26 	beq	r19,zero,86f48 <___vfprintf_internal_r+0x1d8>
   86f10:	dc800e17 	ldw	r18,56(sp)
   86f14:	dc400d17 	ldw	r17,52(sp)
   86f18:	008001c4 	movi	r2,7
   86f1c:	94e5883a 	add	r18,r18,r19
   86f20:	8c400044 	addi	r17,r17,1
   86f24:	adc00015 	stw	r23,0(r21)
   86f28:	dc800e15 	stw	r18,56(sp)
   86f2c:	acc00115 	stw	r19,4(r21)
   86f30:	dc400d15 	stw	r17,52(sp)
   86f34:	14428b16 	blt	r2,r17,87964 <___vfprintf_internal_r+0xbf4>
   86f38:	ad400204 	addi	r21,r21,8
   86f3c:	d9014b17 	ldw	r4,1324(sp)
   86f40:	24c9883a 	add	r4,r4,r19
   86f44:	d9014b15 	stw	r4,1324(sp)
   86f48:	802f883a 	mov	r23,r16
   86f4c:	b8800007 	ldb	r2,0(r23)
   86f50:	10013c26 	beq	r2,zero,87444 <___vfprintf_internal_r+0x6d4>
   86f54:	bdc00044 	addi	r23,r23,1
   86f58:	d8000405 	stb	zero,16(sp)
   86f5c:	b8c00007 	ldb	r3,0(r23)
   86f60:	04ffffc4 	movi	r19,-1
   86f64:	d8014c15 	stw	zero,1328(sp)
   86f68:	d8014a15 	stw	zero,1320(sp)
   86f6c:	d8c14d15 	stw	r3,1332(sp)
   86f70:	bdc00044 	addi	r23,r23,1
   86f74:	d9414d17 	ldw	r5,1332(sp)
   86f78:	00801604 	movi	r2,88
   86f7c:	28fff804 	addi	r3,r5,-32
   86f80:	10c06036 	bltu	r2,r3,87104 <___vfprintf_internal_r+0x394>
   86f84:	18c5883a 	add	r2,r3,r3
   86f88:	1085883a 	add	r2,r2,r2
   86f8c:	00c00234 	movhi	r3,8
   86f90:	18dbe804 	addi	r3,r3,28576
   86f94:	10c5883a 	add	r2,r2,r3
   86f98:	11000017 	ldw	r4,0(r2)
   86f9c:	2000683a 	jmp	r4
   86fa0:	00087f14 	movui	zero,8700
   86fa4:	00087104 	movi	zero,8644
   86fa8:	00087104 	movi	zero,8644
   86fac:	00087f00 	call	87f0 <__reset-0x77810>
   86fb0:	00087104 	movi	zero,8644
   86fb4:	00087104 	movi	zero,8644
   86fb8:	00087104 	movi	zero,8644
   86fbc:	00087104 	movi	zero,8644
   86fc0:	00087104 	movi	zero,8644
   86fc4:	00087104 	movi	zero,8644
   86fc8:	00087ce0 	cmpeqi	zero,zero,8691
   86fcc:	00087ef0 	cmpltui	zero,zero,8699
   86fd0:	00087104 	movi	zero,8644
   86fd4:	00087cf8 	rdprs	zero,zero,8691
   86fd8:	00087f98 	cmpnei	zero,zero,8702
   86fdc:	00087104 	movi	zero,8644
   86fe0:	00087f84 	movi	zero,8702
   86fe4:	00087f40 	call	87f4 <__reset-0x7780c>
   86fe8:	00087f40 	call	87f4 <__reset-0x7780c>
   86fec:	00087f40 	call	87f4 <__reset-0x7780c>
   86ff0:	00087f40 	call	87f4 <__reset-0x7780c>
   86ff4:	00087f40 	call	87f4 <__reset-0x7780c>
   86ff8:	00087f40 	call	87f4 <__reset-0x7780c>
   86ffc:	00087f40 	call	87f4 <__reset-0x7780c>
   87000:	00087f40 	call	87f4 <__reset-0x7780c>
   87004:	00087f40 	call	87f4 <__reset-0x7780c>
   87008:	00087104 	movi	zero,8644
   8700c:	00087104 	movi	zero,8644
   87010:	00087104 	movi	zero,8644
   87014:	00087104 	movi	zero,8644
   87018:	00087104 	movi	zero,8644
   8701c:	00087104 	movi	zero,8644
   87020:	00087104 	movi	zero,8644
   87024:	00087104 	movi	zero,8644
   87028:	00087104 	movi	zero,8644
   8702c:	00087104 	movi	zero,8644
   87030:	0008775c 	xori	zero,zero,8669
   87034:	00087dc8 	cmpgei	zero,zero,8695
   87038:	00087104 	movi	zero,8644
   8703c:	00087dc8 	cmpgei	zero,zero,8695
   87040:	00087104 	movi	zero,8644
   87044:	00087104 	movi	zero,8644
   87048:	00087104 	movi	zero,8644
   8704c:	00087104 	movi	zero,8644
   87050:	00087f2c 	andhi	zero,zero,8700
   87054:	00087104 	movi	zero,8644
   87058:	00087104 	movi	zero,8644
   8705c:	00087810 	cmplti	zero,zero,8672
   87060:	00087104 	movi	zero,8644
   87064:	00087104 	movi	zero,8644
   87068:	00087104 	movi	zero,8644
   8706c:	00087104 	movi	zero,8644
   87070:	00087104 	movi	zero,8644
   87074:	0008785c 	xori	zero,zero,8673
   87078:	00087104 	movi	zero,8644
   8707c:	00087104 	movi	zero,8644
   87080:	00087e7c 	xorhi	zero,zero,8697
   87084:	00087104 	movi	zero,8644
   87088:	00087104 	movi	zero,8644
   8708c:	00087104 	movi	zero,8644
   87090:	00087104 	movi	zero,8644
   87094:	00087104 	movi	zero,8644
   87098:	00087104 	movi	zero,8644
   8709c:	00087104 	movi	zero,8644
   870a0:	00087104 	movi	zero,8644
   870a4:	00087104 	movi	zero,8644
   870a8:	00087104 	movi	zero,8644
   870ac:	00087e50 	cmplti	zero,zero,8697
   870b0:	00087768 	cmpgeui	zero,zero,8669
   870b4:	00087dc8 	cmpgei	zero,zero,8695
   870b8:	00087dc8 	cmpgei	zero,zero,8695
   870bc:	00087dc8 	cmpgei	zero,zero,8695
   870c0:	00087db4 	movhi	zero,8694
   870c4:	00087768 	cmpgeui	zero,zero,8669
   870c8:	00087104 	movi	zero,8644
   870cc:	00087104 	movi	zero,8644
   870d0:	00087d3c 	xorhi	zero,zero,8692
   870d4:	00087104 	movi	zero,8644
   870d8:	00087d0c 	andi	zero,zero,8692
   870dc:	0008781c 	xori	zero,zero,8672
   870e0:	00087d6c 	andhi	zero,zero,8693
   870e4:	00087d58 	cmpnei	zero,zero,8693
   870e8:	00087104 	movi	zero,8644
   870ec:	00088000 	call	8800 <__reset-0x77800>
   870f0:	00087104 	movi	zero,8644
   870f4:	00087868 	cmpgeui	zero,zero,8673
   870f8:	00087104 	movi	zero,8644
   870fc:	00087104 	movi	zero,8644
   87100:	00087ee0 	cmpeqi	zero,zero,8699
   87104:	d9014d17 	ldw	r4,1332(sp)
   87108:	2000ce26 	beq	r4,zero,87444 <___vfprintf_internal_r+0x6d4>
   8710c:	01400044 	movi	r5,1
   87110:	d9800f04 	addi	r6,sp,60
   87114:	d9c14015 	stw	r7,1280(sp)
   87118:	d9414515 	stw	r5,1300(sp)
   8711c:	d9814115 	stw	r6,1284(sp)
   87120:	280f883a 	mov	r7,r5
   87124:	d9000f05 	stb	r4,60(sp)
   87128:	d8000405 	stb	zero,16(sp)
   8712c:	d8014615 	stw	zero,1304(sp)
   87130:	d8c14c17 	ldw	r3,1328(sp)
   87134:	1880008c 	andi	r2,r3,2
   87138:	1005003a 	cmpeq	r2,r2,zero
   8713c:	d8815015 	stw	r2,1344(sp)
   87140:	1000031e 	bne	r2,zero,87150 <___vfprintf_internal_r+0x3e0>
   87144:	d9014517 	ldw	r4,1300(sp)
   87148:	21000084 	addi	r4,r4,2
   8714c:	d9014515 	stw	r4,1300(sp)
   87150:	d9414c17 	ldw	r5,1328(sp)
   87154:	2940210c 	andi	r5,r5,132
   87158:	d9414e15 	stw	r5,1336(sp)
   8715c:	28002d1e 	bne	r5,zero,87214 <___vfprintf_internal_r+0x4a4>
   87160:	d9814a17 	ldw	r6,1320(sp)
   87164:	d8814517 	ldw	r2,1300(sp)
   87168:	30a1c83a 	sub	r16,r6,r2
   8716c:	0400290e 	bge	zero,r16,87214 <___vfprintf_internal_r+0x4a4>
   87170:	00800404 	movi	r2,16
   87174:	14045e0e 	bge	r2,r16,882f0 <___vfprintf_internal_r+0x1580>
   87178:	dc800e17 	ldw	r18,56(sp)
   8717c:	dc400d17 	ldw	r17,52(sp)
   87180:	1027883a 	mov	r19,r2
   87184:	07000274 	movhi	fp,9
   87188:	e70b2584 	addi	fp,fp,11414
   8718c:	050001c4 	movi	r20,7
   87190:	00000306 	br	871a0 <___vfprintf_internal_r+0x430>
   87194:	843ffc04 	addi	r16,r16,-16
   87198:	ad400204 	addi	r21,r21,8
   8719c:	9c00130e 	bge	r19,r16,871ec <___vfprintf_internal_r+0x47c>
   871a0:	94800404 	addi	r18,r18,16
   871a4:	8c400044 	addi	r17,r17,1
   871a8:	af000015 	stw	fp,0(r21)
   871ac:	acc00115 	stw	r19,4(r21)
   871b0:	dc800e15 	stw	r18,56(sp)
   871b4:	dc400d15 	stw	r17,52(sp)
   871b8:	a47ff60e 	bge	r20,r17,87194 <___vfprintf_internal_r+0x424>
   871bc:	d9014f17 	ldw	r4,1340(sp)
   871c0:	b00b883a 	mov	r5,r22
   871c4:	d9800c04 	addi	r6,sp,48
   871c8:	d9c15115 	stw	r7,1348(sp)
   871cc:	0086d180 	call	86d18 <__sprint_r>
   871d0:	d9c15117 	ldw	r7,1348(sp)
   871d4:	10009e1e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   871d8:	843ffc04 	addi	r16,r16,-16
   871dc:	dc800e17 	ldw	r18,56(sp)
   871e0:	dc400d17 	ldw	r17,52(sp)
   871e4:	dd401904 	addi	r21,sp,100
   871e8:	9c3fed16 	blt	r19,r16,871a0 <___vfprintf_internal_r+0x430>
   871ec:	9425883a 	add	r18,r18,r16
   871f0:	8c400044 	addi	r17,r17,1
   871f4:	008001c4 	movi	r2,7
   871f8:	af000015 	stw	fp,0(r21)
   871fc:	ac000115 	stw	r16,4(r21)
   87200:	dc800e15 	stw	r18,56(sp)
   87204:	dc400d15 	stw	r17,52(sp)
   87208:	1441f516 	blt	r2,r17,879e0 <___vfprintf_internal_r+0xc70>
   8720c:	ad400204 	addi	r21,r21,8
   87210:	00000206 	br	8721c <___vfprintf_internal_r+0x4ac>
   87214:	dc800e17 	ldw	r18,56(sp)
   87218:	dc400d17 	ldw	r17,52(sp)
   8721c:	d8800407 	ldb	r2,16(sp)
   87220:	10000b26 	beq	r2,zero,87250 <___vfprintf_internal_r+0x4e0>
   87224:	00800044 	movi	r2,1
   87228:	94800044 	addi	r18,r18,1
   8722c:	8c400044 	addi	r17,r17,1
   87230:	a8800115 	stw	r2,4(r21)
   87234:	d8c00404 	addi	r3,sp,16
   87238:	008001c4 	movi	r2,7
   8723c:	a8c00015 	stw	r3,0(r21)
   87240:	dc800e15 	stw	r18,56(sp)
   87244:	dc400d15 	stw	r17,52(sp)
   87248:	1441da16 	blt	r2,r17,879b4 <___vfprintf_internal_r+0xc44>
   8724c:	ad400204 	addi	r21,r21,8
   87250:	d9015017 	ldw	r4,1344(sp)
   87254:	20000b1e 	bne	r4,zero,87284 <___vfprintf_internal_r+0x514>
   87258:	d8800444 	addi	r2,sp,17
   8725c:	94800084 	addi	r18,r18,2
   87260:	8c400044 	addi	r17,r17,1
   87264:	a8800015 	stw	r2,0(r21)
   87268:	00c00084 	movi	r3,2
   8726c:	008001c4 	movi	r2,7
   87270:	a8c00115 	stw	r3,4(r21)
   87274:	dc800e15 	stw	r18,56(sp)
   87278:	dc400d15 	stw	r17,52(sp)
   8727c:	1441c216 	blt	r2,r17,87988 <___vfprintf_internal_r+0xc18>
   87280:	ad400204 	addi	r21,r21,8
   87284:	d9414e17 	ldw	r5,1336(sp)
   87288:	00802004 	movi	r2,128
   8728c:	2880b126 	beq	r5,r2,87554 <___vfprintf_internal_r+0x7e4>
   87290:	d8c14617 	ldw	r3,1304(sp)
   87294:	19e1c83a 	sub	r16,r3,r7
   87298:	0400260e 	bge	zero,r16,87334 <___vfprintf_internal_r+0x5c4>
   8729c:	00800404 	movi	r2,16
   872a0:	1403cf0e 	bge	r2,r16,881e0 <___vfprintf_internal_r+0x1470>
   872a4:	1027883a 	mov	r19,r2
   872a8:	07000274 	movhi	fp,9
   872ac:	e70b2184 	addi	fp,fp,11398
   872b0:	050001c4 	movi	r20,7
   872b4:	00000306 	br	872c4 <___vfprintf_internal_r+0x554>
   872b8:	843ffc04 	addi	r16,r16,-16
   872bc:	ad400204 	addi	r21,r21,8
   872c0:	9c00130e 	bge	r19,r16,87310 <___vfprintf_internal_r+0x5a0>
   872c4:	94800404 	addi	r18,r18,16
   872c8:	8c400044 	addi	r17,r17,1
   872cc:	af000015 	stw	fp,0(r21)
   872d0:	acc00115 	stw	r19,4(r21)
   872d4:	dc800e15 	stw	r18,56(sp)
   872d8:	dc400d15 	stw	r17,52(sp)
   872dc:	a47ff60e 	bge	r20,r17,872b8 <___vfprintf_internal_r+0x548>
   872e0:	d9014f17 	ldw	r4,1340(sp)
   872e4:	b00b883a 	mov	r5,r22
   872e8:	d9800c04 	addi	r6,sp,48
   872ec:	d9c15115 	stw	r7,1348(sp)
   872f0:	0086d180 	call	86d18 <__sprint_r>
   872f4:	d9c15117 	ldw	r7,1348(sp)
   872f8:	1000551e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   872fc:	843ffc04 	addi	r16,r16,-16
   87300:	dc800e17 	ldw	r18,56(sp)
   87304:	dc400d17 	ldw	r17,52(sp)
   87308:	dd401904 	addi	r21,sp,100
   8730c:	9c3fed16 	blt	r19,r16,872c4 <___vfprintf_internal_r+0x554>
   87310:	9425883a 	add	r18,r18,r16
   87314:	8c400044 	addi	r17,r17,1
   87318:	008001c4 	movi	r2,7
   8731c:	af000015 	stw	fp,0(r21)
   87320:	ac000115 	stw	r16,4(r21)
   87324:	dc800e15 	stw	r18,56(sp)
   87328:	dc400d15 	stw	r17,52(sp)
   8732c:	14418216 	blt	r2,r17,87938 <___vfprintf_internal_r+0xbc8>
   87330:	ad400204 	addi	r21,r21,8
   87334:	d9014c17 	ldw	r4,1328(sp)
   87338:	2080400c 	andi	r2,r4,256
   8733c:	10004a1e 	bne	r2,zero,87468 <___vfprintf_internal_r+0x6f8>
   87340:	d9414117 	ldw	r5,1284(sp)
   87344:	91e5883a 	add	r18,r18,r7
   87348:	8c400044 	addi	r17,r17,1
   8734c:	008001c4 	movi	r2,7
   87350:	a9400015 	stw	r5,0(r21)
   87354:	a9c00115 	stw	r7,4(r21)
   87358:	dc800e15 	stw	r18,56(sp)
   8735c:	dc400d15 	stw	r17,52(sp)
   87360:	14416716 	blt	r2,r17,87900 <___vfprintf_internal_r+0xb90>
   87364:	a8c00204 	addi	r3,r21,8
   87368:	d9814c17 	ldw	r6,1328(sp)
   8736c:	3080010c 	andi	r2,r6,4
   87370:	10002826 	beq	r2,zero,87414 <___vfprintf_internal_r+0x6a4>
   87374:	d8814a17 	ldw	r2,1320(sp)
   87378:	d9014517 	ldw	r4,1300(sp)
   8737c:	1121c83a 	sub	r16,r2,r4
   87380:	0400240e 	bge	zero,r16,87414 <___vfprintf_internal_r+0x6a4>
   87384:	00800404 	movi	r2,16
   87388:	1404550e 	bge	r2,r16,884e0 <___vfprintf_internal_r+0x1770>
   8738c:	dc400d17 	ldw	r17,52(sp)
   87390:	1027883a 	mov	r19,r2
   87394:	07000274 	movhi	fp,9
   87398:	e70b2584 	addi	fp,fp,11414
   8739c:	050001c4 	movi	r20,7
   873a0:	00000306 	br	873b0 <___vfprintf_internal_r+0x640>
   873a4:	843ffc04 	addi	r16,r16,-16
   873a8:	18c00204 	addi	r3,r3,8
   873ac:	9c00110e 	bge	r19,r16,873f4 <___vfprintf_internal_r+0x684>
   873b0:	94800404 	addi	r18,r18,16
   873b4:	8c400044 	addi	r17,r17,1
   873b8:	1f000015 	stw	fp,0(r3)
   873bc:	1cc00115 	stw	r19,4(r3)
   873c0:	dc800e15 	stw	r18,56(sp)
   873c4:	dc400d15 	stw	r17,52(sp)
   873c8:	a47ff60e 	bge	r20,r17,873a4 <___vfprintf_internal_r+0x634>
   873cc:	d9014f17 	ldw	r4,1340(sp)
   873d0:	b00b883a 	mov	r5,r22
   873d4:	d9800c04 	addi	r6,sp,48
   873d8:	0086d180 	call	86d18 <__sprint_r>
   873dc:	10001c1e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   873e0:	843ffc04 	addi	r16,r16,-16
   873e4:	dc800e17 	ldw	r18,56(sp)
   873e8:	dc400d17 	ldw	r17,52(sp)
   873ec:	d8c01904 	addi	r3,sp,100
   873f0:	9c3fef16 	blt	r19,r16,873b0 <___vfprintf_internal_r+0x640>
   873f4:	9425883a 	add	r18,r18,r16
   873f8:	8c400044 	addi	r17,r17,1
   873fc:	008001c4 	movi	r2,7
   87400:	1f000015 	stw	fp,0(r3)
   87404:	1c000115 	stw	r16,4(r3)
   87408:	dc800e15 	stw	r18,56(sp)
   8740c:	dc400d15 	stw	r17,52(sp)
   87410:	1440cb16 	blt	r2,r17,87740 <___vfprintf_internal_r+0x9d0>
   87414:	d8814a17 	ldw	r2,1320(sp)
   87418:	d9414517 	ldw	r5,1300(sp)
   8741c:	1140010e 	bge	r2,r5,87424 <___vfprintf_internal_r+0x6b4>
   87420:	2805883a 	mov	r2,r5
   87424:	d9814b17 	ldw	r6,1324(sp)
   87428:	308d883a 	add	r6,r6,r2
   8742c:	d9814b15 	stw	r6,1324(sp)
   87430:	90013b1e 	bne	r18,zero,87920 <___vfprintf_internal_r+0xbb0>
   87434:	d9c14017 	ldw	r7,1280(sp)
   87438:	dd401904 	addi	r21,sp,100
   8743c:	d8000d15 	stw	zero,52(sp)
   87440:	003ea706 	br	86ee0 <___vfprintf_internal_r+0x170>
   87444:	d8800e17 	ldw	r2,56(sp)
   87448:	1005451e 	bne	r2,zero,88960 <___vfprintf_internal_r+0x1bf0>
   8744c:	d8000d15 	stw	zero,52(sp)
   87450:	b080030b 	ldhu	r2,12(r22)
   87454:	1080100c 	andi	r2,r2,64
   87458:	103e8726 	beq	r2,zero,86e78 <___vfprintf_internal_r+0x108>
   8745c:	00bfffc4 	movi	r2,-1
   87460:	d8814b15 	stw	r2,1324(sp)
   87464:	003e8406 	br	86e78 <___vfprintf_internal_r+0x108>
   87468:	d9814d17 	ldw	r6,1332(sp)
   8746c:	00801944 	movi	r2,101
   87470:	11806e16 	blt	r2,r6,8762c <___vfprintf_internal_r+0x8bc>
   87474:	d9414717 	ldw	r5,1308(sp)
   87478:	00c00044 	movi	r3,1
   8747c:	1943490e 	bge	r3,r5,881a4 <___vfprintf_internal_r+0x1434>
   87480:	d8814117 	ldw	r2,1284(sp)
   87484:	94800044 	addi	r18,r18,1
   87488:	8c400044 	addi	r17,r17,1
   8748c:	a8800015 	stw	r2,0(r21)
   87490:	008001c4 	movi	r2,7
   87494:	a8c00115 	stw	r3,4(r21)
   87498:	dc800e15 	stw	r18,56(sp)
   8749c:	dc400d15 	stw	r17,52(sp)
   874a0:	1441ca16 	blt	r2,r17,87bcc <___vfprintf_internal_r+0xe5c>
   874a4:	a8c00204 	addi	r3,r21,8
   874a8:	d9014917 	ldw	r4,1316(sp)
   874ac:	00800044 	movi	r2,1
   874b0:	94800044 	addi	r18,r18,1
   874b4:	8c400044 	addi	r17,r17,1
   874b8:	18800115 	stw	r2,4(r3)
   874bc:	008001c4 	movi	r2,7
   874c0:	19000015 	stw	r4,0(r3)
   874c4:	dc800e15 	stw	r18,56(sp)
   874c8:	dc400d15 	stw	r17,52(sp)
   874cc:	1441b616 	blt	r2,r17,87ba8 <___vfprintf_internal_r+0xe38>
   874d0:	1cc00204 	addi	r19,r3,8
   874d4:	d9014217 	ldw	r4,1288(sp)
   874d8:	d9414317 	ldw	r5,1292(sp)
   874dc:	000d883a 	mov	r6,zero
   874e0:	000f883a 	mov	r7,zero
   874e4:	008d5780 	call	8d578 <__nedf2>
   874e8:	10017426 	beq	r2,zero,87abc <___vfprintf_internal_r+0xd4c>
   874ec:	d9414717 	ldw	r5,1308(sp)
   874f0:	d9814117 	ldw	r6,1284(sp)
   874f4:	8c400044 	addi	r17,r17,1
   874f8:	2c85883a 	add	r2,r5,r18
   874fc:	14bfffc4 	addi	r18,r2,-1
   87500:	28bfffc4 	addi	r2,r5,-1
   87504:	30c00044 	addi	r3,r6,1
   87508:	98800115 	stw	r2,4(r19)
   8750c:	008001c4 	movi	r2,7
   87510:	98c00015 	stw	r3,0(r19)
   87514:	dc800e15 	stw	r18,56(sp)
   87518:	dc400d15 	stw	r17,52(sp)
   8751c:	14418e16 	blt	r2,r17,87b58 <___vfprintf_internal_r+0xde8>
   87520:	9cc00204 	addi	r19,r19,8
   87524:	d9414817 	ldw	r5,1312(sp)
   87528:	d8800804 	addi	r2,sp,32
   8752c:	8c400044 	addi	r17,r17,1
   87530:	9165883a 	add	r18,r18,r5
   87534:	98800015 	stw	r2,0(r19)
   87538:	008001c4 	movi	r2,7
   8753c:	99400115 	stw	r5,4(r19)
   87540:	dc800e15 	stw	r18,56(sp)
   87544:	dc400d15 	stw	r17,52(sp)
   87548:	1440ed16 	blt	r2,r17,87900 <___vfprintf_internal_r+0xb90>
   8754c:	98c00204 	addi	r3,r19,8
   87550:	003f8506 	br	87368 <___vfprintf_internal_r+0x5f8>
   87554:	d9814a17 	ldw	r6,1320(sp)
   87558:	d8814517 	ldw	r2,1300(sp)
   8755c:	30a1c83a 	sub	r16,r6,r2
   87560:	043f4b0e 	bge	zero,r16,87290 <___vfprintf_internal_r+0x520>
   87564:	00800404 	movi	r2,16
   87568:	14043a0e 	bge	r2,r16,88654 <___vfprintf_internal_r+0x18e4>
   8756c:	1027883a 	mov	r19,r2
   87570:	07000274 	movhi	fp,9
   87574:	e70b2184 	addi	fp,fp,11398
   87578:	050001c4 	movi	r20,7
   8757c:	00000306 	br	8758c <___vfprintf_internal_r+0x81c>
   87580:	843ffc04 	addi	r16,r16,-16
   87584:	ad400204 	addi	r21,r21,8
   87588:	9c00130e 	bge	r19,r16,875d8 <___vfprintf_internal_r+0x868>
   8758c:	94800404 	addi	r18,r18,16
   87590:	8c400044 	addi	r17,r17,1
   87594:	af000015 	stw	fp,0(r21)
   87598:	acc00115 	stw	r19,4(r21)
   8759c:	dc800e15 	stw	r18,56(sp)
   875a0:	dc400d15 	stw	r17,52(sp)
   875a4:	a47ff60e 	bge	r20,r17,87580 <___vfprintf_internal_r+0x810>
   875a8:	d9014f17 	ldw	r4,1340(sp)
   875ac:	b00b883a 	mov	r5,r22
   875b0:	d9800c04 	addi	r6,sp,48
   875b4:	d9c15115 	stw	r7,1348(sp)
   875b8:	0086d180 	call	86d18 <__sprint_r>
   875bc:	d9c15117 	ldw	r7,1348(sp)
   875c0:	103fa31e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   875c4:	843ffc04 	addi	r16,r16,-16
   875c8:	dc800e17 	ldw	r18,56(sp)
   875cc:	dc400d17 	ldw	r17,52(sp)
   875d0:	dd401904 	addi	r21,sp,100
   875d4:	9c3fed16 	blt	r19,r16,8758c <___vfprintf_internal_r+0x81c>
   875d8:	9425883a 	add	r18,r18,r16
   875dc:	8c400044 	addi	r17,r17,1
   875e0:	008001c4 	movi	r2,7
   875e4:	af000015 	stw	fp,0(r21)
   875e8:	ac000115 	stw	r16,4(r21)
   875ec:	dc800e15 	stw	r18,56(sp)
   875f0:	dc400d15 	stw	r17,52(sp)
   875f4:	14416116 	blt	r2,r17,87b7c <___vfprintf_internal_r+0xe0c>
   875f8:	ad400204 	addi	r21,r21,8
   875fc:	003f2406 	br	87290 <___vfprintf_internal_r+0x520>
   87600:	d9014f17 	ldw	r4,1340(sp)
   87604:	0084e7c0 	call	84e7c <__sinit>
   87608:	d9c15117 	ldw	r7,1348(sp)
   8760c:	003def06 	br	86dcc <___vfprintf_internal_r+0x5c>
   87610:	d9014f17 	ldw	r4,1340(sp)
   87614:	b00b883a 	mov	r5,r22
   87618:	d9c15115 	stw	r7,1348(sp)
   8761c:	0088cd00 	call	88cd0 <__swsetup_r>
   87620:	d9c15117 	ldw	r7,1348(sp)
   87624:	103dee26 	beq	r2,zero,86de0 <___vfprintf_internal_r+0x70>
   87628:	003f8c06 	br	8745c <___vfprintf_internal_r+0x6ec>
   8762c:	d9014217 	ldw	r4,1288(sp)
   87630:	d9414317 	ldw	r5,1292(sp)
   87634:	000d883a 	mov	r6,zero
   87638:	000f883a 	mov	r7,zero
   8763c:	0083f1c0 	call	83f1c <__eqdf2>
   87640:	1000f21e 	bne	r2,zero,87a0c <___vfprintf_internal_r+0xc9c>
   87644:	00800274 	movhi	r2,9
   87648:	108b2104 	addi	r2,r2,11396
   8764c:	94800044 	addi	r18,r18,1
   87650:	8c400044 	addi	r17,r17,1
   87654:	a8800015 	stw	r2,0(r21)
   87658:	00c00044 	movi	r3,1
   8765c:	008001c4 	movi	r2,7
   87660:	a8c00115 	stw	r3,4(r21)
   87664:	dc800e15 	stw	r18,56(sp)
   87668:	dc400d15 	stw	r17,52(sp)
   8766c:	14430016 	blt	r2,r17,88270 <___vfprintf_internal_r+0x1500>
   87670:	a8c00204 	addi	r3,r21,8
   87674:	d8800517 	ldw	r2,20(sp)
   87678:	d9014717 	ldw	r4,1308(sp)
   8767c:	11015c0e 	bge	r2,r4,87bf0 <___vfprintf_internal_r+0xe80>
   87680:	dc400d17 	ldw	r17,52(sp)
   87684:	d9814917 	ldw	r6,1316(sp)
   87688:	00800044 	movi	r2,1
   8768c:	94800044 	addi	r18,r18,1
   87690:	8c400044 	addi	r17,r17,1
   87694:	18800115 	stw	r2,4(r3)
   87698:	008001c4 	movi	r2,7
   8769c:	19800015 	stw	r6,0(r3)
   876a0:	dc800e15 	stw	r18,56(sp)
   876a4:	dc400d15 	stw	r17,52(sp)
   876a8:	14431616 	blt	r2,r17,88304 <___vfprintf_internal_r+0x1594>
   876ac:	18c00204 	addi	r3,r3,8
   876b0:	d8814717 	ldw	r2,1308(sp)
   876b4:	143fffc4 	addi	r16,r2,-1
   876b8:	043f2b0e 	bge	zero,r16,87368 <___vfprintf_internal_r+0x5f8>
   876bc:	00800404 	movi	r2,16
   876c0:	1402a80e 	bge	r2,r16,88164 <___vfprintf_internal_r+0x13f4>
   876c4:	dc400d17 	ldw	r17,52(sp)
   876c8:	1027883a 	mov	r19,r2
   876cc:	07000274 	movhi	fp,9
   876d0:	e70b2184 	addi	fp,fp,11398
   876d4:	050001c4 	movi	r20,7
   876d8:	00000306 	br	876e8 <___vfprintf_internal_r+0x978>
   876dc:	18c00204 	addi	r3,r3,8
   876e0:	843ffc04 	addi	r16,r16,-16
   876e4:	9c02a20e 	bge	r19,r16,88170 <___vfprintf_internal_r+0x1400>
   876e8:	94800404 	addi	r18,r18,16
   876ec:	8c400044 	addi	r17,r17,1
   876f0:	1f000015 	stw	fp,0(r3)
   876f4:	1cc00115 	stw	r19,4(r3)
   876f8:	dc800e15 	stw	r18,56(sp)
   876fc:	dc400d15 	stw	r17,52(sp)
   87700:	a47ff60e 	bge	r20,r17,876dc <___vfprintf_internal_r+0x96c>
   87704:	d9014f17 	ldw	r4,1340(sp)
   87708:	b00b883a 	mov	r5,r22
   8770c:	d9800c04 	addi	r6,sp,48
   87710:	0086d180 	call	86d18 <__sprint_r>
   87714:	103f4e1e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   87718:	dc800e17 	ldw	r18,56(sp)
   8771c:	dc400d17 	ldw	r17,52(sp)
   87720:	d8c01904 	addi	r3,sp,100
   87724:	003fee06 	br	876e0 <___vfprintf_internal_r+0x970>
   87728:	d8802c0b 	ldhu	r2,176(sp)
   8772c:	00ffffc4 	movi	r3,-1
   87730:	d8c14b15 	stw	r3,1324(sp)
   87734:	1080100c 	andi	r2,r2,64
   87738:	103dcc1e 	bne	r2,zero,86e6c <___vfprintf_internal_r+0xfc>
   8773c:	003dce06 	br	86e78 <___vfprintf_internal_r+0x108>
   87740:	d9014f17 	ldw	r4,1340(sp)
   87744:	b00b883a 	mov	r5,r22
   87748:	d9800c04 	addi	r6,sp,48
   8774c:	0086d180 	call	86d18 <__sprint_r>
   87750:	103f3f1e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   87754:	dc800e17 	ldw	r18,56(sp)
   87758:	003f2e06 	br	87414 <___vfprintf_internal_r+0x6a4>
   8775c:	d9414c17 	ldw	r5,1328(sp)
   87760:	29400414 	ori	r5,r5,16
   87764:	d9414c15 	stw	r5,1328(sp)
   87768:	d9814c17 	ldw	r6,1328(sp)
   8776c:	3080080c 	andi	r2,r6,32
   87770:	10014f1e 	bne	r2,zero,87cb0 <___vfprintf_internal_r+0xf40>
   87774:	d8c14c17 	ldw	r3,1328(sp)
   87778:	1880040c 	andi	r2,r3,16
   8777c:	1002f01e 	bne	r2,zero,88340 <___vfprintf_internal_r+0x15d0>
   87780:	d9014c17 	ldw	r4,1328(sp)
   87784:	2080100c 	andi	r2,r4,64
   87788:	1002ed26 	beq	r2,zero,88340 <___vfprintf_internal_r+0x15d0>
   8778c:	3880000f 	ldh	r2,0(r7)
   87790:	39c00104 	addi	r7,r7,4
   87794:	d9c14015 	stw	r7,1280(sp)
   87798:	1023d7fa 	srai	r17,r2,31
   8779c:	1021883a 	mov	r16,r2
   877a0:	88037816 	blt	r17,zero,88584 <___vfprintf_internal_r+0x1814>
   877a4:	01000044 	movi	r4,1
   877a8:	98000416 	blt	r19,zero,877bc <___vfprintf_internal_r+0xa4c>
   877ac:	d8c14c17 	ldw	r3,1328(sp)
   877b0:	00bfdfc4 	movi	r2,-129
   877b4:	1886703a 	and	r3,r3,r2
   877b8:	d8c14c15 	stw	r3,1328(sp)
   877bc:	8444b03a 	or	r2,r16,r17
   877c0:	10022c1e 	bne	r2,zero,88074 <___vfprintf_internal_r+0x1304>
   877c4:	98022b1e 	bne	r19,zero,88074 <___vfprintf_internal_r+0x1304>
   877c8:	20803fcc 	andi	r2,r4,255
   877cc:	1002a126 	beq	r2,zero,88254 <___vfprintf_internal_r+0x14e4>
   877d0:	d8c01904 	addi	r3,sp,100
   877d4:	dd000f04 	addi	r20,sp,60
   877d8:	d8c14115 	stw	r3,1284(sp)
   877dc:	d8c14117 	ldw	r3,1284(sp)
   877e0:	dcc14515 	stw	r19,1300(sp)
   877e4:	a0c5c83a 	sub	r2,r20,r3
   877e8:	11c00a04 	addi	r7,r2,40
   877ec:	99c0010e 	bge	r19,r7,877f4 <___vfprintf_internal_r+0xa84>
   877f0:	d9c14515 	stw	r7,1300(sp)
   877f4:	dcc14615 	stw	r19,1304(sp)
   877f8:	d8800407 	ldb	r2,16(sp)
   877fc:	103e4c26 	beq	r2,zero,87130 <___vfprintf_internal_r+0x3c0>
   87800:	d8814517 	ldw	r2,1300(sp)
   87804:	10800044 	addi	r2,r2,1
   87808:	d8814515 	stw	r2,1300(sp)
   8780c:	003e4806 	br	87130 <___vfprintf_internal_r+0x3c0>
   87810:	d9814c17 	ldw	r6,1328(sp)
   87814:	31800414 	ori	r6,r6,16
   87818:	d9814c15 	stw	r6,1328(sp)
   8781c:	d8c14c17 	ldw	r3,1328(sp)
   87820:	1880080c 	andi	r2,r3,32
   87824:	1001271e 	bne	r2,zero,87cc4 <___vfprintf_internal_r+0xf54>
   87828:	d9414c17 	ldw	r5,1328(sp)
   8782c:	2880040c 	andi	r2,r5,16
   87830:	1002bc1e 	bne	r2,zero,88324 <___vfprintf_internal_r+0x15b4>
   87834:	d9814c17 	ldw	r6,1328(sp)
   87838:	3080100c 	andi	r2,r6,64
   8783c:	1002b926 	beq	r2,zero,88324 <___vfprintf_internal_r+0x15b4>
   87840:	3c00000b 	ldhu	r16,0(r7)
   87844:	0009883a 	mov	r4,zero
   87848:	39c00104 	addi	r7,r7,4
   8784c:	0023883a 	mov	r17,zero
   87850:	d9c14015 	stw	r7,1280(sp)
   87854:	d8000405 	stb	zero,16(sp)
   87858:	003fd306 	br	877a8 <___vfprintf_internal_r+0xa38>
   8785c:	d9014c17 	ldw	r4,1328(sp)
   87860:	21000414 	ori	r4,r4,16
   87864:	d9014c15 	stw	r4,1328(sp)
   87868:	d9414c17 	ldw	r5,1328(sp)
   8786c:	2880080c 	andi	r2,r5,32
   87870:	1001081e 	bne	r2,zero,87c94 <___vfprintf_internal_r+0xf24>
   87874:	d8c14c17 	ldw	r3,1328(sp)
   87878:	1880040c 	andi	r2,r3,16
   8787c:	1002b61e 	bne	r2,zero,88358 <___vfprintf_internal_r+0x15e8>
   87880:	d9014c17 	ldw	r4,1328(sp)
   87884:	2080100c 	andi	r2,r4,64
   87888:	1002b326 	beq	r2,zero,88358 <___vfprintf_internal_r+0x15e8>
   8788c:	3c00000b 	ldhu	r16,0(r7)
   87890:	01000044 	movi	r4,1
   87894:	39c00104 	addi	r7,r7,4
   87898:	0023883a 	mov	r17,zero
   8789c:	d9c14015 	stw	r7,1280(sp)
   878a0:	d8000405 	stb	zero,16(sp)
   878a4:	003fc006 	br	877a8 <___vfprintf_internal_r+0xa38>
   878a8:	d9014f17 	ldw	r4,1340(sp)
   878ac:	b00b883a 	mov	r5,r22
   878b0:	d9800c04 	addi	r6,sp,48
   878b4:	0086d180 	call	86d18 <__sprint_r>
   878b8:	103ee51e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   878bc:	dc800e17 	ldw	r18,56(sp)
   878c0:	d8c01904 	addi	r3,sp,100
   878c4:	d9814c17 	ldw	r6,1328(sp)
   878c8:	3080004c 	andi	r2,r6,1
   878cc:	1005003a 	cmpeq	r2,r2,zero
   878d0:	103ea51e 	bne	r2,zero,87368 <___vfprintf_internal_r+0x5f8>
   878d4:	00800044 	movi	r2,1
   878d8:	dc400d17 	ldw	r17,52(sp)
   878dc:	18800115 	stw	r2,4(r3)
   878e0:	d8814917 	ldw	r2,1316(sp)
   878e4:	94800044 	addi	r18,r18,1
   878e8:	8c400044 	addi	r17,r17,1
   878ec:	18800015 	stw	r2,0(r3)
   878f0:	008001c4 	movi	r2,7
   878f4:	dc800e15 	stw	r18,56(sp)
   878f8:	dc400d15 	stw	r17,52(sp)
   878fc:	1442240e 	bge	r2,r17,88190 <___vfprintf_internal_r+0x1420>
   87900:	d9014f17 	ldw	r4,1340(sp)
   87904:	b00b883a 	mov	r5,r22
   87908:	d9800c04 	addi	r6,sp,48
   8790c:	0086d180 	call	86d18 <__sprint_r>
   87910:	103ecf1e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   87914:	dc800e17 	ldw	r18,56(sp)
   87918:	d8c01904 	addi	r3,sp,100
   8791c:	003e9206 	br	87368 <___vfprintf_internal_r+0x5f8>
   87920:	d9014f17 	ldw	r4,1340(sp)
   87924:	b00b883a 	mov	r5,r22
   87928:	d9800c04 	addi	r6,sp,48
   8792c:	0086d180 	call	86d18 <__sprint_r>
   87930:	103ec026 	beq	r2,zero,87434 <___vfprintf_internal_r+0x6c4>
   87934:	003ec606 	br	87450 <___vfprintf_internal_r+0x6e0>
   87938:	d9014f17 	ldw	r4,1340(sp)
   8793c:	b00b883a 	mov	r5,r22
   87940:	d9800c04 	addi	r6,sp,48
   87944:	d9c15115 	stw	r7,1348(sp)
   87948:	0086d180 	call	86d18 <__sprint_r>
   8794c:	d9c15117 	ldw	r7,1348(sp)
   87950:	103ebf1e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   87954:	dc800e17 	ldw	r18,56(sp)
   87958:	dc400d17 	ldw	r17,52(sp)
   8795c:	dd401904 	addi	r21,sp,100
   87960:	003e7406 	br	87334 <___vfprintf_internal_r+0x5c4>
   87964:	d9014f17 	ldw	r4,1340(sp)
   87968:	b00b883a 	mov	r5,r22
   8796c:	d9800c04 	addi	r6,sp,48
   87970:	d9c15115 	stw	r7,1348(sp)
   87974:	0086d180 	call	86d18 <__sprint_r>
   87978:	d9c15117 	ldw	r7,1348(sp)
   8797c:	103eb41e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   87980:	dd401904 	addi	r21,sp,100
   87984:	003d6d06 	br	86f3c <___vfprintf_internal_r+0x1cc>
   87988:	d9014f17 	ldw	r4,1340(sp)
   8798c:	b00b883a 	mov	r5,r22
   87990:	d9800c04 	addi	r6,sp,48
   87994:	d9c15115 	stw	r7,1348(sp)
   87998:	0086d180 	call	86d18 <__sprint_r>
   8799c:	d9c15117 	ldw	r7,1348(sp)
   879a0:	103eab1e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   879a4:	dc800e17 	ldw	r18,56(sp)
   879a8:	dc400d17 	ldw	r17,52(sp)
   879ac:	dd401904 	addi	r21,sp,100
   879b0:	003e3406 	br	87284 <___vfprintf_internal_r+0x514>
   879b4:	d9014f17 	ldw	r4,1340(sp)
   879b8:	b00b883a 	mov	r5,r22
   879bc:	d9800c04 	addi	r6,sp,48
   879c0:	d9c15115 	stw	r7,1348(sp)
   879c4:	0086d180 	call	86d18 <__sprint_r>
   879c8:	d9c15117 	ldw	r7,1348(sp)
   879cc:	103ea01e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   879d0:	dc800e17 	ldw	r18,56(sp)
   879d4:	dc400d17 	ldw	r17,52(sp)
   879d8:	dd401904 	addi	r21,sp,100
   879dc:	003e1c06 	br	87250 <___vfprintf_internal_r+0x4e0>
   879e0:	d9014f17 	ldw	r4,1340(sp)
   879e4:	b00b883a 	mov	r5,r22
   879e8:	d9800c04 	addi	r6,sp,48
   879ec:	d9c15115 	stw	r7,1348(sp)
   879f0:	0086d180 	call	86d18 <__sprint_r>
   879f4:	d9c15117 	ldw	r7,1348(sp)
   879f8:	103e951e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   879fc:	dc800e17 	ldw	r18,56(sp)
   87a00:	dc400d17 	ldw	r17,52(sp)
   87a04:	dd401904 	addi	r21,sp,100
   87a08:	003e0406 	br	8721c <___vfprintf_internal_r+0x4ac>
   87a0c:	d9000517 	ldw	r4,20(sp)
   87a10:	0102580e 	bge	zero,r4,88374 <___vfprintf_internal_r+0x1604>
   87a14:	d9814717 	ldw	r6,1308(sp)
   87a18:	21807a16 	blt	r4,r6,87c04 <___vfprintf_internal_r+0xe94>
   87a1c:	d8814117 	ldw	r2,1284(sp)
   87a20:	91a5883a 	add	r18,r18,r6
   87a24:	8c400044 	addi	r17,r17,1
   87a28:	a8800015 	stw	r2,0(r21)
   87a2c:	008001c4 	movi	r2,7
   87a30:	a9800115 	stw	r6,4(r21)
   87a34:	dc800e15 	stw	r18,56(sp)
   87a38:	dc400d15 	stw	r17,52(sp)
   87a3c:	1442fc16 	blt	r2,r17,88630 <___vfprintf_internal_r+0x18c0>
   87a40:	a8c00204 	addi	r3,r21,8
   87a44:	d9414717 	ldw	r5,1308(sp)
   87a48:	2161c83a 	sub	r16,r4,r5
   87a4c:	043f9d0e 	bge	zero,r16,878c4 <___vfprintf_internal_r+0xb54>
   87a50:	00800404 	movi	r2,16
   87a54:	1402190e 	bge	r2,r16,882bc <___vfprintf_internal_r+0x154c>
   87a58:	dc400d17 	ldw	r17,52(sp)
   87a5c:	1027883a 	mov	r19,r2
   87a60:	07000274 	movhi	fp,9
   87a64:	e70b2184 	addi	fp,fp,11398
   87a68:	050001c4 	movi	r20,7
   87a6c:	00000306 	br	87a7c <___vfprintf_internal_r+0xd0c>
   87a70:	18c00204 	addi	r3,r3,8
   87a74:	843ffc04 	addi	r16,r16,-16
   87a78:	9c02130e 	bge	r19,r16,882c8 <___vfprintf_internal_r+0x1558>
   87a7c:	94800404 	addi	r18,r18,16
   87a80:	8c400044 	addi	r17,r17,1
   87a84:	1f000015 	stw	fp,0(r3)
   87a88:	1cc00115 	stw	r19,4(r3)
   87a8c:	dc800e15 	stw	r18,56(sp)
   87a90:	dc400d15 	stw	r17,52(sp)
   87a94:	a47ff60e 	bge	r20,r17,87a70 <___vfprintf_internal_r+0xd00>
   87a98:	d9014f17 	ldw	r4,1340(sp)
   87a9c:	b00b883a 	mov	r5,r22
   87aa0:	d9800c04 	addi	r6,sp,48
   87aa4:	0086d180 	call	86d18 <__sprint_r>
   87aa8:	103e691e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   87aac:	dc800e17 	ldw	r18,56(sp)
   87ab0:	dc400d17 	ldw	r17,52(sp)
   87ab4:	d8c01904 	addi	r3,sp,100
   87ab8:	003fee06 	br	87a74 <___vfprintf_internal_r+0xd04>
   87abc:	d8814717 	ldw	r2,1308(sp)
   87ac0:	143fffc4 	addi	r16,r2,-1
   87ac4:	043e970e 	bge	zero,r16,87524 <___vfprintf_internal_r+0x7b4>
   87ac8:	00800404 	movi	r2,16
   87acc:	1400180e 	bge	r2,r16,87b30 <___vfprintf_internal_r+0xdc0>
   87ad0:	1029883a 	mov	r20,r2
   87ad4:	07000274 	movhi	fp,9
   87ad8:	e70b2184 	addi	fp,fp,11398
   87adc:	054001c4 	movi	r21,7
   87ae0:	00000306 	br	87af0 <___vfprintf_internal_r+0xd80>
   87ae4:	9cc00204 	addi	r19,r19,8
   87ae8:	843ffc04 	addi	r16,r16,-16
   87aec:	a400120e 	bge	r20,r16,87b38 <___vfprintf_internal_r+0xdc8>
   87af0:	94800404 	addi	r18,r18,16
   87af4:	8c400044 	addi	r17,r17,1
   87af8:	9f000015 	stw	fp,0(r19)
   87afc:	9d000115 	stw	r20,4(r19)
   87b00:	dc800e15 	stw	r18,56(sp)
   87b04:	dc400d15 	stw	r17,52(sp)
   87b08:	ac7ff60e 	bge	r21,r17,87ae4 <___vfprintf_internal_r+0xd74>
   87b0c:	d9014f17 	ldw	r4,1340(sp)
   87b10:	b00b883a 	mov	r5,r22
   87b14:	d9800c04 	addi	r6,sp,48
   87b18:	0086d180 	call	86d18 <__sprint_r>
   87b1c:	103e4c1e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   87b20:	dc800e17 	ldw	r18,56(sp)
   87b24:	dc400d17 	ldw	r17,52(sp)
   87b28:	dcc01904 	addi	r19,sp,100
   87b2c:	003fee06 	br	87ae8 <___vfprintf_internal_r+0xd78>
   87b30:	07000274 	movhi	fp,9
   87b34:	e70b2184 	addi	fp,fp,11398
   87b38:	9425883a 	add	r18,r18,r16
   87b3c:	8c400044 	addi	r17,r17,1
   87b40:	008001c4 	movi	r2,7
   87b44:	9f000015 	stw	fp,0(r19)
   87b48:	9c000115 	stw	r16,4(r19)
   87b4c:	dc800e15 	stw	r18,56(sp)
   87b50:	dc400d15 	stw	r17,52(sp)
   87b54:	147e720e 	bge	r2,r17,87520 <___vfprintf_internal_r+0x7b0>
   87b58:	d9014f17 	ldw	r4,1340(sp)
   87b5c:	b00b883a 	mov	r5,r22
   87b60:	d9800c04 	addi	r6,sp,48
   87b64:	0086d180 	call	86d18 <__sprint_r>
   87b68:	103e391e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   87b6c:	dc800e17 	ldw	r18,56(sp)
   87b70:	dc400d17 	ldw	r17,52(sp)
   87b74:	dcc01904 	addi	r19,sp,100
   87b78:	003e6a06 	br	87524 <___vfprintf_internal_r+0x7b4>
   87b7c:	d9014f17 	ldw	r4,1340(sp)
   87b80:	b00b883a 	mov	r5,r22
   87b84:	d9800c04 	addi	r6,sp,48
   87b88:	d9c15115 	stw	r7,1348(sp)
   87b8c:	0086d180 	call	86d18 <__sprint_r>
   87b90:	d9c15117 	ldw	r7,1348(sp)
   87b94:	103e2e1e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   87b98:	dc800e17 	ldw	r18,56(sp)
   87b9c:	dc400d17 	ldw	r17,52(sp)
   87ba0:	dd401904 	addi	r21,sp,100
   87ba4:	003dba06 	br	87290 <___vfprintf_internal_r+0x520>
   87ba8:	d9014f17 	ldw	r4,1340(sp)
   87bac:	b00b883a 	mov	r5,r22
   87bb0:	d9800c04 	addi	r6,sp,48
   87bb4:	0086d180 	call	86d18 <__sprint_r>
   87bb8:	103e251e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   87bbc:	dc800e17 	ldw	r18,56(sp)
   87bc0:	dc400d17 	ldw	r17,52(sp)
   87bc4:	dcc01904 	addi	r19,sp,100
   87bc8:	003e4206 	br	874d4 <___vfprintf_internal_r+0x764>
   87bcc:	d9014f17 	ldw	r4,1340(sp)
   87bd0:	b00b883a 	mov	r5,r22
   87bd4:	d9800c04 	addi	r6,sp,48
   87bd8:	0086d180 	call	86d18 <__sprint_r>
   87bdc:	103e1c1e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   87be0:	dc800e17 	ldw	r18,56(sp)
   87be4:	dc400d17 	ldw	r17,52(sp)
   87be8:	d8c01904 	addi	r3,sp,100
   87bec:	003e2e06 	br	874a8 <___vfprintf_internal_r+0x738>
   87bf0:	d9414c17 	ldw	r5,1328(sp)
   87bf4:	2880004c 	andi	r2,r5,1
   87bf8:	1005003a 	cmpeq	r2,r2,zero
   87bfc:	103dda1e 	bne	r2,zero,87368 <___vfprintf_internal_r+0x5f8>
   87c00:	003e9f06 	br	87680 <___vfprintf_internal_r+0x910>
   87c04:	d8c14117 	ldw	r3,1284(sp)
   87c08:	9125883a 	add	r18,r18,r4
   87c0c:	8c400044 	addi	r17,r17,1
   87c10:	008001c4 	movi	r2,7
   87c14:	a8c00015 	stw	r3,0(r21)
   87c18:	a9000115 	stw	r4,4(r21)
   87c1c:	dc800e15 	stw	r18,56(sp)
   87c20:	dc400d15 	stw	r17,52(sp)
   87c24:	14426c16 	blt	r2,r17,885d8 <___vfprintf_internal_r+0x1868>
   87c28:	a8c00204 	addi	r3,r21,8
   87c2c:	d9414917 	ldw	r5,1316(sp)
   87c30:	00800044 	movi	r2,1
   87c34:	94800044 	addi	r18,r18,1
   87c38:	8c400044 	addi	r17,r17,1
   87c3c:	18800115 	stw	r2,4(r3)
   87c40:	008001c4 	movi	r2,7
   87c44:	19400015 	stw	r5,0(r3)
   87c48:	dc800e15 	stw	r18,56(sp)
   87c4c:	dc400d15 	stw	r17,52(sp)
   87c50:	2021883a 	mov	r16,r4
   87c54:	14425616 	blt	r2,r17,885b0 <___vfprintf_internal_r+0x1840>
   87c58:	19400204 	addi	r5,r3,8
   87c5c:	d9814717 	ldw	r6,1308(sp)
   87c60:	8c400044 	addi	r17,r17,1
   87c64:	dc400d15 	stw	r17,52(sp)
   87c68:	3107c83a 	sub	r3,r6,r4
   87c6c:	d9014117 	ldw	r4,1284(sp)
   87c70:	90e5883a 	add	r18,r18,r3
   87c74:	28c00115 	stw	r3,4(r5)
   87c78:	8105883a 	add	r2,r16,r4
   87c7c:	28800015 	stw	r2,0(r5)
   87c80:	008001c4 	movi	r2,7
   87c84:	dc800e15 	stw	r18,56(sp)
   87c88:	147f1d16 	blt	r2,r17,87900 <___vfprintf_internal_r+0xb90>
   87c8c:	28c00204 	addi	r3,r5,8
   87c90:	003db506 	br	87368 <___vfprintf_internal_r+0x5f8>
   87c94:	3c000017 	ldw	r16,0(r7)
   87c98:	3c400117 	ldw	r17,4(r7)
   87c9c:	39800204 	addi	r6,r7,8
   87ca0:	01000044 	movi	r4,1
   87ca4:	d9814015 	stw	r6,1280(sp)
   87ca8:	d8000405 	stb	zero,16(sp)
   87cac:	003ebe06 	br	877a8 <___vfprintf_internal_r+0xa38>
   87cb0:	3c000017 	ldw	r16,0(r7)
   87cb4:	3c400117 	ldw	r17,4(r7)
   87cb8:	38800204 	addi	r2,r7,8
   87cbc:	d8814015 	stw	r2,1280(sp)
   87cc0:	003eb706 	br	877a0 <___vfprintf_internal_r+0xa30>
   87cc4:	3c000017 	ldw	r16,0(r7)
   87cc8:	3c400117 	ldw	r17,4(r7)
   87ccc:	39000204 	addi	r4,r7,8
   87cd0:	d9014015 	stw	r4,1280(sp)
   87cd4:	0009883a 	mov	r4,zero
   87cd8:	d8000405 	stb	zero,16(sp)
   87cdc:	003eb206 	br	877a8 <___vfprintf_internal_r+0xa38>
   87ce0:	38c00017 	ldw	r3,0(r7)
   87ce4:	39c00104 	addi	r7,r7,4
   87ce8:	d8c14a15 	stw	r3,1320(sp)
   87cec:	1800d70e 	bge	r3,zero,8804c <___vfprintf_internal_r+0x12dc>
   87cf0:	00c7c83a 	sub	r3,zero,r3
   87cf4:	d8c14a15 	stw	r3,1320(sp)
   87cf8:	d9014c17 	ldw	r4,1328(sp)
   87cfc:	b8c00007 	ldb	r3,0(r23)
   87d00:	21000114 	ori	r4,r4,4
   87d04:	d9014c15 	stw	r4,1328(sp)
   87d08:	003c9806 	br	86f6c <___vfprintf_internal_r+0x1fc>
   87d0c:	d9814c17 	ldw	r6,1328(sp)
   87d10:	3080080c 	andi	r2,r6,32
   87d14:	1001f626 	beq	r2,zero,884f0 <___vfprintf_internal_r+0x1780>
   87d18:	d9014b17 	ldw	r4,1324(sp)
   87d1c:	38800017 	ldw	r2,0(r7)
   87d20:	39c00104 	addi	r7,r7,4
   87d24:	d9c14015 	stw	r7,1280(sp)
   87d28:	2007d7fa 	srai	r3,r4,31
   87d2c:	d9c14017 	ldw	r7,1280(sp)
   87d30:	11000015 	stw	r4,0(r2)
   87d34:	10c00115 	stw	r3,4(r2)
   87d38:	003c6906 	br	86ee0 <___vfprintf_internal_r+0x170>
   87d3c:	b8c00007 	ldb	r3,0(r23)
   87d40:	00801b04 	movi	r2,108
   87d44:	18825526 	beq	r3,r2,8869c <___vfprintf_internal_r+0x192c>
   87d48:	d9414c17 	ldw	r5,1328(sp)
   87d4c:	29400414 	ori	r5,r5,16
   87d50:	d9414c15 	stw	r5,1328(sp)
   87d54:	003c8506 	br	86f6c <___vfprintf_internal_r+0x1fc>
   87d58:	d9814c17 	ldw	r6,1328(sp)
   87d5c:	b8c00007 	ldb	r3,0(r23)
   87d60:	31800814 	ori	r6,r6,32
   87d64:	d9814c15 	stw	r6,1328(sp)
   87d68:	003c8006 	br	86f6c <___vfprintf_internal_r+0x1fc>
   87d6c:	d8814c17 	ldw	r2,1328(sp)
   87d70:	3c000017 	ldw	r16,0(r7)
   87d74:	00c01e04 	movi	r3,120
   87d78:	10800094 	ori	r2,r2,2
   87d7c:	d8814c15 	stw	r2,1328(sp)
   87d80:	39c00104 	addi	r7,r7,4
   87d84:	01400274 	movhi	r5,9
   87d88:	294b0a04 	addi	r5,r5,11304
   87d8c:	00800c04 	movi	r2,48
   87d90:	0023883a 	mov	r17,zero
   87d94:	01000084 	movi	r4,2
   87d98:	d9c14015 	stw	r7,1280(sp)
   87d9c:	d8c14d15 	stw	r3,1332(sp)
   87da0:	d9414415 	stw	r5,1296(sp)
   87da4:	d8800445 	stb	r2,17(sp)
   87da8:	d8c00485 	stb	r3,18(sp)
   87dac:	d8000405 	stb	zero,16(sp)
   87db0:	003e7d06 	br	877a8 <___vfprintf_internal_r+0xa38>
   87db4:	d8814c17 	ldw	r2,1328(sp)
   87db8:	b8c00007 	ldb	r3,0(r23)
   87dbc:	10801014 	ori	r2,r2,64
   87dc0:	d8814c15 	stw	r2,1328(sp)
   87dc4:	003c6906 	br	86f6c <___vfprintf_internal_r+0x1fc>
   87dc8:	d9414c17 	ldw	r5,1328(sp)
   87dcc:	2880020c 	andi	r2,r5,8
   87dd0:	1001e526 	beq	r2,zero,88568 <___vfprintf_internal_r+0x17f8>
   87dd4:	39800017 	ldw	r6,0(r7)
   87dd8:	38800204 	addi	r2,r7,8
   87ddc:	d8814015 	stw	r2,1280(sp)
   87de0:	d9814215 	stw	r6,1288(sp)
   87de4:	39c00117 	ldw	r7,4(r7)
   87de8:	d9c14315 	stw	r7,1292(sp)
   87dec:	d9014217 	ldw	r4,1288(sp)
   87df0:	d9414317 	ldw	r5,1292(sp)
   87df4:	008c6b80 	call	8c6b8 <__isinfd>
   87df8:	10021d26 	beq	r2,zero,88670 <___vfprintf_internal_r+0x1900>
   87dfc:	d9014217 	ldw	r4,1288(sp)
   87e00:	d9414317 	ldw	r5,1292(sp)
   87e04:	000d883a 	mov	r6,zero
   87e08:	000f883a 	mov	r7,zero
   87e0c:	008d6000 	call	8d600 <__ltdf2>
   87e10:	1002d016 	blt	r2,zero,88954 <___vfprintf_internal_r+0x1be4>
   87e14:	d9414d17 	ldw	r5,1332(sp)
   87e18:	008011c4 	movi	r2,71
   87e1c:	11421016 	blt	r2,r5,88660 <___vfprintf_internal_r+0x18f0>
   87e20:	01800274 	movhi	r6,9
   87e24:	318b0f04 	addi	r6,r6,11324
   87e28:	d9814115 	stw	r6,1284(sp)
   87e2c:	d9014c17 	ldw	r4,1328(sp)
   87e30:	00c000c4 	movi	r3,3
   87e34:	00bfdfc4 	movi	r2,-129
   87e38:	2088703a 	and	r4,r4,r2
   87e3c:	180f883a 	mov	r7,r3
   87e40:	d8c14515 	stw	r3,1300(sp)
   87e44:	d9014c15 	stw	r4,1328(sp)
   87e48:	d8014615 	stw	zero,1304(sp)
   87e4c:	003e6a06 	br	877f8 <___vfprintf_internal_r+0xa88>
   87e50:	38800017 	ldw	r2,0(r7)
   87e54:	00c00044 	movi	r3,1
   87e58:	39c00104 	addi	r7,r7,4
   87e5c:	d9c14015 	stw	r7,1280(sp)
   87e60:	d9000f04 	addi	r4,sp,60
   87e64:	180f883a 	mov	r7,r3
   87e68:	d8c14515 	stw	r3,1300(sp)
   87e6c:	d9014115 	stw	r4,1284(sp)
   87e70:	d8800f05 	stb	r2,60(sp)
   87e74:	d8000405 	stb	zero,16(sp)
   87e78:	003cac06 	br	8712c <___vfprintf_internal_r+0x3bc>
   87e7c:	01400274 	movhi	r5,9
   87e80:	294b1504 	addi	r5,r5,11348
   87e84:	d9414415 	stw	r5,1296(sp)
   87e88:	d9814c17 	ldw	r6,1328(sp)
   87e8c:	3080080c 	andi	r2,r6,32
   87e90:	1000ff26 	beq	r2,zero,88290 <___vfprintf_internal_r+0x1520>
   87e94:	3c000017 	ldw	r16,0(r7)
   87e98:	3c400117 	ldw	r17,4(r7)
   87e9c:	38800204 	addi	r2,r7,8
   87ea0:	d8814015 	stw	r2,1280(sp)
   87ea4:	d9414c17 	ldw	r5,1328(sp)
   87ea8:	2880004c 	andi	r2,r5,1
   87eac:	1005003a 	cmpeq	r2,r2,zero
   87eb0:	1000b91e 	bne	r2,zero,88198 <___vfprintf_internal_r+0x1428>
   87eb4:	8444b03a 	or	r2,r16,r17
   87eb8:	1000b726 	beq	r2,zero,88198 <___vfprintf_internal_r+0x1428>
   87ebc:	d9814d17 	ldw	r6,1332(sp)
   87ec0:	29400094 	ori	r5,r5,2
   87ec4:	00800c04 	movi	r2,48
   87ec8:	01000084 	movi	r4,2
   87ecc:	d9414c15 	stw	r5,1328(sp)
   87ed0:	d8800445 	stb	r2,17(sp)
   87ed4:	d9800485 	stb	r6,18(sp)
   87ed8:	d8000405 	stb	zero,16(sp)
   87edc:	003e3206 	br	877a8 <___vfprintf_internal_r+0xa38>
   87ee0:	01800274 	movhi	r6,9
   87ee4:	318b0a04 	addi	r6,r6,11304
   87ee8:	d9814415 	stw	r6,1296(sp)
   87eec:	003fe606 	br	87e88 <___vfprintf_internal_r+0x1118>
   87ef0:	00800ac4 	movi	r2,43
   87ef4:	d8800405 	stb	r2,16(sp)
   87ef8:	b8c00007 	ldb	r3,0(r23)
   87efc:	003c1b06 	br	86f6c <___vfprintf_internal_r+0x1fc>
   87f00:	d8814c17 	ldw	r2,1328(sp)
   87f04:	b8c00007 	ldb	r3,0(r23)
   87f08:	10800054 	ori	r2,r2,1
   87f0c:	d8814c15 	stw	r2,1328(sp)
   87f10:	003c1606 	br	86f6c <___vfprintf_internal_r+0x1fc>
   87f14:	d8800407 	ldb	r2,16(sp)
   87f18:	10004c1e 	bne	r2,zero,8804c <___vfprintf_internal_r+0x12dc>
   87f1c:	00800804 	movi	r2,32
   87f20:	d8800405 	stb	r2,16(sp)
   87f24:	b8c00007 	ldb	r3,0(r23)
   87f28:	003c1006 	br	86f6c <___vfprintf_internal_r+0x1fc>
   87f2c:	d9814c17 	ldw	r6,1328(sp)
   87f30:	b8c00007 	ldb	r3,0(r23)
   87f34:	31800214 	ori	r6,r6,8
   87f38:	d9814c15 	stw	r6,1328(sp)
   87f3c:	003c0b06 	br	86f6c <___vfprintf_internal_r+0x1fc>
   87f40:	0009883a 	mov	r4,zero
   87f44:	04000244 	movi	r16,9
   87f48:	01400284 	movi	r5,10
   87f4c:	d9c15115 	stw	r7,1348(sp)
   87f50:	00843d00 	call	843d0 <__mulsi3>
   87f54:	b9000007 	ldb	r4,0(r23)
   87f58:	d8c14d17 	ldw	r3,1332(sp)
   87f5c:	bdc00044 	addi	r23,r23,1
   87f60:	d9014d15 	stw	r4,1332(sp)
   87f64:	d9414d17 	ldw	r5,1332(sp)
   87f68:	1885883a 	add	r2,r3,r2
   87f6c:	113ff404 	addi	r4,r2,-48
   87f70:	28bff404 	addi	r2,r5,-48
   87f74:	d9c15117 	ldw	r7,1348(sp)
   87f78:	80bff32e 	bgeu	r16,r2,87f48 <___vfprintf_internal_r+0x11d8>
   87f7c:	d9014a15 	stw	r4,1320(sp)
   87f80:	003bfc06 	br	86f74 <___vfprintf_internal_r+0x204>
   87f84:	d8814c17 	ldw	r2,1328(sp)
   87f88:	b8c00007 	ldb	r3,0(r23)
   87f8c:	10802014 	ori	r2,r2,128
   87f90:	d8814c15 	stw	r2,1328(sp)
   87f94:	003bf506 	br	86f6c <___vfprintf_internal_r+0x1fc>
   87f98:	b8c00007 	ldb	r3,0(r23)
   87f9c:	00800a84 	movi	r2,42
   87fa0:	bdc00044 	addi	r23,r23,1
   87fa4:	18831826 	beq	r3,r2,88c08 <___vfprintf_internal_r+0x1e98>
   87fa8:	d8c14d15 	stw	r3,1332(sp)
   87fac:	18bff404 	addi	r2,r3,-48
   87fb0:	00c00244 	movi	r3,9
   87fb4:	18827b36 	bltu	r3,r2,889a4 <___vfprintf_internal_r+0x1c34>
   87fb8:	1821883a 	mov	r16,r3
   87fbc:	0009883a 	mov	r4,zero
   87fc0:	01400284 	movi	r5,10
   87fc4:	d9c15115 	stw	r7,1348(sp)
   87fc8:	00843d00 	call	843d0 <__mulsi3>
   87fcc:	d9414d17 	ldw	r5,1332(sp)
   87fd0:	b9800007 	ldb	r6,0(r23)
   87fd4:	d9c15117 	ldw	r7,1348(sp)
   87fd8:	1145883a 	add	r2,r2,r5
   87fdc:	113ff404 	addi	r4,r2,-48
   87fe0:	30bff404 	addi	r2,r6,-48
   87fe4:	d9814d15 	stw	r6,1332(sp)
   87fe8:	bdc00044 	addi	r23,r23,1
   87fec:	80bff42e 	bgeu	r16,r2,87fc0 <___vfprintf_internal_r+0x1250>
   87ff0:	2027883a 	mov	r19,r4
   87ff4:	203bdf0e 	bge	r4,zero,86f74 <___vfprintf_internal_r+0x204>
   87ff8:	04ffffc4 	movi	r19,-1
   87ffc:	003bdd06 	br	86f74 <___vfprintf_internal_r+0x204>
   88000:	d8000405 	stb	zero,16(sp)
   88004:	39800017 	ldw	r6,0(r7)
   88008:	39c00104 	addi	r7,r7,4
   8800c:	d9c14015 	stw	r7,1280(sp)
   88010:	d9814115 	stw	r6,1284(sp)
   88014:	3001c926 	beq	r6,zero,8873c <___vfprintf_internal_r+0x19cc>
   88018:	98000e16 	blt	r19,zero,88054 <___vfprintf_internal_r+0x12e4>
   8801c:	d9014117 	ldw	r4,1284(sp)
   88020:	000b883a 	mov	r5,zero
   88024:	980d883a 	mov	r6,r19
   88028:	008ad5c0 	call	8ad5c <memchr>
   8802c:	10025926 	beq	r2,zero,88994 <___vfprintf_internal_r+0x1c24>
   88030:	d8c14117 	ldw	r3,1284(sp)
   88034:	10cfc83a 	sub	r7,r2,r3
   88038:	99c19e16 	blt	r19,r7,886b4 <___vfprintf_internal_r+0x1944>
   8803c:	d9c14515 	stw	r7,1300(sp)
   88040:	38000916 	blt	r7,zero,88068 <___vfprintf_internal_r+0x12f8>
   88044:	d8014615 	stw	zero,1304(sp)
   88048:	003deb06 	br	877f8 <___vfprintf_internal_r+0xa88>
   8804c:	b8c00007 	ldb	r3,0(r23)
   88050:	003bc606 	br	86f6c <___vfprintf_internal_r+0x1fc>
   88054:	d9014117 	ldw	r4,1284(sp)
   88058:	0086ca40 	call	86ca4 <strlen>
   8805c:	d8814515 	stw	r2,1300(sp)
   88060:	100f883a 	mov	r7,r2
   88064:	103ff70e 	bge	r2,zero,88044 <___vfprintf_internal_r+0x12d4>
   88068:	d8014515 	stw	zero,1300(sp)
   8806c:	d8014615 	stw	zero,1304(sp)
   88070:	003de106 	br	877f8 <___vfprintf_internal_r+0xa88>
   88074:	20c03fcc 	andi	r3,r4,255
   88078:	00800044 	movi	r2,1
   8807c:	18802d26 	beq	r3,r2,88134 <___vfprintf_internal_r+0x13c4>
   88080:	18800e36 	bltu	r3,r2,880bc <___vfprintf_internal_r+0x134c>
   88084:	00800084 	movi	r2,2
   88088:	1880fa26 	beq	r3,r2,88474 <___vfprintf_internal_r+0x1704>
   8808c:	01000274 	movhi	r4,9
   88090:	210b1a04 	addi	r4,r4,11368
   88094:	0086ca40 	call	86ca4 <strlen>
   88098:	100f883a 	mov	r7,r2
   8809c:	dcc14515 	stw	r19,1300(sp)
   880a0:	9880010e 	bge	r19,r2,880a8 <___vfprintf_internal_r+0x1338>
   880a4:	d8814515 	stw	r2,1300(sp)
   880a8:	00800274 	movhi	r2,9
   880ac:	108b1a04 	addi	r2,r2,11368
   880b0:	dcc14615 	stw	r19,1304(sp)
   880b4:	d8814115 	stw	r2,1284(sp)
   880b8:	003dcf06 	br	877f8 <___vfprintf_internal_r+0xa88>
   880bc:	d9401904 	addi	r5,sp,100
   880c0:	dd000f04 	addi	r20,sp,60
   880c4:	d9414115 	stw	r5,1284(sp)
   880c8:	880a977a 	slli	r5,r17,29
   880cc:	d9814117 	ldw	r6,1284(sp)
   880d0:	8004d0fa 	srli	r2,r16,3
   880d4:	8806d0fa 	srli	r3,r17,3
   880d8:	810001cc 	andi	r4,r16,7
   880dc:	2884b03a 	or	r2,r5,r2
   880e0:	31bfffc4 	addi	r6,r6,-1
   880e4:	21000c04 	addi	r4,r4,48
   880e8:	d9814115 	stw	r6,1284(sp)
   880ec:	10cab03a 	or	r5,r2,r3
   880f0:	31000005 	stb	r4,0(r6)
   880f4:	1021883a 	mov	r16,r2
   880f8:	1823883a 	mov	r17,r3
   880fc:	283ff21e 	bne	r5,zero,880c8 <___vfprintf_internal_r+0x1358>
   88100:	d8c14c17 	ldw	r3,1328(sp)
   88104:	1880004c 	andi	r2,r3,1
   88108:	1005003a 	cmpeq	r2,r2,zero
   8810c:	103db31e 	bne	r2,zero,877dc <___vfprintf_internal_r+0xa6c>
   88110:	20803fcc 	andi	r2,r4,255
   88114:	1080201c 	xori	r2,r2,128
   88118:	10bfe004 	addi	r2,r2,-128
   8811c:	00c00c04 	movi	r3,48
   88120:	10fdae26 	beq	r2,r3,877dc <___vfprintf_internal_r+0xa6c>
   88124:	31bfffc4 	addi	r6,r6,-1
   88128:	d9814115 	stw	r6,1284(sp)
   8812c:	30c00005 	stb	r3,0(r6)
   88130:	003daa06 	br	877dc <___vfprintf_internal_r+0xa6c>
   88134:	88800068 	cmpgeui	r2,r17,1
   88138:	10002c1e 	bne	r2,zero,881ec <___vfprintf_internal_r+0x147c>
   8813c:	8800021e 	bne	r17,zero,88148 <___vfprintf_internal_r+0x13d8>
   88140:	00800244 	movi	r2,9
   88144:	14002936 	bltu	r2,r16,881ec <___vfprintf_internal_r+0x147c>
   88148:	d90018c4 	addi	r4,sp,99
   8814c:	dd000f04 	addi	r20,sp,60
   88150:	d9014115 	stw	r4,1284(sp)
   88154:	d9014117 	ldw	r4,1284(sp)
   88158:	80800c04 	addi	r2,r16,48
   8815c:	20800005 	stb	r2,0(r4)
   88160:	003d9e06 	br	877dc <___vfprintf_internal_r+0xa6c>
   88164:	dc400d17 	ldw	r17,52(sp)
   88168:	07000274 	movhi	fp,9
   8816c:	e70b2184 	addi	fp,fp,11398
   88170:	9425883a 	add	r18,r18,r16
   88174:	8c400044 	addi	r17,r17,1
   88178:	008001c4 	movi	r2,7
   8817c:	1f000015 	stw	fp,0(r3)
   88180:	1c000115 	stw	r16,4(r3)
   88184:	dc800e15 	stw	r18,56(sp)
   88188:	dc400d15 	stw	r17,52(sp)
   8818c:	147ddc16 	blt	r2,r17,87900 <___vfprintf_internal_r+0xb90>
   88190:	18c00204 	addi	r3,r3,8
   88194:	003c7406 	br	87368 <___vfprintf_internal_r+0x5f8>
   88198:	01000084 	movi	r4,2
   8819c:	d8000405 	stb	zero,16(sp)
   881a0:	003d8106 	br	877a8 <___vfprintf_internal_r+0xa38>
   881a4:	d9814c17 	ldw	r6,1328(sp)
   881a8:	30c4703a 	and	r2,r6,r3
   881ac:	1005003a 	cmpeq	r2,r2,zero
   881b0:	103cb326 	beq	r2,zero,87480 <___vfprintf_internal_r+0x710>
   881b4:	d9014117 	ldw	r4,1284(sp)
   881b8:	94800044 	addi	r18,r18,1
   881bc:	8c400044 	addi	r17,r17,1
   881c0:	008001c4 	movi	r2,7
   881c4:	a9000015 	stw	r4,0(r21)
   881c8:	a8c00115 	stw	r3,4(r21)
   881cc:	dc800e15 	stw	r18,56(sp)
   881d0:	dc400d15 	stw	r17,52(sp)
   881d4:	147e6016 	blt	r2,r17,87b58 <___vfprintf_internal_r+0xde8>
   881d8:	acc00204 	addi	r19,r21,8
   881dc:	003cd106 	br	87524 <___vfprintf_internal_r+0x7b4>
   881e0:	07000274 	movhi	fp,9
   881e4:	e70b2184 	addi	fp,fp,11398
   881e8:	003c4906 	br	87310 <___vfprintf_internal_r+0x5a0>
   881ec:	dd000f04 	addi	r20,sp,60
   881f0:	dc801904 	addi	r18,sp,100
   881f4:	8009883a 	mov	r4,r16
   881f8:	880b883a 	mov	r5,r17
   881fc:	01800284 	movi	r6,10
   88200:	000f883a 	mov	r7,zero
   88204:	008cf180 	call	8cf18 <__umoddi3>
   88208:	12000c04 	addi	r8,r2,48
   8820c:	94bfffc4 	addi	r18,r18,-1
   88210:	8009883a 	mov	r4,r16
   88214:	880b883a 	mov	r5,r17
   88218:	01800284 	movi	r6,10
   8821c:	000f883a 	mov	r7,zero
   88220:	92000005 	stb	r8,0(r18)
   88224:	008c8ac0 	call	8c8ac <__udivdi3>
   88228:	1009883a 	mov	r4,r2
   8822c:	1021883a 	mov	r16,r2
   88230:	18800068 	cmpgeui	r2,r3,1
   88234:	1823883a 	mov	r17,r3
   88238:	103fee1e 	bne	r2,zero,881f4 <___vfprintf_internal_r+0x1484>
   8823c:	1800021e 	bne	r3,zero,88248 <___vfprintf_internal_r+0x14d8>
   88240:	00800244 	movi	r2,9
   88244:	113feb36 	bltu	r2,r4,881f4 <___vfprintf_internal_r+0x1484>
   88248:	94bfffc4 	addi	r18,r18,-1
   8824c:	dc814115 	stw	r18,1284(sp)
   88250:	003fc006 	br	88154 <___vfprintf_internal_r+0x13e4>
   88254:	d9014c17 	ldw	r4,1328(sp)
   88258:	2080004c 	andi	r2,r4,1
   8825c:	10009a1e 	bne	r2,zero,884c8 <___vfprintf_internal_r+0x1758>
   88260:	d9401904 	addi	r5,sp,100
   88264:	dd000f04 	addi	r20,sp,60
   88268:	d9414115 	stw	r5,1284(sp)
   8826c:	003d5b06 	br	877dc <___vfprintf_internal_r+0xa6c>
   88270:	d9014f17 	ldw	r4,1340(sp)
   88274:	b00b883a 	mov	r5,r22
   88278:	d9800c04 	addi	r6,sp,48
   8827c:	0086d180 	call	86d18 <__sprint_r>
   88280:	103c731e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   88284:	dc800e17 	ldw	r18,56(sp)
   88288:	d8c01904 	addi	r3,sp,100
   8828c:	003cf906 	br	87674 <___vfprintf_internal_r+0x904>
   88290:	d8c14c17 	ldw	r3,1328(sp)
   88294:	1880040c 	andi	r2,r3,16
   88298:	1000711e 	bne	r2,zero,88460 <___vfprintf_internal_r+0x16f0>
   8829c:	d9014c17 	ldw	r4,1328(sp)
   882a0:	2080100c 	andi	r2,r4,64
   882a4:	10006e26 	beq	r2,zero,88460 <___vfprintf_internal_r+0x16f0>
   882a8:	3c00000b 	ldhu	r16,0(r7)
   882ac:	0023883a 	mov	r17,zero
   882b0:	39c00104 	addi	r7,r7,4
   882b4:	d9c14015 	stw	r7,1280(sp)
   882b8:	003efa06 	br	87ea4 <___vfprintf_internal_r+0x1134>
   882bc:	dc400d17 	ldw	r17,52(sp)
   882c0:	07000274 	movhi	fp,9
   882c4:	e70b2184 	addi	fp,fp,11398
   882c8:	9425883a 	add	r18,r18,r16
   882cc:	8c400044 	addi	r17,r17,1
   882d0:	008001c4 	movi	r2,7
   882d4:	1f000015 	stw	fp,0(r3)
   882d8:	1c000115 	stw	r16,4(r3)
   882dc:	dc800e15 	stw	r18,56(sp)
   882e0:	dc400d15 	stw	r17,52(sp)
   882e4:	147d7016 	blt	r2,r17,878a8 <___vfprintf_internal_r+0xb38>
   882e8:	18c00204 	addi	r3,r3,8
   882ec:	003d7506 	br	878c4 <___vfprintf_internal_r+0xb54>
   882f0:	dc800e17 	ldw	r18,56(sp)
   882f4:	dc400d17 	ldw	r17,52(sp)
   882f8:	07000274 	movhi	fp,9
   882fc:	e70b2584 	addi	fp,fp,11414
   88300:	003bba06 	br	871ec <___vfprintf_internal_r+0x47c>
   88304:	d9014f17 	ldw	r4,1340(sp)
   88308:	b00b883a 	mov	r5,r22
   8830c:	d9800c04 	addi	r6,sp,48
   88310:	0086d180 	call	86d18 <__sprint_r>
   88314:	103c4e1e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   88318:	dc800e17 	ldw	r18,56(sp)
   8831c:	d8c01904 	addi	r3,sp,100
   88320:	003ce306 	br	876b0 <___vfprintf_internal_r+0x940>
   88324:	3c000017 	ldw	r16,0(r7)
   88328:	0009883a 	mov	r4,zero
   8832c:	39c00104 	addi	r7,r7,4
   88330:	0023883a 	mov	r17,zero
   88334:	d9c14015 	stw	r7,1280(sp)
   88338:	d8000405 	stb	zero,16(sp)
   8833c:	003d1a06 	br	877a8 <___vfprintf_internal_r+0xa38>
   88340:	38800017 	ldw	r2,0(r7)
   88344:	39c00104 	addi	r7,r7,4
   88348:	d9c14015 	stw	r7,1280(sp)
   8834c:	1023d7fa 	srai	r17,r2,31
   88350:	1021883a 	mov	r16,r2
   88354:	003d1206 	br	877a0 <___vfprintf_internal_r+0xa30>
   88358:	3c000017 	ldw	r16,0(r7)
   8835c:	01000044 	movi	r4,1
   88360:	39c00104 	addi	r7,r7,4
   88364:	0023883a 	mov	r17,zero
   88368:	d9c14015 	stw	r7,1280(sp)
   8836c:	d8000405 	stb	zero,16(sp)
   88370:	003d0d06 	br	877a8 <___vfprintf_internal_r+0xa38>
   88374:	00800274 	movhi	r2,9
   88378:	108b2104 	addi	r2,r2,11396
   8837c:	94800044 	addi	r18,r18,1
   88380:	8c400044 	addi	r17,r17,1
   88384:	a8800015 	stw	r2,0(r21)
   88388:	00c00044 	movi	r3,1
   8838c:	008001c4 	movi	r2,7
   88390:	a8c00115 	stw	r3,4(r21)
   88394:	dc800e15 	stw	r18,56(sp)
   88398:	dc400d15 	stw	r17,52(sp)
   8839c:	1440ca16 	blt	r2,r17,886c8 <___vfprintf_internal_r+0x1958>
   883a0:	a8c00204 	addi	r3,r21,8
   883a4:	2000061e 	bne	r4,zero,883c0 <___vfprintf_internal_r+0x1650>
   883a8:	d9414717 	ldw	r5,1308(sp)
   883ac:	2800041e 	bne	r5,zero,883c0 <___vfprintf_internal_r+0x1650>
   883b0:	d9814c17 	ldw	r6,1328(sp)
   883b4:	3080004c 	andi	r2,r6,1
   883b8:	1005003a 	cmpeq	r2,r2,zero
   883bc:	103bea1e 	bne	r2,zero,87368 <___vfprintf_internal_r+0x5f8>
   883c0:	00800044 	movi	r2,1
   883c4:	dc400d17 	ldw	r17,52(sp)
   883c8:	18800115 	stw	r2,4(r3)
   883cc:	d8814917 	ldw	r2,1316(sp)
   883d0:	94800044 	addi	r18,r18,1
   883d4:	8c400044 	addi	r17,r17,1
   883d8:	18800015 	stw	r2,0(r3)
   883dc:	008001c4 	movi	r2,7
   883e0:	dc800e15 	stw	r18,56(sp)
   883e4:	dc400d15 	stw	r17,52(sp)
   883e8:	1440ca16 	blt	r2,r17,88714 <___vfprintf_internal_r+0x19a4>
   883ec:	18c00204 	addi	r3,r3,8
   883f0:	0121c83a 	sub	r16,zero,r4
   883f4:	0400500e 	bge	zero,r16,88538 <___vfprintf_internal_r+0x17c8>
   883f8:	00800404 	movi	r2,16
   883fc:	1400800e 	bge	r2,r16,88600 <___vfprintf_internal_r+0x1890>
   88400:	1027883a 	mov	r19,r2
   88404:	07000274 	movhi	fp,9
   88408:	e70b2184 	addi	fp,fp,11398
   8840c:	050001c4 	movi	r20,7
   88410:	00000306 	br	88420 <___vfprintf_internal_r+0x16b0>
   88414:	18c00204 	addi	r3,r3,8
   88418:	843ffc04 	addi	r16,r16,-16
   8841c:	9c007a0e 	bge	r19,r16,88608 <___vfprintf_internal_r+0x1898>
   88420:	94800404 	addi	r18,r18,16
   88424:	8c400044 	addi	r17,r17,1
   88428:	1f000015 	stw	fp,0(r3)
   8842c:	1cc00115 	stw	r19,4(r3)
   88430:	dc800e15 	stw	r18,56(sp)
   88434:	dc400d15 	stw	r17,52(sp)
   88438:	a47ff60e 	bge	r20,r17,88414 <___vfprintf_internal_r+0x16a4>
   8843c:	d9014f17 	ldw	r4,1340(sp)
   88440:	b00b883a 	mov	r5,r22
   88444:	d9800c04 	addi	r6,sp,48
   88448:	0086d180 	call	86d18 <__sprint_r>
   8844c:	103c001e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   88450:	dc800e17 	ldw	r18,56(sp)
   88454:	dc400d17 	ldw	r17,52(sp)
   88458:	d8c01904 	addi	r3,sp,100
   8845c:	003fee06 	br	88418 <___vfprintf_internal_r+0x16a8>
   88460:	3c000017 	ldw	r16,0(r7)
   88464:	0023883a 	mov	r17,zero
   88468:	39c00104 	addi	r7,r7,4
   8846c:	d9c14015 	stw	r7,1280(sp)
   88470:	003e8c06 	br	87ea4 <___vfprintf_internal_r+0x1134>
   88474:	d9401904 	addi	r5,sp,100
   88478:	dd000f04 	addi	r20,sp,60
   8847c:	d9414115 	stw	r5,1284(sp)
   88480:	d9814417 	ldw	r6,1296(sp)
   88484:	880a973a 	slli	r5,r17,28
   88488:	8004d13a 	srli	r2,r16,4
   8848c:	810003cc 	andi	r4,r16,15
   88490:	3109883a 	add	r4,r6,r4
   88494:	2884b03a 	or	r2,r5,r2
   88498:	21400003 	ldbu	r5,0(r4)
   8849c:	d9014117 	ldw	r4,1284(sp)
   884a0:	8806d13a 	srli	r3,r17,4
   884a4:	1021883a 	mov	r16,r2
   884a8:	213fffc4 	addi	r4,r4,-1
   884ac:	d9014115 	stw	r4,1284(sp)
   884b0:	d9814117 	ldw	r6,1284(sp)
   884b4:	10c8b03a 	or	r4,r2,r3
   884b8:	1823883a 	mov	r17,r3
   884bc:	31400005 	stb	r5,0(r6)
   884c0:	203fef1e 	bne	r4,zero,88480 <___vfprintf_internal_r+0x1710>
   884c4:	003cc506 	br	877dc <___vfprintf_internal_r+0xa6c>
   884c8:	00800c04 	movi	r2,48
   884cc:	d98018c4 	addi	r6,sp,99
   884d0:	dd000f04 	addi	r20,sp,60
   884d4:	d88018c5 	stb	r2,99(sp)
   884d8:	d9814115 	stw	r6,1284(sp)
   884dc:	003cbf06 	br	877dc <___vfprintf_internal_r+0xa6c>
   884e0:	dc400d17 	ldw	r17,52(sp)
   884e4:	07000274 	movhi	fp,9
   884e8:	e70b2584 	addi	fp,fp,11414
   884ec:	003bc106 	br	873f4 <___vfprintf_internal_r+0x684>
   884f0:	d9414c17 	ldw	r5,1328(sp)
   884f4:	2880040c 	andi	r2,r5,16
   884f8:	10007c26 	beq	r2,zero,886ec <___vfprintf_internal_r+0x197c>
   884fc:	38800017 	ldw	r2,0(r7)
   88500:	39c00104 	addi	r7,r7,4
   88504:	d9c14015 	stw	r7,1280(sp)
   88508:	d9814b17 	ldw	r6,1324(sp)
   8850c:	d9c14017 	ldw	r7,1280(sp)
   88510:	11800015 	stw	r6,0(r2)
   88514:	003a7206 	br	86ee0 <___vfprintf_internal_r+0x170>
   88518:	d9014f17 	ldw	r4,1340(sp)
   8851c:	b00b883a 	mov	r5,r22
   88520:	d9800c04 	addi	r6,sp,48
   88524:	0086d180 	call	86d18 <__sprint_r>
   88528:	103bc91e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   8852c:	dc800e17 	ldw	r18,56(sp)
   88530:	dc400d17 	ldw	r17,52(sp)
   88534:	d8c01904 	addi	r3,sp,100
   88538:	d9014717 	ldw	r4,1308(sp)
   8853c:	d9414117 	ldw	r5,1284(sp)
   88540:	8c400044 	addi	r17,r17,1
   88544:	9125883a 	add	r18,r18,r4
   88548:	008001c4 	movi	r2,7
   8854c:	19400015 	stw	r5,0(r3)
   88550:	19000115 	stw	r4,4(r3)
   88554:	dc800e15 	stw	r18,56(sp)
   88558:	dc400d15 	stw	r17,52(sp)
   8855c:	147ce816 	blt	r2,r17,87900 <___vfprintf_internal_r+0xb90>
   88560:	18c00204 	addi	r3,r3,8
   88564:	003b8006 	br	87368 <___vfprintf_internal_r+0x5f8>
   88568:	38c00017 	ldw	r3,0(r7)
   8856c:	39000204 	addi	r4,r7,8
   88570:	d9014015 	stw	r4,1280(sp)
   88574:	d8c14215 	stw	r3,1288(sp)
   88578:	39c00117 	ldw	r7,4(r7)
   8857c:	d9c14315 	stw	r7,1292(sp)
   88580:	003e1a06 	br	87dec <___vfprintf_internal_r+0x107c>
   88584:	0005883a 	mov	r2,zero
   88588:	1409c83a 	sub	r4,r2,r16
   8858c:	1105803a 	cmpltu	r2,r2,r4
   88590:	044bc83a 	sub	r5,zero,r17
   88594:	2885c83a 	sub	r2,r5,r2
   88598:	2021883a 	mov	r16,r4
   8859c:	1023883a 	mov	r17,r2
   885a0:	01000044 	movi	r4,1
   885a4:	00800b44 	movi	r2,45
   885a8:	d8800405 	stb	r2,16(sp)
   885ac:	003c7e06 	br	877a8 <___vfprintf_internal_r+0xa38>
   885b0:	d9014f17 	ldw	r4,1340(sp)
   885b4:	b00b883a 	mov	r5,r22
   885b8:	d9800c04 	addi	r6,sp,48
   885bc:	0086d180 	call	86d18 <__sprint_r>
   885c0:	103ba31e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   885c4:	dc800e17 	ldw	r18,56(sp)
   885c8:	dc400d17 	ldw	r17,52(sp)
   885cc:	d9000517 	ldw	r4,20(sp)
   885d0:	d9401904 	addi	r5,sp,100
   885d4:	003da106 	br	87c5c <___vfprintf_internal_r+0xeec>
   885d8:	d9014f17 	ldw	r4,1340(sp)
   885dc:	b00b883a 	mov	r5,r22
   885e0:	d9800c04 	addi	r6,sp,48
   885e4:	0086d180 	call	86d18 <__sprint_r>
   885e8:	103b991e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   885ec:	dc800e17 	ldw	r18,56(sp)
   885f0:	dc400d17 	ldw	r17,52(sp)
   885f4:	d9000517 	ldw	r4,20(sp)
   885f8:	d8c01904 	addi	r3,sp,100
   885fc:	003d8b06 	br	87c2c <___vfprintf_internal_r+0xebc>
   88600:	07000274 	movhi	fp,9
   88604:	e70b2184 	addi	fp,fp,11398
   88608:	9425883a 	add	r18,r18,r16
   8860c:	8c400044 	addi	r17,r17,1
   88610:	008001c4 	movi	r2,7
   88614:	1f000015 	stw	fp,0(r3)
   88618:	1c000115 	stw	r16,4(r3)
   8861c:	dc800e15 	stw	r18,56(sp)
   88620:	dc400d15 	stw	r17,52(sp)
   88624:	147fbc16 	blt	r2,r17,88518 <___vfprintf_internal_r+0x17a8>
   88628:	18c00204 	addi	r3,r3,8
   8862c:	003fc206 	br	88538 <___vfprintf_internal_r+0x17c8>
   88630:	d9014f17 	ldw	r4,1340(sp)
   88634:	b00b883a 	mov	r5,r22
   88638:	d9800c04 	addi	r6,sp,48
   8863c:	0086d180 	call	86d18 <__sprint_r>
   88640:	103b831e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   88644:	dc800e17 	ldw	r18,56(sp)
   88648:	d9000517 	ldw	r4,20(sp)
   8864c:	d8c01904 	addi	r3,sp,100
   88650:	003cfc06 	br	87a44 <___vfprintf_internal_r+0xcd4>
   88654:	07000274 	movhi	fp,9
   88658:	e70b2184 	addi	fp,fp,11398
   8865c:	003bde06 	br	875d8 <___vfprintf_internal_r+0x868>
   88660:	00800274 	movhi	r2,9
   88664:	108b1004 	addi	r2,r2,11328
   88668:	d8814115 	stw	r2,1284(sp)
   8866c:	003def06 	br	87e2c <___vfprintf_internal_r+0x10bc>
   88670:	d9014217 	ldw	r4,1288(sp)
   88674:	d9414317 	ldw	r5,1292(sp)
   88678:	008c6f80 	call	8c6f8 <__isnand>
   8867c:	10003926 	beq	r2,zero,88764 <___vfprintf_internal_r+0x19f4>
   88680:	d9414d17 	ldw	r5,1332(sp)
   88684:	008011c4 	movi	r2,71
   88688:	1140ce16 	blt	r2,r5,889c4 <___vfprintf_internal_r+0x1c54>
   8868c:	01800274 	movhi	r6,9
   88690:	318b1104 	addi	r6,r6,11332
   88694:	d9814115 	stw	r6,1284(sp)
   88698:	003de406 	br	87e2c <___vfprintf_internal_r+0x10bc>
   8869c:	d9014c17 	ldw	r4,1328(sp)
   886a0:	bdc00044 	addi	r23,r23,1
   886a4:	b8c00007 	ldb	r3,0(r23)
   886a8:	21000814 	ori	r4,r4,32
   886ac:	d9014c15 	stw	r4,1328(sp)
   886b0:	003a2e06 	br	86f6c <___vfprintf_internal_r+0x1fc>
   886b4:	dcc14515 	stw	r19,1300(sp)
   886b8:	98011016 	blt	r19,zero,88afc <___vfprintf_internal_r+0x1d8c>
   886bc:	980f883a 	mov	r7,r19
   886c0:	d8014615 	stw	zero,1304(sp)
   886c4:	003c4c06 	br	877f8 <___vfprintf_internal_r+0xa88>
   886c8:	d9014f17 	ldw	r4,1340(sp)
   886cc:	b00b883a 	mov	r5,r22
   886d0:	d9800c04 	addi	r6,sp,48
   886d4:	0086d180 	call	86d18 <__sprint_r>
   886d8:	103b5d1e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   886dc:	dc800e17 	ldw	r18,56(sp)
   886e0:	d9000517 	ldw	r4,20(sp)
   886e4:	d8c01904 	addi	r3,sp,100
   886e8:	003f2e06 	br	883a4 <___vfprintf_internal_r+0x1634>
   886ec:	d8c14c17 	ldw	r3,1328(sp)
   886f0:	1880100c 	andi	r2,r3,64
   886f4:	1000a026 	beq	r2,zero,88978 <___vfprintf_internal_r+0x1c08>
   886f8:	38800017 	ldw	r2,0(r7)
   886fc:	39c00104 	addi	r7,r7,4
   88700:	d9c14015 	stw	r7,1280(sp)
   88704:	d9014b17 	ldw	r4,1324(sp)
   88708:	d9c14017 	ldw	r7,1280(sp)
   8870c:	1100000d 	sth	r4,0(r2)
   88710:	0039f306 	br	86ee0 <___vfprintf_internal_r+0x170>
   88714:	d9014f17 	ldw	r4,1340(sp)
   88718:	b00b883a 	mov	r5,r22
   8871c:	d9800c04 	addi	r6,sp,48
   88720:	0086d180 	call	86d18 <__sprint_r>
   88724:	103b4a1e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   88728:	dc800e17 	ldw	r18,56(sp)
   8872c:	dc400d17 	ldw	r17,52(sp)
   88730:	d9000517 	ldw	r4,20(sp)
   88734:	d8c01904 	addi	r3,sp,100
   88738:	003f2d06 	br	883f0 <___vfprintf_internal_r+0x1680>
   8873c:	00800184 	movi	r2,6
   88740:	14c09a36 	bltu	r2,r19,889ac <___vfprintf_internal_r+0x1c3c>
   88744:	dcc14515 	stw	r19,1300(sp)
   88748:	9800010e 	bge	r19,zero,88750 <___vfprintf_internal_r+0x19e0>
   8874c:	d8014515 	stw	zero,1300(sp)
   88750:	00800274 	movhi	r2,9
   88754:	108b1304 	addi	r2,r2,11340
   88758:	980f883a 	mov	r7,r19
   8875c:	d8814115 	stw	r2,1284(sp)
   88760:	003a7206 	br	8712c <___vfprintf_internal_r+0x3bc>
   88764:	00bfffc4 	movi	r2,-1
   88768:	9880e226 	beq	r19,r2,88af4 <___vfprintf_internal_r+0x1d84>
   8876c:	d9414d17 	ldw	r5,1332(sp)
   88770:	008019c4 	movi	r2,103
   88774:	2880dc26 	beq	r5,r2,88ae8 <___vfprintf_internal_r+0x1d78>
   88778:	008011c4 	movi	r2,71
   8877c:	2880da26 	beq	r5,r2,88ae8 <___vfprintf_internal_r+0x1d78>
   88780:	d9414c17 	ldw	r5,1328(sp)
   88784:	d9014317 	ldw	r4,1292(sp)
   88788:	d9814217 	ldw	r6,1288(sp)
   8878c:	29404014 	ori	r5,r5,256
   88790:	d9414c15 	stw	r5,1328(sp)
   88794:	2000cc16 	blt	r4,zero,88ac8 <___vfprintf_internal_r+0x1d58>
   88798:	3021883a 	mov	r16,r6
   8879c:	2023883a 	mov	r17,r4
   887a0:	0039883a 	mov	fp,zero
   887a4:	d9414d17 	ldw	r5,1332(sp)
   887a8:	00801984 	movi	r2,102
   887ac:	2880b726 	beq	r5,r2,88a8c <___vfprintf_internal_r+0x1d1c>
   887b0:	00801184 	movi	r2,70
   887b4:	2880b526 	beq	r5,r2,88a8c <___vfprintf_internal_r+0x1d1c>
   887b8:	00801944 	movi	r2,101
   887bc:	2880c826 	beq	r5,r2,88ae0 <___vfprintf_internal_r+0x1d70>
   887c0:	00801144 	movi	r2,69
   887c4:	2880c626 	beq	r5,r2,88ae0 <___vfprintf_internal_r+0x1d70>
   887c8:	9829883a 	mov	r20,r19
   887cc:	d9014f17 	ldw	r4,1340(sp)
   887d0:	d8800504 	addi	r2,sp,20
   887d4:	880d883a 	mov	r6,r17
   887d8:	d8800115 	stw	r2,4(sp)
   887dc:	d8c00604 	addi	r3,sp,24
   887e0:	d8800704 	addi	r2,sp,28
   887e4:	800b883a 	mov	r5,r16
   887e8:	01c00084 	movi	r7,2
   887ec:	d8c00215 	stw	r3,8(sp)
   887f0:	d8800315 	stw	r2,12(sp)
   887f4:	dd000015 	stw	r20,0(sp)
   887f8:	00890c00 	call	890c0 <_dtoa_r>
   887fc:	d9814d17 	ldw	r6,1332(sp)
   88800:	d8814115 	stw	r2,1284(sp)
   88804:	008019c4 	movi	r2,103
   88808:	30809526 	beq	r6,r2,88a60 <___vfprintf_internal_r+0x1cf0>
   8880c:	d8c14d17 	ldw	r3,1332(sp)
   88810:	008011c4 	movi	r2,71
   88814:	18809226 	beq	r3,r2,88a60 <___vfprintf_internal_r+0x1cf0>
   88818:	d9414117 	ldw	r5,1284(sp)
   8881c:	d9814d17 	ldw	r6,1332(sp)
   88820:	00801984 	movi	r2,102
   88824:	2d25883a 	add	r18,r5,r20
   88828:	30808626 	beq	r6,r2,88a44 <___vfprintf_internal_r+0x1cd4>
   8882c:	00801184 	movi	r2,70
   88830:	30808426 	beq	r6,r2,88a44 <___vfprintf_internal_r+0x1cd4>
   88834:	000d883a 	mov	r6,zero
   88838:	000f883a 	mov	r7,zero
   8883c:	880b883a 	mov	r5,r17
   88840:	8009883a 	mov	r4,r16
   88844:	0083f1c0 	call	83f1c <__eqdf2>
   88848:	1000751e 	bne	r2,zero,88a20 <___vfprintf_internal_r+0x1cb0>
   8884c:	9005883a 	mov	r2,r18
   88850:	dc800715 	stw	r18,28(sp)
   88854:	d9014117 	ldw	r4,1284(sp)
   88858:	d9414d17 	ldw	r5,1332(sp)
   8885c:	00c019c4 	movi	r3,103
   88860:	1125c83a 	sub	r18,r2,r4
   88864:	28c06826 	beq	r5,r3,88a08 <___vfprintf_internal_r+0x1c98>
   88868:	008011c4 	movi	r2,71
   8886c:	28806626 	beq	r5,r2,88a08 <___vfprintf_internal_r+0x1c98>
   88870:	d9000517 	ldw	r4,20(sp)
   88874:	d8c14d17 	ldw	r3,1332(sp)
   88878:	00801944 	movi	r2,101
   8887c:	10c05516 	blt	r2,r3,889d4 <___vfprintf_internal_r+0x1c64>
   88880:	213fffc4 	addi	r4,r4,-1
   88884:	d9000515 	stw	r4,20(sp)
   88888:	d8c00805 	stb	r3,32(sp)
   8888c:	2021883a 	mov	r16,r4
   88890:	2000c116 	blt	r4,zero,88b98 <___vfprintf_internal_r+0x1e28>
   88894:	00800ac4 	movi	r2,43
   88898:	d8800845 	stb	r2,33(sp)
   8889c:	00800244 	movi	r2,9
   888a0:	1400af0e 	bge	r2,r16,88b60 <___vfprintf_internal_r+0x1df0>
   888a4:	1027883a 	mov	r19,r2
   888a8:	dc400b84 	addi	r17,sp,46
   888ac:	8009883a 	mov	r4,r16
   888b0:	01400284 	movi	r5,10
   888b4:	00843600 	call	84360 <__modsi3>
   888b8:	10800c04 	addi	r2,r2,48
   888bc:	8c7fffc4 	addi	r17,r17,-1
   888c0:	8009883a 	mov	r4,r16
   888c4:	01400284 	movi	r5,10
   888c8:	88800005 	stb	r2,0(r17)
   888cc:	00843000 	call	84300 <__divsi3>
   888d0:	1021883a 	mov	r16,r2
   888d4:	98bff516 	blt	r19,r2,888ac <___vfprintf_internal_r+0x1b3c>
   888d8:	10c00c04 	addi	r3,r2,48
   888dc:	d88009c4 	addi	r2,sp,39
   888e0:	108001c4 	addi	r2,r2,7
   888e4:	897fffc4 	addi	r5,r17,-1
   888e8:	88ffffc5 	stb	r3,-1(r17)
   888ec:	2880a72e 	bgeu	r5,r2,88b8c <___vfprintf_internal_r+0x1e1c>
   888f0:	1009883a 	mov	r4,r2
   888f4:	d9800804 	addi	r6,sp,32
   888f8:	d8c00884 	addi	r3,sp,34
   888fc:	28800003 	ldbu	r2,0(r5)
   88900:	29400044 	addi	r5,r5,1
   88904:	18800005 	stb	r2,0(r3)
   88908:	18c00044 	addi	r3,r3,1
   8890c:	293ffb36 	bltu	r5,r4,888fc <___vfprintf_internal_r+0x1b8c>
   88910:	1987c83a 	sub	r3,r3,r6
   88914:	00800044 	movi	r2,1
   88918:	d8c14815 	stw	r3,1312(sp)
   8891c:	90cf883a 	add	r7,r18,r3
   88920:	1480960e 	bge	r2,r18,88b7c <___vfprintf_internal_r+0x1e0c>
   88924:	39c00044 	addi	r7,r7,1
   88928:	d9c14515 	stw	r7,1300(sp)
   8892c:	38003416 	blt	r7,zero,88a00 <___vfprintf_internal_r+0x1c90>
   88930:	e0803fcc 	andi	r2,fp,255
   88934:	1080201c 	xori	r2,r2,128
   88938:	10bfe004 	addi	r2,r2,-128
   8893c:	10004e26 	beq	r2,zero,88a78 <___vfprintf_internal_r+0x1d08>
   88940:	00800b44 	movi	r2,45
   88944:	dc814715 	stw	r18,1308(sp)
   88948:	d8014615 	stw	zero,1304(sp)
   8894c:	d8800405 	stb	r2,16(sp)
   88950:	003bab06 	br	87800 <___vfprintf_internal_r+0xa90>
   88954:	00800b44 	movi	r2,45
   88958:	d8800405 	stb	r2,16(sp)
   8895c:	003d2d06 	br	87e14 <___vfprintf_internal_r+0x10a4>
   88960:	d9014f17 	ldw	r4,1340(sp)
   88964:	b00b883a 	mov	r5,r22
   88968:	d9800c04 	addi	r6,sp,48
   8896c:	0086d180 	call	86d18 <__sprint_r>
   88970:	103ab71e 	bne	r2,zero,87450 <___vfprintf_internal_r+0x6e0>
   88974:	003ab506 	br	8744c <___vfprintf_internal_r+0x6dc>
   88978:	38800017 	ldw	r2,0(r7)
   8897c:	39c00104 	addi	r7,r7,4
   88980:	d9c14015 	stw	r7,1280(sp)
   88984:	d9414b17 	ldw	r5,1324(sp)
   88988:	d9c14017 	ldw	r7,1280(sp)
   8898c:	11400015 	stw	r5,0(r2)
   88990:	00395306 	br	86ee0 <___vfprintf_internal_r+0x170>
   88994:	980f883a 	mov	r7,r19
   88998:	dcc14515 	stw	r19,1300(sp)
   8899c:	d8014615 	stw	zero,1304(sp)
   889a0:	003b9506 	br	877f8 <___vfprintf_internal_r+0xa88>
   889a4:	0027883a 	mov	r19,zero
   889a8:	00397206 	br	86f74 <___vfprintf_internal_r+0x204>
   889ac:	00c00274 	movhi	r3,9
   889b0:	18cb1304 	addi	r3,r3,11340
   889b4:	100f883a 	mov	r7,r2
   889b8:	d8814515 	stw	r2,1300(sp)
   889bc:	d8c14115 	stw	r3,1284(sp)
   889c0:	0039da06 	br	8712c <___vfprintf_internal_r+0x3bc>
   889c4:	00800274 	movhi	r2,9
   889c8:	108b1204 	addi	r2,r2,11336
   889cc:	d8814115 	stw	r2,1284(sp)
   889d0:	003d1606 	br	87e2c <___vfprintf_internal_r+0x10bc>
   889d4:	d9414d17 	ldw	r5,1332(sp)
   889d8:	00801984 	movi	r2,102
   889dc:	28804926 	beq	r5,r2,88b04 <___vfprintf_internal_r+0x1d94>
   889e0:	200f883a 	mov	r7,r4
   889e4:	24805716 	blt	r4,r18,88b44 <___vfprintf_internal_r+0x1dd4>
   889e8:	d9414c17 	ldw	r5,1328(sp)
   889ec:	2880004c 	andi	r2,r5,1
   889f0:	10000126 	beq	r2,zero,889f8 <___vfprintf_internal_r+0x1c88>
   889f4:	21c00044 	addi	r7,r4,1
   889f8:	d9c14515 	stw	r7,1300(sp)
   889fc:	383fcc0e 	bge	r7,zero,88930 <___vfprintf_internal_r+0x1bc0>
   88a00:	d8014515 	stw	zero,1300(sp)
   88a04:	003fca06 	br	88930 <___vfprintf_internal_r+0x1bc0>
   88a08:	d9000517 	ldw	r4,20(sp)
   88a0c:	00bfff04 	movi	r2,-4
   88a10:	1100480e 	bge	r2,r4,88b34 <___vfprintf_internal_r+0x1dc4>
   88a14:	99004716 	blt	r19,r4,88b34 <___vfprintf_internal_r+0x1dc4>
   88a18:	d8c14d15 	stw	r3,1332(sp)
   88a1c:	003ff006 	br	889e0 <___vfprintf_internal_r+0x1c70>
   88a20:	d8800717 	ldw	r2,28(sp)
   88a24:	14bf8b2e 	bgeu	r2,r18,88854 <___vfprintf_internal_r+0x1ae4>
   88a28:	9007883a 	mov	r3,r18
   88a2c:	01000c04 	movi	r4,48
   88a30:	11000005 	stb	r4,0(r2)
   88a34:	10800044 	addi	r2,r2,1
   88a38:	d8800715 	stw	r2,28(sp)
   88a3c:	18bffc1e 	bne	r3,r2,88a30 <___vfprintf_internal_r+0x1cc0>
   88a40:	003f8406 	br	88854 <___vfprintf_internal_r+0x1ae4>
   88a44:	d8814117 	ldw	r2,1284(sp)
   88a48:	10c00007 	ldb	r3,0(r2)
   88a4c:	00800c04 	movi	r2,48
   88a50:	18805b26 	beq	r3,r2,88bc0 <___vfprintf_internal_r+0x1e50>
   88a54:	d9000517 	ldw	r4,20(sp)
   88a58:	9125883a 	add	r18,r18,r4
   88a5c:	003f7506 	br	88834 <___vfprintf_internal_r+0x1ac4>
   88a60:	d9014c17 	ldw	r4,1328(sp)
   88a64:	2080004c 	andi	r2,r4,1
   88a68:	1005003a 	cmpeq	r2,r2,zero
   88a6c:	103f6a26 	beq	r2,zero,88818 <___vfprintf_internal_r+0x1aa8>
   88a70:	d8800717 	ldw	r2,28(sp)
   88a74:	003f7706 	br	88854 <___vfprintf_internal_r+0x1ae4>
   88a78:	d9c14515 	stw	r7,1300(sp)
   88a7c:	38004d16 	blt	r7,zero,88bb4 <___vfprintf_internal_r+0x1e44>
   88a80:	dc814715 	stw	r18,1308(sp)
   88a84:	d8014615 	stw	zero,1304(sp)
   88a88:	003b5b06 	br	877f8 <___vfprintf_internal_r+0xa88>
   88a8c:	d9014f17 	ldw	r4,1340(sp)
   88a90:	d8800504 	addi	r2,sp,20
   88a94:	d8800115 	stw	r2,4(sp)
   88a98:	d8c00604 	addi	r3,sp,24
   88a9c:	d8800704 	addi	r2,sp,28
   88aa0:	800b883a 	mov	r5,r16
   88aa4:	880d883a 	mov	r6,r17
   88aa8:	01c000c4 	movi	r7,3
   88aac:	d8c00215 	stw	r3,8(sp)
   88ab0:	d8800315 	stw	r2,12(sp)
   88ab4:	dcc00015 	stw	r19,0(sp)
   88ab8:	9829883a 	mov	r20,r19
   88abc:	00890c00 	call	890c0 <_dtoa_r>
   88ac0:	d8814115 	stw	r2,1284(sp)
   88ac4:	003f5106 	br	8880c <___vfprintf_internal_r+0x1a9c>
   88ac8:	d8c14217 	ldw	r3,1288(sp)
   88acc:	d9014317 	ldw	r4,1292(sp)
   88ad0:	07000b44 	movi	fp,45
   88ad4:	1821883a 	mov	r16,r3
   88ad8:	2460003c 	xorhi	r17,r4,32768
   88adc:	003f3106 	br	887a4 <___vfprintf_internal_r+0x1a34>
   88ae0:	9d000044 	addi	r20,r19,1
   88ae4:	003f3906 	br	887cc <___vfprintf_internal_r+0x1a5c>
   88ae8:	983f251e 	bne	r19,zero,88780 <___vfprintf_internal_r+0x1a10>
   88aec:	04c00044 	movi	r19,1
   88af0:	003f2306 	br	88780 <___vfprintf_internal_r+0x1a10>
   88af4:	04c00184 	movi	r19,6
   88af8:	003f2106 	br	88780 <___vfprintf_internal_r+0x1a10>
   88afc:	d8014515 	stw	zero,1300(sp)
   88b00:	003eee06 	br	886bc <___vfprintf_internal_r+0x194c>
   88b04:	200f883a 	mov	r7,r4
   88b08:	0100370e 	bge	zero,r4,88be8 <___vfprintf_internal_r+0x1e78>
   88b0c:	9800031e 	bne	r19,zero,88b1c <___vfprintf_internal_r+0x1dac>
   88b10:	d9814c17 	ldw	r6,1328(sp)
   88b14:	3080004c 	andi	r2,r6,1
   88b18:	103fb726 	beq	r2,zero,889f8 <___vfprintf_internal_r+0x1c88>
   88b1c:	20800044 	addi	r2,r4,1
   88b20:	98a7883a 	add	r19,r19,r2
   88b24:	dcc14515 	stw	r19,1300(sp)
   88b28:	980f883a 	mov	r7,r19
   88b2c:	983f800e 	bge	r19,zero,88930 <___vfprintf_internal_r+0x1bc0>
   88b30:	003fb306 	br	88a00 <___vfprintf_internal_r+0x1c90>
   88b34:	d9814d17 	ldw	r6,1332(sp)
   88b38:	31bfff84 	addi	r6,r6,-2
   88b3c:	d9814d15 	stw	r6,1332(sp)
   88b40:	003f4c06 	br	88874 <___vfprintf_internal_r+0x1b04>
   88b44:	0100180e 	bge	zero,r4,88ba8 <___vfprintf_internal_r+0x1e38>
   88b48:	00800044 	movi	r2,1
   88b4c:	1485883a 	add	r2,r2,r18
   88b50:	d8814515 	stw	r2,1300(sp)
   88b54:	100f883a 	mov	r7,r2
   88b58:	103f750e 	bge	r2,zero,88930 <___vfprintf_internal_r+0x1bc0>
   88b5c:	003fa806 	br	88a00 <___vfprintf_internal_r+0x1c90>
   88b60:	80c00c04 	addi	r3,r16,48
   88b64:	00800c04 	movi	r2,48
   88b68:	d8c008c5 	stb	r3,35(sp)
   88b6c:	d9800804 	addi	r6,sp,32
   88b70:	d8c00904 	addi	r3,sp,36
   88b74:	d8800885 	stb	r2,34(sp)
   88b78:	003f6506 	br	88910 <___vfprintf_internal_r+0x1ba0>
   88b7c:	d9014c17 	ldw	r4,1328(sp)
   88b80:	2084703a 	and	r2,r4,r2
   88b84:	103f9c26 	beq	r2,zero,889f8 <___vfprintf_internal_r+0x1c88>
   88b88:	003f6606 	br	88924 <___vfprintf_internal_r+0x1bb4>
   88b8c:	d9800804 	addi	r6,sp,32
   88b90:	d8c00884 	addi	r3,sp,34
   88b94:	003f5e06 	br	88910 <___vfprintf_internal_r+0x1ba0>
   88b98:	00800b44 	movi	r2,45
   88b9c:	0121c83a 	sub	r16,zero,r4
   88ba0:	d8800845 	stb	r2,33(sp)
   88ba4:	003f3d06 	br	8889c <___vfprintf_internal_r+0x1b2c>
   88ba8:	00800084 	movi	r2,2
   88bac:	1105c83a 	sub	r2,r2,r4
   88bb0:	003fe606 	br	88b4c <___vfprintf_internal_r+0x1ddc>
   88bb4:	d8014515 	stw	zero,1300(sp)
   88bb8:	dc814715 	stw	r18,1308(sp)
   88bbc:	003fb106 	br	88a84 <___vfprintf_internal_r+0x1d14>
   88bc0:	000d883a 	mov	r6,zero
   88bc4:	000f883a 	mov	r7,zero
   88bc8:	8009883a 	mov	r4,r16
   88bcc:	880b883a 	mov	r5,r17
   88bd0:	008d5780 	call	8d578 <__nedf2>
   88bd4:	103f9f26 	beq	r2,zero,88a54 <___vfprintf_internal_r+0x1ce4>
   88bd8:	00800044 	movi	r2,1
   88bdc:	1509c83a 	sub	r4,r2,r20
   88be0:	d9000515 	stw	r4,20(sp)
   88be4:	003f9b06 	br	88a54 <___vfprintf_internal_r+0x1ce4>
   88be8:	98000d1e 	bne	r19,zero,88c20 <___vfprintf_internal_r+0x1eb0>
   88bec:	d8c14c17 	ldw	r3,1328(sp)
   88bf0:	1880004c 	andi	r2,r3,1
   88bf4:	10000a1e 	bne	r2,zero,88c20 <___vfprintf_internal_r+0x1eb0>
   88bf8:	01000044 	movi	r4,1
   88bfc:	200f883a 	mov	r7,r4
   88c00:	d9014515 	stw	r4,1300(sp)
   88c04:	003f4a06 	br	88930 <___vfprintf_internal_r+0x1bc0>
   88c08:	3cc00017 	ldw	r19,0(r7)
   88c0c:	39c00104 	addi	r7,r7,4
   88c10:	983d0e0e 	bge	r19,zero,8804c <___vfprintf_internal_r+0x12dc>
   88c14:	b8c00007 	ldb	r3,0(r23)
   88c18:	04ffffc4 	movi	r19,-1
   88c1c:	0038d306 	br	86f6c <___vfprintf_internal_r+0x1fc>
   88c20:	9cc00084 	addi	r19,r19,2
   88c24:	dcc14515 	stw	r19,1300(sp)
   88c28:	980f883a 	mov	r7,r19
   88c2c:	983f400e 	bge	r19,zero,88930 <___vfprintf_internal_r+0x1bc0>
   88c30:	003f7306 	br	88a00 <___vfprintf_internal_r+0x1c90>

00088c34 <__vfprintf_internal>:
   88c34:	00800274 	movhi	r2,9
   88c38:	10932d04 	addi	r2,r2,19636
   88c3c:	2013883a 	mov	r9,r4
   88c40:	11000017 	ldw	r4,0(r2)
   88c44:	2805883a 	mov	r2,r5
   88c48:	300f883a 	mov	r7,r6
   88c4c:	480b883a 	mov	r5,r9
   88c50:	100d883a 	mov	r6,r2
   88c54:	0086d701 	jmpi	86d70 <___vfprintf_internal_r>

00088c58 <_write_r>:
   88c58:	defffd04 	addi	sp,sp,-12
   88c5c:	dc000015 	stw	r16,0(sp)
   88c60:	04000274 	movhi	r16,9
   88c64:	841a3a04 	addi	r16,r16,26856
   88c68:	dc400115 	stw	r17,4(sp)
   88c6c:	80000015 	stw	zero,0(r16)
   88c70:	2023883a 	mov	r17,r4
   88c74:	2809883a 	mov	r4,r5
   88c78:	300b883a 	mov	r5,r6
   88c7c:	380d883a 	mov	r6,r7
   88c80:	dfc00215 	stw	ra,8(sp)
   88c84:	008e7240 	call	8e724 <write>
   88c88:	1007883a 	mov	r3,r2
   88c8c:	00bfffc4 	movi	r2,-1
   88c90:	18800626 	beq	r3,r2,88cac <_write_r+0x54>
   88c94:	1805883a 	mov	r2,r3
   88c98:	dfc00217 	ldw	ra,8(sp)
   88c9c:	dc400117 	ldw	r17,4(sp)
   88ca0:	dc000017 	ldw	r16,0(sp)
   88ca4:	dec00304 	addi	sp,sp,12
   88ca8:	f800283a 	ret
   88cac:	80800017 	ldw	r2,0(r16)
   88cb0:	103ff826 	beq	r2,zero,88c94 <_write_r+0x3c>
   88cb4:	88800015 	stw	r2,0(r17)
   88cb8:	1805883a 	mov	r2,r3
   88cbc:	dfc00217 	ldw	ra,8(sp)
   88cc0:	dc400117 	ldw	r17,4(sp)
   88cc4:	dc000017 	ldw	r16,0(sp)
   88cc8:	dec00304 	addi	sp,sp,12
   88ccc:	f800283a 	ret

00088cd0 <__swsetup_r>:
   88cd0:	00800274 	movhi	r2,9
   88cd4:	10932d04 	addi	r2,r2,19636
   88cd8:	10c00017 	ldw	r3,0(r2)
   88cdc:	defffd04 	addi	sp,sp,-12
   88ce0:	dc400115 	stw	r17,4(sp)
   88ce4:	dc000015 	stw	r16,0(sp)
   88ce8:	dfc00215 	stw	ra,8(sp)
   88cec:	2023883a 	mov	r17,r4
   88cf0:	2821883a 	mov	r16,r5
   88cf4:	18000226 	beq	r3,zero,88d00 <__swsetup_r+0x30>
   88cf8:	18800e17 	ldw	r2,56(r3)
   88cfc:	10001f26 	beq	r2,zero,88d7c <__swsetup_r+0xac>
   88d00:	8100030b 	ldhu	r4,12(r16)
   88d04:	2080020c 	andi	r2,r4,8
   88d08:	10002826 	beq	r2,zero,88dac <__swsetup_r+0xdc>
   88d0c:	81400417 	ldw	r5,16(r16)
   88d10:	28001d26 	beq	r5,zero,88d88 <__swsetup_r+0xb8>
   88d14:	2080004c 	andi	r2,r4,1
   88d18:	1005003a 	cmpeq	r2,r2,zero
   88d1c:	10000b26 	beq	r2,zero,88d4c <__swsetup_r+0x7c>
   88d20:	2080008c 	andi	r2,r4,2
   88d24:	10001226 	beq	r2,zero,88d70 <__swsetup_r+0xa0>
   88d28:	0005883a 	mov	r2,zero
   88d2c:	80800215 	stw	r2,8(r16)
   88d30:	28000b26 	beq	r5,zero,88d60 <__swsetup_r+0x90>
   88d34:	0005883a 	mov	r2,zero
   88d38:	dfc00217 	ldw	ra,8(sp)
   88d3c:	dc400117 	ldw	r17,4(sp)
   88d40:	dc000017 	ldw	r16,0(sp)
   88d44:	dec00304 	addi	sp,sp,12
   88d48:	f800283a 	ret
   88d4c:	80800517 	ldw	r2,20(r16)
   88d50:	80000215 	stw	zero,8(r16)
   88d54:	0085c83a 	sub	r2,zero,r2
   88d58:	80800615 	stw	r2,24(r16)
   88d5c:	283ff51e 	bne	r5,zero,88d34 <__swsetup_r+0x64>
   88d60:	2080200c 	andi	r2,r4,128
   88d64:	103ff326 	beq	r2,zero,88d34 <__swsetup_r+0x64>
   88d68:	00bfffc4 	movi	r2,-1
   88d6c:	003ff206 	br	88d38 <__swsetup_r+0x68>
   88d70:	80800517 	ldw	r2,20(r16)
   88d74:	80800215 	stw	r2,8(r16)
   88d78:	003fed06 	br	88d30 <__swsetup_r+0x60>
   88d7c:	1809883a 	mov	r4,r3
   88d80:	0084e7c0 	call	84e7c <__sinit>
   88d84:	003fde06 	br	88d00 <__swsetup_r+0x30>
   88d88:	20c0a00c 	andi	r3,r4,640
   88d8c:	00808004 	movi	r2,512
   88d90:	18bfe026 	beq	r3,r2,88d14 <__swsetup_r+0x44>
   88d94:	8809883a 	mov	r4,r17
   88d98:	800b883a 	mov	r5,r16
   88d9c:	0085df80 	call	85df8 <__smakebuf_r>
   88da0:	8100030b 	ldhu	r4,12(r16)
   88da4:	81400417 	ldw	r5,16(r16)
   88da8:	003fda06 	br	88d14 <__swsetup_r+0x44>
   88dac:	2080040c 	andi	r2,r4,16
   88db0:	103fed26 	beq	r2,zero,88d68 <__swsetup_r+0x98>
   88db4:	2080010c 	andi	r2,r4,4
   88db8:	10001226 	beq	r2,zero,88e04 <__swsetup_r+0x134>
   88dbc:	81400c17 	ldw	r5,48(r16)
   88dc0:	28000526 	beq	r5,zero,88dd8 <__swsetup_r+0x108>
   88dc4:	80801004 	addi	r2,r16,64
   88dc8:	28800226 	beq	r5,r2,88dd4 <__swsetup_r+0x104>
   88dcc:	8809883a 	mov	r4,r17
   88dd0:	00853a40 	call	853a4 <_free_r>
   88dd4:	80000c15 	stw	zero,48(r16)
   88dd8:	8080030b 	ldhu	r2,12(r16)
   88ddc:	81400417 	ldw	r5,16(r16)
   88de0:	80000115 	stw	zero,4(r16)
   88de4:	10bff6cc 	andi	r2,r2,65499
   88de8:	8080030d 	sth	r2,12(r16)
   88dec:	81400015 	stw	r5,0(r16)
   88df0:	8080030b 	ldhu	r2,12(r16)
   88df4:	10800214 	ori	r2,r2,8
   88df8:	113fffcc 	andi	r4,r2,65535
   88dfc:	8080030d 	sth	r2,12(r16)
   88e00:	003fc306 	br	88d10 <__swsetup_r+0x40>
   88e04:	81400417 	ldw	r5,16(r16)
   88e08:	003ff906 	br	88df0 <__swsetup_r+0x120>

00088e0c <_close_r>:
   88e0c:	defffd04 	addi	sp,sp,-12
   88e10:	dc000015 	stw	r16,0(sp)
   88e14:	04000274 	movhi	r16,9
   88e18:	841a3a04 	addi	r16,r16,26856
   88e1c:	dc400115 	stw	r17,4(sp)
   88e20:	80000015 	stw	zero,0(r16)
   88e24:	2023883a 	mov	r17,r4
   88e28:	2809883a 	mov	r4,r5
   88e2c:	dfc00215 	stw	ra,8(sp)
   88e30:	008d81c0 	call	8d81c <close>
   88e34:	1007883a 	mov	r3,r2
   88e38:	00bfffc4 	movi	r2,-1
   88e3c:	18800626 	beq	r3,r2,88e58 <_close_r+0x4c>
   88e40:	1805883a 	mov	r2,r3
   88e44:	dfc00217 	ldw	ra,8(sp)
   88e48:	dc400117 	ldw	r17,4(sp)
   88e4c:	dc000017 	ldw	r16,0(sp)
   88e50:	dec00304 	addi	sp,sp,12
   88e54:	f800283a 	ret
   88e58:	80800017 	ldw	r2,0(r16)
   88e5c:	103ff826 	beq	r2,zero,88e40 <_close_r+0x34>
   88e60:	88800015 	stw	r2,0(r17)
   88e64:	1805883a 	mov	r2,r3
   88e68:	dfc00217 	ldw	ra,8(sp)
   88e6c:	dc400117 	ldw	r17,4(sp)
   88e70:	dc000017 	ldw	r16,0(sp)
   88e74:	dec00304 	addi	sp,sp,12
   88e78:	f800283a 	ret

00088e7c <quorem>:
   88e7c:	28c00417 	ldw	r3,16(r5)
   88e80:	20800417 	ldw	r2,16(r4)
   88e84:	defff104 	addi	sp,sp,-60
   88e88:	dfc00e15 	stw	ra,56(sp)
   88e8c:	df000d15 	stw	fp,52(sp)
   88e90:	ddc00c15 	stw	r23,48(sp)
   88e94:	dd800b15 	stw	r22,44(sp)
   88e98:	dd400a15 	stw	r21,40(sp)
   88e9c:	dd000915 	stw	r20,36(sp)
   88ea0:	dcc00815 	stw	r19,32(sp)
   88ea4:	dc800715 	stw	r18,28(sp)
   88ea8:	dc400615 	stw	r17,24(sp)
   88eac:	dc000515 	stw	r16,20(sp)
   88eb0:	d9000315 	stw	r4,12(sp)
   88eb4:	d9400415 	stw	r5,16(sp)
   88eb8:	10c07f16 	blt	r2,r3,890b8 <quorem+0x23c>
   88ebc:	1d3fffc4 	addi	r20,r3,-1
   88ec0:	d8c00417 	ldw	r3,16(sp)
   88ec4:	d9000317 	ldw	r4,12(sp)
   88ec8:	a505883a 	add	r2,r20,r20
   88ecc:	1085883a 	add	r2,r2,r2
   88ed0:	1cc00504 	addi	r19,r3,20
   88ed4:	25c00504 	addi	r23,r4,20
   88ed8:	98ad883a 	add	r22,r19,r2
   88edc:	15c7883a 	add	r3,r2,r23
   88ee0:	b1400017 	ldw	r5,0(r22)
   88ee4:	19000017 	ldw	r4,0(r3)
   88ee8:	d8c00015 	stw	r3,0(sp)
   88eec:	29400044 	addi	r5,r5,1
   88ef0:	d9000215 	stw	r4,8(sp)
   88ef4:	00843c00 	call	843c0 <__udivsi3>
   88ef8:	1039883a 	mov	fp,r2
   88efc:	10003d1e 	bne	r2,zero,88ff4 <quorem+0x178>
   88f00:	d9400417 	ldw	r5,16(sp)
   88f04:	d9000317 	ldw	r4,12(sp)
   88f08:	008b11c0 	call	8b11c <__mcmp>
   88f0c:	10002c16 	blt	r2,zero,88fc0 <quorem+0x144>
   88f10:	e7000044 	addi	fp,fp,1
   88f14:	b80f883a 	mov	r7,r23
   88f18:	0011883a 	mov	r8,zero
   88f1c:	0009883a 	mov	r4,zero
   88f20:	99400017 	ldw	r5,0(r19)
   88f24:	38c00017 	ldw	r3,0(r7)
   88f28:	9cc00104 	addi	r19,r19,4
   88f2c:	28bfffcc 	andi	r2,r5,65535
   88f30:	2085883a 	add	r2,r4,r2
   88f34:	11bfffcc 	andi	r6,r2,65535
   88f38:	193fffcc 	andi	r4,r3,65535
   88f3c:	1004d43a 	srli	r2,r2,16
   88f40:	280ad43a 	srli	r5,r5,16
   88f44:	2189c83a 	sub	r4,r4,r6
   88f48:	2209883a 	add	r4,r4,r8
   88f4c:	1806d43a 	srli	r3,r3,16
   88f50:	288b883a 	add	r5,r5,r2
   88f54:	200dd43a 	srai	r6,r4,16
   88f58:	28bfffcc 	andi	r2,r5,65535
   88f5c:	1887c83a 	sub	r3,r3,r2
   88f60:	1987883a 	add	r3,r3,r6
   88f64:	3900000d 	sth	r4,0(r7)
   88f68:	38c0008d 	sth	r3,2(r7)
   88f6c:	2808d43a 	srli	r4,r5,16
   88f70:	39c00104 	addi	r7,r7,4
   88f74:	1811d43a 	srai	r8,r3,16
   88f78:	b4ffe92e 	bgeu	r22,r19,88f20 <quorem+0xa4>
   88f7c:	a505883a 	add	r2,r20,r20
   88f80:	1085883a 	add	r2,r2,r2
   88f84:	b885883a 	add	r2,r23,r2
   88f88:	10c00017 	ldw	r3,0(r2)
   88f8c:	18000c1e 	bne	r3,zero,88fc0 <quorem+0x144>
   88f90:	113fff04 	addi	r4,r2,-4
   88f94:	b900082e 	bgeu	r23,r4,88fb8 <quorem+0x13c>
   88f98:	10bfff17 	ldw	r2,-4(r2)
   88f9c:	10000326 	beq	r2,zero,88fac <quorem+0x130>
   88fa0:	00000506 	br	88fb8 <quorem+0x13c>
   88fa4:	20800017 	ldw	r2,0(r4)
   88fa8:	1000031e 	bne	r2,zero,88fb8 <quorem+0x13c>
   88fac:	213fff04 	addi	r4,r4,-4
   88fb0:	a53fffc4 	addi	r20,r20,-1
   88fb4:	b93ffb36 	bltu	r23,r4,88fa4 <quorem+0x128>
   88fb8:	d9000317 	ldw	r4,12(sp)
   88fbc:	25000415 	stw	r20,16(r4)
   88fc0:	e005883a 	mov	r2,fp
   88fc4:	dfc00e17 	ldw	ra,56(sp)
   88fc8:	df000d17 	ldw	fp,52(sp)
   88fcc:	ddc00c17 	ldw	r23,48(sp)
   88fd0:	dd800b17 	ldw	r22,44(sp)
   88fd4:	dd400a17 	ldw	r21,40(sp)
   88fd8:	dd000917 	ldw	r20,36(sp)
   88fdc:	dcc00817 	ldw	r19,32(sp)
   88fe0:	dc800717 	ldw	r18,28(sp)
   88fe4:	dc400617 	ldw	r17,24(sp)
   88fe8:	dc000517 	ldw	r16,20(sp)
   88fec:	dec00f04 	addi	sp,sp,60
   88ff0:	f800283a 	ret
   88ff4:	b823883a 	mov	r17,r23
   88ff8:	9825883a 	mov	r18,r19
   88ffc:	d8000115 	stw	zero,4(sp)
   89000:	002b883a 	mov	r21,zero
   89004:	94000017 	ldw	r16,0(r18)
   89008:	e009883a 	mov	r4,fp
   8900c:	94800104 	addi	r18,r18,4
   89010:	817fffcc 	andi	r5,r16,65535
   89014:	00843d00 	call	843d0 <__mulsi3>
   89018:	800ad43a 	srli	r5,r16,16
   8901c:	e009883a 	mov	r4,fp
   89020:	a8a1883a 	add	r16,r21,r2
   89024:	00843d00 	call	843d0 <__mulsi3>
   89028:	89000017 	ldw	r4,0(r17)
   8902c:	80ffffcc 	andi	r3,r16,65535
   89030:	8020d43a 	srli	r16,r16,16
   89034:	217fffcc 	andi	r5,r4,65535
   89038:	28cbc83a 	sub	r5,r5,r3
   8903c:	d8c00117 	ldw	r3,4(sp)
   89040:	2008d43a 	srli	r4,r4,16
   89044:	1405883a 	add	r2,r2,r16
   89048:	28cb883a 	add	r5,r5,r3
   8904c:	280dd43a 	srai	r6,r5,16
   89050:	10ffffcc 	andi	r3,r2,65535
   89054:	20c9c83a 	sub	r4,r4,r3
   89058:	2189883a 	add	r4,r4,r6
   8905c:	8900008d 	sth	r4,2(r17)
   89060:	2009d43a 	srai	r4,r4,16
   89064:	8940000d 	sth	r5,0(r17)
   89068:	102ad43a 	srli	r21,r2,16
   8906c:	8c400104 	addi	r17,r17,4
   89070:	d9000115 	stw	r4,4(sp)
   89074:	b4bfe32e 	bgeu	r22,r18,89004 <quorem+0x188>
   89078:	d9000217 	ldw	r4,8(sp)
   8907c:	203fa01e 	bne	r4,zero,88f00 <quorem+0x84>
   89080:	d8800017 	ldw	r2,0(sp)
   89084:	10ffff04 	addi	r3,r2,-4
   89088:	b8c0082e 	bgeu	r23,r3,890ac <quorem+0x230>
   8908c:	10bfff17 	ldw	r2,-4(r2)
   89090:	10000326 	beq	r2,zero,890a0 <quorem+0x224>
   89094:	00000506 	br	890ac <quorem+0x230>
   89098:	18800017 	ldw	r2,0(r3)
   8909c:	1000031e 	bne	r2,zero,890ac <quorem+0x230>
   890a0:	18ffff04 	addi	r3,r3,-4
   890a4:	a53fffc4 	addi	r20,r20,-1
   890a8:	b8fffb36 	bltu	r23,r3,89098 <quorem+0x21c>
   890ac:	d8c00317 	ldw	r3,12(sp)
   890b0:	1d000415 	stw	r20,16(r3)
   890b4:	003f9206 	br	88f00 <quorem+0x84>
   890b8:	0005883a 	mov	r2,zero
   890bc:	003fc106 	br	88fc4 <quorem+0x148>

000890c0 <_dtoa_r>:
   890c0:	22001017 	ldw	r8,64(r4)
   890c4:	deffda04 	addi	sp,sp,-152
   890c8:	dd402115 	stw	r21,132(sp)
   890cc:	dd002015 	stw	r20,128(sp)
   890d0:	dc801e15 	stw	r18,120(sp)
   890d4:	dc401d15 	stw	r17,116(sp)
   890d8:	dfc02515 	stw	ra,148(sp)
   890dc:	df002415 	stw	fp,144(sp)
   890e0:	ddc02315 	stw	r23,140(sp)
   890e4:	dd802215 	stw	r22,136(sp)
   890e8:	dcc01f15 	stw	r19,124(sp)
   890ec:	dc001c15 	stw	r16,112(sp)
   890f0:	d9001615 	stw	r4,88(sp)
   890f4:	3023883a 	mov	r17,r6
   890f8:	2829883a 	mov	r20,r5
   890fc:	d9c01715 	stw	r7,92(sp)
   89100:	dc802817 	ldw	r18,160(sp)
   89104:	302b883a 	mov	r21,r6
   89108:	40000a26 	beq	r8,zero,89134 <_dtoa_r+0x74>
   8910c:	20801117 	ldw	r2,68(r4)
   89110:	400b883a 	mov	r5,r8
   89114:	40800115 	stw	r2,4(r8)
   89118:	20c01117 	ldw	r3,68(r4)
   8911c:	00800044 	movi	r2,1
   89120:	10c4983a 	sll	r2,r2,r3
   89124:	40800215 	stw	r2,8(r8)
   89128:	008afc00 	call	8afc0 <_Bfree>
   8912c:	d8c01617 	ldw	r3,88(sp)
   89130:	18001015 	stw	zero,64(r3)
   89134:	8800a316 	blt	r17,zero,893c4 <_dtoa_r+0x304>
   89138:	90000015 	stw	zero,0(r18)
   8913c:	a8dffc2c 	andhi	r3,r21,32752
   89140:	009ffc34 	movhi	r2,32752
   89144:	18809126 	beq	r3,r2,8938c <_dtoa_r+0x2cc>
   89148:	000d883a 	mov	r6,zero
   8914c:	000f883a 	mov	r7,zero
   89150:	a009883a 	mov	r4,r20
   89154:	a80b883a 	mov	r5,r21
   89158:	dd001215 	stw	r20,72(sp)
   8915c:	dd401315 	stw	r21,76(sp)
   89160:	008d5780 	call	8d578 <__nedf2>
   89164:	1000171e 	bne	r2,zero,891c4 <_dtoa_r+0x104>
   89168:	d9802717 	ldw	r6,156(sp)
   8916c:	00800044 	movi	r2,1
   89170:	30800015 	stw	r2,0(r6)
   89174:	d8802917 	ldw	r2,164(sp)
   89178:	10029b26 	beq	r2,zero,89be8 <_dtoa_r+0xb28>
   8917c:	d9002917 	ldw	r4,164(sp)
   89180:	00800274 	movhi	r2,9
   89184:	108b2144 	addi	r2,r2,11397
   89188:	10ffffc4 	addi	r3,r2,-1
   8918c:	20800015 	stw	r2,0(r4)
   89190:	1805883a 	mov	r2,r3
   89194:	dfc02517 	ldw	ra,148(sp)
   89198:	df002417 	ldw	fp,144(sp)
   8919c:	ddc02317 	ldw	r23,140(sp)
   891a0:	dd802217 	ldw	r22,136(sp)
   891a4:	dd402117 	ldw	r21,132(sp)
   891a8:	dd002017 	ldw	r20,128(sp)
   891ac:	dcc01f17 	ldw	r19,124(sp)
   891b0:	dc801e17 	ldw	r18,120(sp)
   891b4:	dc401d17 	ldw	r17,116(sp)
   891b8:	dc001c17 	ldw	r16,112(sp)
   891bc:	dec02604 	addi	sp,sp,152
   891c0:	f800283a 	ret
   891c4:	d9001617 	ldw	r4,88(sp)
   891c8:	d9401217 	ldw	r5,72(sp)
   891cc:	d8800104 	addi	r2,sp,4
   891d0:	a80d883a 	mov	r6,r21
   891d4:	d9c00204 	addi	r7,sp,8
   891d8:	d8800015 	stw	r2,0(sp)
   891dc:	008b5fc0 	call	8b5fc <__d2b>
   891e0:	d8800715 	stw	r2,28(sp)
   891e4:	a804d53a 	srli	r2,r21,20
   891e8:	1101ffcc 	andi	r4,r2,2047
   891ec:	20008626 	beq	r4,zero,89408 <_dtoa_r+0x348>
   891f0:	d8c01217 	ldw	r3,72(sp)
   891f4:	00800434 	movhi	r2,16
   891f8:	10bfffc4 	addi	r2,r2,-1
   891fc:	ddc00117 	ldw	r23,4(sp)
   89200:	a884703a 	and	r2,r21,r2
   89204:	1811883a 	mov	r8,r3
   89208:	124ffc34 	orhi	r9,r2,16368
   8920c:	25bf0044 	addi	r22,r4,-1023
   89210:	d8000815 	stw	zero,32(sp)
   89214:	0005883a 	mov	r2,zero
   89218:	00cffe34 	movhi	r3,16376
   8921c:	480b883a 	mov	r5,r9
   89220:	4009883a 	mov	r4,r8
   89224:	180f883a 	mov	r7,r3
   89228:	100d883a 	mov	r6,r2
   8922c:	008380c0 	call	8380c <__subdf3>
   89230:	0218dbf4 	movhi	r8,25455
   89234:	4210d844 	addi	r8,r8,17249
   89238:	024ff4f4 	movhi	r9,16339
   8923c:	4a61e9c4 	addi	r9,r9,-30809
   89240:	480f883a 	mov	r7,r9
   89244:	400d883a 	mov	r6,r8
   89248:	180b883a 	mov	r5,r3
   8924c:	1009883a 	mov	r4,r2
   89250:	00839000 	call	83900 <__muldf3>
   89254:	0222d874 	movhi	r8,35681
   89258:	42322cc4 	addi	r8,r8,-14157
   8925c:	024ff1f4 	movhi	r9,16327
   89260:	4a628a04 	addi	r9,r9,-30168
   89264:	480f883a 	mov	r7,r9
   89268:	400d883a 	mov	r6,r8
   8926c:	180b883a 	mov	r5,r3
   89270:	1009883a 	mov	r4,r2
   89274:	008388c0 	call	8388c <__adddf3>
   89278:	b009883a 	mov	r4,r22
   8927c:	1021883a 	mov	r16,r2
   89280:	1823883a 	mov	r17,r3
   89284:	00840b40 	call	840b4 <__floatsidf>
   89288:	021427f4 	movhi	r8,20639
   8928c:	421e7ec4 	addi	r8,r8,31227
   89290:	024ff4f4 	movhi	r9,16339
   89294:	4a5104c4 	addi	r9,r9,17427
   89298:	480f883a 	mov	r7,r9
   8929c:	400d883a 	mov	r6,r8
   892a0:	180b883a 	mov	r5,r3
   892a4:	1009883a 	mov	r4,r2
   892a8:	00839000 	call	83900 <__muldf3>
   892ac:	180f883a 	mov	r7,r3
   892b0:	880b883a 	mov	r5,r17
   892b4:	100d883a 	mov	r6,r2
   892b8:	8009883a 	mov	r4,r16
   892bc:	008388c0 	call	8388c <__adddf3>
   892c0:	1009883a 	mov	r4,r2
   892c4:	180b883a 	mov	r5,r3
   892c8:	1021883a 	mov	r16,r2
   892cc:	1823883a 	mov	r17,r3
   892d0:	00841ac0 	call	841ac <__fixdfsi>
   892d4:	000d883a 	mov	r6,zero
   892d8:	000f883a 	mov	r7,zero
   892dc:	8009883a 	mov	r4,r16
   892e0:	880b883a 	mov	r5,r17
   892e4:	d8800d15 	stw	r2,52(sp)
   892e8:	008d6000 	call	8d600 <__ltdf2>
   892ec:	10031716 	blt	r2,zero,89f4c <_dtoa_r+0xe8c>
   892f0:	d8c00d17 	ldw	r3,52(sp)
   892f4:	00800584 	movi	r2,22
   892f8:	10c1482e 	bgeu	r2,r3,8981c <_dtoa_r+0x75c>
   892fc:	01000044 	movi	r4,1
   89300:	d9000c15 	stw	r4,48(sp)
   89304:	bd85c83a 	sub	r2,r23,r22
   89308:	11bfffc4 	addi	r6,r2,-1
   8930c:	30030b16 	blt	r6,zero,89f3c <_dtoa_r+0xe7c>
   89310:	d9800a15 	stw	r6,40(sp)
   89314:	d8001115 	stw	zero,68(sp)
   89318:	d8c00d17 	ldw	r3,52(sp)
   8931c:	1802ff16 	blt	r3,zero,89f1c <_dtoa_r+0xe5c>
   89320:	d9000a17 	ldw	r4,40(sp)
   89324:	d8c00915 	stw	r3,36(sp)
   89328:	d8001015 	stw	zero,64(sp)
   8932c:	20c9883a 	add	r4,r4,r3
   89330:	d9000a15 	stw	r4,40(sp)
   89334:	d9001717 	ldw	r4,92(sp)
   89338:	00800244 	movi	r2,9
   8933c:	11004636 	bltu	r2,r4,89458 <_dtoa_r+0x398>
   89340:	00800144 	movi	r2,5
   89344:	11020416 	blt	r2,r4,89b58 <_dtoa_r+0xa98>
   89348:	04400044 	movi	r17,1
   8934c:	d8c01717 	ldw	r3,92(sp)
   89350:	00800144 	movi	r2,5
   89354:	10c1ed36 	bltu	r2,r3,89b0c <_dtoa_r+0xa4c>
   89358:	18c5883a 	add	r2,r3,r3
   8935c:	1085883a 	add	r2,r2,r2
   89360:	00c00274 	movhi	r3,9
   89364:	18e4dd04 	addi	r3,r3,-27788
   89368:	10c5883a 	add	r2,r2,r3
   8936c:	11000017 	ldw	r4,0(r2)
   89370:	2000683a 	jmp	r4
   89374:	00089460 	cmpeqi	zero,zero,8785
   89378:	00089460 	cmpeqi	zero,zero,8785
   8937c:	00089e60 	cmpeqi	zero,zero,8825
   89380:	00089e38 	rdprs	zero,zero,8824
   89384:	00089e7c 	xorhi	zero,zero,8825
   89388:	00089e88 	cmpgei	zero,zero,8826
   8938c:	d9002717 	ldw	r4,156(sp)
   89390:	0089c3c4 	movi	r2,9999
   89394:	20800015 	stw	r2,0(r4)
   89398:	a0001026 	beq	r20,zero,893dc <_dtoa_r+0x31c>
   8939c:	00c00274 	movhi	r3,9
   893a0:	18cb2d04 	addi	r3,r3,11444
   893a4:	d9802917 	ldw	r6,164(sp)
   893a8:	303f7926 	beq	r6,zero,89190 <_dtoa_r+0xd0>
   893ac:	188000c7 	ldb	r2,3(r3)
   893b0:	190000c4 	addi	r4,r3,3
   893b4:	1000101e 	bne	r2,zero,893f8 <_dtoa_r+0x338>
   893b8:	d8802917 	ldw	r2,164(sp)
   893bc:	11000015 	stw	r4,0(r2)
   893c0:	003f7306 	br	89190 <_dtoa_r+0xd0>
   893c4:	00a00034 	movhi	r2,32768
   893c8:	10bfffc4 	addi	r2,r2,-1
   893cc:	00c00044 	movi	r3,1
   893d0:	88aa703a 	and	r21,r17,r2
   893d4:	90c00015 	stw	r3,0(r18)
   893d8:	003f5806 	br	8913c <_dtoa_r+0x7c>
   893dc:	00800434 	movhi	r2,16
   893e0:	10bfffc4 	addi	r2,r2,-1
   893e4:	a884703a 	and	r2,r21,r2
   893e8:	103fec1e 	bne	r2,zero,8939c <_dtoa_r+0x2dc>
   893ec:	00c00274 	movhi	r3,9
   893f0:	18cb2a04 	addi	r3,r3,11432
   893f4:	003feb06 	br	893a4 <_dtoa_r+0x2e4>
   893f8:	d8802917 	ldw	r2,164(sp)
   893fc:	19000204 	addi	r4,r3,8
   89400:	11000015 	stw	r4,0(r2)
   89404:	003f6206 	br	89190 <_dtoa_r+0xd0>
   89408:	ddc00117 	ldw	r23,4(sp)
   8940c:	d8800217 	ldw	r2,8(sp)
   89410:	01000804 	movi	r4,32
   89414:	b8c10c84 	addi	r3,r23,1074
   89418:	18a3883a 	add	r17,r3,r2
   8941c:	2441b80e 	bge	r4,r17,89b00 <_dtoa_r+0xa40>
   89420:	00c01004 	movi	r3,64
   89424:	1c47c83a 	sub	r3,r3,r17
   89428:	88bff804 	addi	r2,r17,-32
   8942c:	a8c6983a 	sll	r3,r21,r3
   89430:	a084d83a 	srl	r2,r20,r2
   89434:	1888b03a 	or	r4,r3,r2
   89438:	008d6880 	call	8d688 <__floatunsidf>
   8943c:	1011883a 	mov	r8,r2
   89440:	00bf8434 	movhi	r2,65040
   89444:	01000044 	movi	r4,1
   89448:	10d3883a 	add	r9,r2,r3
   8944c:	8dbef344 	addi	r22,r17,-1075
   89450:	d9000815 	stw	r4,32(sp)
   89454:	003f6f06 	br	89214 <_dtoa_r+0x154>
   89458:	d8001715 	stw	zero,92(sp)
   8945c:	04400044 	movi	r17,1
   89460:	00bfffc4 	movi	r2,-1
   89464:	00c00044 	movi	r3,1
   89468:	d8800e15 	stw	r2,56(sp)
   8946c:	d8002615 	stw	zero,152(sp)
   89470:	d8800f15 	stw	r2,60(sp)
   89474:	d8c00b15 	stw	r3,44(sp)
   89478:	1021883a 	mov	r16,r2
   8947c:	d8801617 	ldw	r2,88(sp)
   89480:	10001115 	stw	zero,68(r2)
   89484:	d8801617 	ldw	r2,88(sp)
   89488:	11401117 	ldw	r5,68(r2)
   8948c:	1009883a 	mov	r4,r2
   89490:	008b5400 	call	8b540 <_Balloc>
   89494:	d8c01617 	ldw	r3,88(sp)
   89498:	d8800515 	stw	r2,20(sp)
   8949c:	18801015 	stw	r2,64(r3)
   894a0:	00800384 	movi	r2,14
   894a4:	14006836 	bltu	r2,r16,89648 <_dtoa_r+0x588>
   894a8:	8805003a 	cmpeq	r2,r17,zero
   894ac:	1000661e 	bne	r2,zero,89648 <_dtoa_r+0x588>
   894b0:	d9000d17 	ldw	r4,52(sp)
   894b4:	0102300e 	bge	zero,r4,89d78 <_dtoa_r+0xcb8>
   894b8:	208003cc 	andi	r2,r4,15
   894bc:	100490fa 	slli	r2,r2,3
   894c0:	2025d13a 	srai	r18,r4,4
   894c4:	00c00274 	movhi	r3,9
   894c8:	18cb3e04 	addi	r3,r3,11512
   894cc:	10c5883a 	add	r2,r2,r3
   894d0:	90c0040c 	andi	r3,r18,16
   894d4:	14000017 	ldw	r16,0(r2)
   894d8:	14400117 	ldw	r17,4(r2)
   894dc:	18036a1e 	bne	r3,zero,8a288 <_dtoa_r+0x11c8>
   894e0:	05800084 	movi	r22,2
   894e4:	90001026 	beq	r18,zero,89528 <_dtoa_r+0x468>
   894e8:	04c00274 	movhi	r19,9
   894ec:	9ccb7004 	addi	r19,r19,11712
   894f0:	9080004c 	andi	r2,r18,1
   894f4:	1005003a 	cmpeq	r2,r2,zero
   894f8:	1000081e 	bne	r2,zero,8951c <_dtoa_r+0x45c>
   894fc:	99800017 	ldw	r6,0(r19)
   89500:	99c00117 	ldw	r7,4(r19)
   89504:	880b883a 	mov	r5,r17
   89508:	8009883a 	mov	r4,r16
   8950c:	00839000 	call	83900 <__muldf3>
   89510:	1021883a 	mov	r16,r2
   89514:	b5800044 	addi	r22,r22,1
   89518:	1823883a 	mov	r17,r3
   8951c:	9025d07a 	srai	r18,r18,1
   89520:	9cc00204 	addi	r19,r19,8
   89524:	903ff21e 	bne	r18,zero,894f0 <_dtoa_r+0x430>
   89528:	a80b883a 	mov	r5,r21
   8952c:	a009883a 	mov	r4,r20
   89530:	880f883a 	mov	r7,r17
   89534:	800d883a 	mov	r6,r16
   89538:	0083cc40 	call	83cc4 <__divdf3>
   8953c:	1029883a 	mov	r20,r2
   89540:	182b883a 	mov	r21,r3
   89544:	d8c00c17 	ldw	r3,48(sp)
   89548:	1805003a 	cmpeq	r2,r3,zero
   8954c:	1000081e 	bne	r2,zero,89570 <_dtoa_r+0x4b0>
   89550:	0005883a 	mov	r2,zero
   89554:	00cffc34 	movhi	r3,16368
   89558:	180f883a 	mov	r7,r3
   8955c:	a009883a 	mov	r4,r20
   89560:	a80b883a 	mov	r5,r21
   89564:	100d883a 	mov	r6,r2
   89568:	008d6000 	call	8d600 <__ltdf2>
   8956c:	1003fe16 	blt	r2,zero,8a568 <_dtoa_r+0x14a8>
   89570:	b009883a 	mov	r4,r22
   89574:	00840b40 	call	840b4 <__floatsidf>
   89578:	180b883a 	mov	r5,r3
   8957c:	1009883a 	mov	r4,r2
   89580:	a00d883a 	mov	r6,r20
   89584:	a80f883a 	mov	r7,r21
   89588:	00839000 	call	83900 <__muldf3>
   8958c:	0011883a 	mov	r8,zero
   89590:	02500734 	movhi	r9,16412
   89594:	1009883a 	mov	r4,r2
   89598:	180b883a 	mov	r5,r3
   8959c:	480f883a 	mov	r7,r9
   895a0:	400d883a 	mov	r6,r8
   895a4:	008388c0 	call	8388c <__adddf3>
   895a8:	d9000f17 	ldw	r4,60(sp)
   895ac:	102d883a 	mov	r22,r2
   895b0:	00bf3034 	movhi	r2,64704
   895b4:	18b9883a 	add	fp,r3,r2
   895b8:	e02f883a 	mov	r23,fp
   895bc:	20028f1e 	bne	r4,zero,89ffc <_dtoa_r+0xf3c>
   895c0:	0005883a 	mov	r2,zero
   895c4:	00d00534 	movhi	r3,16404
   895c8:	a009883a 	mov	r4,r20
   895cc:	a80b883a 	mov	r5,r21
   895d0:	180f883a 	mov	r7,r3
   895d4:	100d883a 	mov	r6,r2
   895d8:	008380c0 	call	8380c <__subdf3>
   895dc:	1009883a 	mov	r4,r2
   895e0:	e00f883a 	mov	r7,fp
   895e4:	180b883a 	mov	r5,r3
   895e8:	b00d883a 	mov	r6,r22
   895ec:	1025883a 	mov	r18,r2
   895f0:	1827883a 	mov	r19,r3
   895f4:	0083fa40 	call	83fa4 <__gtdf2>
   895f8:	00834f16 	blt	zero,r2,8a338 <_dtoa_r+0x1278>
   895fc:	e0e0003c 	xorhi	r3,fp,32768
   89600:	9009883a 	mov	r4,r18
   89604:	980b883a 	mov	r5,r19
   89608:	180f883a 	mov	r7,r3
   8960c:	b00d883a 	mov	r6,r22
   89610:	008d6000 	call	8d600 <__ltdf2>
   89614:	1000080e 	bge	r2,zero,89638 <_dtoa_r+0x578>
   89618:	0027883a 	mov	r19,zero
   8961c:	0025883a 	mov	r18,zero
   89620:	d8802617 	ldw	r2,152(sp)
   89624:	df000517 	ldw	fp,20(sp)
   89628:	d8000615 	stw	zero,24(sp)
   8962c:	0084303a 	nor	r2,zero,r2
   89630:	d8800d15 	stw	r2,52(sp)
   89634:	00019b06 	br	89ca4 <_dtoa_r+0xbe4>
   89638:	d9801217 	ldw	r6,72(sp)
   8963c:	d8801317 	ldw	r2,76(sp)
   89640:	3029883a 	mov	r20,r6
   89644:	102b883a 	mov	r21,r2
   89648:	d8c00217 	ldw	r3,8(sp)
   8964c:	18008516 	blt	r3,zero,89864 <_dtoa_r+0x7a4>
   89650:	d9000d17 	ldw	r4,52(sp)
   89654:	00800384 	movi	r2,14
   89658:	11008216 	blt	r2,r4,89864 <_dtoa_r+0x7a4>
   8965c:	200490fa 	slli	r2,r4,3
   89660:	d9802617 	ldw	r6,152(sp)
   89664:	00c00274 	movhi	r3,9
   89668:	18cb3e04 	addi	r3,r3,11512
   8966c:	10c5883a 	add	r2,r2,r3
   89670:	14800017 	ldw	r18,0(r2)
   89674:	14c00117 	ldw	r19,4(r2)
   89678:	30031e16 	blt	r6,zero,8a2f4 <_dtoa_r+0x1234>
   8967c:	d9000517 	ldw	r4,20(sp)
   89680:	d8c00f17 	ldw	r3,60(sp)
   89684:	a823883a 	mov	r17,r21
   89688:	a021883a 	mov	r16,r20
   8968c:	192b883a 	add	r21,r3,r4
   89690:	2039883a 	mov	fp,r4
   89694:	00000f06 	br	896d4 <_dtoa_r+0x614>
   89698:	0005883a 	mov	r2,zero
   8969c:	00d00934 	movhi	r3,16420
   896a0:	5009883a 	mov	r4,r10
   896a4:	580b883a 	mov	r5,r11
   896a8:	180f883a 	mov	r7,r3
   896ac:	100d883a 	mov	r6,r2
   896b0:	00839000 	call	83900 <__muldf3>
   896b4:	180b883a 	mov	r5,r3
   896b8:	000d883a 	mov	r6,zero
   896bc:	000f883a 	mov	r7,zero
   896c0:	1009883a 	mov	r4,r2
   896c4:	1021883a 	mov	r16,r2
   896c8:	1823883a 	mov	r17,r3
   896cc:	008d5780 	call	8d578 <__nedf2>
   896d0:	10004526 	beq	r2,zero,897e8 <_dtoa_r+0x728>
   896d4:	900d883a 	mov	r6,r18
   896d8:	980f883a 	mov	r7,r19
   896dc:	8009883a 	mov	r4,r16
   896e0:	880b883a 	mov	r5,r17
   896e4:	0083cc40 	call	83cc4 <__divdf3>
   896e8:	180b883a 	mov	r5,r3
   896ec:	1009883a 	mov	r4,r2
   896f0:	00841ac0 	call	841ac <__fixdfsi>
   896f4:	1009883a 	mov	r4,r2
   896f8:	1029883a 	mov	r20,r2
   896fc:	00840b40 	call	840b4 <__floatsidf>
   89700:	180f883a 	mov	r7,r3
   89704:	9009883a 	mov	r4,r18
   89708:	980b883a 	mov	r5,r19
   8970c:	100d883a 	mov	r6,r2
   89710:	00839000 	call	83900 <__muldf3>
   89714:	180f883a 	mov	r7,r3
   89718:	880b883a 	mov	r5,r17
   8971c:	8009883a 	mov	r4,r16
   89720:	100d883a 	mov	r6,r2
   89724:	008380c0 	call	8380c <__subdf3>
   89728:	1015883a 	mov	r10,r2
   8972c:	a0800c04 	addi	r2,r20,48
   89730:	e0800005 	stb	r2,0(fp)
   89734:	e7000044 	addi	fp,fp,1
   89738:	1817883a 	mov	r11,r3
   8973c:	e57fd61e 	bne	fp,r21,89698 <_dtoa_r+0x5d8>
   89740:	500d883a 	mov	r6,r10
   89744:	180f883a 	mov	r7,r3
   89748:	5009883a 	mov	r4,r10
   8974c:	180b883a 	mov	r5,r3
   89750:	008388c0 	call	8388c <__adddf3>
   89754:	100d883a 	mov	r6,r2
   89758:	9009883a 	mov	r4,r18
   8975c:	980b883a 	mov	r5,r19
   89760:	180f883a 	mov	r7,r3
   89764:	1021883a 	mov	r16,r2
   89768:	1823883a 	mov	r17,r3
   8976c:	008d6000 	call	8d600 <__ltdf2>
   89770:	10000816 	blt	r2,zero,89794 <_dtoa_r+0x6d4>
   89774:	980b883a 	mov	r5,r19
   89778:	800d883a 	mov	r6,r16
   8977c:	880f883a 	mov	r7,r17
   89780:	9009883a 	mov	r4,r18
   89784:	0083f1c0 	call	83f1c <__eqdf2>
   89788:	1000171e 	bne	r2,zero,897e8 <_dtoa_r+0x728>
   8978c:	a080004c 	andi	r2,r20,1
   89790:	10001526 	beq	r2,zero,897e8 <_dtoa_r+0x728>
   89794:	d8800d17 	ldw	r2,52(sp)
   89798:	d8800415 	stw	r2,16(sp)
   8979c:	e009883a 	mov	r4,fp
   897a0:	213fffc4 	addi	r4,r4,-1
   897a4:	20c00007 	ldb	r3,0(r4)
   897a8:	00800e44 	movi	r2,57
   897ac:	1880081e 	bne	r3,r2,897d0 <_dtoa_r+0x710>
   897b0:	d8800517 	ldw	r2,20(sp)
   897b4:	113ffa1e 	bne	r2,r4,897a0 <_dtoa_r+0x6e0>
   897b8:	d8c00417 	ldw	r3,16(sp)
   897bc:	d9800517 	ldw	r6,20(sp)
   897c0:	00800c04 	movi	r2,48
   897c4:	18c00044 	addi	r3,r3,1
   897c8:	d8c00415 	stw	r3,16(sp)
   897cc:	30800005 	stb	r2,0(r6)
   897d0:	20800003 	ldbu	r2,0(r4)
   897d4:	d8c00417 	ldw	r3,16(sp)
   897d8:	27000044 	addi	fp,r4,1
   897dc:	10800044 	addi	r2,r2,1
   897e0:	d8c00d15 	stw	r3,52(sp)
   897e4:	20800005 	stb	r2,0(r4)
   897e8:	d9001617 	ldw	r4,88(sp)
   897ec:	d9400717 	ldw	r5,28(sp)
   897f0:	008afc00 	call	8afc0 <_Bfree>
   897f4:	e0000005 	stb	zero,0(fp)
   897f8:	d9800d17 	ldw	r6,52(sp)
   897fc:	d8c02717 	ldw	r3,156(sp)
   89800:	d9002917 	ldw	r4,164(sp)
   89804:	30800044 	addi	r2,r6,1
   89808:	18800015 	stw	r2,0(r3)
   8980c:	20029c26 	beq	r4,zero,8a280 <_dtoa_r+0x11c0>
   89810:	d8c00517 	ldw	r3,20(sp)
   89814:	27000015 	stw	fp,0(r4)
   89818:	003e5d06 	br	89190 <_dtoa_r+0xd0>
   8981c:	d9800d17 	ldw	r6,52(sp)
   89820:	00c00274 	movhi	r3,9
   89824:	18cb3e04 	addi	r3,r3,11512
   89828:	d9001217 	ldw	r4,72(sp)
   8982c:	300490fa 	slli	r2,r6,3
   89830:	d9401317 	ldw	r5,76(sp)
   89834:	10c5883a 	add	r2,r2,r3
   89838:	12000017 	ldw	r8,0(r2)
   8983c:	12400117 	ldw	r9,4(r2)
   89840:	400d883a 	mov	r6,r8
   89844:	480f883a 	mov	r7,r9
   89848:	008d6000 	call	8d600 <__ltdf2>
   8984c:	1000030e 	bge	r2,zero,8985c <_dtoa_r+0x79c>
   89850:	d8800d17 	ldw	r2,52(sp)
   89854:	10bfffc4 	addi	r2,r2,-1
   89858:	d8800d15 	stw	r2,52(sp)
   8985c:	d8000c15 	stw	zero,48(sp)
   89860:	003ea806 	br	89304 <_dtoa_r+0x244>
   89864:	d9000b17 	ldw	r4,44(sp)
   89868:	202cc03a 	cmpne	r22,r4,zero
   8986c:	b000c71e 	bne	r22,zero,89b8c <_dtoa_r+0xacc>
   89870:	dc001117 	ldw	r16,68(sp)
   89874:	dc801017 	ldw	r18,64(sp)
   89878:	0027883a 	mov	r19,zero
   8987c:	04000b0e 	bge	zero,r16,898ac <_dtoa_r+0x7ec>
   89880:	d8c00a17 	ldw	r3,40(sp)
   89884:	00c0090e 	bge	zero,r3,898ac <_dtoa_r+0x7ec>
   89888:	8005883a 	mov	r2,r16
   8988c:	1c011316 	blt	r3,r16,89cdc <_dtoa_r+0xc1c>
   89890:	d9000a17 	ldw	r4,40(sp)
   89894:	d9801117 	ldw	r6,68(sp)
   89898:	80a1c83a 	sub	r16,r16,r2
   8989c:	2089c83a 	sub	r4,r4,r2
   898a0:	308dc83a 	sub	r6,r6,r2
   898a4:	d9000a15 	stw	r4,40(sp)
   898a8:	d9801115 	stw	r6,68(sp)
   898ac:	d8801017 	ldw	r2,64(sp)
   898b0:	0080150e 	bge	zero,r2,89908 <_dtoa_r+0x848>
   898b4:	d8c00b17 	ldw	r3,44(sp)
   898b8:	1805003a 	cmpeq	r2,r3,zero
   898bc:	1001c91e 	bne	r2,zero,89fe4 <_dtoa_r+0xf24>
   898c0:	04800e0e 	bge	zero,r18,898fc <_dtoa_r+0x83c>
   898c4:	d9001617 	ldw	r4,88(sp)
   898c8:	980b883a 	mov	r5,r19
   898cc:	900d883a 	mov	r6,r18
   898d0:	008be0c0 	call	8be0c <__pow5mult>
   898d4:	d9001617 	ldw	r4,88(sp)
   898d8:	d9800717 	ldw	r6,28(sp)
   898dc:	100b883a 	mov	r5,r2
   898e0:	1027883a 	mov	r19,r2
   898e4:	008ba500 	call	8ba50 <__multiply>
   898e8:	d9001617 	ldw	r4,88(sp)
   898ec:	d9400717 	ldw	r5,28(sp)
   898f0:	1023883a 	mov	r17,r2
   898f4:	008afc00 	call	8afc0 <_Bfree>
   898f8:	dc400715 	stw	r17,28(sp)
   898fc:	d9001017 	ldw	r4,64(sp)
   89900:	248dc83a 	sub	r6,r4,r18
   89904:	30010e1e 	bne	r6,zero,89d40 <_dtoa_r+0xc80>
   89908:	d9001617 	ldw	r4,88(sp)
   8990c:	04400044 	movi	r17,1
   89910:	880b883a 	mov	r5,r17
   89914:	008bca40 	call	8bca4 <__i2b>
   89918:	d9800917 	ldw	r6,36(sp)
   8991c:	1025883a 	mov	r18,r2
   89920:	0180040e 	bge	zero,r6,89934 <_dtoa_r+0x874>
   89924:	d9001617 	ldw	r4,88(sp)
   89928:	100b883a 	mov	r5,r2
   8992c:	008be0c0 	call	8be0c <__pow5mult>
   89930:	1025883a 	mov	r18,r2
   89934:	d8801717 	ldw	r2,92(sp)
   89938:	8880f30e 	bge	r17,r2,89d08 <_dtoa_r+0xc48>
   8993c:	0023883a 	mov	r17,zero
   89940:	d9800917 	ldw	r6,36(sp)
   89944:	30019e1e 	bne	r6,zero,89fc0 <_dtoa_r+0xf00>
   89948:	00c00044 	movi	r3,1
   8994c:	d9000a17 	ldw	r4,40(sp)
   89950:	20c5883a 	add	r2,r4,r3
   89954:	10c007cc 	andi	r3,r2,31
   89958:	1800841e 	bne	r3,zero,89b6c <_dtoa_r+0xaac>
   8995c:	00800704 	movi	r2,28
   89960:	d9000a17 	ldw	r4,40(sp)
   89964:	d9801117 	ldw	r6,68(sp)
   89968:	80a1883a 	add	r16,r16,r2
   8996c:	2089883a 	add	r4,r4,r2
   89970:	308d883a 	add	r6,r6,r2
   89974:	d9000a15 	stw	r4,40(sp)
   89978:	d9801115 	stw	r6,68(sp)
   8997c:	d8801117 	ldw	r2,68(sp)
   89980:	0080050e 	bge	zero,r2,89998 <_dtoa_r+0x8d8>
   89984:	d9400717 	ldw	r5,28(sp)
   89988:	d9001617 	ldw	r4,88(sp)
   8998c:	100d883a 	mov	r6,r2
   89990:	008b9040 	call	8b904 <__lshift>
   89994:	d8800715 	stw	r2,28(sp)
   89998:	d8c00a17 	ldw	r3,40(sp)
   8999c:	00c0050e 	bge	zero,r3,899b4 <_dtoa_r+0x8f4>
   899a0:	d9001617 	ldw	r4,88(sp)
   899a4:	900b883a 	mov	r5,r18
   899a8:	180d883a 	mov	r6,r3
   899ac:	008b9040 	call	8b904 <__lshift>
   899b0:	1025883a 	mov	r18,r2
   899b4:	d9000c17 	ldw	r4,48(sp)
   899b8:	2005003a 	cmpeq	r2,r4,zero
   899bc:	10016f26 	beq	r2,zero,89f7c <_dtoa_r+0xebc>
   899c0:	d9000f17 	ldw	r4,60(sp)
   899c4:	0102170e 	bge	zero,r4,8a224 <_dtoa_r+0x1164>
   899c8:	d9800b17 	ldw	r6,44(sp)
   899cc:	3005003a 	cmpeq	r2,r6,zero
   899d0:	1000881e 	bne	r2,zero,89bf4 <_dtoa_r+0xb34>
   899d4:	0400050e 	bge	zero,r16,899ec <_dtoa_r+0x92c>
   899d8:	d9001617 	ldw	r4,88(sp)
   899dc:	980b883a 	mov	r5,r19
   899e0:	800d883a 	mov	r6,r16
   899e4:	008b9040 	call	8b904 <__lshift>
   899e8:	1027883a 	mov	r19,r2
   899ec:	8804c03a 	cmpne	r2,r17,zero
   899f0:	1002541e 	bne	r2,zero,8a344 <_dtoa_r+0x1284>
   899f4:	980b883a 	mov	r5,r19
   899f8:	dd800517 	ldw	r22,20(sp)
   899fc:	dcc00615 	stw	r19,24(sp)
   89a00:	a700004c 	andi	fp,r20,1
   89a04:	2827883a 	mov	r19,r5
   89a08:	d9000717 	ldw	r4,28(sp)
   89a0c:	900b883a 	mov	r5,r18
   89a10:	0088e7c0 	call	88e7c <quorem>
   89a14:	d9000717 	ldw	r4,28(sp)
   89a18:	d9400617 	ldw	r5,24(sp)
   89a1c:	1023883a 	mov	r17,r2
   89a20:	8dc00c04 	addi	r23,r17,48
   89a24:	008b11c0 	call	8b11c <__mcmp>
   89a28:	d9001617 	ldw	r4,88(sp)
   89a2c:	900b883a 	mov	r5,r18
   89a30:	980d883a 	mov	r6,r19
   89a34:	1029883a 	mov	r20,r2
   89a38:	008b7780 	call	8b778 <__mdiff>
   89a3c:	102b883a 	mov	r21,r2
   89a40:	10800317 	ldw	r2,12(r2)
   89a44:	1001281e 	bne	r2,zero,89ee8 <_dtoa_r+0xe28>
   89a48:	d9000717 	ldw	r4,28(sp)
   89a4c:	a80b883a 	mov	r5,r21
   89a50:	008b11c0 	call	8b11c <__mcmp>
   89a54:	d9001617 	ldw	r4,88(sp)
   89a58:	1021883a 	mov	r16,r2
   89a5c:	a80b883a 	mov	r5,r21
   89a60:	008afc00 	call	8afc0 <_Bfree>
   89a64:	8000041e 	bne	r16,zero,89a78 <_dtoa_r+0x9b8>
   89a68:	d8801717 	ldw	r2,92(sp)
   89a6c:	1000021e 	bne	r2,zero,89a78 <_dtoa_r+0x9b8>
   89a70:	e004c03a 	cmpne	r2,fp,zero
   89a74:	10011726 	beq	r2,zero,89ed4 <_dtoa_r+0xe14>
   89a78:	a0010616 	blt	r20,zero,89e94 <_dtoa_r+0xdd4>
   89a7c:	a000041e 	bne	r20,zero,89a90 <_dtoa_r+0x9d0>
   89a80:	d8c01717 	ldw	r3,92(sp)
   89a84:	1800021e 	bne	r3,zero,89a90 <_dtoa_r+0x9d0>
   89a88:	e004c03a 	cmpne	r2,fp,zero
   89a8c:	10010126 	beq	r2,zero,89e94 <_dtoa_r+0xdd4>
   89a90:	04023d16 	blt	zero,r16,8a388 <_dtoa_r+0x12c8>
   89a94:	b5c00005 	stb	r23,0(r22)
   89a98:	d9800517 	ldw	r6,20(sp)
   89a9c:	d9000f17 	ldw	r4,60(sp)
   89aa0:	b5800044 	addi	r22,r22,1
   89aa4:	3105883a 	add	r2,r6,r4
   89aa8:	b0806526 	beq	r22,r2,89c40 <_dtoa_r+0xb80>
   89aac:	d9400717 	ldw	r5,28(sp)
   89ab0:	d9001617 	ldw	r4,88(sp)
   89ab4:	01800284 	movi	r6,10
   89ab8:	000f883a 	mov	r7,zero
   89abc:	008bce00 	call	8bce0 <__multadd>
   89ac0:	d8800715 	stw	r2,28(sp)
   89ac4:	d8800617 	ldw	r2,24(sp)
   89ac8:	14c10c26 	beq	r2,r19,89efc <_dtoa_r+0xe3c>
   89acc:	d9400617 	ldw	r5,24(sp)
   89ad0:	d9001617 	ldw	r4,88(sp)
   89ad4:	01800284 	movi	r6,10
   89ad8:	000f883a 	mov	r7,zero
   89adc:	008bce00 	call	8bce0 <__multadd>
   89ae0:	d9001617 	ldw	r4,88(sp)
   89ae4:	980b883a 	mov	r5,r19
   89ae8:	01800284 	movi	r6,10
   89aec:	000f883a 	mov	r7,zero
   89af0:	d8800615 	stw	r2,24(sp)
   89af4:	008bce00 	call	8bce0 <__multadd>
   89af8:	1027883a 	mov	r19,r2
   89afc:	003fc206 	br	89a08 <_dtoa_r+0x948>
   89b00:	2445c83a 	sub	r2,r4,r17
   89b04:	a088983a 	sll	r4,r20,r2
   89b08:	003e4b06 	br	89438 <_dtoa_r+0x378>
   89b0c:	01bfffc4 	movi	r6,-1
   89b10:	00800044 	movi	r2,1
   89b14:	d9800e15 	stw	r6,56(sp)
   89b18:	d9800f15 	stw	r6,60(sp)
   89b1c:	d8800b15 	stw	r2,44(sp)
   89b20:	d8c01617 	ldw	r3,88(sp)
   89b24:	008005c4 	movi	r2,23
   89b28:	18001115 	stw	zero,68(r3)
   89b2c:	1580082e 	bgeu	r2,r22,89b50 <_dtoa_r+0xa90>
   89b30:	00c00104 	movi	r3,4
   89b34:	0009883a 	mov	r4,zero
   89b38:	18c7883a 	add	r3,r3,r3
   89b3c:	18800504 	addi	r2,r3,20
   89b40:	21000044 	addi	r4,r4,1
   89b44:	b0bffc2e 	bgeu	r22,r2,89b38 <_dtoa_r+0xa78>
   89b48:	d9801617 	ldw	r6,88(sp)
   89b4c:	31001115 	stw	r4,68(r6)
   89b50:	dc000f17 	ldw	r16,60(sp)
   89b54:	003e4b06 	br	89484 <_dtoa_r+0x3c4>
   89b58:	d9801717 	ldw	r6,92(sp)
   89b5c:	0023883a 	mov	r17,zero
   89b60:	31bfff04 	addi	r6,r6,-4
   89b64:	d9801715 	stw	r6,92(sp)
   89b68:	003df806 	br	8934c <_dtoa_r+0x28c>
   89b6c:	00800804 	movi	r2,32
   89b70:	10c9c83a 	sub	r4,r2,r3
   89b74:	00c00104 	movi	r3,4
   89b78:	19005a16 	blt	r3,r4,89ce4 <_dtoa_r+0xc24>
   89b7c:	008000c4 	movi	r2,3
   89b80:	113f7e16 	blt	r2,r4,8997c <_dtoa_r+0x8bc>
   89b84:	20800704 	addi	r2,r4,28
   89b88:	003f7506 	br	89960 <_dtoa_r+0x8a0>
   89b8c:	d9801717 	ldw	r6,92(sp)
   89b90:	00800044 	movi	r2,1
   89b94:	1180a10e 	bge	r2,r6,89e1c <_dtoa_r+0xd5c>
   89b98:	d9800f17 	ldw	r6,60(sp)
   89b9c:	d8c01017 	ldw	r3,64(sp)
   89ba0:	30bfffc4 	addi	r2,r6,-1
   89ba4:	1881c616 	blt	r3,r2,8a2c0 <_dtoa_r+0x1200>
   89ba8:	18a5c83a 	sub	r18,r3,r2
   89bac:	d8800f17 	ldw	r2,60(sp)
   89bb0:	10026216 	blt	r2,zero,8a53c <_dtoa_r+0x147c>
   89bb4:	dc001117 	ldw	r16,68(sp)
   89bb8:	1007883a 	mov	r3,r2
   89bbc:	d9800a17 	ldw	r6,40(sp)
   89bc0:	d8801117 	ldw	r2,68(sp)
   89bc4:	d9001617 	ldw	r4,88(sp)
   89bc8:	30cd883a 	add	r6,r6,r3
   89bcc:	10c5883a 	add	r2,r2,r3
   89bd0:	01400044 	movi	r5,1
   89bd4:	d9800a15 	stw	r6,40(sp)
   89bd8:	d8801115 	stw	r2,68(sp)
   89bdc:	008bca40 	call	8bca4 <__i2b>
   89be0:	1027883a 	mov	r19,r2
   89be4:	003f2506 	br	8987c <_dtoa_r+0x7bc>
   89be8:	00c00274 	movhi	r3,9
   89bec:	18cb2104 	addi	r3,r3,11396
   89bf0:	003d6706 	br	89190 <_dtoa_r+0xd0>
   89bf4:	dd800517 	ldw	r22,20(sp)
   89bf8:	04000044 	movi	r16,1
   89bfc:	00000706 	br	89c1c <_dtoa_r+0xb5c>
   89c00:	d9400717 	ldw	r5,28(sp)
   89c04:	d9001617 	ldw	r4,88(sp)
   89c08:	01800284 	movi	r6,10
   89c0c:	000f883a 	mov	r7,zero
   89c10:	008bce00 	call	8bce0 <__multadd>
   89c14:	d8800715 	stw	r2,28(sp)
   89c18:	84000044 	addi	r16,r16,1
   89c1c:	d9000717 	ldw	r4,28(sp)
   89c20:	900b883a 	mov	r5,r18
   89c24:	0088e7c0 	call	88e7c <quorem>
   89c28:	15c00c04 	addi	r23,r2,48
   89c2c:	b5c00005 	stb	r23,0(r22)
   89c30:	d8c00f17 	ldw	r3,60(sp)
   89c34:	b5800044 	addi	r22,r22,1
   89c38:	80fff116 	blt	r16,r3,89c00 <_dtoa_r+0xb40>
   89c3c:	d8000615 	stw	zero,24(sp)
   89c40:	d9400717 	ldw	r5,28(sp)
   89c44:	d9001617 	ldw	r4,88(sp)
   89c48:	01800044 	movi	r6,1
   89c4c:	008b9040 	call	8b904 <__lshift>
   89c50:	1009883a 	mov	r4,r2
   89c54:	900b883a 	mov	r5,r18
   89c58:	d8800715 	stw	r2,28(sp)
   89c5c:	008b11c0 	call	8b11c <__mcmp>
   89c60:	00803c0e 	bge	zero,r2,89d54 <_dtoa_r+0xc94>
   89c64:	b009883a 	mov	r4,r22
   89c68:	213fffc4 	addi	r4,r4,-1
   89c6c:	21400003 	ldbu	r5,0(r4)
   89c70:	00800e44 	movi	r2,57
   89c74:	28c03fcc 	andi	r3,r5,255
   89c78:	18c0201c 	xori	r3,r3,128
   89c7c:	18ffe004 	addi	r3,r3,-128
   89c80:	1881981e 	bne	r3,r2,8a2e4 <_dtoa_r+0x1224>
   89c84:	d9800517 	ldw	r6,20(sp)
   89c88:	21bff71e 	bne	r4,r6,89c68 <_dtoa_r+0xba8>
   89c8c:	d8800d17 	ldw	r2,52(sp)
   89c90:	37000044 	addi	fp,r6,1
   89c94:	10800044 	addi	r2,r2,1
   89c98:	d8800d15 	stw	r2,52(sp)
   89c9c:	00800c44 	movi	r2,49
   89ca0:	30800005 	stb	r2,0(r6)
   89ca4:	d9001617 	ldw	r4,88(sp)
   89ca8:	900b883a 	mov	r5,r18
   89cac:	008afc00 	call	8afc0 <_Bfree>
   89cb0:	983ecd26 	beq	r19,zero,897e8 <_dtoa_r+0x728>
   89cb4:	d8c00617 	ldw	r3,24(sp)
   89cb8:	18000426 	beq	r3,zero,89ccc <_dtoa_r+0xc0c>
   89cbc:	1cc00326 	beq	r3,r19,89ccc <_dtoa_r+0xc0c>
   89cc0:	d9001617 	ldw	r4,88(sp)
   89cc4:	180b883a 	mov	r5,r3
   89cc8:	008afc00 	call	8afc0 <_Bfree>
   89ccc:	d9001617 	ldw	r4,88(sp)
   89cd0:	980b883a 	mov	r5,r19
   89cd4:	008afc00 	call	8afc0 <_Bfree>
   89cd8:	003ec306 	br	897e8 <_dtoa_r+0x728>
   89cdc:	1805883a 	mov	r2,r3
   89ce0:	003eeb06 	br	89890 <_dtoa_r+0x7d0>
   89ce4:	d9800a17 	ldw	r6,40(sp)
   89ce8:	d8c01117 	ldw	r3,68(sp)
   89cec:	20bfff04 	addi	r2,r4,-4
   89cf0:	308d883a 	add	r6,r6,r2
   89cf4:	1887883a 	add	r3,r3,r2
   89cf8:	80a1883a 	add	r16,r16,r2
   89cfc:	d9800a15 	stw	r6,40(sp)
   89d00:	d8c01115 	stw	r3,68(sp)
   89d04:	003f1d06 	br	8997c <_dtoa_r+0x8bc>
   89d08:	a03f0c1e 	bne	r20,zero,8993c <_dtoa_r+0x87c>
   89d0c:	00800434 	movhi	r2,16
   89d10:	10bfffc4 	addi	r2,r2,-1
   89d14:	a884703a 	and	r2,r21,r2
   89d18:	103f081e 	bne	r2,zero,8993c <_dtoa_r+0x87c>
   89d1c:	a89ffc2c 	andhi	r2,r21,32752
   89d20:	103f0626 	beq	r2,zero,8993c <_dtoa_r+0x87c>
   89d24:	d8c01117 	ldw	r3,68(sp)
   89d28:	d9000a17 	ldw	r4,40(sp)
   89d2c:	18c00044 	addi	r3,r3,1
   89d30:	21000044 	addi	r4,r4,1
   89d34:	d8c01115 	stw	r3,68(sp)
   89d38:	d9000a15 	stw	r4,40(sp)
   89d3c:	003f0006 	br	89940 <_dtoa_r+0x880>
   89d40:	d9400717 	ldw	r5,28(sp)
   89d44:	d9001617 	ldw	r4,88(sp)
   89d48:	008be0c0 	call	8be0c <__pow5mult>
   89d4c:	d8800715 	stw	r2,28(sp)
   89d50:	003eed06 	br	89908 <_dtoa_r+0x848>
   89d54:	1000021e 	bne	r2,zero,89d60 <_dtoa_r+0xca0>
   89d58:	b880004c 	andi	r2,r23,1
   89d5c:	103fc11e 	bne	r2,zero,89c64 <_dtoa_r+0xba4>
   89d60:	b5bfffc4 	addi	r22,r22,-1
   89d64:	b0c00007 	ldb	r3,0(r22)
   89d68:	00800c04 	movi	r2,48
   89d6c:	18bffc26 	beq	r3,r2,89d60 <_dtoa_r+0xca0>
   89d70:	b7000044 	addi	fp,r22,1
   89d74:	003fcb06 	br	89ca4 <_dtoa_r+0xbe4>
   89d78:	d9800d17 	ldw	r6,52(sp)
   89d7c:	018fc83a 	sub	r7,zero,r6
   89d80:	3801f726 	beq	r7,zero,8a560 <_dtoa_r+0x14a0>
   89d84:	398003cc 	andi	r6,r7,15
   89d88:	300c90fa 	slli	r6,r6,3
   89d8c:	01400274 	movhi	r5,9
   89d90:	294b3e04 	addi	r5,r5,11512
   89d94:	d9001217 	ldw	r4,72(sp)
   89d98:	314d883a 	add	r6,r6,r5
   89d9c:	30c00117 	ldw	r3,4(r6)
   89da0:	30800017 	ldw	r2,0(r6)
   89da4:	d9401317 	ldw	r5,76(sp)
   89da8:	3821d13a 	srai	r16,r7,4
   89dac:	100d883a 	mov	r6,r2
   89db0:	180f883a 	mov	r7,r3
   89db4:	00839000 	call	83900 <__muldf3>
   89db8:	1011883a 	mov	r8,r2
   89dbc:	1813883a 	mov	r9,r3
   89dc0:	1029883a 	mov	r20,r2
   89dc4:	182b883a 	mov	r21,r3
   89dc8:	8001e526 	beq	r16,zero,8a560 <_dtoa_r+0x14a0>
   89dcc:	05800084 	movi	r22,2
   89dd0:	04400274 	movhi	r17,9
   89dd4:	8c4b7004 	addi	r17,r17,11712
   89dd8:	8080004c 	andi	r2,r16,1
   89ddc:	1005003a 	cmpeq	r2,r2,zero
   89de0:	1000081e 	bne	r2,zero,89e04 <_dtoa_r+0xd44>
   89de4:	89800017 	ldw	r6,0(r17)
   89de8:	89c00117 	ldw	r7,4(r17)
   89dec:	480b883a 	mov	r5,r9
   89df0:	4009883a 	mov	r4,r8
   89df4:	00839000 	call	83900 <__muldf3>
   89df8:	1011883a 	mov	r8,r2
   89dfc:	b5800044 	addi	r22,r22,1
   89e00:	1813883a 	mov	r9,r3
   89e04:	8021d07a 	srai	r16,r16,1
   89e08:	8c400204 	addi	r17,r17,8
   89e0c:	803ff21e 	bne	r16,zero,89dd8 <_dtoa_r+0xd18>
   89e10:	4029883a 	mov	r20,r8
   89e14:	482b883a 	mov	r21,r9
   89e18:	003dca06 	br	89544 <_dtoa_r+0x484>
   89e1c:	d9000817 	ldw	r4,32(sp)
   89e20:	2005003a 	cmpeq	r2,r4,zero
   89e24:	1001f61e 	bne	r2,zero,8a600 <_dtoa_r+0x1540>
   89e28:	dc001117 	ldw	r16,68(sp)
   89e2c:	dc801017 	ldw	r18,64(sp)
   89e30:	18c10cc4 	addi	r3,r3,1075
   89e34:	003f6106 	br	89bbc <_dtoa_r+0xafc>
   89e38:	d8000b15 	stw	zero,44(sp)
   89e3c:	d9802617 	ldw	r6,152(sp)
   89e40:	d8c00d17 	ldw	r3,52(sp)
   89e44:	30800044 	addi	r2,r6,1
   89e48:	18ad883a 	add	r22,r3,r2
   89e4c:	b13fffc4 	addi	r4,r22,-1
   89e50:	d9000e15 	stw	r4,56(sp)
   89e54:	0581f60e 	bge	zero,r22,8a630 <_dtoa_r+0x1570>
   89e58:	dd800f15 	stw	r22,60(sp)
   89e5c:	003f3006 	br	89b20 <_dtoa_r+0xa60>
   89e60:	d8000b15 	stw	zero,44(sp)
   89e64:	d9002617 	ldw	r4,152(sp)
   89e68:	0101eb0e 	bge	zero,r4,8a618 <_dtoa_r+0x1558>
   89e6c:	202d883a 	mov	r22,r4
   89e70:	d9000e15 	stw	r4,56(sp)
   89e74:	d9000f15 	stw	r4,60(sp)
   89e78:	003f2906 	br	89b20 <_dtoa_r+0xa60>
   89e7c:	01800044 	movi	r6,1
   89e80:	d9800b15 	stw	r6,44(sp)
   89e84:	003ff706 	br	89e64 <_dtoa_r+0xda4>
   89e88:	01000044 	movi	r4,1
   89e8c:	d9000b15 	stw	r4,44(sp)
   89e90:	003fea06 	br	89e3c <_dtoa_r+0xd7c>
   89e94:	04000c0e 	bge	zero,r16,89ec8 <_dtoa_r+0xe08>
   89e98:	d9400717 	ldw	r5,28(sp)
   89e9c:	d9001617 	ldw	r4,88(sp)
   89ea0:	01800044 	movi	r6,1
   89ea4:	008b9040 	call	8b904 <__lshift>
   89ea8:	1009883a 	mov	r4,r2
   89eac:	900b883a 	mov	r5,r18
   89eb0:	d8800715 	stw	r2,28(sp)
   89eb4:	008b11c0 	call	8b11c <__mcmp>
   89eb8:	0081e00e 	bge	zero,r2,8a63c <_dtoa_r+0x157c>
   89ebc:	bdc00044 	addi	r23,r23,1
   89ec0:	00800e84 	movi	r2,58
   89ec4:	b881a226 	beq	r23,r2,8a550 <_dtoa_r+0x1490>
   89ec8:	b7000044 	addi	fp,r22,1
   89ecc:	b5c00005 	stb	r23,0(r22)
   89ed0:	003f7406 	br	89ca4 <_dtoa_r+0xbe4>
   89ed4:	00800e44 	movi	r2,57
   89ed8:	b8819d26 	beq	r23,r2,8a550 <_dtoa_r+0x1490>
   89edc:	053ffa0e 	bge	zero,r20,89ec8 <_dtoa_r+0xe08>
   89ee0:	8dc00c44 	addi	r23,r17,49
   89ee4:	003ff806 	br	89ec8 <_dtoa_r+0xe08>
   89ee8:	d9001617 	ldw	r4,88(sp)
   89eec:	a80b883a 	mov	r5,r21
   89ef0:	04000044 	movi	r16,1
   89ef4:	008afc00 	call	8afc0 <_Bfree>
   89ef8:	003edf06 	br	89a78 <_dtoa_r+0x9b8>
   89efc:	d9001617 	ldw	r4,88(sp)
   89f00:	980b883a 	mov	r5,r19
   89f04:	01800284 	movi	r6,10
   89f08:	000f883a 	mov	r7,zero
   89f0c:	008bce00 	call	8bce0 <__multadd>
   89f10:	1027883a 	mov	r19,r2
   89f14:	d8800615 	stw	r2,24(sp)
   89f18:	003ebb06 	br	89a08 <_dtoa_r+0x948>
   89f1c:	d9801117 	ldw	r6,68(sp)
   89f20:	d8800d17 	ldw	r2,52(sp)
   89f24:	d8000915 	stw	zero,36(sp)
   89f28:	308dc83a 	sub	r6,r6,r2
   89f2c:	0087c83a 	sub	r3,zero,r2
   89f30:	d9801115 	stw	r6,68(sp)
   89f34:	d8c01015 	stw	r3,64(sp)
   89f38:	003cfe06 	br	89334 <_dtoa_r+0x274>
   89f3c:	018dc83a 	sub	r6,zero,r6
   89f40:	d9801115 	stw	r6,68(sp)
   89f44:	d8000a15 	stw	zero,40(sp)
   89f48:	003cf306 	br	89318 <_dtoa_r+0x258>
   89f4c:	d9000d17 	ldw	r4,52(sp)
   89f50:	00840b40 	call	840b4 <__floatsidf>
   89f54:	880b883a 	mov	r5,r17
   89f58:	8009883a 	mov	r4,r16
   89f5c:	180f883a 	mov	r7,r3
   89f60:	100d883a 	mov	r6,r2
   89f64:	008d5780 	call	8d578 <__nedf2>
   89f68:	103ce126 	beq	r2,zero,892f0 <_dtoa_r+0x230>
   89f6c:	d9800d17 	ldw	r6,52(sp)
   89f70:	31bfffc4 	addi	r6,r6,-1
   89f74:	d9800d15 	stw	r6,52(sp)
   89f78:	003cdd06 	br	892f0 <_dtoa_r+0x230>
   89f7c:	d9000717 	ldw	r4,28(sp)
   89f80:	900b883a 	mov	r5,r18
   89f84:	008b11c0 	call	8b11c <__mcmp>
   89f88:	103e8d0e 	bge	r2,zero,899c0 <_dtoa_r+0x900>
   89f8c:	d9400717 	ldw	r5,28(sp)
   89f90:	d9001617 	ldw	r4,88(sp)
   89f94:	01800284 	movi	r6,10
   89f98:	000f883a 	mov	r7,zero
   89f9c:	008bce00 	call	8bce0 <__multadd>
   89fa0:	d9800d17 	ldw	r6,52(sp)
   89fa4:	d8800715 	stw	r2,28(sp)
   89fa8:	31bfffc4 	addi	r6,r6,-1
   89fac:	d9800d15 	stw	r6,52(sp)
   89fb0:	b001a71e 	bne	r22,zero,8a650 <_dtoa_r+0x1590>
   89fb4:	d8800e17 	ldw	r2,56(sp)
   89fb8:	d8800f15 	stw	r2,60(sp)
   89fbc:	003e8006 	br	899c0 <_dtoa_r+0x900>
   89fc0:	90800417 	ldw	r2,16(r18)
   89fc4:	1085883a 	add	r2,r2,r2
   89fc8:	1085883a 	add	r2,r2,r2
   89fcc:	1485883a 	add	r2,r2,r18
   89fd0:	11000417 	ldw	r4,16(r2)
   89fd4:	008afe80 	call	8afe8 <__hi0bits>
   89fd8:	00c00804 	movi	r3,32
   89fdc:	1887c83a 	sub	r3,r3,r2
   89fe0:	003e5a06 	br	8994c <_dtoa_r+0x88c>
   89fe4:	d9400717 	ldw	r5,28(sp)
   89fe8:	d9801017 	ldw	r6,64(sp)
   89fec:	d9001617 	ldw	r4,88(sp)
   89ff0:	008be0c0 	call	8be0c <__pow5mult>
   89ff4:	d8800715 	stw	r2,28(sp)
   89ff8:	003e4306 	br	89908 <_dtoa_r+0x848>
   89ffc:	d9800f17 	ldw	r6,60(sp)
   8a000:	d8800d17 	ldw	r2,52(sp)
   8a004:	d9800315 	stw	r6,12(sp)
   8a008:	d8800415 	stw	r2,16(sp)
   8a00c:	d8c00b17 	ldw	r3,44(sp)
   8a010:	1805003a 	cmpeq	r2,r3,zero
   8a014:	1000e21e 	bne	r2,zero,8a3a0 <_dtoa_r+0x12e0>
   8a018:	d9000317 	ldw	r4,12(sp)
   8a01c:	0005883a 	mov	r2,zero
   8a020:	00cff834 	movhi	r3,16352
   8a024:	200c90fa 	slli	r6,r4,3
   8a028:	01000274 	movhi	r4,9
   8a02c:	210b3e04 	addi	r4,r4,11512
   8a030:	180b883a 	mov	r5,r3
   8a034:	310d883a 	add	r6,r6,r4
   8a038:	327fff17 	ldw	r9,-4(r6)
   8a03c:	323ffe17 	ldw	r8,-8(r6)
   8a040:	1009883a 	mov	r4,r2
   8a044:	480f883a 	mov	r7,r9
   8a048:	400d883a 	mov	r6,r8
   8a04c:	0083cc40 	call	83cc4 <__divdf3>
   8a050:	180b883a 	mov	r5,r3
   8a054:	b00d883a 	mov	r6,r22
   8a058:	b80f883a 	mov	r7,r23
   8a05c:	1009883a 	mov	r4,r2
   8a060:	008380c0 	call	8380c <__subdf3>
   8a064:	a80b883a 	mov	r5,r21
   8a068:	a009883a 	mov	r4,r20
   8a06c:	d8c01915 	stw	r3,100(sp)
   8a070:	d8801815 	stw	r2,96(sp)
   8a074:	00841ac0 	call	841ac <__fixdfsi>
   8a078:	1009883a 	mov	r4,r2
   8a07c:	1027883a 	mov	r19,r2
   8a080:	00840b40 	call	840b4 <__floatsidf>
   8a084:	a80b883a 	mov	r5,r21
   8a088:	a009883a 	mov	r4,r20
   8a08c:	180f883a 	mov	r7,r3
   8a090:	100d883a 	mov	r6,r2
   8a094:	008380c0 	call	8380c <__subdf3>
   8a098:	d9801817 	ldw	r6,96(sp)
   8a09c:	1823883a 	mov	r17,r3
   8a0a0:	d8801415 	stw	r2,80(sp)
   8a0a4:	302d883a 	mov	r22,r6
   8a0a8:	d9800517 	ldw	r6,20(sp)
   8a0ac:	9cc00c04 	addi	r19,r19,48
   8a0b0:	dc401515 	stw	r17,84(sp)
   8a0b4:	d8c01917 	ldw	r3,100(sp)
   8a0b8:	34c00005 	stb	r19,0(r6)
   8a0bc:	d8800517 	ldw	r2,20(sp)
   8a0c0:	d9401917 	ldw	r5,100(sp)
   8a0c4:	d9801417 	ldw	r6,80(sp)
   8a0c8:	b009883a 	mov	r4,r22
   8a0cc:	880f883a 	mov	r7,r17
   8a0d0:	182f883a 	mov	r23,r3
   8a0d4:	17000044 	addi	fp,r2,1
   8a0d8:	0083fa40 	call	83fa4 <__gtdf2>
   8a0dc:	00804e16 	blt	zero,r2,8a218 <_dtoa_r+0x1158>
   8a0e0:	d9801417 	ldw	r6,80(sp)
   8a0e4:	0005883a 	mov	r2,zero
   8a0e8:	00cffc34 	movhi	r3,16368
   8a0ec:	180b883a 	mov	r5,r3
   8a0f0:	880f883a 	mov	r7,r17
   8a0f4:	1009883a 	mov	r4,r2
   8a0f8:	008380c0 	call	8380c <__subdf3>
   8a0fc:	d9401917 	ldw	r5,100(sp)
   8a100:	180f883a 	mov	r7,r3
   8a104:	b009883a 	mov	r4,r22
   8a108:	100d883a 	mov	r6,r2
   8a10c:	0083fa40 	call	83fa4 <__gtdf2>
   8a110:	00bda216 	blt	zero,r2,8979c <_dtoa_r+0x6dc>
   8a114:	d8c00317 	ldw	r3,12(sp)
   8a118:	00800044 	movi	r2,1
   8a11c:	10c01216 	blt	r2,r3,8a168 <_dtoa_r+0x10a8>
   8a120:	003d4506 	br	89638 <_dtoa_r+0x578>
   8a124:	d9801417 	ldw	r6,80(sp)
   8a128:	0005883a 	mov	r2,zero
   8a12c:	00cffc34 	movhi	r3,16368
   8a130:	180b883a 	mov	r5,r3
   8a134:	880f883a 	mov	r7,r17
   8a138:	1009883a 	mov	r4,r2
   8a13c:	008380c0 	call	8380c <__subdf3>
   8a140:	d9c01b17 	ldw	r7,108(sp)
   8a144:	180b883a 	mov	r5,r3
   8a148:	1009883a 	mov	r4,r2
   8a14c:	b00d883a 	mov	r6,r22
   8a150:	008d6000 	call	8d600 <__ltdf2>
   8a154:	103d9116 	blt	r2,zero,8979c <_dtoa_r+0x6dc>
   8a158:	d9800517 	ldw	r6,20(sp)
   8a15c:	d9000317 	ldw	r4,12(sp)
   8a160:	3105883a 	add	r2,r6,r4
   8a164:	e0bd3426 	beq	fp,r2,89638 <_dtoa_r+0x578>
   8a168:	04500934 	movhi	r17,16420
   8a16c:	0021883a 	mov	r16,zero
   8a170:	b80b883a 	mov	r5,r23
   8a174:	b009883a 	mov	r4,r22
   8a178:	800d883a 	mov	r6,r16
   8a17c:	880f883a 	mov	r7,r17
   8a180:	00839000 	call	83900 <__muldf3>
   8a184:	d9401517 	ldw	r5,84(sp)
   8a188:	d9001417 	ldw	r4,80(sp)
   8a18c:	880f883a 	mov	r7,r17
   8a190:	000d883a 	mov	r6,zero
   8a194:	d8801a15 	stw	r2,104(sp)
   8a198:	d8c01b15 	stw	r3,108(sp)
   8a19c:	00839000 	call	83900 <__muldf3>
   8a1a0:	180b883a 	mov	r5,r3
   8a1a4:	1009883a 	mov	r4,r2
   8a1a8:	1823883a 	mov	r17,r3
   8a1ac:	1021883a 	mov	r16,r2
   8a1b0:	00841ac0 	call	841ac <__fixdfsi>
   8a1b4:	1009883a 	mov	r4,r2
   8a1b8:	102b883a 	mov	r21,r2
   8a1bc:	00840b40 	call	840b4 <__floatsidf>
   8a1c0:	880b883a 	mov	r5,r17
   8a1c4:	8009883a 	mov	r4,r16
   8a1c8:	180f883a 	mov	r7,r3
   8a1cc:	100d883a 	mov	r6,r2
   8a1d0:	008380c0 	call	8380c <__subdf3>
   8a1d4:	1021883a 	mov	r16,r2
   8a1d8:	d9001b17 	ldw	r4,108(sp)
   8a1dc:	1823883a 	mov	r17,r3
   8a1e0:	dc001415 	stw	r16,80(sp)
   8a1e4:	ad400c04 	addi	r21,r21,48
   8a1e8:	dc401515 	stw	r17,84(sp)
   8a1ec:	d8801a17 	ldw	r2,104(sp)
   8a1f0:	e5400005 	stb	r21,0(fp)
   8a1f4:	202f883a 	mov	r23,r4
   8a1f8:	d9c01b17 	ldw	r7,108(sp)
   8a1fc:	d9001417 	ldw	r4,80(sp)
   8a200:	880b883a 	mov	r5,r17
   8a204:	100d883a 	mov	r6,r2
   8a208:	102d883a 	mov	r22,r2
   8a20c:	e7000044 	addi	fp,fp,1
   8a210:	008d6000 	call	8d600 <__ltdf2>
   8a214:	103fc30e 	bge	r2,zero,8a124 <_dtoa_r+0x1064>
   8a218:	d9000417 	ldw	r4,16(sp)
   8a21c:	d9000d15 	stw	r4,52(sp)
   8a220:	003d7106 	br	897e8 <_dtoa_r+0x728>
   8a224:	d9801717 	ldw	r6,92(sp)
   8a228:	00800084 	movi	r2,2
   8a22c:	11bde60e 	bge	r2,r6,899c8 <_dtoa_r+0x908>
   8a230:	203cfb1e 	bne	r4,zero,89620 <_dtoa_r+0x560>
   8a234:	d9001617 	ldw	r4,88(sp)
   8a238:	900b883a 	mov	r5,r18
   8a23c:	01800144 	movi	r6,5
   8a240:	000f883a 	mov	r7,zero
   8a244:	008bce00 	call	8bce0 <__multadd>
   8a248:	d9000717 	ldw	r4,28(sp)
   8a24c:	100b883a 	mov	r5,r2
   8a250:	1025883a 	mov	r18,r2
   8a254:	008b11c0 	call	8b11c <__mcmp>
   8a258:	00bcf10e 	bge	zero,r2,89620 <_dtoa_r+0x560>
   8a25c:	d8c00d17 	ldw	r3,52(sp)
   8a260:	d9000517 	ldw	r4,20(sp)
   8a264:	d8000615 	stw	zero,24(sp)
   8a268:	18c00044 	addi	r3,r3,1
   8a26c:	d8c00d15 	stw	r3,52(sp)
   8a270:	00800c44 	movi	r2,49
   8a274:	27000044 	addi	fp,r4,1
   8a278:	20800005 	stb	r2,0(r4)
   8a27c:	003e8906 	br	89ca4 <_dtoa_r+0xbe4>
   8a280:	d8c00517 	ldw	r3,20(sp)
   8a284:	003bc206 	br	89190 <_dtoa_r+0xd0>
   8a288:	01800274 	movhi	r6,9
   8a28c:	318b7004 	addi	r6,r6,11712
   8a290:	30c00917 	ldw	r3,36(r6)
   8a294:	30800817 	ldw	r2,32(r6)
   8a298:	d9001217 	ldw	r4,72(sp)
   8a29c:	d9401317 	ldw	r5,76(sp)
   8a2a0:	180f883a 	mov	r7,r3
   8a2a4:	100d883a 	mov	r6,r2
   8a2a8:	0083cc40 	call	83cc4 <__divdf3>
   8a2ac:	948003cc 	andi	r18,r18,15
   8a2b0:	058000c4 	movi	r22,3
   8a2b4:	1029883a 	mov	r20,r2
   8a2b8:	182b883a 	mov	r21,r3
   8a2bc:	003c8906 	br	894e4 <_dtoa_r+0x424>
   8a2c0:	d9001017 	ldw	r4,64(sp)
   8a2c4:	d9800917 	ldw	r6,36(sp)
   8a2c8:	0025883a 	mov	r18,zero
   8a2cc:	1105c83a 	sub	r2,r2,r4
   8a2d0:	2089883a 	add	r4,r4,r2
   8a2d4:	308d883a 	add	r6,r6,r2
   8a2d8:	d9001015 	stw	r4,64(sp)
   8a2dc:	d9800915 	stw	r6,36(sp)
   8a2e0:	003e3206 	br	89bac <_dtoa_r+0xaec>
   8a2e4:	28800044 	addi	r2,r5,1
   8a2e8:	27000044 	addi	fp,r4,1
   8a2ec:	20800005 	stb	r2,0(r4)
   8a2f0:	003e6c06 	br	89ca4 <_dtoa_r+0xbe4>
   8a2f4:	d8800f17 	ldw	r2,60(sp)
   8a2f8:	00bce016 	blt	zero,r2,8967c <_dtoa_r+0x5bc>
   8a2fc:	d9800f17 	ldw	r6,60(sp)
   8a300:	303cc51e 	bne	r6,zero,89618 <_dtoa_r+0x558>
   8a304:	0005883a 	mov	r2,zero
   8a308:	00d00534 	movhi	r3,16404
   8a30c:	980b883a 	mov	r5,r19
   8a310:	180f883a 	mov	r7,r3
   8a314:	9009883a 	mov	r4,r18
   8a318:	100d883a 	mov	r6,r2
   8a31c:	00839000 	call	83900 <__muldf3>
   8a320:	180b883a 	mov	r5,r3
   8a324:	a80f883a 	mov	r7,r21
   8a328:	1009883a 	mov	r4,r2
   8a32c:	a00d883a 	mov	r6,r20
   8a330:	008402c0 	call	8402c <__gedf2>
   8a334:	103cb80e 	bge	r2,zero,89618 <_dtoa_r+0x558>
   8a338:	0027883a 	mov	r19,zero
   8a33c:	0025883a 	mov	r18,zero
   8a340:	003fc606 	br	8a25c <_dtoa_r+0x119c>
   8a344:	99400117 	ldw	r5,4(r19)
   8a348:	d9001617 	ldw	r4,88(sp)
   8a34c:	008b5400 	call	8b540 <_Balloc>
   8a350:	99800417 	ldw	r6,16(r19)
   8a354:	11000304 	addi	r4,r2,12
   8a358:	99400304 	addi	r5,r19,12
   8a35c:	318d883a 	add	r6,r6,r6
   8a360:	318d883a 	add	r6,r6,r6
   8a364:	31800204 	addi	r6,r6,8
   8a368:	1023883a 	mov	r17,r2
   8a36c:	008ae400 	call	8ae40 <memcpy>
   8a370:	d9001617 	ldw	r4,88(sp)
   8a374:	880b883a 	mov	r5,r17
   8a378:	01800044 	movi	r6,1
   8a37c:	008b9040 	call	8b904 <__lshift>
   8a380:	100b883a 	mov	r5,r2
   8a384:	003d9c06 	br	899f8 <_dtoa_r+0x938>
   8a388:	00800e44 	movi	r2,57
   8a38c:	b8807026 	beq	r23,r2,8a550 <_dtoa_r+0x1490>
   8a390:	b8800044 	addi	r2,r23,1
   8a394:	b7000044 	addi	fp,r22,1
   8a398:	b0800005 	stb	r2,0(r22)
   8a39c:	003e4106 	br	89ca4 <_dtoa_r+0xbe4>
   8a3a0:	d8800317 	ldw	r2,12(sp)
   8a3a4:	01800274 	movhi	r6,9
   8a3a8:	318b3e04 	addi	r6,r6,11512
   8a3ac:	b009883a 	mov	r4,r22
   8a3b0:	100e90fa 	slli	r7,r2,3
   8a3b4:	b80b883a 	mov	r5,r23
   8a3b8:	398f883a 	add	r7,r7,r6
   8a3bc:	38bffe17 	ldw	r2,-8(r7)
   8a3c0:	d9800517 	ldw	r6,20(sp)
   8a3c4:	38ffff17 	ldw	r3,-4(r7)
   8a3c8:	37000044 	addi	fp,r6,1
   8a3cc:	180f883a 	mov	r7,r3
   8a3d0:	100d883a 	mov	r6,r2
   8a3d4:	00839000 	call	83900 <__muldf3>
   8a3d8:	a80b883a 	mov	r5,r21
   8a3dc:	a009883a 	mov	r4,r20
   8a3e0:	182f883a 	mov	r23,r3
   8a3e4:	102d883a 	mov	r22,r2
   8a3e8:	00841ac0 	call	841ac <__fixdfsi>
   8a3ec:	1009883a 	mov	r4,r2
   8a3f0:	1027883a 	mov	r19,r2
   8a3f4:	00840b40 	call	840b4 <__floatsidf>
   8a3f8:	a80b883a 	mov	r5,r21
   8a3fc:	a009883a 	mov	r4,r20
   8a400:	180f883a 	mov	r7,r3
   8a404:	100d883a 	mov	r6,r2
   8a408:	008380c0 	call	8380c <__subdf3>
   8a40c:	180b883a 	mov	r5,r3
   8a410:	d8c00517 	ldw	r3,20(sp)
   8a414:	9cc00c04 	addi	r19,r19,48
   8a418:	1009883a 	mov	r4,r2
   8a41c:	1cc00005 	stb	r19,0(r3)
   8a420:	2021883a 	mov	r16,r4
   8a424:	d9000317 	ldw	r4,12(sp)
   8a428:	00800044 	movi	r2,1
   8a42c:	2823883a 	mov	r17,r5
   8a430:	20802226 	beq	r4,r2,8a4bc <_dtoa_r+0x13fc>
   8a434:	1029883a 	mov	r20,r2
   8a438:	0005883a 	mov	r2,zero
   8a43c:	00d00934 	movhi	r3,16420
   8a440:	180f883a 	mov	r7,r3
   8a444:	100d883a 	mov	r6,r2
   8a448:	880b883a 	mov	r5,r17
   8a44c:	8009883a 	mov	r4,r16
   8a450:	00839000 	call	83900 <__muldf3>
   8a454:	180b883a 	mov	r5,r3
   8a458:	1009883a 	mov	r4,r2
   8a45c:	1823883a 	mov	r17,r3
   8a460:	1021883a 	mov	r16,r2
   8a464:	00841ac0 	call	841ac <__fixdfsi>
   8a468:	1009883a 	mov	r4,r2
   8a46c:	102b883a 	mov	r21,r2
   8a470:	00840b40 	call	840b4 <__floatsidf>
   8a474:	880b883a 	mov	r5,r17
   8a478:	8009883a 	mov	r4,r16
   8a47c:	180f883a 	mov	r7,r3
   8a480:	100d883a 	mov	r6,r2
   8a484:	008380c0 	call	8380c <__subdf3>
   8a488:	180b883a 	mov	r5,r3
   8a48c:	d8c00517 	ldw	r3,20(sp)
   8a490:	1009883a 	mov	r4,r2
   8a494:	ad400c04 	addi	r21,r21,48
   8a498:	1d05883a 	add	r2,r3,r20
   8a49c:	15400005 	stb	r21,0(r2)
   8a4a0:	2021883a 	mov	r16,r4
   8a4a4:	d9000317 	ldw	r4,12(sp)
   8a4a8:	a5000044 	addi	r20,r20,1
   8a4ac:	2823883a 	mov	r17,r5
   8a4b0:	a13fe11e 	bne	r20,r4,8a438 <_dtoa_r+0x1378>
   8a4b4:	e505883a 	add	r2,fp,r20
   8a4b8:	173fffc4 	addi	fp,r2,-1
   8a4bc:	0025883a 	mov	r18,zero
   8a4c0:	04cff834 	movhi	r19,16352
   8a4c4:	b009883a 	mov	r4,r22
   8a4c8:	b80b883a 	mov	r5,r23
   8a4cc:	900d883a 	mov	r6,r18
   8a4d0:	980f883a 	mov	r7,r19
   8a4d4:	008388c0 	call	8388c <__adddf3>
   8a4d8:	180b883a 	mov	r5,r3
   8a4dc:	1009883a 	mov	r4,r2
   8a4e0:	800d883a 	mov	r6,r16
   8a4e4:	880f883a 	mov	r7,r17
   8a4e8:	008d6000 	call	8d600 <__ltdf2>
   8a4ec:	103cab16 	blt	r2,zero,8979c <_dtoa_r+0x6dc>
   8a4f0:	0009883a 	mov	r4,zero
   8a4f4:	980b883a 	mov	r5,r19
   8a4f8:	b80f883a 	mov	r7,r23
   8a4fc:	b00d883a 	mov	r6,r22
   8a500:	008380c0 	call	8380c <__subdf3>
   8a504:	180b883a 	mov	r5,r3
   8a508:	880f883a 	mov	r7,r17
   8a50c:	1009883a 	mov	r4,r2
   8a510:	800d883a 	mov	r6,r16
   8a514:	0083fa40 	call	83fa4 <__gtdf2>
   8a518:	00bc470e 	bge	zero,r2,89638 <_dtoa_r+0x578>
   8a51c:	00c00c04 	movi	r3,48
   8a520:	e73fffc4 	addi	fp,fp,-1
   8a524:	e0800007 	ldb	r2,0(fp)
   8a528:	10fffd26 	beq	r2,r3,8a520 <_dtoa_r+0x1460>
   8a52c:	d9800417 	ldw	r6,16(sp)
   8a530:	e7000044 	addi	fp,fp,1
   8a534:	d9800d15 	stw	r6,52(sp)
   8a538:	003cab06 	br	897e8 <_dtoa_r+0x728>
   8a53c:	d8c00f17 	ldw	r3,60(sp)
   8a540:	d9001117 	ldw	r4,68(sp)
   8a544:	20e1c83a 	sub	r16,r4,r3
   8a548:	0007883a 	mov	r3,zero
   8a54c:	003d9b06 	br	89bbc <_dtoa_r+0xafc>
   8a550:	00800e44 	movi	r2,57
   8a554:	b0800005 	stb	r2,0(r22)
   8a558:	b5800044 	addi	r22,r22,1
   8a55c:	003dc106 	br	89c64 <_dtoa_r+0xba4>
   8a560:	05800084 	movi	r22,2
   8a564:	003bf706 	br	89544 <_dtoa_r+0x484>
   8a568:	d9000f17 	ldw	r4,60(sp)
   8a56c:	013c000e 	bge	zero,r4,89570 <_dtoa_r+0x4b0>
   8a570:	d9800e17 	ldw	r6,56(sp)
   8a574:	01bc300e 	bge	zero,r6,89638 <_dtoa_r+0x578>
   8a578:	0005883a 	mov	r2,zero
   8a57c:	00d00934 	movhi	r3,16420
   8a580:	a80b883a 	mov	r5,r21
   8a584:	180f883a 	mov	r7,r3
   8a588:	a009883a 	mov	r4,r20
   8a58c:	100d883a 	mov	r6,r2
   8a590:	00839000 	call	83900 <__muldf3>
   8a594:	b1000044 	addi	r4,r22,1
   8a598:	1021883a 	mov	r16,r2
   8a59c:	1823883a 	mov	r17,r3
   8a5a0:	00840b40 	call	840b4 <__floatsidf>
   8a5a4:	880b883a 	mov	r5,r17
   8a5a8:	8009883a 	mov	r4,r16
   8a5ac:	180f883a 	mov	r7,r3
   8a5b0:	100d883a 	mov	r6,r2
   8a5b4:	00839000 	call	83900 <__muldf3>
   8a5b8:	0011883a 	mov	r8,zero
   8a5bc:	02500734 	movhi	r9,16412
   8a5c0:	180b883a 	mov	r5,r3
   8a5c4:	480f883a 	mov	r7,r9
   8a5c8:	1009883a 	mov	r4,r2
   8a5cc:	400d883a 	mov	r6,r8
   8a5d0:	008388c0 	call	8388c <__adddf3>
   8a5d4:	102d883a 	mov	r22,r2
   8a5d8:	00bf3034 	movhi	r2,64704
   8a5dc:	10ef883a 	add	r23,r2,r3
   8a5e0:	d8800d17 	ldw	r2,52(sp)
   8a5e4:	d8c00e17 	ldw	r3,56(sp)
   8a5e8:	8029883a 	mov	r20,r16
   8a5ec:	10bfffc4 	addi	r2,r2,-1
   8a5f0:	882b883a 	mov	r21,r17
   8a5f4:	d8800415 	stw	r2,16(sp)
   8a5f8:	d8c00315 	stw	r3,12(sp)
   8a5fc:	003e8306 	br	8a00c <_dtoa_r+0xf4c>
   8a600:	d8800117 	ldw	r2,4(sp)
   8a604:	dc001117 	ldw	r16,68(sp)
   8a608:	dc801017 	ldw	r18,64(sp)
   8a60c:	00c00d84 	movi	r3,54
   8a610:	1887c83a 	sub	r3,r3,r2
   8a614:	003d6906 	br	89bbc <_dtoa_r+0xafc>
   8a618:	01800044 	movi	r6,1
   8a61c:	3021883a 	mov	r16,r6
   8a620:	d9800f15 	stw	r6,60(sp)
   8a624:	d9802615 	stw	r6,152(sp)
   8a628:	d9800e15 	stw	r6,56(sp)
   8a62c:	003b9306 	br	8947c <_dtoa_r+0x3bc>
   8a630:	b021883a 	mov	r16,r22
   8a634:	dd800f15 	stw	r22,60(sp)
   8a638:	003b9006 	br	8947c <_dtoa_r+0x3bc>
   8a63c:	103e221e 	bne	r2,zero,89ec8 <_dtoa_r+0xe08>
   8a640:	b880004c 	andi	r2,r23,1
   8a644:	1005003a 	cmpeq	r2,r2,zero
   8a648:	103e1f1e 	bne	r2,zero,89ec8 <_dtoa_r+0xe08>
   8a64c:	003e1b06 	br	89ebc <_dtoa_r+0xdfc>
   8a650:	d9001617 	ldw	r4,88(sp)
   8a654:	980b883a 	mov	r5,r19
   8a658:	01800284 	movi	r6,10
   8a65c:	000f883a 	mov	r7,zero
   8a660:	008bce00 	call	8bce0 <__multadd>
   8a664:	d8c00e17 	ldw	r3,56(sp)
   8a668:	1027883a 	mov	r19,r2
   8a66c:	d8c00f15 	stw	r3,60(sp)
   8a670:	003cd306 	br	899c0 <_dtoa_r+0x900>

0008a674 <__sflags>:
   8a674:	28c00007 	ldb	r3,0(r5)
   8a678:	00801c84 	movi	r2,114
   8a67c:	18800926 	beq	r3,r2,8a6a4 <__sflags+0x30>
   8a680:	00801dc4 	movi	r2,119
   8a684:	18801426 	beq	r3,r2,8a6d8 <__sflags+0x64>
   8a688:	00801844 	movi	r2,97
   8a68c:	18801626 	beq	r3,r2,8a6e8 <__sflags+0x74>
   8a690:	0007883a 	mov	r3,zero
   8a694:	00800584 	movi	r2,22
   8a698:	20800015 	stw	r2,0(r4)
   8a69c:	1805883a 	mov	r2,r3
   8a6a0:	f800283a 	ret
   8a6a4:	000f883a 	mov	r7,zero
   8a6a8:	0011883a 	mov	r8,zero
   8a6ac:	00c00104 	movi	r3,4
   8a6b0:	28800047 	ldb	r2,1(r5)
   8a6b4:	10000426 	beq	r2,zero,8a6c8 <__sflags+0x54>
   8a6b8:	01000ac4 	movi	r4,43
   8a6bc:	11000e26 	beq	r2,r4,8a6f8 <__sflags+0x84>
   8a6c0:	28800087 	ldb	r2,2(r5)
   8a6c4:	11000c26 	beq	r2,r4,8a6f8 <__sflags+0x84>
   8a6c8:	3a04b03a 	or	r2,r7,r8
   8a6cc:	30800015 	stw	r2,0(r6)
   8a6d0:	1805883a 	mov	r2,r3
   8a6d4:	f800283a 	ret
   8a6d8:	01c00044 	movi	r7,1
   8a6dc:	02018004 	movi	r8,1536
   8a6e0:	00c00204 	movi	r3,8
   8a6e4:	003ff206 	br	8a6b0 <__sflags+0x3c>
   8a6e8:	01c00044 	movi	r7,1
   8a6ec:	02008204 	movi	r8,520
   8a6f0:	00c04204 	movi	r3,264
   8a6f4:	003fee06 	br	8a6b0 <__sflags+0x3c>
   8a6f8:	00bffcc4 	movi	r2,-13
   8a6fc:	1884703a 	and	r2,r3,r2
   8a700:	01c00084 	movi	r7,2
   8a704:	10c00414 	ori	r3,r2,16
   8a708:	3a04b03a 	or	r2,r7,r8
   8a70c:	30800015 	stw	r2,0(r6)
   8a710:	003fef06 	br	8a6d0 <__sflags+0x5c>

0008a714 <__sfvwrite_r>:
   8a714:	30800217 	ldw	r2,8(r6)
   8a718:	defff504 	addi	sp,sp,-44
   8a71c:	df000915 	stw	fp,36(sp)
   8a720:	dd800715 	stw	r22,28(sp)
   8a724:	dc800315 	stw	r18,12(sp)
   8a728:	dfc00a15 	stw	ra,40(sp)
   8a72c:	ddc00815 	stw	r23,32(sp)
   8a730:	dd400615 	stw	r21,24(sp)
   8a734:	dd000515 	stw	r20,20(sp)
   8a738:	dcc00415 	stw	r19,16(sp)
   8a73c:	dc400215 	stw	r17,8(sp)
   8a740:	dc000115 	stw	r16,4(sp)
   8a744:	302d883a 	mov	r22,r6
   8a748:	2039883a 	mov	fp,r4
   8a74c:	2825883a 	mov	r18,r5
   8a750:	10001c26 	beq	r2,zero,8a7c4 <__sfvwrite_r+0xb0>
   8a754:	29c0030b 	ldhu	r7,12(r5)
   8a758:	3880020c 	andi	r2,r7,8
   8a75c:	10002726 	beq	r2,zero,8a7fc <__sfvwrite_r+0xe8>
   8a760:	28800417 	ldw	r2,16(r5)
   8a764:	10002526 	beq	r2,zero,8a7fc <__sfvwrite_r+0xe8>
   8a768:	3880008c 	andi	r2,r7,2
   8a76c:	b5400017 	ldw	r21,0(r22)
   8a770:	10002826 	beq	r2,zero,8a814 <__sfvwrite_r+0x100>
   8a774:	0021883a 	mov	r16,zero
   8a778:	0023883a 	mov	r17,zero
   8a77c:	880d883a 	mov	r6,r17
   8a780:	e009883a 	mov	r4,fp
   8a784:	00810004 	movi	r2,1024
   8a788:	80006e26 	beq	r16,zero,8a944 <__sfvwrite_r+0x230>
   8a78c:	800f883a 	mov	r7,r16
   8a790:	91400717 	ldw	r5,28(r18)
   8a794:	1400012e 	bgeu	r2,r16,8a79c <__sfvwrite_r+0x88>
   8a798:	100f883a 	mov	r7,r2
   8a79c:	90c00917 	ldw	r3,36(r18)
   8a7a0:	183ee83a 	callr	r3
   8a7a4:	1007883a 	mov	r3,r2
   8a7a8:	80a1c83a 	sub	r16,r16,r2
   8a7ac:	88a3883a 	add	r17,r17,r2
   8a7b0:	00806d0e 	bge	zero,r2,8a968 <__sfvwrite_r+0x254>
   8a7b4:	b0800217 	ldw	r2,8(r22)
   8a7b8:	10c5c83a 	sub	r2,r2,r3
   8a7bc:	b0800215 	stw	r2,8(r22)
   8a7c0:	103fee1e 	bne	r2,zero,8a77c <__sfvwrite_r+0x68>
   8a7c4:	0009883a 	mov	r4,zero
   8a7c8:	2005883a 	mov	r2,r4
   8a7cc:	dfc00a17 	ldw	ra,40(sp)
   8a7d0:	df000917 	ldw	fp,36(sp)
   8a7d4:	ddc00817 	ldw	r23,32(sp)
   8a7d8:	dd800717 	ldw	r22,28(sp)
   8a7dc:	dd400617 	ldw	r21,24(sp)
   8a7e0:	dd000517 	ldw	r20,20(sp)
   8a7e4:	dcc00417 	ldw	r19,16(sp)
   8a7e8:	dc800317 	ldw	r18,12(sp)
   8a7ec:	dc400217 	ldw	r17,8(sp)
   8a7f0:	dc000117 	ldw	r16,4(sp)
   8a7f4:	dec00b04 	addi	sp,sp,44
   8a7f8:	f800283a 	ret
   8a7fc:	0088cd00 	call	88cd0 <__swsetup_r>
   8a800:	1000e41e 	bne	r2,zero,8ab94 <__sfvwrite_r+0x480>
   8a804:	91c0030b 	ldhu	r7,12(r18)
   8a808:	b5400017 	ldw	r21,0(r22)
   8a80c:	3880008c 	andi	r2,r7,2
   8a810:	103fd81e 	bne	r2,zero,8a774 <__sfvwrite_r+0x60>
   8a814:	3880004c 	andi	r2,r7,1
   8a818:	1005003a 	cmpeq	r2,r2,zero
   8a81c:	10005726 	beq	r2,zero,8a97c <__sfvwrite_r+0x268>
   8a820:	0029883a 	mov	r20,zero
   8a824:	002f883a 	mov	r23,zero
   8a828:	a0004226 	beq	r20,zero,8a934 <__sfvwrite_r+0x220>
   8a82c:	3880800c 	andi	r2,r7,512
   8a830:	94000217 	ldw	r16,8(r18)
   8a834:	10008b26 	beq	r2,zero,8aa64 <__sfvwrite_r+0x350>
   8a838:	800d883a 	mov	r6,r16
   8a83c:	a400a536 	bltu	r20,r16,8aad4 <__sfvwrite_r+0x3c0>
   8a840:	3881200c 	andi	r2,r7,1152
   8a844:	10002726 	beq	r2,zero,8a8e4 <__sfvwrite_r+0x1d0>
   8a848:	90800517 	ldw	r2,20(r18)
   8a84c:	92000417 	ldw	r8,16(r18)
   8a850:	91400017 	ldw	r5,0(r18)
   8a854:	1087883a 	add	r3,r2,r2
   8a858:	1887883a 	add	r3,r3,r2
   8a85c:	1808d7fa 	srli	r4,r3,31
   8a860:	2a21c83a 	sub	r16,r5,r8
   8a864:	80800044 	addi	r2,r16,1
   8a868:	20c9883a 	add	r4,r4,r3
   8a86c:	2027d07a 	srai	r19,r4,1
   8a870:	a085883a 	add	r2,r20,r2
   8a874:	980d883a 	mov	r6,r19
   8a878:	9880022e 	bgeu	r19,r2,8a884 <__sfvwrite_r+0x170>
   8a87c:	1027883a 	mov	r19,r2
   8a880:	100d883a 	mov	r6,r2
   8a884:	3881000c 	andi	r2,r7,1024
   8a888:	1000b826 	beq	r2,zero,8ab6c <__sfvwrite_r+0x458>
   8a88c:	300b883a 	mov	r5,r6
   8a890:	e009883a 	mov	r4,fp
   8a894:	0085f8c0 	call	85f8c <_malloc_r>
   8a898:	10003126 	beq	r2,zero,8a960 <__sfvwrite_r+0x24c>
   8a89c:	91400417 	ldw	r5,16(r18)
   8a8a0:	1009883a 	mov	r4,r2
   8a8a4:	800d883a 	mov	r6,r16
   8a8a8:	1023883a 	mov	r17,r2
   8a8ac:	008ae400 	call	8ae40 <memcpy>
   8a8b0:	90c0030b 	ldhu	r3,12(r18)
   8a8b4:	00beffc4 	movi	r2,-1025
   8a8b8:	1886703a 	and	r3,r3,r2
   8a8bc:	18c02014 	ori	r3,r3,128
   8a8c0:	90c0030d 	sth	r3,12(r18)
   8a8c4:	9c07c83a 	sub	r3,r19,r16
   8a8c8:	8c05883a 	add	r2,r17,r16
   8a8cc:	a00d883a 	mov	r6,r20
   8a8d0:	a021883a 	mov	r16,r20
   8a8d4:	90800015 	stw	r2,0(r18)
   8a8d8:	90c00215 	stw	r3,8(r18)
   8a8dc:	94400415 	stw	r17,16(r18)
   8a8e0:	94c00515 	stw	r19,20(r18)
   8a8e4:	91000017 	ldw	r4,0(r18)
   8a8e8:	b80b883a 	mov	r5,r23
   8a8ec:	a023883a 	mov	r17,r20
   8a8f0:	008aee00 	call	8aee0 <memmove>
   8a8f4:	90c00217 	ldw	r3,8(r18)
   8a8f8:	90800017 	ldw	r2,0(r18)
   8a8fc:	a027883a 	mov	r19,r20
   8a900:	1c07c83a 	sub	r3,r3,r16
   8a904:	1405883a 	add	r2,r2,r16
   8a908:	90c00215 	stw	r3,8(r18)
   8a90c:	a021883a 	mov	r16,r20
   8a910:	90800015 	stw	r2,0(r18)
   8a914:	b0800217 	ldw	r2,8(r22)
   8a918:	1405c83a 	sub	r2,r2,r16
   8a91c:	b0800215 	stw	r2,8(r22)
   8a920:	103fa826 	beq	r2,zero,8a7c4 <__sfvwrite_r+0xb0>
   8a924:	a469c83a 	sub	r20,r20,r17
   8a928:	91c0030b 	ldhu	r7,12(r18)
   8a92c:	bcef883a 	add	r23,r23,r19
   8a930:	a03fbe1e 	bne	r20,zero,8a82c <__sfvwrite_r+0x118>
   8a934:	adc00017 	ldw	r23,0(r21)
   8a938:	ad000117 	ldw	r20,4(r21)
   8a93c:	ad400204 	addi	r21,r21,8
   8a940:	003fb906 	br	8a828 <__sfvwrite_r+0x114>
   8a944:	ac400017 	ldw	r17,0(r21)
   8a948:	ac000117 	ldw	r16,4(r21)
   8a94c:	ad400204 	addi	r21,r21,8
   8a950:	003f8a06 	br	8a77c <__sfvwrite_r+0x68>
   8a954:	91400417 	ldw	r5,16(r18)
   8a958:	e009883a 	mov	r4,fp
   8a95c:	00853a40 	call	853a4 <_free_r>
   8a960:	00800304 	movi	r2,12
   8a964:	e0800015 	stw	r2,0(fp)
   8a968:	9080030b 	ldhu	r2,12(r18)
   8a96c:	013fffc4 	movi	r4,-1
   8a970:	10801014 	ori	r2,r2,64
   8a974:	9080030d 	sth	r2,12(r18)
   8a978:	003f9306 	br	8a7c8 <__sfvwrite_r+0xb4>
   8a97c:	0027883a 	mov	r19,zero
   8a980:	002f883a 	mov	r23,zero
   8a984:	d8000015 	stw	zero,0(sp)
   8a988:	0029883a 	mov	r20,zero
   8a98c:	98001e26 	beq	r19,zero,8aa08 <__sfvwrite_r+0x2f4>
   8a990:	d8c00017 	ldw	r3,0(sp)
   8a994:	1804c03a 	cmpne	r2,r3,zero
   8a998:	10005e26 	beq	r2,zero,8ab14 <__sfvwrite_r+0x400>
   8a99c:	9821883a 	mov	r16,r19
   8a9a0:	a4c0012e 	bgeu	r20,r19,8a9a8 <__sfvwrite_r+0x294>
   8a9a4:	a021883a 	mov	r16,r20
   8a9a8:	91000017 	ldw	r4,0(r18)
   8a9ac:	90800417 	ldw	r2,16(r18)
   8a9b0:	91800217 	ldw	r6,8(r18)
   8a9b4:	91c00517 	ldw	r7,20(r18)
   8a9b8:	1100022e 	bgeu	r2,r4,8a9c4 <__sfvwrite_r+0x2b0>
   8a9bc:	31e3883a 	add	r17,r6,r7
   8a9c0:	8c001616 	blt	r17,r16,8aa1c <__sfvwrite_r+0x308>
   8a9c4:	81c03816 	blt	r16,r7,8aaa8 <__sfvwrite_r+0x394>
   8a9c8:	90c00917 	ldw	r3,36(r18)
   8a9cc:	91400717 	ldw	r5,28(r18)
   8a9d0:	e009883a 	mov	r4,fp
   8a9d4:	b80d883a 	mov	r6,r23
   8a9d8:	183ee83a 	callr	r3
   8a9dc:	1023883a 	mov	r17,r2
   8a9e0:	00bfe10e 	bge	zero,r2,8a968 <__sfvwrite_r+0x254>
   8a9e4:	a469c83a 	sub	r20,r20,r17
   8a9e8:	a0001826 	beq	r20,zero,8aa4c <__sfvwrite_r+0x338>
   8a9ec:	b0800217 	ldw	r2,8(r22)
   8a9f0:	1445c83a 	sub	r2,r2,r17
   8a9f4:	b0800215 	stw	r2,8(r22)
   8a9f8:	103f7226 	beq	r2,zero,8a7c4 <__sfvwrite_r+0xb0>
   8a9fc:	9c67c83a 	sub	r19,r19,r17
   8aa00:	bc6f883a 	add	r23,r23,r17
   8aa04:	983fe21e 	bne	r19,zero,8a990 <__sfvwrite_r+0x27c>
   8aa08:	adc00017 	ldw	r23,0(r21)
   8aa0c:	acc00117 	ldw	r19,4(r21)
   8aa10:	ad400204 	addi	r21,r21,8
   8aa14:	d8000015 	stw	zero,0(sp)
   8aa18:	003fdc06 	br	8a98c <__sfvwrite_r+0x278>
   8aa1c:	b80b883a 	mov	r5,r23
   8aa20:	880d883a 	mov	r6,r17
   8aa24:	008aee00 	call	8aee0 <memmove>
   8aa28:	90c00017 	ldw	r3,0(r18)
   8aa2c:	e009883a 	mov	r4,fp
   8aa30:	900b883a 	mov	r5,r18
   8aa34:	1c47883a 	add	r3,r3,r17
   8aa38:	90c00015 	stw	r3,0(r18)
   8aa3c:	0084be40 	call	84be4 <_fflush_r>
   8aa40:	103fc91e 	bne	r2,zero,8a968 <__sfvwrite_r+0x254>
   8aa44:	a469c83a 	sub	r20,r20,r17
   8aa48:	a03fe81e 	bne	r20,zero,8a9ec <__sfvwrite_r+0x2d8>
   8aa4c:	e009883a 	mov	r4,fp
   8aa50:	900b883a 	mov	r5,r18
   8aa54:	0084be40 	call	84be4 <_fflush_r>
   8aa58:	103fc31e 	bne	r2,zero,8a968 <__sfvwrite_r+0x254>
   8aa5c:	d8000015 	stw	zero,0(sp)
   8aa60:	003fe206 	br	8a9ec <__sfvwrite_r+0x2d8>
   8aa64:	91000017 	ldw	r4,0(r18)
   8aa68:	90800417 	ldw	r2,16(r18)
   8aa6c:	1100022e 	bgeu	r2,r4,8aa78 <__sfvwrite_r+0x364>
   8aa70:	8023883a 	mov	r17,r16
   8aa74:	85003136 	bltu	r16,r20,8ab3c <__sfvwrite_r+0x428>
   8aa78:	91c00517 	ldw	r7,20(r18)
   8aa7c:	a1c01836 	bltu	r20,r7,8aae0 <__sfvwrite_r+0x3cc>
   8aa80:	90c00917 	ldw	r3,36(r18)
   8aa84:	91400717 	ldw	r5,28(r18)
   8aa88:	e009883a 	mov	r4,fp
   8aa8c:	b80d883a 	mov	r6,r23
   8aa90:	183ee83a 	callr	r3
   8aa94:	1021883a 	mov	r16,r2
   8aa98:	00bfb30e 	bge	zero,r2,8a968 <__sfvwrite_r+0x254>
   8aa9c:	1023883a 	mov	r17,r2
   8aaa0:	1027883a 	mov	r19,r2
   8aaa4:	003f9b06 	br	8a914 <__sfvwrite_r+0x200>
   8aaa8:	b80b883a 	mov	r5,r23
   8aaac:	800d883a 	mov	r6,r16
   8aab0:	008aee00 	call	8aee0 <memmove>
   8aab4:	90c00217 	ldw	r3,8(r18)
   8aab8:	90800017 	ldw	r2,0(r18)
   8aabc:	8023883a 	mov	r17,r16
   8aac0:	1c07c83a 	sub	r3,r3,r16
   8aac4:	1405883a 	add	r2,r2,r16
   8aac8:	90c00215 	stw	r3,8(r18)
   8aacc:	90800015 	stw	r2,0(r18)
   8aad0:	003fc406 	br	8a9e4 <__sfvwrite_r+0x2d0>
   8aad4:	a00d883a 	mov	r6,r20
   8aad8:	a021883a 	mov	r16,r20
   8aadc:	003f8106 	br	8a8e4 <__sfvwrite_r+0x1d0>
   8aae0:	b80b883a 	mov	r5,r23
   8aae4:	a00d883a 	mov	r6,r20
   8aae8:	008aee00 	call	8aee0 <memmove>
   8aaec:	90c00217 	ldw	r3,8(r18)
   8aaf0:	90800017 	ldw	r2,0(r18)
   8aaf4:	a021883a 	mov	r16,r20
   8aaf8:	1d07c83a 	sub	r3,r3,r20
   8aafc:	1505883a 	add	r2,r2,r20
   8ab00:	a023883a 	mov	r17,r20
   8ab04:	a027883a 	mov	r19,r20
   8ab08:	90c00215 	stw	r3,8(r18)
   8ab0c:	90800015 	stw	r2,0(r18)
   8ab10:	003f8006 	br	8a914 <__sfvwrite_r+0x200>
   8ab14:	b809883a 	mov	r4,r23
   8ab18:	01400284 	movi	r5,10
   8ab1c:	980d883a 	mov	r6,r19
   8ab20:	008ad5c0 	call	8ad5c <memchr>
   8ab24:	10001726 	beq	r2,zero,8ab84 <__sfvwrite_r+0x470>
   8ab28:	15c5c83a 	sub	r2,r2,r23
   8ab2c:	15000044 	addi	r20,r2,1
   8ab30:	00800044 	movi	r2,1
   8ab34:	d8800015 	stw	r2,0(sp)
   8ab38:	003f9806 	br	8a99c <__sfvwrite_r+0x288>
   8ab3c:	b80b883a 	mov	r5,r23
   8ab40:	800d883a 	mov	r6,r16
   8ab44:	008aee00 	call	8aee0 <memmove>
   8ab48:	90c00017 	ldw	r3,0(r18)
   8ab4c:	e009883a 	mov	r4,fp
   8ab50:	900b883a 	mov	r5,r18
   8ab54:	1c07883a 	add	r3,r3,r16
   8ab58:	90c00015 	stw	r3,0(r18)
   8ab5c:	8027883a 	mov	r19,r16
   8ab60:	0084be40 	call	84be4 <_fflush_r>
   8ab64:	103f6b26 	beq	r2,zero,8a914 <__sfvwrite_r+0x200>
   8ab68:	003f7f06 	br	8a968 <__sfvwrite_r+0x254>
   8ab6c:	400b883a 	mov	r5,r8
   8ab70:	e009883a 	mov	r4,fp
   8ab74:	008c0c40 	call	8c0c4 <_realloc_r>
   8ab78:	103f7626 	beq	r2,zero,8a954 <__sfvwrite_r+0x240>
   8ab7c:	1023883a 	mov	r17,r2
   8ab80:	003f5006 	br	8a8c4 <__sfvwrite_r+0x1b0>
   8ab84:	00c00044 	movi	r3,1
   8ab88:	9d000044 	addi	r20,r19,1
   8ab8c:	d8c00015 	stw	r3,0(sp)
   8ab90:	003f8206 	br	8a99c <__sfvwrite_r+0x288>
   8ab94:	9080030b 	ldhu	r2,12(r18)
   8ab98:	00c00244 	movi	r3,9
   8ab9c:	013fffc4 	movi	r4,-1
   8aba0:	10801014 	ori	r2,r2,64
   8aba4:	9080030d 	sth	r2,12(r18)
   8aba8:	e0c00015 	stw	r3,0(fp)
   8abac:	003f0606 	br	8a7c8 <__sfvwrite_r+0xb4>

0008abb0 <_isatty_r>:
   8abb0:	defffd04 	addi	sp,sp,-12
   8abb4:	dc000015 	stw	r16,0(sp)
   8abb8:	04000274 	movhi	r16,9
   8abbc:	841a3a04 	addi	r16,r16,26856
   8abc0:	dc400115 	stw	r17,4(sp)
   8abc4:	80000015 	stw	zero,0(r16)
   8abc8:	2023883a 	mov	r17,r4
   8abcc:	2809883a 	mov	r4,r5
   8abd0:	dfc00215 	stw	ra,8(sp)
   8abd4:	008dae00 	call	8dae0 <isatty>
   8abd8:	1007883a 	mov	r3,r2
   8abdc:	00bfffc4 	movi	r2,-1
   8abe0:	18800626 	beq	r3,r2,8abfc <_isatty_r+0x4c>
   8abe4:	1805883a 	mov	r2,r3
   8abe8:	dfc00217 	ldw	ra,8(sp)
   8abec:	dc400117 	ldw	r17,4(sp)
   8abf0:	dc000017 	ldw	r16,0(sp)
   8abf4:	dec00304 	addi	sp,sp,12
   8abf8:	f800283a 	ret
   8abfc:	80800017 	ldw	r2,0(r16)
   8ac00:	103ff826 	beq	r2,zero,8abe4 <_isatty_r+0x34>
   8ac04:	88800015 	stw	r2,0(r17)
   8ac08:	1805883a 	mov	r2,r3
   8ac0c:	dfc00217 	ldw	ra,8(sp)
   8ac10:	dc400117 	ldw	r17,4(sp)
   8ac14:	dc000017 	ldw	r16,0(sp)
   8ac18:	dec00304 	addi	sp,sp,12
   8ac1c:	f800283a 	ret

0008ac20 <__locale_charset>:
   8ac20:	d0a00517 	ldw	r2,-32748(gp)
   8ac24:	f800283a 	ret

0008ac28 <_localeconv_r>:
   8ac28:	00800274 	movhi	r2,9
   8ac2c:	108b3204 	addi	r2,r2,11464
   8ac30:	f800283a 	ret

0008ac34 <localeconv>:
   8ac34:	00800274 	movhi	r2,9
   8ac38:	10932d04 	addi	r2,r2,19636
   8ac3c:	11000017 	ldw	r4,0(r2)
   8ac40:	008ac281 	jmpi	8ac28 <_localeconv_r>

0008ac44 <_setlocale_r>:
   8ac44:	defffc04 	addi	sp,sp,-16
   8ac48:	00c00274 	movhi	r3,9
   8ac4c:	18cb0804 	addi	r3,r3,11296
   8ac50:	dc800215 	stw	r18,8(sp)
   8ac54:	dc400115 	stw	r17,4(sp)
   8ac58:	dc000015 	stw	r16,0(sp)
   8ac5c:	2023883a 	mov	r17,r4
   8ac60:	2825883a 	mov	r18,r5
   8ac64:	dfc00315 	stw	ra,12(sp)
   8ac68:	3021883a 	mov	r16,r6
   8ac6c:	3009883a 	mov	r4,r6
   8ac70:	180b883a 	mov	r5,r3
   8ac74:	30000926 	beq	r6,zero,8ac9c <_setlocale_r+0x58>
   8ac78:	008c7280 	call	8c728 <strcmp>
   8ac7c:	8009883a 	mov	r4,r16
   8ac80:	01400274 	movhi	r5,9
   8ac84:	294b1904 	addi	r5,r5,11364
   8ac88:	10000b1e 	bne	r2,zero,8acb8 <_setlocale_r+0x74>
   8ac8c:	8c000d15 	stw	r16,52(r17)
   8ac90:	8c800c15 	stw	r18,48(r17)
   8ac94:	00c00274 	movhi	r3,9
   8ac98:	18cb0804 	addi	r3,r3,11296
   8ac9c:	1805883a 	mov	r2,r3
   8aca0:	dfc00317 	ldw	ra,12(sp)
   8aca4:	dc800217 	ldw	r18,8(sp)
   8aca8:	dc400117 	ldw	r17,4(sp)
   8acac:	dc000017 	ldw	r16,0(sp)
   8acb0:	dec00404 	addi	sp,sp,16
   8acb4:	f800283a 	ret
   8acb8:	008c7280 	call	8c728 <strcmp>
   8acbc:	0007883a 	mov	r3,zero
   8acc0:	103ff226 	beq	r2,zero,8ac8c <_setlocale_r+0x48>
   8acc4:	003ff506 	br	8ac9c <_setlocale_r+0x58>

0008acc8 <setlocale>:
   8acc8:	01800274 	movhi	r6,9
   8accc:	31932d04 	addi	r6,r6,19636
   8acd0:	2007883a 	mov	r3,r4
   8acd4:	31000017 	ldw	r4,0(r6)
   8acd8:	280d883a 	mov	r6,r5
   8acdc:	180b883a 	mov	r5,r3
   8ace0:	008ac441 	jmpi	8ac44 <_setlocale_r>

0008ace4 <_lseek_r>:
   8ace4:	defffd04 	addi	sp,sp,-12
   8ace8:	dc000015 	stw	r16,0(sp)
   8acec:	04000274 	movhi	r16,9
   8acf0:	841a3a04 	addi	r16,r16,26856
   8acf4:	dc400115 	stw	r17,4(sp)
   8acf8:	80000015 	stw	zero,0(r16)
   8acfc:	2023883a 	mov	r17,r4
   8ad00:	2809883a 	mov	r4,r5
   8ad04:	300b883a 	mov	r5,r6
   8ad08:	380d883a 	mov	r6,r7
   8ad0c:	dfc00215 	stw	ra,8(sp)
   8ad10:	008dcf00 	call	8dcf0 <lseek>
   8ad14:	1007883a 	mov	r3,r2
   8ad18:	00bfffc4 	movi	r2,-1
   8ad1c:	18800626 	beq	r3,r2,8ad38 <_lseek_r+0x54>
   8ad20:	1805883a 	mov	r2,r3
   8ad24:	dfc00217 	ldw	ra,8(sp)
   8ad28:	dc400117 	ldw	r17,4(sp)
   8ad2c:	dc000017 	ldw	r16,0(sp)
   8ad30:	dec00304 	addi	sp,sp,12
   8ad34:	f800283a 	ret
   8ad38:	80800017 	ldw	r2,0(r16)
   8ad3c:	103ff826 	beq	r2,zero,8ad20 <_lseek_r+0x3c>
   8ad40:	88800015 	stw	r2,0(r17)
   8ad44:	1805883a 	mov	r2,r3
   8ad48:	dfc00217 	ldw	ra,8(sp)
   8ad4c:	dc400117 	ldw	r17,4(sp)
   8ad50:	dc000017 	ldw	r16,0(sp)
   8ad54:	dec00304 	addi	sp,sp,12
   8ad58:	f800283a 	ret

0008ad5c <memchr>:
   8ad5c:	008000c4 	movi	r2,3
   8ad60:	29403fcc 	andi	r5,r5,255
   8ad64:	2007883a 	mov	r3,r4
   8ad68:	1180022e 	bgeu	r2,r6,8ad74 <memchr+0x18>
   8ad6c:	2084703a 	and	r2,r4,r2
   8ad70:	10000b26 	beq	r2,zero,8ada0 <memchr+0x44>
   8ad74:	313fffc4 	addi	r4,r6,-1
   8ad78:	3000051e 	bne	r6,zero,8ad90 <memchr+0x34>
   8ad7c:	00002c06 	br	8ae30 <memchr+0xd4>
   8ad80:	213fffc4 	addi	r4,r4,-1
   8ad84:	00bfffc4 	movi	r2,-1
   8ad88:	18c00044 	addi	r3,r3,1
   8ad8c:	20802826 	beq	r4,r2,8ae30 <memchr+0xd4>
   8ad90:	18800003 	ldbu	r2,0(r3)
   8ad94:	28bffa1e 	bne	r5,r2,8ad80 <memchr+0x24>
   8ad98:	1805883a 	mov	r2,r3
   8ad9c:	f800283a 	ret
   8ada0:	0011883a 	mov	r8,zero
   8ada4:	0007883a 	mov	r3,zero
   8ada8:	01c00104 	movi	r7,4
   8adac:	4004923a 	slli	r2,r8,8
   8adb0:	18c00044 	addi	r3,r3,1
   8adb4:	1151883a 	add	r8,r2,r5
   8adb8:	19fffc1e 	bne	r3,r7,8adac <memchr+0x50>
   8adbc:	02bfbff4 	movhi	r10,65279
   8adc0:	52bfbfc4 	addi	r10,r10,-257
   8adc4:	02602074 	movhi	r9,32897
   8adc8:	4a602004 	addi	r9,r9,-32640
   8adcc:	02c000c4 	movi	r11,3
   8add0:	20800017 	ldw	r2,0(r4)
   8add4:	31bfff04 	addi	r6,r6,-4
   8add8:	200f883a 	mov	r7,r4
   8addc:	1204f03a 	xor	r2,r2,r8
   8ade0:	1287883a 	add	r3,r2,r10
   8ade4:	1a46703a 	and	r3,r3,r9
   8ade8:	0084303a 	nor	r2,zero,r2
   8adec:	10c4703a 	and	r2,r2,r3
   8adf0:	10000b26 	beq	r2,zero,8ae20 <memchr+0xc4>
   8adf4:	20800003 	ldbu	r2,0(r4)
   8adf8:	28800f26 	beq	r5,r2,8ae38 <memchr+0xdc>
   8adfc:	20800043 	ldbu	r2,1(r4)
   8ae00:	21c00044 	addi	r7,r4,1
   8ae04:	28800c26 	beq	r5,r2,8ae38 <memchr+0xdc>
   8ae08:	20800083 	ldbu	r2,2(r4)
   8ae0c:	21c00084 	addi	r7,r4,2
   8ae10:	28800926 	beq	r5,r2,8ae38 <memchr+0xdc>
   8ae14:	208000c3 	ldbu	r2,3(r4)
   8ae18:	21c000c4 	addi	r7,r4,3
   8ae1c:	28800626 	beq	r5,r2,8ae38 <memchr+0xdc>
   8ae20:	21000104 	addi	r4,r4,4
   8ae24:	59bfea36 	bltu	r11,r6,8add0 <memchr+0x74>
   8ae28:	2007883a 	mov	r3,r4
   8ae2c:	003fd106 	br	8ad74 <memchr+0x18>
   8ae30:	0005883a 	mov	r2,zero
   8ae34:	f800283a 	ret
   8ae38:	3805883a 	mov	r2,r7
   8ae3c:	f800283a 	ret

0008ae40 <memcpy>:
   8ae40:	01c003c4 	movi	r7,15
   8ae44:	2007883a 	mov	r3,r4
   8ae48:	3980032e 	bgeu	r7,r6,8ae58 <memcpy+0x18>
   8ae4c:	2904b03a 	or	r2,r5,r4
   8ae50:	108000cc 	andi	r2,r2,3
   8ae54:	10000926 	beq	r2,zero,8ae7c <memcpy+0x3c>
   8ae58:	30000626 	beq	r6,zero,8ae74 <memcpy+0x34>
   8ae5c:	30cd883a 	add	r6,r6,r3
   8ae60:	28800003 	ldbu	r2,0(r5)
   8ae64:	29400044 	addi	r5,r5,1
   8ae68:	18800005 	stb	r2,0(r3)
   8ae6c:	18c00044 	addi	r3,r3,1
   8ae70:	30fffb1e 	bne	r6,r3,8ae60 <memcpy+0x20>
   8ae74:	2005883a 	mov	r2,r4
   8ae78:	f800283a 	ret
   8ae7c:	3811883a 	mov	r8,r7
   8ae80:	200f883a 	mov	r7,r4
   8ae84:	28c00017 	ldw	r3,0(r5)
   8ae88:	31bffc04 	addi	r6,r6,-16
   8ae8c:	38c00015 	stw	r3,0(r7)
   8ae90:	28800117 	ldw	r2,4(r5)
   8ae94:	38800115 	stw	r2,4(r7)
   8ae98:	28c00217 	ldw	r3,8(r5)
   8ae9c:	38c00215 	stw	r3,8(r7)
   8aea0:	28800317 	ldw	r2,12(r5)
   8aea4:	29400404 	addi	r5,r5,16
   8aea8:	38800315 	stw	r2,12(r7)
   8aeac:	39c00404 	addi	r7,r7,16
   8aeb0:	41bff436 	bltu	r8,r6,8ae84 <memcpy+0x44>
   8aeb4:	008000c4 	movi	r2,3
   8aeb8:	1180072e 	bgeu	r2,r6,8aed8 <memcpy+0x98>
   8aebc:	1007883a 	mov	r3,r2
   8aec0:	28800017 	ldw	r2,0(r5)
   8aec4:	31bfff04 	addi	r6,r6,-4
   8aec8:	29400104 	addi	r5,r5,4
   8aecc:	38800015 	stw	r2,0(r7)
   8aed0:	39c00104 	addi	r7,r7,4
   8aed4:	19bffa36 	bltu	r3,r6,8aec0 <memcpy+0x80>
   8aed8:	3807883a 	mov	r3,r7
   8aedc:	003fde06 	br	8ae58 <memcpy+0x18>

0008aee0 <memmove>:
   8aee0:	2807883a 	mov	r3,r5
   8aee4:	2011883a 	mov	r8,r4
   8aee8:	29000c2e 	bgeu	r5,r4,8af1c <memmove+0x3c>
   8aeec:	298f883a 	add	r7,r5,r6
   8aef0:	21c00a2e 	bgeu	r4,r7,8af1c <memmove+0x3c>
   8aef4:	30000726 	beq	r6,zero,8af14 <memmove+0x34>
   8aef8:	2187883a 	add	r3,r4,r6
   8aefc:	198dc83a 	sub	r6,r3,r6
   8af00:	39ffffc4 	addi	r7,r7,-1
   8af04:	38800003 	ldbu	r2,0(r7)
   8af08:	18ffffc4 	addi	r3,r3,-1
   8af0c:	18800005 	stb	r2,0(r3)
   8af10:	19bffb1e 	bne	r3,r6,8af00 <memmove+0x20>
   8af14:	2005883a 	mov	r2,r4
   8af18:	f800283a 	ret
   8af1c:	01c003c4 	movi	r7,15
   8af20:	39800a36 	bltu	r7,r6,8af4c <memmove+0x6c>
   8af24:	303ffb26 	beq	r6,zero,8af14 <memmove+0x34>
   8af28:	400f883a 	mov	r7,r8
   8af2c:	320d883a 	add	r6,r6,r8
   8af30:	28800003 	ldbu	r2,0(r5)
   8af34:	29400044 	addi	r5,r5,1
   8af38:	38800005 	stb	r2,0(r7)
   8af3c:	39c00044 	addi	r7,r7,1
   8af40:	39bffb1e 	bne	r7,r6,8af30 <memmove+0x50>
   8af44:	2005883a 	mov	r2,r4
   8af48:	f800283a 	ret
   8af4c:	1904b03a 	or	r2,r3,r4
   8af50:	108000cc 	andi	r2,r2,3
   8af54:	103ff31e 	bne	r2,zero,8af24 <memmove+0x44>
   8af58:	3811883a 	mov	r8,r7
   8af5c:	180b883a 	mov	r5,r3
   8af60:	200f883a 	mov	r7,r4
   8af64:	28c00017 	ldw	r3,0(r5)
   8af68:	31bffc04 	addi	r6,r6,-16
   8af6c:	38c00015 	stw	r3,0(r7)
   8af70:	28800117 	ldw	r2,4(r5)
   8af74:	38800115 	stw	r2,4(r7)
   8af78:	28c00217 	ldw	r3,8(r5)
   8af7c:	38c00215 	stw	r3,8(r7)
   8af80:	28800317 	ldw	r2,12(r5)
   8af84:	29400404 	addi	r5,r5,16
   8af88:	38800315 	stw	r2,12(r7)
   8af8c:	39c00404 	addi	r7,r7,16
   8af90:	41bff436 	bltu	r8,r6,8af64 <memmove+0x84>
   8af94:	008000c4 	movi	r2,3
   8af98:	1180072e 	bgeu	r2,r6,8afb8 <memmove+0xd8>
   8af9c:	1007883a 	mov	r3,r2
   8afa0:	28800017 	ldw	r2,0(r5)
   8afa4:	31bfff04 	addi	r6,r6,-4
   8afa8:	29400104 	addi	r5,r5,4
   8afac:	38800015 	stw	r2,0(r7)
   8afb0:	39c00104 	addi	r7,r7,4
   8afb4:	19bffa36 	bltu	r3,r6,8afa0 <memmove+0xc0>
   8afb8:	3811883a 	mov	r8,r7
   8afbc:	003fd906 	br	8af24 <memmove+0x44>

0008afc0 <_Bfree>:
   8afc0:	28000826 	beq	r5,zero,8afe4 <_Bfree+0x24>
   8afc4:	28800117 	ldw	r2,4(r5)
   8afc8:	21001317 	ldw	r4,76(r4)
   8afcc:	1085883a 	add	r2,r2,r2
   8afd0:	1085883a 	add	r2,r2,r2
   8afd4:	1105883a 	add	r2,r2,r4
   8afd8:	10c00017 	ldw	r3,0(r2)
   8afdc:	28c00015 	stw	r3,0(r5)
   8afe0:	11400015 	stw	r5,0(r2)
   8afe4:	f800283a 	ret

0008afe8 <__hi0bits>:
   8afe8:	20bfffec 	andhi	r2,r4,65535
   8afec:	10001426 	beq	r2,zero,8b040 <__hi0bits+0x58>
   8aff0:	0007883a 	mov	r3,zero
   8aff4:	20bfc02c 	andhi	r2,r4,65280
   8aff8:	1000021e 	bne	r2,zero,8b004 <__hi0bits+0x1c>
   8affc:	2008923a 	slli	r4,r4,8
   8b000:	18c00204 	addi	r3,r3,8
   8b004:	20bc002c 	andhi	r2,r4,61440
   8b008:	1000021e 	bne	r2,zero,8b014 <__hi0bits+0x2c>
   8b00c:	2008913a 	slli	r4,r4,4
   8b010:	18c00104 	addi	r3,r3,4
   8b014:	20b0002c 	andhi	r2,r4,49152
   8b018:	1000031e 	bne	r2,zero,8b028 <__hi0bits+0x40>
   8b01c:	2105883a 	add	r2,r4,r4
   8b020:	18c00084 	addi	r3,r3,2
   8b024:	1089883a 	add	r4,r2,r2
   8b028:	20000316 	blt	r4,zero,8b038 <__hi0bits+0x50>
   8b02c:	2090002c 	andhi	r2,r4,16384
   8b030:	10000626 	beq	r2,zero,8b04c <__hi0bits+0x64>
   8b034:	18c00044 	addi	r3,r3,1
   8b038:	1805883a 	mov	r2,r3
   8b03c:	f800283a 	ret
   8b040:	2008943a 	slli	r4,r4,16
   8b044:	00c00404 	movi	r3,16
   8b048:	003fea06 	br	8aff4 <__hi0bits+0xc>
   8b04c:	00c00804 	movi	r3,32
   8b050:	1805883a 	mov	r2,r3
   8b054:	f800283a 	ret

0008b058 <__lo0bits>:
   8b058:	20c00017 	ldw	r3,0(r4)
   8b05c:	188001cc 	andi	r2,r3,7
   8b060:	10000a26 	beq	r2,zero,8b08c <__lo0bits+0x34>
   8b064:	1880004c 	andi	r2,r3,1
   8b068:	1005003a 	cmpeq	r2,r2,zero
   8b06c:	10002126 	beq	r2,zero,8b0f4 <__lo0bits+0x9c>
   8b070:	1880008c 	andi	r2,r3,2
   8b074:	1000251e 	bne	r2,zero,8b10c <__lo0bits+0xb4>
   8b078:	1804d0ba 	srli	r2,r3,2
   8b07c:	01400084 	movi	r5,2
   8b080:	20800015 	stw	r2,0(r4)
   8b084:	2805883a 	mov	r2,r5
   8b088:	f800283a 	ret
   8b08c:	18bfffcc 	andi	r2,r3,65535
   8b090:	10001526 	beq	r2,zero,8b0e8 <__lo0bits+0x90>
   8b094:	000b883a 	mov	r5,zero
   8b098:	18803fcc 	andi	r2,r3,255
   8b09c:	1000021e 	bne	r2,zero,8b0a8 <__lo0bits+0x50>
   8b0a0:	1806d23a 	srli	r3,r3,8
   8b0a4:	29400204 	addi	r5,r5,8
   8b0a8:	188003cc 	andi	r2,r3,15
   8b0ac:	1000021e 	bne	r2,zero,8b0b8 <__lo0bits+0x60>
   8b0b0:	1806d13a 	srli	r3,r3,4
   8b0b4:	29400104 	addi	r5,r5,4
   8b0b8:	188000cc 	andi	r2,r3,3
   8b0bc:	1000021e 	bne	r2,zero,8b0c8 <__lo0bits+0x70>
   8b0c0:	1806d0ba 	srli	r3,r3,2
   8b0c4:	29400084 	addi	r5,r5,2
   8b0c8:	1880004c 	andi	r2,r3,1
   8b0cc:	1000031e 	bne	r2,zero,8b0dc <__lo0bits+0x84>
   8b0d0:	1806d07a 	srli	r3,r3,1
   8b0d4:	18000a26 	beq	r3,zero,8b100 <__lo0bits+0xa8>
   8b0d8:	29400044 	addi	r5,r5,1
   8b0dc:	2805883a 	mov	r2,r5
   8b0e0:	20c00015 	stw	r3,0(r4)
   8b0e4:	f800283a 	ret
   8b0e8:	1806d43a 	srli	r3,r3,16
   8b0ec:	01400404 	movi	r5,16
   8b0f0:	003fe906 	br	8b098 <__lo0bits+0x40>
   8b0f4:	000b883a 	mov	r5,zero
   8b0f8:	2805883a 	mov	r2,r5
   8b0fc:	f800283a 	ret
   8b100:	01400804 	movi	r5,32
   8b104:	2805883a 	mov	r2,r5
   8b108:	f800283a 	ret
   8b10c:	1804d07a 	srli	r2,r3,1
   8b110:	01400044 	movi	r5,1
   8b114:	20800015 	stw	r2,0(r4)
   8b118:	003fda06 	br	8b084 <__lo0bits+0x2c>

0008b11c <__mcmp>:
   8b11c:	20800417 	ldw	r2,16(r4)
   8b120:	28c00417 	ldw	r3,16(r5)
   8b124:	10cfc83a 	sub	r7,r2,r3
   8b128:	38000c1e 	bne	r7,zero,8b15c <__mcmp+0x40>
   8b12c:	18c5883a 	add	r2,r3,r3
   8b130:	1085883a 	add	r2,r2,r2
   8b134:	10c00504 	addi	r3,r2,20
   8b138:	21000504 	addi	r4,r4,20
   8b13c:	28cb883a 	add	r5,r5,r3
   8b140:	2085883a 	add	r2,r4,r2
   8b144:	10bfff04 	addi	r2,r2,-4
   8b148:	297fff04 	addi	r5,r5,-4
   8b14c:	11800017 	ldw	r6,0(r2)
   8b150:	28c00017 	ldw	r3,0(r5)
   8b154:	30c0031e 	bne	r6,r3,8b164 <__mcmp+0x48>
   8b158:	20bffa36 	bltu	r4,r2,8b144 <__mcmp+0x28>
   8b15c:	3805883a 	mov	r2,r7
   8b160:	f800283a 	ret
   8b164:	30c00336 	bltu	r6,r3,8b174 <__mcmp+0x58>
   8b168:	01c00044 	movi	r7,1
   8b16c:	3805883a 	mov	r2,r7
   8b170:	f800283a 	ret
   8b174:	01ffffc4 	movi	r7,-1
   8b178:	003ff806 	br	8b15c <__mcmp+0x40>

0008b17c <__ulp>:
   8b17c:	295ffc2c 	andhi	r5,r5,32752
   8b180:	013f3034 	movhi	r4,64704
   8b184:	290b883a 	add	r5,r5,r4
   8b188:	0145c83a 	sub	r2,zero,r5
   8b18c:	1007d53a 	srai	r3,r2,20
   8b190:	000d883a 	mov	r6,zero
   8b194:	0140040e 	bge	zero,r5,8b1a8 <__ulp+0x2c>
   8b198:	280f883a 	mov	r7,r5
   8b19c:	3807883a 	mov	r3,r7
   8b1a0:	3005883a 	mov	r2,r6
   8b1a4:	f800283a 	ret
   8b1a8:	008004c4 	movi	r2,19
   8b1ac:	193ffb04 	addi	r4,r3,-20
   8b1b0:	10c00c0e 	bge	r2,r3,8b1e4 <__ulp+0x68>
   8b1b4:	008007c4 	movi	r2,31
   8b1b8:	1107c83a 	sub	r3,r2,r4
   8b1bc:	00800784 	movi	r2,30
   8b1c0:	01400044 	movi	r5,1
   8b1c4:	11000216 	blt	r2,r4,8b1d0 <__ulp+0x54>
   8b1c8:	00800044 	movi	r2,1
   8b1cc:	10ca983a 	sll	r5,r2,r3
   8b1d0:	000f883a 	mov	r7,zero
   8b1d4:	280d883a 	mov	r6,r5
   8b1d8:	3807883a 	mov	r3,r7
   8b1dc:	3005883a 	mov	r2,r6
   8b1e0:	f800283a 	ret
   8b1e4:	00800234 	movhi	r2,8
   8b1e8:	10cfd83a 	sra	r7,r2,r3
   8b1ec:	000d883a 	mov	r6,zero
   8b1f0:	3005883a 	mov	r2,r6
   8b1f4:	3807883a 	mov	r3,r7
   8b1f8:	f800283a 	ret

0008b1fc <__b2d>:
   8b1fc:	20800417 	ldw	r2,16(r4)
   8b200:	defff904 	addi	sp,sp,-28
   8b204:	dd000415 	stw	r20,16(sp)
   8b208:	1085883a 	add	r2,r2,r2
   8b20c:	25000504 	addi	r20,r4,20
   8b210:	1085883a 	add	r2,r2,r2
   8b214:	dc000015 	stw	r16,0(sp)
   8b218:	a0a1883a 	add	r16,r20,r2
   8b21c:	dd400515 	stw	r21,20(sp)
   8b220:	857fff17 	ldw	r21,-4(r16)
   8b224:	dc400115 	stw	r17,4(sp)
   8b228:	dfc00615 	stw	ra,24(sp)
   8b22c:	a809883a 	mov	r4,r21
   8b230:	2823883a 	mov	r17,r5
   8b234:	dcc00315 	stw	r19,12(sp)
   8b238:	dc800215 	stw	r18,8(sp)
   8b23c:	008afe80 	call	8afe8 <__hi0bits>
   8b240:	100b883a 	mov	r5,r2
   8b244:	00800804 	movi	r2,32
   8b248:	1145c83a 	sub	r2,r2,r5
   8b24c:	88800015 	stw	r2,0(r17)
   8b250:	00800284 	movi	r2,10
   8b254:	80ffff04 	addi	r3,r16,-4
   8b258:	11401416 	blt	r2,r5,8b2ac <__b2d+0xb0>
   8b25c:	008002c4 	movi	r2,11
   8b260:	1149c83a 	sub	r4,r2,r5
   8b264:	a0c02736 	bltu	r20,r3,8b304 <__b2d+0x108>
   8b268:	000d883a 	mov	r6,zero
   8b26c:	28800544 	addi	r2,r5,21
   8b270:	a906d83a 	srl	r3,r21,r4
   8b274:	a884983a 	sll	r2,r21,r2
   8b278:	1ccffc34 	orhi	r19,r3,16368
   8b27c:	11a4b03a 	or	r18,r2,r6
   8b280:	9005883a 	mov	r2,r18
   8b284:	9807883a 	mov	r3,r19
   8b288:	dfc00617 	ldw	ra,24(sp)
   8b28c:	dd400517 	ldw	r21,20(sp)
   8b290:	dd000417 	ldw	r20,16(sp)
   8b294:	dcc00317 	ldw	r19,12(sp)
   8b298:	dc800217 	ldw	r18,8(sp)
   8b29c:	dc400117 	ldw	r17,4(sp)
   8b2a0:	dc000017 	ldw	r16,0(sp)
   8b2a4:	dec00704 	addi	sp,sp,28
   8b2a8:	f800283a 	ret
   8b2ac:	a0c00e36 	bltu	r20,r3,8b2e8 <__b2d+0xec>
   8b2b0:	293ffd44 	addi	r4,r5,-11
   8b2b4:	000d883a 	mov	r6,zero
   8b2b8:	20000f26 	beq	r4,zero,8b2f8 <__b2d+0xfc>
   8b2bc:	00800804 	movi	r2,32
   8b2c0:	110bc83a 	sub	r5,r2,r4
   8b2c4:	a0c01236 	bltu	r20,r3,8b310 <__b2d+0x114>
   8b2c8:	000f883a 	mov	r7,zero
   8b2cc:	a904983a 	sll	r2,r21,r4
   8b2d0:	3146d83a 	srl	r3,r6,r5
   8b2d4:	3108983a 	sll	r4,r6,r4
   8b2d8:	108ffc34 	orhi	r2,r2,16368
   8b2dc:	18a6b03a 	or	r19,r3,r2
   8b2e0:	3924b03a 	or	r18,r7,r4
   8b2e4:	003fe606 	br	8b280 <__b2d+0x84>
   8b2e8:	293ffd44 	addi	r4,r5,-11
   8b2ec:	81bffe17 	ldw	r6,-8(r16)
   8b2f0:	80fffe04 	addi	r3,r16,-8
   8b2f4:	203ff11e 	bne	r4,zero,8b2bc <__b2d+0xc0>
   8b2f8:	accffc34 	orhi	r19,r21,16368
   8b2fc:	3025883a 	mov	r18,r6
   8b300:	003fdf06 	br	8b280 <__b2d+0x84>
   8b304:	18bfff17 	ldw	r2,-4(r3)
   8b308:	110cd83a 	srl	r6,r2,r4
   8b30c:	003fd706 	br	8b26c <__b2d+0x70>
   8b310:	18bfff17 	ldw	r2,-4(r3)
   8b314:	114ed83a 	srl	r7,r2,r5
   8b318:	003fec06 	br	8b2cc <__b2d+0xd0>

0008b31c <__ratio>:
   8b31c:	defff904 	addi	sp,sp,-28
   8b320:	dc400215 	stw	r17,8(sp)
   8b324:	2823883a 	mov	r17,r5
   8b328:	d80b883a 	mov	r5,sp
   8b32c:	dfc00615 	stw	ra,24(sp)
   8b330:	dd000515 	stw	r20,20(sp)
   8b334:	dcc00415 	stw	r19,16(sp)
   8b338:	dc800315 	stw	r18,12(sp)
   8b33c:	2025883a 	mov	r18,r4
   8b340:	008b1fc0 	call	8b1fc <__b2d>
   8b344:	8809883a 	mov	r4,r17
   8b348:	d9400104 	addi	r5,sp,4
   8b34c:	1027883a 	mov	r19,r2
   8b350:	1829883a 	mov	r20,r3
   8b354:	008b1fc0 	call	8b1fc <__b2d>
   8b358:	89000417 	ldw	r4,16(r17)
   8b35c:	91c00417 	ldw	r7,16(r18)
   8b360:	d9800117 	ldw	r6,4(sp)
   8b364:	180b883a 	mov	r5,r3
   8b368:	390fc83a 	sub	r7,r7,r4
   8b36c:	1009883a 	mov	r4,r2
   8b370:	d8800017 	ldw	r2,0(sp)
   8b374:	380e917a 	slli	r7,r7,5
   8b378:	2011883a 	mov	r8,r4
   8b37c:	1185c83a 	sub	r2,r2,r6
   8b380:	11c5883a 	add	r2,r2,r7
   8b384:	1006953a 	slli	r3,r2,20
   8b388:	2813883a 	mov	r9,r5
   8b38c:	00800d0e 	bge	zero,r2,8b3c4 <__ratio+0xa8>
   8b390:	1d29883a 	add	r20,r3,r20
   8b394:	a00b883a 	mov	r5,r20
   8b398:	480f883a 	mov	r7,r9
   8b39c:	9809883a 	mov	r4,r19
   8b3a0:	400d883a 	mov	r6,r8
   8b3a4:	0083cc40 	call	83cc4 <__divdf3>
   8b3a8:	dfc00617 	ldw	ra,24(sp)
   8b3ac:	dd000517 	ldw	r20,20(sp)
   8b3b0:	dcc00417 	ldw	r19,16(sp)
   8b3b4:	dc800317 	ldw	r18,12(sp)
   8b3b8:	dc400217 	ldw	r17,8(sp)
   8b3bc:	dec00704 	addi	sp,sp,28
   8b3c0:	f800283a 	ret
   8b3c4:	28d3c83a 	sub	r9,r5,r3
   8b3c8:	003ff206 	br	8b394 <__ratio+0x78>

0008b3cc <_mprec_log10>:
   8b3cc:	defffe04 	addi	sp,sp,-8
   8b3d0:	008005c4 	movi	r2,23
   8b3d4:	dc000015 	stw	r16,0(sp)
   8b3d8:	dfc00115 	stw	ra,4(sp)
   8b3dc:	2021883a 	mov	r16,r4
   8b3e0:	11000c16 	blt	r2,r4,8b414 <_mprec_log10+0x48>
   8b3e4:	200490fa 	slli	r2,r4,3
   8b3e8:	00c00274 	movhi	r3,9
   8b3ec:	18cb3e04 	addi	r3,r3,11512
   8b3f0:	10c5883a 	add	r2,r2,r3
   8b3f4:	12400117 	ldw	r9,4(r2)
   8b3f8:	12000017 	ldw	r8,0(r2)
   8b3fc:	4807883a 	mov	r3,r9
   8b400:	4005883a 	mov	r2,r8
   8b404:	dfc00117 	ldw	ra,4(sp)
   8b408:	dc000017 	ldw	r16,0(sp)
   8b40c:	dec00204 	addi	sp,sp,8
   8b410:	f800283a 	ret
   8b414:	0011883a 	mov	r8,zero
   8b418:	024ffc34 	movhi	r9,16368
   8b41c:	0005883a 	mov	r2,zero
   8b420:	00d00934 	movhi	r3,16420
   8b424:	480b883a 	mov	r5,r9
   8b428:	4009883a 	mov	r4,r8
   8b42c:	180f883a 	mov	r7,r3
   8b430:	100d883a 	mov	r6,r2
   8b434:	00839000 	call	83900 <__muldf3>
   8b438:	843fffc4 	addi	r16,r16,-1
   8b43c:	1011883a 	mov	r8,r2
   8b440:	1813883a 	mov	r9,r3
   8b444:	803ff51e 	bne	r16,zero,8b41c <_mprec_log10+0x50>
   8b448:	4005883a 	mov	r2,r8
   8b44c:	4807883a 	mov	r3,r9
   8b450:	dfc00117 	ldw	ra,4(sp)
   8b454:	dc000017 	ldw	r16,0(sp)
   8b458:	dec00204 	addi	sp,sp,8
   8b45c:	f800283a 	ret

0008b460 <__copybits>:
   8b460:	297fffc4 	addi	r5,r5,-1
   8b464:	30800417 	ldw	r2,16(r6)
   8b468:	280bd17a 	srai	r5,r5,5
   8b46c:	31800504 	addi	r6,r6,20
   8b470:	1085883a 	add	r2,r2,r2
   8b474:	294b883a 	add	r5,r5,r5
   8b478:	294b883a 	add	r5,r5,r5
   8b47c:	1085883a 	add	r2,r2,r2
   8b480:	290b883a 	add	r5,r5,r4
   8b484:	3087883a 	add	r3,r6,r2
   8b488:	29400104 	addi	r5,r5,4
   8b48c:	30c0052e 	bgeu	r6,r3,8b4a4 <__copybits+0x44>
   8b490:	30800017 	ldw	r2,0(r6)
   8b494:	31800104 	addi	r6,r6,4
   8b498:	20800015 	stw	r2,0(r4)
   8b49c:	21000104 	addi	r4,r4,4
   8b4a0:	30fffb36 	bltu	r6,r3,8b490 <__copybits+0x30>
   8b4a4:	2140032e 	bgeu	r4,r5,8b4b4 <__copybits+0x54>
   8b4a8:	20000015 	stw	zero,0(r4)
   8b4ac:	21000104 	addi	r4,r4,4
   8b4b0:	217ffd36 	bltu	r4,r5,8b4a8 <__copybits+0x48>
   8b4b4:	f800283a 	ret

0008b4b8 <__any_on>:
   8b4b8:	20800417 	ldw	r2,16(r4)
   8b4bc:	2807d17a 	srai	r3,r5,5
   8b4c0:	21000504 	addi	r4,r4,20
   8b4c4:	10c00d0e 	bge	r2,r3,8b4fc <__any_on+0x44>
   8b4c8:	1085883a 	add	r2,r2,r2
   8b4cc:	1085883a 	add	r2,r2,r2
   8b4d0:	208d883a 	add	r6,r4,r2
   8b4d4:	2180182e 	bgeu	r4,r6,8b538 <__any_on+0x80>
   8b4d8:	30bfff17 	ldw	r2,-4(r6)
   8b4dc:	30ffff04 	addi	r3,r6,-4
   8b4e0:	1000041e 	bne	r2,zero,8b4f4 <__any_on+0x3c>
   8b4e4:	20c0142e 	bgeu	r4,r3,8b538 <__any_on+0x80>
   8b4e8:	18ffff04 	addi	r3,r3,-4
   8b4ec:	18800017 	ldw	r2,0(r3)
   8b4f0:	103ffc26 	beq	r2,zero,8b4e4 <__any_on+0x2c>
   8b4f4:	00800044 	movi	r2,1
   8b4f8:	f800283a 	ret
   8b4fc:	18800a0e 	bge	r3,r2,8b528 <__any_on+0x70>
   8b500:	294007cc 	andi	r5,r5,31
   8b504:	28000826 	beq	r5,zero,8b528 <__any_on+0x70>
   8b508:	18c5883a 	add	r2,r3,r3
   8b50c:	1085883a 	add	r2,r2,r2
   8b510:	208d883a 	add	r6,r4,r2
   8b514:	30c00017 	ldw	r3,0(r6)
   8b518:	1944d83a 	srl	r2,r3,r5
   8b51c:	1144983a 	sll	r2,r2,r5
   8b520:	18bff41e 	bne	r3,r2,8b4f4 <__any_on+0x3c>
   8b524:	003feb06 	br	8b4d4 <__any_on+0x1c>
   8b528:	18c5883a 	add	r2,r3,r3
   8b52c:	1085883a 	add	r2,r2,r2
   8b530:	208d883a 	add	r6,r4,r2
   8b534:	003fe706 	br	8b4d4 <__any_on+0x1c>
   8b538:	0005883a 	mov	r2,zero
   8b53c:	f800283a 	ret

0008b540 <_Balloc>:
   8b540:	20c01317 	ldw	r3,76(r4)
   8b544:	defffb04 	addi	sp,sp,-20
   8b548:	dcc00315 	stw	r19,12(sp)
   8b54c:	dc800215 	stw	r18,8(sp)
   8b550:	dfc00415 	stw	ra,16(sp)
   8b554:	2825883a 	mov	r18,r5
   8b558:	dc400115 	stw	r17,4(sp)
   8b55c:	dc000015 	stw	r16,0(sp)
   8b560:	2027883a 	mov	r19,r4
   8b564:	01800404 	movi	r6,16
   8b568:	01400104 	movi	r5,4
   8b56c:	18001726 	beq	r3,zero,8b5cc <_Balloc+0x8c>
   8b570:	01400044 	movi	r5,1
   8b574:	9485883a 	add	r2,r18,r18
   8b578:	2ca2983a 	sll	r17,r5,r18
   8b57c:	1085883a 	add	r2,r2,r2
   8b580:	10c7883a 	add	r3,r2,r3
   8b584:	1c000017 	ldw	r16,0(r3)
   8b588:	8c4d883a 	add	r6,r17,r17
   8b58c:	318d883a 	add	r6,r6,r6
   8b590:	9809883a 	mov	r4,r19
   8b594:	31800504 	addi	r6,r6,20
   8b598:	80001226 	beq	r16,zero,8b5e4 <_Balloc+0xa4>
   8b59c:	80800017 	ldw	r2,0(r16)
   8b5a0:	18800015 	stw	r2,0(r3)
   8b5a4:	80000415 	stw	zero,16(r16)
   8b5a8:	80000315 	stw	zero,12(r16)
   8b5ac:	8005883a 	mov	r2,r16
   8b5b0:	dfc00417 	ldw	ra,16(sp)
   8b5b4:	dcc00317 	ldw	r19,12(sp)
   8b5b8:	dc800217 	ldw	r18,8(sp)
   8b5bc:	dc400117 	ldw	r17,4(sp)
   8b5c0:	dc000017 	ldw	r16,0(sp)
   8b5c4:	dec00504 	addi	sp,sp,20
   8b5c8:	f800283a 	ret
   8b5cc:	008c7e40 	call	8c7e4 <_calloc_r>
   8b5d0:	1007883a 	mov	r3,r2
   8b5d4:	0021883a 	mov	r16,zero
   8b5d8:	98801315 	stw	r2,76(r19)
   8b5dc:	103fe41e 	bne	r2,zero,8b570 <_Balloc+0x30>
   8b5e0:	003ff206 	br	8b5ac <_Balloc+0x6c>
   8b5e4:	008c7e40 	call	8c7e4 <_calloc_r>
   8b5e8:	103ff026 	beq	r2,zero,8b5ac <_Balloc+0x6c>
   8b5ec:	1021883a 	mov	r16,r2
   8b5f0:	14800115 	stw	r18,4(r2)
   8b5f4:	14400215 	stw	r17,8(r2)
   8b5f8:	003fea06 	br	8b5a4 <_Balloc+0x64>

0008b5fc <__d2b>:
   8b5fc:	defff504 	addi	sp,sp,-44
   8b600:	dcc00515 	stw	r19,20(sp)
   8b604:	04c00044 	movi	r19,1
   8b608:	dc000215 	stw	r16,8(sp)
   8b60c:	2821883a 	mov	r16,r5
   8b610:	980b883a 	mov	r5,r19
   8b614:	ddc00915 	stw	r23,36(sp)
   8b618:	dd800815 	stw	r22,32(sp)
   8b61c:	dd400715 	stw	r21,28(sp)
   8b620:	dd000615 	stw	r20,24(sp)
   8b624:	dc800415 	stw	r18,16(sp)
   8b628:	dc400315 	stw	r17,12(sp)
   8b62c:	dfc00a15 	stw	ra,40(sp)
   8b630:	3023883a 	mov	r17,r6
   8b634:	382d883a 	mov	r22,r7
   8b638:	ddc00b17 	ldw	r23,44(sp)
   8b63c:	008b5400 	call	8b540 <_Balloc>
   8b640:	1025883a 	mov	r18,r2
   8b644:	00a00034 	movhi	r2,32768
   8b648:	10bfffc4 	addi	r2,r2,-1
   8b64c:	8888703a 	and	r4,r17,r2
   8b650:	202ad53a 	srli	r21,r4,20
   8b654:	00800434 	movhi	r2,16
   8b658:	10bfffc4 	addi	r2,r2,-1
   8b65c:	8886703a 	and	r3,r17,r2
   8b660:	a829003a 	cmpeq	r20,r21,zero
   8b664:	800b883a 	mov	r5,r16
   8b668:	d8c00115 	stw	r3,4(sp)
   8b66c:	94000504 	addi	r16,r18,20
   8b670:	a000021e 	bne	r20,zero,8b67c <__d2b+0x80>
   8b674:	18c00434 	orhi	r3,r3,16
   8b678:	d8c00115 	stw	r3,4(sp)
   8b67c:	28002726 	beq	r5,zero,8b71c <__d2b+0x120>
   8b680:	d809883a 	mov	r4,sp
   8b684:	d9400015 	stw	r5,0(sp)
   8b688:	008b0580 	call	8b058 <__lo0bits>
   8b68c:	100d883a 	mov	r6,r2
   8b690:	10003526 	beq	r2,zero,8b768 <__d2b+0x16c>
   8b694:	d8c00117 	ldw	r3,4(sp)
   8b698:	00800804 	movi	r2,32
   8b69c:	1185c83a 	sub	r2,r2,r6
   8b6a0:	d9000017 	ldw	r4,0(sp)
   8b6a4:	1886983a 	sll	r3,r3,r2
   8b6a8:	1906b03a 	or	r3,r3,r4
   8b6ac:	90c00515 	stw	r3,20(r18)
   8b6b0:	d8c00117 	ldw	r3,4(sp)
   8b6b4:	1986d83a 	srl	r3,r3,r6
   8b6b8:	d8c00115 	stw	r3,4(sp)
   8b6bc:	180b003a 	cmpeq	r5,r3,zero
   8b6c0:	00800084 	movi	r2,2
   8b6c4:	114bc83a 	sub	r5,r2,r5
   8b6c8:	80c00115 	stw	r3,4(r16)
   8b6cc:	91400415 	stw	r5,16(r18)
   8b6d0:	a0001a1e 	bne	r20,zero,8b73c <__d2b+0x140>
   8b6d4:	3545883a 	add	r2,r6,r21
   8b6d8:	10bef344 	addi	r2,r2,-1075
   8b6dc:	00c00d44 	movi	r3,53
   8b6e0:	b0800015 	stw	r2,0(r22)
   8b6e4:	1987c83a 	sub	r3,r3,r6
   8b6e8:	b8c00015 	stw	r3,0(r23)
   8b6ec:	9005883a 	mov	r2,r18
   8b6f0:	dfc00a17 	ldw	ra,40(sp)
   8b6f4:	ddc00917 	ldw	r23,36(sp)
   8b6f8:	dd800817 	ldw	r22,32(sp)
   8b6fc:	dd400717 	ldw	r21,28(sp)
   8b700:	dd000617 	ldw	r20,24(sp)
   8b704:	dcc00517 	ldw	r19,20(sp)
   8b708:	dc800417 	ldw	r18,16(sp)
   8b70c:	dc400317 	ldw	r17,12(sp)
   8b710:	dc000217 	ldw	r16,8(sp)
   8b714:	dec00b04 	addi	sp,sp,44
   8b718:	f800283a 	ret
   8b71c:	d9000104 	addi	r4,sp,4
   8b720:	008b0580 	call	8b058 <__lo0bits>
   8b724:	11800804 	addi	r6,r2,32
   8b728:	d8800117 	ldw	r2,4(sp)
   8b72c:	94c00415 	stw	r19,16(r18)
   8b730:	980b883a 	mov	r5,r19
   8b734:	90800515 	stw	r2,20(r18)
   8b738:	a03fe626 	beq	r20,zero,8b6d4 <__d2b+0xd8>
   8b73c:	2945883a 	add	r2,r5,r5
   8b740:	1085883a 	add	r2,r2,r2
   8b744:	1405883a 	add	r2,r2,r16
   8b748:	113fff17 	ldw	r4,-4(r2)
   8b74c:	30fef384 	addi	r3,r6,-1074
   8b750:	2820917a 	slli	r16,r5,5
   8b754:	b0c00015 	stw	r3,0(r22)
   8b758:	008afe80 	call	8afe8 <__hi0bits>
   8b75c:	80a1c83a 	sub	r16,r16,r2
   8b760:	bc000015 	stw	r16,0(r23)
   8b764:	003fe106 	br	8b6ec <__d2b+0xf0>
   8b768:	d8800017 	ldw	r2,0(sp)
   8b76c:	90800515 	stw	r2,20(r18)
   8b770:	d8c00117 	ldw	r3,4(sp)
   8b774:	003fd106 	br	8b6bc <__d2b+0xc0>

0008b778 <__mdiff>:
   8b778:	defffb04 	addi	sp,sp,-20
   8b77c:	dc000015 	stw	r16,0(sp)
   8b780:	2821883a 	mov	r16,r5
   8b784:	dc800215 	stw	r18,8(sp)
   8b788:	300b883a 	mov	r5,r6
   8b78c:	2025883a 	mov	r18,r4
   8b790:	8009883a 	mov	r4,r16
   8b794:	dc400115 	stw	r17,4(sp)
   8b798:	dfc00415 	stw	ra,16(sp)
   8b79c:	dcc00315 	stw	r19,12(sp)
   8b7a0:	3023883a 	mov	r17,r6
   8b7a4:	008b11c0 	call	8b11c <__mcmp>
   8b7a8:	10004226 	beq	r2,zero,8b8b4 <__mdiff+0x13c>
   8b7ac:	10005016 	blt	r2,zero,8b8f0 <__mdiff+0x178>
   8b7b0:	0027883a 	mov	r19,zero
   8b7b4:	81400117 	ldw	r5,4(r16)
   8b7b8:	9009883a 	mov	r4,r18
   8b7bc:	008b5400 	call	8b540 <_Balloc>
   8b7c0:	1019883a 	mov	r12,r2
   8b7c4:	82800417 	ldw	r10,16(r16)
   8b7c8:	88800417 	ldw	r2,16(r17)
   8b7cc:	81800504 	addi	r6,r16,20
   8b7d0:	5287883a 	add	r3,r10,r10
   8b7d4:	1085883a 	add	r2,r2,r2
   8b7d8:	18c7883a 	add	r3,r3,r3
   8b7dc:	1085883a 	add	r2,r2,r2
   8b7e0:	8a000504 	addi	r8,r17,20
   8b7e4:	64c00315 	stw	r19,12(r12)
   8b7e8:	30db883a 	add	r13,r6,r3
   8b7ec:	4097883a 	add	r11,r8,r2
   8b7f0:	61c00504 	addi	r7,r12,20
   8b7f4:	0013883a 	mov	r9,zero
   8b7f8:	31000017 	ldw	r4,0(r6)
   8b7fc:	41400017 	ldw	r5,0(r8)
   8b800:	42000104 	addi	r8,r8,4
   8b804:	20bfffcc 	andi	r2,r4,65535
   8b808:	28ffffcc 	andi	r3,r5,65535
   8b80c:	10c5c83a 	sub	r2,r2,r3
   8b810:	1245883a 	add	r2,r2,r9
   8b814:	2008d43a 	srli	r4,r4,16
   8b818:	280ad43a 	srli	r5,r5,16
   8b81c:	1007d43a 	srai	r3,r2,16
   8b820:	3880000d 	sth	r2,0(r7)
   8b824:	2149c83a 	sub	r4,r4,r5
   8b828:	20c9883a 	add	r4,r4,r3
   8b82c:	3900008d 	sth	r4,2(r7)
   8b830:	31800104 	addi	r6,r6,4
   8b834:	39c00104 	addi	r7,r7,4
   8b838:	2013d43a 	srai	r9,r4,16
   8b83c:	42ffee36 	bltu	r8,r11,8b7f8 <__mdiff+0x80>
   8b840:	33400c2e 	bgeu	r6,r13,8b874 <__mdiff+0xfc>
   8b844:	30800017 	ldw	r2,0(r6)
   8b848:	31800104 	addi	r6,r6,4
   8b84c:	10ffffcc 	andi	r3,r2,65535
   8b850:	1a47883a 	add	r3,r3,r9
   8b854:	1004d43a 	srli	r2,r2,16
   8b858:	1809d43a 	srai	r4,r3,16
   8b85c:	38c0000d 	sth	r3,0(r7)
   8b860:	1105883a 	add	r2,r2,r4
   8b864:	3880008d 	sth	r2,2(r7)
   8b868:	1013d43a 	srai	r9,r2,16
   8b86c:	39c00104 	addi	r7,r7,4
   8b870:	337ff436 	bltu	r6,r13,8b844 <__mdiff+0xcc>
   8b874:	38bfff17 	ldw	r2,-4(r7)
   8b878:	38ffff04 	addi	r3,r7,-4
   8b87c:	1000041e 	bne	r2,zero,8b890 <__mdiff+0x118>
   8b880:	18ffff04 	addi	r3,r3,-4
   8b884:	18800017 	ldw	r2,0(r3)
   8b888:	52bfffc4 	addi	r10,r10,-1
   8b88c:	103ffc26 	beq	r2,zero,8b880 <__mdiff+0x108>
   8b890:	6005883a 	mov	r2,r12
   8b894:	62800415 	stw	r10,16(r12)
   8b898:	dfc00417 	ldw	ra,16(sp)
   8b89c:	dcc00317 	ldw	r19,12(sp)
   8b8a0:	dc800217 	ldw	r18,8(sp)
   8b8a4:	dc400117 	ldw	r17,4(sp)
   8b8a8:	dc000017 	ldw	r16,0(sp)
   8b8ac:	dec00504 	addi	sp,sp,20
   8b8b0:	f800283a 	ret
   8b8b4:	9009883a 	mov	r4,r18
   8b8b8:	000b883a 	mov	r5,zero
   8b8bc:	008b5400 	call	8b540 <_Balloc>
   8b8c0:	1019883a 	mov	r12,r2
   8b8c4:	00800044 	movi	r2,1
   8b8c8:	60800415 	stw	r2,16(r12)
   8b8cc:	6005883a 	mov	r2,r12
   8b8d0:	60000515 	stw	zero,20(r12)
   8b8d4:	dfc00417 	ldw	ra,16(sp)
   8b8d8:	dcc00317 	ldw	r19,12(sp)
   8b8dc:	dc800217 	ldw	r18,8(sp)
   8b8e0:	dc400117 	ldw	r17,4(sp)
   8b8e4:	dc000017 	ldw	r16,0(sp)
   8b8e8:	dec00504 	addi	sp,sp,20
   8b8ec:	f800283a 	ret
   8b8f0:	880d883a 	mov	r6,r17
   8b8f4:	04c00044 	movi	r19,1
   8b8f8:	8023883a 	mov	r17,r16
   8b8fc:	3021883a 	mov	r16,r6
   8b900:	003fac06 	br	8b7b4 <__mdiff+0x3c>

0008b904 <__lshift>:
   8b904:	defff904 	addi	sp,sp,-28
   8b908:	28800417 	ldw	r2,16(r5)
   8b90c:	dc000015 	stw	r16,0(sp)
   8b910:	3021d17a 	srai	r16,r6,5
   8b914:	28c00217 	ldw	r3,8(r5)
   8b918:	10800044 	addi	r2,r2,1
   8b91c:	dc400115 	stw	r17,4(sp)
   8b920:	80a3883a 	add	r17,r16,r2
   8b924:	dd400515 	stw	r21,20(sp)
   8b928:	dd000415 	stw	r20,16(sp)
   8b92c:	dc800215 	stw	r18,8(sp)
   8b930:	dfc00615 	stw	ra,24(sp)
   8b934:	2825883a 	mov	r18,r5
   8b938:	dcc00315 	stw	r19,12(sp)
   8b93c:	3029883a 	mov	r20,r6
   8b940:	202b883a 	mov	r21,r4
   8b944:	29400117 	ldw	r5,4(r5)
   8b948:	1c40030e 	bge	r3,r17,8b958 <__lshift+0x54>
   8b94c:	18c7883a 	add	r3,r3,r3
   8b950:	29400044 	addi	r5,r5,1
   8b954:	1c7ffd16 	blt	r3,r17,8b94c <__lshift+0x48>
   8b958:	a809883a 	mov	r4,r21
   8b95c:	008b5400 	call	8b540 <_Balloc>
   8b960:	1027883a 	mov	r19,r2
   8b964:	11400504 	addi	r5,r2,20
   8b968:	0400090e 	bge	zero,r16,8b990 <__lshift+0x8c>
   8b96c:	2805883a 	mov	r2,r5
   8b970:	0007883a 	mov	r3,zero
   8b974:	18c00044 	addi	r3,r3,1
   8b978:	10000015 	stw	zero,0(r2)
   8b97c:	10800104 	addi	r2,r2,4
   8b980:	80fffc1e 	bne	r16,r3,8b974 <__lshift+0x70>
   8b984:	8405883a 	add	r2,r16,r16
   8b988:	1085883a 	add	r2,r2,r2
   8b98c:	288b883a 	add	r5,r5,r2
   8b990:	90800417 	ldw	r2,16(r18)
   8b994:	91000504 	addi	r4,r18,20
   8b998:	a18007cc 	andi	r6,r20,31
   8b99c:	1085883a 	add	r2,r2,r2
   8b9a0:	1085883a 	add	r2,r2,r2
   8b9a4:	208f883a 	add	r7,r4,r2
   8b9a8:	30001e26 	beq	r6,zero,8ba24 <__lshift+0x120>
   8b9ac:	00800804 	movi	r2,32
   8b9b0:	1191c83a 	sub	r8,r2,r6
   8b9b4:	0007883a 	mov	r3,zero
   8b9b8:	20800017 	ldw	r2,0(r4)
   8b9bc:	1184983a 	sll	r2,r2,r6
   8b9c0:	1884b03a 	or	r2,r3,r2
   8b9c4:	28800015 	stw	r2,0(r5)
   8b9c8:	20c00017 	ldw	r3,0(r4)
   8b9cc:	21000104 	addi	r4,r4,4
   8b9d0:	29400104 	addi	r5,r5,4
   8b9d4:	1a06d83a 	srl	r3,r3,r8
   8b9d8:	21fff736 	bltu	r4,r7,8b9b8 <__lshift+0xb4>
   8b9dc:	28c00015 	stw	r3,0(r5)
   8b9e0:	18000126 	beq	r3,zero,8b9e8 <__lshift+0xe4>
   8b9e4:	8c400044 	addi	r17,r17,1
   8b9e8:	88bfffc4 	addi	r2,r17,-1
   8b9ec:	98800415 	stw	r2,16(r19)
   8b9f0:	a809883a 	mov	r4,r21
   8b9f4:	900b883a 	mov	r5,r18
   8b9f8:	008afc00 	call	8afc0 <_Bfree>
   8b9fc:	9805883a 	mov	r2,r19
   8ba00:	dfc00617 	ldw	ra,24(sp)
   8ba04:	dd400517 	ldw	r21,20(sp)
   8ba08:	dd000417 	ldw	r20,16(sp)
   8ba0c:	dcc00317 	ldw	r19,12(sp)
   8ba10:	dc800217 	ldw	r18,8(sp)
   8ba14:	dc400117 	ldw	r17,4(sp)
   8ba18:	dc000017 	ldw	r16,0(sp)
   8ba1c:	dec00704 	addi	sp,sp,28
   8ba20:	f800283a 	ret
   8ba24:	20800017 	ldw	r2,0(r4)
   8ba28:	21000104 	addi	r4,r4,4
   8ba2c:	28800015 	stw	r2,0(r5)
   8ba30:	29400104 	addi	r5,r5,4
   8ba34:	21ffec2e 	bgeu	r4,r7,8b9e8 <__lshift+0xe4>
   8ba38:	20800017 	ldw	r2,0(r4)
   8ba3c:	21000104 	addi	r4,r4,4
   8ba40:	28800015 	stw	r2,0(r5)
   8ba44:	29400104 	addi	r5,r5,4
   8ba48:	21fff636 	bltu	r4,r7,8ba24 <__lshift+0x120>
   8ba4c:	003fe606 	br	8b9e8 <__lshift+0xe4>

0008ba50 <__multiply>:
   8ba50:	defff004 	addi	sp,sp,-64
   8ba54:	dc800815 	stw	r18,32(sp)
   8ba58:	dc400715 	stw	r17,28(sp)
   8ba5c:	2c800417 	ldw	r18,16(r5)
   8ba60:	34400417 	ldw	r17,16(r6)
   8ba64:	dcc00915 	stw	r19,36(sp)
   8ba68:	dc000615 	stw	r16,24(sp)
   8ba6c:	dfc00f15 	stw	ra,60(sp)
   8ba70:	df000e15 	stw	fp,56(sp)
   8ba74:	ddc00d15 	stw	r23,52(sp)
   8ba78:	dd800c15 	stw	r22,48(sp)
   8ba7c:	dd400b15 	stw	r21,44(sp)
   8ba80:	dd000a15 	stw	r20,40(sp)
   8ba84:	2821883a 	mov	r16,r5
   8ba88:	3027883a 	mov	r19,r6
   8ba8c:	9440040e 	bge	r18,r17,8baa0 <__multiply+0x50>
   8ba90:	8825883a 	mov	r18,r17
   8ba94:	2c400417 	ldw	r17,16(r5)
   8ba98:	2827883a 	mov	r19,r5
   8ba9c:	3021883a 	mov	r16,r6
   8baa0:	80800217 	ldw	r2,8(r16)
   8baa4:	9447883a 	add	r3,r18,r17
   8baa8:	d8c00415 	stw	r3,16(sp)
   8baac:	81400117 	ldw	r5,4(r16)
   8bab0:	10c0010e 	bge	r2,r3,8bab8 <__multiply+0x68>
   8bab4:	29400044 	addi	r5,r5,1
   8bab8:	008b5400 	call	8b540 <_Balloc>
   8babc:	d8800515 	stw	r2,20(sp)
   8bac0:	d9000417 	ldw	r4,16(sp)
   8bac4:	d8c00517 	ldw	r3,20(sp)
   8bac8:	2105883a 	add	r2,r4,r4
   8bacc:	1085883a 	add	r2,r2,r2
   8bad0:	19000504 	addi	r4,r3,20
   8bad4:	2085883a 	add	r2,r4,r2
   8bad8:	d8800315 	stw	r2,12(sp)
   8badc:	2080052e 	bgeu	r4,r2,8baf4 <__multiply+0xa4>
   8bae0:	2005883a 	mov	r2,r4
   8bae4:	d8c00317 	ldw	r3,12(sp)
   8bae8:	10000015 	stw	zero,0(r2)
   8baec:	10800104 	addi	r2,r2,4
   8baf0:	10fffc36 	bltu	r2,r3,8bae4 <__multiply+0x94>
   8baf4:	8c45883a 	add	r2,r17,r17
   8baf8:	9487883a 	add	r3,r18,r18
   8bafc:	9dc00504 	addi	r23,r19,20
   8bb00:	1085883a 	add	r2,r2,r2
   8bb04:	84000504 	addi	r16,r16,20
   8bb08:	18c7883a 	add	r3,r3,r3
   8bb0c:	b885883a 	add	r2,r23,r2
   8bb10:	dc000015 	stw	r16,0(sp)
   8bb14:	d8800215 	stw	r2,8(sp)
   8bb18:	80f9883a 	add	fp,r16,r3
   8bb1c:	b880432e 	bgeu	r23,r2,8bc2c <__multiply+0x1dc>
   8bb20:	d9000115 	stw	r4,4(sp)
   8bb24:	b9000017 	ldw	r4,0(r23)
   8bb28:	253fffcc 	andi	r20,r4,65535
   8bb2c:	a0001a26 	beq	r20,zero,8bb98 <__multiply+0x148>
   8bb30:	dcc00017 	ldw	r19,0(sp)
   8bb34:	dc800117 	ldw	r18,4(sp)
   8bb38:	002b883a 	mov	r21,zero
   8bb3c:	9c400017 	ldw	r17,0(r19)
   8bb40:	94000017 	ldw	r16,0(r18)
   8bb44:	a009883a 	mov	r4,r20
   8bb48:	897fffcc 	andi	r5,r17,65535
   8bb4c:	00843d00 	call	843d0 <__mulsi3>
   8bb50:	880ad43a 	srli	r5,r17,16
   8bb54:	80ffffcc 	andi	r3,r16,65535
   8bb58:	a8c7883a 	add	r3,r21,r3
   8bb5c:	a009883a 	mov	r4,r20
   8bb60:	10e3883a 	add	r17,r2,r3
   8bb64:	8020d43a 	srli	r16,r16,16
   8bb68:	00843d00 	call	843d0 <__mulsi3>
   8bb6c:	8806d43a 	srli	r3,r17,16
   8bb70:	1405883a 	add	r2,r2,r16
   8bb74:	9cc00104 	addi	r19,r19,4
   8bb78:	1887883a 	add	r3,r3,r2
   8bb7c:	90c0008d 	sth	r3,2(r18)
   8bb80:	9440000d 	sth	r17,0(r18)
   8bb84:	182ad43a 	srli	r21,r3,16
   8bb88:	94800104 	addi	r18,r18,4
   8bb8c:	9f3feb36 	bltu	r19,fp,8bb3c <__multiply+0xec>
   8bb90:	95400015 	stw	r21,0(r18)
   8bb94:	b9000017 	ldw	r4,0(r23)
   8bb98:	202ad43a 	srli	r21,r4,16
   8bb9c:	a8001c26 	beq	r21,zero,8bc10 <__multiply+0x1c0>
   8bba0:	d9000117 	ldw	r4,4(sp)
   8bba4:	dd000017 	ldw	r20,0(sp)
   8bba8:	002d883a 	mov	r22,zero
   8bbac:	24c00017 	ldw	r19,0(r4)
   8bbb0:	2025883a 	mov	r18,r4
   8bbb4:	9823883a 	mov	r17,r19
   8bbb8:	a4000017 	ldw	r16,0(r20)
   8bbbc:	a809883a 	mov	r4,r21
   8bbc0:	a5000104 	addi	r20,r20,4
   8bbc4:	817fffcc 	andi	r5,r16,65535
   8bbc8:	00843d00 	call	843d0 <__mulsi3>
   8bbcc:	8806d43a 	srli	r3,r17,16
   8bbd0:	800ad43a 	srli	r5,r16,16
   8bbd4:	94c0000d 	sth	r19,0(r18)
   8bbd8:	b0c7883a 	add	r3,r22,r3
   8bbdc:	10e1883a 	add	r16,r2,r3
   8bbe0:	9400008d 	sth	r16,2(r18)
   8bbe4:	a809883a 	mov	r4,r21
   8bbe8:	94800104 	addi	r18,r18,4
   8bbec:	00843d00 	call	843d0 <__mulsi3>
   8bbf0:	94400017 	ldw	r17,0(r18)
   8bbf4:	8020d43a 	srli	r16,r16,16
   8bbf8:	88ffffcc 	andi	r3,r17,65535
   8bbfc:	10c5883a 	add	r2,r2,r3
   8bc00:	80a7883a 	add	r19,r16,r2
   8bc04:	982cd43a 	srli	r22,r19,16
   8bc08:	a73feb36 	bltu	r20,fp,8bbb8 <__multiply+0x168>
   8bc0c:	94c00015 	stw	r19,0(r18)
   8bc10:	d8800217 	ldw	r2,8(sp)
   8bc14:	bdc00104 	addi	r23,r23,4
   8bc18:	b880042e 	bgeu	r23,r2,8bc2c <__multiply+0x1dc>
   8bc1c:	d8c00117 	ldw	r3,4(sp)
   8bc20:	18c00104 	addi	r3,r3,4
   8bc24:	d8c00115 	stw	r3,4(sp)
   8bc28:	003fbe06 	br	8bb24 <__multiply+0xd4>
   8bc2c:	d9000417 	ldw	r4,16(sp)
   8bc30:	01000c0e 	bge	zero,r4,8bc64 <__multiply+0x214>
   8bc34:	d8c00317 	ldw	r3,12(sp)
   8bc38:	18bfff17 	ldw	r2,-4(r3)
   8bc3c:	18ffff04 	addi	r3,r3,-4
   8bc40:	10000326 	beq	r2,zero,8bc50 <__multiply+0x200>
   8bc44:	00000706 	br	8bc64 <__multiply+0x214>
   8bc48:	18800017 	ldw	r2,0(r3)
   8bc4c:	1000051e 	bne	r2,zero,8bc64 <__multiply+0x214>
   8bc50:	d9000417 	ldw	r4,16(sp)
   8bc54:	18ffff04 	addi	r3,r3,-4
   8bc58:	213fffc4 	addi	r4,r4,-1
   8bc5c:	d9000415 	stw	r4,16(sp)
   8bc60:	203ff91e 	bne	r4,zero,8bc48 <__multiply+0x1f8>
   8bc64:	d8800417 	ldw	r2,16(sp)
   8bc68:	d8c00517 	ldw	r3,20(sp)
   8bc6c:	18800415 	stw	r2,16(r3)
   8bc70:	1805883a 	mov	r2,r3
   8bc74:	dfc00f17 	ldw	ra,60(sp)
   8bc78:	df000e17 	ldw	fp,56(sp)
   8bc7c:	ddc00d17 	ldw	r23,52(sp)
   8bc80:	dd800c17 	ldw	r22,48(sp)
   8bc84:	dd400b17 	ldw	r21,44(sp)
   8bc88:	dd000a17 	ldw	r20,40(sp)
   8bc8c:	dcc00917 	ldw	r19,36(sp)
   8bc90:	dc800817 	ldw	r18,32(sp)
   8bc94:	dc400717 	ldw	r17,28(sp)
   8bc98:	dc000617 	ldw	r16,24(sp)
   8bc9c:	dec01004 	addi	sp,sp,64
   8bca0:	f800283a 	ret

0008bca4 <__i2b>:
   8bca4:	defffd04 	addi	sp,sp,-12
   8bca8:	dc000015 	stw	r16,0(sp)
   8bcac:	04000044 	movi	r16,1
   8bcb0:	dc800115 	stw	r18,4(sp)
   8bcb4:	2825883a 	mov	r18,r5
   8bcb8:	800b883a 	mov	r5,r16
   8bcbc:	dfc00215 	stw	ra,8(sp)
   8bcc0:	008b5400 	call	8b540 <_Balloc>
   8bcc4:	14000415 	stw	r16,16(r2)
   8bcc8:	14800515 	stw	r18,20(r2)
   8bccc:	dfc00217 	ldw	ra,8(sp)
   8bcd0:	dc800117 	ldw	r18,4(sp)
   8bcd4:	dc000017 	ldw	r16,0(sp)
   8bcd8:	dec00304 	addi	sp,sp,12
   8bcdc:	f800283a 	ret

0008bce0 <__multadd>:
   8bce0:	defff604 	addi	sp,sp,-40
   8bce4:	dd800615 	stw	r22,24(sp)
   8bce8:	2d800417 	ldw	r22,16(r5)
   8bcec:	df000815 	stw	fp,32(sp)
   8bcf0:	ddc00715 	stw	r23,28(sp)
   8bcf4:	dd400515 	stw	r21,20(sp)
   8bcf8:	dd000415 	stw	r20,16(sp)
   8bcfc:	dcc00315 	stw	r19,12(sp)
   8bd00:	dc800215 	stw	r18,8(sp)
   8bd04:	dfc00915 	stw	ra,36(sp)
   8bd08:	dc400115 	stw	r17,4(sp)
   8bd0c:	dc000015 	stw	r16,0(sp)
   8bd10:	282f883a 	mov	r23,r5
   8bd14:	2039883a 	mov	fp,r4
   8bd18:	302b883a 	mov	r21,r6
   8bd1c:	3829883a 	mov	r20,r7
   8bd20:	2c800504 	addi	r18,r5,20
   8bd24:	0027883a 	mov	r19,zero
   8bd28:	94400017 	ldw	r17,0(r18)
   8bd2c:	a80b883a 	mov	r5,r21
   8bd30:	9cc00044 	addi	r19,r19,1
   8bd34:	893fffcc 	andi	r4,r17,65535
   8bd38:	00843d00 	call	843d0 <__mulsi3>
   8bd3c:	8808d43a 	srli	r4,r17,16
   8bd40:	1521883a 	add	r16,r2,r20
   8bd44:	a80b883a 	mov	r5,r21
   8bd48:	00843d00 	call	843d0 <__mulsi3>
   8bd4c:	8008d43a 	srli	r4,r16,16
   8bd50:	843fffcc 	andi	r16,r16,65535
   8bd54:	1105883a 	add	r2,r2,r4
   8bd58:	1006943a 	slli	r3,r2,16
   8bd5c:	1028d43a 	srli	r20,r2,16
   8bd60:	1c07883a 	add	r3,r3,r16
   8bd64:	90c00015 	stw	r3,0(r18)
   8bd68:	94800104 	addi	r18,r18,4
   8bd6c:	9dbfee16 	blt	r19,r22,8bd28 <__multadd+0x48>
   8bd70:	a0000826 	beq	r20,zero,8bd94 <__multadd+0xb4>
   8bd74:	b8800217 	ldw	r2,8(r23)
   8bd78:	b080130e 	bge	r22,r2,8bdc8 <__multadd+0xe8>
   8bd7c:	b585883a 	add	r2,r22,r22
   8bd80:	1085883a 	add	r2,r2,r2
   8bd84:	15c5883a 	add	r2,r2,r23
   8bd88:	b0c00044 	addi	r3,r22,1
   8bd8c:	15000515 	stw	r20,20(r2)
   8bd90:	b8c00415 	stw	r3,16(r23)
   8bd94:	b805883a 	mov	r2,r23
   8bd98:	dfc00917 	ldw	ra,36(sp)
   8bd9c:	df000817 	ldw	fp,32(sp)
   8bda0:	ddc00717 	ldw	r23,28(sp)
   8bda4:	dd800617 	ldw	r22,24(sp)
   8bda8:	dd400517 	ldw	r21,20(sp)
   8bdac:	dd000417 	ldw	r20,16(sp)
   8bdb0:	dcc00317 	ldw	r19,12(sp)
   8bdb4:	dc800217 	ldw	r18,8(sp)
   8bdb8:	dc400117 	ldw	r17,4(sp)
   8bdbc:	dc000017 	ldw	r16,0(sp)
   8bdc0:	dec00a04 	addi	sp,sp,40
   8bdc4:	f800283a 	ret
   8bdc8:	b9400117 	ldw	r5,4(r23)
   8bdcc:	e009883a 	mov	r4,fp
   8bdd0:	29400044 	addi	r5,r5,1
   8bdd4:	008b5400 	call	8b540 <_Balloc>
   8bdd8:	b9800417 	ldw	r6,16(r23)
   8bddc:	b9400304 	addi	r5,r23,12
   8bde0:	11000304 	addi	r4,r2,12
   8bde4:	318d883a 	add	r6,r6,r6
   8bde8:	318d883a 	add	r6,r6,r6
   8bdec:	31800204 	addi	r6,r6,8
   8bdf0:	1023883a 	mov	r17,r2
   8bdf4:	008ae400 	call	8ae40 <memcpy>
   8bdf8:	b80b883a 	mov	r5,r23
   8bdfc:	e009883a 	mov	r4,fp
   8be00:	008afc00 	call	8afc0 <_Bfree>
   8be04:	882f883a 	mov	r23,r17
   8be08:	003fdc06 	br	8bd7c <__multadd+0x9c>

0008be0c <__pow5mult>:
   8be0c:	defffa04 	addi	sp,sp,-24
   8be10:	308000cc 	andi	r2,r6,3
   8be14:	dd000415 	stw	r20,16(sp)
   8be18:	dcc00315 	stw	r19,12(sp)
   8be1c:	dc000015 	stw	r16,0(sp)
   8be20:	dfc00515 	stw	ra,20(sp)
   8be24:	dc800215 	stw	r18,8(sp)
   8be28:	dc400115 	stw	r17,4(sp)
   8be2c:	3021883a 	mov	r16,r6
   8be30:	2027883a 	mov	r19,r4
   8be34:	2829883a 	mov	r20,r5
   8be38:	10002b1e 	bne	r2,zero,8bee8 <__pow5mult+0xdc>
   8be3c:	8025d0ba 	srai	r18,r16,2
   8be40:	90001b26 	beq	r18,zero,8beb0 <__pow5mult+0xa4>
   8be44:	9c001217 	ldw	r16,72(r19)
   8be48:	8000081e 	bne	r16,zero,8be6c <__pow5mult+0x60>
   8be4c:	00003006 	br	8bf10 <__pow5mult+0x104>
   8be50:	800b883a 	mov	r5,r16
   8be54:	800d883a 	mov	r6,r16
   8be58:	9809883a 	mov	r4,r19
   8be5c:	90001426 	beq	r18,zero,8beb0 <__pow5mult+0xa4>
   8be60:	80800017 	ldw	r2,0(r16)
   8be64:	10001b26 	beq	r2,zero,8bed4 <__pow5mult+0xc8>
   8be68:	1021883a 	mov	r16,r2
   8be6c:	9080004c 	andi	r2,r18,1
   8be70:	1005003a 	cmpeq	r2,r2,zero
   8be74:	9025d07a 	srai	r18,r18,1
   8be78:	800d883a 	mov	r6,r16
   8be7c:	9809883a 	mov	r4,r19
   8be80:	a00b883a 	mov	r5,r20
   8be84:	103ff21e 	bne	r2,zero,8be50 <__pow5mult+0x44>
   8be88:	008ba500 	call	8ba50 <__multiply>
   8be8c:	a00b883a 	mov	r5,r20
   8be90:	9809883a 	mov	r4,r19
   8be94:	1023883a 	mov	r17,r2
   8be98:	008afc00 	call	8afc0 <_Bfree>
   8be9c:	8829883a 	mov	r20,r17
   8bea0:	800b883a 	mov	r5,r16
   8bea4:	800d883a 	mov	r6,r16
   8bea8:	9809883a 	mov	r4,r19
   8beac:	903fec1e 	bne	r18,zero,8be60 <__pow5mult+0x54>
   8beb0:	a005883a 	mov	r2,r20
   8beb4:	dfc00517 	ldw	ra,20(sp)
   8beb8:	dd000417 	ldw	r20,16(sp)
   8bebc:	dcc00317 	ldw	r19,12(sp)
   8bec0:	dc800217 	ldw	r18,8(sp)
   8bec4:	dc400117 	ldw	r17,4(sp)
   8bec8:	dc000017 	ldw	r16,0(sp)
   8becc:	dec00604 	addi	sp,sp,24
   8bed0:	f800283a 	ret
   8bed4:	008ba500 	call	8ba50 <__multiply>
   8bed8:	80800015 	stw	r2,0(r16)
   8bedc:	1021883a 	mov	r16,r2
   8bee0:	10000015 	stw	zero,0(r2)
   8bee4:	003fe106 	br	8be6c <__pow5mult+0x60>
   8bee8:	1085883a 	add	r2,r2,r2
   8beec:	00c00274 	movhi	r3,9
   8bef0:	18cb8404 	addi	r3,r3,11792
   8bef4:	1085883a 	add	r2,r2,r2
   8bef8:	10c5883a 	add	r2,r2,r3
   8befc:	11bfff17 	ldw	r6,-4(r2)
   8bf00:	000f883a 	mov	r7,zero
   8bf04:	008bce00 	call	8bce0 <__multadd>
   8bf08:	1029883a 	mov	r20,r2
   8bf0c:	003fcb06 	br	8be3c <__pow5mult+0x30>
   8bf10:	9809883a 	mov	r4,r19
   8bf14:	01409c44 	movi	r5,625
   8bf18:	008bca40 	call	8bca4 <__i2b>
   8bf1c:	98801215 	stw	r2,72(r19)
   8bf20:	1021883a 	mov	r16,r2
   8bf24:	10000015 	stw	zero,0(r2)
   8bf28:	003fd006 	br	8be6c <__pow5mult+0x60>

0008bf2c <__s2b>:
   8bf2c:	defff904 	addi	sp,sp,-28
   8bf30:	dcc00315 	stw	r19,12(sp)
   8bf34:	dc800215 	stw	r18,8(sp)
   8bf38:	2827883a 	mov	r19,r5
   8bf3c:	2025883a 	mov	r18,r4
   8bf40:	01400244 	movi	r5,9
   8bf44:	39000204 	addi	r4,r7,8
   8bf48:	dd000415 	stw	r20,16(sp)
   8bf4c:	dc400115 	stw	r17,4(sp)
   8bf50:	dfc00615 	stw	ra,24(sp)
   8bf54:	dd400515 	stw	r21,20(sp)
   8bf58:	dc000015 	stw	r16,0(sp)
   8bf5c:	3829883a 	mov	r20,r7
   8bf60:	3023883a 	mov	r17,r6
   8bf64:	00843000 	call	84300 <__divsi3>
   8bf68:	00c00044 	movi	r3,1
   8bf6c:	1880350e 	bge	r3,r2,8c044 <__s2b+0x118>
   8bf70:	000b883a 	mov	r5,zero
   8bf74:	18c7883a 	add	r3,r3,r3
   8bf78:	29400044 	addi	r5,r5,1
   8bf7c:	18bffd16 	blt	r3,r2,8bf74 <__s2b+0x48>
   8bf80:	9009883a 	mov	r4,r18
   8bf84:	008b5400 	call	8b540 <_Balloc>
   8bf88:	1011883a 	mov	r8,r2
   8bf8c:	d8800717 	ldw	r2,28(sp)
   8bf90:	00c00044 	movi	r3,1
   8bf94:	01800244 	movi	r6,9
   8bf98:	40800515 	stw	r2,20(r8)
   8bf9c:	40c00415 	stw	r3,16(r8)
   8bfa0:	3440260e 	bge	r6,r17,8c03c <__s2b+0x110>
   8bfa4:	3021883a 	mov	r16,r6
   8bfa8:	99ab883a 	add	r21,r19,r6
   8bfac:	9c05883a 	add	r2,r19,r16
   8bfb0:	11c00007 	ldb	r7,0(r2)
   8bfb4:	400b883a 	mov	r5,r8
   8bfb8:	9009883a 	mov	r4,r18
   8bfbc:	39fff404 	addi	r7,r7,-48
   8bfc0:	01800284 	movi	r6,10
   8bfc4:	008bce00 	call	8bce0 <__multadd>
   8bfc8:	84000044 	addi	r16,r16,1
   8bfcc:	1011883a 	mov	r8,r2
   8bfd0:	8c3ff61e 	bne	r17,r16,8bfac <__s2b+0x80>
   8bfd4:	ac45883a 	add	r2,r21,r17
   8bfd8:	117ffe04 	addi	r5,r2,-8
   8bfdc:	880d883a 	mov	r6,r17
   8bfe0:	35000c0e 	bge	r6,r20,8c014 <__s2b+0xe8>
   8bfe4:	a185c83a 	sub	r2,r20,r6
   8bfe8:	2821883a 	mov	r16,r5
   8bfec:	28a3883a 	add	r17,r5,r2
   8bff0:	81c00007 	ldb	r7,0(r16)
   8bff4:	400b883a 	mov	r5,r8
   8bff8:	9009883a 	mov	r4,r18
   8bffc:	39fff404 	addi	r7,r7,-48
   8c000:	01800284 	movi	r6,10
   8c004:	008bce00 	call	8bce0 <__multadd>
   8c008:	84000044 	addi	r16,r16,1
   8c00c:	1011883a 	mov	r8,r2
   8c010:	847ff71e 	bne	r16,r17,8bff0 <__s2b+0xc4>
   8c014:	4005883a 	mov	r2,r8
   8c018:	dfc00617 	ldw	ra,24(sp)
   8c01c:	dd400517 	ldw	r21,20(sp)
   8c020:	dd000417 	ldw	r20,16(sp)
   8c024:	dcc00317 	ldw	r19,12(sp)
   8c028:	dc800217 	ldw	r18,8(sp)
   8c02c:	dc400117 	ldw	r17,4(sp)
   8c030:	dc000017 	ldw	r16,0(sp)
   8c034:	dec00704 	addi	sp,sp,28
   8c038:	f800283a 	ret
   8c03c:	99400284 	addi	r5,r19,10
   8c040:	003fe706 	br	8bfe0 <__s2b+0xb4>
   8c044:	000b883a 	mov	r5,zero
   8c048:	003fcd06 	br	8bf80 <__s2b+0x54>

0008c04c <_read_r>:
   8c04c:	defffd04 	addi	sp,sp,-12
   8c050:	dc000015 	stw	r16,0(sp)
   8c054:	04000274 	movhi	r16,9
   8c058:	841a3a04 	addi	r16,r16,26856
   8c05c:	dc400115 	stw	r17,4(sp)
   8c060:	80000015 	stw	zero,0(r16)
   8c064:	2023883a 	mov	r17,r4
   8c068:	2809883a 	mov	r4,r5
   8c06c:	300b883a 	mov	r5,r6
   8c070:	380d883a 	mov	r6,r7
   8c074:	dfc00215 	stw	ra,8(sp)
   8c078:	008e46c0 	call	8e46c <read>
   8c07c:	1007883a 	mov	r3,r2
   8c080:	00bfffc4 	movi	r2,-1
   8c084:	18800626 	beq	r3,r2,8c0a0 <_read_r+0x54>
   8c088:	1805883a 	mov	r2,r3
   8c08c:	dfc00217 	ldw	ra,8(sp)
   8c090:	dc400117 	ldw	r17,4(sp)
   8c094:	dc000017 	ldw	r16,0(sp)
   8c098:	dec00304 	addi	sp,sp,12
   8c09c:	f800283a 	ret
   8c0a0:	80800017 	ldw	r2,0(r16)
   8c0a4:	103ff826 	beq	r2,zero,8c088 <_read_r+0x3c>
   8c0a8:	88800015 	stw	r2,0(r17)
   8c0ac:	1805883a 	mov	r2,r3
   8c0b0:	dfc00217 	ldw	ra,8(sp)
   8c0b4:	dc400117 	ldw	r17,4(sp)
   8c0b8:	dc000017 	ldw	r16,0(sp)
   8c0bc:	dec00304 	addi	sp,sp,12
   8c0c0:	f800283a 	ret

0008c0c4 <_realloc_r>:
   8c0c4:	defff404 	addi	sp,sp,-48
   8c0c8:	dd800815 	stw	r22,32(sp)
   8c0cc:	dc800415 	stw	r18,16(sp)
   8c0d0:	dc400315 	stw	r17,12(sp)
   8c0d4:	dfc00b15 	stw	ra,44(sp)
   8c0d8:	df000a15 	stw	fp,40(sp)
   8c0dc:	ddc00915 	stw	r23,36(sp)
   8c0e0:	dd400715 	stw	r21,28(sp)
   8c0e4:	dd000615 	stw	r20,24(sp)
   8c0e8:	dcc00515 	stw	r19,20(sp)
   8c0ec:	dc000215 	stw	r16,8(sp)
   8c0f0:	2825883a 	mov	r18,r5
   8c0f4:	3023883a 	mov	r17,r6
   8c0f8:	202d883a 	mov	r22,r4
   8c0fc:	2800c926 	beq	r5,zero,8c424 <_realloc_r+0x360>
   8c100:	008deb00 	call	8deb0 <__malloc_lock>
   8c104:	943ffe04 	addi	r16,r18,-8
   8c108:	88c002c4 	addi	r3,r17,11
   8c10c:	00800584 	movi	r2,22
   8c110:	82000117 	ldw	r8,4(r16)
   8c114:	10c01b2e 	bgeu	r2,r3,8c184 <_realloc_r+0xc0>
   8c118:	00bffe04 	movi	r2,-8
   8c11c:	188e703a 	and	r7,r3,r2
   8c120:	3839883a 	mov	fp,r7
   8c124:	38001a16 	blt	r7,zero,8c190 <_realloc_r+0xcc>
   8c128:	e4401936 	bltu	fp,r17,8c190 <_realloc_r+0xcc>
   8c12c:	013fff04 	movi	r4,-4
   8c130:	4126703a 	and	r19,r8,r4
   8c134:	99c02616 	blt	r19,r7,8c1d0 <_realloc_r+0x10c>
   8c138:	802b883a 	mov	r21,r16
   8c13c:	9829883a 	mov	r20,r19
   8c140:	84000204 	addi	r16,r16,8
   8c144:	a80f883a 	mov	r7,r21
   8c148:	a70dc83a 	sub	r6,r20,fp
   8c14c:	008003c4 	movi	r2,15
   8c150:	1180c136 	bltu	r2,r6,8c458 <_realloc_r+0x394>
   8c154:	38800117 	ldw	r2,4(r7)
   8c158:	a549883a 	add	r4,r20,r21
   8c15c:	1080004c 	andi	r2,r2,1
   8c160:	a084b03a 	or	r2,r20,r2
   8c164:	38800115 	stw	r2,4(r7)
   8c168:	20c00117 	ldw	r3,4(r4)
   8c16c:	18c00054 	ori	r3,r3,1
   8c170:	20c00115 	stw	r3,4(r4)
   8c174:	b009883a 	mov	r4,r22
   8c178:	008ded00 	call	8ded0 <__malloc_unlock>
   8c17c:	8023883a 	mov	r17,r16
   8c180:	00000606 	br	8c19c <_realloc_r+0xd8>
   8c184:	01c00404 	movi	r7,16
   8c188:	3839883a 	mov	fp,r7
   8c18c:	e47fe72e 	bgeu	fp,r17,8c12c <_realloc_r+0x68>
   8c190:	00800304 	movi	r2,12
   8c194:	0023883a 	mov	r17,zero
   8c198:	b0800015 	stw	r2,0(r22)
   8c19c:	8805883a 	mov	r2,r17
   8c1a0:	dfc00b17 	ldw	ra,44(sp)
   8c1a4:	df000a17 	ldw	fp,40(sp)
   8c1a8:	ddc00917 	ldw	r23,36(sp)
   8c1ac:	dd800817 	ldw	r22,32(sp)
   8c1b0:	dd400717 	ldw	r21,28(sp)
   8c1b4:	dd000617 	ldw	r20,24(sp)
   8c1b8:	dcc00517 	ldw	r19,20(sp)
   8c1bc:	dc800417 	ldw	r18,16(sp)
   8c1c0:	dc400317 	ldw	r17,12(sp)
   8c1c4:	dc000217 	ldw	r16,8(sp)
   8c1c8:	dec00c04 	addi	sp,sp,48
   8c1cc:	f800283a 	ret
   8c1d0:	00800274 	movhi	r2,9
   8c1d4:	108d4404 	addi	r2,r2,13584
   8c1d8:	12400217 	ldw	r9,8(r2)
   8c1dc:	84cd883a 	add	r6,r16,r19
   8c1e0:	802b883a 	mov	r21,r16
   8c1e4:	3240b926 	beq	r6,r9,8c4cc <_realloc_r+0x408>
   8c1e8:	31400117 	ldw	r5,4(r6)
   8c1ec:	00bfff84 	movi	r2,-2
   8c1f0:	2884703a 	and	r2,r5,r2
   8c1f4:	1185883a 	add	r2,r2,r6
   8c1f8:	10c00117 	ldw	r3,4(r2)
   8c1fc:	18c0004c 	andi	r3,r3,1
   8c200:	1807003a 	cmpeq	r3,r3,zero
   8c204:	1800a326 	beq	r3,zero,8c494 <_realloc_r+0x3d0>
   8c208:	2908703a 	and	r4,r5,r4
   8c20c:	9929883a 	add	r20,r19,r4
   8c210:	a1c0a30e 	bge	r20,r7,8c4a0 <_realloc_r+0x3dc>
   8c214:	4080004c 	andi	r2,r8,1
   8c218:	1000551e 	bne	r2,zero,8c370 <_realloc_r+0x2ac>
   8c21c:	80800017 	ldw	r2,0(r16)
   8c220:	80afc83a 	sub	r23,r16,r2
   8c224:	b8c00117 	ldw	r3,4(r23)
   8c228:	00bfff04 	movi	r2,-4
   8c22c:	1884703a 	and	r2,r3,r2
   8c230:	30002e26 	beq	r6,zero,8c2ec <_realloc_r+0x228>
   8c234:	3240b926 	beq	r6,r9,8c51c <_realloc_r+0x458>
   8c238:	98a9883a 	add	r20,r19,r2
   8c23c:	2509883a 	add	r4,r4,r20
   8c240:	d9000015 	stw	r4,0(sp)
   8c244:	21c02a16 	blt	r4,r7,8c2f0 <_realloc_r+0x22c>
   8c248:	30800317 	ldw	r2,12(r6)
   8c24c:	30c00217 	ldw	r3,8(r6)
   8c250:	01400904 	movi	r5,36
   8c254:	99bfff04 	addi	r6,r19,-4
   8c258:	18800315 	stw	r2,12(r3)
   8c25c:	10c00215 	stw	r3,8(r2)
   8c260:	b9000317 	ldw	r4,12(r23)
   8c264:	b8800217 	ldw	r2,8(r23)
   8c268:	b82b883a 	mov	r21,r23
   8c26c:	bc000204 	addi	r16,r23,8
   8c270:	20800215 	stw	r2,8(r4)
   8c274:	11000315 	stw	r4,12(r2)
   8c278:	2980e436 	bltu	r5,r6,8c60c <_realloc_r+0x548>
   8c27c:	008004c4 	movi	r2,19
   8c280:	9009883a 	mov	r4,r18
   8c284:	8011883a 	mov	r8,r16
   8c288:	11800f2e 	bgeu	r2,r6,8c2c8 <_realloc_r+0x204>
   8c28c:	90800017 	ldw	r2,0(r18)
   8c290:	ba000404 	addi	r8,r23,16
   8c294:	91000204 	addi	r4,r18,8
   8c298:	b8800215 	stw	r2,8(r23)
   8c29c:	90c00117 	ldw	r3,4(r18)
   8c2a0:	008006c4 	movi	r2,27
   8c2a4:	b8c00315 	stw	r3,12(r23)
   8c2a8:	1180072e 	bgeu	r2,r6,8c2c8 <_realloc_r+0x204>
   8c2ac:	90c00217 	ldw	r3,8(r18)
   8c2b0:	ba000604 	addi	r8,r23,24
   8c2b4:	91000404 	addi	r4,r18,16
   8c2b8:	b8c00415 	stw	r3,16(r23)
   8c2bc:	90800317 	ldw	r2,12(r18)
   8c2c0:	b8800515 	stw	r2,20(r23)
   8c2c4:	3140e726 	beq	r6,r5,8c664 <_realloc_r+0x5a0>
   8c2c8:	20800017 	ldw	r2,0(r4)
   8c2cc:	dd000017 	ldw	r20,0(sp)
   8c2d0:	b80f883a 	mov	r7,r23
   8c2d4:	40800015 	stw	r2,0(r8)
   8c2d8:	20c00117 	ldw	r3,4(r4)
   8c2dc:	40c00115 	stw	r3,4(r8)
   8c2e0:	20800217 	ldw	r2,8(r4)
   8c2e4:	40800215 	stw	r2,8(r8)
   8c2e8:	003f9706 	br	8c148 <_realloc_r+0x84>
   8c2ec:	98a9883a 	add	r20,r19,r2
   8c2f0:	a1c01f16 	blt	r20,r7,8c370 <_realloc_r+0x2ac>
   8c2f4:	b8c00317 	ldw	r3,12(r23)
   8c2f8:	b8800217 	ldw	r2,8(r23)
   8c2fc:	99bfff04 	addi	r6,r19,-4
   8c300:	01400904 	movi	r5,36
   8c304:	b82b883a 	mov	r21,r23
   8c308:	18800215 	stw	r2,8(r3)
   8c30c:	10c00315 	stw	r3,12(r2)
   8c310:	bc000204 	addi	r16,r23,8
   8c314:	2980c336 	bltu	r5,r6,8c624 <_realloc_r+0x560>
   8c318:	008004c4 	movi	r2,19
   8c31c:	9009883a 	mov	r4,r18
   8c320:	8011883a 	mov	r8,r16
   8c324:	11800f2e 	bgeu	r2,r6,8c364 <_realloc_r+0x2a0>
   8c328:	90800017 	ldw	r2,0(r18)
   8c32c:	ba000404 	addi	r8,r23,16
   8c330:	91000204 	addi	r4,r18,8
   8c334:	b8800215 	stw	r2,8(r23)
   8c338:	90c00117 	ldw	r3,4(r18)
   8c33c:	008006c4 	movi	r2,27
   8c340:	b8c00315 	stw	r3,12(r23)
   8c344:	1180072e 	bgeu	r2,r6,8c364 <_realloc_r+0x2a0>
   8c348:	90c00217 	ldw	r3,8(r18)
   8c34c:	ba000604 	addi	r8,r23,24
   8c350:	91000404 	addi	r4,r18,16
   8c354:	b8c00415 	stw	r3,16(r23)
   8c358:	90800317 	ldw	r2,12(r18)
   8c35c:	b8800515 	stw	r2,20(r23)
   8c360:	3140c726 	beq	r6,r5,8c680 <_realloc_r+0x5bc>
   8c364:	20800017 	ldw	r2,0(r4)
   8c368:	b80f883a 	mov	r7,r23
   8c36c:	003fd906 	br	8c2d4 <_realloc_r+0x210>
   8c370:	880b883a 	mov	r5,r17
   8c374:	b009883a 	mov	r4,r22
   8c378:	0085f8c0 	call	85f8c <_malloc_r>
   8c37c:	1023883a 	mov	r17,r2
   8c380:	10002526 	beq	r2,zero,8c418 <_realloc_r+0x354>
   8c384:	80800117 	ldw	r2,4(r16)
   8c388:	00ffff84 	movi	r3,-2
   8c38c:	893ffe04 	addi	r4,r17,-8
   8c390:	10c4703a 	and	r2,r2,r3
   8c394:	8085883a 	add	r2,r16,r2
   8c398:	20809526 	beq	r4,r2,8c5f0 <_realloc_r+0x52c>
   8c39c:	99bfff04 	addi	r6,r19,-4
   8c3a0:	01c00904 	movi	r7,36
   8c3a4:	39804536 	bltu	r7,r6,8c4bc <_realloc_r+0x3f8>
   8c3a8:	008004c4 	movi	r2,19
   8c3ac:	9009883a 	mov	r4,r18
   8c3b0:	880b883a 	mov	r5,r17
   8c3b4:	11800f2e 	bgeu	r2,r6,8c3f4 <_realloc_r+0x330>
   8c3b8:	90800017 	ldw	r2,0(r18)
   8c3bc:	89400204 	addi	r5,r17,8
   8c3c0:	91000204 	addi	r4,r18,8
   8c3c4:	88800015 	stw	r2,0(r17)
   8c3c8:	90c00117 	ldw	r3,4(r18)
   8c3cc:	008006c4 	movi	r2,27
   8c3d0:	88c00115 	stw	r3,4(r17)
   8c3d4:	1180072e 	bgeu	r2,r6,8c3f4 <_realloc_r+0x330>
   8c3d8:	90c00217 	ldw	r3,8(r18)
   8c3dc:	89400404 	addi	r5,r17,16
   8c3e0:	91000404 	addi	r4,r18,16
   8c3e4:	88c00215 	stw	r3,8(r17)
   8c3e8:	90800317 	ldw	r2,12(r18)
   8c3ec:	88800315 	stw	r2,12(r17)
   8c3f0:	31c09126 	beq	r6,r7,8c638 <_realloc_r+0x574>
   8c3f4:	20800017 	ldw	r2,0(r4)
   8c3f8:	28800015 	stw	r2,0(r5)
   8c3fc:	20c00117 	ldw	r3,4(r4)
   8c400:	28c00115 	stw	r3,4(r5)
   8c404:	20800217 	ldw	r2,8(r4)
   8c408:	28800215 	stw	r2,8(r5)
   8c40c:	900b883a 	mov	r5,r18
   8c410:	b009883a 	mov	r4,r22
   8c414:	00853a40 	call	853a4 <_free_r>
   8c418:	b009883a 	mov	r4,r22
   8c41c:	008ded00 	call	8ded0 <__malloc_unlock>
   8c420:	003f5e06 	br	8c19c <_realloc_r+0xd8>
   8c424:	300b883a 	mov	r5,r6
   8c428:	dfc00b17 	ldw	ra,44(sp)
   8c42c:	df000a17 	ldw	fp,40(sp)
   8c430:	ddc00917 	ldw	r23,36(sp)
   8c434:	dd800817 	ldw	r22,32(sp)
   8c438:	dd400717 	ldw	r21,28(sp)
   8c43c:	dd000617 	ldw	r20,24(sp)
   8c440:	dcc00517 	ldw	r19,20(sp)
   8c444:	dc800417 	ldw	r18,16(sp)
   8c448:	dc400317 	ldw	r17,12(sp)
   8c44c:	dc000217 	ldw	r16,8(sp)
   8c450:	dec00c04 	addi	sp,sp,48
   8c454:	0085f8c1 	jmpi	85f8c <_malloc_r>
   8c458:	38800117 	ldw	r2,4(r7)
   8c45c:	e54b883a 	add	r5,fp,r21
   8c460:	31000054 	ori	r4,r6,1
   8c464:	1080004c 	andi	r2,r2,1
   8c468:	1704b03a 	or	r2,r2,fp
   8c46c:	38800115 	stw	r2,4(r7)
   8c470:	29000115 	stw	r4,4(r5)
   8c474:	2987883a 	add	r3,r5,r6
   8c478:	18800117 	ldw	r2,4(r3)
   8c47c:	29400204 	addi	r5,r5,8
   8c480:	b009883a 	mov	r4,r22
   8c484:	10800054 	ori	r2,r2,1
   8c488:	18800115 	stw	r2,4(r3)
   8c48c:	00853a40 	call	853a4 <_free_r>
   8c490:	003f3806 	br	8c174 <_realloc_r+0xb0>
   8c494:	000d883a 	mov	r6,zero
   8c498:	0009883a 	mov	r4,zero
   8c49c:	003f5d06 	br	8c214 <_realloc_r+0x150>
   8c4a0:	30c00217 	ldw	r3,8(r6)
   8c4a4:	30800317 	ldw	r2,12(r6)
   8c4a8:	800f883a 	mov	r7,r16
   8c4ac:	84000204 	addi	r16,r16,8
   8c4b0:	10c00215 	stw	r3,8(r2)
   8c4b4:	18800315 	stw	r2,12(r3)
   8c4b8:	003f2306 	br	8c148 <_realloc_r+0x84>
   8c4bc:	8809883a 	mov	r4,r17
   8c4c0:	900b883a 	mov	r5,r18
   8c4c4:	008aee00 	call	8aee0 <memmove>
   8c4c8:	003fd006 	br	8c40c <_realloc_r+0x348>
   8c4cc:	30800117 	ldw	r2,4(r6)
   8c4d0:	e0c00404 	addi	r3,fp,16
   8c4d4:	1108703a 	and	r4,r2,r4
   8c4d8:	9905883a 	add	r2,r19,r4
   8c4dc:	10ff4d16 	blt	r2,r3,8c214 <_realloc_r+0x150>
   8c4e0:	1705c83a 	sub	r2,r2,fp
   8c4e4:	870b883a 	add	r5,r16,fp
   8c4e8:	10800054 	ori	r2,r2,1
   8c4ec:	28800115 	stw	r2,4(r5)
   8c4f0:	80c00117 	ldw	r3,4(r16)
   8c4f4:	00800274 	movhi	r2,9
   8c4f8:	108d4404 	addi	r2,r2,13584
   8c4fc:	b009883a 	mov	r4,r22
   8c500:	18c0004c 	andi	r3,r3,1
   8c504:	e0c6b03a 	or	r3,fp,r3
   8c508:	11400215 	stw	r5,8(r2)
   8c50c:	80c00115 	stw	r3,4(r16)
   8c510:	008ded00 	call	8ded0 <__malloc_unlock>
   8c514:	84400204 	addi	r17,r16,8
   8c518:	003f2006 	br	8c19c <_realloc_r+0xd8>
   8c51c:	98a9883a 	add	r20,r19,r2
   8c520:	2509883a 	add	r4,r4,r20
   8c524:	e0800404 	addi	r2,fp,16
   8c528:	d9000115 	stw	r4,4(sp)
   8c52c:	20bf7016 	blt	r4,r2,8c2f0 <_realloc_r+0x22c>
   8c530:	b8c00317 	ldw	r3,12(r23)
   8c534:	b8800217 	ldw	r2,8(r23)
   8c538:	99bfff04 	addi	r6,r19,-4
   8c53c:	01400904 	movi	r5,36
   8c540:	18800215 	stw	r2,8(r3)
   8c544:	10c00315 	stw	r3,12(r2)
   8c548:	bc400204 	addi	r17,r23,8
   8c54c:	29804136 	bltu	r5,r6,8c654 <_realloc_r+0x590>
   8c550:	008004c4 	movi	r2,19
   8c554:	9009883a 	mov	r4,r18
   8c558:	880f883a 	mov	r7,r17
   8c55c:	11800f2e 	bgeu	r2,r6,8c59c <_realloc_r+0x4d8>
   8c560:	90800017 	ldw	r2,0(r18)
   8c564:	b9c00404 	addi	r7,r23,16
   8c568:	91000204 	addi	r4,r18,8
   8c56c:	b8800215 	stw	r2,8(r23)
   8c570:	90c00117 	ldw	r3,4(r18)
   8c574:	008006c4 	movi	r2,27
   8c578:	b8c00315 	stw	r3,12(r23)
   8c57c:	1180072e 	bgeu	r2,r6,8c59c <_realloc_r+0x4d8>
   8c580:	90c00217 	ldw	r3,8(r18)
   8c584:	b9c00604 	addi	r7,r23,24
   8c588:	91000404 	addi	r4,r18,16
   8c58c:	b8c00415 	stw	r3,16(r23)
   8c590:	90800317 	ldw	r2,12(r18)
   8c594:	b8800515 	stw	r2,20(r23)
   8c598:	31404026 	beq	r6,r5,8c69c <_realloc_r+0x5d8>
   8c59c:	20800017 	ldw	r2,0(r4)
   8c5a0:	38800015 	stw	r2,0(r7)
   8c5a4:	20c00117 	ldw	r3,4(r4)
   8c5a8:	38c00115 	stw	r3,4(r7)
   8c5ac:	20800217 	ldw	r2,8(r4)
   8c5b0:	38800215 	stw	r2,8(r7)
   8c5b4:	d8c00117 	ldw	r3,4(sp)
   8c5b8:	bf0b883a 	add	r5,r23,fp
   8c5bc:	b009883a 	mov	r4,r22
   8c5c0:	1f05c83a 	sub	r2,r3,fp
   8c5c4:	10800054 	ori	r2,r2,1
   8c5c8:	28800115 	stw	r2,4(r5)
   8c5cc:	b8c00117 	ldw	r3,4(r23)
   8c5d0:	00800274 	movhi	r2,9
   8c5d4:	108d4404 	addi	r2,r2,13584
   8c5d8:	11400215 	stw	r5,8(r2)
   8c5dc:	18c0004c 	andi	r3,r3,1
   8c5e0:	e0c6b03a 	or	r3,fp,r3
   8c5e4:	b8c00115 	stw	r3,4(r23)
   8c5e8:	008ded00 	call	8ded0 <__malloc_unlock>
   8c5ec:	003eeb06 	br	8c19c <_realloc_r+0xd8>
   8c5f0:	20800117 	ldw	r2,4(r4)
   8c5f4:	00ffff04 	movi	r3,-4
   8c5f8:	800f883a 	mov	r7,r16
   8c5fc:	10c4703a 	and	r2,r2,r3
   8c600:	98a9883a 	add	r20,r19,r2
   8c604:	84000204 	addi	r16,r16,8
   8c608:	003ecf06 	br	8c148 <_realloc_r+0x84>
   8c60c:	900b883a 	mov	r5,r18
   8c610:	8009883a 	mov	r4,r16
   8c614:	008aee00 	call	8aee0 <memmove>
   8c618:	dd000017 	ldw	r20,0(sp)
   8c61c:	b80f883a 	mov	r7,r23
   8c620:	003ec906 	br	8c148 <_realloc_r+0x84>
   8c624:	900b883a 	mov	r5,r18
   8c628:	8009883a 	mov	r4,r16
   8c62c:	008aee00 	call	8aee0 <memmove>
   8c630:	b80f883a 	mov	r7,r23
   8c634:	003ec406 	br	8c148 <_realloc_r+0x84>
   8c638:	90c00417 	ldw	r3,16(r18)
   8c63c:	89400604 	addi	r5,r17,24
   8c640:	91000604 	addi	r4,r18,24
   8c644:	88c00415 	stw	r3,16(r17)
   8c648:	90800517 	ldw	r2,20(r18)
   8c64c:	88800515 	stw	r2,20(r17)
   8c650:	003f6806 	br	8c3f4 <_realloc_r+0x330>
   8c654:	900b883a 	mov	r5,r18
   8c658:	8809883a 	mov	r4,r17
   8c65c:	008aee00 	call	8aee0 <memmove>
   8c660:	003fd406 	br	8c5b4 <_realloc_r+0x4f0>
   8c664:	90c00417 	ldw	r3,16(r18)
   8c668:	91000604 	addi	r4,r18,24
   8c66c:	ba000804 	addi	r8,r23,32
   8c670:	b8c00615 	stw	r3,24(r23)
   8c674:	90800517 	ldw	r2,20(r18)
   8c678:	b8800715 	stw	r2,28(r23)
   8c67c:	003f1206 	br	8c2c8 <_realloc_r+0x204>
   8c680:	90c00417 	ldw	r3,16(r18)
   8c684:	91000604 	addi	r4,r18,24
   8c688:	ba000804 	addi	r8,r23,32
   8c68c:	b8c00615 	stw	r3,24(r23)
   8c690:	90800517 	ldw	r2,20(r18)
   8c694:	b8800715 	stw	r2,28(r23)
   8c698:	003f3206 	br	8c364 <_realloc_r+0x2a0>
   8c69c:	90c00417 	ldw	r3,16(r18)
   8c6a0:	91000604 	addi	r4,r18,24
   8c6a4:	b9c00804 	addi	r7,r23,32
   8c6a8:	b8c00615 	stw	r3,24(r23)
   8c6ac:	90800517 	ldw	r2,20(r18)
   8c6b0:	b8800715 	stw	r2,28(r23)
   8c6b4:	003fb906 	br	8c59c <_realloc_r+0x4d8>

0008c6b8 <__isinfd>:
   8c6b8:	200d883a 	mov	r6,r4
   8c6bc:	0109c83a 	sub	r4,zero,r4
   8c6c0:	2188b03a 	or	r4,r4,r6
   8c6c4:	2008d7fa 	srli	r4,r4,31
   8c6c8:	00a00034 	movhi	r2,32768
   8c6cc:	10bfffc4 	addi	r2,r2,-1
   8c6d0:	1144703a 	and	r2,r2,r5
   8c6d4:	2088b03a 	or	r4,r4,r2
   8c6d8:	009ffc34 	movhi	r2,32752
   8c6dc:	1105c83a 	sub	r2,r2,r4
   8c6e0:	0087c83a 	sub	r3,zero,r2
   8c6e4:	10c4b03a 	or	r2,r2,r3
   8c6e8:	1004d7fa 	srli	r2,r2,31
   8c6ec:	00c00044 	movi	r3,1
   8c6f0:	1885c83a 	sub	r2,r3,r2
   8c6f4:	f800283a 	ret

0008c6f8 <__isnand>:
   8c6f8:	200d883a 	mov	r6,r4
   8c6fc:	0109c83a 	sub	r4,zero,r4
   8c700:	2188b03a 	or	r4,r4,r6
   8c704:	2008d7fa 	srli	r4,r4,31
   8c708:	00a00034 	movhi	r2,32768
   8c70c:	10bfffc4 	addi	r2,r2,-1
   8c710:	1144703a 	and	r2,r2,r5
   8c714:	2088b03a 	or	r4,r4,r2
   8c718:	009ffc34 	movhi	r2,32752
   8c71c:	1105c83a 	sub	r2,r2,r4
   8c720:	1004d7fa 	srli	r2,r2,31
   8c724:	f800283a 	ret

0008c728 <strcmp>:
   8c728:	2144b03a 	or	r2,r4,r5
   8c72c:	108000cc 	andi	r2,r2,3
   8c730:	10001d1e 	bne	r2,zero,8c7a8 <strcmp+0x80>
   8c734:	200f883a 	mov	r7,r4
   8c738:	28800017 	ldw	r2,0(r5)
   8c73c:	21000017 	ldw	r4,0(r4)
   8c740:	280d883a 	mov	r6,r5
   8c744:	2080161e 	bne	r4,r2,8c7a0 <strcmp+0x78>
   8c748:	023fbff4 	movhi	r8,65279
   8c74c:	423fbfc4 	addi	r8,r8,-257
   8c750:	2207883a 	add	r3,r4,r8
   8c754:	01602074 	movhi	r5,32897
   8c758:	29602004 	addi	r5,r5,-32640
   8c75c:	1946703a 	and	r3,r3,r5
   8c760:	0104303a 	nor	r2,zero,r4
   8c764:	10c4703a 	and	r2,r2,r3
   8c768:	10001c1e 	bne	r2,zero,8c7dc <strcmp+0xb4>
   8c76c:	4013883a 	mov	r9,r8
   8c770:	2811883a 	mov	r8,r5
   8c774:	00000106 	br	8c77c <strcmp+0x54>
   8c778:	1800181e 	bne	r3,zero,8c7dc <strcmp+0xb4>
   8c77c:	39c00104 	addi	r7,r7,4
   8c780:	39000017 	ldw	r4,0(r7)
   8c784:	31800104 	addi	r6,r6,4
   8c788:	31400017 	ldw	r5,0(r6)
   8c78c:	2245883a 	add	r2,r4,r9
   8c790:	1204703a 	and	r2,r2,r8
   8c794:	0106303a 	nor	r3,zero,r4
   8c798:	1886703a 	and	r3,r3,r2
   8c79c:	217ff626 	beq	r4,r5,8c778 <strcmp+0x50>
   8c7a0:	3809883a 	mov	r4,r7
   8c7a4:	300b883a 	mov	r5,r6
   8c7a8:	20c00007 	ldb	r3,0(r4)
   8c7ac:	1800051e 	bne	r3,zero,8c7c4 <strcmp+0x9c>
   8c7b0:	00000606 	br	8c7cc <strcmp+0xa4>
   8c7b4:	21000044 	addi	r4,r4,1
   8c7b8:	20c00007 	ldb	r3,0(r4)
   8c7bc:	29400044 	addi	r5,r5,1
   8c7c0:	18000226 	beq	r3,zero,8c7cc <strcmp+0xa4>
   8c7c4:	28800007 	ldb	r2,0(r5)
   8c7c8:	18bffa26 	beq	r3,r2,8c7b4 <strcmp+0x8c>
   8c7cc:	20c00003 	ldbu	r3,0(r4)
   8c7d0:	28800003 	ldbu	r2,0(r5)
   8c7d4:	1885c83a 	sub	r2,r3,r2
   8c7d8:	f800283a 	ret
   8c7dc:	0005883a 	mov	r2,zero
   8c7e0:	f800283a 	ret

0008c7e4 <_calloc_r>:
   8c7e4:	defffe04 	addi	sp,sp,-8
   8c7e8:	dc400015 	stw	r17,0(sp)
   8c7ec:	2023883a 	mov	r17,r4
   8c7f0:	2809883a 	mov	r4,r5
   8c7f4:	300b883a 	mov	r5,r6
   8c7f8:	dfc00115 	stw	ra,4(sp)
   8c7fc:	00843d00 	call	843d0 <__mulsi3>
   8c800:	100b883a 	mov	r5,r2
   8c804:	8809883a 	mov	r4,r17
   8c808:	0085f8c0 	call	85f8c <_malloc_r>
   8c80c:	1023883a 	mov	r17,r2
   8c810:	01c00904 	movi	r7,36
   8c814:	10000d26 	beq	r2,zero,8c84c <_calloc_r+0x68>
   8c818:	10ffff17 	ldw	r3,-4(r2)
   8c81c:	1009883a 	mov	r4,r2
   8c820:	00bfff04 	movi	r2,-4
   8c824:	1886703a 	and	r3,r3,r2
   8c828:	1887883a 	add	r3,r3,r2
   8c82c:	180d883a 	mov	r6,r3
   8c830:	000b883a 	mov	r5,zero
   8c834:	38c01736 	bltu	r7,r3,8c894 <_calloc_r+0xb0>
   8c838:	008004c4 	movi	r2,19
   8c83c:	10c00836 	bltu	r2,r3,8c860 <_calloc_r+0x7c>
   8c840:	20000215 	stw	zero,8(r4)
   8c844:	20000015 	stw	zero,0(r4)
   8c848:	20000115 	stw	zero,4(r4)
   8c84c:	8805883a 	mov	r2,r17
   8c850:	dfc00117 	ldw	ra,4(sp)
   8c854:	dc400017 	ldw	r17,0(sp)
   8c858:	dec00204 	addi	sp,sp,8
   8c85c:	f800283a 	ret
   8c860:	008006c4 	movi	r2,27
   8c864:	88000015 	stw	zero,0(r17)
   8c868:	88000115 	stw	zero,4(r17)
   8c86c:	89000204 	addi	r4,r17,8
   8c870:	10fff32e 	bgeu	r2,r3,8c840 <_calloc_r+0x5c>
   8c874:	88000215 	stw	zero,8(r17)
   8c878:	88000315 	stw	zero,12(r17)
   8c87c:	89000404 	addi	r4,r17,16
   8c880:	19ffef1e 	bne	r3,r7,8c840 <_calloc_r+0x5c>
   8c884:	89000604 	addi	r4,r17,24
   8c888:	88000415 	stw	zero,16(r17)
   8c88c:	88000515 	stw	zero,20(r17)
   8c890:	003feb06 	br	8c840 <_calloc_r+0x5c>
   8c894:	00866cc0 	call	866cc <memset>
   8c898:	8805883a 	mov	r2,r17
   8c89c:	dfc00117 	ldw	ra,4(sp)
   8c8a0:	dc400017 	ldw	r17,0(sp)
   8c8a4:	dec00204 	addi	sp,sp,8
   8c8a8:	f800283a 	ret

0008c8ac <__udivdi3>:
   8c8ac:	defff104 	addi	sp,sp,-60
   8c8b0:	0015883a 	mov	r10,zero
   8c8b4:	2005883a 	mov	r2,r4
   8c8b8:	3011883a 	mov	r8,r6
   8c8bc:	df000d15 	stw	fp,52(sp)
   8c8c0:	dd400a15 	stw	r21,40(sp)
   8c8c4:	dcc00815 	stw	r19,32(sp)
   8c8c8:	dfc00e15 	stw	ra,56(sp)
   8c8cc:	ddc00c15 	stw	r23,48(sp)
   8c8d0:	dd800b15 	stw	r22,44(sp)
   8c8d4:	dd000915 	stw	r20,36(sp)
   8c8d8:	dc800715 	stw	r18,28(sp)
   8c8dc:	dc400615 	stw	r17,24(sp)
   8c8e0:	dc000515 	stw	r16,20(sp)
   8c8e4:	da800315 	stw	r10,12(sp)
   8c8e8:	4027883a 	mov	r19,r8
   8c8ec:	1039883a 	mov	fp,r2
   8c8f0:	282b883a 	mov	r21,r5
   8c8f4:	da800415 	stw	r10,16(sp)
   8c8f8:	3800401e 	bne	r7,zero,8c9fc <__udivdi3+0x150>
   8c8fc:	2a006536 	bltu	r5,r8,8ca94 <__udivdi3+0x1e8>
   8c900:	4000b526 	beq	r8,zero,8cbd8 <__udivdi3+0x32c>
   8c904:	00bfffd4 	movui	r2,65535
   8c908:	14c0ad36 	bltu	r2,r19,8cbc0 <__udivdi3+0x314>
   8c90c:	00803fc4 	movi	r2,255
   8c910:	14c15e36 	bltu	r2,r19,8ce8c <__udivdi3+0x5e0>
   8c914:	000b883a 	mov	r5,zero
   8c918:	0005883a 	mov	r2,zero
   8c91c:	9884d83a 	srl	r2,r19,r2
   8c920:	01000274 	movhi	r4,9
   8c924:	210ac804 	addi	r4,r4,11040
   8c928:	01800804 	movi	r6,32
   8c92c:	1105883a 	add	r2,r2,r4
   8c930:	10c00003 	ldbu	r3,0(r2)
   8c934:	28c7883a 	add	r3,r5,r3
   8c938:	30e9c83a 	sub	r20,r6,r3
   8c93c:	a0010a1e 	bne	r20,zero,8cd68 <__udivdi3+0x4bc>
   8c940:	982ed43a 	srli	r23,r19,16
   8c944:	acebc83a 	sub	r21,r21,r19
   8c948:	9dbfffcc 	andi	r22,r19,65535
   8c94c:	05000044 	movi	r20,1
   8c950:	a809883a 	mov	r4,r21
   8c954:	b80b883a 	mov	r5,r23
   8c958:	00843c00 	call	843c0 <__udivsi3>
   8c95c:	100b883a 	mov	r5,r2
   8c960:	b009883a 	mov	r4,r22
   8c964:	1021883a 	mov	r16,r2
   8c968:	00843d00 	call	843d0 <__mulsi3>
   8c96c:	a809883a 	mov	r4,r21
   8c970:	b80b883a 	mov	r5,r23
   8c974:	1023883a 	mov	r17,r2
   8c978:	00843c80 	call	843c8 <__umodsi3>
   8c97c:	1004943a 	slli	r2,r2,16
   8c980:	e006d43a 	srli	r3,fp,16
   8c984:	10c4b03a 	or	r2,r2,r3
   8c988:	1440042e 	bgeu	r2,r17,8c99c <__udivdi3+0xf0>
   8c98c:	14c5883a 	add	r2,r2,r19
   8c990:	843fffc4 	addi	r16,r16,-1
   8c994:	14c00136 	bltu	r2,r19,8c99c <__udivdi3+0xf0>
   8c998:	14415c36 	bltu	r2,r17,8cf0c <__udivdi3+0x660>
   8c99c:	1463c83a 	sub	r17,r2,r17
   8c9a0:	8809883a 	mov	r4,r17
   8c9a4:	b80b883a 	mov	r5,r23
   8c9a8:	00843c00 	call	843c0 <__udivsi3>
   8c9ac:	100b883a 	mov	r5,r2
   8c9b0:	b009883a 	mov	r4,r22
   8c9b4:	102b883a 	mov	r21,r2
   8c9b8:	00843d00 	call	843d0 <__mulsi3>
   8c9bc:	8809883a 	mov	r4,r17
   8c9c0:	b80b883a 	mov	r5,r23
   8c9c4:	1025883a 	mov	r18,r2
   8c9c8:	00843c80 	call	843c8 <__umodsi3>
   8c9cc:	1004943a 	slli	r2,r2,16
   8c9d0:	e0ffffcc 	andi	r3,fp,65535
   8c9d4:	10c4b03a 	or	r2,r2,r3
   8c9d8:	1480042e 	bgeu	r2,r18,8c9ec <__udivdi3+0x140>
   8c9dc:	9885883a 	add	r2,r19,r2
   8c9e0:	ad7fffc4 	addi	r21,r21,-1
   8c9e4:	14c00136 	bltu	r2,r19,8c9ec <__udivdi3+0x140>
   8c9e8:	14813c36 	bltu	r2,r18,8cedc <__udivdi3+0x630>
   8c9ec:	8004943a 	slli	r2,r16,16
   8c9f0:	a009883a 	mov	r4,r20
   8c9f4:	a884b03a 	or	r2,r21,r2
   8c9f8:	00001506 	br	8ca50 <__udivdi3+0x1a4>
   8c9fc:	380d883a 	mov	r6,r7
   8ca00:	29c06c36 	bltu	r5,r7,8cbb4 <__udivdi3+0x308>
   8ca04:	00bfffd4 	movui	r2,65535
   8ca08:	11c06436 	bltu	r2,r7,8cb9c <__udivdi3+0x2f0>
   8ca0c:	00803fc4 	movi	r2,255
   8ca10:	11c11836 	bltu	r2,r7,8ce74 <__udivdi3+0x5c8>
   8ca14:	000b883a 	mov	r5,zero
   8ca18:	0005883a 	mov	r2,zero
   8ca1c:	3084d83a 	srl	r2,r6,r2
   8ca20:	01000274 	movhi	r4,9
   8ca24:	210ac804 	addi	r4,r4,11040
   8ca28:	01c00804 	movi	r7,32
   8ca2c:	1105883a 	add	r2,r2,r4
   8ca30:	10c00003 	ldbu	r3,0(r2)
   8ca34:	28c7883a 	add	r3,r5,r3
   8ca38:	38edc83a 	sub	r22,r7,r3
   8ca3c:	b000731e 	bne	r22,zero,8cc0c <__udivdi3+0x360>
   8ca40:	35400136 	bltu	r6,r21,8ca48 <__udivdi3+0x19c>
   8ca44:	e4c05b36 	bltu	fp,r19,8cbb4 <__udivdi3+0x308>
   8ca48:	00800044 	movi	r2,1
   8ca4c:	0009883a 	mov	r4,zero
   8ca50:	d8800315 	stw	r2,12(sp)
   8ca54:	d9400317 	ldw	r5,12(sp)
   8ca58:	2007883a 	mov	r3,r4
   8ca5c:	d9000415 	stw	r4,16(sp)
   8ca60:	2805883a 	mov	r2,r5
   8ca64:	dfc00e17 	ldw	ra,56(sp)
   8ca68:	df000d17 	ldw	fp,52(sp)
   8ca6c:	ddc00c17 	ldw	r23,48(sp)
   8ca70:	dd800b17 	ldw	r22,44(sp)
   8ca74:	dd400a17 	ldw	r21,40(sp)
   8ca78:	dd000917 	ldw	r20,36(sp)
   8ca7c:	dcc00817 	ldw	r19,32(sp)
   8ca80:	dc800717 	ldw	r18,28(sp)
   8ca84:	dc400617 	ldw	r17,24(sp)
   8ca88:	dc000517 	ldw	r16,20(sp)
   8ca8c:	dec00f04 	addi	sp,sp,60
   8ca90:	f800283a 	ret
   8ca94:	00bfffd4 	movui	r2,65535
   8ca98:	12005636 	bltu	r2,r8,8cbf4 <__udivdi3+0x348>
   8ca9c:	00803fc4 	movi	r2,255
   8caa0:	12010036 	bltu	r2,r8,8cea4 <__udivdi3+0x5f8>
   8caa4:	000b883a 	mov	r5,zero
   8caa8:	0005883a 	mov	r2,zero
   8caac:	9884d83a 	srl	r2,r19,r2
   8cab0:	01000274 	movhi	r4,9
   8cab4:	210ac804 	addi	r4,r4,11040
   8cab8:	01800804 	movi	r6,32
   8cabc:	1105883a 	add	r2,r2,r4
   8cac0:	10c00003 	ldbu	r3,0(r2)
   8cac4:	28c7883a 	add	r3,r5,r3
   8cac8:	30cbc83a 	sub	r5,r6,r3
   8cacc:	28000626 	beq	r5,zero,8cae8 <__udivdi3+0x23c>
   8cad0:	3145c83a 	sub	r2,r6,r5
   8cad4:	e084d83a 	srl	r2,fp,r2
   8cad8:	a946983a 	sll	r3,r21,r5
   8cadc:	e178983a 	sll	fp,fp,r5
   8cae0:	9966983a 	sll	r19,r19,r5
   8cae4:	18aab03a 	or	r21,r3,r2
   8cae8:	982ed43a 	srli	r23,r19,16
   8caec:	a809883a 	mov	r4,r21
   8caf0:	9cbfffcc 	andi	r18,r19,65535
   8caf4:	b80b883a 	mov	r5,r23
   8caf8:	00843c00 	call	843c0 <__udivsi3>
   8cafc:	100b883a 	mov	r5,r2
   8cb00:	9009883a 	mov	r4,r18
   8cb04:	1021883a 	mov	r16,r2
   8cb08:	00843d00 	call	843d0 <__mulsi3>
   8cb0c:	a809883a 	mov	r4,r21
   8cb10:	b80b883a 	mov	r5,r23
   8cb14:	1023883a 	mov	r17,r2
   8cb18:	00843c80 	call	843c8 <__umodsi3>
   8cb1c:	1004943a 	slli	r2,r2,16
   8cb20:	e006d43a 	srli	r3,fp,16
   8cb24:	10c4b03a 	or	r2,r2,r3
   8cb28:	1440042e 	bgeu	r2,r17,8cb3c <__udivdi3+0x290>
   8cb2c:	14c5883a 	add	r2,r2,r19
   8cb30:	843fffc4 	addi	r16,r16,-1
   8cb34:	14c00136 	bltu	r2,r19,8cb3c <__udivdi3+0x290>
   8cb38:	1440ea36 	bltu	r2,r17,8cee4 <__udivdi3+0x638>
   8cb3c:	1463c83a 	sub	r17,r2,r17
   8cb40:	8809883a 	mov	r4,r17
   8cb44:	b80b883a 	mov	r5,r23
   8cb48:	00843c00 	call	843c0 <__udivsi3>
   8cb4c:	100b883a 	mov	r5,r2
   8cb50:	9009883a 	mov	r4,r18
   8cb54:	102b883a 	mov	r21,r2
   8cb58:	00843d00 	call	843d0 <__mulsi3>
   8cb5c:	8809883a 	mov	r4,r17
   8cb60:	b80b883a 	mov	r5,r23
   8cb64:	1025883a 	mov	r18,r2
   8cb68:	00843c80 	call	843c8 <__umodsi3>
   8cb6c:	1004943a 	slli	r2,r2,16
   8cb70:	e0ffffcc 	andi	r3,fp,65535
   8cb74:	10c4b03a 	or	r2,r2,r3
   8cb78:	1480042e 	bgeu	r2,r18,8cb8c <__udivdi3+0x2e0>
   8cb7c:	9885883a 	add	r2,r19,r2
   8cb80:	ad7fffc4 	addi	r21,r21,-1
   8cb84:	14c00136 	bltu	r2,r19,8cb8c <__udivdi3+0x2e0>
   8cb88:	1480d936 	bltu	r2,r18,8cef0 <__udivdi3+0x644>
   8cb8c:	8004943a 	slli	r2,r16,16
   8cb90:	0009883a 	mov	r4,zero
   8cb94:	a884b03a 	or	r2,r21,r2
   8cb98:	003fad06 	br	8ca50 <__udivdi3+0x1a4>
   8cb9c:	00804034 	movhi	r2,256
   8cba0:	10bfffc4 	addi	r2,r2,-1
   8cba4:	11c0b636 	bltu	r2,r7,8ce80 <__udivdi3+0x5d4>
   8cba8:	01400404 	movi	r5,16
   8cbac:	2805883a 	mov	r2,r5
   8cbb0:	003f9a06 	br	8ca1c <__udivdi3+0x170>
   8cbb4:	0005883a 	mov	r2,zero
   8cbb8:	0009883a 	mov	r4,zero
   8cbbc:	003fa406 	br	8ca50 <__udivdi3+0x1a4>
   8cbc0:	00804034 	movhi	r2,256
   8cbc4:	10bfffc4 	addi	r2,r2,-1
   8cbc8:	14c0b336 	bltu	r2,r19,8ce98 <__udivdi3+0x5ec>
   8cbcc:	01400404 	movi	r5,16
   8cbd0:	2805883a 	mov	r2,r5
   8cbd4:	003f5106 	br	8c91c <__udivdi3+0x70>
   8cbd8:	01000044 	movi	r4,1
   8cbdc:	000b883a 	mov	r5,zero
   8cbe0:	00843c00 	call	843c0 <__udivsi3>
   8cbe4:	1027883a 	mov	r19,r2
   8cbe8:	00bfffd4 	movui	r2,65535
   8cbec:	14fff436 	bltu	r2,r19,8cbc0 <__udivdi3+0x314>
   8cbf0:	003f4606 	br	8c90c <__udivdi3+0x60>
   8cbf4:	00804034 	movhi	r2,256
   8cbf8:	10bfffc4 	addi	r2,r2,-1
   8cbfc:	1200ac36 	bltu	r2,r8,8ceb0 <__udivdi3+0x604>
   8cc00:	01400404 	movi	r5,16
   8cc04:	2805883a 	mov	r2,r5
   8cc08:	003fa806 	br	8caac <__udivdi3+0x200>
   8cc0c:	3d85c83a 	sub	r2,r7,r22
   8cc10:	3588983a 	sll	r4,r6,r22
   8cc14:	9886d83a 	srl	r3,r19,r2
   8cc18:	a8a2d83a 	srl	r17,r21,r2
   8cc1c:	e084d83a 	srl	r2,fp,r2
   8cc20:	20eeb03a 	or	r23,r4,r3
   8cc24:	b824d43a 	srli	r18,r23,16
   8cc28:	ad86983a 	sll	r3,r21,r22
   8cc2c:	8809883a 	mov	r4,r17
   8cc30:	900b883a 	mov	r5,r18
   8cc34:	1886b03a 	or	r3,r3,r2
   8cc38:	d8c00115 	stw	r3,4(sp)
   8cc3c:	bc3fffcc 	andi	r16,r23,65535
   8cc40:	00843c00 	call	843c0 <__udivsi3>
   8cc44:	100b883a 	mov	r5,r2
   8cc48:	8009883a 	mov	r4,r16
   8cc4c:	1029883a 	mov	r20,r2
   8cc50:	00843d00 	call	843d0 <__mulsi3>
   8cc54:	900b883a 	mov	r5,r18
   8cc58:	8809883a 	mov	r4,r17
   8cc5c:	102b883a 	mov	r21,r2
   8cc60:	00843c80 	call	843c8 <__umodsi3>
   8cc64:	d9400117 	ldw	r5,4(sp)
   8cc68:	1004943a 	slli	r2,r2,16
   8cc6c:	9da6983a 	sll	r19,r19,r22
   8cc70:	2806d43a 	srli	r3,r5,16
   8cc74:	10c4b03a 	or	r2,r2,r3
   8cc78:	1540032e 	bgeu	r2,r21,8cc88 <__udivdi3+0x3dc>
   8cc7c:	15c5883a 	add	r2,r2,r23
   8cc80:	a53fffc4 	addi	r20,r20,-1
   8cc84:	15c0912e 	bgeu	r2,r23,8cecc <__udivdi3+0x620>
   8cc88:	1563c83a 	sub	r17,r2,r21
   8cc8c:	8809883a 	mov	r4,r17
   8cc90:	900b883a 	mov	r5,r18
   8cc94:	00843c00 	call	843c0 <__udivsi3>
   8cc98:	100b883a 	mov	r5,r2
   8cc9c:	8009883a 	mov	r4,r16
   8cca0:	102b883a 	mov	r21,r2
   8cca4:	00843d00 	call	843d0 <__mulsi3>
   8cca8:	8809883a 	mov	r4,r17
   8ccac:	900b883a 	mov	r5,r18
   8ccb0:	1021883a 	mov	r16,r2
   8ccb4:	00843c80 	call	843c8 <__umodsi3>
   8ccb8:	da800117 	ldw	r10,4(sp)
   8ccbc:	1004943a 	slli	r2,r2,16
   8ccc0:	50ffffcc 	andi	r3,r10,65535
   8ccc4:	10c6b03a 	or	r3,r2,r3
   8ccc8:	1c00032e 	bgeu	r3,r16,8ccd8 <__udivdi3+0x42c>
   8cccc:	1dc7883a 	add	r3,r3,r23
   8ccd0:	ad7fffc4 	addi	r21,r21,-1
   8ccd4:	1dc0792e 	bgeu	r3,r23,8cebc <__udivdi3+0x610>
   8ccd8:	a004943a 	slli	r2,r20,16
   8ccdc:	982ed43a 	srli	r23,r19,16
   8cce0:	9cffffcc 	andi	r19,r19,65535
   8cce4:	a8a4b03a 	or	r18,r21,r2
   8cce8:	947fffcc 	andi	r17,r18,65535
   8ccec:	902ad43a 	srli	r21,r18,16
   8ccf0:	8809883a 	mov	r4,r17
   8ccf4:	980b883a 	mov	r5,r19
   8ccf8:	1c21c83a 	sub	r16,r3,r16
   8ccfc:	00843d00 	call	843d0 <__mulsi3>
   8cd00:	8809883a 	mov	r4,r17
   8cd04:	b80b883a 	mov	r5,r23
   8cd08:	1029883a 	mov	r20,r2
   8cd0c:	00843d00 	call	843d0 <__mulsi3>
   8cd10:	980b883a 	mov	r5,r19
   8cd14:	a809883a 	mov	r4,r21
   8cd18:	1023883a 	mov	r17,r2
   8cd1c:	00843d00 	call	843d0 <__mulsi3>
   8cd20:	a809883a 	mov	r4,r21
   8cd24:	b80b883a 	mov	r5,r23
   8cd28:	1027883a 	mov	r19,r2
   8cd2c:	00843d00 	call	843d0 <__mulsi3>
   8cd30:	1009883a 	mov	r4,r2
   8cd34:	a004d43a 	srli	r2,r20,16
   8cd38:	8ce3883a 	add	r17,r17,r19
   8cd3c:	1447883a 	add	r3,r2,r17
   8cd40:	1cc0022e 	bgeu	r3,r19,8cd4c <__udivdi3+0x4a0>
   8cd44:	00800074 	movhi	r2,1
   8cd48:	2089883a 	add	r4,r4,r2
   8cd4c:	1804d43a 	srli	r2,r3,16
   8cd50:	2085883a 	add	r2,r4,r2
   8cd54:	80804436 	bltu	r16,r2,8ce68 <__udivdi3+0x5bc>
   8cd58:	80803e26 	beq	r16,r2,8ce54 <__udivdi3+0x5a8>
   8cd5c:	9005883a 	mov	r2,r18
   8cd60:	0009883a 	mov	r4,zero
   8cd64:	003f3a06 	br	8ca50 <__udivdi3+0x1a4>
   8cd68:	9d26983a 	sll	r19,r19,r20
   8cd6c:	3505c83a 	sub	r2,r6,r20
   8cd70:	a8a2d83a 	srl	r17,r21,r2
   8cd74:	982ed43a 	srli	r23,r19,16
   8cd78:	e084d83a 	srl	r2,fp,r2
   8cd7c:	ad06983a 	sll	r3,r21,r20
   8cd80:	8809883a 	mov	r4,r17
   8cd84:	b80b883a 	mov	r5,r23
   8cd88:	1886b03a 	or	r3,r3,r2
   8cd8c:	d8c00015 	stw	r3,0(sp)
   8cd90:	9dbfffcc 	andi	r22,r19,65535
   8cd94:	00843c00 	call	843c0 <__udivsi3>
   8cd98:	100b883a 	mov	r5,r2
   8cd9c:	b009883a 	mov	r4,r22
   8cda0:	d8800215 	stw	r2,8(sp)
   8cda4:	00843d00 	call	843d0 <__mulsi3>
   8cda8:	8809883a 	mov	r4,r17
   8cdac:	b80b883a 	mov	r5,r23
   8cdb0:	102b883a 	mov	r21,r2
   8cdb4:	00843c80 	call	843c8 <__umodsi3>
   8cdb8:	d9000017 	ldw	r4,0(sp)
   8cdbc:	1004943a 	slli	r2,r2,16
   8cdc0:	2006d43a 	srli	r3,r4,16
   8cdc4:	10c4b03a 	or	r2,r2,r3
   8cdc8:	1540052e 	bgeu	r2,r21,8cde0 <__udivdi3+0x534>
   8cdcc:	d9400217 	ldw	r5,8(sp)
   8cdd0:	14c5883a 	add	r2,r2,r19
   8cdd4:	297fffc4 	addi	r5,r5,-1
   8cdd8:	d9400215 	stw	r5,8(sp)
   8cddc:	14c0462e 	bgeu	r2,r19,8cef8 <__udivdi3+0x64c>
   8cde0:	1563c83a 	sub	r17,r2,r21
   8cde4:	8809883a 	mov	r4,r17
   8cde8:	b80b883a 	mov	r5,r23
   8cdec:	00843c00 	call	843c0 <__udivsi3>
   8cdf0:	100b883a 	mov	r5,r2
   8cdf4:	b009883a 	mov	r4,r22
   8cdf8:	1025883a 	mov	r18,r2
   8cdfc:	00843d00 	call	843d0 <__mulsi3>
   8ce00:	8809883a 	mov	r4,r17
   8ce04:	b80b883a 	mov	r5,r23
   8ce08:	1021883a 	mov	r16,r2
   8ce0c:	00843c80 	call	843c8 <__umodsi3>
   8ce10:	da800017 	ldw	r10,0(sp)
   8ce14:	1004943a 	slli	r2,r2,16
   8ce18:	50ffffcc 	andi	r3,r10,65535
   8ce1c:	10c6b03a 	or	r3,r2,r3
   8ce20:	1c00062e 	bgeu	r3,r16,8ce3c <__udivdi3+0x590>
   8ce24:	1cc7883a 	add	r3,r3,r19
   8ce28:	94bfffc4 	addi	r18,r18,-1
   8ce2c:	1cc00336 	bltu	r3,r19,8ce3c <__udivdi3+0x590>
   8ce30:	1c00022e 	bgeu	r3,r16,8ce3c <__udivdi3+0x590>
   8ce34:	94bfffc4 	addi	r18,r18,-1
   8ce38:	1cc7883a 	add	r3,r3,r19
   8ce3c:	d9000217 	ldw	r4,8(sp)
   8ce40:	e538983a 	sll	fp,fp,r20
   8ce44:	1c2bc83a 	sub	r21,r3,r16
   8ce48:	2004943a 	slli	r2,r4,16
   8ce4c:	90a8b03a 	or	r20,r18,r2
   8ce50:	003ebf06 	br	8c950 <__udivdi3+0xa4>
   8ce54:	1804943a 	slli	r2,r3,16
   8ce58:	e588983a 	sll	r4,fp,r22
   8ce5c:	a0ffffcc 	andi	r3,r20,65535
   8ce60:	10c5883a 	add	r2,r2,r3
   8ce64:	20bfbd2e 	bgeu	r4,r2,8cd5c <__udivdi3+0x4b0>
   8ce68:	90bfffc4 	addi	r2,r18,-1
   8ce6c:	0009883a 	mov	r4,zero
   8ce70:	003ef706 	br	8ca50 <__udivdi3+0x1a4>
   8ce74:	01400204 	movi	r5,8
   8ce78:	2805883a 	mov	r2,r5
   8ce7c:	003ee706 	br	8ca1c <__udivdi3+0x170>
   8ce80:	01400604 	movi	r5,24
   8ce84:	2805883a 	mov	r2,r5
   8ce88:	003ee406 	br	8ca1c <__udivdi3+0x170>
   8ce8c:	01400204 	movi	r5,8
   8ce90:	2805883a 	mov	r2,r5
   8ce94:	003ea106 	br	8c91c <__udivdi3+0x70>
   8ce98:	01400604 	movi	r5,24
   8ce9c:	2805883a 	mov	r2,r5
   8cea0:	003e9e06 	br	8c91c <__udivdi3+0x70>
   8cea4:	01400204 	movi	r5,8
   8cea8:	2805883a 	mov	r2,r5
   8ceac:	003eff06 	br	8caac <__udivdi3+0x200>
   8ceb0:	01400604 	movi	r5,24
   8ceb4:	2805883a 	mov	r2,r5
   8ceb8:	003efc06 	br	8caac <__udivdi3+0x200>
   8cebc:	1c3f862e 	bgeu	r3,r16,8ccd8 <__udivdi3+0x42c>
   8cec0:	1dc7883a 	add	r3,r3,r23
   8cec4:	ad7fffc4 	addi	r21,r21,-1
   8cec8:	003f8306 	br	8ccd8 <__udivdi3+0x42c>
   8cecc:	157f6e2e 	bgeu	r2,r21,8cc88 <__udivdi3+0x3dc>
   8ced0:	a53fffc4 	addi	r20,r20,-1
   8ced4:	15c5883a 	add	r2,r2,r23
   8ced8:	003f6b06 	br	8cc88 <__udivdi3+0x3dc>
   8cedc:	ad7fffc4 	addi	r21,r21,-1
   8cee0:	003ec206 	br	8c9ec <__udivdi3+0x140>
   8cee4:	843fffc4 	addi	r16,r16,-1
   8cee8:	14c5883a 	add	r2,r2,r19
   8ceec:	003f1306 	br	8cb3c <__udivdi3+0x290>
   8cef0:	ad7fffc4 	addi	r21,r21,-1
   8cef4:	003f2506 	br	8cb8c <__udivdi3+0x2e0>
   8cef8:	157fb92e 	bgeu	r2,r21,8cde0 <__udivdi3+0x534>
   8cefc:	297fffc4 	addi	r5,r5,-1
   8cf00:	14c5883a 	add	r2,r2,r19
   8cf04:	d9400215 	stw	r5,8(sp)
   8cf08:	003fb506 	br	8cde0 <__udivdi3+0x534>
   8cf0c:	843fffc4 	addi	r16,r16,-1
   8cf10:	14c5883a 	add	r2,r2,r19
   8cf14:	003ea106 	br	8c99c <__udivdi3+0xf0>

0008cf18 <__umoddi3>:
   8cf18:	defff004 	addi	sp,sp,-64
   8cf1c:	3011883a 	mov	r8,r6
   8cf20:	000d883a 	mov	r6,zero
   8cf24:	dd400b15 	stw	r21,44(sp)
   8cf28:	dcc00915 	stw	r19,36(sp)
   8cf2c:	dc000615 	stw	r16,24(sp)
   8cf30:	dfc00f15 	stw	ra,60(sp)
   8cf34:	df000e15 	stw	fp,56(sp)
   8cf38:	ddc00d15 	stw	r23,52(sp)
   8cf3c:	dd800c15 	stw	r22,48(sp)
   8cf40:	dd000a15 	stw	r20,40(sp)
   8cf44:	dc800815 	stw	r18,32(sp)
   8cf48:	dc400715 	stw	r17,28(sp)
   8cf4c:	2817883a 	mov	r11,r5
   8cf50:	d9800415 	stw	r6,16(sp)
   8cf54:	4027883a 	mov	r19,r8
   8cf58:	d9800515 	stw	r6,20(sp)
   8cf5c:	2021883a 	mov	r16,r4
   8cf60:	282b883a 	mov	r21,r5
   8cf64:	38002c1e 	bne	r7,zero,8d018 <__umoddi3+0x100>
   8cf68:	2a005636 	bltu	r5,r8,8d0c4 <__umoddi3+0x1ac>
   8cf6c:	40009a26 	beq	r8,zero,8d1d8 <__umoddi3+0x2c0>
   8cf70:	00bfffd4 	movui	r2,65535
   8cf74:	14c09236 	bltu	r2,r19,8d1c0 <__umoddi3+0x2a8>
   8cf78:	00803fc4 	movi	r2,255
   8cf7c:	14c15c36 	bltu	r2,r19,8d4f0 <__umoddi3+0x5d8>
   8cf80:	000b883a 	mov	r5,zero
   8cf84:	0005883a 	mov	r2,zero
   8cf88:	9884d83a 	srl	r2,r19,r2
   8cf8c:	01000274 	movhi	r4,9
   8cf90:	210ac804 	addi	r4,r4,11040
   8cf94:	01800804 	movi	r6,32
   8cf98:	1105883a 	add	r2,r2,r4
   8cf9c:	10c00003 	ldbu	r3,0(r2)
   8cfa0:	28c7883a 	add	r3,r5,r3
   8cfa4:	30e5c83a 	sub	r18,r6,r3
   8cfa8:	9000a41e 	bne	r18,zero,8d23c <__umoddi3+0x324>
   8cfac:	982ed43a 	srli	r23,r19,16
   8cfb0:	acebc83a 	sub	r21,r21,r19
   8cfb4:	9d3fffcc 	andi	r20,r19,65535
   8cfb8:	002d883a 	mov	r22,zero
   8cfbc:	a809883a 	mov	r4,r21
   8cfc0:	b80b883a 	mov	r5,r23
   8cfc4:	00843c00 	call	843c0 <__udivsi3>
   8cfc8:	100b883a 	mov	r5,r2
   8cfcc:	a009883a 	mov	r4,r20
   8cfd0:	00843d00 	call	843d0 <__mulsi3>
   8cfd4:	a809883a 	mov	r4,r21
   8cfd8:	b80b883a 	mov	r5,r23
   8cfdc:	1023883a 	mov	r17,r2
   8cfe0:	00843c80 	call	843c8 <__umodsi3>
   8cfe4:	1004943a 	slli	r2,r2,16
   8cfe8:	8006d43a 	srli	r3,r16,16
   8cfec:	10c4b03a 	or	r2,r2,r3
   8cff0:	1440032e 	bgeu	r2,r17,8d000 <__umoddi3+0xe8>
   8cff4:	14c5883a 	add	r2,r2,r19
   8cff8:	14c00136 	bltu	r2,r19,8d000 <__umoddi3+0xe8>
   8cffc:	14415836 	bltu	r2,r17,8d560 <__umoddi3+0x648>
   8d000:	1463c83a 	sub	r17,r2,r17
   8d004:	8809883a 	mov	r4,r17
   8d008:	b80b883a 	mov	r5,r23
   8d00c:	00843c00 	call	843c0 <__udivsi3>
   8d010:	a009883a 	mov	r4,r20
   8d014:	00005306 	br	8d164 <__umoddi3+0x24c>
   8d018:	380d883a 	mov	r6,r7
   8d01c:	29c0132e 	bgeu	r5,r7,8d06c <__umoddi3+0x154>
   8d020:	d9000415 	stw	r4,16(sp)
   8d024:	d9400515 	stw	r5,20(sp)
   8d028:	d9400417 	ldw	r5,16(sp)
   8d02c:	5813883a 	mov	r9,r11
   8d030:	2811883a 	mov	r8,r5
   8d034:	4005883a 	mov	r2,r8
   8d038:	4807883a 	mov	r3,r9
   8d03c:	dfc00f17 	ldw	ra,60(sp)
   8d040:	df000e17 	ldw	fp,56(sp)
   8d044:	ddc00d17 	ldw	r23,52(sp)
   8d048:	dd800c17 	ldw	r22,48(sp)
   8d04c:	dd400b17 	ldw	r21,44(sp)
   8d050:	dd000a17 	ldw	r20,40(sp)
   8d054:	dcc00917 	ldw	r19,36(sp)
   8d058:	dc800817 	ldw	r18,32(sp)
   8d05c:	dc400717 	ldw	r17,28(sp)
   8d060:	dc000617 	ldw	r16,24(sp)
   8d064:	dec01004 	addi	sp,sp,64
   8d068:	f800283a 	ret
   8d06c:	00bfffd4 	movui	r2,65535
   8d070:	11c06636 	bltu	r2,r7,8d20c <__umoddi3+0x2f4>
   8d074:	00803fc4 	movi	r2,255
   8d078:	11c12036 	bltu	r2,r7,8d4fc <__umoddi3+0x5e4>
   8d07c:	000b883a 	mov	r5,zero
   8d080:	0005883a 	mov	r2,zero
   8d084:	3084d83a 	srl	r2,r6,r2
   8d088:	01000274 	movhi	r4,9
   8d08c:	210ac804 	addi	r4,r4,11040
   8d090:	01c00804 	movi	r7,32
   8d094:	1105883a 	add	r2,r2,r4
   8d098:	10c00003 	ldbu	r3,0(r2)
   8d09c:	28c7883a 	add	r3,r5,r3
   8d0a0:	38e5c83a 	sub	r18,r7,r3
   8d0a4:	9000941e 	bne	r18,zero,8d2f8 <__umoddi3+0x3e0>
   8d0a8:	35405e36 	bltu	r6,r21,8d224 <__umoddi3+0x30c>
   8d0ac:	84c05d2e 	bgeu	r16,r19,8d224 <__umoddi3+0x30c>
   8d0b0:	8011883a 	mov	r8,r16
   8d0b4:	a813883a 	mov	r9,r21
   8d0b8:	dc000415 	stw	r16,16(sp)
   8d0bc:	dd400515 	stw	r21,20(sp)
   8d0c0:	003fdc06 	br	8d034 <__umoddi3+0x11c>
   8d0c4:	00bfffd4 	movui	r2,65535
   8d0c8:	12004a36 	bltu	r2,r8,8d1f4 <__umoddi3+0x2dc>
   8d0cc:	00803fc4 	movi	r2,255
   8d0d0:	12010d36 	bltu	r2,r8,8d508 <__umoddi3+0x5f0>
   8d0d4:	000b883a 	mov	r5,zero
   8d0d8:	0005883a 	mov	r2,zero
   8d0dc:	9884d83a 	srl	r2,r19,r2
   8d0e0:	01000274 	movhi	r4,9
   8d0e4:	210ac804 	addi	r4,r4,11040
   8d0e8:	01800804 	movi	r6,32
   8d0ec:	1105883a 	add	r2,r2,r4
   8d0f0:	10c00003 	ldbu	r3,0(r2)
   8d0f4:	28c7883a 	add	r3,r5,r3
   8d0f8:	30c7c83a 	sub	r3,r6,r3
   8d0fc:	1800dc1e 	bne	r3,zero,8d470 <__umoddi3+0x558>
   8d100:	002d883a 	mov	r22,zero
   8d104:	982ed43a 	srli	r23,r19,16
   8d108:	a809883a 	mov	r4,r21
   8d10c:	9cbfffcc 	andi	r18,r19,65535
   8d110:	b80b883a 	mov	r5,r23
   8d114:	00843c00 	call	843c0 <__udivsi3>
   8d118:	100b883a 	mov	r5,r2
   8d11c:	9009883a 	mov	r4,r18
   8d120:	00843d00 	call	843d0 <__mulsi3>
   8d124:	a809883a 	mov	r4,r21
   8d128:	b80b883a 	mov	r5,r23
   8d12c:	1023883a 	mov	r17,r2
   8d130:	00843c80 	call	843c8 <__umodsi3>
   8d134:	1004943a 	slli	r2,r2,16
   8d138:	8006d43a 	srli	r3,r16,16
   8d13c:	10c4b03a 	or	r2,r2,r3
   8d140:	1440032e 	bgeu	r2,r17,8d150 <__umoddi3+0x238>
   8d144:	14c5883a 	add	r2,r2,r19
   8d148:	14c00136 	bltu	r2,r19,8d150 <__umoddi3+0x238>
   8d14c:	14410236 	bltu	r2,r17,8d558 <__umoddi3+0x640>
   8d150:	1463c83a 	sub	r17,r2,r17
   8d154:	8809883a 	mov	r4,r17
   8d158:	b80b883a 	mov	r5,r23
   8d15c:	00843c00 	call	843c0 <__udivsi3>
   8d160:	9009883a 	mov	r4,r18
   8d164:	100b883a 	mov	r5,r2
   8d168:	00843d00 	call	843d0 <__mulsi3>
   8d16c:	8809883a 	mov	r4,r17
   8d170:	b80b883a 	mov	r5,r23
   8d174:	102b883a 	mov	r21,r2
   8d178:	00843c80 	call	843c8 <__umodsi3>
   8d17c:	1004943a 	slli	r2,r2,16
   8d180:	80ffffcc 	andi	r3,r16,65535
   8d184:	10c4b03a 	or	r2,r2,r3
   8d188:	1540042e 	bgeu	r2,r21,8d19c <__umoddi3+0x284>
   8d18c:	14c5883a 	add	r2,r2,r19
   8d190:	14c00236 	bltu	r2,r19,8d19c <__umoddi3+0x284>
   8d194:	1540012e 	bgeu	r2,r21,8d19c <__umoddi3+0x284>
   8d198:	14c5883a 	add	r2,r2,r19
   8d19c:	1545c83a 	sub	r2,r2,r21
   8d1a0:	1584d83a 	srl	r2,r2,r22
   8d1a4:	0013883a 	mov	r9,zero
   8d1a8:	d8800415 	stw	r2,16(sp)
   8d1ac:	d8c00417 	ldw	r3,16(sp)
   8d1b0:	0005883a 	mov	r2,zero
   8d1b4:	d8800515 	stw	r2,20(sp)
   8d1b8:	1811883a 	mov	r8,r3
   8d1bc:	003f9d06 	br	8d034 <__umoddi3+0x11c>
   8d1c0:	00804034 	movhi	r2,256
   8d1c4:	10bfffc4 	addi	r2,r2,-1
   8d1c8:	14c0c636 	bltu	r2,r19,8d4e4 <__umoddi3+0x5cc>
   8d1cc:	01400404 	movi	r5,16
   8d1d0:	2805883a 	mov	r2,r5
   8d1d4:	003f6c06 	br	8cf88 <__umoddi3+0x70>
   8d1d8:	01000044 	movi	r4,1
   8d1dc:	000b883a 	mov	r5,zero
   8d1e0:	00843c00 	call	843c0 <__udivsi3>
   8d1e4:	1027883a 	mov	r19,r2
   8d1e8:	00bfffd4 	movui	r2,65535
   8d1ec:	14fff436 	bltu	r2,r19,8d1c0 <__umoddi3+0x2a8>
   8d1f0:	003f6106 	br	8cf78 <__umoddi3+0x60>
   8d1f4:	00804034 	movhi	r2,256
   8d1f8:	10bfffc4 	addi	r2,r2,-1
   8d1fc:	1200c536 	bltu	r2,r8,8d514 <__umoddi3+0x5fc>
   8d200:	01400404 	movi	r5,16
   8d204:	2805883a 	mov	r2,r5
   8d208:	003fb406 	br	8d0dc <__umoddi3+0x1c4>
   8d20c:	00804034 	movhi	r2,256
   8d210:	10bfffc4 	addi	r2,r2,-1
   8d214:	11c0c236 	bltu	r2,r7,8d520 <__umoddi3+0x608>
   8d218:	01400404 	movi	r5,16
   8d21c:	2805883a 	mov	r2,r5
   8d220:	003f9806 	br	8d084 <__umoddi3+0x16c>
   8d224:	84c9c83a 	sub	r4,r16,r19
   8d228:	8105803a 	cmpltu	r2,r16,r4
   8d22c:	a987c83a 	sub	r3,r21,r6
   8d230:	18abc83a 	sub	r21,r3,r2
   8d234:	2021883a 	mov	r16,r4
   8d238:	003f9d06 	br	8d0b0 <__umoddi3+0x198>
   8d23c:	9ca6983a 	sll	r19,r19,r18
   8d240:	3485c83a 	sub	r2,r6,r18
   8d244:	a8a2d83a 	srl	r17,r21,r2
   8d248:	982ed43a 	srli	r23,r19,16
   8d24c:	ac86983a 	sll	r3,r21,r18
   8d250:	8084d83a 	srl	r2,r16,r2
   8d254:	8809883a 	mov	r4,r17
   8d258:	b80b883a 	mov	r5,r23
   8d25c:	18b8b03a 	or	fp,r3,r2
   8d260:	9d3fffcc 	andi	r20,r19,65535
   8d264:	00843c00 	call	843c0 <__udivsi3>
   8d268:	100b883a 	mov	r5,r2
   8d26c:	a009883a 	mov	r4,r20
   8d270:	00843d00 	call	843d0 <__mulsi3>
   8d274:	8809883a 	mov	r4,r17
   8d278:	b80b883a 	mov	r5,r23
   8d27c:	102b883a 	mov	r21,r2
   8d280:	00843c80 	call	843c8 <__umodsi3>
   8d284:	1004943a 	slli	r2,r2,16
   8d288:	e006d43a 	srli	r3,fp,16
   8d28c:	902d883a 	mov	r22,r18
   8d290:	10c4b03a 	or	r2,r2,r3
   8d294:	1540022e 	bgeu	r2,r21,8d2a0 <__umoddi3+0x388>
   8d298:	14c5883a 	add	r2,r2,r19
   8d29c:	14c0ab2e 	bgeu	r2,r19,8d54c <__umoddi3+0x634>
   8d2a0:	1563c83a 	sub	r17,r2,r21
   8d2a4:	8809883a 	mov	r4,r17
   8d2a8:	b80b883a 	mov	r5,r23
   8d2ac:	00843c00 	call	843c0 <__udivsi3>
   8d2b0:	100b883a 	mov	r5,r2
   8d2b4:	a009883a 	mov	r4,r20
   8d2b8:	00843d00 	call	843d0 <__mulsi3>
   8d2bc:	8809883a 	mov	r4,r17
   8d2c0:	b80b883a 	mov	r5,r23
   8d2c4:	102b883a 	mov	r21,r2
   8d2c8:	00843c80 	call	843c8 <__umodsi3>
   8d2cc:	1004943a 	slli	r2,r2,16
   8d2d0:	e0ffffcc 	andi	r3,fp,65535
   8d2d4:	10c4b03a 	or	r2,r2,r3
   8d2d8:	1540042e 	bgeu	r2,r21,8d2ec <__umoddi3+0x3d4>
   8d2dc:	14c5883a 	add	r2,r2,r19
   8d2e0:	14c00236 	bltu	r2,r19,8d2ec <__umoddi3+0x3d4>
   8d2e4:	1540012e 	bgeu	r2,r21,8d2ec <__umoddi3+0x3d4>
   8d2e8:	14c5883a 	add	r2,r2,r19
   8d2ec:	84a0983a 	sll	r16,r16,r18
   8d2f0:	156bc83a 	sub	r21,r2,r21
   8d2f4:	003f3106 	br	8cfbc <__umoddi3+0xa4>
   8d2f8:	3c8fc83a 	sub	r7,r7,r18
   8d2fc:	3486983a 	sll	r3,r6,r18
   8d300:	99c4d83a 	srl	r2,r19,r7
   8d304:	a9e2d83a 	srl	r17,r21,r7
   8d308:	ac8c983a 	sll	r6,r21,r18
   8d30c:	18acb03a 	or	r22,r3,r2
   8d310:	b02ed43a 	srli	r23,r22,16
   8d314:	81c4d83a 	srl	r2,r16,r7
   8d318:	8809883a 	mov	r4,r17
   8d31c:	b80b883a 	mov	r5,r23
   8d320:	308cb03a 	or	r6,r6,r2
   8d324:	d9c00315 	stw	r7,12(sp)
   8d328:	d9800215 	stw	r6,8(sp)
   8d32c:	b53fffcc 	andi	r20,r22,65535
   8d330:	00843c00 	call	843c0 <__udivsi3>
   8d334:	100b883a 	mov	r5,r2
   8d338:	a009883a 	mov	r4,r20
   8d33c:	1039883a 	mov	fp,r2
   8d340:	00843d00 	call	843d0 <__mulsi3>
   8d344:	8809883a 	mov	r4,r17
   8d348:	b80b883a 	mov	r5,r23
   8d34c:	102b883a 	mov	r21,r2
   8d350:	00843c80 	call	843c8 <__umodsi3>
   8d354:	d9000217 	ldw	r4,8(sp)
   8d358:	1004943a 	slli	r2,r2,16
   8d35c:	9ca6983a 	sll	r19,r19,r18
   8d360:	2006d43a 	srli	r3,r4,16
   8d364:	84a0983a 	sll	r16,r16,r18
   8d368:	dcc00015 	stw	r19,0(sp)
   8d36c:	10c4b03a 	or	r2,r2,r3
   8d370:	dc000115 	stw	r16,4(sp)
   8d374:	1540032e 	bgeu	r2,r21,8d384 <__umoddi3+0x46c>
   8d378:	1585883a 	add	r2,r2,r22
   8d37c:	e73fffc4 	addi	fp,fp,-1
   8d380:	15806e2e 	bgeu	r2,r22,8d53c <__umoddi3+0x624>
   8d384:	1563c83a 	sub	r17,r2,r21
   8d388:	8809883a 	mov	r4,r17
   8d38c:	b80b883a 	mov	r5,r23
   8d390:	00843c00 	call	843c0 <__udivsi3>
   8d394:	100b883a 	mov	r5,r2
   8d398:	a009883a 	mov	r4,r20
   8d39c:	1021883a 	mov	r16,r2
   8d3a0:	00843d00 	call	843d0 <__mulsi3>
   8d3a4:	b80b883a 	mov	r5,r23
   8d3a8:	8809883a 	mov	r4,r17
   8d3ac:	1029883a 	mov	r20,r2
   8d3b0:	00843c80 	call	843c8 <__umodsi3>
   8d3b4:	d9400217 	ldw	r5,8(sp)
   8d3b8:	1004943a 	slli	r2,r2,16
   8d3bc:	28ffffcc 	andi	r3,r5,65535
   8d3c0:	10c4b03a 	or	r2,r2,r3
   8d3c4:	1500032e 	bgeu	r2,r20,8d3d4 <__umoddi3+0x4bc>
   8d3c8:	1585883a 	add	r2,r2,r22
   8d3cc:	843fffc4 	addi	r16,r16,-1
   8d3d0:	1580562e 	bgeu	r2,r22,8d52c <__umoddi3+0x614>
   8d3d4:	d9800017 	ldw	r6,0(sp)
   8d3d8:	e022943a 	slli	r17,fp,16
   8d3dc:	302ed43a 	srli	r23,r6,16
   8d3e0:	8462b03a 	or	r17,r16,r17
   8d3e4:	34ffffcc 	andi	r19,r6,65535
   8d3e8:	882ad43a 	srli	r21,r17,16
   8d3ec:	8c7fffcc 	andi	r17,r17,65535
   8d3f0:	8809883a 	mov	r4,r17
   8d3f4:	980b883a 	mov	r5,r19
   8d3f8:	1521c83a 	sub	r16,r2,r20
   8d3fc:	00843d00 	call	843d0 <__mulsi3>
   8d400:	8809883a 	mov	r4,r17
   8d404:	b80b883a 	mov	r5,r23
   8d408:	1029883a 	mov	r20,r2
   8d40c:	00843d00 	call	843d0 <__mulsi3>
   8d410:	980b883a 	mov	r5,r19
   8d414:	a809883a 	mov	r4,r21
   8d418:	1023883a 	mov	r17,r2
   8d41c:	00843d00 	call	843d0 <__mulsi3>
   8d420:	a809883a 	mov	r4,r21
   8d424:	b80b883a 	mov	r5,r23
   8d428:	1027883a 	mov	r19,r2
   8d42c:	00843d00 	call	843d0 <__mulsi3>
   8d430:	100b883a 	mov	r5,r2
   8d434:	a004d43a 	srli	r2,r20,16
   8d438:	8ce3883a 	add	r17,r17,r19
   8d43c:	1449883a 	add	r4,r2,r17
   8d440:	24c0022e 	bgeu	r4,r19,8d44c <__umoddi3+0x534>
   8d444:	00800074 	movhi	r2,1
   8d448:	288b883a 	add	r5,r5,r2
   8d44c:	2004d43a 	srli	r2,r4,16
   8d450:	2008943a 	slli	r4,r4,16
   8d454:	a0ffffcc 	andi	r3,r20,65535
   8d458:	288d883a 	add	r6,r5,r2
   8d45c:	20c9883a 	add	r4,r4,r3
   8d460:	81800b36 	bltu	r16,r6,8d490 <__umoddi3+0x578>
   8d464:	81804026 	beq	r16,r6,8d568 <__umoddi3+0x650>
   8d468:	818dc83a 	sub	r6,r16,r6
   8d46c:	00000f06 	br	8d4ac <__umoddi3+0x594>
   8d470:	30c5c83a 	sub	r2,r6,r3
   8d474:	182d883a 	mov	r22,r3
   8d478:	8084d83a 	srl	r2,r16,r2
   8d47c:	a8c6983a 	sll	r3,r21,r3
   8d480:	9da6983a 	sll	r19,r19,r22
   8d484:	85a0983a 	sll	r16,r16,r22
   8d488:	18aab03a 	or	r21,r3,r2
   8d48c:	003f1d06 	br	8d104 <__umoddi3+0x1ec>
   8d490:	d8c00017 	ldw	r3,0(sp)
   8d494:	20c5c83a 	sub	r2,r4,r3
   8d498:	2089803a 	cmpltu	r4,r4,r2
   8d49c:	3587c83a 	sub	r3,r6,r22
   8d4a0:	1907c83a 	sub	r3,r3,r4
   8d4a4:	80cdc83a 	sub	r6,r16,r3
   8d4a8:	1009883a 	mov	r4,r2
   8d4ac:	d9400117 	ldw	r5,4(sp)
   8d4b0:	2905c83a 	sub	r2,r5,r4
   8d4b4:	2887803a 	cmpltu	r3,r5,r2
   8d4b8:	30c7c83a 	sub	r3,r6,r3
   8d4bc:	d9800317 	ldw	r6,12(sp)
   8d4c0:	1484d83a 	srl	r2,r2,r18
   8d4c4:	1988983a 	sll	r4,r3,r6
   8d4c8:	1c86d83a 	srl	r3,r3,r18
   8d4cc:	2088b03a 	or	r4,r4,r2
   8d4d0:	2011883a 	mov	r8,r4
   8d4d4:	1813883a 	mov	r9,r3
   8d4d8:	d9000415 	stw	r4,16(sp)
   8d4dc:	d8c00515 	stw	r3,20(sp)
   8d4e0:	003ed406 	br	8d034 <__umoddi3+0x11c>
   8d4e4:	01400604 	movi	r5,24
   8d4e8:	2805883a 	mov	r2,r5
   8d4ec:	003ea606 	br	8cf88 <__umoddi3+0x70>
   8d4f0:	01400204 	movi	r5,8
   8d4f4:	2805883a 	mov	r2,r5
   8d4f8:	003ea306 	br	8cf88 <__umoddi3+0x70>
   8d4fc:	01400204 	movi	r5,8
   8d500:	2805883a 	mov	r2,r5
   8d504:	003edf06 	br	8d084 <__umoddi3+0x16c>
   8d508:	01400204 	movi	r5,8
   8d50c:	2805883a 	mov	r2,r5
   8d510:	003ef206 	br	8d0dc <__umoddi3+0x1c4>
   8d514:	01400604 	movi	r5,24
   8d518:	2805883a 	mov	r2,r5
   8d51c:	003eef06 	br	8d0dc <__umoddi3+0x1c4>
   8d520:	01400604 	movi	r5,24
   8d524:	2805883a 	mov	r2,r5
   8d528:	003ed606 	br	8d084 <__umoddi3+0x16c>
   8d52c:	153fa92e 	bgeu	r2,r20,8d3d4 <__umoddi3+0x4bc>
   8d530:	843fffc4 	addi	r16,r16,-1
   8d534:	1585883a 	add	r2,r2,r22
   8d538:	003fa606 	br	8d3d4 <__umoddi3+0x4bc>
   8d53c:	157f912e 	bgeu	r2,r21,8d384 <__umoddi3+0x46c>
   8d540:	e73fffc4 	addi	fp,fp,-1
   8d544:	1585883a 	add	r2,r2,r22
   8d548:	003f8e06 	br	8d384 <__umoddi3+0x46c>
   8d54c:	157f542e 	bgeu	r2,r21,8d2a0 <__umoddi3+0x388>
   8d550:	14c5883a 	add	r2,r2,r19
   8d554:	003f5206 	br	8d2a0 <__umoddi3+0x388>
   8d558:	14c5883a 	add	r2,r2,r19
   8d55c:	003efc06 	br	8d150 <__umoddi3+0x238>
   8d560:	14c5883a 	add	r2,r2,r19
   8d564:	003ea606 	br	8d000 <__umoddi3+0xe8>
   8d568:	d8800117 	ldw	r2,4(sp)
   8d56c:	113fc836 	bltu	r2,r4,8d490 <__umoddi3+0x578>
   8d570:	000d883a 	mov	r6,zero
   8d574:	003fcd06 	br	8d4ac <__umoddi3+0x594>

0008d578 <__nedf2>:
   8d578:	deffef04 	addi	sp,sp,-68
   8d57c:	dc400f15 	stw	r17,60(sp)
   8d580:	dc400404 	addi	r17,sp,16
   8d584:	2005883a 	mov	r2,r4
   8d588:	2807883a 	mov	r3,r5
   8d58c:	dc000e15 	stw	r16,56(sp)
   8d590:	d809883a 	mov	r4,sp
   8d594:	880b883a 	mov	r5,r17
   8d598:	dc000904 	addi	r16,sp,36
   8d59c:	d8c00115 	stw	r3,4(sp)
   8d5a0:	d8800015 	stw	r2,0(sp)
   8d5a4:	d9800215 	stw	r6,8(sp)
   8d5a8:	dfc01015 	stw	ra,64(sp)
   8d5ac:	d9c00315 	stw	r7,12(sp)
   8d5b0:	00848c00 	call	848c0 <__unpack_d>
   8d5b4:	d9000204 	addi	r4,sp,8
   8d5b8:	800b883a 	mov	r5,r16
   8d5bc:	00848c00 	call	848c0 <__unpack_d>
   8d5c0:	d8800417 	ldw	r2,16(sp)
   8d5c4:	00c00044 	movi	r3,1
   8d5c8:	180d883a 	mov	r6,r3
   8d5cc:	1880062e 	bgeu	r3,r2,8d5e8 <__nedf2+0x70>
   8d5d0:	d8800917 	ldw	r2,36(sp)
   8d5d4:	8809883a 	mov	r4,r17
   8d5d8:	800b883a 	mov	r5,r16
   8d5dc:	1880022e 	bgeu	r3,r2,8d5e8 <__nedf2+0x70>
   8d5e0:	00849f80 	call	849f8 <__fpcmp_parts_d>
   8d5e4:	100d883a 	mov	r6,r2
   8d5e8:	3005883a 	mov	r2,r6
   8d5ec:	dfc01017 	ldw	ra,64(sp)
   8d5f0:	dc400f17 	ldw	r17,60(sp)
   8d5f4:	dc000e17 	ldw	r16,56(sp)
   8d5f8:	dec01104 	addi	sp,sp,68
   8d5fc:	f800283a 	ret

0008d600 <__ltdf2>:
   8d600:	deffef04 	addi	sp,sp,-68
   8d604:	dc400f15 	stw	r17,60(sp)
   8d608:	dc400404 	addi	r17,sp,16
   8d60c:	2005883a 	mov	r2,r4
   8d610:	2807883a 	mov	r3,r5
   8d614:	dc000e15 	stw	r16,56(sp)
   8d618:	d809883a 	mov	r4,sp
   8d61c:	880b883a 	mov	r5,r17
   8d620:	dc000904 	addi	r16,sp,36
   8d624:	d8c00115 	stw	r3,4(sp)
   8d628:	d8800015 	stw	r2,0(sp)
   8d62c:	d9800215 	stw	r6,8(sp)
   8d630:	dfc01015 	stw	ra,64(sp)
   8d634:	d9c00315 	stw	r7,12(sp)
   8d638:	00848c00 	call	848c0 <__unpack_d>
   8d63c:	d9000204 	addi	r4,sp,8
   8d640:	800b883a 	mov	r5,r16
   8d644:	00848c00 	call	848c0 <__unpack_d>
   8d648:	d8800417 	ldw	r2,16(sp)
   8d64c:	00c00044 	movi	r3,1
   8d650:	180d883a 	mov	r6,r3
   8d654:	1880062e 	bgeu	r3,r2,8d670 <__ltdf2+0x70>
   8d658:	d8800917 	ldw	r2,36(sp)
   8d65c:	8809883a 	mov	r4,r17
   8d660:	800b883a 	mov	r5,r16
   8d664:	1880022e 	bgeu	r3,r2,8d670 <__ltdf2+0x70>
   8d668:	00849f80 	call	849f8 <__fpcmp_parts_d>
   8d66c:	100d883a 	mov	r6,r2
   8d670:	3005883a 	mov	r2,r6
   8d674:	dfc01017 	ldw	ra,64(sp)
   8d678:	dc400f17 	ldw	r17,60(sp)
   8d67c:	dc000e17 	ldw	r16,56(sp)
   8d680:	dec01104 	addi	sp,sp,68
   8d684:	f800283a 	ret

0008d688 <__floatunsidf>:
   8d688:	defff204 	addi	sp,sp,-56
   8d68c:	dfc00d15 	stw	ra,52(sp)
   8d690:	ddc00c15 	stw	r23,48(sp)
   8d694:	dd800b15 	stw	r22,44(sp)
   8d698:	dd400a15 	stw	r21,40(sp)
   8d69c:	dd000915 	stw	r20,36(sp)
   8d6a0:	dcc00815 	stw	r19,32(sp)
   8d6a4:	dc800715 	stw	r18,28(sp)
   8d6a8:	dc400615 	stw	r17,24(sp)
   8d6ac:	dc000515 	stw	r16,20(sp)
   8d6b0:	d8000115 	stw	zero,4(sp)
   8d6b4:	20000f1e 	bne	r4,zero,8d6f4 <__floatunsidf+0x6c>
   8d6b8:	00800084 	movi	r2,2
   8d6bc:	d8800015 	stw	r2,0(sp)
   8d6c0:	d809883a 	mov	r4,sp
   8d6c4:	00845ac0 	call	845ac <__pack_d>
   8d6c8:	dfc00d17 	ldw	ra,52(sp)
   8d6cc:	ddc00c17 	ldw	r23,48(sp)
   8d6d0:	dd800b17 	ldw	r22,44(sp)
   8d6d4:	dd400a17 	ldw	r21,40(sp)
   8d6d8:	dd000917 	ldw	r20,36(sp)
   8d6dc:	dcc00817 	ldw	r19,32(sp)
   8d6e0:	dc800717 	ldw	r18,28(sp)
   8d6e4:	dc400617 	ldw	r17,24(sp)
   8d6e8:	dc000517 	ldw	r16,20(sp)
   8d6ec:	dec00e04 	addi	sp,sp,56
   8d6f0:	f800283a 	ret
   8d6f4:	008000c4 	movi	r2,3
   8d6f8:	00c00f04 	movi	r3,60
   8d6fc:	002f883a 	mov	r23,zero
   8d700:	202d883a 	mov	r22,r4
   8d704:	d8800015 	stw	r2,0(sp)
   8d708:	d8c00215 	stw	r3,8(sp)
   8d70c:	d9000315 	stw	r4,12(sp)
   8d710:	ddc00415 	stw	r23,16(sp)
   8d714:	008452c0 	call	8452c <__clzsi2>
   8d718:	12400744 	addi	r9,r2,29
   8d71c:	48000b16 	blt	r9,zero,8d74c <__floatunsidf+0xc4>
   8d720:	483fe726 	beq	r9,zero,8d6c0 <__floatunsidf+0x38>
   8d724:	10bfff44 	addi	r2,r2,-3
   8d728:	10002e16 	blt	r2,zero,8d7e4 <__floatunsidf+0x15c>
   8d72c:	b0a2983a 	sll	r17,r22,r2
   8d730:	0021883a 	mov	r16,zero
   8d734:	d8800217 	ldw	r2,8(sp)
   8d738:	dc400415 	stw	r17,16(sp)
   8d73c:	dc000315 	stw	r16,12(sp)
   8d740:	1245c83a 	sub	r2,r2,r9
   8d744:	d8800215 	stw	r2,8(sp)
   8d748:	003fdd06 	br	8d6c0 <__floatunsidf+0x38>
   8d74c:	0255c83a 	sub	r10,zero,r9
   8d750:	51bff804 	addi	r6,r10,-32
   8d754:	30001b16 	blt	r6,zero,8d7c4 <__floatunsidf+0x13c>
   8d758:	b9a8d83a 	srl	r20,r23,r6
   8d75c:	002b883a 	mov	r21,zero
   8d760:	000f883a 	mov	r7,zero
   8d764:	01000044 	movi	r4,1
   8d768:	0011883a 	mov	r8,zero
   8d76c:	30002516 	blt	r6,zero,8d804 <__floatunsidf+0x17c>
   8d770:	21a6983a 	sll	r19,r4,r6
   8d774:	0025883a 	mov	r18,zero
   8d778:	00bfffc4 	movi	r2,-1
   8d77c:	9089883a 	add	r4,r18,r2
   8d780:	988b883a 	add	r5,r19,r2
   8d784:	248d803a 	cmpltu	r6,r4,r18
   8d788:	314b883a 	add	r5,r6,r5
   8d78c:	b104703a 	and	r2,r22,r4
   8d790:	b946703a 	and	r3,r23,r5
   8d794:	10c4b03a 	or	r2,r2,r3
   8d798:	10000226 	beq	r2,zero,8d7a4 <__floatunsidf+0x11c>
   8d79c:	01c00044 	movi	r7,1
   8d7a0:	0011883a 	mov	r8,zero
   8d7a4:	d9000217 	ldw	r4,8(sp)
   8d7a8:	a1c4b03a 	or	r2,r20,r7
   8d7ac:	aa06b03a 	or	r3,r21,r8
   8d7b0:	2249c83a 	sub	r4,r4,r9
   8d7b4:	d8c00415 	stw	r3,16(sp)
   8d7b8:	d9000215 	stw	r4,8(sp)
   8d7bc:	d8800315 	stw	r2,12(sp)
   8d7c0:	003fbf06 	br	8d6c0 <__floatunsidf+0x38>
   8d7c4:	bdc7883a 	add	r3,r23,r23
   8d7c8:	008007c4 	movi	r2,31
   8d7cc:	1285c83a 	sub	r2,r2,r10
   8d7d0:	1886983a 	sll	r3,r3,r2
   8d7d4:	b2a8d83a 	srl	r20,r22,r10
   8d7d8:	baaad83a 	srl	r21,r23,r10
   8d7dc:	1d28b03a 	or	r20,r3,r20
   8d7e0:	003fdf06 	br	8d760 <__floatunsidf+0xd8>
   8d7e4:	b006d07a 	srli	r3,r22,1
   8d7e8:	008007c4 	movi	r2,31
   8d7ec:	1245c83a 	sub	r2,r2,r9
   8d7f0:	1886d83a 	srl	r3,r3,r2
   8d7f4:	ba62983a 	sll	r17,r23,r9
   8d7f8:	b260983a 	sll	r16,r22,r9
   8d7fc:	1c62b03a 	or	r17,r3,r17
   8d800:	003fcc06 	br	8d734 <__floatunsidf+0xac>
   8d804:	2006d07a 	srli	r3,r4,1
   8d808:	008007c4 	movi	r2,31
   8d80c:	1285c83a 	sub	r2,r2,r10
   8d810:	18a6d83a 	srl	r19,r3,r2
   8d814:	22a4983a 	sll	r18,r4,r10
   8d818:	003fd706 	br	8d778 <__floatunsidf+0xf0>

0008d81c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8d81c:	defff804 	addi	sp,sp,-32
   8d820:	dfc00715 	stw	ra,28(sp)
   8d824:	df000615 	stw	fp,24(sp)
   8d828:	df000604 	addi	fp,sp,24
   8d82c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8d830:	e0bffc17 	ldw	r2,-16(fp)
   8d834:	1004803a 	cmplt	r2,r2,zero
   8d838:	1000091e 	bne	r2,zero,8d860 <close+0x44>
   8d83c:	e13ffc17 	ldw	r4,-16(fp)
   8d840:	01400304 	movi	r5,12
   8d844:	00843d00 	call	843d0 <__mulsi3>
   8d848:	1007883a 	mov	r3,r2
   8d84c:	00800274 	movhi	r2,9
   8d850:	108e5304 	addi	r2,r2,14668
   8d854:	1887883a 	add	r3,r3,r2
   8d858:	e0ffff15 	stw	r3,-4(fp)
   8d85c:	00000106 	br	8d864 <close+0x48>
   8d860:	e03fff15 	stw	zero,-4(fp)
   8d864:	e0bfff17 	ldw	r2,-4(fp)
   8d868:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   8d86c:	e0bffb17 	ldw	r2,-20(fp)
   8d870:	1005003a 	cmpeq	r2,r2,zero
   8d874:	10001d1e 	bne	r2,zero,8d8ec <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8d878:	e0bffb17 	ldw	r2,-20(fp)
   8d87c:	10800017 	ldw	r2,0(r2)
   8d880:	10800417 	ldw	r2,16(r2)
   8d884:	1005003a 	cmpeq	r2,r2,zero
   8d888:	1000071e 	bne	r2,zero,8d8a8 <close+0x8c>
   8d88c:	e0bffb17 	ldw	r2,-20(fp)
   8d890:	10800017 	ldw	r2,0(r2)
   8d894:	10800417 	ldw	r2,16(r2)
   8d898:	e13ffb17 	ldw	r4,-20(fp)
   8d89c:	103ee83a 	callr	r2
   8d8a0:	e0bffe15 	stw	r2,-8(fp)
   8d8a4:	00000106 	br	8d8ac <close+0x90>
   8d8a8:	e03ffe15 	stw	zero,-8(fp)
   8d8ac:	e0bffe17 	ldw	r2,-8(fp)
   8d8b0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8d8b4:	e13ffc17 	ldw	r4,-16(fp)
   8d8b8:	008e5f00 	call	8e5f0 <alt_release_fd>
    if (rval < 0)
   8d8bc:	e0bffa17 	ldw	r2,-24(fp)
   8d8c0:	1004403a 	cmpge	r2,r2,zero
   8d8c4:	1000071e 	bne	r2,zero,8d8e4 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   8d8c8:	008d91c0 	call	8d91c <alt_get_errno>
   8d8cc:	e0fffa17 	ldw	r3,-24(fp)
   8d8d0:	00c7c83a 	sub	r3,zero,r3
   8d8d4:	10c00015 	stw	r3,0(r2)
      return -1;
   8d8d8:	00bfffc4 	movi	r2,-1
   8d8dc:	e0bffd15 	stw	r2,-12(fp)
   8d8e0:	00000806 	br	8d904 <close+0xe8>
    }
    return 0;
   8d8e4:	e03ffd15 	stw	zero,-12(fp)
   8d8e8:	00000606 	br	8d904 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8d8ec:	008d91c0 	call	8d91c <alt_get_errno>
   8d8f0:	1007883a 	mov	r3,r2
   8d8f4:	00801444 	movi	r2,81
   8d8f8:	18800015 	stw	r2,0(r3)
    return -1;
   8d8fc:	00bfffc4 	movi	r2,-1
   8d900:	e0bffd15 	stw	r2,-12(fp)
   8d904:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   8d908:	e037883a 	mov	sp,fp
   8d90c:	dfc00117 	ldw	ra,4(sp)
   8d910:	df000017 	ldw	fp,0(sp)
   8d914:	dec00204 	addi	sp,sp,8
   8d918:	f800283a 	ret

0008d91c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d91c:	defffd04 	addi	sp,sp,-12
   8d920:	dfc00215 	stw	ra,8(sp)
   8d924:	df000115 	stw	fp,4(sp)
   8d928:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8d92c:	00800274 	movhi	r2,9
   8d930:	10933804 	addi	r2,r2,19680
   8d934:	10800017 	ldw	r2,0(r2)
   8d938:	1005003a 	cmpeq	r2,r2,zero
   8d93c:	1000061e 	bne	r2,zero,8d958 <alt_get_errno+0x3c>
   8d940:	00800274 	movhi	r2,9
   8d944:	10933804 	addi	r2,r2,19680
   8d948:	10800017 	ldw	r2,0(r2)
   8d94c:	103ee83a 	callr	r2
   8d950:	e0bfff15 	stw	r2,-4(fp)
   8d954:	00000306 	br	8d964 <alt_get_errno+0x48>
   8d958:	00800274 	movhi	r2,9
   8d95c:	109a3a04 	addi	r2,r2,26856
   8d960:	e0bfff15 	stw	r2,-4(fp)
   8d964:	e0bfff17 	ldw	r2,-4(fp)
}
   8d968:	e037883a 	mov	sp,fp
   8d96c:	dfc00117 	ldw	ra,4(sp)
   8d970:	df000017 	ldw	fp,0(sp)
   8d974:	dec00204 	addi	sp,sp,8
   8d978:	f800283a 	ret

0008d97c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8d97c:	defffc04 	addi	sp,sp,-16
   8d980:	df000315 	stw	fp,12(sp)
   8d984:	df000304 	addi	fp,sp,12
   8d988:	e13ffd15 	stw	r4,-12(fp)
   8d98c:	e17ffe15 	stw	r5,-8(fp)
   8d990:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8d994:	e0bfff17 	ldw	r2,-4(fp)
}
   8d998:	e037883a 	mov	sp,fp
   8d99c:	df000017 	ldw	fp,0(sp)
   8d9a0:	dec00104 	addi	sp,sp,4
   8d9a4:	f800283a 	ret

0008d9a8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8d9a8:	defff904 	addi	sp,sp,-28
   8d9ac:	dfc00615 	stw	ra,24(sp)
   8d9b0:	df000515 	stw	fp,20(sp)
   8d9b4:	df000504 	addi	fp,sp,20
   8d9b8:	e13ffc15 	stw	r4,-16(fp)
   8d9bc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8d9c0:	e0bffc17 	ldw	r2,-16(fp)
   8d9c4:	1004803a 	cmplt	r2,r2,zero
   8d9c8:	1000091e 	bne	r2,zero,8d9f0 <fstat+0x48>
   8d9cc:	e13ffc17 	ldw	r4,-16(fp)
   8d9d0:	01400304 	movi	r5,12
   8d9d4:	00843d00 	call	843d0 <__mulsi3>
   8d9d8:	1007883a 	mov	r3,r2
   8d9dc:	00800274 	movhi	r2,9
   8d9e0:	108e5304 	addi	r2,r2,14668
   8d9e4:	1887883a 	add	r3,r3,r2
   8d9e8:	e0ffff15 	stw	r3,-4(fp)
   8d9ec:	00000106 	br	8d9f4 <fstat+0x4c>
   8d9f0:	e03fff15 	stw	zero,-4(fp)
   8d9f4:	e0bfff17 	ldw	r2,-4(fp)
   8d9f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8d9fc:	e0bffb17 	ldw	r2,-20(fp)
   8da00:	1005003a 	cmpeq	r2,r2,zero
   8da04:	1000121e 	bne	r2,zero,8da50 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8da08:	e0bffb17 	ldw	r2,-20(fp)
   8da0c:	10800017 	ldw	r2,0(r2)
   8da10:	10800817 	ldw	r2,32(r2)
   8da14:	1005003a 	cmpeq	r2,r2,zero
   8da18:	1000081e 	bne	r2,zero,8da3c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   8da1c:	e0bffb17 	ldw	r2,-20(fp)
   8da20:	10800017 	ldw	r2,0(r2)
   8da24:	10800817 	ldw	r2,32(r2)
   8da28:	e13ffb17 	ldw	r4,-20(fp)
   8da2c:	e17ffd17 	ldw	r5,-12(fp)
   8da30:	103ee83a 	callr	r2
   8da34:	e0bffe15 	stw	r2,-8(fp)
   8da38:	00000b06 	br	8da68 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8da3c:	e0fffd17 	ldw	r3,-12(fp)
   8da40:	00880004 	movi	r2,8192
   8da44:	18800115 	stw	r2,4(r3)
      return 0;
   8da48:	e03ffe15 	stw	zero,-8(fp)
   8da4c:	00000606 	br	8da68 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8da50:	008da800 	call	8da80 <alt_get_errno>
   8da54:	1007883a 	mov	r3,r2
   8da58:	00801444 	movi	r2,81
   8da5c:	18800015 	stw	r2,0(r3)
    return -1;
   8da60:	00bfffc4 	movi	r2,-1
   8da64:	e0bffe15 	stw	r2,-8(fp)
   8da68:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8da6c:	e037883a 	mov	sp,fp
   8da70:	dfc00117 	ldw	ra,4(sp)
   8da74:	df000017 	ldw	fp,0(sp)
   8da78:	dec00204 	addi	sp,sp,8
   8da7c:	f800283a 	ret

0008da80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8da80:	defffd04 	addi	sp,sp,-12
   8da84:	dfc00215 	stw	ra,8(sp)
   8da88:	df000115 	stw	fp,4(sp)
   8da8c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8da90:	00800274 	movhi	r2,9
   8da94:	10933804 	addi	r2,r2,19680
   8da98:	10800017 	ldw	r2,0(r2)
   8da9c:	1005003a 	cmpeq	r2,r2,zero
   8daa0:	1000061e 	bne	r2,zero,8dabc <alt_get_errno+0x3c>
   8daa4:	00800274 	movhi	r2,9
   8daa8:	10933804 	addi	r2,r2,19680
   8daac:	10800017 	ldw	r2,0(r2)
   8dab0:	103ee83a 	callr	r2
   8dab4:	e0bfff15 	stw	r2,-4(fp)
   8dab8:	00000306 	br	8dac8 <alt_get_errno+0x48>
   8dabc:	00800274 	movhi	r2,9
   8dac0:	109a3a04 	addi	r2,r2,26856
   8dac4:	e0bfff15 	stw	r2,-4(fp)
   8dac8:	e0bfff17 	ldw	r2,-4(fp)
}
   8dacc:	e037883a 	mov	sp,fp
   8dad0:	dfc00117 	ldw	ra,4(sp)
   8dad4:	df000017 	ldw	fp,0(sp)
   8dad8:	dec00204 	addi	sp,sp,8
   8dadc:	f800283a 	ret

0008dae0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8dae0:	deffeb04 	addi	sp,sp,-84
   8dae4:	dfc01415 	stw	ra,80(sp)
   8dae8:	df001315 	stw	fp,76(sp)
   8daec:	df001304 	addi	fp,sp,76
   8daf0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8daf4:	e0bffd17 	ldw	r2,-12(fp)
   8daf8:	1004803a 	cmplt	r2,r2,zero
   8dafc:	1000091e 	bne	r2,zero,8db24 <isatty+0x44>
   8db00:	e13ffd17 	ldw	r4,-12(fp)
   8db04:	01400304 	movi	r5,12
   8db08:	00843d00 	call	843d0 <__mulsi3>
   8db0c:	1007883a 	mov	r3,r2
   8db10:	00800274 	movhi	r2,9
   8db14:	108e5304 	addi	r2,r2,14668
   8db18:	1887883a 	add	r3,r3,r2
   8db1c:	e0ffff15 	stw	r3,-4(fp)
   8db20:	00000106 	br	8db28 <isatty+0x48>
   8db24:	e03fff15 	stw	zero,-4(fp)
   8db28:	e0bfff17 	ldw	r2,-4(fp)
   8db2c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   8db30:	e0bfed17 	ldw	r2,-76(fp)
   8db34:	1005003a 	cmpeq	r2,r2,zero
   8db38:	10000f1e 	bne	r2,zero,8db78 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8db3c:	e0bfed17 	ldw	r2,-76(fp)
   8db40:	10800017 	ldw	r2,0(r2)
   8db44:	10800817 	ldw	r2,32(r2)
   8db48:	1004c03a 	cmpne	r2,r2,zero
   8db4c:	1000031e 	bne	r2,zero,8db5c <isatty+0x7c>
    {
      return 1;
   8db50:	00800044 	movi	r2,1
   8db54:	e0bffe15 	stw	r2,-8(fp)
   8db58:	00000c06 	br	8db8c <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8db5c:	e17fee04 	addi	r5,fp,-72
   8db60:	e13ffd17 	ldw	r4,-12(fp)
   8db64:	008d9a80 	call	8d9a8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8db68:	e0bfef17 	ldw	r2,-68(fp)
   8db6c:	10880020 	cmpeqi	r2,r2,8192
   8db70:	e0bffe15 	stw	r2,-8(fp)
   8db74:	00000506 	br	8db8c <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8db78:	008dba40 	call	8dba4 <alt_get_errno>
   8db7c:	1007883a 	mov	r3,r2
   8db80:	00801444 	movi	r2,81
   8db84:	18800015 	stw	r2,0(r3)
    return 0;
   8db88:	e03ffe15 	stw	zero,-8(fp)
   8db8c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8db90:	e037883a 	mov	sp,fp
   8db94:	dfc00117 	ldw	ra,4(sp)
   8db98:	df000017 	ldw	fp,0(sp)
   8db9c:	dec00204 	addi	sp,sp,8
   8dba0:	f800283a 	ret

0008dba4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8dba4:	defffd04 	addi	sp,sp,-12
   8dba8:	dfc00215 	stw	ra,8(sp)
   8dbac:	df000115 	stw	fp,4(sp)
   8dbb0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8dbb4:	00800274 	movhi	r2,9
   8dbb8:	10933804 	addi	r2,r2,19680
   8dbbc:	10800017 	ldw	r2,0(r2)
   8dbc0:	1005003a 	cmpeq	r2,r2,zero
   8dbc4:	1000061e 	bne	r2,zero,8dbe0 <alt_get_errno+0x3c>
   8dbc8:	00800274 	movhi	r2,9
   8dbcc:	10933804 	addi	r2,r2,19680
   8dbd0:	10800017 	ldw	r2,0(r2)
   8dbd4:	103ee83a 	callr	r2
   8dbd8:	e0bfff15 	stw	r2,-4(fp)
   8dbdc:	00000306 	br	8dbec <alt_get_errno+0x48>
   8dbe0:	00800274 	movhi	r2,9
   8dbe4:	109a3a04 	addi	r2,r2,26856
   8dbe8:	e0bfff15 	stw	r2,-4(fp)
   8dbec:	e0bfff17 	ldw	r2,-4(fp)
}
   8dbf0:	e037883a 	mov	sp,fp
   8dbf4:	dfc00117 	ldw	ra,4(sp)
   8dbf8:	df000017 	ldw	fp,0(sp)
   8dbfc:	dec00204 	addi	sp,sp,8
   8dc00:	f800283a 	ret

0008dc04 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8dc04:	defffe04 	addi	sp,sp,-8
   8dc08:	dfc00115 	stw	ra,4(sp)
   8dc0c:	df000015 	stw	fp,0(sp)
   8dc10:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8dc14:	01000274 	movhi	r4,9
   8dc18:	21133f04 	addi	r4,r4,19708
   8dc1c:	01400274 	movhi	r5,9
   8dc20:	294c4404 	addi	r5,r5,12560
   8dc24:	01800274 	movhi	r6,9
   8dc28:	31933f04 	addi	r6,r6,19708
   8dc2c:	008dc840 	call	8dc84 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8dc30:	01000234 	movhi	r4,8
   8dc34:	21000804 	addi	r4,r4,32
   8dc38:	01400234 	movhi	r5,8
   8dc3c:	29400804 	addi	r5,r5,32
   8dc40:	01800234 	movhi	r6,8
   8dc44:	31806e04 	addi	r6,r6,440
   8dc48:	008dc840 	call	8dc84 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8dc4c:	01000274 	movhi	r4,9
   8dc50:	2109da04 	addi	r4,r4,10088
   8dc54:	01400274 	movhi	r5,9
   8dc58:	2949da04 	addi	r5,r5,10088
   8dc5c:	01800274 	movhi	r6,9
   8dc60:	318c4404 	addi	r6,r6,12560
   8dc64:	008dc840 	call	8dc84 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8dc68:	009152c0 	call	9152c <alt_dcache_flush_all>
  alt_icache_flush_all();
   8dc6c:	00919a80 	call	919a8 <alt_icache_flush_all>
}
   8dc70:	e037883a 	mov	sp,fp
   8dc74:	dfc00117 	ldw	ra,4(sp)
   8dc78:	df000017 	ldw	fp,0(sp)
   8dc7c:	dec00204 	addi	sp,sp,8
   8dc80:	f800283a 	ret

0008dc84 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8dc84:	defffc04 	addi	sp,sp,-16
   8dc88:	df000315 	stw	fp,12(sp)
   8dc8c:	df000304 	addi	fp,sp,12
   8dc90:	e13ffd15 	stw	r4,-12(fp)
   8dc94:	e17ffe15 	stw	r5,-8(fp)
   8dc98:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8dc9c:	e0fffe17 	ldw	r3,-8(fp)
   8dca0:	e0bffd17 	ldw	r2,-12(fp)
   8dca4:	18800e26 	beq	r3,r2,8dce0 <alt_load_section+0x5c>
  {
    while( to != end )
   8dca8:	00000a06 	br	8dcd4 <alt_load_section+0x50>
    {
      *to++ = *from++;
   8dcac:	e0bffd17 	ldw	r2,-12(fp)
   8dcb0:	10c00017 	ldw	r3,0(r2)
   8dcb4:	e0bffe17 	ldw	r2,-8(fp)
   8dcb8:	10c00015 	stw	r3,0(r2)
   8dcbc:	e0bffe17 	ldw	r2,-8(fp)
   8dcc0:	10800104 	addi	r2,r2,4
   8dcc4:	e0bffe15 	stw	r2,-8(fp)
   8dcc8:	e0bffd17 	ldw	r2,-12(fp)
   8dccc:	10800104 	addi	r2,r2,4
   8dcd0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8dcd4:	e0fffe17 	ldw	r3,-8(fp)
   8dcd8:	e0bfff17 	ldw	r2,-4(fp)
   8dcdc:	18bff31e 	bne	r3,r2,8dcac <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8dce0:	e037883a 	mov	sp,fp
   8dce4:	df000017 	ldw	fp,0(sp)
   8dce8:	dec00104 	addi	sp,sp,4
   8dcec:	f800283a 	ret

0008dcf0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8dcf0:	defff804 	addi	sp,sp,-32
   8dcf4:	dfc00715 	stw	ra,28(sp)
   8dcf8:	df000615 	stw	fp,24(sp)
   8dcfc:	df000604 	addi	fp,sp,24
   8dd00:	e13ffc15 	stw	r4,-16(fp)
   8dd04:	e17ffd15 	stw	r5,-12(fp)
   8dd08:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8dd0c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8dd10:	e0bffc17 	ldw	r2,-16(fp)
   8dd14:	1004803a 	cmplt	r2,r2,zero
   8dd18:	1000091e 	bne	r2,zero,8dd40 <lseek+0x50>
   8dd1c:	e13ffc17 	ldw	r4,-16(fp)
   8dd20:	01400304 	movi	r5,12
   8dd24:	00843d00 	call	843d0 <__mulsi3>
   8dd28:	1007883a 	mov	r3,r2
   8dd2c:	00800274 	movhi	r2,9
   8dd30:	108e5304 	addi	r2,r2,14668
   8dd34:	1887883a 	add	r3,r3,r2
   8dd38:	e0ffff15 	stw	r3,-4(fp)
   8dd3c:	00000106 	br	8dd44 <lseek+0x54>
   8dd40:	e03fff15 	stw	zero,-4(fp)
   8dd44:	e0bfff17 	ldw	r2,-4(fp)
   8dd48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   8dd4c:	e0bffb17 	ldw	r2,-20(fp)
   8dd50:	1005003a 	cmpeq	r2,r2,zero
   8dd54:	1000111e 	bne	r2,zero,8dd9c <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8dd58:	e0bffb17 	ldw	r2,-20(fp)
   8dd5c:	10800017 	ldw	r2,0(r2)
   8dd60:	10800717 	ldw	r2,28(r2)
   8dd64:	1005003a 	cmpeq	r2,r2,zero
   8dd68:	1000091e 	bne	r2,zero,8dd90 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8dd6c:	e0bffb17 	ldw	r2,-20(fp)
   8dd70:	10800017 	ldw	r2,0(r2)
   8dd74:	10800717 	ldw	r2,28(r2)
   8dd78:	e13ffb17 	ldw	r4,-20(fp)
   8dd7c:	e17ffd17 	ldw	r5,-12(fp)
   8dd80:	e1bffe17 	ldw	r6,-8(fp)
   8dd84:	103ee83a 	callr	r2
   8dd88:	e0bffa15 	stw	r2,-24(fp)
   8dd8c:	00000506 	br	8dda4 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8dd90:	00bfde84 	movi	r2,-134
   8dd94:	e0bffa15 	stw	r2,-24(fp)
   8dd98:	00000206 	br	8dda4 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   8dd9c:	00bfebc4 	movi	r2,-81
   8dda0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   8dda4:	e0bffa17 	ldw	r2,-24(fp)
   8dda8:	1004403a 	cmpge	r2,r2,zero
   8ddac:	1000071e 	bne	r2,zero,8ddcc <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   8ddb0:	008dde40 	call	8dde4 <alt_get_errno>
   8ddb4:	1007883a 	mov	r3,r2
   8ddb8:	e0bffa17 	ldw	r2,-24(fp)
   8ddbc:	0085c83a 	sub	r2,zero,r2
   8ddc0:	18800015 	stw	r2,0(r3)
    rc = -1;
   8ddc4:	00bfffc4 	movi	r2,-1
   8ddc8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   8ddcc:	e0bffa17 	ldw	r2,-24(fp)
}
   8ddd0:	e037883a 	mov	sp,fp
   8ddd4:	dfc00117 	ldw	ra,4(sp)
   8ddd8:	df000017 	ldw	fp,0(sp)
   8dddc:	dec00204 	addi	sp,sp,8
   8dde0:	f800283a 	ret

0008dde4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8dde4:	defffd04 	addi	sp,sp,-12
   8dde8:	dfc00215 	stw	ra,8(sp)
   8ddec:	df000115 	stw	fp,4(sp)
   8ddf0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8ddf4:	00800274 	movhi	r2,9
   8ddf8:	10933804 	addi	r2,r2,19680
   8ddfc:	10800017 	ldw	r2,0(r2)
   8de00:	1005003a 	cmpeq	r2,r2,zero
   8de04:	1000061e 	bne	r2,zero,8de20 <alt_get_errno+0x3c>
   8de08:	00800274 	movhi	r2,9
   8de0c:	10933804 	addi	r2,r2,19680
   8de10:	10800017 	ldw	r2,0(r2)
   8de14:	103ee83a 	callr	r2
   8de18:	e0bfff15 	stw	r2,-4(fp)
   8de1c:	00000306 	br	8de2c <alt_get_errno+0x48>
   8de20:	00800274 	movhi	r2,9
   8de24:	109a3a04 	addi	r2,r2,26856
   8de28:	e0bfff15 	stw	r2,-4(fp)
   8de2c:	e0bfff17 	ldw	r2,-4(fp)
}
   8de30:	e037883a 	mov	sp,fp
   8de34:	dfc00117 	ldw	ra,4(sp)
   8de38:	df000017 	ldw	fp,0(sp)
   8de3c:	dec00204 	addi	sp,sp,8
   8de40:	f800283a 	ret

0008de44 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8de44:	defffd04 	addi	sp,sp,-12
   8de48:	dfc00215 	stw	ra,8(sp)
   8de4c:	df000115 	stw	fp,4(sp)
   8de50:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8de54:	0009883a 	mov	r4,zero
   8de58:	008e8a80 	call	8e8a8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8de5c:	008e8dc0 	call	8e8dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8de60:	01000274 	movhi	r4,9
   8de64:	210b8a04 	addi	r4,r4,11816
   8de68:	01400274 	movhi	r5,9
   8de6c:	294b8a04 	addi	r5,r5,11816
   8de70:	01800274 	movhi	r6,9
   8de74:	318b8a04 	addi	r6,r6,11816
   8de78:	0091a9c0 	call	91a9c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8de7c:	009165c0 	call	9165c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8de80:	01000274 	movhi	r4,9
   8de84:	2105b004 	addi	r4,r4,5824
   8de88:	00920240 	call	92024 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8de8c:	d1271417 	ldw	r4,-25520(gp)
   8de90:	d1671517 	ldw	r5,-25516(gp)
   8de94:	d1a71617 	ldw	r6,-25512(gp)
   8de98:	0080ae40 	call	80ae4 <main>
   8de9c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8dea0:	01000044 	movi	r4,1
   8dea4:	008d81c0 	call	8d81c <close>
  exit (result);
   8dea8:	e13fff17 	ldw	r4,-4(fp)
   8deac:	00920380 	call	92038 <exit>

0008deb0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8deb0:	defffe04 	addi	sp,sp,-8
   8deb4:	df000115 	stw	fp,4(sp)
   8deb8:	df000104 	addi	fp,sp,4
   8debc:	e13fff15 	stw	r4,-4(fp)
}
   8dec0:	e037883a 	mov	sp,fp
   8dec4:	df000017 	ldw	fp,0(sp)
   8dec8:	dec00104 	addi	sp,sp,4
   8decc:	f800283a 	ret

0008ded0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8ded0:	defffe04 	addi	sp,sp,-8
   8ded4:	df000115 	stw	fp,4(sp)
   8ded8:	df000104 	addi	fp,sp,4
   8dedc:	e13fff15 	stw	r4,-4(fp)
}
   8dee0:	e037883a 	mov	sp,fp
   8dee4:	df000017 	ldw	fp,0(sp)
   8dee8:	dec00104 	addi	sp,sp,4
   8deec:	f800283a 	ret

0008def0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8def0:	defffa04 	addi	sp,sp,-24
   8def4:	dfc00515 	stw	ra,20(sp)
   8def8:	df000415 	stw	fp,16(sp)
   8defc:	dc000315 	stw	r16,12(sp)
   8df00:	df000304 	addi	fp,sp,12
   8df04:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8df08:	e0bffe17 	ldw	r2,-8(fp)
   8df0c:	10800217 	ldw	r2,8(r2)
   8df10:	10d00034 	orhi	r3,r2,16384
   8df14:	e0bffe17 	ldw	r2,-8(fp)
   8df18:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8df1c:	e03ffd15 	stw	zero,-12(fp)
   8df20:	00002306 	br	8dfb0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8df24:	e13ffd17 	ldw	r4,-12(fp)
   8df28:	04000274 	movhi	r16,9
   8df2c:	840e5304 	addi	r16,r16,14668
   8df30:	01400304 	movi	r5,12
   8df34:	00843d00 	call	843d0 <__mulsi3>
   8df38:	1405883a 	add	r2,r2,r16
   8df3c:	10c00017 	ldw	r3,0(r2)
   8df40:	e0bffe17 	ldw	r2,-8(fp)
   8df44:	10800017 	ldw	r2,0(r2)
   8df48:	1880161e 	bne	r3,r2,8dfa4 <alt_file_locked+0xb4>
   8df4c:	e13ffd17 	ldw	r4,-12(fp)
   8df50:	04000274 	movhi	r16,9
   8df54:	840e5304 	addi	r16,r16,14668
   8df58:	01400304 	movi	r5,12
   8df5c:	00843d00 	call	843d0 <__mulsi3>
   8df60:	1405883a 	add	r2,r2,r16
   8df64:	10800204 	addi	r2,r2,8
   8df68:	10800017 	ldw	r2,0(r2)
   8df6c:	1004403a 	cmpge	r2,r2,zero
   8df70:	10000c1e 	bne	r2,zero,8dfa4 <alt_file_locked+0xb4>
   8df74:	e13ffd17 	ldw	r4,-12(fp)
   8df78:	01400304 	movi	r5,12
   8df7c:	00843d00 	call	843d0 <__mulsi3>
   8df80:	1007883a 	mov	r3,r2
   8df84:	00800274 	movhi	r2,9
   8df88:	108e5304 	addi	r2,r2,14668
   8df8c:	1887883a 	add	r3,r3,r2
   8df90:	e0bffe17 	ldw	r2,-8(fp)
   8df94:	18800326 	beq	r3,r2,8dfa4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8df98:	00bffcc4 	movi	r2,-13
   8df9c:	e0bfff15 	stw	r2,-4(fp)
   8dfa0:	00000a06 	br	8dfcc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8dfa4:	e0bffd17 	ldw	r2,-12(fp)
   8dfa8:	10800044 	addi	r2,r2,1
   8dfac:	e0bffd15 	stw	r2,-12(fp)
   8dfb0:	00800274 	movhi	r2,9
   8dfb4:	10933704 	addi	r2,r2,19676
   8dfb8:	10800017 	ldw	r2,0(r2)
   8dfbc:	1007883a 	mov	r3,r2
   8dfc0:	e0bffd17 	ldw	r2,-12(fp)
   8dfc4:	18bfd72e 	bgeu	r3,r2,8df24 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8dfc8:	e03fff15 	stw	zero,-4(fp)
   8dfcc:	e0bfff17 	ldw	r2,-4(fp)
}
   8dfd0:	e037883a 	mov	sp,fp
   8dfd4:	dfc00217 	ldw	ra,8(sp)
   8dfd8:	df000117 	ldw	fp,4(sp)
   8dfdc:	dc000017 	ldw	r16,0(sp)
   8dfe0:	dec00304 	addi	sp,sp,12
   8dfe4:	f800283a 	ret

0008dfe8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8dfe8:	defff404 	addi	sp,sp,-48
   8dfec:	dfc00b15 	stw	ra,44(sp)
   8dff0:	df000a15 	stw	fp,40(sp)
   8dff4:	df000a04 	addi	fp,sp,40
   8dff8:	e13ffb15 	stw	r4,-20(fp)
   8dffc:	e17ffc15 	stw	r5,-16(fp)
   8e000:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8e004:	00bfffc4 	movi	r2,-1
   8e008:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8e00c:	00bffb44 	movi	r2,-19
   8e010:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   8e014:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8e018:	e13ffb17 	ldw	r4,-20(fp)
   8e01c:	01400274 	movhi	r5,9
   8e020:	29533504 	addi	r5,r5,19668
   8e024:	00917240 	call	91724 <alt_find_dev>
   8e028:	e0bffa15 	stw	r2,-24(fp)
   8e02c:	e0bffa17 	ldw	r2,-24(fp)
   8e030:	1004c03a 	cmpne	r2,r2,zero
   8e034:	1000051e 	bne	r2,zero,8e04c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8e038:	e13ffb17 	ldw	r4,-20(fp)
   8e03c:	00917b80 	call	917b8 <alt_find_file>
   8e040:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   8e044:	00800044 	movi	r2,1
   8e048:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8e04c:	e0bffa17 	ldw	r2,-24(fp)
   8e050:	1005003a 	cmpeq	r2,r2,zero
   8e054:	1000311e 	bne	r2,zero,8e11c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8e058:	e13ffa17 	ldw	r4,-24(fp)
   8e05c:	00918d80 	call	918d8 <alt_get_fd>
   8e060:	e0bff815 	stw	r2,-32(fp)
   8e064:	e0bff817 	ldw	r2,-32(fp)
   8e068:	1004403a 	cmpge	r2,r2,zero
   8e06c:	1000031e 	bne	r2,zero,8e07c <open+0x94>
    {
      status = index;
   8e070:	e0bff817 	ldw	r2,-32(fp)
   8e074:	e0bff715 	stw	r2,-36(fp)
   8e078:	00002a06 	br	8e124 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   8e07c:	e13ff817 	ldw	r4,-32(fp)
   8e080:	01400304 	movi	r5,12
   8e084:	00843d00 	call	843d0 <__mulsi3>
   8e088:	1007883a 	mov	r3,r2
   8e08c:	00800274 	movhi	r2,9
   8e090:	108e5304 	addi	r2,r2,14668
   8e094:	1885883a 	add	r2,r3,r2
   8e098:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8e09c:	e0fffc17 	ldw	r3,-16(fp)
   8e0a0:	00900034 	movhi	r2,16384
   8e0a4:	10bfffc4 	addi	r2,r2,-1
   8e0a8:	1886703a 	and	r3,r3,r2
   8e0ac:	e0bff917 	ldw	r2,-28(fp)
   8e0b0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8e0b4:	e0bff617 	ldw	r2,-40(fp)
   8e0b8:	1004c03a 	cmpne	r2,r2,zero
   8e0bc:	1000061e 	bne	r2,zero,8e0d8 <open+0xf0>
   8e0c0:	e13ff917 	ldw	r4,-28(fp)
   8e0c4:	008def00 	call	8def0 <alt_file_locked>
   8e0c8:	e0bff715 	stw	r2,-36(fp)
   8e0cc:	e0bff717 	ldw	r2,-36(fp)
   8e0d0:	1004803a 	cmplt	r2,r2,zero
   8e0d4:	1000131e 	bne	r2,zero,8e124 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8e0d8:	e0bffa17 	ldw	r2,-24(fp)
   8e0dc:	10800317 	ldw	r2,12(r2)
   8e0e0:	1005003a 	cmpeq	r2,r2,zero
   8e0e4:	1000091e 	bne	r2,zero,8e10c <open+0x124>
   8e0e8:	e0bffa17 	ldw	r2,-24(fp)
   8e0ec:	10800317 	ldw	r2,12(r2)
   8e0f0:	e13ff917 	ldw	r4,-28(fp)
   8e0f4:	e17ffb17 	ldw	r5,-20(fp)
   8e0f8:	e1bffc17 	ldw	r6,-16(fp)
   8e0fc:	e1fffd17 	ldw	r7,-12(fp)
   8e100:	103ee83a 	callr	r2
   8e104:	e0bfff15 	stw	r2,-4(fp)
   8e108:	00000106 	br	8e110 <open+0x128>
   8e10c:	e03fff15 	stw	zero,-4(fp)
   8e110:	e0bfff17 	ldw	r2,-4(fp)
   8e114:	e0bff715 	stw	r2,-36(fp)
   8e118:	00000206 	br	8e124 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8e11c:	00bffb44 	movi	r2,-19
   8e120:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8e124:	e0bff717 	ldw	r2,-36(fp)
   8e128:	1004403a 	cmpge	r2,r2,zero
   8e12c:	1000091e 	bne	r2,zero,8e154 <open+0x16c>
  {
    alt_release_fd (index);  
   8e130:	e13ff817 	ldw	r4,-32(fp)
   8e134:	008e5f00 	call	8e5f0 <alt_release_fd>
    ALT_ERRNO = -status;
   8e138:	008e1740 	call	8e174 <alt_get_errno>
   8e13c:	e0fff717 	ldw	r3,-36(fp)
   8e140:	00c7c83a 	sub	r3,zero,r3
   8e144:	10c00015 	stw	r3,0(r2)
    return -1;
   8e148:	00bfffc4 	movi	r2,-1
   8e14c:	e0bffe15 	stw	r2,-8(fp)
   8e150:	00000206 	br	8e15c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   8e154:	e0bff817 	ldw	r2,-32(fp)
   8e158:	e0bffe15 	stw	r2,-8(fp)
   8e15c:	e0bffe17 	ldw	r2,-8(fp)
}
   8e160:	e037883a 	mov	sp,fp
   8e164:	dfc00117 	ldw	ra,4(sp)
   8e168:	df000017 	ldw	fp,0(sp)
   8e16c:	dec00204 	addi	sp,sp,8
   8e170:	f800283a 	ret

0008e174 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e174:	defffd04 	addi	sp,sp,-12
   8e178:	dfc00215 	stw	ra,8(sp)
   8e17c:	df000115 	stw	fp,4(sp)
   8e180:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8e184:	00800274 	movhi	r2,9
   8e188:	10933804 	addi	r2,r2,19680
   8e18c:	10800017 	ldw	r2,0(r2)
   8e190:	1005003a 	cmpeq	r2,r2,zero
   8e194:	1000061e 	bne	r2,zero,8e1b0 <alt_get_errno+0x3c>
   8e198:	00800274 	movhi	r2,9
   8e19c:	10933804 	addi	r2,r2,19680
   8e1a0:	10800017 	ldw	r2,0(r2)
   8e1a4:	103ee83a 	callr	r2
   8e1a8:	e0bfff15 	stw	r2,-4(fp)
   8e1ac:	00000306 	br	8e1bc <alt_get_errno+0x48>
   8e1b0:	00800274 	movhi	r2,9
   8e1b4:	109a3a04 	addi	r2,r2,26856
   8e1b8:	e0bfff15 	stw	r2,-4(fp)
   8e1bc:	e0bfff17 	ldw	r2,-4(fp)
}
   8e1c0:	e037883a 	mov	sp,fp
   8e1c4:	dfc00117 	ldw	ra,4(sp)
   8e1c8:	df000017 	ldw	fp,0(sp)
   8e1cc:	dec00204 	addi	sp,sp,8
   8e1d0:	f800283a 	ret

0008e1d4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   8e1d4:	defff204 	addi	sp,sp,-56
   8e1d8:	dfc00a15 	stw	ra,40(sp)
   8e1dc:	df000915 	stw	fp,36(sp)
   8e1e0:	df000904 	addi	fp,sp,36
   8e1e4:	e1400215 	stw	r5,8(fp)
   8e1e8:	e1800315 	stw	r6,12(fp)
   8e1ec:	e1c00415 	stw	r7,16(fp)
   8e1f0:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
   8e1f4:	e0800204 	addi	r2,fp,8
   8e1f8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   8e1fc:	e0bfff17 	ldw	r2,-4(fp)
   8e200:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
   8e204:	00007806 	br	8e3e8 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   8e208:	e0bffc07 	ldb	r2,-16(fp)
   8e20c:	10800960 	cmpeqi	r2,r2,37
   8e210:	1000031e 	bne	r2,zero,8e220 <alt_printf+0x4c>
        {
            alt_putchar(c);
   8e214:	e13ffc07 	ldb	r4,-16(fp)
   8e218:	008e42c0 	call	8e42c <alt_putchar>
   8e21c:	00007206 	br	8e3e8 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   8e220:	e0bffd17 	ldw	r2,-12(fp)
   8e224:	10800003 	ldbu	r2,0(r2)
   8e228:	e0bffc05 	stb	r2,-16(fp)
   8e22c:	e0bffc07 	ldb	r2,-16(fp)
   8e230:	1004c03a 	cmpne	r2,r2,zero
   8e234:	1007883a 	mov	r3,r2
   8e238:	e0bffd17 	ldw	r2,-12(fp)
   8e23c:	10800044 	addi	r2,r2,1
   8e240:	e0bffd15 	stw	r2,-12(fp)
   8e244:	18803fcc 	andi	r2,r3,255
   8e248:	1005003a 	cmpeq	r2,r2,zero
   8e24c:	1000721e 	bne	r2,zero,8e418 <alt_printf+0x244>
            {
                if (c == '%')
   8e250:	e0bffc07 	ldb	r2,-16(fp)
   8e254:	10800958 	cmpnei	r2,r2,37
   8e258:	1000031e 	bne	r2,zero,8e268 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   8e25c:	e13ffc07 	ldb	r4,-16(fp)
   8e260:	008e42c0 	call	8e42c <alt_putchar>
   8e264:	00006006 	br	8e3e8 <alt_printf+0x214>
                } 
                else if (c == 'c')
   8e268:	e0bffc07 	ldb	r2,-16(fp)
   8e26c:	108018d8 	cmpnei	r2,r2,99
   8e270:	1000091e 	bne	r2,zero,8e298 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
   8e274:	e0fffe17 	ldw	r3,-8(fp)
   8e278:	18800104 	addi	r2,r3,4
   8e27c:	e0bffe15 	stw	r2,-8(fp)
   8e280:	1805883a 	mov	r2,r3
   8e284:	10800017 	ldw	r2,0(r2)
   8e288:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
   8e28c:	e13ffb17 	ldw	r4,-20(fp)
   8e290:	008e42c0 	call	8e42c <alt_putchar>
   8e294:	00005406 	br	8e3e8 <alt_printf+0x214>
                }
                else if (c == 'x')
   8e298:	e0bffc07 	ldb	r2,-16(fp)
   8e29c:	10801e18 	cmpnei	r2,r2,120
   8e2a0:	1000371e 	bne	r2,zero,8e380 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   8e2a4:	e0fffe17 	ldw	r3,-8(fp)
   8e2a8:	18800104 	addi	r2,r3,4
   8e2ac:	e0bffe15 	stw	r2,-8(fp)
   8e2b0:	1805883a 	mov	r2,r3
   8e2b4:	10800017 	ldw	r2,0(r2)
   8e2b8:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   8e2bc:	e0bffa17 	ldw	r2,-24(fp)
   8e2c0:	1004c03a 	cmpne	r2,r2,zero
   8e2c4:	1000031e 	bne	r2,zero,8e2d4 <alt_printf+0x100>
                    {
                        alt_putchar('0');
   8e2c8:	01000c04 	movi	r4,48
   8e2cc:	008e42c0 	call	8e42c <alt_putchar>
                        continue;
   8e2d0:	00004506 	br	8e3e8 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   8e2d4:	00800704 	movi	r2,28
   8e2d8:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
   8e2dc:	00000306 	br	8e2ec <alt_printf+0x118>
                        digit_shift -= 4;
   8e2e0:	e0bff817 	ldw	r2,-32(fp)
   8e2e4:	10bfff04 	addi	r2,r2,-4
   8e2e8:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   8e2ec:	00c003c4 	movi	r3,15
   8e2f0:	e0bff817 	ldw	r2,-32(fp)
   8e2f4:	1884983a 	sll	r2,r3,r2
   8e2f8:	1007883a 	mov	r3,r2
   8e2fc:	e0bffa17 	ldw	r2,-24(fp)
   8e300:	1884703a 	and	r2,r3,r2
   8e304:	1005003a 	cmpeq	r2,r2,zero
   8e308:	103ff51e 	bne	r2,zero,8e2e0 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   8e30c:	00001806 	br	8e370 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   8e310:	00c003c4 	movi	r3,15
   8e314:	e0bff817 	ldw	r2,-32(fp)
   8e318:	1884983a 	sll	r2,r3,r2
   8e31c:	1007883a 	mov	r3,r2
   8e320:	e0bffa17 	ldw	r2,-24(fp)
   8e324:	1886703a 	and	r3,r3,r2
   8e328:	e0bff817 	ldw	r2,-32(fp)
   8e32c:	1884d83a 	srl	r2,r3,r2
   8e330:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
   8e334:	e0bff917 	ldw	r2,-28(fp)
   8e338:	108002a8 	cmpgeui	r2,r2,10
   8e33c:	1000041e 	bne	r2,zero,8e350 <alt_printf+0x17c>
                            c = '0' + digit;
   8e340:	e0bff917 	ldw	r2,-28(fp)
   8e344:	10800c04 	addi	r2,r2,48
   8e348:	e0bffc05 	stb	r2,-16(fp)
   8e34c:	00000306 	br	8e35c <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
   8e350:	e0bff917 	ldw	r2,-28(fp)
   8e354:	108015c4 	addi	r2,r2,87
   8e358:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
   8e35c:	e13ffc07 	ldb	r4,-16(fp)
   8e360:	008e42c0 	call	8e42c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   8e364:	e0bff817 	ldw	r2,-32(fp)
   8e368:	10bfff04 	addi	r2,r2,-4
   8e36c:	e0bff815 	stw	r2,-32(fp)
   8e370:	e0bff817 	ldw	r2,-32(fp)
   8e374:	1004403a 	cmpge	r2,r2,zero
   8e378:	103fe51e 	bne	r2,zero,8e310 <alt_printf+0x13c>
   8e37c:	00001a06 	br	8e3e8 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   8e380:	e0bffc07 	ldb	r2,-16(fp)
   8e384:	10801cd8 	cmpnei	r2,r2,115
   8e388:	1000171e 	bne	r2,zero,8e3e8 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   8e38c:	e0fffe17 	ldw	r3,-8(fp)
   8e390:	18800104 	addi	r2,r3,4
   8e394:	e0bffe15 	stw	r2,-8(fp)
   8e398:	1805883a 	mov	r2,r3
   8e39c:	10800017 	ldw	r2,0(r2)
   8e3a0:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
   8e3a4:	00000906 	br	8e3cc <alt_printf+0x1f8>
                      alt_putchar(*s++);
   8e3a8:	e0bff717 	ldw	r2,-36(fp)
   8e3ac:	10800003 	ldbu	r2,0(r2)
   8e3b0:	11003fcc 	andi	r4,r2,255
   8e3b4:	2100201c 	xori	r4,r4,128
   8e3b8:	213fe004 	addi	r4,r4,-128
   8e3bc:	e0bff717 	ldw	r2,-36(fp)
   8e3c0:	10800044 	addi	r2,r2,1
   8e3c4:	e0bff715 	stw	r2,-36(fp)
   8e3c8:	008e42c0 	call	8e42c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   8e3cc:	e0bff717 	ldw	r2,-36(fp)
   8e3d0:	10800003 	ldbu	r2,0(r2)
   8e3d4:	10803fcc 	andi	r2,r2,255
   8e3d8:	1080201c 	xori	r2,r2,128
   8e3dc:	10bfe004 	addi	r2,r2,-128
   8e3e0:	1004c03a 	cmpne	r2,r2,zero
   8e3e4:	103ff01e 	bne	r2,zero,8e3a8 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   8e3e8:	e0bffd17 	ldw	r2,-12(fp)
   8e3ec:	10800003 	ldbu	r2,0(r2)
   8e3f0:	e0bffc05 	stb	r2,-16(fp)
   8e3f4:	e0bffc07 	ldb	r2,-16(fp)
   8e3f8:	1004c03a 	cmpne	r2,r2,zero
   8e3fc:	1007883a 	mov	r3,r2
   8e400:	e0bffd17 	ldw	r2,-12(fp)
   8e404:	10800044 	addi	r2,r2,1
   8e408:	e0bffd15 	stw	r2,-12(fp)
   8e40c:	18803fcc 	andi	r2,r3,255
   8e410:	1004c03a 	cmpne	r2,r2,zero
   8e414:	103f7c1e 	bne	r2,zero,8e208 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
   8e418:	e037883a 	mov	sp,fp
   8e41c:	dfc00117 	ldw	ra,4(sp)
   8e420:	df000017 	ldw	fp,0(sp)
   8e424:	dec00504 	addi	sp,sp,20
   8e428:	f800283a 	ret

0008e42c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   8e42c:	defffd04 	addi	sp,sp,-12
   8e430:	dfc00215 	stw	ra,8(sp)
   8e434:	df000115 	stw	fp,4(sp)
   8e438:	df000104 	addi	fp,sp,4
   8e43c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   8e440:	00800274 	movhi	r2,9
   8e444:	10932d04 	addi	r2,r2,19636
   8e448:	10800017 	ldw	r2,0(r2)
   8e44c:	11400217 	ldw	r5,8(r2)
   8e450:	e13fff17 	ldw	r4,-4(fp)
   8e454:	00920e40 	call	920e4 <putc>
#endif
}
   8e458:	e037883a 	mov	sp,fp
   8e45c:	dfc00117 	ldw	ra,4(sp)
   8e460:	df000017 	ldw	fp,0(sp)
   8e464:	dec00204 	addi	sp,sp,8
   8e468:	f800283a 	ret

0008e46c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8e46c:	defff704 	addi	sp,sp,-36
   8e470:	dfc00815 	stw	ra,32(sp)
   8e474:	df000715 	stw	fp,28(sp)
   8e478:	df000704 	addi	fp,sp,28
   8e47c:	e13ffb15 	stw	r4,-20(fp)
   8e480:	e17ffc15 	stw	r5,-16(fp)
   8e484:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e488:	e0bffb17 	ldw	r2,-20(fp)
   8e48c:	1004803a 	cmplt	r2,r2,zero
   8e490:	1000091e 	bne	r2,zero,8e4b8 <read+0x4c>
   8e494:	e13ffb17 	ldw	r4,-20(fp)
   8e498:	01400304 	movi	r5,12
   8e49c:	00843d00 	call	843d0 <__mulsi3>
   8e4a0:	1007883a 	mov	r3,r2
   8e4a4:	00800274 	movhi	r2,9
   8e4a8:	108e5304 	addi	r2,r2,14668
   8e4ac:	1887883a 	add	r3,r3,r2
   8e4b0:	e0ffff15 	stw	r3,-4(fp)
   8e4b4:	00000106 	br	8e4bc <read+0x50>
   8e4b8:	e03fff15 	stw	zero,-4(fp)
   8e4bc:	e0bfff17 	ldw	r2,-4(fp)
   8e4c0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8e4c4:	e0bffa17 	ldw	r2,-24(fp)
   8e4c8:	1005003a 	cmpeq	r2,r2,zero
   8e4cc:	1000241e 	bne	r2,zero,8e560 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8e4d0:	e0bffa17 	ldw	r2,-24(fp)
   8e4d4:	10800217 	ldw	r2,8(r2)
   8e4d8:	108000cc 	andi	r2,r2,3
   8e4dc:	10800060 	cmpeqi	r2,r2,1
   8e4e0:	10001a1e 	bne	r2,zero,8e54c <read+0xe0>
   8e4e4:	e0bffa17 	ldw	r2,-24(fp)
   8e4e8:	10800017 	ldw	r2,0(r2)
   8e4ec:	10800517 	ldw	r2,20(r2)
   8e4f0:	1005003a 	cmpeq	r2,r2,zero
   8e4f4:	1000151e 	bne	r2,zero,8e54c <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8e4f8:	e0bffa17 	ldw	r2,-24(fp)
   8e4fc:	10800017 	ldw	r2,0(r2)
   8e500:	10800517 	ldw	r2,20(r2)
   8e504:	e17ffc17 	ldw	r5,-16(fp)
   8e508:	e1bffd17 	ldw	r6,-12(fp)
   8e50c:	e13ffa17 	ldw	r4,-24(fp)
   8e510:	103ee83a 	callr	r2
   8e514:	e0bff915 	stw	r2,-28(fp)
   8e518:	e0bff917 	ldw	r2,-28(fp)
   8e51c:	1004403a 	cmpge	r2,r2,zero
   8e520:	1000071e 	bne	r2,zero,8e540 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   8e524:	008e5900 	call	8e590 <alt_get_errno>
   8e528:	e0fff917 	ldw	r3,-28(fp)
   8e52c:	00c7c83a 	sub	r3,zero,r3
   8e530:	10c00015 	stw	r3,0(r2)
          return -1;
   8e534:	00bfffc4 	movi	r2,-1
   8e538:	e0bffe15 	stw	r2,-8(fp)
   8e53c:	00000e06 	br	8e578 <read+0x10c>
        }
        return rval;
   8e540:	e0bff917 	ldw	r2,-28(fp)
   8e544:	e0bffe15 	stw	r2,-8(fp)
   8e548:	00000b06 	br	8e578 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8e54c:	008e5900 	call	8e590 <alt_get_errno>
   8e550:	1007883a 	mov	r3,r2
   8e554:	00800344 	movi	r2,13
   8e558:	18800015 	stw	r2,0(r3)
   8e55c:	00000406 	br	8e570 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8e560:	008e5900 	call	8e590 <alt_get_errno>
   8e564:	1007883a 	mov	r3,r2
   8e568:	00801444 	movi	r2,81
   8e56c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8e570:	00bfffc4 	movi	r2,-1
   8e574:	e0bffe15 	stw	r2,-8(fp)
   8e578:	e0bffe17 	ldw	r2,-8(fp)
}
   8e57c:	e037883a 	mov	sp,fp
   8e580:	dfc00117 	ldw	ra,4(sp)
   8e584:	df000017 	ldw	fp,0(sp)
   8e588:	dec00204 	addi	sp,sp,8
   8e58c:	f800283a 	ret

0008e590 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e590:	defffd04 	addi	sp,sp,-12
   8e594:	dfc00215 	stw	ra,8(sp)
   8e598:	df000115 	stw	fp,4(sp)
   8e59c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8e5a0:	00800274 	movhi	r2,9
   8e5a4:	10933804 	addi	r2,r2,19680
   8e5a8:	10800017 	ldw	r2,0(r2)
   8e5ac:	1005003a 	cmpeq	r2,r2,zero
   8e5b0:	1000061e 	bne	r2,zero,8e5cc <alt_get_errno+0x3c>
   8e5b4:	00800274 	movhi	r2,9
   8e5b8:	10933804 	addi	r2,r2,19680
   8e5bc:	10800017 	ldw	r2,0(r2)
   8e5c0:	103ee83a 	callr	r2
   8e5c4:	e0bfff15 	stw	r2,-4(fp)
   8e5c8:	00000306 	br	8e5d8 <alt_get_errno+0x48>
   8e5cc:	00800274 	movhi	r2,9
   8e5d0:	109a3a04 	addi	r2,r2,26856
   8e5d4:	e0bfff15 	stw	r2,-4(fp)
   8e5d8:	e0bfff17 	ldw	r2,-4(fp)
}
   8e5dc:	e037883a 	mov	sp,fp
   8e5e0:	dfc00117 	ldw	ra,4(sp)
   8e5e4:	df000017 	ldw	fp,0(sp)
   8e5e8:	dec00204 	addi	sp,sp,8
   8e5ec:	f800283a 	ret

0008e5f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8e5f0:	defffc04 	addi	sp,sp,-16
   8e5f4:	dfc00315 	stw	ra,12(sp)
   8e5f8:	df000215 	stw	fp,8(sp)
   8e5fc:	dc000115 	stw	r16,4(sp)
   8e600:	df000104 	addi	fp,sp,4
   8e604:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8e608:	e0bfff17 	ldw	r2,-4(fp)
   8e60c:	108000d0 	cmplti	r2,r2,3
   8e610:	10000f1e 	bne	r2,zero,8e650 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   8e614:	e13fff17 	ldw	r4,-4(fp)
   8e618:	04000274 	movhi	r16,9
   8e61c:	840e5304 	addi	r16,r16,14668
   8e620:	01400304 	movi	r5,12
   8e624:	00843d00 	call	843d0 <__mulsi3>
   8e628:	1405883a 	add	r2,r2,r16
   8e62c:	10800204 	addi	r2,r2,8
   8e630:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8e634:	e13fff17 	ldw	r4,-4(fp)
   8e638:	04000274 	movhi	r16,9
   8e63c:	840e5304 	addi	r16,r16,14668
   8e640:	01400304 	movi	r5,12
   8e644:	00843d00 	call	843d0 <__mulsi3>
   8e648:	1405883a 	add	r2,r2,r16
   8e64c:	10000015 	stw	zero,0(r2)
  }
}
   8e650:	e037883a 	mov	sp,fp
   8e654:	dfc00217 	ldw	ra,8(sp)
   8e658:	df000117 	ldw	fp,4(sp)
   8e65c:	dc000017 	ldw	r16,0(sp)
   8e660:	dec00304 	addi	sp,sp,12
   8e664:	f800283a 	ret

0008e668 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8e668:	defff804 	addi	sp,sp,-32
   8e66c:	df000715 	stw	fp,28(sp)
   8e670:	df000704 	addi	fp,sp,28
   8e674:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e678:	0005303a 	rdctl	r2,status
   8e67c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e680:	e0fffb17 	ldw	r3,-20(fp)
   8e684:	00bfff84 	movi	r2,-2
   8e688:	1884703a 	and	r2,r3,r2
   8e68c:	1001703a 	wrctl	status,r2
  
  return context;
   8e690:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8e694:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8e698:	d0a00c17 	ldw	r2,-32720(gp)
   8e69c:	10c000c4 	addi	r3,r2,3
   8e6a0:	00bfff04 	movi	r2,-4
   8e6a4:	1884703a 	and	r2,r3,r2
   8e6a8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8e6ac:	d0e00c17 	ldw	r3,-32720(gp)
   8e6b0:	e0bffe17 	ldw	r2,-8(fp)
   8e6b4:	1887883a 	add	r3,r3,r2
   8e6b8:	00800434 	movhi	r2,16
   8e6bc:	10800004 	addi	r2,r2,0
   8e6c0:	10c0072e 	bgeu	r2,r3,8e6e0 <sbrk+0x78>
   8e6c4:	e0bffd17 	ldw	r2,-12(fp)
   8e6c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e6cc:	e0bffa17 	ldw	r2,-24(fp)
   8e6d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8e6d4:	00bfffc4 	movi	r2,-1
   8e6d8:	e0bfff15 	stw	r2,-4(fp)
   8e6dc:	00000c06 	br	8e710 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   8e6e0:	d0a00c17 	ldw	r2,-32720(gp)
   8e6e4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   8e6e8:	d0e00c17 	ldw	r3,-32720(gp)
   8e6ec:	e0bffe17 	ldw	r2,-8(fp)
   8e6f0:	1885883a 	add	r2,r3,r2
   8e6f4:	d0a00c15 	stw	r2,-32720(gp)
   8e6f8:	e0bffd17 	ldw	r2,-12(fp)
   8e6fc:	e0bff915 	stw	r2,-28(fp)
   8e700:	e0bff917 	ldw	r2,-28(fp)
   8e704:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8e708:	e0bffc17 	ldw	r2,-16(fp)
   8e70c:	e0bfff15 	stw	r2,-4(fp)
   8e710:	e0bfff17 	ldw	r2,-4(fp)
} 
   8e714:	e037883a 	mov	sp,fp
   8e718:	df000017 	ldw	fp,0(sp)
   8e71c:	dec00104 	addi	sp,sp,4
   8e720:	f800283a 	ret

0008e724 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8e724:	defff704 	addi	sp,sp,-36
   8e728:	dfc00815 	stw	ra,32(sp)
   8e72c:	df000715 	stw	fp,28(sp)
   8e730:	df000704 	addi	fp,sp,28
   8e734:	e13ffb15 	stw	r4,-20(fp)
   8e738:	e17ffc15 	stw	r5,-16(fp)
   8e73c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e740:	e0bffb17 	ldw	r2,-20(fp)
   8e744:	1004803a 	cmplt	r2,r2,zero
   8e748:	1000091e 	bne	r2,zero,8e770 <write+0x4c>
   8e74c:	e13ffb17 	ldw	r4,-20(fp)
   8e750:	01400304 	movi	r5,12
   8e754:	00843d00 	call	843d0 <__mulsi3>
   8e758:	1007883a 	mov	r3,r2
   8e75c:	00800274 	movhi	r2,9
   8e760:	108e5304 	addi	r2,r2,14668
   8e764:	1887883a 	add	r3,r3,r2
   8e768:	e0ffff15 	stw	r3,-4(fp)
   8e76c:	00000106 	br	8e774 <write+0x50>
   8e770:	e03fff15 	stw	zero,-4(fp)
   8e774:	e0bfff17 	ldw	r2,-4(fp)
   8e778:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8e77c:	e0bffa17 	ldw	r2,-24(fp)
   8e780:	1005003a 	cmpeq	r2,r2,zero
   8e784:	1000241e 	bne	r2,zero,8e818 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8e788:	e0bffa17 	ldw	r2,-24(fp)
   8e78c:	10800217 	ldw	r2,8(r2)
   8e790:	108000cc 	andi	r2,r2,3
   8e794:	1005003a 	cmpeq	r2,r2,zero
   8e798:	10001a1e 	bne	r2,zero,8e804 <write+0xe0>
   8e79c:	e0bffa17 	ldw	r2,-24(fp)
   8e7a0:	10800017 	ldw	r2,0(r2)
   8e7a4:	10800617 	ldw	r2,24(r2)
   8e7a8:	1005003a 	cmpeq	r2,r2,zero
   8e7ac:	1000151e 	bne	r2,zero,8e804 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8e7b0:	e0bffa17 	ldw	r2,-24(fp)
   8e7b4:	10800017 	ldw	r2,0(r2)
   8e7b8:	10800617 	ldw	r2,24(r2)
   8e7bc:	e17ffc17 	ldw	r5,-16(fp)
   8e7c0:	e1bffd17 	ldw	r6,-12(fp)
   8e7c4:	e13ffa17 	ldw	r4,-24(fp)
   8e7c8:	103ee83a 	callr	r2
   8e7cc:	e0bff915 	stw	r2,-28(fp)
   8e7d0:	e0bff917 	ldw	r2,-28(fp)
   8e7d4:	1004403a 	cmpge	r2,r2,zero
   8e7d8:	1000071e 	bne	r2,zero,8e7f8 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   8e7dc:	008e8480 	call	8e848 <alt_get_errno>
   8e7e0:	e0fff917 	ldw	r3,-28(fp)
   8e7e4:	00c7c83a 	sub	r3,zero,r3
   8e7e8:	10c00015 	stw	r3,0(r2)
        return -1;
   8e7ec:	00bfffc4 	movi	r2,-1
   8e7f0:	e0bffe15 	stw	r2,-8(fp)
   8e7f4:	00000e06 	br	8e830 <write+0x10c>
      }
      return rval;
   8e7f8:	e0bff917 	ldw	r2,-28(fp)
   8e7fc:	e0bffe15 	stw	r2,-8(fp)
   8e800:	00000b06 	br	8e830 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8e804:	008e8480 	call	8e848 <alt_get_errno>
   8e808:	1007883a 	mov	r3,r2
   8e80c:	00800344 	movi	r2,13
   8e810:	18800015 	stw	r2,0(r3)
   8e814:	00000406 	br	8e828 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8e818:	008e8480 	call	8e848 <alt_get_errno>
   8e81c:	1007883a 	mov	r3,r2
   8e820:	00801444 	movi	r2,81
   8e824:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8e828:	00bfffc4 	movi	r2,-1
   8e82c:	e0bffe15 	stw	r2,-8(fp)
   8e830:	e0bffe17 	ldw	r2,-8(fp)
}
   8e834:	e037883a 	mov	sp,fp
   8e838:	dfc00117 	ldw	ra,4(sp)
   8e83c:	df000017 	ldw	fp,0(sp)
   8e840:	dec00204 	addi	sp,sp,8
   8e844:	f800283a 	ret

0008e848 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e848:	defffd04 	addi	sp,sp,-12
   8e84c:	dfc00215 	stw	ra,8(sp)
   8e850:	df000115 	stw	fp,4(sp)
   8e854:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8e858:	00800274 	movhi	r2,9
   8e85c:	10933804 	addi	r2,r2,19680
   8e860:	10800017 	ldw	r2,0(r2)
   8e864:	1005003a 	cmpeq	r2,r2,zero
   8e868:	1000061e 	bne	r2,zero,8e884 <alt_get_errno+0x3c>
   8e86c:	00800274 	movhi	r2,9
   8e870:	10933804 	addi	r2,r2,19680
   8e874:	10800017 	ldw	r2,0(r2)
   8e878:	103ee83a 	callr	r2
   8e87c:	e0bfff15 	stw	r2,-4(fp)
   8e880:	00000306 	br	8e890 <alt_get_errno+0x48>
   8e884:	00800274 	movhi	r2,9
   8e888:	109a3a04 	addi	r2,r2,26856
   8e88c:	e0bfff15 	stw	r2,-4(fp)
   8e890:	e0bfff17 	ldw	r2,-4(fp)
}
   8e894:	e037883a 	mov	sp,fp
   8e898:	dfc00117 	ldw	ra,4(sp)
   8e89c:	df000017 	ldw	fp,0(sp)
   8e8a0:	dec00204 	addi	sp,sp,8
   8e8a4:	f800283a 	ret

0008e8a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8e8a8:	defffd04 	addi	sp,sp,-12
   8e8ac:	dfc00215 	stw	ra,8(sp)
   8e8b0:	df000115 	stw	fp,4(sp)
   8e8b4:	df000104 	addi	fp,sp,4
   8e8b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
   8e8bc:	0091ea80 	call	91ea8 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8e8c0:	00800044 	movi	r2,1
   8e8c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8e8c8:	e037883a 	mov	sp,fp
   8e8cc:	dfc00117 	ldw	ra,4(sp)
   8e8d0:	df000017 	ldw	fp,0(sp)
   8e8d4:	dec00204 	addi	sp,sp,8
   8e8d8:	f800283a 	ret

0008e8dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8e8dc:	defffe04 	addi	sp,sp,-8
   8e8e0:	dfc00115 	stw	ra,4(sp)
   8e8e4:	df000015 	stw	fp,0(sp)
   8e8e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
   8e8ec:	01000434 	movhi	r4,16
   8e8f0:	21058004 	addi	r4,r4,5632
   8e8f4:	000b883a 	mov	r5,zero
   8e8f8:	01800084 	movi	r6,2
   8e8fc:	01c0fa04 	movi	r7,1000
   8e900:	00904c80 	call	904c8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
   8e904:	00c00274 	movhi	r3,9
   8e908:	18da4404 	addi	r3,r3,26896
   8e90c:	00800434 	movhi	r2,16
   8e910:	10858804 	addi	r2,r2,5664
   8e914:	18800015 	stw	r2,0(r3)
   8e918:	00c00274 	movhi	r3,9
   8e91c:	18da4504 	addi	r3,r3,26900
   8e920:	0080bef4 	movhi	r2,763
   8e924:	10bc2004 	addi	r2,r2,-3968
   8e928:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8e92c:	01000274 	movhi	r4,9
   8e930:	210ebd04 	addi	r4,r4,15092
   8e934:	000b883a 	mov	r5,zero
   8e938:	000d883a 	mov	r6,zero
   8e93c:	008eb1c0 	call	8eb1c <altera_avalon_jtag_uart_init>
   8e940:	01000274 	movhi	r4,9
   8e944:	210eb304 	addi	r4,r4,15052
   8e948:	008e99c0 	call	8e99c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_0, lcd_0);
   8e94c:	01000274 	movhi	r4,9
   8e950:	2112d504 	addi	r4,r4,19284
   8e954:	00902c00 	call	902c0 <altera_avalon_lcd_16207_init>
   8e958:	01000274 	movhi	r4,9
   8e95c:	2112cb04 	addi	r4,r4,19244
   8e960:	008e99c0 	call	8e99c <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
   8e964:	01000274 	movhi	r4,9
   8e968:	21131304 	addi	r4,r4,19532
   8e96c:	008e99c0 	call	8e99c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, ps2_port);
   8e970:	01000274 	movhi	r4,9
   8e974:	21131f04 	addi	r4,r4,19580
   8e978:	0090e040 	call	90e04 <alt_up_ps2_init>
   8e97c:	01000274 	movhi	r4,9
   8e980:	21131f04 	addi	r4,r4,19580
   8e984:	008e99c0 	call	8e99c <alt_dev_reg>
}
   8e988:	e037883a 	mov	sp,fp
   8e98c:	dfc00117 	ldw	ra,4(sp)
   8e990:	df000017 	ldw	fp,0(sp)
   8e994:	dec00204 	addi	sp,sp,8
   8e998:	f800283a 	ret

0008e99c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8e99c:	defffd04 	addi	sp,sp,-12
   8e9a0:	dfc00215 	stw	ra,8(sp)
   8e9a4:	df000115 	stw	fp,4(sp)
   8e9a8:	df000104 	addi	fp,sp,4
   8e9ac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8e9b0:	e13fff17 	ldw	r4,-4(fp)
   8e9b4:	01400274 	movhi	r5,9
   8e9b8:	29533504 	addi	r5,r5,19668
   8e9bc:	00915480 	call	91548 <alt_dev_llist_insert>
}
   8e9c0:	e037883a 	mov	sp,fp
   8e9c4:	dfc00117 	ldw	ra,4(sp)
   8e9c8:	df000017 	ldw	fp,0(sp)
   8e9cc:	dec00204 	addi	sp,sp,8
   8e9d0:	f800283a 	ret

0008e9d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8e9d4:	defffa04 	addi	sp,sp,-24
   8e9d8:	dfc00515 	stw	ra,20(sp)
   8e9dc:	df000415 	stw	fp,16(sp)
   8e9e0:	df000404 	addi	fp,sp,16
   8e9e4:	e13ffd15 	stw	r4,-12(fp)
   8e9e8:	e17ffe15 	stw	r5,-8(fp)
   8e9ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8e9f0:	e0bffd17 	ldw	r2,-12(fp)
   8e9f4:	10800017 	ldw	r2,0(r2)
   8e9f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8e9fc:	e0bffc17 	ldw	r2,-16(fp)
   8ea00:	11000a04 	addi	r4,r2,40
   8ea04:	e0bffd17 	ldw	r2,-12(fp)
   8ea08:	11c00217 	ldw	r7,8(r2)
   8ea0c:	e17ffe17 	ldw	r5,-8(fp)
   8ea10:	e1bfff17 	ldw	r6,-4(fp)
   8ea14:	008f0180 	call	8f018 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8ea18:	e037883a 	mov	sp,fp
   8ea1c:	dfc00117 	ldw	ra,4(sp)
   8ea20:	df000017 	ldw	fp,0(sp)
   8ea24:	dec00204 	addi	sp,sp,8
   8ea28:	f800283a 	ret

0008ea2c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8ea2c:	defffa04 	addi	sp,sp,-24
   8ea30:	dfc00515 	stw	ra,20(sp)
   8ea34:	df000415 	stw	fp,16(sp)
   8ea38:	df000404 	addi	fp,sp,16
   8ea3c:	e13ffd15 	stw	r4,-12(fp)
   8ea40:	e17ffe15 	stw	r5,-8(fp)
   8ea44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8ea48:	e0bffd17 	ldw	r2,-12(fp)
   8ea4c:	10800017 	ldw	r2,0(r2)
   8ea50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8ea54:	e0bffc17 	ldw	r2,-16(fp)
   8ea58:	11000a04 	addi	r4,r2,40
   8ea5c:	e0bffd17 	ldw	r2,-12(fp)
   8ea60:	11c00217 	ldw	r7,8(r2)
   8ea64:	e17ffe17 	ldw	r5,-8(fp)
   8ea68:	e1bfff17 	ldw	r6,-4(fp)
   8ea6c:	008f23c0 	call	8f23c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8ea70:	e037883a 	mov	sp,fp
   8ea74:	dfc00117 	ldw	ra,4(sp)
   8ea78:	df000017 	ldw	fp,0(sp)
   8ea7c:	dec00204 	addi	sp,sp,8
   8ea80:	f800283a 	ret

0008ea84 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8ea84:	defffc04 	addi	sp,sp,-16
   8ea88:	dfc00315 	stw	ra,12(sp)
   8ea8c:	df000215 	stw	fp,8(sp)
   8ea90:	df000204 	addi	fp,sp,8
   8ea94:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8ea98:	e0bfff17 	ldw	r2,-4(fp)
   8ea9c:	10800017 	ldw	r2,0(r2)
   8eaa0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8eaa4:	e0bffe17 	ldw	r2,-8(fp)
   8eaa8:	11000a04 	addi	r4,r2,40
   8eaac:	e0bfff17 	ldw	r2,-4(fp)
   8eab0:	11400217 	ldw	r5,8(r2)
   8eab4:	008eeb00 	call	8eeb0 <altera_avalon_jtag_uart_close>
}
   8eab8:	e037883a 	mov	sp,fp
   8eabc:	dfc00117 	ldw	ra,4(sp)
   8eac0:	df000017 	ldw	fp,0(sp)
   8eac4:	dec00204 	addi	sp,sp,8
   8eac8:	f800283a 	ret

0008eacc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8eacc:	defffa04 	addi	sp,sp,-24
   8ead0:	dfc00515 	stw	ra,20(sp)
   8ead4:	df000415 	stw	fp,16(sp)
   8ead8:	df000404 	addi	fp,sp,16
   8eadc:	e13ffd15 	stw	r4,-12(fp)
   8eae0:	e17ffe15 	stw	r5,-8(fp)
   8eae4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8eae8:	e0bffd17 	ldw	r2,-12(fp)
   8eaec:	10800017 	ldw	r2,0(r2)
   8eaf0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8eaf4:	e0bffc17 	ldw	r2,-16(fp)
   8eaf8:	11000a04 	addi	r4,r2,40
   8eafc:	e17ffe17 	ldw	r5,-8(fp)
   8eb00:	e1bfff17 	ldw	r6,-4(fp)
   8eb04:	008ef240 	call	8ef24 <altera_avalon_jtag_uart_ioctl>
}
   8eb08:	e037883a 	mov	sp,fp
   8eb0c:	dfc00117 	ldw	ra,4(sp)
   8eb10:	df000017 	ldw	fp,0(sp)
   8eb14:	dec00204 	addi	sp,sp,8
   8eb18:	f800283a 	ret

0008eb1c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8eb1c:	defffb04 	addi	sp,sp,-20
   8eb20:	dfc00415 	stw	ra,16(sp)
   8eb24:	df000315 	stw	fp,12(sp)
   8eb28:	df000304 	addi	fp,sp,12
   8eb2c:	e13ffd15 	stw	r4,-12(fp)
   8eb30:	e17ffe15 	stw	r5,-8(fp)
   8eb34:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8eb38:	e0fffd17 	ldw	r3,-12(fp)
   8eb3c:	00800044 	movi	r2,1
   8eb40:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8eb44:	e0bffd17 	ldw	r2,-12(fp)
   8eb48:	10800017 	ldw	r2,0(r2)
   8eb4c:	11000104 	addi	r4,r2,4
   8eb50:	e0bffd17 	ldw	r2,-12(fp)
   8eb54:	10800817 	ldw	r2,32(r2)
   8eb58:	1007883a 	mov	r3,r2
   8eb5c:	2005883a 	mov	r2,r4
   8eb60:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   8eb64:	e13fff17 	ldw	r4,-4(fp)
   8eb68:	e17ffd17 	ldw	r5,-12(fp)
   8eb6c:	01800274 	movhi	r6,9
   8eb70:	31baf504 	addi	r6,r6,-5164
   8eb74:	0091b140 	call	91b14 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8eb78:	e0bffd17 	ldw	r2,-12(fp)
   8eb7c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8eb80:	e0bffd17 	ldw	r2,-12(fp)
   8eb84:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8eb88:	00800274 	movhi	r2,9
   8eb8c:	109a4704 	addi	r2,r2,26908
   8eb90:	10800017 	ldw	r2,0(r2)
   8eb94:	100b883a 	mov	r5,r2
   8eb98:	01800274 	movhi	r6,9
   8eb9c:	31bb8004 	addi	r6,r6,-4608
   8eba0:	e1fffd17 	ldw	r7,-12(fp)
   8eba4:	00913d80 	call	913d8 <alt_alarm_start>
   8eba8:	1004403a 	cmpge	r2,r2,zero
   8ebac:	1000041e 	bne	r2,zero,8ebc0 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8ebb0:	e0fffd17 	ldw	r3,-12(fp)
   8ebb4:	00a00034 	movhi	r2,32768
   8ebb8:	10bfffc4 	addi	r2,r2,-1
   8ebbc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8ebc0:	e037883a 	mov	sp,fp
   8ebc4:	dfc00117 	ldw	ra,4(sp)
   8ebc8:	df000017 	ldw	fp,0(sp)
   8ebcc:	dec00204 	addi	sp,sp,8
   8ebd0:	f800283a 	ret

0008ebd4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8ebd4:	defff704 	addi	sp,sp,-36
   8ebd8:	df000815 	stw	fp,32(sp)
   8ebdc:	df000804 	addi	fp,sp,32
   8ebe0:	e13ffe15 	stw	r4,-8(fp)
   8ebe4:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8ebe8:	e0bffe17 	ldw	r2,-8(fp)
   8ebec:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   8ebf0:	e0bffd17 	ldw	r2,-12(fp)
   8ebf4:	10800017 	ldw	r2,0(r2)
   8ebf8:	e0bffc15 	stw	r2,-16(fp)
   8ebfc:	00000006 	br	8ec00 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8ec00:	e0bffc17 	ldw	r2,-16(fp)
   8ec04:	10800104 	addi	r2,r2,4
   8ec08:	10800037 	ldwio	r2,0(r2)
   8ec0c:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8ec10:	e0bffb17 	ldw	r2,-20(fp)
   8ec14:	1080c00c 	andi	r2,r2,768
   8ec18:	1005003a 	cmpeq	r2,r2,zero
   8ec1c:	1000741e 	bne	r2,zero,8edf0 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8ec20:	e0bffb17 	ldw	r2,-20(fp)
   8ec24:	1080400c 	andi	r2,r2,256
   8ec28:	1005003a 	cmpeq	r2,r2,zero
   8ec2c:	1000351e 	bne	r2,zero,8ed04 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8ec30:	00800074 	movhi	r2,1
   8ec34:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ec38:	e0bffd17 	ldw	r2,-12(fp)
   8ec3c:	10800a17 	ldw	r2,40(r2)
   8ec40:	10800044 	addi	r2,r2,1
   8ec44:	1081ffcc 	andi	r2,r2,2047
   8ec48:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   8ec4c:	e0bffd17 	ldw	r2,-12(fp)
   8ec50:	10c00b17 	ldw	r3,44(r2)
   8ec54:	e0bff917 	ldw	r2,-28(fp)
   8ec58:	18801626 	beq	r3,r2,8ecb4 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8ec5c:	e0bffc17 	ldw	r2,-16(fp)
   8ec60:	10800037 	ldwio	r2,0(r2)
   8ec64:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8ec68:	e0bffa17 	ldw	r2,-24(fp)
   8ec6c:	10a0000c 	andi	r2,r2,32768
   8ec70:	1005003a 	cmpeq	r2,r2,zero
   8ec74:	10000f1e 	bne	r2,zero,8ecb4 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8ec78:	e0bffd17 	ldw	r2,-12(fp)
   8ec7c:	10c00a17 	ldw	r3,40(r2)
   8ec80:	e0bffa17 	ldw	r2,-24(fp)
   8ec84:	1009883a 	mov	r4,r2
   8ec88:	e0bffd17 	ldw	r2,-12(fp)
   8ec8c:	1885883a 	add	r2,r3,r2
   8ec90:	10800e04 	addi	r2,r2,56
   8ec94:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ec98:	e0bffd17 	ldw	r2,-12(fp)
   8ec9c:	10800a17 	ldw	r2,40(r2)
   8eca0:	10800044 	addi	r2,r2,1
   8eca4:	10c1ffcc 	andi	r3,r2,2047
   8eca8:	e0bffd17 	ldw	r2,-12(fp)
   8ecac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8ecb0:	003fe106 	br	8ec38 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8ecb4:	e0bffa17 	ldw	r2,-24(fp)
   8ecb8:	10bfffec 	andhi	r2,r2,65535
   8ecbc:	1005003a 	cmpeq	r2,r2,zero
   8ecc0:	1000101e 	bne	r2,zero,8ed04 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8ecc4:	e0bffd17 	ldw	r2,-12(fp)
   8ecc8:	10c00817 	ldw	r3,32(r2)
   8eccc:	00bfff84 	movi	r2,-2
   8ecd0:	1886703a 	and	r3,r3,r2
   8ecd4:	e0bffd17 	ldw	r2,-12(fp)
   8ecd8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8ecdc:	e0bffc17 	ldw	r2,-16(fp)
   8ece0:	11000104 	addi	r4,r2,4
   8ece4:	e0bffd17 	ldw	r2,-12(fp)
   8ece8:	10800817 	ldw	r2,32(r2)
   8ecec:	1007883a 	mov	r3,r2
   8ecf0:	2005883a 	mov	r2,r4
   8ecf4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8ecf8:	e0bffc17 	ldw	r2,-16(fp)
   8ecfc:	10800104 	addi	r2,r2,4
   8ed00:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8ed04:	e0bffb17 	ldw	r2,-20(fp)
   8ed08:	1080800c 	andi	r2,r2,512
   8ed0c:	1005003a 	cmpeq	r2,r2,zero
   8ed10:	103fbb1e 	bne	r2,zero,8ec00 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8ed14:	e0bffb17 	ldw	r2,-20(fp)
   8ed18:	10bfffec 	andhi	r2,r2,65535
   8ed1c:	1004d43a 	srli	r2,r2,16
   8ed20:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8ed24:	00001506 	br	8ed7c <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8ed28:	e13ffc17 	ldw	r4,-16(fp)
   8ed2c:	e0bffd17 	ldw	r2,-12(fp)
   8ed30:	10c00d17 	ldw	r3,52(r2)
   8ed34:	e0bffd17 	ldw	r2,-12(fp)
   8ed38:	1885883a 	add	r2,r3,r2
   8ed3c:	10820e04 	addi	r2,r2,2104
   8ed40:	10800003 	ldbu	r2,0(r2)
   8ed44:	10c03fcc 	andi	r3,r2,255
   8ed48:	18c0201c 	xori	r3,r3,128
   8ed4c:	18ffe004 	addi	r3,r3,-128
   8ed50:	2005883a 	mov	r2,r4
   8ed54:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ed58:	e0bffd17 	ldw	r2,-12(fp)
   8ed5c:	10800d17 	ldw	r2,52(r2)
   8ed60:	10800044 	addi	r2,r2,1
   8ed64:	10c1ffcc 	andi	r3,r2,2047
   8ed68:	e0bffd17 	ldw	r2,-12(fp)
   8ed6c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8ed70:	e0bff817 	ldw	r2,-32(fp)
   8ed74:	10bfffc4 	addi	r2,r2,-1
   8ed78:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8ed7c:	e0bff817 	ldw	r2,-32(fp)
   8ed80:	1005003a 	cmpeq	r2,r2,zero
   8ed84:	1000051e 	bne	r2,zero,8ed9c <altera_avalon_jtag_uart_irq+0x1c8>
   8ed88:	e0bffd17 	ldw	r2,-12(fp)
   8ed8c:	10c00d17 	ldw	r3,52(r2)
   8ed90:	e0bffd17 	ldw	r2,-12(fp)
   8ed94:	10800c17 	ldw	r2,48(r2)
   8ed98:	18bfe31e 	bne	r3,r2,8ed28 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8ed9c:	e0bff817 	ldw	r2,-32(fp)
   8eda0:	1005003a 	cmpeq	r2,r2,zero
   8eda4:	103f961e 	bne	r2,zero,8ec00 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8eda8:	e0bffd17 	ldw	r2,-12(fp)
   8edac:	10c00817 	ldw	r3,32(r2)
   8edb0:	00bfff44 	movi	r2,-3
   8edb4:	1886703a 	and	r3,r3,r2
   8edb8:	e0bffd17 	ldw	r2,-12(fp)
   8edbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8edc0:	e0bffd17 	ldw	r2,-12(fp)
   8edc4:	10800017 	ldw	r2,0(r2)
   8edc8:	11000104 	addi	r4,r2,4
   8edcc:	e0bffd17 	ldw	r2,-12(fp)
   8edd0:	10800817 	ldw	r2,32(r2)
   8edd4:	1007883a 	mov	r3,r2
   8edd8:	2005883a 	mov	r2,r4
   8eddc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8ede0:	e0bffc17 	ldw	r2,-16(fp)
   8ede4:	10800104 	addi	r2,r2,4
   8ede8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8edec:	003f8406 	br	8ec00 <altera_avalon_jtag_uart_irq+0x2c>
}
   8edf0:	e037883a 	mov	sp,fp
   8edf4:	df000017 	ldw	fp,0(sp)
   8edf8:	dec00104 	addi	sp,sp,4
   8edfc:	f800283a 	ret

0008ee00 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8ee00:	defffc04 	addi	sp,sp,-16
   8ee04:	df000315 	stw	fp,12(sp)
   8ee08:	df000304 	addi	fp,sp,12
   8ee0c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8ee10:	e0bfff17 	ldw	r2,-4(fp)
   8ee14:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8ee18:	e0bffe17 	ldw	r2,-8(fp)
   8ee1c:	10800017 	ldw	r2,0(r2)
   8ee20:	10800104 	addi	r2,r2,4
   8ee24:	10800037 	ldwio	r2,0(r2)
   8ee28:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8ee2c:	e0bffd17 	ldw	r2,-12(fp)
   8ee30:	1081000c 	andi	r2,r2,1024
   8ee34:	1005003a 	cmpeq	r2,r2,zero
   8ee38:	10000c1e 	bne	r2,zero,8ee6c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8ee3c:	e0bffe17 	ldw	r2,-8(fp)
   8ee40:	10800017 	ldw	r2,0(r2)
   8ee44:	11000104 	addi	r4,r2,4
   8ee48:	e0bffe17 	ldw	r2,-8(fp)
   8ee4c:	10800817 	ldw	r2,32(r2)
   8ee50:	10810014 	ori	r2,r2,1024
   8ee54:	1007883a 	mov	r3,r2
   8ee58:	2005883a 	mov	r2,r4
   8ee5c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8ee60:	e0bffe17 	ldw	r2,-8(fp)
   8ee64:	10000915 	stw	zero,36(r2)
   8ee68:	00000a06 	br	8ee94 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8ee6c:	e0bffe17 	ldw	r2,-8(fp)
   8ee70:	10c00917 	ldw	r3,36(r2)
   8ee74:	00a00034 	movhi	r2,32768
   8ee78:	10bfff04 	addi	r2,r2,-4
   8ee7c:	10c00536 	bltu	r2,r3,8ee94 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   8ee80:	e0bffe17 	ldw	r2,-8(fp)
   8ee84:	10800917 	ldw	r2,36(r2)
   8ee88:	10c00044 	addi	r3,r2,1
   8ee8c:	e0bffe17 	ldw	r2,-8(fp)
   8ee90:	10c00915 	stw	r3,36(r2)
   8ee94:	00800274 	movhi	r2,9
   8ee98:	109a4704 	addi	r2,r2,26908
   8ee9c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8eea0:	e037883a 	mov	sp,fp
   8eea4:	df000017 	ldw	fp,0(sp)
   8eea8:	dec00104 	addi	sp,sp,4
   8eeac:	f800283a 	ret

0008eeb0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8eeb0:	defffc04 	addi	sp,sp,-16
   8eeb4:	df000315 	stw	fp,12(sp)
   8eeb8:	df000304 	addi	fp,sp,12
   8eebc:	e13ffd15 	stw	r4,-12(fp)
   8eec0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8eec4:	00000706 	br	8eee4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   8eec8:	e0bffe17 	ldw	r2,-8(fp)
   8eecc:	1090000c 	andi	r2,r2,16384
   8eed0:	1005003a 	cmpeq	r2,r2,zero
   8eed4:	1000031e 	bne	r2,zero,8eee4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   8eed8:	00bffd44 	movi	r2,-11
   8eedc:	e0bfff15 	stw	r2,-4(fp)
   8eee0:	00000b06 	br	8ef10 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8eee4:	e0bffd17 	ldw	r2,-12(fp)
   8eee8:	10c00d17 	ldw	r3,52(r2)
   8eeec:	e0bffd17 	ldw	r2,-12(fp)
   8eef0:	10800c17 	ldw	r2,48(r2)
   8eef4:	18800526 	beq	r3,r2,8ef0c <altera_avalon_jtag_uart_close+0x5c>
   8eef8:	e0bffd17 	ldw	r2,-12(fp)
   8eefc:	10c00917 	ldw	r3,36(r2)
   8ef00:	e0bffd17 	ldw	r2,-12(fp)
   8ef04:	10800117 	ldw	r2,4(r2)
   8ef08:	18bfef36 	bltu	r3,r2,8eec8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8ef0c:	e03fff15 	stw	zero,-4(fp)
   8ef10:	e0bfff17 	ldw	r2,-4(fp)
}
   8ef14:	e037883a 	mov	sp,fp
   8ef18:	df000017 	ldw	fp,0(sp)
   8ef1c:	dec00104 	addi	sp,sp,4
   8ef20:	f800283a 	ret

0008ef24 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8ef24:	defff804 	addi	sp,sp,-32
   8ef28:	df000715 	stw	fp,28(sp)
   8ef2c:	df000704 	addi	fp,sp,28
   8ef30:	e13ffb15 	stw	r4,-20(fp)
   8ef34:	e17ffc15 	stw	r5,-16(fp)
   8ef38:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   8ef3c:	00bff9c4 	movi	r2,-25
   8ef40:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   8ef44:	e0bffc17 	ldw	r2,-16(fp)
   8ef48:	e0bfff15 	stw	r2,-4(fp)
   8ef4c:	e0ffff17 	ldw	r3,-4(fp)
   8ef50:	189a8060 	cmpeqi	r2,r3,27137
   8ef54:	1000041e 	bne	r2,zero,8ef68 <altera_avalon_jtag_uart_ioctl+0x44>
   8ef58:	e0ffff17 	ldw	r3,-4(fp)
   8ef5c:	189a80a0 	cmpeqi	r2,r3,27138
   8ef60:	10001b1e 	bne	r2,zero,8efd0 <altera_avalon_jtag_uart_ioctl+0xac>
   8ef64:	00002706 	br	8f004 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8ef68:	e0bffb17 	ldw	r2,-20(fp)
   8ef6c:	10c00117 	ldw	r3,4(r2)
   8ef70:	00a00034 	movhi	r2,32768
   8ef74:	10bfffc4 	addi	r2,r2,-1
   8ef78:	18802226 	beq	r3,r2,8f004 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   8ef7c:	e0bffd17 	ldw	r2,-12(fp)
   8ef80:	10800017 	ldw	r2,0(r2)
   8ef84:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8ef88:	e0bff917 	ldw	r2,-28(fp)
   8ef8c:	10800090 	cmplti	r2,r2,2
   8ef90:	1000071e 	bne	r2,zero,8efb0 <altera_avalon_jtag_uart_ioctl+0x8c>
   8ef94:	e0fff917 	ldw	r3,-28(fp)
   8ef98:	00a00034 	movhi	r2,32768
   8ef9c:	10bfffc4 	addi	r2,r2,-1
   8efa0:	18800326 	beq	r3,r2,8efb0 <altera_avalon_jtag_uart_ioctl+0x8c>
   8efa4:	e0bff917 	ldw	r2,-28(fp)
   8efa8:	e0bffe15 	stw	r2,-8(fp)
   8efac:	00000306 	br	8efbc <altera_avalon_jtag_uart_ioctl+0x98>
   8efb0:	00e00034 	movhi	r3,32768
   8efb4:	18ffff84 	addi	r3,r3,-2
   8efb8:	e0fffe15 	stw	r3,-8(fp)
   8efbc:	e0bffb17 	ldw	r2,-20(fp)
   8efc0:	e0fffe17 	ldw	r3,-8(fp)
   8efc4:	10c00115 	stw	r3,4(r2)
      rc = 0;
   8efc8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   8efcc:	00000d06 	br	8f004 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8efd0:	e0bffb17 	ldw	r2,-20(fp)
   8efd4:	10c00117 	ldw	r3,4(r2)
   8efd8:	00a00034 	movhi	r2,32768
   8efdc:	10bfffc4 	addi	r2,r2,-1
   8efe0:	18800826 	beq	r3,r2,8f004 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8efe4:	e13ffd17 	ldw	r4,-12(fp)
   8efe8:	e0bffb17 	ldw	r2,-20(fp)
   8efec:	10c00917 	ldw	r3,36(r2)
   8eff0:	e0bffb17 	ldw	r2,-20(fp)
   8eff4:	10800117 	ldw	r2,4(r2)
   8eff8:	1885803a 	cmpltu	r2,r3,r2
   8effc:	20800015 	stw	r2,0(r4)
      rc = 0;
   8f000:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   8f004:	e0bffa17 	ldw	r2,-24(fp)
}
   8f008:	e037883a 	mov	sp,fp
   8f00c:	df000017 	ldw	fp,0(sp)
   8f010:	dec00104 	addi	sp,sp,4
   8f014:	f800283a 	ret

0008f018 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8f018:	defff204 	addi	sp,sp,-56
   8f01c:	dfc00d15 	stw	ra,52(sp)
   8f020:	df000c15 	stw	fp,48(sp)
   8f024:	df000c04 	addi	fp,sp,48
   8f028:	e13ffb15 	stw	r4,-20(fp)
   8f02c:	e17ffc15 	stw	r5,-16(fp)
   8f030:	e1bffd15 	stw	r6,-12(fp)
   8f034:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   8f038:	e0bffc17 	ldw	r2,-16(fp)
   8f03c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8f040:	00004806 	br	8f164 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8f044:	e0bffb17 	ldw	r2,-20(fp)
   8f048:	10800a17 	ldw	r2,40(r2)
   8f04c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8f050:	e0bffb17 	ldw	r2,-20(fp)
   8f054:	10800b17 	ldw	r2,44(r2)
   8f058:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   8f05c:	e0fff717 	ldw	r3,-36(fp)
   8f060:	e0bff617 	ldw	r2,-40(fp)
   8f064:	18800536 	bltu	r3,r2,8f07c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8f068:	e0bff717 	ldw	r2,-36(fp)
   8f06c:	e0fff617 	ldw	r3,-40(fp)
   8f070:	10c5c83a 	sub	r2,r2,r3
   8f074:	e0bff815 	stw	r2,-32(fp)
   8f078:	00000406 	br	8f08c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8f07c:	00820004 	movi	r2,2048
   8f080:	e0fff617 	ldw	r3,-40(fp)
   8f084:	10c5c83a 	sub	r2,r2,r3
   8f088:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8f08c:	e0bff817 	ldw	r2,-32(fp)
   8f090:	1005003a 	cmpeq	r2,r2,zero
   8f094:	10001f1e 	bne	r2,zero,8f114 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   8f098:	e0fffd17 	ldw	r3,-12(fp)
   8f09c:	e0bff817 	ldw	r2,-32(fp)
   8f0a0:	1880022e 	bgeu	r3,r2,8f0ac <altera_avalon_jtag_uart_read+0x94>
        n = space;
   8f0a4:	e0bffd17 	ldw	r2,-12(fp)
   8f0a8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8f0ac:	e0bffb17 	ldw	r2,-20(fp)
   8f0b0:	10c00e04 	addi	r3,r2,56
   8f0b4:	e0bff617 	ldw	r2,-40(fp)
   8f0b8:	1887883a 	add	r3,r3,r2
   8f0bc:	e0bffa17 	ldw	r2,-24(fp)
   8f0c0:	1009883a 	mov	r4,r2
   8f0c4:	180b883a 	mov	r5,r3
   8f0c8:	e1bff817 	ldw	r6,-32(fp)
   8f0cc:	008ae400 	call	8ae40 <memcpy>
      ptr   += n;
   8f0d0:	e0fff817 	ldw	r3,-32(fp)
   8f0d4:	e0bffa17 	ldw	r2,-24(fp)
   8f0d8:	10c5883a 	add	r2,r2,r3
   8f0dc:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   8f0e0:	e0fffd17 	ldw	r3,-12(fp)
   8f0e4:	e0bff817 	ldw	r2,-32(fp)
   8f0e8:	1885c83a 	sub	r2,r3,r2
   8f0ec:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f0f0:	e0fff617 	ldw	r3,-40(fp)
   8f0f4:	e0bff817 	ldw	r2,-32(fp)
   8f0f8:	1885883a 	add	r2,r3,r2
   8f0fc:	10c1ffcc 	andi	r3,r2,2047
   8f100:	e0bffb17 	ldw	r2,-20(fp)
   8f104:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8f108:	e0bffd17 	ldw	r2,-12(fp)
   8f10c:	10800048 	cmpgei	r2,r2,1
   8f110:	103fcc1e 	bne	r2,zero,8f044 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   8f114:	e0fffa17 	ldw	r3,-24(fp)
   8f118:	e0bffc17 	ldw	r2,-16(fp)
   8f11c:	1880141e 	bne	r3,r2,8f170 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8f120:	e0bffe17 	ldw	r2,-8(fp)
   8f124:	1090000c 	andi	r2,r2,16384
   8f128:	1004c03a 	cmpne	r2,r2,zero
   8f12c:	1000101e 	bne	r2,zero,8f170 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8f130:	e0bffb17 	ldw	r2,-20(fp)
   8f134:	10c00a17 	ldw	r3,40(r2)
   8f138:	e0bff717 	ldw	r2,-36(fp)
   8f13c:	1880051e 	bne	r3,r2,8f154 <altera_avalon_jtag_uart_read+0x13c>
   8f140:	e0bffb17 	ldw	r2,-20(fp)
   8f144:	10c00917 	ldw	r3,36(r2)
   8f148:	e0bffb17 	ldw	r2,-20(fp)
   8f14c:	10800117 	ldw	r2,4(r2)
   8f150:	18bff736 	bltu	r3,r2,8f130 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8f154:	e0bffb17 	ldw	r2,-20(fp)
   8f158:	10c00a17 	ldw	r3,40(r2)
   8f15c:	e0bff717 	ldw	r2,-36(fp)
   8f160:	18800326 	beq	r3,r2,8f170 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8f164:	e0bffd17 	ldw	r2,-12(fp)
   8f168:	10800048 	cmpgei	r2,r2,1
   8f16c:	103fb51e 	bne	r2,zero,8f044 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8f170:	e0fffa17 	ldw	r3,-24(fp)
   8f174:	e0bffc17 	ldw	r2,-16(fp)
   8f178:	18801926 	beq	r3,r2,8f1e0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f17c:	0005303a 	rdctl	r2,status
   8f180:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f184:	e0fff517 	ldw	r3,-44(fp)
   8f188:	00bfff84 	movi	r2,-2
   8f18c:	1884703a 	and	r2,r3,r2
   8f190:	1001703a 	wrctl	status,r2
  
  return context;
   8f194:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8f198:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f19c:	e0bffb17 	ldw	r2,-20(fp)
   8f1a0:	10800817 	ldw	r2,32(r2)
   8f1a4:	10c00054 	ori	r3,r2,1
   8f1a8:	e0bffb17 	ldw	r2,-20(fp)
   8f1ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f1b0:	e0bffb17 	ldw	r2,-20(fp)
   8f1b4:	10800017 	ldw	r2,0(r2)
   8f1b8:	11000104 	addi	r4,r2,4
   8f1bc:	e0bffb17 	ldw	r2,-20(fp)
   8f1c0:	10800817 	ldw	r2,32(r2)
   8f1c4:	1007883a 	mov	r3,r2
   8f1c8:	2005883a 	mov	r2,r4
   8f1cc:	10c00035 	stwio	r3,0(r2)
   8f1d0:	e0bff917 	ldw	r2,-28(fp)
   8f1d4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f1d8:	e0bff417 	ldw	r2,-48(fp)
   8f1dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8f1e0:	e0fffa17 	ldw	r3,-24(fp)
   8f1e4:	e0bffc17 	ldw	r2,-16(fp)
   8f1e8:	18800526 	beq	r3,r2,8f200 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   8f1ec:	e0fffa17 	ldw	r3,-24(fp)
   8f1f0:	e0bffc17 	ldw	r2,-16(fp)
   8f1f4:	1887c83a 	sub	r3,r3,r2
   8f1f8:	e0ffff15 	stw	r3,-4(fp)
   8f1fc:	00000906 	br	8f224 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   8f200:	e0bffe17 	ldw	r2,-8(fp)
   8f204:	1090000c 	andi	r2,r2,16384
   8f208:	1005003a 	cmpeq	r2,r2,zero
   8f20c:	1000031e 	bne	r2,zero,8f21c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8f210:	00bffd44 	movi	r2,-11
   8f214:	e0bfff15 	stw	r2,-4(fp)
   8f218:	00000206 	br	8f224 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   8f21c:	00bffec4 	movi	r2,-5
   8f220:	e0bfff15 	stw	r2,-4(fp)
   8f224:	e0bfff17 	ldw	r2,-4(fp)
}
   8f228:	e037883a 	mov	sp,fp
   8f22c:	dfc00117 	ldw	ra,4(sp)
   8f230:	df000017 	ldw	fp,0(sp)
   8f234:	dec00204 	addi	sp,sp,8
   8f238:	f800283a 	ret

0008f23c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8f23c:	defff204 	addi	sp,sp,-56
   8f240:	dfc00d15 	stw	ra,52(sp)
   8f244:	df000c15 	stw	fp,48(sp)
   8f248:	df000c04 	addi	fp,sp,48
   8f24c:	e13ffb15 	stw	r4,-20(fp)
   8f250:	e17ffc15 	stw	r5,-16(fp)
   8f254:	e1bffd15 	stw	r6,-12(fp)
   8f258:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8f25c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8f260:	e0bffc17 	ldw	r2,-16(fp)
   8f264:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8f268:	00003a06 	br	8f354 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8f26c:	e0bffb17 	ldw	r2,-20(fp)
   8f270:	10800c17 	ldw	r2,48(r2)
   8f274:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   8f278:	e0bffb17 	ldw	r2,-20(fp)
   8f27c:	10800d17 	ldw	r2,52(r2)
   8f280:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   8f284:	e0fffa17 	ldw	r3,-24(fp)
   8f288:	e0bff917 	ldw	r2,-28(fp)
   8f28c:	1880062e 	bgeu	r3,r2,8f2a8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8f290:	e0fff917 	ldw	r3,-28(fp)
   8f294:	e0bffa17 	ldw	r2,-24(fp)
   8f298:	1885c83a 	sub	r2,r3,r2
   8f29c:	10bfffc4 	addi	r2,r2,-1
   8f2a0:	e0bff815 	stw	r2,-32(fp)
   8f2a4:	00000c06 	br	8f2d8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   8f2a8:	e0bff917 	ldw	r2,-28(fp)
   8f2ac:	1005003a 	cmpeq	r2,r2,zero
   8f2b0:	1000051e 	bne	r2,zero,8f2c8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8f2b4:	00820004 	movi	r2,2048
   8f2b8:	e0fffa17 	ldw	r3,-24(fp)
   8f2bc:	10c5c83a 	sub	r2,r2,r3
   8f2c0:	e0bff815 	stw	r2,-32(fp)
   8f2c4:	00000406 	br	8f2d8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8f2c8:	0081ffc4 	movi	r2,2047
   8f2cc:	e0fffa17 	ldw	r3,-24(fp)
   8f2d0:	10c5c83a 	sub	r2,r2,r3
   8f2d4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8f2d8:	e0bff817 	ldw	r2,-32(fp)
   8f2dc:	1005003a 	cmpeq	r2,r2,zero
   8f2e0:	10001f1e 	bne	r2,zero,8f360 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   8f2e4:	e0fffd17 	ldw	r3,-12(fp)
   8f2e8:	e0bff817 	ldw	r2,-32(fp)
   8f2ec:	1880022e 	bgeu	r3,r2,8f2f8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   8f2f0:	e0bffd17 	ldw	r2,-12(fp)
   8f2f4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8f2f8:	e0bffb17 	ldw	r2,-20(fp)
   8f2fc:	10c20e04 	addi	r3,r2,2104
   8f300:	e0bffa17 	ldw	r2,-24(fp)
   8f304:	1885883a 	add	r2,r3,r2
   8f308:	e0fffc17 	ldw	r3,-16(fp)
   8f30c:	1009883a 	mov	r4,r2
   8f310:	180b883a 	mov	r5,r3
   8f314:	e1bff817 	ldw	r6,-32(fp)
   8f318:	008ae400 	call	8ae40 <memcpy>
      ptr   += n;
   8f31c:	e0fff817 	ldw	r3,-32(fp)
   8f320:	e0bffc17 	ldw	r2,-16(fp)
   8f324:	10c5883a 	add	r2,r2,r3
   8f328:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   8f32c:	e0fffd17 	ldw	r3,-12(fp)
   8f330:	e0bff817 	ldw	r2,-32(fp)
   8f334:	1885c83a 	sub	r2,r3,r2
   8f338:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f33c:	e0fffa17 	ldw	r3,-24(fp)
   8f340:	e0bff817 	ldw	r2,-32(fp)
   8f344:	1885883a 	add	r2,r3,r2
   8f348:	10c1ffcc 	andi	r3,r2,2047
   8f34c:	e0bffb17 	ldw	r2,-20(fp)
   8f350:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8f354:	e0bffd17 	ldw	r2,-12(fp)
   8f358:	10800048 	cmpgei	r2,r2,1
   8f35c:	103fc31e 	bne	r2,zero,8f26c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f360:	0005303a 	rdctl	r2,status
   8f364:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f368:	e0fff517 	ldw	r3,-44(fp)
   8f36c:	00bfff84 	movi	r2,-2
   8f370:	1884703a 	and	r2,r3,r2
   8f374:	1001703a 	wrctl	status,r2
  
  return context;
   8f378:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8f37c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8f380:	e0bffb17 	ldw	r2,-20(fp)
   8f384:	10800817 	ldw	r2,32(r2)
   8f388:	10c00094 	ori	r3,r2,2
   8f38c:	e0bffb17 	ldw	r2,-20(fp)
   8f390:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f394:	e0bffb17 	ldw	r2,-20(fp)
   8f398:	10800017 	ldw	r2,0(r2)
   8f39c:	11000104 	addi	r4,r2,4
   8f3a0:	e0bffb17 	ldw	r2,-20(fp)
   8f3a4:	10800817 	ldw	r2,32(r2)
   8f3a8:	1007883a 	mov	r3,r2
   8f3ac:	2005883a 	mov	r2,r4
   8f3b0:	10c00035 	stwio	r3,0(r2)
   8f3b4:	e0bff717 	ldw	r2,-36(fp)
   8f3b8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f3bc:	e0bff417 	ldw	r2,-48(fp)
   8f3c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8f3c4:	e0bffd17 	ldw	r2,-12(fp)
   8f3c8:	10800050 	cmplti	r2,r2,1
   8f3cc:	1000111e 	bne	r2,zero,8f414 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   8f3d0:	e0bffe17 	ldw	r2,-8(fp)
   8f3d4:	1090000c 	andi	r2,r2,16384
   8f3d8:	1004c03a 	cmpne	r2,r2,zero
   8f3dc:	1000101e 	bne	r2,zero,8f420 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8f3e0:	e0bffb17 	ldw	r2,-20(fp)
   8f3e4:	10c00d17 	ldw	r3,52(r2)
   8f3e8:	e0bff917 	ldw	r2,-28(fp)
   8f3ec:	1880051e 	bne	r3,r2,8f404 <altera_avalon_jtag_uart_write+0x1c8>
   8f3f0:	e0bffb17 	ldw	r2,-20(fp)
   8f3f4:	10c00917 	ldw	r3,36(r2)
   8f3f8:	e0bffb17 	ldw	r2,-20(fp)
   8f3fc:	10800117 	ldw	r2,4(r2)
   8f400:	18bff736 	bltu	r3,r2,8f3e0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8f404:	e0bffb17 	ldw	r2,-20(fp)
   8f408:	10c00d17 	ldw	r3,52(r2)
   8f40c:	e0bff917 	ldw	r2,-28(fp)
   8f410:	18800326 	beq	r3,r2,8f420 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   8f414:	e0bffd17 	ldw	r2,-12(fp)
   8f418:	10800048 	cmpgei	r2,r2,1
   8f41c:	103fcd1e 	bne	r2,zero,8f354 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8f420:	e0fffc17 	ldw	r3,-16(fp)
   8f424:	e0bff617 	ldw	r2,-40(fp)
   8f428:	18800526 	beq	r3,r2,8f440 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   8f42c:	e0fffc17 	ldw	r3,-16(fp)
   8f430:	e0bff617 	ldw	r2,-40(fp)
   8f434:	1887c83a 	sub	r3,r3,r2
   8f438:	e0ffff15 	stw	r3,-4(fp)
   8f43c:	00000906 	br	8f464 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   8f440:	e0bffe17 	ldw	r2,-8(fp)
   8f444:	1090000c 	andi	r2,r2,16384
   8f448:	1005003a 	cmpeq	r2,r2,zero
   8f44c:	1000031e 	bne	r2,zero,8f45c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   8f450:	00bffd44 	movi	r2,-11
   8f454:	e0bfff15 	stw	r2,-4(fp)
   8f458:	00000206 	br	8f464 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   8f45c:	00bffec4 	movi	r2,-5
   8f460:	e0bfff15 	stw	r2,-4(fp)
   8f464:	e0bfff17 	ldw	r2,-4(fp)
}
   8f468:	e037883a 	mov	sp,fp
   8f46c:	dfc00117 	ldw	ra,4(sp)
   8f470:	df000017 	ldw	fp,0(sp)
   8f474:	dec00204 	addi	sp,sp,8
   8f478:	f800283a 	ret

0008f47c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   8f47c:	defffa04 	addi	sp,sp,-24
   8f480:	dfc00515 	stw	ra,20(sp)
   8f484:	df000415 	stw	fp,16(sp)
   8f488:	df000404 	addi	fp,sp,16
   8f48c:	e13ffe15 	stw	r4,-8(fp)
   8f490:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
   8f494:	e0bffe17 	ldw	r2,-8(fp)
   8f498:	10800017 	ldw	r2,0(r2)
   8f49c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   8f4a0:	008003f4 	movhi	r2,15
   8f4a4:	10909004 	addi	r2,r2,16960
   8f4a8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   8f4ac:	e0bffe17 	ldw	r2,-8(fp)
   8f4b0:	10800803 	ldbu	r2,32(r2)
   8f4b4:	10803fcc 	andi	r2,r2,255
   8f4b8:	1080201c 	xori	r2,r2,128
   8f4bc:	10bfe004 	addi	r2,r2,-128
   8f4c0:	1004c03a 	cmpne	r2,r2,zero
   8f4c4:	1000161e 	bne	r2,zero,8f520 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   8f4c8:	00000a06 	br	8f4f4 <lcd_write_command+0x78>
    if (--i == 0)
   8f4cc:	e0bffc17 	ldw	r2,-16(fp)
   8f4d0:	10bfffc4 	addi	r2,r2,-1
   8f4d4:	e0bffc15 	stw	r2,-16(fp)
   8f4d8:	e0bffc17 	ldw	r2,-16(fp)
   8f4dc:	1004c03a 	cmpne	r2,r2,zero
   8f4e0:	1000041e 	bne	r2,zero,8f4f4 <lcd_write_command+0x78>
    {
      sp->broken = 1;
   8f4e4:	e0fffe17 	ldw	r3,-8(fp)
   8f4e8:	00800044 	movi	r2,1
   8f4ec:	18800805 	stb	r2,32(r3)
      return;
   8f4f0:	00000b06 	br	8f520 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   8f4f4:	e0bffd17 	ldw	r2,-12(fp)
   8f4f8:	10800104 	addi	r2,r2,4
   8f4fc:	10800037 	ldwio	r2,0(r2)
   8f500:	1080200c 	andi	r2,r2,128
   8f504:	1004c03a 	cmpne	r2,r2,zero
   8f508:	103ff01e 	bne	r2,zero,8f4cc <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   8f50c:	01001904 	movi	r4,100
   8f510:	0091e780 	call	91e78 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   8f514:	e0bffd17 	ldw	r2,-12(fp)
   8f518:	e0ffff03 	ldbu	r3,-4(fp)
   8f51c:	10c00035 	stwio	r3,0(r2)
}
   8f520:	e037883a 	mov	sp,fp
   8f524:	dfc00117 	ldw	ra,4(sp)
   8f528:	df000017 	ldw	fp,0(sp)
   8f52c:	dec00204 	addi	sp,sp,8
   8f530:	f800283a 	ret

0008f534 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   8f534:	defffa04 	addi	sp,sp,-24
   8f538:	dfc00515 	stw	ra,20(sp)
   8f53c:	df000415 	stw	fp,16(sp)
   8f540:	df000404 	addi	fp,sp,16
   8f544:	e13ffe15 	stw	r4,-8(fp)
   8f548:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
   8f54c:	e0bffe17 	ldw	r2,-8(fp)
   8f550:	10800017 	ldw	r2,0(r2)
   8f554:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   8f558:	008003f4 	movhi	r2,15
   8f55c:	10909004 	addi	r2,r2,16960
   8f560:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   8f564:	e0bffe17 	ldw	r2,-8(fp)
   8f568:	10800803 	ldbu	r2,32(r2)
   8f56c:	10803fcc 	andi	r2,r2,255
   8f570:	1080201c 	xori	r2,r2,128
   8f574:	10bfe004 	addi	r2,r2,-128
   8f578:	1004c03a 	cmpne	r2,r2,zero
   8f57c:	10001d1e 	bne	r2,zero,8f5f4 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   8f580:	00000a06 	br	8f5ac <lcd_write_data+0x78>
    if (--i == 0)
   8f584:	e0bffc17 	ldw	r2,-16(fp)
   8f588:	10bfffc4 	addi	r2,r2,-1
   8f58c:	e0bffc15 	stw	r2,-16(fp)
   8f590:	e0bffc17 	ldw	r2,-16(fp)
   8f594:	1004c03a 	cmpne	r2,r2,zero
   8f598:	1000041e 	bne	r2,zero,8f5ac <lcd_write_data+0x78>
    {
      sp->broken = 1;
   8f59c:	e0fffe17 	ldw	r3,-8(fp)
   8f5a0:	00800044 	movi	r2,1
   8f5a4:	18800805 	stb	r2,32(r3)
      return;
   8f5a8:	00001206 	br	8f5f4 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   8f5ac:	e0bffd17 	ldw	r2,-12(fp)
   8f5b0:	10800104 	addi	r2,r2,4
   8f5b4:	10800037 	ldwio	r2,0(r2)
   8f5b8:	1080200c 	andi	r2,r2,128
   8f5bc:	1004c03a 	cmpne	r2,r2,zero
   8f5c0:	103ff01e 	bne	r2,zero,8f584 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   8f5c4:	01001904 	movi	r4,100
   8f5c8:	0091e780 	call	91e78 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   8f5cc:	e0bffd17 	ldw	r2,-12(fp)
   8f5d0:	10800204 	addi	r2,r2,8
   8f5d4:	e0ffff03 	ldbu	r3,-4(fp)
   8f5d8:	10c00035 	stwio	r3,0(r2)

  sp->address++;
   8f5dc:	e0bffe17 	ldw	r2,-8(fp)
   8f5e0:	108008c3 	ldbu	r2,35(r2)
   8f5e4:	10800044 	addi	r2,r2,1
   8f5e8:	1007883a 	mov	r3,r2
   8f5ec:	e0bffe17 	ldw	r2,-8(fp)
   8f5f0:	10c008c5 	stb	r3,35(r2)
}
   8f5f4:	e037883a 	mov	sp,fp
   8f5f8:	dfc00117 	ldw	ra,4(sp)
   8f5fc:	df000017 	ldw	fp,0(sp)
   8f600:	dec00204 	addi	sp,sp,8
   8f604:	f800283a 	ret

0008f608 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   8f608:	defffb04 	addi	sp,sp,-20
   8f60c:	dfc00415 	stw	ra,16(sp)
   8f610:	df000315 	stw	fp,12(sp)
   8f614:	dc000215 	stw	r16,8(sp)
   8f618:	df000204 	addi	fp,sp,8
   8f61c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   8f620:	e13fff17 	ldw	r4,-4(fp)
   8f624:	01400044 	movi	r5,1
   8f628:	008f47c0 	call	8f47c <lcd_write_command>

  sp->x = 0;
   8f62c:	e0bfff17 	ldw	r2,-4(fp)
   8f630:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   8f634:	e0bfff17 	ldw	r2,-4(fp)
   8f638:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   8f63c:	e0bfff17 	ldw	r2,-4(fp)
   8f640:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   8f644:	e03ffe15 	stw	zero,-8(fp)
   8f648:	00001c06 	br	8f6bc <lcd_clear_screen+0xb4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   8f64c:	e13ffe17 	ldw	r4,-8(fp)
   8f650:	014018c4 	movi	r5,99
   8f654:	00843d00 	call	843d0 <__mulsi3>
   8f658:	10c01004 	addi	r3,r2,64
   8f65c:	e0bfff17 	ldw	r2,-4(fp)
   8f660:	1889883a 	add	r4,r3,r2
   8f664:	01400804 	movi	r5,32
   8f668:	01801444 	movi	r6,81
   8f66c:	00866cc0 	call	866cc <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   8f670:	e13ffe17 	ldw	r4,-8(fp)
   8f674:	014018c4 	movi	r5,99
   8f678:	00843d00 	call	843d0 <__mulsi3>
   8f67c:	10c00c04 	addi	r3,r2,48
   8f680:	e0bfff17 	ldw	r2,-4(fp)
   8f684:	1889883a 	add	r4,r3,r2
   8f688:	01400804 	movi	r5,32
   8f68c:	01800404 	movi	r6,16
   8f690:	00866cc0 	call	866cc <memset>
    sp->line[y].width = 0;
   8f694:	e13ffe17 	ldw	r4,-8(fp)
   8f698:	e43fff17 	ldw	r16,-4(fp)
   8f69c:	014018c4 	movi	r5,99
   8f6a0:	00843d00 	call	843d0 <__mulsi3>
   8f6a4:	1405883a 	add	r2,r2,r16
   8f6a8:	10802404 	addi	r2,r2,144
   8f6ac:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   8f6b0:	e0bffe17 	ldw	r2,-8(fp)
   8f6b4:	10800044 	addi	r2,r2,1
   8f6b8:	e0bffe15 	stw	r2,-8(fp)
   8f6bc:	e0bffe17 	ldw	r2,-8(fp)
   8f6c0:	10800090 	cmplti	r2,r2,2
   8f6c4:	103fe11e 	bne	r2,zero,8f64c <lcd_clear_screen+0x44>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   8f6c8:	e037883a 	mov	sp,fp
   8f6cc:	dfc00217 	ldw	ra,8(sp)
   8f6d0:	df000117 	ldw	fp,4(sp)
   8f6d4:	dc000017 	ldw	r16,0(sp)
   8f6d8:	dec00304 	addi	sp,sp,12
   8f6dc:	f800283a 	ret

0008f6e0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   8f6e0:	defff404 	addi	sp,sp,-48
   8f6e4:	dfc00b15 	stw	ra,44(sp)
   8f6e8:	df000a15 	stw	fp,40(sp)
   8f6ec:	dc800915 	stw	r18,36(sp)
   8f6f0:	dc400815 	stw	r17,32(sp)
   8f6f4:	dc000715 	stw	r16,28(sp)
   8f6f8:	df000704 	addi	fp,sp,28
   8f6fc:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   8f700:	e0bfff17 	ldw	r2,-4(fp)
   8f704:	10800943 	ldbu	r2,37(r2)
   8f708:	10803fcc 	andi	r2,r2,255
   8f70c:	1080201c 	xori	r2,r2,128
   8f710:	10bfe004 	addi	r2,r2,-128
   8f714:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   8f718:	e03ffe15 	stw	zero,-8(fp)
   8f71c:	00006a06 	br	8f8c8 <lcd_repaint_screen+0x1e8>
  {
    int width  = sp->line[y].width;
   8f720:	e13ffe17 	ldw	r4,-8(fp)
   8f724:	e43fff17 	ldw	r16,-4(fp)
   8f728:	014018c4 	movi	r5,99
   8f72c:	00843d00 	call	843d0 <__mulsi3>
   8f730:	1405883a 	add	r2,r2,r16
   8f734:	10802404 	addi	r2,r2,144
   8f738:	10800043 	ldbu	r2,1(r2)
   8f73c:	10803fcc 	andi	r2,r2,255
   8f740:	1080201c 	xori	r2,r2,128
   8f744:	10bfe004 	addi	r2,r2,-128
   8f748:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   8f74c:	e13ffe17 	ldw	r4,-8(fp)
   8f750:	e43fff17 	ldw	r16,-4(fp)
   8f754:	014018c4 	movi	r5,99
   8f758:	00843d00 	call	843d0 <__mulsi3>
   8f75c:	1405883a 	add	r2,r2,r16
   8f760:	10802404 	addi	r2,r2,144
   8f764:	10800083 	ldbu	r2,2(r2)
   8f768:	11003fcc 	andi	r4,r2,255
   8f76c:	e17ffc17 	ldw	r5,-16(fp)
   8f770:	00843d00 	call	843d0 <__mulsi3>
   8f774:	1005d23a 	srai	r2,r2,8
   8f778:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
   8f77c:	e0fffa17 	ldw	r3,-24(fp)
   8f780:	e0bffb17 	ldw	r2,-20(fp)
   8f784:	18800116 	blt	r3,r2,8f78c <lcd_repaint_screen+0xac>
      offset = 0;
   8f788:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   8f78c:	e03ffd15 	stw	zero,-12(fp)
   8f790:	00004706 	br	8f8b0 <lcd_repaint_screen+0x1d0>
    {
      char c = sp->line[y].data[(x + offset) % width];
   8f794:	e47ffe17 	ldw	r17,-8(fp)
   8f798:	e0fffd17 	ldw	r3,-12(fp)
   8f79c:	e0bffa17 	ldw	r2,-24(fp)
   8f7a0:	1889883a 	add	r4,r3,r2
   8f7a4:	e17ffb17 	ldw	r5,-20(fp)
   8f7a8:	00843600 	call	84360 <__modsi3>
   8f7ac:	1025883a 	mov	r18,r2
   8f7b0:	e43fff17 	ldw	r16,-4(fp)
   8f7b4:	8809883a 	mov	r4,r17
   8f7b8:	014018c4 	movi	r5,99
   8f7bc:	00843d00 	call	843d0 <__mulsi3>
   8f7c0:	1405883a 	add	r2,r2,r16
   8f7c4:	1485883a 	add	r2,r2,r18
   8f7c8:	10801004 	addi	r2,r2,64
   8f7cc:	10800003 	ldbu	r2,0(r2)
   8f7d0:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   8f7d4:	e13ffe17 	ldw	r4,-8(fp)
   8f7d8:	e47ffd17 	ldw	r17,-12(fp)
   8f7dc:	e43fff17 	ldw	r16,-4(fp)
   8f7e0:	014018c4 	movi	r5,99
   8f7e4:	00843d00 	call	843d0 <__mulsi3>
   8f7e8:	1405883a 	add	r2,r2,r16
   8f7ec:	1445883a 	add	r2,r2,r17
   8f7f0:	10800c04 	addi	r2,r2,48
   8f7f4:	10800003 	ldbu	r2,0(r2)
   8f7f8:	10c03fcc 	andi	r3,r2,255
   8f7fc:	18c0201c 	xori	r3,r3,128
   8f800:	18ffe004 	addi	r3,r3,-128
   8f804:	e0bff947 	ldb	r2,-27(fp)
   8f808:	18802626 	beq	r3,r2,8f8a4 <lcd_repaint_screen+0x1c4>
      {
        unsigned char address = x + colstart[y];
   8f80c:	e0fffe17 	ldw	r3,-8(fp)
   8f810:	d0a00d04 	addi	r2,gp,-32716
   8f814:	1885883a 	add	r2,r3,r2
   8f818:	10800003 	ldbu	r2,0(r2)
   8f81c:	1007883a 	mov	r3,r2
   8f820:	e0bffd17 	ldw	r2,-12(fp)
   8f824:	1885883a 	add	r2,r3,r2
   8f828:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
   8f82c:	e0fff903 	ldbu	r3,-28(fp)
   8f830:	e0bfff17 	ldw	r2,-4(fp)
   8f834:	108008c3 	ldbu	r2,35(r2)
   8f838:	10803fcc 	andi	r2,r2,255
   8f83c:	1080201c 	xori	r2,r2,128
   8f840:	10bfe004 	addi	r2,r2,-128
   8f844:	18800926 	beq	r3,r2,8f86c <lcd_repaint_screen+0x18c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   8f848:	e0fff903 	ldbu	r3,-28(fp)
   8f84c:	00bfe004 	movi	r2,-128
   8f850:	1884b03a 	or	r2,r3,r2
   8f854:	11403fcc 	andi	r5,r2,255
   8f858:	e13fff17 	ldw	r4,-4(fp)
   8f85c:	008f47c0 	call	8f47c <lcd_write_command>
          sp->address = address;
   8f860:	e0fff903 	ldbu	r3,-28(fp)
   8f864:	e0bfff17 	ldw	r2,-4(fp)
   8f868:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   8f86c:	e0bff943 	ldbu	r2,-27(fp)
   8f870:	11403fcc 	andi	r5,r2,255
   8f874:	e13fff17 	ldw	r4,-4(fp)
   8f878:	008f5340 	call	8f534 <lcd_write_data>
        sp->line[y].visible[x] = c;
   8f87c:	e13ffe17 	ldw	r4,-8(fp)
   8f880:	e47ffd17 	ldw	r17,-12(fp)
   8f884:	e43fff17 	ldw	r16,-4(fp)
   8f888:	014018c4 	movi	r5,99
   8f88c:	00843d00 	call	843d0 <__mulsi3>
   8f890:	1405883a 	add	r2,r2,r16
   8f894:	1445883a 	add	r2,r2,r17
   8f898:	10c00c04 	addi	r3,r2,48
   8f89c:	e0bff943 	ldbu	r2,-27(fp)
   8f8a0:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   8f8a4:	e0bffd17 	ldw	r2,-12(fp)
   8f8a8:	10800044 	addi	r2,r2,1
   8f8ac:	e0bffd15 	stw	r2,-12(fp)
   8f8b0:	e0bffd17 	ldw	r2,-12(fp)
   8f8b4:	10800410 	cmplti	r2,r2,16
   8f8b8:	103fb61e 	bne	r2,zero,8f794 <lcd_repaint_screen+0xb4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   8f8bc:	e0bffe17 	ldw	r2,-8(fp)
   8f8c0:	10800044 	addi	r2,r2,1
   8f8c4:	e0bffe15 	stw	r2,-8(fp)
   8f8c8:	e0bffe17 	ldw	r2,-8(fp)
   8f8cc:	10800090 	cmplti	r2,r2,2
   8f8d0:	103f931e 	bne	r2,zero,8f720 <lcd_repaint_screen+0x40>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   8f8d4:	e037883a 	mov	sp,fp
   8f8d8:	dfc00417 	ldw	ra,16(sp)
   8f8dc:	df000317 	ldw	fp,12(sp)
   8f8e0:	dc800217 	ldw	r18,8(sp)
   8f8e4:	dc400117 	ldw	r17,4(sp)
   8f8e8:	dc000017 	ldw	r16,0(sp)
   8f8ec:	dec00504 	addi	sp,sp,20
   8f8f0:	f800283a 	ret

0008f8f4 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   8f8f4:	defffb04 	addi	sp,sp,-20
   8f8f8:	dfc00415 	stw	ra,16(sp)
   8f8fc:	df000315 	stw	fp,12(sp)
   8f900:	dc000215 	stw	r16,8(sp)
   8f904:	df000204 	addi	fp,sp,8
   8f908:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   8f90c:	e03ffe15 	stw	zero,-8(fp)
   8f910:	00002106 	br	8f998 <lcd_scroll_up+0xa4>
  {
    if (y < ALT_LCD_HEIGHT-1)
   8f914:	e0bffe17 	ldw	r2,-8(fp)
   8f918:	10800048 	cmpgei	r2,r2,1
   8f91c:	1000121e 	bne	r2,zero,8f968 <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   8f920:	e13ffe17 	ldw	r4,-8(fp)
   8f924:	014018c4 	movi	r5,99
   8f928:	00843d00 	call	843d0 <__mulsi3>
   8f92c:	10c01004 	addi	r3,r2,64
   8f930:	e0bfff17 	ldw	r2,-4(fp)
   8f934:	18a1883a 	add	r16,r3,r2
   8f938:	e0bffe17 	ldw	r2,-8(fp)
   8f93c:	11000044 	addi	r4,r2,1
   8f940:	014018c4 	movi	r5,99
   8f944:	00843d00 	call	843d0 <__mulsi3>
   8f948:	10c01004 	addi	r3,r2,64
   8f94c:	e0bfff17 	ldw	r2,-4(fp)
   8f950:	1885883a 	add	r2,r3,r2
   8f954:	8009883a 	mov	r4,r16
   8f958:	100b883a 	mov	r5,r2
   8f95c:	01801404 	movi	r6,80
   8f960:	008ae400 	call	8ae40 <memcpy>
   8f964:	00000906 	br	8f98c <lcd_scroll_up+0x98>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   8f968:	e13ffe17 	ldw	r4,-8(fp)
   8f96c:	014018c4 	movi	r5,99
   8f970:	00843d00 	call	843d0 <__mulsi3>
   8f974:	10c01004 	addi	r3,r2,64
   8f978:	e0bfff17 	ldw	r2,-4(fp)
   8f97c:	1889883a 	add	r4,r3,r2
   8f980:	01400804 	movi	r5,32
   8f984:	01801404 	movi	r6,80
   8f988:	00866cc0 	call	866cc <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   8f98c:	e0bffe17 	ldw	r2,-8(fp)
   8f990:	10800044 	addi	r2,r2,1
   8f994:	e0bffe15 	stw	r2,-8(fp)
   8f998:	e0bffe17 	ldw	r2,-8(fp)
   8f99c:	10800090 	cmplti	r2,r2,2
   8f9a0:	103fdc1e 	bne	r2,zero,8f914 <lcd_scroll_up+0x20>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   8f9a4:	e0bfff17 	ldw	r2,-4(fp)
   8f9a8:	10800883 	ldbu	r2,34(r2)
   8f9ac:	10bfffc4 	addi	r2,r2,-1
   8f9b0:	1007883a 	mov	r3,r2
   8f9b4:	e0bfff17 	ldw	r2,-4(fp)
   8f9b8:	10c00885 	stb	r3,34(r2)
}
   8f9bc:	e037883a 	mov	sp,fp
   8f9c0:	dfc00217 	ldw	ra,8(sp)
   8f9c4:	df000117 	ldw	fp,4(sp)
   8f9c8:	dc000017 	ldw	r16,0(sp)
   8f9cc:	dec00304 	addi	sp,sp,12
   8f9d0:	f800283a 	ret

0008f9d4 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   8f9d4:	defff804 	addi	sp,sp,-32
   8f9d8:	dfc00715 	stw	ra,28(sp)
   8f9dc:	df000615 	stw	fp,24(sp)
   8f9e0:	df000604 	addi	fp,sp,24
   8f9e4:	e13ffd15 	stw	r4,-12(fp)
   8f9e8:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
   8f9ec:	e03ffc15 	stw	zero,-16(fp)
   8f9f0:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
   8f9f4:	e0bffd17 	ldw	r2,-12(fp)
   8f9f8:	10800a03 	ldbu	r2,40(r2)
   8f9fc:	10803fcc 	andi	r2,r2,255
   8fa00:	1080201c 	xori	r2,r2,128
   8fa04:	10bfe004 	addi	r2,r2,-128
   8fa08:	108016d8 	cmpnei	r2,r2,91
   8fa0c:	10004d1e 	bne	r2,zero,8fb44 <lcd_handle_escape+0x170>
  {
    char * ptr = sp->escape+1;
   8fa10:	e0bffd17 	ldw	r2,-12(fp)
   8fa14:	10800a04 	addi	r2,r2,40
   8fa18:	10800044 	addi	r2,r2,1
   8fa1c:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
   8fa20:	00000f06 	br	8fa60 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   8fa24:	e13ffc17 	ldw	r4,-16(fp)
   8fa28:	01400284 	movi	r5,10
   8fa2c:	00843d00 	call	843d0 <__mulsi3>
   8fa30:	1007883a 	mov	r3,r2
   8fa34:	e0bffa17 	ldw	r2,-24(fp)
   8fa38:	10800003 	ldbu	r2,0(r2)
   8fa3c:	10803fcc 	andi	r2,r2,255
   8fa40:	1080201c 	xori	r2,r2,128
   8fa44:	10bfe004 	addi	r2,r2,-128
   8fa48:	1885883a 	add	r2,r3,r2
   8fa4c:	10bff404 	addi	r2,r2,-48
   8fa50:	e0bffc15 	stw	r2,-16(fp)
   8fa54:	e0bffa17 	ldw	r2,-24(fp)
   8fa58:	10800044 	addi	r2,r2,1
   8fa5c:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   8fa60:	e0bffa17 	ldw	r2,-24(fp)
   8fa64:	10800003 	ldbu	r2,0(r2)
   8fa68:	10803fcc 	andi	r2,r2,255
   8fa6c:	1080201c 	xori	r2,r2,128
   8fa70:	10bfe004 	addi	r2,r2,-128
   8fa74:	1007883a 	mov	r3,r2
   8fa78:	00800274 	movhi	r2,9
   8fa7c:	10933e04 	addi	r2,r2,19704
   8fa80:	10800017 	ldw	r2,0(r2)
   8fa84:	1885883a 	add	r2,r3,r2
   8fa88:	10800003 	ldbu	r2,0(r2)
   8fa8c:	10803fcc 	andi	r2,r2,255
   8fa90:	1080010c 	andi	r2,r2,4
   8fa94:	1004c03a 	cmpne	r2,r2,zero
   8fa98:	103fe21e 	bne	r2,zero,8fa24 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   8fa9c:	e0bffa17 	ldw	r2,-24(fp)
   8faa0:	10800003 	ldbu	r2,0(r2)
   8faa4:	10803fcc 	andi	r2,r2,255
   8faa8:	1080201c 	xori	r2,r2,128
   8faac:	10bfe004 	addi	r2,r2,-128
   8fab0:	10800ed8 	cmpnei	r2,r2,59
   8fab4:	1000251e 	bne	r2,zero,8fb4c <lcd_handle_escape+0x178>
    {
      ptr++;
   8fab8:	e0bffa17 	ldw	r2,-24(fp)
   8fabc:	10800044 	addi	r2,r2,1
   8fac0:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
   8fac4:	00000f06 	br	8fb04 <lcd_handle_escape+0x130>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   8fac8:	e13ffb17 	ldw	r4,-20(fp)
   8facc:	01400284 	movi	r5,10
   8fad0:	00843d00 	call	843d0 <__mulsi3>
   8fad4:	1007883a 	mov	r3,r2
   8fad8:	e0bffa17 	ldw	r2,-24(fp)
   8fadc:	10800003 	ldbu	r2,0(r2)
   8fae0:	10803fcc 	andi	r2,r2,255
   8fae4:	1080201c 	xori	r2,r2,128
   8fae8:	10bfe004 	addi	r2,r2,-128
   8faec:	1885883a 	add	r2,r3,r2
   8faf0:	10bff404 	addi	r2,r2,-48
   8faf4:	e0bffb15 	stw	r2,-20(fp)
   8faf8:	e0bffa17 	ldw	r2,-24(fp)
   8fafc:	10800044 	addi	r2,r2,1
   8fb00:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   8fb04:	e0bffa17 	ldw	r2,-24(fp)
   8fb08:	10800003 	ldbu	r2,0(r2)
   8fb0c:	10803fcc 	andi	r2,r2,255
   8fb10:	1080201c 	xori	r2,r2,128
   8fb14:	10bfe004 	addi	r2,r2,-128
   8fb18:	1007883a 	mov	r3,r2
   8fb1c:	00800274 	movhi	r2,9
   8fb20:	10933e04 	addi	r2,r2,19704
   8fb24:	10800017 	ldw	r2,0(r2)
   8fb28:	1885883a 	add	r2,r3,r2
   8fb2c:	10800003 	ldbu	r2,0(r2)
   8fb30:	10803fcc 	andi	r2,r2,255
   8fb34:	1080010c 	andi	r2,r2,4
   8fb38:	1004c03a 	cmpne	r2,r2,zero
   8fb3c:	103fe21e 	bne	r2,zero,8fac8 <lcd_handle_escape+0xf4>
   8fb40:	00000206 	br	8fb4c <lcd_handle_escape+0x178>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   8fb44:	00bfffc4 	movi	r2,-1
   8fb48:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
   8fb4c:	e0bffe07 	ldb	r2,-8(fp)
   8fb50:	e0bfff15 	stw	r2,-4(fp)
   8fb54:	e0ffff17 	ldw	r3,-4(fp)
   8fb58:	188012a0 	cmpeqi	r2,r3,74
   8fb5c:	10002f1e 	bne	r2,zero,8fc1c <lcd_handle_escape+0x248>
   8fb60:	e0ffff17 	ldw	r3,-4(fp)
   8fb64:	188012c8 	cmpgei	r2,r3,75
   8fb68:	1000041e 	bne	r2,zero,8fb7c <lcd_handle_escape+0x1a8>
   8fb6c:	e0ffff17 	ldw	r3,-4(fp)
   8fb70:	18801220 	cmpeqi	r2,r3,72
   8fb74:	1000081e 	bne	r2,zero,8fb98 <lcd_handle_escape+0x1c4>
   8fb78:	00004a06 	br	8fca4 <lcd_handle_escape+0x2d0>
   8fb7c:	e0ffff17 	ldw	r3,-4(fp)
   8fb80:	188012e0 	cmpeqi	r2,r3,75
   8fb84:	10002b1e 	bne	r2,zero,8fc34 <lcd_handle_escape+0x260>
   8fb88:	e0ffff17 	ldw	r3,-4(fp)
   8fb8c:	188019a0 	cmpeqi	r2,r3,102
   8fb90:	1000011e 	bne	r2,zero,8fb98 <lcd_handle_escape+0x1c4>
   8fb94:	00004306 	br	8fca4 <lcd_handle_escape+0x2d0>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   8fb98:	e0bffb17 	ldw	r2,-20(fp)
   8fb9c:	10800050 	cmplti	r2,r2,1
   8fba0:	1000051e 	bne	r2,zero,8fbb8 <lcd_handle_escape+0x1e4>
      sp->x = parm2 - 1;
   8fba4:	e0bffb17 	ldw	r2,-20(fp)
   8fba8:	10bfffc4 	addi	r2,r2,-1
   8fbac:	1007883a 	mov	r3,r2
   8fbb0:	e0bffd17 	ldw	r2,-12(fp)
   8fbb4:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   8fbb8:	e0bffc17 	ldw	r2,-16(fp)
   8fbbc:	10800050 	cmplti	r2,r2,1
   8fbc0:	1000381e 	bne	r2,zero,8fca4 <lcd_handle_escape+0x2d0>
    {
      sp->y = parm1 - 1;
   8fbc4:	e0bffc17 	ldw	r2,-16(fp)
   8fbc8:	10bfffc4 	addi	r2,r2,-1
   8fbcc:	1007883a 	mov	r3,r2
   8fbd0:	e0bffd17 	ldw	r2,-12(fp)
   8fbd4:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   8fbd8:	e0bffd17 	ldw	r2,-12(fp)
   8fbdc:	10800883 	ldbu	r2,34(r2)
   8fbe0:	10803fcc 	andi	r2,r2,255
   8fbe4:	10800170 	cmpltui	r2,r2,5
   8fbe8:	1000061e 	bne	r2,zero,8fc04 <lcd_handle_escape+0x230>
        sp->y = ALT_LCD_HEIGHT * 2;
   8fbec:	e0fffd17 	ldw	r3,-12(fp)
   8fbf0:	00800104 	movi	r2,4
   8fbf4:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
   8fbf8:	00000206 	br	8fc04 <lcd_handle_escape+0x230>
        lcd_scroll_up(sp);
   8fbfc:	e13ffd17 	ldw	r4,-12(fp)
   8fc00:	008f8f40 	call	8f8f4 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   8fc04:	e0bffd17 	ldw	r2,-12(fp)
   8fc08:	10800883 	ldbu	r2,34(r2)
   8fc0c:	10803fcc 	andi	r2,r2,255
   8fc10:	108000e8 	cmpgeui	r2,r2,3
   8fc14:	103ff91e 	bne	r2,zero,8fbfc <lcd_handle_escape+0x228>
        lcd_scroll_up(sp);
    }
    break;
   8fc18:	00002206 	br	8fca4 <lcd_handle_escape+0x2d0>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   8fc1c:	e0bffc17 	ldw	r2,-16(fp)
   8fc20:	10800098 	cmpnei	r2,r2,2
   8fc24:	10001f1e 	bne	r2,zero,8fca4 <lcd_handle_escape+0x2d0>
      lcd_clear_screen(sp);
   8fc28:	e13ffd17 	ldw	r4,-12(fp)
   8fc2c:	008f6080 	call	8f608 <lcd_clear_screen>
    break;
   8fc30:	00001c06 	br	8fca4 <lcd_handle_escape+0x2d0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   8fc34:	e0bffc17 	ldw	r2,-16(fp)
   8fc38:	10800048 	cmpgei	r2,r2,1
   8fc3c:	1000191e 	bne	r2,zero,8fca4 <lcd_handle_escape+0x2d0>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   8fc40:	e0bffd17 	ldw	r2,-12(fp)
   8fc44:	10800843 	ldbu	r2,33(r2)
   8fc48:	10803fcc 	andi	r2,r2,255
   8fc4c:	10801428 	cmpgeui	r2,r2,80
   8fc50:	1000141e 	bne	r2,zero,8fca4 <lcd_handle_escape+0x2d0>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   8fc54:	e0bffd17 	ldw	r2,-12(fp)
   8fc58:	10800883 	ldbu	r2,34(r2)
   8fc5c:	11003fcc 	andi	r4,r2,255
   8fc60:	014018c4 	movi	r5,99
   8fc64:	00843d00 	call	843d0 <__mulsi3>
   8fc68:	10c01004 	addi	r3,r2,64
   8fc6c:	e0bffd17 	ldw	r2,-12(fp)
   8fc70:	1887883a 	add	r3,r3,r2
   8fc74:	e0bffd17 	ldw	r2,-12(fp)
   8fc78:	10800843 	ldbu	r2,33(r2)
   8fc7c:	10803fcc 	andi	r2,r2,255
   8fc80:	1889883a 	add	r4,r3,r2
   8fc84:	e0bffd17 	ldw	r2,-12(fp)
   8fc88:	10800843 	ldbu	r2,33(r2)
   8fc8c:	10c03fcc 	andi	r3,r2,255
   8fc90:	00801404 	movi	r2,80
   8fc94:	10c5c83a 	sub	r2,r2,r3
   8fc98:	100d883a 	mov	r6,r2
   8fc9c:	01400804 	movi	r5,32
   8fca0:	00866cc0 	call	866cc <memset>
    }
    break;
  }
}
   8fca4:	e037883a 	mov	sp,fp
   8fca8:	dfc00117 	ldw	ra,4(sp)
   8fcac:	df000017 	ldw	fp,0(sp)
   8fcb0:	dec00204 	addi	sp,sp,8
   8fcb4:	f800283a 	ret

0008fcb8 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   8fcb8:	defff004 	addi	sp,sp,-64
   8fcbc:	dfc00f15 	stw	ra,60(sp)
   8fcc0:	df000e15 	stw	fp,56(sp)
   8fcc4:	dc800d15 	stw	r18,52(sp)
   8fcc8:	dc400c15 	stw	r17,48(sp)
   8fccc:	dc000b15 	stw	r16,44(sp)
   8fcd0:	df000b04 	addi	fp,sp,44
   8fcd4:	e13ffc15 	stw	r4,-16(fp)
   8fcd8:	e17ffd15 	stw	r5,-12(fp)
   8fcdc:	e1bffe15 	stw	r6,-8(fp)
   8fce0:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
   8fce4:	e0bffe17 	ldw	r2,-8(fp)
   8fce8:	1007883a 	mov	r3,r2
   8fcec:	e0bffd17 	ldw	r2,-12(fp)
   8fcf0:	10c5883a 	add	r2,r2,r3
   8fcf4:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   8fcf8:	e0fffc17 	ldw	r3,-16(fp)
   8fcfc:	00800044 	movi	r2,1
   8fd00:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
   8fd04:	0000a306 	br	8ff94 <altera_avalon_lcd_16207_write+0x2dc>
  {
    char c = *ptr;
   8fd08:	e0bffd17 	ldw	r2,-12(fp)
   8fd0c:	10800003 	ldbu	r2,0(r2)
   8fd10:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
   8fd14:	e0bffc17 	ldw	r2,-16(fp)
   8fd18:	10800903 	ldbu	r2,36(r2)
   8fd1c:	10803fcc 	andi	r2,r2,255
   8fd20:	1080201c 	xori	r2,r2,128
   8fd24:	10bfe004 	addi	r2,r2,-128
   8fd28:	1004803a 	cmplt	r2,r2,zero
   8fd2c:	10003b1e 	bne	r2,zero,8fe1c <altera_avalon_lcd_16207_write+0x164>
    {
      unsigned int esccount = sp->esccount;
   8fd30:	e0bffc17 	ldw	r2,-16(fp)
   8fd34:	10800903 	ldbu	r2,36(r2)
   8fd38:	10803fcc 	andi	r2,r2,255
   8fd3c:	1080201c 	xori	r2,r2,128
   8fd40:	10bfe004 	addi	r2,r2,-128
   8fd44:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   8fd48:	e0bff717 	ldw	r2,-36(fp)
   8fd4c:	1004c03a 	cmpne	r2,r2,zero
   8fd50:	1000031e 	bne	r2,zero,8fd60 <altera_avalon_lcd_16207_write+0xa8>
   8fd54:	e0bff807 	ldb	r2,-32(fp)
   8fd58:	108016d8 	cmpnei	r2,r2,91
   8fd5c:	1000111e 	bne	r2,zero,8fda4 <altera_avalon_lcd_16207_write+0xec>
   8fd60:	e0bff717 	ldw	r2,-36(fp)
   8fd64:	1005003a 	cmpeq	r2,r2,zero
   8fd68:	10001a1e 	bne	r2,zero,8fdd4 <altera_avalon_lcd_16207_write+0x11c>
   8fd6c:	e0bff807 	ldb	r2,-32(fp)
   8fd70:	1007883a 	mov	r3,r2
   8fd74:	00800274 	movhi	r2,9
   8fd78:	10933e04 	addi	r2,r2,19704
   8fd7c:	10800017 	ldw	r2,0(r2)
   8fd80:	1885883a 	add	r2,r3,r2
   8fd84:	10800003 	ldbu	r2,0(r2)
   8fd88:	10803fcc 	andi	r2,r2,255
   8fd8c:	1080010c 	andi	r2,r2,4
   8fd90:	1004c03a 	cmpne	r2,r2,zero
   8fd94:	10000f1e 	bne	r2,zero,8fdd4 <altera_avalon_lcd_16207_write+0x11c>
   8fd98:	e0bff807 	ldb	r2,-32(fp)
   8fd9c:	10800ee0 	cmpeqi	r2,r2,59
   8fda0:	10000c1e 	bne	r2,zero,8fdd4 <altera_avalon_lcd_16207_write+0x11c>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
   8fda4:	e0fff717 	ldw	r3,-36(fp)
   8fda8:	e0bffc17 	ldw	r2,-16(fp)
   8fdac:	1885883a 	add	r2,r3,r2
   8fdb0:	10800a04 	addi	r2,r2,40
   8fdb4:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   8fdb8:	e17ff807 	ldb	r5,-32(fp)
   8fdbc:	e13ffc17 	ldw	r4,-16(fp)
   8fdc0:	008f9d40 	call	8f9d4 <lcd_handle_escape>

        sp->esccount = -1;
   8fdc4:	e0fffc17 	ldw	r3,-16(fp)
   8fdc8:	00bfffc4 	movi	r2,-1
   8fdcc:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   8fdd0:	00006d06 	br	8ff88 <altera_avalon_lcd_16207_write+0x2d0>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   8fdd4:	e0bffc17 	ldw	r2,-16(fp)
   8fdd8:	10800903 	ldbu	r2,36(r2)
   8fddc:	10803fcc 	andi	r2,r2,255
   8fde0:	108001e8 	cmpgeui	r2,r2,7
   8fde4:	1000681e 	bne	r2,zero,8ff88 <altera_avalon_lcd_16207_write+0x2d0>
      {
        sp->escape[esccount] = c;
   8fde8:	e0fff717 	ldw	r3,-36(fp)
   8fdec:	e0bffc17 	ldw	r2,-16(fp)
   8fdf0:	1885883a 	add	r2,r3,r2
   8fdf4:	10c00a04 	addi	r3,r2,40
   8fdf8:	e0bff803 	ldbu	r2,-32(fp)
   8fdfc:	18800005 	stb	r2,0(r3)
        sp->esccount++;
   8fe00:	e0bffc17 	ldw	r2,-16(fp)
   8fe04:	10800903 	ldbu	r2,36(r2)
   8fe08:	10800044 	addi	r2,r2,1
   8fe0c:	1007883a 	mov	r3,r2
   8fe10:	e0bffc17 	ldw	r2,-16(fp)
   8fe14:	10c00905 	stb	r3,36(r2)
   8fe18:	00005b06 	br	8ff88 <altera_avalon_lcd_16207_write+0x2d0>
      }
    }
    else if (c == 27) /* ESC */
   8fe1c:	e0bff807 	ldb	r2,-32(fp)
   8fe20:	108006d8 	cmpnei	r2,r2,27
   8fe24:	1000031e 	bne	r2,zero,8fe34 <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->esccount = 0;
   8fe28:	e0bffc17 	ldw	r2,-16(fp)
   8fe2c:	10000905 	stb	zero,36(r2)
   8fe30:	00005506 	br	8ff88 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\r')
   8fe34:	e0bff807 	ldb	r2,-32(fp)
   8fe38:	10800358 	cmpnei	r2,r2,13
   8fe3c:	1000031e 	bne	r2,zero,8fe4c <altera_avalon_lcd_16207_write+0x194>
    {
      sp->x = 0;
   8fe40:	e0bffc17 	ldw	r2,-16(fp)
   8fe44:	10000845 	stb	zero,33(r2)
   8fe48:	00004f06 	br	8ff88 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\n')
   8fe4c:	e0bff807 	ldb	r2,-32(fp)
   8fe50:	10800298 	cmpnei	r2,r2,10
   8fe54:	1000101e 	bne	r2,zero,8fe98 <altera_avalon_lcd_16207_write+0x1e0>
    {
      sp->x = 0;
   8fe58:	e0bffc17 	ldw	r2,-16(fp)
   8fe5c:	10000845 	stb	zero,33(r2)
      sp->y++;
   8fe60:	e0bffc17 	ldw	r2,-16(fp)
   8fe64:	10800883 	ldbu	r2,34(r2)
   8fe68:	10800044 	addi	r2,r2,1
   8fe6c:	1007883a 	mov	r3,r2
   8fe70:	e0bffc17 	ldw	r2,-16(fp)
   8fe74:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   8fe78:	e0bffc17 	ldw	r2,-16(fp)
   8fe7c:	10800883 	ldbu	r2,34(r2)
   8fe80:	10803fcc 	andi	r2,r2,255
   8fe84:	108000f0 	cmpltui	r2,r2,3
   8fe88:	10003f1e 	bne	r2,zero,8ff88 <altera_avalon_lcd_16207_write+0x2d0>
        lcd_scroll_up(sp);
   8fe8c:	e13ffc17 	ldw	r4,-16(fp)
   8fe90:	008f8f40 	call	8f8f4 <lcd_scroll_up>
   8fe94:	00003c06 	br	8ff88 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\b')
   8fe98:	e0bff807 	ldb	r2,-32(fp)
   8fe9c:	10800218 	cmpnei	r2,r2,8
   8fea0:	10000c1e 	bne	r2,zero,8fed4 <altera_avalon_lcd_16207_write+0x21c>
    {
      if (sp->x > 0)
   8fea4:	e0bffc17 	ldw	r2,-16(fp)
   8fea8:	10800843 	ldbu	r2,33(r2)
   8feac:	10803fcc 	andi	r2,r2,255
   8feb0:	1005003a 	cmpeq	r2,r2,zero
   8feb4:	1000341e 	bne	r2,zero,8ff88 <altera_avalon_lcd_16207_write+0x2d0>
        sp->x--;
   8feb8:	e0bffc17 	ldw	r2,-16(fp)
   8febc:	10800843 	ldbu	r2,33(r2)
   8fec0:	10bfffc4 	addi	r2,r2,-1
   8fec4:	1007883a 	mov	r3,r2
   8fec8:	e0bffc17 	ldw	r2,-16(fp)
   8fecc:	10c00845 	stb	r3,33(r2)
   8fed0:	00002d06 	br	8ff88 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (isprint(c))
   8fed4:	e0bff807 	ldb	r2,-32(fp)
   8fed8:	1007883a 	mov	r3,r2
   8fedc:	00800274 	movhi	r2,9
   8fee0:	10933e04 	addi	r2,r2,19704
   8fee4:	10800017 	ldw	r2,0(r2)
   8fee8:	1885883a 	add	r2,r3,r2
   8feec:	10800003 	ldbu	r2,0(r2)
   8fef0:	10803fcc 	andi	r2,r2,255
   8fef4:	1080201c 	xori	r2,r2,128
   8fef8:	10bfe004 	addi	r2,r2,-128
   8fefc:	108025cc 	andi	r2,r2,151
   8ff00:	1005003a 	cmpeq	r2,r2,zero
   8ff04:	1000201e 	bne	r2,zero,8ff88 <altera_avalon_lcd_16207_write+0x2d0>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   8ff08:	e0bffc17 	ldw	r2,-16(fp)
   8ff0c:	10800883 	ldbu	r2,34(r2)
   8ff10:	10803fcc 	andi	r2,r2,255
   8ff14:	108000b0 	cmpltui	r2,r2,2
   8ff18:	1000021e 	bne	r2,zero,8ff24 <altera_avalon_lcd_16207_write+0x26c>
        lcd_scroll_up(sp);
   8ff1c:	e13ffc17 	ldw	r4,-16(fp)
   8ff20:	008f8f40 	call	8f8f4 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   8ff24:	e0bffc17 	ldw	r2,-16(fp)
   8ff28:	10800843 	ldbu	r2,33(r2)
   8ff2c:	10803fcc 	andi	r2,r2,255
   8ff30:	10801428 	cmpgeui	r2,r2,80
   8ff34:	10000e1e 	bne	r2,zero,8ff70 <altera_avalon_lcd_16207_write+0x2b8>
        sp->line[sp->y].data[sp->x] = c;
   8ff38:	e0bffc17 	ldw	r2,-16(fp)
   8ff3c:	10800883 	ldbu	r2,34(r2)
   8ff40:	11003fcc 	andi	r4,r2,255
   8ff44:	e0bffc17 	ldw	r2,-16(fp)
   8ff48:	10800843 	ldbu	r2,33(r2)
   8ff4c:	14403fcc 	andi	r17,r2,255
   8ff50:	e43ffc17 	ldw	r16,-16(fp)
   8ff54:	014018c4 	movi	r5,99
   8ff58:	00843d00 	call	843d0 <__mulsi3>
   8ff5c:	1405883a 	add	r2,r2,r16
   8ff60:	1445883a 	add	r2,r2,r17
   8ff64:	10c01004 	addi	r3,r2,64
   8ff68:	e0bff803 	ldbu	r2,-32(fp)
   8ff6c:	18800005 	stb	r2,0(r3)

      sp->x++;
   8ff70:	e0bffc17 	ldw	r2,-16(fp)
   8ff74:	10800843 	ldbu	r2,33(r2)
   8ff78:	10800044 	addi	r2,r2,1
   8ff7c:	1007883a 	mov	r3,r2
   8ff80:	e0bffc17 	ldw	r2,-16(fp)
   8ff84:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   8ff88:	e0bffd17 	ldw	r2,-12(fp)
   8ff8c:	10800044 	addi	r2,r2,1
   8ff90:	e0bffd15 	stw	r2,-12(fp)
   8ff94:	e0fffd17 	ldw	r3,-12(fp)
   8ff98:	e0bffb17 	ldw	r2,-20(fp)
   8ff9c:	18bf5a36 	bltu	r3,r2,8fd08 <altera_avalon_lcd_16207_write+0x50>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   8ffa0:	00800404 	movi	r2,16
   8ffa4:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   8ffa8:	e03ffa15 	stw	zero,-24(fp)
   8ffac:	00003906 	br	90094 <altera_avalon_lcd_16207_write+0x3dc>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   8ffb0:	00801404 	movi	r2,80
   8ffb4:	e0bff615 	stw	r2,-40(fp)
   8ffb8:	00001206 	br	90004 <altera_avalon_lcd_16207_write+0x34c>
      if (sp->line[y].data[width-1] != ' ')
   8ffbc:	e13ffa17 	ldw	r4,-24(fp)
   8ffc0:	e0bff617 	ldw	r2,-40(fp)
   8ffc4:	147fffc4 	addi	r17,r2,-1
   8ffc8:	e43ffc17 	ldw	r16,-16(fp)
   8ffcc:	014018c4 	movi	r5,99
   8ffd0:	00843d00 	call	843d0 <__mulsi3>
   8ffd4:	1405883a 	add	r2,r2,r16
   8ffd8:	1445883a 	add	r2,r2,r17
   8ffdc:	10801004 	addi	r2,r2,64
   8ffe0:	10800003 	ldbu	r2,0(r2)
   8ffe4:	10803fcc 	andi	r2,r2,255
   8ffe8:	1080201c 	xori	r2,r2,128
   8ffec:	10bfe004 	addi	r2,r2,-128
   8fff0:	10800818 	cmpnei	r2,r2,32
   8fff4:	1000061e 	bne	r2,zero,90010 <altera_avalon_lcd_16207_write+0x358>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   8fff8:	e0bff617 	ldw	r2,-40(fp)
   8fffc:	10bfffc4 	addi	r2,r2,-1
   90000:	e0bff615 	stw	r2,-40(fp)
   90004:	e0bff617 	ldw	r2,-40(fp)
   90008:	10800048 	cmpgei	r2,r2,1
   9000c:	103feb1e 	bne	r2,zero,8ffbc <altera_avalon_lcd_16207_write+0x304>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   90010:	e0bff617 	ldw	r2,-40(fp)
   90014:	10800448 	cmpgei	r2,r2,17
   90018:	1000031e 	bne	r2,zero,90028 <altera_avalon_lcd_16207_write+0x370>
      width = ALT_LCD_WIDTH;
   9001c:	00800404 	movi	r2,16
   90020:	e0bff615 	stw	r2,-40(fp)
   90024:	00000306 	br	90034 <altera_avalon_lcd_16207_write+0x37c>
    else
      width++;
   90028:	e0bff617 	ldw	r2,-40(fp)
   9002c:	10800044 	addi	r2,r2,1
   90030:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
   90034:	e13ffa17 	ldw	r4,-24(fp)
   90038:	e0bff617 	ldw	r2,-40(fp)
   9003c:	1023883a 	mov	r17,r2
   90040:	e43ffc17 	ldw	r16,-16(fp)
   90044:	014018c4 	movi	r5,99
   90048:	00843d00 	call	843d0 <__mulsi3>
   9004c:	1405883a 	add	r2,r2,r16
   90050:	10802404 	addi	r2,r2,144
   90054:	14400045 	stb	r17,1(r2)
    if (widthmax < width)
   90058:	e0fff917 	ldw	r3,-28(fp)
   9005c:	e0bff617 	ldw	r2,-40(fp)
   90060:	1880020e 	bge	r3,r2,9006c <altera_avalon_lcd_16207_write+0x3b4>
      widthmax = width;
   90064:	e0bff617 	ldw	r2,-40(fp)
   90068:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   9006c:	e13ffa17 	ldw	r4,-24(fp)
   90070:	e43ffc17 	ldw	r16,-16(fp)
   90074:	014018c4 	movi	r5,99
   90078:	00843d00 	call	843d0 <__mulsi3>
   9007c:	1405883a 	add	r2,r2,r16
   90080:	10802404 	addi	r2,r2,144
   90084:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   90088:	e0bffa17 	ldw	r2,-24(fp)
   9008c:	10800044 	addi	r2,r2,1
   90090:	e0bffa15 	stw	r2,-24(fp)
   90094:	e0bffa17 	ldw	r2,-24(fp)
   90098:	10800090 	cmplti	r2,r2,2
   9009c:	103fc41e 	bne	r2,zero,8ffb0 <altera_avalon_lcd_16207_write+0x2f8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   900a0:	e0bff917 	ldw	r2,-28(fp)
   900a4:	10800448 	cmpgei	r2,r2,17
   900a8:	1000031e 	bne	r2,zero,900b8 <altera_avalon_lcd_16207_write+0x400>
    sp->scrollmax = 0;
   900ac:	e0bffc17 	ldw	r2,-16(fp)
   900b0:	10000985 	stb	zero,38(r2)
   900b4:	00003106 	br	9017c <altera_avalon_lcd_16207_write+0x4c4>
  else
  {
    widthmax *= 2;
   900b8:	e0bff917 	ldw	r2,-28(fp)
   900bc:	1085883a 	add	r2,r2,r2
   900c0:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
   900c4:	e0bff917 	ldw	r2,-28(fp)
   900c8:	1007883a 	mov	r3,r2
   900cc:	e0bffc17 	ldw	r2,-16(fp)
   900d0:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   900d4:	e03ffa15 	stw	zero,-24(fp)
   900d8:	00002506 	br	90170 <altera_avalon_lcd_16207_write+0x4b8>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   900dc:	e13ffa17 	ldw	r4,-24(fp)
   900e0:	e43ffc17 	ldw	r16,-16(fp)
   900e4:	014018c4 	movi	r5,99
   900e8:	00843d00 	call	843d0 <__mulsi3>
   900ec:	1405883a 	add	r2,r2,r16
   900f0:	10802404 	addi	r2,r2,144
   900f4:	10800043 	ldbu	r2,1(r2)
   900f8:	10803fcc 	andi	r2,r2,255
   900fc:	1080201c 	xori	r2,r2,128
   90100:	10bfe004 	addi	r2,r2,-128
   90104:	10800450 	cmplti	r2,r2,17
   90108:	1000161e 	bne	r2,zero,90164 <altera_avalon_lcd_16207_write+0x4ac>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   9010c:	e4bffa17 	ldw	r18,-24(fp)
   90110:	e13ffa17 	ldw	r4,-24(fp)
   90114:	e43ffc17 	ldw	r16,-16(fp)
   90118:	014018c4 	movi	r5,99
   9011c:	00843d00 	call	843d0 <__mulsi3>
   90120:	1405883a 	add	r2,r2,r16
   90124:	10802404 	addi	r2,r2,144
   90128:	10800043 	ldbu	r2,1(r2)
   9012c:	10803fcc 	andi	r2,r2,255
   90130:	1080201c 	xori	r2,r2,128
   90134:	10bfe004 	addi	r2,r2,-128
   90138:	1008923a 	slli	r4,r2,8
   9013c:	e17ff917 	ldw	r5,-28(fp)
   90140:	00843000 	call	84300 <__divsi3>
   90144:	1023883a 	mov	r17,r2
   90148:	e43ffc17 	ldw	r16,-16(fp)
   9014c:	9009883a 	mov	r4,r18
   90150:	014018c4 	movi	r5,99
   90154:	00843d00 	call	843d0 <__mulsi3>
   90158:	1405883a 	add	r2,r2,r16
   9015c:	10802404 	addi	r2,r2,144
   90160:	14400085 	stb	r17,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   90164:	e0bffa17 	ldw	r2,-24(fp)
   90168:	10800044 	addi	r2,r2,1
   9016c:	e0bffa15 	stw	r2,-24(fp)
   90170:	e0bffa17 	ldw	r2,-24(fp)
   90174:	10800090 	cmplti	r2,r2,2
   90178:	103fd81e 	bne	r2,zero,900dc <altera_avalon_lcd_16207_write+0x424>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   9017c:	e0bffc17 	ldw	r2,-16(fp)
   90180:	10800943 	ldbu	r2,37(r2)
   90184:	10803fcc 	andi	r2,r2,255
   90188:	1080201c 	xori	r2,r2,128
   9018c:	10bfe004 	addi	r2,r2,-128
   90190:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
   90194:	e13ffc17 	ldw	r4,-16(fp)
   90198:	008f6e00 	call	8f6e0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   9019c:	e0bffc17 	ldw	r2,-16(fp)
   901a0:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   901a4:	e0bffc17 	ldw	r2,-16(fp)
   901a8:	10800943 	ldbu	r2,37(r2)
   901ac:	10c03fcc 	andi	r3,r2,255
   901b0:	18c0201c 	xori	r3,r3,128
   901b4:	18ffe004 	addi	r3,r3,-128
   901b8:	e0bff517 	ldw	r2,-44(fp)
   901bc:	18800426 	beq	r3,r2,901d0 <altera_avalon_lcd_16207_write+0x518>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   901c0:	e0fffc17 	ldw	r3,-16(fp)
   901c4:	00800044 	movi	r2,1
   901c8:	188009c5 	stb	r2,39(r3)
  }
   901cc:	003feb06 	br	9017c <altera_avalon_lcd_16207_write+0x4c4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   901d0:	e0bffe17 	ldw	r2,-8(fp)
}
   901d4:	e037883a 	mov	sp,fp
   901d8:	dfc00417 	ldw	ra,16(sp)
   901dc:	df000317 	ldw	fp,12(sp)
   901e0:	dc800217 	ldw	r18,8(sp)
   901e4:	dc400117 	ldw	r17,4(sp)
   901e8:	dc000017 	ldw	r16,0(sp)
   901ec:	dec00504 	addi	sp,sp,20
   901f0:	f800283a 	ret

000901f4 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   901f4:	defffc04 	addi	sp,sp,-16
   901f8:	dfc00315 	stw	ra,12(sp)
   901fc:	df000215 	stw	fp,8(sp)
   90200:	df000204 	addi	fp,sp,8
   90204:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   90208:	e0bfff17 	ldw	r2,-4(fp)
   9020c:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   90210:	e0bffe17 	ldw	r2,-8(fp)
   90214:	10800943 	ldbu	r2,37(r2)
   90218:	10803fcc 	andi	r2,r2,255
   9021c:	1080201c 	xori	r2,r2,128
   90220:	10bfe004 	addi	r2,r2,-128
   90224:	10c00044 	addi	r3,r2,1
   90228:	e0bffe17 	ldw	r2,-8(fp)
   9022c:	10800983 	ldbu	r2,38(r2)
   90230:	10803fcc 	andi	r2,r2,255
   90234:	1080201c 	xori	r2,r2,128
   90238:	10bfe004 	addi	r2,r2,-128
   9023c:	18800316 	blt	r3,r2,9024c <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
   90240:	e0bffe17 	ldw	r2,-8(fp)
   90244:	10000945 	stb	zero,37(r2)
   90248:	00000606 	br	90264 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
   9024c:	e0bffe17 	ldw	r2,-8(fp)
   90250:	10800943 	ldbu	r2,37(r2)
   90254:	10800044 	addi	r2,r2,1
   90258:	1007883a 	mov	r3,r2
   9025c:	e0bffe17 	ldw	r2,-8(fp)
   90260:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   90264:	e0bffe17 	ldw	r2,-8(fp)
   90268:	10800983 	ldbu	r2,38(r2)
   9026c:	10803fcc 	andi	r2,r2,255
   90270:	1080201c 	xori	r2,r2,128
   90274:	10bfe004 	addi	r2,r2,-128
   90278:	10800050 	cmplti	r2,r2,1
   9027c:	1000091e 	bne	r2,zero,902a4 <alt_lcd_16207_timeout+0xb0>
   90280:	e0bffe17 	ldw	r2,-8(fp)
   90284:	108009c3 	ldbu	r2,39(r2)
   90288:	10803fcc 	andi	r2,r2,255
   9028c:	1080201c 	xori	r2,r2,128
   90290:	10bfe004 	addi	r2,r2,-128
   90294:	1004c03a 	cmpne	r2,r2,zero
   90298:	1000021e 	bne	r2,zero,902a4 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
   9029c:	e13ffe17 	ldw	r4,-8(fp)
   902a0:	008f6e00 	call	8f6e0 <lcd_repaint_screen>

  return sp->period;
   902a4:	e0bffe17 	ldw	r2,-8(fp)
   902a8:	10800717 	ldw	r2,28(r2)
}
   902ac:	e037883a 	mov	sp,fp
   902b0:	dfc00117 	ldw	ra,4(sp)
   902b4:	df000017 	ldw	fp,0(sp)
   902b8:	dec00204 	addi	sp,sp,8
   902bc:	f800283a 	ret

000902c0 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   902c0:	defffc04 	addi	sp,sp,-16
   902c4:	dfc00315 	stw	ra,12(sp)
   902c8:	df000215 	stw	fp,8(sp)
   902cc:	df000204 	addi	fp,sp,8
   902d0:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   902d4:	e0bfff17 	ldw	r2,-4(fp)
   902d8:	10800017 	ldw	r2,0(r2)
   902dc:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   902e0:	e0bfff17 	ldw	r2,-4(fp)
   902e4:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   902e8:	010ea604 	movi	r4,15000
   902ec:	0091e780 	call	91e78 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   902f0:	e0bffe17 	ldw	r2,-8(fp)
   902f4:	1007883a 	mov	r3,r2
   902f8:	00800c04 	movi	r2,48
   902fc:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   90300:	01040104 	movi	r4,4100
   90304:	0091e780 	call	91e78 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   90308:	e0bffe17 	ldw	r2,-8(fp)
   9030c:	1007883a 	mov	r3,r2
   90310:	00800c04 	movi	r2,48
   90314:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   90318:	0100fa04 	movi	r4,1000
   9031c:	0091e780 	call	91e78 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   90320:	e0bffe17 	ldw	r2,-8(fp)
   90324:	1007883a 	mov	r3,r2
   90328:	00800c04 	movi	r2,48
   9032c:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   90330:	e13fff17 	ldw	r4,-4(fp)
   90334:	01400e04 	movi	r5,56
   90338:	008f47c0 	call	8f47c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   9033c:	e13fff17 	ldw	r4,-4(fp)
   90340:	01400204 	movi	r5,8
   90344:	008f47c0 	call	8f47c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   90348:	e13fff17 	ldw	r4,-4(fp)
   9034c:	008f6080 	call	8f608 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   90350:	e13fff17 	ldw	r4,-4(fp)
   90354:	01400184 	movi	r5,6
   90358:	008f47c0 	call	8f47c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   9035c:	e13fff17 	ldw	r4,-4(fp)
   90360:	01400304 	movi	r5,12
   90364:	008f47c0 	call	8f47c <lcd_write_command>

  sp->esccount = -1;
   90368:	e0ffff17 	ldw	r3,-4(fp)
   9036c:	00bfffc4 	movi	r2,-1
   90370:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
   90374:	e0bfff17 	ldw	r2,-4(fp)
   90378:	11000a04 	addi	r4,r2,40
   9037c:	000b883a 	mov	r5,zero
   90380:	01800204 	movi	r6,8
   90384:	00866cc0 	call	866cc <memset>

  sp->scrollpos = 0;
   90388:	e0bfff17 	ldw	r2,-4(fp)
   9038c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   90390:	e0bfff17 	ldw	r2,-4(fp)
   90394:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   90398:	e0bfff17 	ldw	r2,-4(fp)
   9039c:	100009c5 	stb	zero,39(r2)
   903a0:	00800274 	movhi	r2,9
   903a4:	109a4704 	addi	r2,r2,26908
   903a8:	10800017 	ldw	r2,0(r2)
   903ac:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   903b0:	01400284 	movi	r5,10
   903b4:	00843c00 	call	843c0 <__udivsi3>
   903b8:	1007883a 	mov	r3,r2
   903bc:	e0bfff17 	ldw	r2,-4(fp)
   903c0:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   903c4:	e0bfff17 	ldw	r2,-4(fp)
   903c8:	11000104 	addi	r4,r2,4
   903cc:	e0bfff17 	ldw	r2,-4(fp)
   903d0:	10800717 	ldw	r2,28(r2)
   903d4:	100b883a 	mov	r5,r2
   903d8:	01800274 	movhi	r6,9
   903dc:	31807d04 	addi	r6,r6,500
   903e0:	e1ffff17 	ldw	r7,-4(fp)
   903e4:	00913d80 	call	913d8 <alt_alarm_start>
}
   903e8:	e037883a 	mov	sp,fp
   903ec:	dfc00117 	ldw	ra,4(sp)
   903f0:	df000017 	ldw	fp,0(sp)
   903f4:	dec00204 	addi	sp,sp,8
   903f8:	f800283a 	ret

000903fc <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   903fc:	defffa04 	addi	sp,sp,-24
   90400:	dfc00515 	stw	ra,20(sp)
   90404:	df000415 	stw	fp,16(sp)
   90408:	df000404 	addi	fp,sp,16
   9040c:	e13ffd15 	stw	r4,-12(fp)
   90410:	e17ffe15 	stw	r5,-8(fp)
   90414:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   90418:	e0bffd17 	ldw	r2,-12(fp)
   9041c:	10800017 	ldw	r2,0(r2)
   90420:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   90424:	e0bffc17 	ldw	r2,-16(fp)
   90428:	11000a04 	addi	r4,r2,40
   9042c:	e0bffd17 	ldw	r2,-12(fp)
   90430:	11c00217 	ldw	r7,8(r2)
   90434:	e17ffe17 	ldw	r5,-8(fp)
   90438:	e1bfff17 	ldw	r6,-4(fp)
   9043c:	008fcb80 	call	8fcb8 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   90440:	e037883a 	mov	sp,fp
   90444:	dfc00117 	ldw	ra,4(sp)
   90448:	df000017 	ldw	fp,0(sp)
   9044c:	dec00204 	addi	sp,sp,8
   90450:	f800283a 	ret

00090454 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   90454:	defff904 	addi	sp,sp,-28
   90458:	dfc00615 	stw	ra,24(sp)
   9045c:	df000515 	stw	fp,20(sp)
   90460:	df000504 	addi	fp,sp,20
   90464:	e13ffe15 	stw	r4,-8(fp)
   90468:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   9046c:	e0bffe17 	ldw	r2,-8(fp)
   90470:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   90474:	e0bffe17 	ldw	r2,-8(fp)
   90478:	10800104 	addi	r2,r2,4
   9047c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90480:	0005303a 	rdctl	r2,status
   90484:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90488:	e0fffc17 	ldw	r3,-16(fp)
   9048c:	00bfff84 	movi	r2,-2
   90490:	1884703a 	and	r2,r3,r2
   90494:	1001703a 	wrctl	status,r2
  
  return context;
   90498:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   9049c:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
   904a0:	0091d6c0 	call	91d6c <alt_tick>
   904a4:	e0bffd17 	ldw	r2,-12(fp)
   904a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   904ac:	e0bffb17 	ldw	r2,-20(fp)
   904b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   904b4:	e037883a 	mov	sp,fp
   904b8:	dfc00117 	ldw	ra,4(sp)
   904bc:	df000017 	ldw	fp,0(sp)
   904c0:	dec00204 	addi	sp,sp,8
   904c4:	f800283a 	ret

000904c8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   904c8:	defff904 	addi	sp,sp,-28
   904cc:	dfc00615 	stw	ra,24(sp)
   904d0:	df000515 	stw	fp,20(sp)
   904d4:	df000504 	addi	fp,sp,20
   904d8:	e13ffc15 	stw	r4,-16(fp)
   904dc:	e17ffd15 	stw	r5,-12(fp)
   904e0:	e1bffe15 	stw	r6,-8(fp)
   904e4:	e1ffff15 	stw	r7,-4(fp)
   904e8:	e0bfff17 	ldw	r2,-4(fp)
   904ec:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   904f0:	00800274 	movhi	r2,9
   904f4:	109a4704 	addi	r2,r2,26908
   904f8:	10800017 	ldw	r2,0(r2)
   904fc:	1004c03a 	cmpne	r2,r2,zero
   90500:	1000041e 	bne	r2,zero,90514 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   90504:	00c00274 	movhi	r3,9
   90508:	18da4704 	addi	r3,r3,26908
   9050c:	e0bffb17 	ldw	r2,-20(fp)
   90510:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   90514:	e0bffc17 	ldw	r2,-16(fp)
   90518:	10800104 	addi	r2,r2,4
   9051c:	1007883a 	mov	r3,r2
   90520:	008001c4 	movi	r2,7
   90524:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   90528:	e13ffe17 	ldw	r4,-8(fp)
   9052c:	e17ffc17 	ldw	r5,-16(fp)
   90530:	01800274 	movhi	r6,9
   90534:	31811504 	addi	r6,r6,1108
   90538:	0091b140 	call	91b14 <alt_irq_register>
#endif  
}
   9053c:	e037883a 	mov	sp,fp
   90540:	dfc00117 	ldw	ra,4(sp)
   90544:	df000017 	ldw	fp,0(sp)
   90548:	dec00204 	addi	sp,sp,8
   9054c:	f800283a 	ret

00090550 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
   90550:	defffc04 	addi	sp,sp,-16
   90554:	dfc00315 	stw	ra,12(sp)
   90558:	df000215 	stw	fp,8(sp)
   9055c:	df000204 	addi	fp,sp,8
   90560:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
   90564:	e13fff17 	ldw	r4,-4(fp)
   90568:	01400274 	movhi	r5,9
   9056c:	29533504 	addi	r5,r5,19668
   90570:	00917240 	call	91724 <alt_find_dev>
   90574:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
   90578:	e0bffe17 	ldw	r2,-8(fp)
   9057c:	10800a17 	ldw	r2,40(r2)
   90580:	10800104 	addi	r2,r2,4
   90584:	10800037 	ldwio	r2,0(r2)
   90588:	10803fec 	andhi	r2,r2,255
   9058c:	1005d43a 	srai	r2,r2,16
   90590:	1007883a 	mov	r3,r2
   90594:	e0bffe17 	ldw	r2,-8(fp)
   90598:	10c00b15 	stw	r3,44(r2)

  return dev;
   9059c:	e0bffe17 	ldw	r2,-8(fp)
}
   905a0:	e037883a 	mov	sp,fp
   905a4:	dfc00117 	ldw	ra,4(sp)
   905a8:	df000017 	ldw	fp,0(sp)
   905ac:	dec00204 	addi	sp,sp,8
   905b0:	f800283a 	ret

000905b4 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   905b4:	defffc04 	addi	sp,sp,-16
   905b8:	df000315 	stw	fp,12(sp)
   905bc:	df000304 	addi	fp,sp,12
   905c0:	e13ffd15 	stw	r4,-12(fp)
   905c4:	e17ffe15 	stw	r5,-8(fp)
   905c8:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
   905cc:	e0bffd17 	ldw	r2,-12(fp)
   905d0:	10800a17 	ldw	r2,40(r2)
   905d4:	11000204 	addi	r4,r2,8
   905d8:	e0bffe17 	ldw	r2,-8(fp)
   905dc:	10c03fcc 	andi	r3,r2,255
   905e0:	2005883a 	mov	r2,r4
   905e4:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
   905e8:	e0bffd17 	ldw	r2,-12(fp)
   905ec:	10800a17 	ldw	r2,40(r2)
   905f0:	11000304 	addi	r4,r2,12
   905f4:	e0bfff17 	ldw	r2,-4(fp)
   905f8:	10ffffcc 	andi	r3,r2,65535
   905fc:	2005883a 	mov	r2,r4
   90600:	10c00035 	stwio	r3,0(r2)

	return 0;
   90604:	0005883a 	mov	r2,zero
}
   90608:	e037883a 	mov	sp,fp
   9060c:	df000017 	ldw	fp,0(sp)
   90610:	dec00104 	addi	sp,sp,4
   90614:	f800283a 	ret

00090618 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
   90618:	defffa04 	addi	sp,sp,-24
   9061c:	dfc00515 	stw	ra,20(sp)
   90620:	df000415 	stw	fp,16(sp)
   90624:	df000404 	addi	fp,sp,16
   90628:	e13ffc15 	stw	r4,-16(fp)
   9062c:	e17ffd15 	stw	r5,-12(fp)
   90630:	e1bffe15 	stw	r6,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
   90634:	e0bffc17 	ldw	r2,-16(fp)
   90638:	10800a17 	ldw	r2,40(r2)
   9063c:	11000204 	addi	r4,r2,8
   90640:	e0bffd17 	ldw	r2,-12(fp)
   90644:	10c03fcc 	andi	r3,r2,255
   90648:	2005883a 	mov	r2,r4
   9064c:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
   90650:	e0bffc17 	ldw	r2,-16(fp)
   90654:	10800a17 	ldw	r2,40(r2)
   90658:	10800304 	addi	r2,r2,12
   9065c:	10800037 	ldwio	r2,0(r2)
   90660:	1007883a 	mov	r3,r2
   90664:	e0bffe17 	ldw	r2,-8(fp)
   90668:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
   9066c:	e13ffc17 	ldw	r4,-16(fp)
   90670:	00907440 	call	90744 <alt_up_av_config_read_acknowledge>
   90674:	1005003a 	cmpeq	r2,r2,zero
   90678:	1000031e 	bne	r2,zero,90688 <alt_up_av_config_read_data+0x70>
		return -1;
   9067c:	00bfffc4 	movi	r2,-1
   90680:	e0bfff15 	stw	r2,-4(fp)
   90684:	00000106 	br	9068c <alt_up_av_config_read_data+0x74>

	return 0;
   90688:	e03fff15 	stw	zero,-4(fp)
   9068c:	e0bfff17 	ldw	r2,-4(fp)
}
   90690:	e037883a 	mov	sp,fp
   90694:	dfc00117 	ldw	ra,4(sp)
   90698:	df000017 	ldw	fp,0(sp)
   9069c:	dec00204 	addi	sp,sp,8
   906a0:	f800283a 	ret

000906a4 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
   906a4:	defffe04 	addi	sp,sp,-8
   906a8:	df000115 	stw	fp,4(sp)
   906ac:	df000104 	addi	fp,sp,4
   906b0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
   906b4:	e0bfff17 	ldw	r2,-4(fp)
   906b8:	10800a17 	ldw	r2,40(r2)
   906bc:	1007883a 	mov	r3,r2
   906c0:	00800044 	movi	r2,1
   906c4:	18800025 	stbio	r2,0(r3)
	return 0;
   906c8:	0005883a 	mov	r2,zero
}
   906cc:	e037883a 	mov	sp,fp
   906d0:	df000017 	ldw	fp,0(sp)
   906d4:	dec00104 	addi	sp,sp,4
   906d8:	f800283a 	ret

000906dc <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
   906dc:	defffe04 	addi	sp,sp,-8
   906e0:	df000115 	stw	fp,4(sp)
   906e4:	df000104 	addi	fp,sp,4
   906e8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
   906ec:	e0bfff17 	ldw	r2,-4(fp)
   906f0:	10800a17 	ldw	r2,40(r2)
   906f4:	1007883a 	mov	r3,r2
   906f8:	00800084 	movi	r2,2
   906fc:	18800025 	stbio	r2,0(r3)
	return 0;
   90700:	0005883a 	mov	r2,zero
}
   90704:	e037883a 	mov	sp,fp
   90708:	df000017 	ldw	fp,0(sp)
   9070c:	dec00104 	addi	sp,sp,4
   90710:	f800283a 	ret

00090714 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
   90714:	defffe04 	addi	sp,sp,-8
   90718:	df000115 	stw	fp,4(sp)
   9071c:	df000104 	addi	fp,sp,4
   90720:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
   90724:	e0bfff17 	ldw	r2,-4(fp)
   90728:	10800a17 	ldw	r2,40(r2)
   9072c:	10000025 	stbio	zero,0(r2)
	return 0;
   90730:	0005883a 	mov	r2,zero
}
   90734:	e037883a 	mov	sp,fp
   90738:	df000017 	ldw	fp,0(sp)
   9073c:	dec00104 	addi	sp,sp,4
   90740:	f800283a 	ret

00090744 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
   90744:	defffd04 	addi	sp,sp,-12
   90748:	df000215 	stw	fp,8(sp)
   9074c:	df000204 	addi	fp,sp,8
   90750:	e13ffe15 	stw	r4,-8(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
   90754:	e0bffe17 	ldw	r2,-8(fp)
   90758:	10800a17 	ldw	r2,40(r2)
   9075c:	10800104 	addi	r2,r2,4
   90760:	10800037 	ldwio	r2,0(r2)
   90764:	1080008c 	andi	r2,r2,2
   90768:	1005d07a 	srai	r2,r2,1
   9076c:	1005003a 	cmpeq	r2,r2,zero
   90770:	1000071e 	bne	r2,zero,90790 <alt_up_av_config_read_acknowledge+0x4c>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
   90774:	e0bffe17 	ldw	r2,-8(fp)
   90778:	10800a17 	ldw	r2,40(r2)
   9077c:	10800104 	addi	r2,r2,4
   90780:	10800037 	ldwio	r2,0(r2)
   90784:	1080004c 	andi	r2,r2,1
   90788:	e0bfff15 	stw	r2,-4(fp)
   9078c:	00000206 	br	90798 <alt_up_av_config_read_acknowledge+0x54>
	return -1;
   90790:	00bfffc4 	movi	r2,-1
   90794:	e0bfff15 	stw	r2,-4(fp)
   90798:	e0bfff17 	ldw	r2,-4(fp)
}
   9079c:	e037883a 	mov	sp,fp
   907a0:	df000017 	ldw	fp,0(sp)
   907a4:	dec00104 	addi	sp,sp,4
   907a8:	f800283a 	ret

000907ac <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
   907ac:	defffe04 	addi	sp,sp,-8
   907b0:	df000115 	stw	fp,4(sp)
   907b4:	df000104 	addi	fp,sp,4
   907b8:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
   907bc:	e0bfff17 	ldw	r2,-4(fp)
   907c0:	10800a17 	ldw	r2,40(r2)
   907c4:	10800104 	addi	r2,r2,4
   907c8:	10800037 	ldwio	r2,0(r2)
   907cc:	1080008c 	andi	r2,r2,2
   907d0:	1005d07a 	srai	r2,r2,1
}
   907d4:	e037883a 	mov	sp,fp
   907d8:	df000017 	ldw	fp,0(sp)
   907dc:	dec00104 	addi	sp,sp,4
   907e0:	f800283a 	ret

000907e4 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   907e4:	defff904 	addi	sp,sp,-28
   907e8:	dfc00615 	stw	ra,24(sp)
   907ec:	df000515 	stw	fp,20(sp)
   907f0:	df000504 	addi	fp,sp,20
   907f4:	e13ffc15 	stw	r4,-16(fp)
   907f8:	e17ffd15 	stw	r5,-12(fp)
   907fc:	e1bffe15 	stw	r6,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
   90800:	e0bffc17 	ldw	r2,-16(fp)
   90804:	10800b17 	ldw	r2,44(r2)
   90808:	10800060 	cmpeqi	r2,r2,1
   9080c:	10000f1e 	bne	r2,zero,9084c <alt_up_av_config_write_audio_cfg_register+0x68>
   90810:	e0bffc17 	ldw	r2,-16(fp)
   90814:	10800b17 	ldw	r2,44(r2)
   90818:	108000a0 	cmpeqi	r2,r2,2
   9081c:	10000b1e 	bne	r2,zero,9084c <alt_up_av_config_write_audio_cfg_register+0x68>
   90820:	e0bffc17 	ldw	r2,-16(fp)
   90824:	10800b17 	ldw	r2,44(r2)
   90828:	108000e0 	cmpeqi	r2,r2,3
   9082c:	1000071e 	bne	r2,zero,9084c <alt_up_av_config_write_audio_cfg_register+0x68>
   90830:	e0bffc17 	ldw	r2,-16(fp)
   90834:	10800b17 	ldw	r2,44(r2)
   90838:	10800120 	cmpeqi	r2,r2,4
   9083c:	1000031e 	bne	r2,zero,9084c <alt_up_av_config_write_audio_cfg_register+0x68>
		return -EINVAL;
   90840:	00bffa84 	movi	r2,-22
   90844:	e0bfff15 	stw	r2,-4(fp)
   90848:	00000b06 	br	90878 <alt_up_av_config_write_audio_cfg_register+0x94>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
   9084c:	e03ffb15 	stw	zero,-20(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
   90850:	e0bffc17 	ldw	r2,-16(fp)
   90854:	10800a17 	ldw	r2,40(r2)
   90858:	10800084 	addi	r2,r2,2
   9085c:	e0fffb17 	ldw	r3,-20(fp)
   90860:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
   90864:	e13ffc17 	ldw	r4,-16(fp)
   90868:	e17ffd17 	ldw	r5,-12(fp)
   9086c:	e1bffe17 	ldw	r6,-8(fp)
   90870:	00905b40 	call	905b4 <alt_up_av_config_write_data>
   90874:	e0bfff15 	stw	r2,-4(fp)
   90878:	e0bfff17 	ldw	r2,-4(fp)
}
   9087c:	e037883a 	mov	sp,fp
   90880:	dfc00117 	ldw	ra,4(sp)
   90884:	df000017 	ldw	fp,0(sp)
   90888:	dec00204 	addi	sp,sp,8
   9088c:	f800283a 	ret

00090890 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
   90890:	defff904 	addi	sp,sp,-28
   90894:	dfc00615 	stw	ra,24(sp)
   90898:	df000515 	stw	fp,20(sp)
   9089c:	df000504 	addi	fp,sp,20
   908a0:	e13ffb15 	stw	r4,-20(fp)
   908a4:	e17ffc15 	stw	r5,-16(fp)
   908a8:	e1bffd15 	stw	r6,-12(fp)
   908ac:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
   908b0:	e0bffb17 	ldw	r2,-20(fp)
   908b4:	10800b17 	ldw	r2,44(r2)
   908b8:	108000a0 	cmpeqi	r2,r2,2
   908bc:	10000b1e 	bne	r2,zero,908ec <alt_up_av_config_read_video_cfg_register+0x5c>
   908c0:	e0bffb17 	ldw	r2,-20(fp)
   908c4:	10800b17 	ldw	r2,44(r2)
   908c8:	108000e0 	cmpeqi	r2,r2,3
   908cc:	1000071e 	bne	r2,zero,908ec <alt_up_av_config_read_video_cfg_register+0x5c>
   908d0:	e0bffb17 	ldw	r2,-20(fp)
   908d4:	10800b17 	ldw	r2,44(r2)
   908d8:	10800120 	cmpeqi	r2,r2,4
   908dc:	1000031e 	bne	r2,zero,908ec <alt_up_av_config_read_video_cfg_register+0x5c>
		return -EINVAL;
   908e0:	00bffa84 	movi	r2,-22
   908e4:	e0bfff15 	stw	r2,-4(fp)
   908e8:	00002106 	br	90970 <alt_up_av_config_read_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
   908ec:	e0bffb17 	ldw	r2,-20(fp)
   908f0:	10800b17 	ldw	r2,44(r2)
   908f4:	108000a0 	cmpeqi	r2,r2,2
   908f8:	1000041e 	bne	r2,zero,9090c <alt_up_av_config_read_video_cfg_register+0x7c>
   908fc:	e0bffb17 	ldw	r2,-20(fp)
   90900:	10800b17 	ldw	r2,44(r2)
   90904:	10800118 	cmpnei	r2,r2,4
   90908:	1000061e 	bne	r2,zero,90924 <alt_up_av_config_read_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
   9090c:	e0bffe17 	ldw	r2,-8(fp)
   90910:	10800060 	cmpeqi	r2,r2,1
   90914:	10000c1e 	bne	r2,zero,90948 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
   90918:	00bffa84 	movi	r2,-22
   9091c:	e0bfff15 	stw	r2,-4(fp)
   90920:	00001306 	br	90970 <alt_up_av_config_read_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
   90924:	e0bffe17 	ldw	r2,-8(fp)
   90928:	10800060 	cmpeqi	r2,r2,1
   9092c:	1000061e 	bne	r2,zero,90948 <alt_up_av_config_read_video_cfg_register+0xb8>
   90930:	e0bffe17 	ldw	r2,-8(fp)
   90934:	108000a0 	cmpeqi	r2,r2,2
   90938:	1000031e 	bne	r2,zero,90948 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
   9093c:	00bffa84 	movi	r2,-22
   90940:	e0bfff15 	stw	r2,-4(fp)
   90944:	00000a06 	br	90970 <alt_up_av_config_read_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
   90948:	e0bffb17 	ldw	r2,-20(fp)
   9094c:	10800a17 	ldw	r2,40(r2)
   90950:	10800084 	addi	r2,r2,2
   90954:	e0fffe17 	ldw	r3,-8(fp)
   90958:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_read_data(av_config, addr, data);
   9095c:	e13ffb17 	ldw	r4,-20(fp)
   90960:	e17ffc17 	ldw	r5,-16(fp)
   90964:	e1bffd17 	ldw	r6,-12(fp)
   90968:	00906180 	call	90618 <alt_up_av_config_read_data>
   9096c:	e0bfff15 	stw	r2,-4(fp)
   90970:	e0bfff17 	ldw	r2,-4(fp)
}
   90974:	e037883a 	mov	sp,fp
   90978:	dfc00117 	ldw	ra,4(sp)
   9097c:	df000017 	ldw	fp,0(sp)
   90980:	dec00204 	addi	sp,sp,8
   90984:	f800283a 	ret

00090988 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
   90988:	defff904 	addi	sp,sp,-28
   9098c:	dfc00615 	stw	ra,24(sp)
   90990:	df000515 	stw	fp,20(sp)
   90994:	df000504 	addi	fp,sp,20
   90998:	e13ffb15 	stw	r4,-20(fp)
   9099c:	e17ffc15 	stw	r5,-16(fp)
   909a0:	e1bffd15 	stw	r6,-12(fp)
   909a4:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
   909a8:	e0bffb17 	ldw	r2,-20(fp)
   909ac:	10800b17 	ldw	r2,44(r2)
   909b0:	108000a0 	cmpeqi	r2,r2,2
   909b4:	10000b1e 	bne	r2,zero,909e4 <alt_up_av_config_write_video_cfg_register+0x5c>
   909b8:	e0bffb17 	ldw	r2,-20(fp)
   909bc:	10800b17 	ldw	r2,44(r2)
   909c0:	108000e0 	cmpeqi	r2,r2,3
   909c4:	1000071e 	bne	r2,zero,909e4 <alt_up_av_config_write_video_cfg_register+0x5c>
   909c8:	e0bffb17 	ldw	r2,-20(fp)
   909cc:	10800b17 	ldw	r2,44(r2)
   909d0:	10800120 	cmpeqi	r2,r2,4
   909d4:	1000031e 	bne	r2,zero,909e4 <alt_up_av_config_write_video_cfg_register+0x5c>
		return -EINVAL;
   909d8:	00bffa84 	movi	r2,-22
   909dc:	e0bfff15 	stw	r2,-4(fp)
   909e0:	00002106 	br	90a68 <alt_up_av_config_write_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
   909e4:	e0bffb17 	ldw	r2,-20(fp)
   909e8:	10800b17 	ldw	r2,44(r2)
   909ec:	108000a0 	cmpeqi	r2,r2,2
   909f0:	1000041e 	bne	r2,zero,90a04 <alt_up_av_config_write_video_cfg_register+0x7c>
   909f4:	e0bffb17 	ldw	r2,-20(fp)
   909f8:	10800b17 	ldw	r2,44(r2)
   909fc:	10800118 	cmpnei	r2,r2,4
   90a00:	1000061e 	bne	r2,zero,90a1c <alt_up_av_config_write_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
   90a04:	e0bffe17 	ldw	r2,-8(fp)
   90a08:	10800060 	cmpeqi	r2,r2,1
   90a0c:	10000c1e 	bne	r2,zero,90a40 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
   90a10:	00bffa84 	movi	r2,-22
   90a14:	e0bfff15 	stw	r2,-4(fp)
   90a18:	00001306 	br	90a68 <alt_up_av_config_write_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
   90a1c:	e0bffe17 	ldw	r2,-8(fp)
   90a20:	10800060 	cmpeqi	r2,r2,1
   90a24:	1000061e 	bne	r2,zero,90a40 <alt_up_av_config_write_video_cfg_register+0xb8>
   90a28:	e0bffe17 	ldw	r2,-8(fp)
   90a2c:	108000a0 	cmpeqi	r2,r2,2
   90a30:	1000031e 	bne	r2,zero,90a40 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
   90a34:	00bffa84 	movi	r2,-22
   90a38:	e0bfff15 	stw	r2,-4(fp)
   90a3c:	00000a06 	br	90a68 <alt_up_av_config_write_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
   90a40:	e0bffb17 	ldw	r2,-20(fp)
   90a44:	10800a17 	ldw	r2,40(r2)
   90a48:	10800084 	addi	r2,r2,2
   90a4c:	e0fffe17 	ldw	r3,-8(fp)
   90a50:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
   90a54:	e13ffb17 	ldw	r4,-20(fp)
   90a58:	e17ffc17 	ldw	r5,-16(fp)
   90a5c:	e1bffd17 	ldw	r6,-12(fp)
   90a60:	00905b40 	call	905b4 <alt_up_av_config_write_data>
   90a64:	e0bfff15 	stw	r2,-4(fp)
   90a68:	e0bfff17 	ldw	r2,-4(fp)
}
   90a6c:	e037883a 	mov	sp,fp
   90a70:	dfc00117 	ldw	ra,4(sp)
   90a74:	df000017 	ldw	fp,0(sp)
   90a78:	dec00204 	addi	sp,sp,8
   90a7c:	f800283a 	ret

00090a80 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
   90a80:	defffa04 	addi	sp,sp,-24
   90a84:	dfc00515 	stw	ra,20(sp)
   90a88:	df000415 	stw	fp,16(sp)
   90a8c:	df000404 	addi	fp,sp,16
   90a90:	e13ffc15 	stw	r4,-16(fp)
   90a94:	e17ffd15 	stw	r5,-12(fp)
   90a98:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
   90a9c:	e0bffc17 	ldw	r2,-16(fp)
   90aa0:	10800b17 	ldw	r2,44(r2)
   90aa4:	10800220 	cmpeqi	r2,r2,8
   90aa8:	1000031e 	bne	r2,zero,90ab8 <alt_up_av_config_read_DC2_cfg_register+0x38>
		return -EINVAL;
   90aac:	00bffa84 	movi	r2,-22
   90ab0:	e0bfff15 	stw	r2,-4(fp)
   90ab4:	00000506 	br	90acc <alt_up_av_config_read_DC2_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
   90ab8:	e13ffc17 	ldw	r4,-16(fp)
   90abc:	e17ffd17 	ldw	r5,-12(fp)
   90ac0:	e1bffe17 	ldw	r6,-8(fp)
   90ac4:	00906180 	call	90618 <alt_up_av_config_read_data>
   90ac8:	e0bfff15 	stw	r2,-4(fp)
   90acc:	e0bfff17 	ldw	r2,-4(fp)
}
   90ad0:	e037883a 	mov	sp,fp
   90ad4:	dfc00117 	ldw	ra,4(sp)
   90ad8:	df000017 	ldw	fp,0(sp)
   90adc:	dec00204 	addi	sp,sp,8
   90ae0:	f800283a 	ret

00090ae4 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   90ae4:	defffa04 	addi	sp,sp,-24
   90ae8:	dfc00515 	stw	ra,20(sp)
   90aec:	df000415 	stw	fp,16(sp)
   90af0:	df000404 	addi	fp,sp,16
   90af4:	e13ffc15 	stw	r4,-16(fp)
   90af8:	e17ffd15 	stw	r5,-12(fp)
   90afc:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
   90b00:	e0bffc17 	ldw	r2,-16(fp)
   90b04:	10800b17 	ldw	r2,44(r2)
   90b08:	10800220 	cmpeqi	r2,r2,8
   90b0c:	1000031e 	bne	r2,zero,90b1c <alt_up_av_config_write_DC2_cfg_register+0x38>
		return -EINVAL;
   90b10:	00bffa84 	movi	r2,-22
   90b14:	e0bfff15 	stw	r2,-4(fp)
   90b18:	00000506 	br	90b30 <alt_up_av_config_write_DC2_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
   90b1c:	e13ffc17 	ldw	r4,-16(fp)
   90b20:	e17ffd17 	ldw	r5,-12(fp)
   90b24:	e1bffe17 	ldw	r6,-8(fp)
   90b28:	00905b40 	call	905b4 <alt_up_av_config_write_data>
   90b2c:	e0bfff15 	stw	r2,-4(fp)
   90b30:	e0bfff17 	ldw	r2,-4(fp)
}
   90b34:	e037883a 	mov	sp,fp
   90b38:	dfc00117 	ldw	ra,4(sp)
   90b3c:	df000017 	ldw	fp,0(sp)
   90b40:	dec00204 	addi	sp,sp,8
   90b44:	f800283a 	ret

00090b48 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
   90b48:	defffa04 	addi	sp,sp,-24
   90b4c:	dfc00515 	stw	ra,20(sp)
   90b50:	df000415 	stw	fp,16(sp)
   90b54:	df000404 	addi	fp,sp,16
   90b58:	e13ffc15 	stw	r4,-16(fp)
   90b5c:	e17ffd15 	stw	r5,-12(fp)
   90b60:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
   90b64:	e0bffc17 	ldw	r2,-16(fp)
   90b68:	10800b17 	ldw	r2,44(r2)
   90b6c:	10800260 	cmpeqi	r2,r2,9
   90b70:	1000031e 	bne	r2,zero,90b80 <alt_up_av_config_read_D5M_cfg_register+0x38>
		return -EINVAL;
   90b74:	00bffa84 	movi	r2,-22
   90b78:	e0bfff15 	stw	r2,-4(fp)
   90b7c:	00000506 	br	90b94 <alt_up_av_config_read_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_read_data(av_config, addr, data);
   90b80:	e13ffc17 	ldw	r4,-16(fp)
   90b84:	e17ffd17 	ldw	r5,-12(fp)
   90b88:	e1bffe17 	ldw	r6,-8(fp)
   90b8c:	00906180 	call	90618 <alt_up_av_config_read_data>
   90b90:	e0bfff15 	stw	r2,-4(fp)
   90b94:	e0bfff17 	ldw	r2,-4(fp)
}
   90b98:	e037883a 	mov	sp,fp
   90b9c:	dfc00117 	ldw	ra,4(sp)
   90ba0:	df000017 	ldw	fp,0(sp)
   90ba4:	dec00204 	addi	sp,sp,8
   90ba8:	f800283a 	ret

00090bac <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   90bac:	defffa04 	addi	sp,sp,-24
   90bb0:	dfc00515 	stw	ra,20(sp)
   90bb4:	df000415 	stw	fp,16(sp)
   90bb8:	df000404 	addi	fp,sp,16
   90bbc:	e13ffc15 	stw	r4,-16(fp)
   90bc0:	e17ffd15 	stw	r5,-12(fp)
   90bc4:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
   90bc8:	e0bffc17 	ldw	r2,-16(fp)
   90bcc:	10800b17 	ldw	r2,44(r2)
   90bd0:	10800260 	cmpeqi	r2,r2,9
   90bd4:	1000031e 	bne	r2,zero,90be4 <alt_up_av_config_write_D5M_cfg_register+0x38>
		return -EINVAL;
   90bd8:	00bffa84 	movi	r2,-22
   90bdc:	e0bfff15 	stw	r2,-4(fp)
   90be0:	00000506 	br	90bf8 <alt_up_av_config_write_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_write_data(av_config, addr, data);
   90be4:	e13ffc17 	ldw	r4,-16(fp)
   90be8:	e17ffd17 	ldw	r5,-12(fp)
   90bec:	e1bffe17 	ldw	r6,-8(fp)
   90bf0:	00905b40 	call	905b4 <alt_up_av_config_write_data>
   90bf4:	e0bfff15 	stw	r2,-4(fp)
   90bf8:	e0bfff17 	ldw	r2,-4(fp)
}
   90bfc:	e037883a 	mov	sp,fp
   90c00:	dfc00117 	ldw	ra,4(sp)
   90c04:	df000017 	ldw	fp,0(sp)
   90c08:	dec00204 	addi	sp,sp,8
   90c0c:	f800283a 	ret

00090c10 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
   90c10:	defffa04 	addi	sp,sp,-24
   90c14:	dfc00515 	stw	ra,20(sp)
   90c18:	df000415 	stw	fp,16(sp)
   90c1c:	df000404 	addi	fp,sp,16
   90c20:	e13ffc15 	stw	r4,-16(fp)
   90c24:	e17ffd15 	stw	r5,-12(fp)
   90c28:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
   90c2c:	e0bffc17 	ldw	r2,-16(fp)
   90c30:	10800b17 	ldw	r2,44(r2)
   90c34:	108002a0 	cmpeqi	r2,r2,10
   90c38:	1000031e 	bne	r2,zero,90c48 <alt_up_av_config_read_LTM_cfg_register+0x38>
		return -EINVAL;
   90c3c:	00bffa84 	movi	r2,-22
   90c40:	e0bfff15 	stw	r2,-4(fp)
   90c44:	00000506 	br	90c5c <alt_up_av_config_read_LTM_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
   90c48:	e13ffc17 	ldw	r4,-16(fp)
   90c4c:	e17ffd17 	ldw	r5,-12(fp)
   90c50:	e1bffe17 	ldw	r6,-8(fp)
   90c54:	00906180 	call	90618 <alt_up_av_config_read_data>
   90c58:	e0bfff15 	stw	r2,-4(fp)
   90c5c:	e0bfff17 	ldw	r2,-4(fp)
}
   90c60:	e037883a 	mov	sp,fp
   90c64:	dfc00117 	ldw	ra,4(sp)
   90c68:	df000017 	ldw	fp,0(sp)
   90c6c:	dec00204 	addi	sp,sp,8
   90c70:	f800283a 	ret

00090c74 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   90c74:	defffa04 	addi	sp,sp,-24
   90c78:	dfc00515 	stw	ra,20(sp)
   90c7c:	df000415 	stw	fp,16(sp)
   90c80:	df000404 	addi	fp,sp,16
   90c84:	e13ffc15 	stw	r4,-16(fp)
   90c88:	e17ffd15 	stw	r5,-12(fp)
   90c8c:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
   90c90:	e0bffc17 	ldw	r2,-16(fp)
   90c94:	10800b17 	ldw	r2,44(r2)
   90c98:	108002a0 	cmpeqi	r2,r2,10
   90c9c:	1000031e 	bne	r2,zero,90cac <alt_up_av_config_write_LTM_cfg_register+0x38>
		return -EINVAL;
   90ca0:	00bffa84 	movi	r2,-22
   90ca4:	e0bfff15 	stw	r2,-4(fp)
   90ca8:	00000506 	br	90cc0 <alt_up_av_config_write_LTM_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
   90cac:	e13ffc17 	ldw	r4,-16(fp)
   90cb0:	e17ffd17 	ldw	r5,-12(fp)
   90cb4:	e1bffe17 	ldw	r6,-8(fp)
   90cb8:	00905b40 	call	905b4 <alt_up_av_config_write_data>
   90cbc:	e0bfff15 	stw	r2,-4(fp)
   90cc0:	e0bfff17 	ldw	r2,-4(fp)
}
   90cc4:	e037883a 	mov	sp,fp
   90cc8:	dfc00117 	ldw	ra,4(sp)
   90ccc:	df000017 	ldw	fp,0(sp)
   90cd0:	dec00204 	addi	sp,sp,8
   90cd4:	f800283a 	ret

00090cd8 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   90cd8:	defffd04 	addi	sp,sp,-12
   90cdc:	df000215 	stw	fp,8(sp)
   90ce0:	df000204 	addi	fp,sp,8
   90ce4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   90ce8:	e0bfff17 	ldw	r2,-4(fp)
   90cec:	1080400c 	andi	r2,r2,256
   90cf0:	1004d23a 	srli	r2,r2,8
   90cf4:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   90cf8:	e0bffe03 	ldbu	r2,-8(fp)
}
   90cfc:	e037883a 	mov	sp,fp
   90d00:	df000017 	ldw	fp,0(sp)
   90d04:	dec00104 	addi	sp,sp,4
   90d08:	f800283a 	ret

00090d0c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   90d0c:	defffd04 	addi	sp,sp,-12
   90d10:	df000215 	stw	fp,8(sp)
   90d14:	df000204 	addi	fp,sp,8
   90d18:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   90d1c:	e0bfff17 	ldw	r2,-4(fp)
   90d20:	1080004c 	andi	r2,r2,1
   90d24:	e0bffe05 	stb	r2,-8(fp)
	return re;
   90d28:	e0bffe03 	ldbu	r2,-8(fp)
}
   90d2c:	e037883a 	mov	sp,fp
   90d30:	df000017 	ldw	fp,0(sp)
   90d34:	dec00104 	addi	sp,sp,4
   90d38:	f800283a 	ret

00090d3c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   90d3c:	defffd04 	addi	sp,sp,-12
   90d40:	df000215 	stw	fp,8(sp)
   90d44:	df000204 	addi	fp,sp,8
   90d48:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   90d4c:	e0bfff17 	ldw	r2,-4(fp)
   90d50:	1081000c 	andi	r2,r2,1024
   90d54:	1004d2ba 	srli	r2,r2,10
   90d58:	e0bffe05 	stb	r2,-8(fp)
	return re;
   90d5c:	e0bffe03 	ldbu	r2,-8(fp)
}
   90d60:	e037883a 	mov	sp,fp
   90d64:	df000017 	ldw	fp,0(sp)
   90d68:	dec00104 	addi	sp,sp,4
   90d6c:	f800283a 	ret

00090d70 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   90d70:	defffd04 	addi	sp,sp,-12
   90d74:	df000215 	stw	fp,8(sp)
   90d78:	df000204 	addi	fp,sp,8
   90d7c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   90d80:	e0bfff17 	ldw	r2,-4(fp)
   90d84:	10bfffec 	andhi	r2,r2,65535
   90d88:	1004d43a 	srli	r2,r2,16
   90d8c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   90d90:	e0bffe0b 	ldhu	r2,-8(fp)
}
   90d94:	e037883a 	mov	sp,fp
   90d98:	df000017 	ldw	fp,0(sp)
   90d9c:	dec00104 	addi	sp,sp,4
   90da0:	f800283a 	ret

00090da4 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   90da4:	defffd04 	addi	sp,sp,-12
   90da8:	df000215 	stw	fp,8(sp)
   90dac:	df000204 	addi	fp,sp,8
   90db0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   90db4:	e0bfff17 	ldw	r2,-4(fp)
   90db8:	10a0000c 	andi	r2,r2,32768
   90dbc:	1004d3fa 	srli	r2,r2,15
   90dc0:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   90dc4:	e0bffe03 	ldbu	r2,-8(fp)
}
   90dc8:	e037883a 	mov	sp,fp
   90dcc:	df000017 	ldw	fp,0(sp)
   90dd0:	dec00104 	addi	sp,sp,4
   90dd4:	f800283a 	ret

00090dd8 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   90dd8:	defffd04 	addi	sp,sp,-12
   90ddc:	df000215 	stw	fp,8(sp)
   90de0:	df000204 	addi	fp,sp,8
   90de4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   90de8:	e0bfff17 	ldw	r2,-4(fp)
   90dec:	e0bffe05 	stb	r2,-8(fp)
	return data;
   90df0:	e0bffe03 	ldbu	r2,-8(fp)
}
   90df4:	e037883a 	mov	sp,fp
   90df8:	df000017 	ldw	fp,0(sp)
   90dfc:	dec00104 	addi	sp,sp,4
   90e00:	f800283a 	ret

00090e04 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   90e04:	defffb04 	addi	sp,sp,-20
   90e08:	dfc00415 	stw	ra,16(sp)
   90e0c:	df000315 	stw	fp,12(sp)
   90e10:	df000304 	addi	fp,sp,12
   90e14:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   90e18:	e13fff17 	ldw	r4,-4(fp)
   90e1c:	01403fc4 	movi	r5,255
   90e20:	00910640 	call	91064 <alt_up_ps2_write_data_byte_with_ack>
   90e24:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   90e28:	e0bffd17 	ldw	r2,-12(fp)
   90e2c:	1004c03a 	cmpne	r2,r2,zero
   90e30:	1000221e 	bne	r2,zero,90ebc <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   90e34:	e17ffe04 	addi	r5,fp,-8
   90e38:	e13fff17 	ldw	r4,-4(fp)
   90e3c:	00910d00 	call	910d0 <alt_up_ps2_read_data_byte_timeout>
   90e40:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   90e44:	e0bffd17 	ldw	r2,-12(fp)
   90e48:	1004c03a 	cmpne	r2,r2,zero
   90e4c:	10001b1e 	bne	r2,zero,90ebc <alt_up_ps2_init+0xb8>
   90e50:	e0bffe03 	ldbu	r2,-8(fp)
   90e54:	10803fcc 	andi	r2,r2,255
   90e58:	10802a98 	cmpnei	r2,r2,170
   90e5c:	1000171e 	bne	r2,zero,90ebc <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   90e60:	e17ffe04 	addi	r5,fp,-8
   90e64:	e13fff17 	ldw	r4,-4(fp)
   90e68:	00910d00 	call	910d0 <alt_up_ps2_read_data_byte_timeout>
   90e6c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   90e70:	e0bffd17 	ldw	r2,-12(fp)
   90e74:	10bfe318 	cmpnei	r2,r2,-116
   90e78:	1000041e 	bne	r2,zero,90e8c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   90e7c:	e0ffff17 	ldw	r3,-4(fp)
   90e80:	00800044 	movi	r2,1
   90e84:	18800d15 	stw	r2,52(r3)
   90e88:	00000c06 	br	90ebc <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
   90e8c:	e0bffd17 	ldw	r2,-12(fp)
   90e90:	1004c03a 	cmpne	r2,r2,zero
   90e94:	1000091e 	bne	r2,zero,90ebc <alt_up_ps2_init+0xb8>
   90e98:	e0bffe03 	ldbu	r2,-8(fp)
   90e9c:	10803fcc 	andi	r2,r2,255
   90ea0:	1004c03a 	cmpne	r2,r2,zero
   90ea4:	1000051e 	bne	r2,zero,90ebc <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   90ea8:	e0bfff17 	ldw	r2,-4(fp)
   90eac:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   90eb0:	e13fff17 	ldw	r4,-4(fp)
   90eb4:	01403d04 	movi	r5,244
   90eb8:	0090f7c0 	call	90f7c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   90ebc:	e037883a 	mov	sp,fp
   90ec0:	dfc00117 	ldw	ra,4(sp)
   90ec4:	df000017 	ldw	fp,0(sp)
   90ec8:	dec00204 	addi	sp,sp,8
   90ecc:	f800283a 	ret

00090ed0 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   90ed0:	defffd04 	addi	sp,sp,-12
   90ed4:	df000215 	stw	fp,8(sp)
   90ed8:	df000204 	addi	fp,sp,8
   90edc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   90ee0:	e0bfff17 	ldw	r2,-4(fp)
   90ee4:	10800a17 	ldw	r2,40(r2)
   90ee8:	10800104 	addi	r2,r2,4
   90eec:	10800037 	ldwio	r2,0(r2)
   90ef0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   90ef4:	e0bffe17 	ldw	r2,-8(fp)
   90ef8:	10800054 	ori	r2,r2,1
   90efc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   90f00:	e0bfff17 	ldw	r2,-4(fp)
   90f04:	10800a17 	ldw	r2,40(r2)
   90f08:	10800104 	addi	r2,r2,4
   90f0c:	e0fffe17 	ldw	r3,-8(fp)
   90f10:	10c00035 	stwio	r3,0(r2)
}
   90f14:	e037883a 	mov	sp,fp
   90f18:	df000017 	ldw	fp,0(sp)
   90f1c:	dec00104 	addi	sp,sp,4
   90f20:	f800283a 	ret

00090f24 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   90f24:	defffd04 	addi	sp,sp,-12
   90f28:	df000215 	stw	fp,8(sp)
   90f2c:	df000204 	addi	fp,sp,8
   90f30:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   90f34:	e0bfff17 	ldw	r2,-4(fp)
   90f38:	10800a17 	ldw	r2,40(r2)
   90f3c:	10800104 	addi	r2,r2,4
   90f40:	10800037 	ldwio	r2,0(r2)
   90f44:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   90f48:	e0fffe17 	ldw	r3,-8(fp)
   90f4c:	00bfff84 	movi	r2,-2
   90f50:	1884703a 	and	r2,r3,r2
   90f54:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   90f58:	e0bfff17 	ldw	r2,-4(fp)
   90f5c:	10800a17 	ldw	r2,40(r2)
   90f60:	10800104 	addi	r2,r2,4
   90f64:	e0fffe17 	ldw	r3,-8(fp)
   90f68:	10c00035 	stwio	r3,0(r2)
}
   90f6c:	e037883a 	mov	sp,fp
   90f70:	df000017 	ldw	fp,0(sp)
   90f74:	dec00104 	addi	sp,sp,4
   90f78:	f800283a 	ret

00090f7c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   90f7c:	defffa04 	addi	sp,sp,-24
   90f80:	dfc00515 	stw	ra,20(sp)
   90f84:	df000415 	stw	fp,16(sp)
   90f88:	df000404 	addi	fp,sp,16
   90f8c:	e13ffd15 	stw	r4,-12(fp)
   90f90:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   90f94:	e0bffd17 	ldw	r2,-12(fp)
   90f98:	10800a17 	ldw	r2,40(r2)
   90f9c:	e0fffe03 	ldbu	r3,-8(fp)
   90fa0:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   90fa4:	e0bffd17 	ldw	r2,-12(fp)
   90fa8:	10800a17 	ldw	r2,40(r2)
   90fac:	10800104 	addi	r2,r2,4
   90fb0:	10800037 	ldwio	r2,0(r2)
   90fb4:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
   90fb8:	e13ffc17 	ldw	r4,-16(fp)
   90fbc:	0090d3c0 	call	90d3c <read_CE_bit>
   90fc0:	10803fcc 	andi	r2,r2,255
   90fc4:	1005003a 	cmpeq	r2,r2,zero
   90fc8:	1000031e 	bne	r2,zero,90fd8 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   90fcc:	00bffec4 	movi	r2,-5
   90fd0:	e0bfff15 	stw	r2,-4(fp)
   90fd4:	00000106 	br	90fdc <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   90fd8:	e03fff15 	stw	zero,-4(fp)
   90fdc:	e0bfff17 	ldw	r2,-4(fp)
}
   90fe0:	e037883a 	mov	sp,fp
   90fe4:	dfc00117 	ldw	ra,4(sp)
   90fe8:	df000017 	ldw	fp,0(sp)
   90fec:	dec00204 	addi	sp,sp,8
   90ff0:	f800283a 	ret

00090ff4 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   90ff4:	defffb04 	addi	sp,sp,-20
   90ff8:	dfc00415 	stw	ra,16(sp)
   90ffc:	df000315 	stw	fp,12(sp)
   91000:	df000304 	addi	fp,sp,12
   91004:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
   91008:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
   9100c:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   91010:	e17ffd44 	addi	r5,fp,-11
   91014:	e13ffe17 	ldw	r4,-8(fp)
   91018:	00910d00 	call	910d0 <alt_up_ps2_read_data_byte_timeout>
   9101c:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
   91020:	e0bffd03 	ldbu	r2,-12(fp)
   91024:	1004c03a 	cmpne	r2,r2,zero
   91028:	1000061e 	bne	r2,zero,91044 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   9102c:	e0bffd43 	ldbu	r2,-11(fp)
   91030:	10803fcc 	andi	r2,r2,255
   91034:	10803e98 	cmpnei	r2,r2,250
   91038:	103ff51e 	bne	r2,zero,91010 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
   9103c:	e03fff15 	stw	zero,-4(fp)
   91040:	00000206 	br	9104c <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
   91044:	e0bffd03 	ldbu	r2,-12(fp)
   91048:	e0bfff15 	stw	r2,-4(fp)
   9104c:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   91050:	e037883a 	mov	sp,fp
   91054:	dfc00117 	ldw	ra,4(sp)
   91058:	df000017 	ldw	fp,0(sp)
   9105c:	dec00204 	addi	sp,sp,8
   91060:	f800283a 	ret

00091064 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   91064:	defff904 	addi	sp,sp,-28
   91068:	dfc00615 	stw	ra,24(sp)
   9106c:	df000515 	stw	fp,20(sp)
   91070:	df000504 	addi	fp,sp,20
   91074:	e13ffd15 	stw	r4,-12(fp)
   91078:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   9107c:	e17ffe03 	ldbu	r5,-8(fp)
   91080:	e13ffd17 	ldw	r4,-12(fp)
   91084:	0090f7c0 	call	90f7c <alt_up_ps2_write_data_byte>
   91088:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   9108c:	e0bffc17 	ldw	r2,-16(fp)
   91090:	1005003a 	cmpeq	r2,r2,zero
   91094:	1000031e 	bne	r2,zero,910a4 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   91098:	e0bffc17 	ldw	r2,-16(fp)
   9109c:	e0bfff15 	stw	r2,-4(fp)
   910a0:	00000506 	br	910b8 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   910a4:	e13ffd17 	ldw	r4,-12(fp)
   910a8:	0090ff40 	call	90ff4 <alt_up_ps2_wait_for_ack>
   910ac:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
   910b0:	e0bffb17 	ldw	r2,-20(fp)
   910b4:	e0bfff15 	stw	r2,-4(fp)
   910b8:	e0bfff17 	ldw	r2,-4(fp)
}
   910bc:	e037883a 	mov	sp,fp
   910c0:	dfc00117 	ldw	ra,4(sp)
   910c4:	df000017 	ldw	fp,0(sp)
   910c8:	dec00204 	addi	sp,sp,8
   910cc:	f800283a 	ret

000910d0 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   910d0:	defff904 	addi	sp,sp,-28
   910d4:	dfc00615 	stw	ra,24(sp)
   910d8:	df000515 	stw	fp,20(sp)
   910dc:	df000504 	addi	fp,sp,20
   910e0:	e13ffd15 	stw	r4,-12(fp)
   910e4:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
   910e8:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
   910ec:	e03ffb15 	stw	zero,-20(fp)
   910f0:	00000006 	br	910f4 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
   910f4:	e0bffb17 	ldw	r2,-20(fp)
   910f8:	10800044 	addi	r2,r2,1
   910fc:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   91100:	e0bffd17 	ldw	r2,-12(fp)
   91104:	10800a17 	ldw	r2,40(r2)
   91108:	10800037 	ldwio	r2,0(r2)
   9110c:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
   91110:	e13ffc17 	ldw	r4,-16(fp)
   91114:	0090da40 	call	90da4 <read_data_valid>
   91118:	10803fcc 	andi	r2,r2,255
   9111c:	1005003a 	cmpeq	r2,r2,zero
   91120:	1000071e 	bne	r2,zero,91140 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
   91124:	e13ffc17 	ldw	r4,-16(fp)
   91128:	0090dd80 	call	90dd8 <read_data_byte>
   9112c:	1007883a 	mov	r3,r2
   91130:	e0bffe17 	ldw	r2,-8(fp)
   91134:	10c00005 	stb	r3,0(r2)
			return 0;
   91138:	e03fff15 	stw	zero,-4(fp)
   9113c:	00000a06 	br	91168 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   91140:	e0bffd17 	ldw	r2,-12(fp)
   91144:	10800c17 	ldw	r2,48(r2)
   91148:	1005003a 	cmpeq	r2,r2,zero
   9114c:	103fe91e 	bne	r2,zero,910f4 <alt_up_ps2_read_data_byte_timeout+0x24>
   91150:	e0bffd17 	ldw	r2,-12(fp)
   91154:	10c00c17 	ldw	r3,48(r2)
   91158:	e0bffb17 	ldw	r2,-20(fp)
   9115c:	18bfe52e 	bgeu	r3,r2,910f4 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
   91160:	00bfe304 	movi	r2,-116
   91164:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
   91168:	e0bfff17 	ldw	r2,-4(fp)
}
   9116c:	e037883a 	mov	sp,fp
   91170:	dfc00117 	ldw	ra,4(sp)
   91174:	df000017 	ldw	fp,0(sp)
   91178:	dec00204 	addi	sp,sp,8
   9117c:	f800283a 	ret

00091180 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   91180:	defffa04 	addi	sp,sp,-24
   91184:	dfc00515 	stw	ra,20(sp)
   91188:	df000415 	stw	fp,16(sp)
   9118c:	df000404 	addi	fp,sp,16
   91190:	e13ffd15 	stw	r4,-12(fp)
   91194:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
   91198:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   9119c:	e0bffd17 	ldw	r2,-12(fp)
   911a0:	10800a17 	ldw	r2,40(r2)
   911a4:	10800037 	ldwio	r2,0(r2)
   911a8:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
   911ac:	e13ffc17 	ldw	r4,-16(fp)
   911b0:	0090da40 	call	90da4 <read_data_valid>
   911b4:	10803fcc 	andi	r2,r2,255
   911b8:	1005003a 	cmpeq	r2,r2,zero
   911bc:	1000071e 	bne	r2,zero,911dc <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
   911c0:	e13ffc17 	ldw	r4,-16(fp)
   911c4:	0090dd80 	call	90dd8 <read_data_byte>
   911c8:	1007883a 	mov	r3,r2
   911cc:	e0bffe17 	ldw	r2,-8(fp)
   911d0:	10c00005 	stb	r3,0(r2)
		return 0;
   911d4:	e03fff15 	stw	zero,-4(fp)
   911d8:	00000206 	br	911e4 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
   911dc:	00bfffc4 	movi	r2,-1
   911e0:	e0bfff15 	stw	r2,-4(fp)
   911e4:	e0bfff17 	ldw	r2,-4(fp)
}
   911e8:	e037883a 	mov	sp,fp
   911ec:	dfc00117 	ldw	ra,4(sp)
   911f0:	df000017 	ldw	fp,0(sp)
   911f4:	dec00204 	addi	sp,sp,8
   911f8:	f800283a 	ret

000911fc <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   911fc:	defffb04 	addi	sp,sp,-20
   91200:	dfc00415 	stw	ra,16(sp)
   91204:	df000315 	stw	fp,12(sp)
   91208:	df000304 	addi	fp,sp,12
   9120c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   91210:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
   91214:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   91218:	e0bfff17 	ldw	r2,-4(fp)
   9121c:	10800a17 	ldw	r2,40(r2)
   91220:	10800037 	ldwio	r2,0(r2)
   91224:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   91228:	e13ffd17 	ldw	r4,-12(fp)
   9122c:	0090d700 	call	90d70 <read_num_bytes_available>
   91230:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
   91234:	e0bffe0b 	ldhu	r2,-8(fp)
   91238:	1004c03a 	cmpne	r2,r2,zero
   9123c:	103ff61e 	bne	r2,zero,91218 <alt_up_ps2_clear_fifo+0x1c>
}
   91240:	e037883a 	mov	sp,fp
   91244:	dfc00117 	ldw	ra,4(sp)
   91248:	df000017 	ldw	fp,0(sp)
   9124c:	dec00204 	addi	sp,sp,8
   91250:	f800283a 	ret

00091254 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   91254:	defff704 	addi	sp,sp,-36
   91258:	dfc00815 	stw	ra,32(sp)
   9125c:	df000715 	stw	fp,28(sp)
   91260:	df000704 	addi	fp,sp,28
   91264:	e13ffc15 	stw	r4,-16(fp)
   91268:	e17ffd15 	stw	r5,-12(fp)
   9126c:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   91270:	e0bffc17 	ldw	r2,-16(fp)
   91274:	10800017 	ldw	r2,0(r2)
   91278:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   9127c:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
   91280:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
   91284:	e0fff917 	ldw	r3,-28(fp)
   91288:	e0bffe17 	ldw	r2,-8(fp)
   9128c:	18bffd16 	blt	r3,r2,91284 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
   91290:	e17ffd17 	ldw	r5,-12(fp)
   91294:	e0bffd17 	ldw	r2,-12(fp)
   91298:	10800044 	addi	r2,r2,1
   9129c:	e0bffd15 	stw	r2,-12(fp)
   912a0:	e13ffb17 	ldw	r4,-20(fp)
   912a4:	00910d00 	call	910d0 <alt_up_ps2_read_data_byte_timeout>
   912a8:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
   912ac:	e0bffa17 	ldw	r2,-24(fp)
   912b0:	1005003a 	cmpeq	r2,r2,zero
   912b4:	1000031e 	bne	r2,zero,912c4 <alt_up_ps2_read_fd+0x70>
			return count;
   912b8:	e0bff917 	ldw	r2,-28(fp)
   912bc:	e0bfff15 	stw	r2,-4(fp)
   912c0:	00000506 	br	912d8 <alt_up_ps2_read_fd+0x84>
		count++;
   912c4:	e0bff917 	ldw	r2,-28(fp)
   912c8:	10800044 	addi	r2,r2,1
   912cc:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
   912d0:	e0bff917 	ldw	r2,-28(fp)
   912d4:	e0bfff15 	stw	r2,-4(fp)
   912d8:	e0bfff17 	ldw	r2,-4(fp)
}
   912dc:	e037883a 	mov	sp,fp
   912e0:	dfc00117 	ldw	ra,4(sp)
   912e4:	df000017 	ldw	fp,0(sp)
   912e8:	dec00204 	addi	sp,sp,8
   912ec:	f800283a 	ret

000912f0 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   912f0:	defff704 	addi	sp,sp,-36
   912f4:	dfc00815 	stw	ra,32(sp)
   912f8:	df000715 	stw	fp,28(sp)
   912fc:	df000704 	addi	fp,sp,28
   91300:	e13ffc15 	stw	r4,-16(fp)
   91304:	e17ffd15 	stw	r5,-12(fp)
   91308:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   9130c:	e0bffc17 	ldw	r2,-16(fp)
   91310:	10800017 	ldw	r2,0(r2)
   91314:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   91318:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
   9131c:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
   91320:	00001206 	br	9136c <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   91324:	e0bffd17 	ldw	r2,-12(fp)
   91328:	10800003 	ldbu	r2,0(r2)
   9132c:	11403fcc 	andi	r5,r2,255
   91330:	e0bffd17 	ldw	r2,-12(fp)
   91334:	10800044 	addi	r2,r2,1
   91338:	e0bffd15 	stw	r2,-12(fp)
   9133c:	e13ffb17 	ldw	r4,-20(fp)
   91340:	0090f7c0 	call	90f7c <alt_up_ps2_write_data_byte>
   91344:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
   91348:	e0bffa17 	ldw	r2,-24(fp)
   9134c:	1005003a 	cmpeq	r2,r2,zero
   91350:	1000031e 	bne	r2,zero,91360 <alt_up_ps2_write_fd+0x70>
			return count;
   91354:	e0bff917 	ldw	r2,-28(fp)
   91358:	e0bfff15 	stw	r2,-4(fp)
   9135c:	00000806 	br	91380 <alt_up_ps2_write_fd+0x90>
		count++;
   91360:	e0bff917 	ldw	r2,-28(fp)
   91364:	10800044 	addi	r2,r2,1
   91368:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   9136c:	e0fff917 	ldw	r3,-28(fp)
   91370:	e0bffe17 	ldw	r2,-8(fp)
   91374:	18bfeb16 	blt	r3,r2,91324 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   91378:	e0bff917 	ldw	r2,-28(fp)
   9137c:	e0bfff15 	stw	r2,-4(fp)
   91380:	e0bfff17 	ldw	r2,-4(fp)
}
   91384:	e037883a 	mov	sp,fp
   91388:	dfc00117 	ldw	ra,4(sp)
   9138c:	df000017 	ldw	fp,0(sp)
   91390:	dec00204 	addi	sp,sp,8
   91394:	f800283a 	ret

00091398 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   91398:	defffc04 	addi	sp,sp,-16
   9139c:	dfc00315 	stw	ra,12(sp)
   913a0:	df000215 	stw	fp,8(sp)
   913a4:	df000204 	addi	fp,sp,8
   913a8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   913ac:	e13fff17 	ldw	r4,-4(fp)
   913b0:	01400274 	movhi	r5,9
   913b4:	29533504 	addi	r5,r5,19668
   913b8:	00917240 	call	91724 <alt_find_dev>
   913bc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   913c0:	e0bffe17 	ldw	r2,-8(fp)
}
   913c4:	e037883a 	mov	sp,fp
   913c8:	dfc00117 	ldw	ra,4(sp)
   913cc:	df000017 	ldw	fp,0(sp)
   913d0:	dec00204 	addi	sp,sp,8
   913d4:	f800283a 	ret

000913d8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   913d8:	defff404 	addi	sp,sp,-48
   913dc:	df000b15 	stw	fp,44(sp)
   913e0:	df000b04 	addi	fp,sp,44
   913e4:	e13ffb15 	stw	r4,-20(fp)
   913e8:	e17ffc15 	stw	r5,-16(fp)
   913ec:	e1bffd15 	stw	r6,-12(fp)
   913f0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   913f4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   913f8:	00800274 	movhi	r2,9
   913fc:	109a4704 	addi	r2,r2,26908
   91400:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   91404:	1005003a 	cmpeq	r2,r2,zero
   91408:	1000411e 	bne	r2,zero,91510 <alt_alarm_start+0x138>
  {
    if (alarm)
   9140c:	e0bffb17 	ldw	r2,-20(fp)
   91410:	1005003a 	cmpeq	r2,r2,zero
   91414:	10003b1e 	bne	r2,zero,91504 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   91418:	e0fffb17 	ldw	r3,-20(fp)
   9141c:	e0bffd17 	ldw	r2,-12(fp)
   91420:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   91424:	e0fffb17 	ldw	r3,-20(fp)
   91428:	e0bffe17 	ldw	r2,-8(fp)
   9142c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91430:	0005303a 	rdctl	r2,status
   91434:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91438:	e0fff817 	ldw	r3,-32(fp)
   9143c:	00bfff84 	movi	r2,-2
   91440:	1884703a 	and	r2,r3,r2
   91444:	1001703a 	wrctl	status,r2
  
  return context;
   91448:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   9144c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   91450:	00800274 	movhi	r2,9
   91454:	109a4804 	addi	r2,r2,26912
   91458:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   9145c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   91460:	e0fffc17 	ldw	r3,-16(fp)
   91464:	e0bff917 	ldw	r2,-28(fp)
   91468:	1885883a 	add	r2,r3,r2
   9146c:	10c00044 	addi	r3,r2,1
   91470:	e0bffb17 	ldw	r2,-20(fp)
   91474:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   91478:	e0bffb17 	ldw	r2,-20(fp)
   9147c:	10c00217 	ldw	r3,8(r2)
   91480:	e0bff917 	ldw	r2,-28(fp)
   91484:	1880042e 	bgeu	r3,r2,91498 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   91488:	e0fffb17 	ldw	r3,-20(fp)
   9148c:	00800044 	movi	r2,1
   91490:	18800405 	stb	r2,16(r3)
   91494:	00000206 	br	914a0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   91498:	e0bffb17 	ldw	r2,-20(fp)
   9149c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   914a0:	e0fffb17 	ldw	r3,-20(fp)
   914a4:	00800274 	movhi	r2,9
   914a8:	10933c04 	addi	r2,r2,19696
   914ac:	e0bff615 	stw	r2,-40(fp)
   914b0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   914b4:	e0fff717 	ldw	r3,-36(fp)
   914b8:	e0bff617 	ldw	r2,-40(fp)
   914bc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   914c0:	e0bff617 	ldw	r2,-40(fp)
   914c4:	10c00017 	ldw	r3,0(r2)
   914c8:	e0bff717 	ldw	r2,-36(fp)
   914cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   914d0:	e0bff617 	ldw	r2,-40(fp)
   914d4:	10c00017 	ldw	r3,0(r2)
   914d8:	e0bff717 	ldw	r2,-36(fp)
   914dc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   914e0:	e0fff617 	ldw	r3,-40(fp)
   914e4:	e0bff717 	ldw	r2,-36(fp)
   914e8:	18800015 	stw	r2,0(r3)
   914ec:	e0bffa17 	ldw	r2,-24(fp)
   914f0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   914f4:	e0bff517 	ldw	r2,-44(fp)
   914f8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   914fc:	e03fff15 	stw	zero,-4(fp)
   91500:	00000506 	br	91518 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   91504:	00bffa84 	movi	r2,-22
   91508:	e0bfff15 	stw	r2,-4(fp)
   9150c:	00000206 	br	91518 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   91510:	00bfde84 	movi	r2,-134
   91514:	e0bfff15 	stw	r2,-4(fp)
   91518:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   9151c:	e037883a 	mov	sp,fp
   91520:	df000017 	ldw	fp,0(sp)
   91524:	dec00104 	addi	sp,sp,4
   91528:	f800283a 	ret

0009152c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   9152c:	deffff04 	addi	sp,sp,-4
   91530:	df000015 	stw	fp,0(sp)
   91534:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   91538:	e037883a 	mov	sp,fp
   9153c:	df000017 	ldw	fp,0(sp)
   91540:	dec00104 	addi	sp,sp,4
   91544:	f800283a 	ret

00091548 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   91548:	defff904 	addi	sp,sp,-28
   9154c:	dfc00615 	stw	ra,24(sp)
   91550:	df000515 	stw	fp,20(sp)
   91554:	df000504 	addi	fp,sp,20
   91558:	e13ffd15 	stw	r4,-12(fp)
   9155c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   91560:	e0bffd17 	ldw	r2,-12(fp)
   91564:	1005003a 	cmpeq	r2,r2,zero
   91568:	1000041e 	bne	r2,zero,9157c <alt_dev_llist_insert+0x34>
   9156c:	e0bffd17 	ldw	r2,-12(fp)
   91570:	10800217 	ldw	r2,8(r2)
   91574:	1004c03a 	cmpne	r2,r2,zero
   91578:	1000071e 	bne	r2,zero,91598 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   9157c:	00915fc0 	call	915fc <alt_get_errno>
   91580:	1007883a 	mov	r3,r2
   91584:	00800584 	movi	r2,22
   91588:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   9158c:	00bffa84 	movi	r2,-22
   91590:	e0bfff15 	stw	r2,-4(fp)
   91594:	00001306 	br	915e4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   91598:	e0fffd17 	ldw	r3,-12(fp)
   9159c:	e0bffe17 	ldw	r2,-8(fp)
   915a0:	e0bffb15 	stw	r2,-20(fp)
   915a4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   915a8:	e0fffc17 	ldw	r3,-16(fp)
   915ac:	e0bffb17 	ldw	r2,-20(fp)
   915b0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   915b4:	e0bffb17 	ldw	r2,-20(fp)
   915b8:	10c00017 	ldw	r3,0(r2)
   915bc:	e0bffc17 	ldw	r2,-16(fp)
   915c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   915c4:	e0bffb17 	ldw	r2,-20(fp)
   915c8:	10c00017 	ldw	r3,0(r2)
   915cc:	e0bffc17 	ldw	r2,-16(fp)
   915d0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   915d4:	e0fffb17 	ldw	r3,-20(fp)
   915d8:	e0bffc17 	ldw	r2,-16(fp)
   915dc:	18800015 	stw	r2,0(r3)

  return 0;  
   915e0:	e03fff15 	stw	zero,-4(fp)
   915e4:	e0bfff17 	ldw	r2,-4(fp)
}
   915e8:	e037883a 	mov	sp,fp
   915ec:	dfc00117 	ldw	ra,4(sp)
   915f0:	df000017 	ldw	fp,0(sp)
   915f4:	dec00204 	addi	sp,sp,8
   915f8:	f800283a 	ret

000915fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   915fc:	defffd04 	addi	sp,sp,-12
   91600:	dfc00215 	stw	ra,8(sp)
   91604:	df000115 	stw	fp,4(sp)
   91608:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   9160c:	00800274 	movhi	r2,9
   91610:	10933804 	addi	r2,r2,19680
   91614:	10800017 	ldw	r2,0(r2)
   91618:	1005003a 	cmpeq	r2,r2,zero
   9161c:	1000061e 	bne	r2,zero,91638 <alt_get_errno+0x3c>
   91620:	00800274 	movhi	r2,9
   91624:	10933804 	addi	r2,r2,19680
   91628:	10800017 	ldw	r2,0(r2)
   9162c:	103ee83a 	callr	r2
   91630:	e0bfff15 	stw	r2,-4(fp)
   91634:	00000306 	br	91644 <alt_get_errno+0x48>
   91638:	00800274 	movhi	r2,9
   9163c:	109a3a04 	addi	r2,r2,26856
   91640:	e0bfff15 	stw	r2,-4(fp)
   91644:	e0bfff17 	ldw	r2,-4(fp)
}
   91648:	e037883a 	mov	sp,fp
   9164c:	dfc00117 	ldw	ra,4(sp)
   91650:	df000017 	ldw	fp,0(sp)
   91654:	dec00204 	addi	sp,sp,8
   91658:	f800283a 	ret

0009165c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   9165c:	defffd04 	addi	sp,sp,-12
   91660:	dfc00215 	stw	ra,8(sp)
   91664:	df000115 	stw	fp,4(sp)
   91668:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   9166c:	00bfff04 	movi	r2,-4
   91670:	00c00274 	movhi	r3,9
   91674:	18c9da04 	addi	r3,r3,10088
   91678:	1885883a 	add	r2,r3,r2
   9167c:	e0bfff15 	stw	r2,-4(fp)
   91680:	00000606 	br	9169c <_do_ctors+0x40>
        (*ctor) (); 
   91684:	e0bfff17 	ldw	r2,-4(fp)
   91688:	10800017 	ldw	r2,0(r2)
   9168c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   91690:	e0bfff17 	ldw	r2,-4(fp)
   91694:	10bfff04 	addi	r2,r2,-4
   91698:	e0bfff15 	stw	r2,-4(fp)
   9169c:	e0ffff17 	ldw	r3,-4(fp)
   916a0:	00800274 	movhi	r2,9
   916a4:	1089d904 	addi	r2,r2,10084
   916a8:	18bff62e 	bgeu	r3,r2,91684 <_do_ctors+0x28>
        (*ctor) (); 
}
   916ac:	e037883a 	mov	sp,fp
   916b0:	dfc00117 	ldw	ra,4(sp)
   916b4:	df000017 	ldw	fp,0(sp)
   916b8:	dec00204 	addi	sp,sp,8
   916bc:	f800283a 	ret

000916c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   916c0:	defffd04 	addi	sp,sp,-12
   916c4:	dfc00215 	stw	ra,8(sp)
   916c8:	df000115 	stw	fp,4(sp)
   916cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   916d0:	00bfff04 	movi	r2,-4
   916d4:	00c00274 	movhi	r3,9
   916d8:	18c9da04 	addi	r3,r3,10088
   916dc:	1885883a 	add	r2,r3,r2
   916e0:	e0bfff15 	stw	r2,-4(fp)
   916e4:	00000606 	br	91700 <_do_dtors+0x40>
        (*dtor) (); 
   916e8:	e0bfff17 	ldw	r2,-4(fp)
   916ec:	10800017 	ldw	r2,0(r2)
   916f0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   916f4:	e0bfff17 	ldw	r2,-4(fp)
   916f8:	10bfff04 	addi	r2,r2,-4
   916fc:	e0bfff15 	stw	r2,-4(fp)
   91700:	e0ffff17 	ldw	r3,-4(fp)
   91704:	00800274 	movhi	r2,9
   91708:	1089da04 	addi	r2,r2,10088
   9170c:	18bff62e 	bgeu	r3,r2,916e8 <_do_dtors+0x28>
        (*dtor) (); 
}
   91710:	e037883a 	mov	sp,fp
   91714:	dfc00117 	ldw	ra,4(sp)
   91718:	df000017 	ldw	fp,0(sp)
   9171c:	dec00204 	addi	sp,sp,8
   91720:	f800283a 	ret

00091724 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   91724:	defff904 	addi	sp,sp,-28
   91728:	dfc00615 	stw	ra,24(sp)
   9172c:	df000515 	stw	fp,20(sp)
   91730:	df000504 	addi	fp,sp,20
   91734:	e13ffd15 	stw	r4,-12(fp)
   91738:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   9173c:	e0bffe17 	ldw	r2,-8(fp)
   91740:	10800017 	ldw	r2,0(r2)
   91744:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   91748:	e13ffd17 	ldw	r4,-12(fp)
   9174c:	0086ca40 	call	86ca4 <strlen>
   91750:	10800044 	addi	r2,r2,1
   91754:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   91758:	00000d06 	br	91790 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   9175c:	e0bffc17 	ldw	r2,-16(fp)
   91760:	11000217 	ldw	r4,8(r2)
   91764:	e1bffb17 	ldw	r6,-20(fp)
   91768:	e17ffd17 	ldw	r5,-12(fp)
   9176c:	00920700 	call	92070 <memcmp>
   91770:	1004c03a 	cmpne	r2,r2,zero
   91774:	1000031e 	bne	r2,zero,91784 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   91778:	e0bffc17 	ldw	r2,-16(fp)
   9177c:	e0bfff15 	stw	r2,-4(fp)
   91780:	00000706 	br	917a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   91784:	e0bffc17 	ldw	r2,-16(fp)
   91788:	10800017 	ldw	r2,0(r2)
   9178c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   91790:	e0fffe17 	ldw	r3,-8(fp)
   91794:	e0bffc17 	ldw	r2,-16(fp)
   91798:	10fff01e 	bne	r2,r3,9175c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   9179c:	e03fff15 	stw	zero,-4(fp)
   917a0:	e0bfff17 	ldw	r2,-4(fp)
}
   917a4:	e037883a 	mov	sp,fp
   917a8:	dfc00117 	ldw	ra,4(sp)
   917ac:	df000017 	ldw	fp,0(sp)
   917b0:	dec00204 	addi	sp,sp,8
   917b4:	f800283a 	ret

000917b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   917b8:	defffa04 	addi	sp,sp,-24
   917bc:	dfc00515 	stw	ra,20(sp)
   917c0:	df000415 	stw	fp,16(sp)
   917c4:	df000404 	addi	fp,sp,16
   917c8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   917cc:	00800274 	movhi	r2,9
   917d0:	10933304 	addi	r2,r2,19660
   917d4:	10800017 	ldw	r2,0(r2)
   917d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   917dc:	00003306 	br	918ac <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   917e0:	e0bffd17 	ldw	r2,-12(fp)
   917e4:	11000217 	ldw	r4,8(r2)
   917e8:	0086ca40 	call	86ca4 <strlen>
   917ec:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   917f0:	e0bffd17 	ldw	r2,-12(fp)
   917f4:	10c00217 	ldw	r3,8(r2)
   917f8:	e0bffc17 	ldw	r2,-16(fp)
   917fc:	1885883a 	add	r2,r3,r2
   91800:	10bfffc4 	addi	r2,r2,-1
   91804:	10800003 	ldbu	r2,0(r2)
   91808:	10803fcc 	andi	r2,r2,255
   9180c:	1080201c 	xori	r2,r2,128
   91810:	10bfe004 	addi	r2,r2,-128
   91814:	10800bd8 	cmpnei	r2,r2,47
   91818:	1000031e 	bne	r2,zero,91828 <alt_find_file+0x70>
    {
      len -= 1;
   9181c:	e0bffc17 	ldw	r2,-16(fp)
   91820:	10bfffc4 	addi	r2,r2,-1
   91824:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   91828:	e0bffc17 	ldw	r2,-16(fp)
   9182c:	1007883a 	mov	r3,r2
   91830:	e0bffe17 	ldw	r2,-8(fp)
   91834:	1885883a 	add	r2,r3,r2
   91838:	10800003 	ldbu	r2,0(r2)
   9183c:	10803fcc 	andi	r2,r2,255
   91840:	1080201c 	xori	r2,r2,128
   91844:	10bfe004 	addi	r2,r2,-128
   91848:	10800be0 	cmpeqi	r2,r2,47
   9184c:	10000a1e 	bne	r2,zero,91878 <alt_find_file+0xc0>
   91850:	e0bffc17 	ldw	r2,-16(fp)
   91854:	1007883a 	mov	r3,r2
   91858:	e0bffe17 	ldw	r2,-8(fp)
   9185c:	1885883a 	add	r2,r3,r2
   91860:	10800003 	ldbu	r2,0(r2)
   91864:	10803fcc 	andi	r2,r2,255
   91868:	1080201c 	xori	r2,r2,128
   9186c:	10bfe004 	addi	r2,r2,-128
   91870:	1004c03a 	cmpne	r2,r2,zero
   91874:	10000a1e 	bne	r2,zero,918a0 <alt_find_file+0xe8>
   91878:	e0bffd17 	ldw	r2,-12(fp)
   9187c:	11000217 	ldw	r4,8(r2)
   91880:	e1bffc17 	ldw	r6,-16(fp)
   91884:	e17ffe17 	ldw	r5,-8(fp)
   91888:	00920700 	call	92070 <memcmp>
   9188c:	1004c03a 	cmpne	r2,r2,zero
   91890:	1000031e 	bne	r2,zero,918a0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   91894:	e0bffd17 	ldw	r2,-12(fp)
   91898:	e0bfff15 	stw	r2,-4(fp)
   9189c:	00000806 	br	918c0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   918a0:	e0bffd17 	ldw	r2,-12(fp)
   918a4:	10800017 	ldw	r2,0(r2)
   918a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   918ac:	00c00274 	movhi	r3,9
   918b0:	18d33304 	addi	r3,r3,19660
   918b4:	e0bffd17 	ldw	r2,-12(fp)
   918b8:	10ffc91e 	bne	r2,r3,917e0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   918bc:	e03fff15 	stw	zero,-4(fp)
   918c0:	e0bfff17 	ldw	r2,-4(fp)
}
   918c4:	e037883a 	mov	sp,fp
   918c8:	dfc00117 	ldw	ra,4(sp)
   918cc:	df000017 	ldw	fp,0(sp)
   918d0:	dec00204 	addi	sp,sp,8
   918d4:	f800283a 	ret

000918d8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   918d8:	defffa04 	addi	sp,sp,-24
   918dc:	dfc00515 	stw	ra,20(sp)
   918e0:	df000415 	stw	fp,16(sp)
   918e4:	dc000315 	stw	r16,12(sp)
   918e8:	df000304 	addi	fp,sp,12
   918ec:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   918f0:	00bffa04 	movi	r2,-24
   918f4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   918f8:	e03ffe15 	stw	zero,-8(fp)
   918fc:	00002006 	br	91980 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   91900:	e13ffe17 	ldw	r4,-8(fp)
   91904:	04000274 	movhi	r16,9
   91908:	840e5304 	addi	r16,r16,14668
   9190c:	01400304 	movi	r5,12
   91910:	00843d00 	call	843d0 <__mulsi3>
   91914:	1405883a 	add	r2,r2,r16
   91918:	10800017 	ldw	r2,0(r2)
   9191c:	1004c03a 	cmpne	r2,r2,zero
   91920:	1000141e 	bne	r2,zero,91974 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   91924:	e13ffe17 	ldw	r4,-8(fp)
   91928:	04000274 	movhi	r16,9
   9192c:	840e5304 	addi	r16,r16,14668
   91930:	01400304 	movi	r5,12
   91934:	00843d00 	call	843d0 <__mulsi3>
   91938:	1407883a 	add	r3,r2,r16
   9193c:	e0bfff17 	ldw	r2,-4(fp)
   91940:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   91944:	00800274 	movhi	r2,9
   91948:	10933704 	addi	r2,r2,19676
   9194c:	10c00017 	ldw	r3,0(r2)
   91950:	e0bffe17 	ldw	r2,-8(fp)
   91954:	1880040e 	bge	r3,r2,91968 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   91958:	00c00274 	movhi	r3,9
   9195c:	18d33704 	addi	r3,r3,19676
   91960:	e0bffe17 	ldw	r2,-8(fp)
   91964:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   91968:	e0bffe17 	ldw	r2,-8(fp)
   9196c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   91970:	00000606 	br	9198c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   91974:	e0bffe17 	ldw	r2,-8(fp)
   91978:	10800044 	addi	r2,r2,1
   9197c:	e0bffe15 	stw	r2,-8(fp)
   91980:	e0bffe17 	ldw	r2,-8(fp)
   91984:	10800810 	cmplti	r2,r2,32
   91988:	103fdd1e 	bne	r2,zero,91900 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   9198c:	e0bffd17 	ldw	r2,-12(fp)
}
   91990:	e037883a 	mov	sp,fp
   91994:	dfc00217 	ldw	ra,8(sp)
   91998:	df000117 	ldw	fp,4(sp)
   9199c:	dc000017 	ldw	r16,0(sp)
   919a0:	dec00304 	addi	sp,sp,12
   919a4:	f800283a 	ret

000919a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   919a8:	deffff04 	addi	sp,sp,-4
   919ac:	df000015 	stw	fp,0(sp)
   919b0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   919b4:	e037883a 	mov	sp,fp
   919b8:	df000017 	ldw	fp,0(sp)
   919bc:	dec00104 	addi	sp,sp,4
   919c0:	f800283a 	ret

000919c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   919c4:	defff804 	addi	sp,sp,-32
   919c8:	dfc00715 	stw	ra,28(sp)
   919cc:	df000615 	stw	fp,24(sp)
   919d0:	dc000515 	stw	r16,20(sp)
   919d4:	df000504 	addi	fp,sp,20
   919d8:	e13ffc15 	stw	r4,-16(fp)
   919dc:	e17ffd15 	stw	r5,-12(fp)
   919e0:	e1bffe15 	stw	r6,-8(fp)
   919e4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   919e8:	e13ffd17 	ldw	r4,-12(fp)
   919ec:	e17ffe17 	ldw	r5,-8(fp)
   919f0:	e1bfff17 	ldw	r6,-4(fp)
   919f4:	008dfe80 	call	8dfe8 <open>
   919f8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   919fc:	e0bffb17 	ldw	r2,-20(fp)
   91a00:	1004803a 	cmplt	r2,r2,zero
   91a04:	10001f1e 	bne	r2,zero,91a84 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   91a08:	e13ffb17 	ldw	r4,-20(fp)
   91a0c:	04000274 	movhi	r16,9
   91a10:	840e5304 	addi	r16,r16,14668
   91a14:	01400304 	movi	r5,12
   91a18:	00843d00 	call	843d0 <__mulsi3>
   91a1c:	1405883a 	add	r2,r2,r16
   91a20:	10c00017 	ldw	r3,0(r2)
   91a24:	e0bffc17 	ldw	r2,-16(fp)
   91a28:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   91a2c:	e13ffb17 	ldw	r4,-20(fp)
   91a30:	04000274 	movhi	r16,9
   91a34:	840e5304 	addi	r16,r16,14668
   91a38:	01400304 	movi	r5,12
   91a3c:	00843d00 	call	843d0 <__mulsi3>
   91a40:	1405883a 	add	r2,r2,r16
   91a44:	10800104 	addi	r2,r2,4
   91a48:	10c00017 	ldw	r3,0(r2)
   91a4c:	e0bffc17 	ldw	r2,-16(fp)
   91a50:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   91a54:	e13ffb17 	ldw	r4,-20(fp)
   91a58:	04000274 	movhi	r16,9
   91a5c:	840e5304 	addi	r16,r16,14668
   91a60:	01400304 	movi	r5,12
   91a64:	00843d00 	call	843d0 <__mulsi3>
   91a68:	1405883a 	add	r2,r2,r16
   91a6c:	10800204 	addi	r2,r2,8
   91a70:	10c00017 	ldw	r3,0(r2)
   91a74:	e0bffc17 	ldw	r2,-16(fp)
   91a78:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   91a7c:	e13ffb17 	ldw	r4,-20(fp)
   91a80:	008e5f00 	call	8e5f0 <alt_release_fd>
  }
} 
   91a84:	e037883a 	mov	sp,fp
   91a88:	dfc00217 	ldw	ra,8(sp)
   91a8c:	df000117 	ldw	fp,4(sp)
   91a90:	dc000017 	ldw	r16,0(sp)
   91a94:	dec00304 	addi	sp,sp,12
   91a98:	f800283a 	ret

00091a9c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   91a9c:	defffb04 	addi	sp,sp,-20
   91aa0:	dfc00415 	stw	ra,16(sp)
   91aa4:	df000315 	stw	fp,12(sp)
   91aa8:	df000304 	addi	fp,sp,12
   91aac:	e13ffd15 	stw	r4,-12(fp)
   91ab0:	e17ffe15 	stw	r5,-8(fp)
   91ab4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   91ab8:	01000274 	movhi	r4,9
   91abc:	210e5604 	addi	r4,r4,14680
   91ac0:	e17ffd17 	ldw	r5,-12(fp)
   91ac4:	01800044 	movi	r6,1
   91ac8:	01c07fc4 	movi	r7,511
   91acc:	00919c40 	call	919c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   91ad0:	01000274 	movhi	r4,9
   91ad4:	210e5304 	addi	r4,r4,14668
   91ad8:	e17ffe17 	ldw	r5,-8(fp)
   91adc:	000d883a 	mov	r6,zero
   91ae0:	01c07fc4 	movi	r7,511
   91ae4:	00919c40 	call	919c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   91ae8:	01000274 	movhi	r4,9
   91aec:	210e5904 	addi	r4,r4,14692
   91af0:	e17fff17 	ldw	r5,-4(fp)
   91af4:	01800044 	movi	r6,1
   91af8:	01c07fc4 	movi	r7,511
   91afc:	00919c40 	call	919c4 <alt_open_fd>
}  
   91b00:	e037883a 	mov	sp,fp
   91b04:	dfc00117 	ldw	ra,4(sp)
   91b08:	df000017 	ldw	fp,0(sp)
   91b0c:	dec00204 	addi	sp,sp,8
   91b10:	f800283a 	ret

00091b14 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   91b14:	deffef04 	addi	sp,sp,-68
   91b18:	df001015 	stw	fp,64(sp)
   91b1c:	df001004 	addi	fp,sp,64
   91b20:	e13ffc15 	stw	r4,-16(fp)
   91b24:	e17ffd15 	stw	r5,-12(fp)
   91b28:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   91b2c:	00bffa84 	movi	r2,-22
   91b30:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   91b34:	e0bffc17 	ldw	r2,-16(fp)
   91b38:	10800828 	cmpgeui	r2,r2,32
   91b3c:	1000601e 	bne	r2,zero,91cc0 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91b40:	0005303a 	rdctl	r2,status
   91b44:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91b48:	e0fff917 	ldw	r3,-28(fp)
   91b4c:	00bfff84 	movi	r2,-2
   91b50:	1884703a 	and	r2,r3,r2
   91b54:	1001703a 	wrctl	status,r2
  
  return context;
   91b58:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   91b5c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   91b60:	e0bffc17 	ldw	r2,-16(fp)
   91b64:	00c00274 	movhi	r3,9
   91b68:	18da5304 	addi	r3,r3,26956
   91b6c:	100490fa 	slli	r2,r2,3
   91b70:	10c7883a 	add	r3,r2,r3
   91b74:	e0bffe17 	ldw	r2,-8(fp)
   91b78:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   91b7c:	e0bffc17 	ldw	r2,-16(fp)
   91b80:	00c00274 	movhi	r3,9
   91b84:	18da5304 	addi	r3,r3,26956
   91b88:	100490fa 	slli	r2,r2,3
   91b8c:	10c5883a 	add	r2,r2,r3
   91b90:	10c00104 	addi	r3,r2,4
   91b94:	e0bffd17 	ldw	r2,-12(fp)
   91b98:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   91b9c:	e0bffe17 	ldw	r2,-8(fp)
   91ba0:	1005003a 	cmpeq	r2,r2,zero
   91ba4:	1000201e 	bne	r2,zero,91c28 <alt_irq_register+0x114>
   91ba8:	e0bffc17 	ldw	r2,-16(fp)
   91bac:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91bb0:	0005303a 	rdctl	r2,status
   91bb4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91bb8:	e0fff617 	ldw	r3,-40(fp)
   91bbc:	00bfff84 	movi	r2,-2
   91bc0:	1884703a 	and	r2,r3,r2
   91bc4:	1001703a 	wrctl	status,r2
  
  return context;
   91bc8:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   91bcc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   91bd0:	e0fff717 	ldw	r3,-36(fp)
   91bd4:	00800044 	movi	r2,1
   91bd8:	10c4983a 	sll	r2,r2,r3
   91bdc:	1007883a 	mov	r3,r2
   91be0:	00800274 	movhi	r2,9
   91be4:	109a4604 	addi	r2,r2,26904
   91be8:	10800017 	ldw	r2,0(r2)
   91bec:	1886b03a 	or	r3,r3,r2
   91bf0:	00800274 	movhi	r2,9
   91bf4:	109a4604 	addi	r2,r2,26904
   91bf8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   91bfc:	00800274 	movhi	r2,9
   91c00:	109a4604 	addi	r2,r2,26904
   91c04:	10800017 	ldw	r2,0(r2)
   91c08:	100170fa 	wrctl	ienable,r2
   91c0c:	e0bff817 	ldw	r2,-32(fp)
   91c10:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91c14:	e0bff517 	ldw	r2,-44(fp)
   91c18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   91c1c:	0005883a 	mov	r2,zero
   91c20:	e0bfff15 	stw	r2,-4(fp)
   91c24:	00002006 	br	91ca8 <alt_irq_register+0x194>
   91c28:	e0bffc17 	ldw	r2,-16(fp)
   91c2c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91c30:	0005303a 	rdctl	r2,status
   91c34:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91c38:	e0fff217 	ldw	r3,-56(fp)
   91c3c:	00bfff84 	movi	r2,-2
   91c40:	1884703a 	and	r2,r3,r2
   91c44:	1001703a 	wrctl	status,r2
  
  return context;
   91c48:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   91c4c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   91c50:	e0fff317 	ldw	r3,-52(fp)
   91c54:	00800044 	movi	r2,1
   91c58:	10c4983a 	sll	r2,r2,r3
   91c5c:	0084303a 	nor	r2,zero,r2
   91c60:	1007883a 	mov	r3,r2
   91c64:	00800274 	movhi	r2,9
   91c68:	109a4604 	addi	r2,r2,26904
   91c6c:	10800017 	ldw	r2,0(r2)
   91c70:	1886703a 	and	r3,r3,r2
   91c74:	00800274 	movhi	r2,9
   91c78:	109a4604 	addi	r2,r2,26904
   91c7c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   91c80:	00800274 	movhi	r2,9
   91c84:	109a4604 	addi	r2,r2,26904
   91c88:	10800017 	ldw	r2,0(r2)
   91c8c:	100170fa 	wrctl	ienable,r2
   91c90:	e0bff417 	ldw	r2,-48(fp)
   91c94:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91c98:	e0bff117 	ldw	r2,-60(fp)
   91c9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   91ca0:	0005883a 	mov	r2,zero
   91ca4:	e0bfff15 	stw	r2,-4(fp)
   91ca8:	e0bfff17 	ldw	r2,-4(fp)
   91cac:	e0bffb15 	stw	r2,-20(fp)
   91cb0:	e0bffa17 	ldw	r2,-24(fp)
   91cb4:	e0bff015 	stw	r2,-64(fp)
   91cb8:	e0bff017 	ldw	r2,-64(fp)
   91cbc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   91cc0:	e0bffb17 	ldw	r2,-20(fp)
}
   91cc4:	e037883a 	mov	sp,fp
   91cc8:	df000017 	ldw	fp,0(sp)
   91ccc:	dec00104 	addi	sp,sp,4
   91cd0:	f800283a 	ret

00091cd4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   91cd4:	defffa04 	addi	sp,sp,-24
   91cd8:	df000515 	stw	fp,20(sp)
   91cdc:	df000504 	addi	fp,sp,20
   91ce0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91ce4:	0005303a 	rdctl	r2,status
   91ce8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91cec:	e0fffd17 	ldw	r3,-12(fp)
   91cf0:	00bfff84 	movi	r2,-2
   91cf4:	1884703a 	and	r2,r3,r2
   91cf8:	1001703a 	wrctl	status,r2
  
  return context;
   91cfc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   91d00:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   91d04:	e0bfff17 	ldw	r2,-4(fp)
   91d08:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   91d0c:	e0bffc17 	ldw	r2,-16(fp)
   91d10:	10c00017 	ldw	r3,0(r2)
   91d14:	e0bffc17 	ldw	r2,-16(fp)
   91d18:	10800117 	ldw	r2,4(r2)
   91d1c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   91d20:	e0bffc17 	ldw	r2,-16(fp)
   91d24:	10c00117 	ldw	r3,4(r2)
   91d28:	e0bffc17 	ldw	r2,-16(fp)
   91d2c:	10800017 	ldw	r2,0(r2)
   91d30:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   91d34:	e0fffc17 	ldw	r3,-16(fp)
   91d38:	e0bffc17 	ldw	r2,-16(fp)
   91d3c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   91d40:	e0fffc17 	ldw	r3,-16(fp)
   91d44:	e0bffc17 	ldw	r2,-16(fp)
   91d48:	18800015 	stw	r2,0(r3)
   91d4c:	e0bffe17 	ldw	r2,-8(fp)
   91d50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91d54:	e0bffb17 	ldw	r2,-20(fp)
   91d58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   91d5c:	e037883a 	mov	sp,fp
   91d60:	df000017 	ldw	fp,0(sp)
   91d64:	dec00104 	addi	sp,sp,4
   91d68:	f800283a 	ret

00091d6c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   91d6c:	defffb04 	addi	sp,sp,-20
   91d70:	dfc00415 	stw	ra,16(sp)
   91d74:	df000315 	stw	fp,12(sp)
   91d78:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   91d7c:	d0a00f17 	ldw	r2,-32708(gp)
   91d80:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   91d84:	d0a71b17 	ldw	r2,-25492(gp)
   91d88:	10800044 	addi	r2,r2,1
   91d8c:	d0a71b15 	stw	r2,-25492(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   91d90:	00003106 	br	91e58 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   91d94:	e0bffe17 	ldw	r2,-8(fp)
   91d98:	10800017 	ldw	r2,0(r2)
   91d9c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   91da0:	e0bffe17 	ldw	r2,-8(fp)
   91da4:	10800403 	ldbu	r2,16(r2)
   91da8:	10803fcc 	andi	r2,r2,255
   91dac:	1005003a 	cmpeq	r2,r2,zero
   91db0:	1000051e 	bne	r2,zero,91dc8 <alt_tick+0x5c>
   91db4:	d0a71b17 	ldw	r2,-25492(gp)
   91db8:	1004c03a 	cmpne	r2,r2,zero
   91dbc:	1000021e 	bne	r2,zero,91dc8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   91dc0:	e0bffe17 	ldw	r2,-8(fp)
   91dc4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   91dc8:	e0bffe17 	ldw	r2,-8(fp)
   91dcc:	10c00217 	ldw	r3,8(r2)
   91dd0:	d0a71b17 	ldw	r2,-25492(gp)
   91dd4:	10c01e36 	bltu	r2,r3,91e50 <alt_tick+0xe4>
   91dd8:	e0bffe17 	ldw	r2,-8(fp)
   91ddc:	10800403 	ldbu	r2,16(r2)
   91de0:	10803fcc 	andi	r2,r2,255
   91de4:	1004c03a 	cmpne	r2,r2,zero
   91de8:	1000191e 	bne	r2,zero,91e50 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   91dec:	e0bffe17 	ldw	r2,-8(fp)
   91df0:	10c00317 	ldw	r3,12(r2)
   91df4:	e0bffe17 	ldw	r2,-8(fp)
   91df8:	11000517 	ldw	r4,20(r2)
   91dfc:	183ee83a 	callr	r3
   91e00:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   91e04:	e0bffd17 	ldw	r2,-12(fp)
   91e08:	1004c03a 	cmpne	r2,r2,zero
   91e0c:	1000031e 	bne	r2,zero,91e1c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   91e10:	e13ffe17 	ldw	r4,-8(fp)
   91e14:	0091cd40 	call	91cd4 <alt_alarm_stop>
   91e18:	00000d06 	br	91e50 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   91e1c:	e0bffe17 	ldw	r2,-8(fp)
   91e20:	10c00217 	ldw	r3,8(r2)
   91e24:	e0bffd17 	ldw	r2,-12(fp)
   91e28:	1887883a 	add	r3,r3,r2
   91e2c:	e0bffe17 	ldw	r2,-8(fp)
   91e30:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   91e34:	e0bffe17 	ldw	r2,-8(fp)
   91e38:	10c00217 	ldw	r3,8(r2)
   91e3c:	d0a71b17 	ldw	r2,-25492(gp)
   91e40:	1880032e 	bgeu	r3,r2,91e50 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   91e44:	e0fffe17 	ldw	r3,-8(fp)
   91e48:	00800044 	movi	r2,1
   91e4c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   91e50:	e0bfff17 	ldw	r2,-4(fp)
   91e54:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   91e58:	d0e00f04 	addi	r3,gp,-32708
   91e5c:	e0bffe17 	ldw	r2,-8(fp)
   91e60:	10ffcc1e 	bne	r2,r3,91d94 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   91e64:	e037883a 	mov	sp,fp
   91e68:	dfc00117 	ldw	ra,4(sp)
   91e6c:	df000017 	ldw	fp,0(sp)
   91e70:	dec00204 	addi	sp,sp,8
   91e74:	f800283a 	ret

00091e78 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   91e78:	defffd04 	addi	sp,sp,-12
   91e7c:	dfc00215 	stw	ra,8(sp)
   91e80:	df000115 	stw	fp,4(sp)
   91e84:	df000104 	addi	fp,sp,4
   91e88:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   91e8c:	e13fff17 	ldw	r4,-4(fp)
   91e90:	0091ec80 	call	91ec8 <alt_busy_sleep>
}
   91e94:	e037883a 	mov	sp,fp
   91e98:	dfc00117 	ldw	ra,4(sp)
   91e9c:	df000017 	ldw	fp,0(sp)
   91ea0:	dec00204 	addi	sp,sp,8
   91ea4:	f800283a 	ret

00091ea8 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
   91ea8:	deffff04 	addi	sp,sp,-4
   91eac:	df000015 	stw	fp,0(sp)
   91eb0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   91eb4:	000170fa 	wrctl	ienable,zero
}
   91eb8:	e037883a 	mov	sp,fp
   91ebc:	df000017 	ldw	fp,0(sp)
   91ec0:	dec00104 	addi	sp,sp,4
   91ec4:	f800283a 	ret

00091ec8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   91ec8:	defffa04 	addi	sp,sp,-24
   91ecc:	dfc00515 	stw	ra,20(sp)
   91ed0:	df000415 	stw	fp,16(sp)
   91ed4:	df000404 	addi	fp,sp,16
   91ed8:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   91edc:	00800244 	movi	r2,9
   91ee0:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   91ee4:	e13ffc17 	ldw	r4,-16(fp)
   91ee8:	014003f4 	movhi	r5,15
   91eec:	29509004 	addi	r5,r5,16960
   91ef0:	00843d00 	call	843d0 <__mulsi3>
   91ef4:	100b883a 	mov	r5,r2
   91ef8:	0100bef4 	movhi	r4,763
   91efc:	213c2004 	addi	r4,r4,-3968
   91f00:	00843c00 	call	843c0 <__udivsi3>
   91f04:	100b883a 	mov	r5,r2
   91f08:	01200034 	movhi	r4,32768
   91f0c:	213fffc4 	addi	r4,r4,-1
   91f10:	00843c00 	call	843c0 <__udivsi3>
   91f14:	100b883a 	mov	r5,r2
   91f18:	e13fff17 	ldw	r4,-4(fp)
   91f1c:	00843c00 	call	843c0 <__udivsi3>
   91f20:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   91f24:	e0bffd17 	ldw	r2,-12(fp)
   91f28:	1005003a 	cmpeq	r2,r2,zero
   91f2c:	10002a1e 	bne	r2,zero,91fd8 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
   91f30:	e03ffe15 	stw	zero,-8(fp)
   91f34:	00001706 	br	91f94 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   91f38:	00a00034 	movhi	r2,32768
   91f3c:	10bfffc4 	addi	r2,r2,-1
   91f40:	10bfffc4 	addi	r2,r2,-1
   91f44:	103ffe1e 	bne	r2,zero,91f40 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   91f48:	e13ffc17 	ldw	r4,-16(fp)
   91f4c:	014003f4 	movhi	r5,15
   91f50:	29509004 	addi	r5,r5,16960
   91f54:	00843d00 	call	843d0 <__mulsi3>
   91f58:	100b883a 	mov	r5,r2
   91f5c:	0100bef4 	movhi	r4,763
   91f60:	213c2004 	addi	r4,r4,-3968
   91f64:	00843c00 	call	843c0 <__udivsi3>
   91f68:	100b883a 	mov	r5,r2
   91f6c:	01200034 	movhi	r4,32768
   91f70:	213fffc4 	addi	r4,r4,-1
   91f74:	00843c00 	call	843c0 <__udivsi3>
   91f78:	1007883a 	mov	r3,r2
   91f7c:	e0bfff17 	ldw	r2,-4(fp)
   91f80:	10c5c83a 	sub	r2,r2,r3
   91f84:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   91f88:	e0bffe17 	ldw	r2,-8(fp)
   91f8c:	10800044 	addi	r2,r2,1
   91f90:	e0bffe15 	stw	r2,-8(fp)
   91f94:	e0fffe17 	ldw	r3,-8(fp)
   91f98:	e0bffd17 	ldw	r2,-12(fp)
   91f9c:	18bfe616 	blt	r3,r2,91f38 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   91fa0:	e13ffc17 	ldw	r4,-16(fp)
   91fa4:	014003f4 	movhi	r5,15
   91fa8:	29509004 	addi	r5,r5,16960
   91fac:	00843d00 	call	843d0 <__mulsi3>
   91fb0:	100b883a 	mov	r5,r2
   91fb4:	0100bef4 	movhi	r4,763
   91fb8:	213c2004 	addi	r4,r4,-3968
   91fbc:	00843c00 	call	843c0 <__udivsi3>
   91fc0:	1009883a 	mov	r4,r2
   91fc4:	e17fff17 	ldw	r5,-4(fp)
   91fc8:	00843d00 	call	843d0 <__mulsi3>
   91fcc:	10bfffc4 	addi	r2,r2,-1
   91fd0:	103ffe1e 	bne	r2,zero,91fcc <alt_busy_sleep+0x104>
   91fd4:	00000d06 	br	9200c <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   91fd8:	e13ffc17 	ldw	r4,-16(fp)
   91fdc:	014003f4 	movhi	r5,15
   91fe0:	29509004 	addi	r5,r5,16960
   91fe4:	00843d00 	call	843d0 <__mulsi3>
   91fe8:	100b883a 	mov	r5,r2
   91fec:	0100bef4 	movhi	r4,763
   91ff0:	213c2004 	addi	r4,r4,-3968
   91ff4:	00843c00 	call	843c0 <__udivsi3>
   91ff8:	1009883a 	mov	r4,r2
   91ffc:	e17fff17 	ldw	r5,-4(fp)
   92000:	00843d00 	call	843d0 <__mulsi3>
   92004:	10bfffc4 	addi	r2,r2,-1
   92008:	00bffe16 	blt	zero,r2,92004 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   9200c:	0005883a 	mov	r2,zero
}
   92010:	e037883a 	mov	sp,fp
   92014:	dfc00117 	ldw	ra,4(sp)
   92018:	df000017 	ldw	fp,0(sp)
   9201c:	dec00204 	addi	sp,sp,8
   92020:	f800283a 	ret

00092024 <atexit>:
   92024:	200b883a 	mov	r5,r4
   92028:	000d883a 	mov	r6,zero
   9202c:	0009883a 	mov	r4,zero
   92030:	000f883a 	mov	r7,zero
   92034:	009241c1 	jmpi	9241c <__register_exitproc>

00092038 <exit>:
   92038:	defffe04 	addi	sp,sp,-8
   9203c:	000b883a 	mov	r5,zero
   92040:	dc000015 	stw	r16,0(sp)
   92044:	dfc00115 	stw	ra,4(sp)
   92048:	2021883a 	mov	r16,r4
   9204c:	00925540 	call	92554 <__call_exitprocs>
   92050:	00800274 	movhi	r2,9
   92054:	10932e04 	addi	r2,r2,19640
   92058:	11000017 	ldw	r4,0(r2)
   9205c:	20800f17 	ldw	r2,60(r4)
   92060:	10000126 	beq	r2,zero,92068 <exit+0x30>
   92064:	103ee83a 	callr	r2
   92068:	8009883a 	mov	r4,r16
   9206c:	00927440 	call	92744 <_exit>

00092070 <memcmp>:
   92070:	00c000c4 	movi	r3,3
   92074:	1980032e 	bgeu	r3,r6,92084 <memcmp+0x14>
   92078:	2144b03a 	or	r2,r4,r5
   9207c:	10c4703a 	and	r2,r2,r3
   92080:	10000f26 	beq	r2,zero,920c0 <memcmp+0x50>
   92084:	31ffffc4 	addi	r7,r6,-1
   92088:	3000061e 	bne	r6,zero,920a4 <memcmp+0x34>
   9208c:	00000a06 	br	920b8 <memcmp+0x48>
   92090:	39ffffc4 	addi	r7,r7,-1
   92094:	00bfffc4 	movi	r2,-1
   92098:	21000044 	addi	r4,r4,1
   9209c:	29400044 	addi	r5,r5,1
   920a0:	38800526 	beq	r7,r2,920b8 <memcmp+0x48>
   920a4:	20c00003 	ldbu	r3,0(r4)
   920a8:	28800003 	ldbu	r2,0(r5)
   920ac:	18bff826 	beq	r3,r2,92090 <memcmp+0x20>
   920b0:	1885c83a 	sub	r2,r3,r2
   920b4:	f800283a 	ret
   920b8:	0005883a 	mov	r2,zero
   920bc:	f800283a 	ret
   920c0:	180f883a 	mov	r7,r3
   920c4:	20c00017 	ldw	r3,0(r4)
   920c8:	28800017 	ldw	r2,0(r5)
   920cc:	18bfed1e 	bne	r3,r2,92084 <memcmp+0x14>
   920d0:	31bfff04 	addi	r6,r6,-4
   920d4:	21000104 	addi	r4,r4,4
   920d8:	29400104 	addi	r5,r5,4
   920dc:	39bff936 	bltu	r7,r6,920c4 <memcmp+0x54>
   920e0:	003fe806 	br	92084 <memcmp+0x14>

000920e4 <putc>:
   920e4:	defffc04 	addi	sp,sp,-16
   920e8:	dc800215 	stw	r18,8(sp)
   920ec:	04800274 	movhi	r18,9
   920f0:	94932d04 	addi	r18,r18,19636
   920f4:	90c00017 	ldw	r3,0(r18)
   920f8:	dc400115 	stw	r17,4(sp)
   920fc:	dc000015 	stw	r16,0(sp)
   92100:	dfc00315 	stw	ra,12(sp)
   92104:	2023883a 	mov	r17,r4
   92108:	2821883a 	mov	r16,r5
   9210c:	18000226 	beq	r3,zero,92118 <putc+0x34>
   92110:	18800e17 	ldw	r2,56(r3)
   92114:	10001126 	beq	r2,zero,9215c <putc+0x78>
   92118:	80800217 	ldw	r2,8(r16)
   9211c:	10ffffc4 	addi	r3,r2,-1
   92120:	80c00215 	stw	r3,8(r16)
   92124:	18001316 	blt	r3,zero,92174 <putc+0x90>
   92128:	80800017 	ldw	r2,0(r16)
   9212c:	14400005 	stb	r17,0(r2)
   92130:	80c00017 	ldw	r3,0(r16)
   92134:	18800044 	addi	r2,r3,1
   92138:	18c00003 	ldbu	r3,0(r3)
   9213c:	80800015 	stw	r2,0(r16)
   92140:	1805883a 	mov	r2,r3
   92144:	dfc00317 	ldw	ra,12(sp)
   92148:	dc800217 	ldw	r18,8(sp)
   9214c:	dc400117 	ldw	r17,4(sp)
   92150:	dc000017 	ldw	r16,0(sp)
   92154:	dec00404 	addi	sp,sp,16
   92158:	f800283a 	ret
   9215c:	1809883a 	mov	r4,r3
   92160:	0084e7c0 	call	84e7c <__sinit>
   92164:	80800217 	ldw	r2,8(r16)
   92168:	10ffffc4 	addi	r3,r2,-1
   9216c:	80c00215 	stw	r3,8(r16)
   92170:	183fed0e 	bge	r3,zero,92128 <putc+0x44>
   92174:	80800617 	ldw	r2,24(r16)
   92178:	18800f16 	blt	r3,r2,921b8 <putc+0xd4>
   9217c:	80800017 	ldw	r2,0(r16)
   92180:	14400005 	stb	r17,0(r2)
   92184:	81000017 	ldw	r4,0(r16)
   92188:	00800284 	movi	r2,10
   9218c:	20c00003 	ldbu	r3,0(r4)
   92190:	18801226 	beq	r3,r2,921dc <putc+0xf8>
   92194:	20800044 	addi	r2,r4,1
   92198:	80800015 	stw	r2,0(r16)
   9219c:	1805883a 	mov	r2,r3
   921a0:	dfc00317 	ldw	ra,12(sp)
   921a4:	dc800217 	ldw	r18,8(sp)
   921a8:	dc400117 	ldw	r17,4(sp)
   921ac:	dc000017 	ldw	r16,0(sp)
   921b0:	dec00404 	addi	sp,sp,16
   921b4:	f800283a 	ret
   921b8:	91000017 	ldw	r4,0(r18)
   921bc:	880b883a 	mov	r5,r17
   921c0:	800d883a 	mov	r6,r16
   921c4:	dfc00317 	ldw	ra,12(sp)
   921c8:	dc800217 	ldw	r18,8(sp)
   921cc:	dc400117 	ldw	r17,4(sp)
   921d0:	dc000017 	ldw	r16,0(sp)
   921d4:	dec00404 	addi	sp,sp,16
   921d8:	00922d01 	jmpi	922d0 <__swbuf_r>
   921dc:	91000017 	ldw	r4,0(r18)
   921e0:	180b883a 	mov	r5,r3
   921e4:	003ff606 	br	921c0 <putc+0xdc>

000921e8 <_putc_r>:
   921e8:	defffc04 	addi	sp,sp,-16
   921ec:	dc400215 	stw	r17,8(sp)
   921f0:	dc000115 	stw	r16,4(sp)
   921f4:	dfc00315 	stw	ra,12(sp)
   921f8:	2021883a 	mov	r16,r4
   921fc:	2823883a 	mov	r17,r5
   92200:	20000226 	beq	r4,zero,9220c <_putc_r+0x24>
   92204:	20800e17 	ldw	r2,56(r4)
   92208:	10001026 	beq	r2,zero,9224c <_putc_r+0x64>
   9220c:	30800217 	ldw	r2,8(r6)
   92210:	10ffffc4 	addi	r3,r2,-1
   92214:	30c00215 	stw	r3,8(r6)
   92218:	18001316 	blt	r3,zero,92268 <_putc_r+0x80>
   9221c:	30800017 	ldw	r2,0(r6)
   92220:	14400005 	stb	r17,0(r2)
   92224:	30c00017 	ldw	r3,0(r6)
   92228:	18800044 	addi	r2,r3,1
   9222c:	18c00003 	ldbu	r3,0(r3)
   92230:	30800015 	stw	r2,0(r6)
   92234:	1805883a 	mov	r2,r3
   92238:	dfc00317 	ldw	ra,12(sp)
   9223c:	dc400217 	ldw	r17,8(sp)
   92240:	dc000117 	ldw	r16,4(sp)
   92244:	dec00404 	addi	sp,sp,16
   92248:	f800283a 	ret
   9224c:	d9800015 	stw	r6,0(sp)
   92250:	0084e7c0 	call	84e7c <__sinit>
   92254:	d9800017 	ldw	r6,0(sp)
   92258:	30800217 	ldw	r2,8(r6)
   9225c:	10ffffc4 	addi	r3,r2,-1
   92260:	30c00215 	stw	r3,8(r6)
   92264:	183fed0e 	bge	r3,zero,9221c <_putc_r+0x34>
   92268:	30800617 	ldw	r2,24(r6)
   9226c:	18800e16 	blt	r3,r2,922a8 <_putc_r+0xc0>
   92270:	30800017 	ldw	r2,0(r6)
   92274:	14400005 	stb	r17,0(r2)
   92278:	31000017 	ldw	r4,0(r6)
   9227c:	00800284 	movi	r2,10
   92280:	20c00003 	ldbu	r3,0(r4)
   92284:	18800f26 	beq	r3,r2,922c4 <_putc_r+0xdc>
   92288:	20800044 	addi	r2,r4,1
   9228c:	30800015 	stw	r2,0(r6)
   92290:	1805883a 	mov	r2,r3
   92294:	dfc00317 	ldw	ra,12(sp)
   92298:	dc400217 	ldw	r17,8(sp)
   9229c:	dc000117 	ldw	r16,4(sp)
   922a0:	dec00404 	addi	sp,sp,16
   922a4:	f800283a 	ret
   922a8:	8009883a 	mov	r4,r16
   922ac:	880b883a 	mov	r5,r17
   922b0:	dfc00317 	ldw	ra,12(sp)
   922b4:	dc400217 	ldw	r17,8(sp)
   922b8:	dc000117 	ldw	r16,4(sp)
   922bc:	dec00404 	addi	sp,sp,16
   922c0:	00922d01 	jmpi	922d0 <__swbuf_r>
   922c4:	8009883a 	mov	r4,r16
   922c8:	180b883a 	mov	r5,r3
   922cc:	003ff806 	br	922b0 <_putc_r+0xc8>

000922d0 <__swbuf_r>:
   922d0:	defffc04 	addi	sp,sp,-16
   922d4:	dc400215 	stw	r17,8(sp)
   922d8:	dc000115 	stw	r16,4(sp)
   922dc:	dfc00315 	stw	ra,12(sp)
   922e0:	2023883a 	mov	r17,r4
   922e4:	2821883a 	mov	r16,r5
   922e8:	20000226 	beq	r4,zero,922f4 <__swbuf_r+0x24>
   922ec:	20800e17 	ldw	r2,56(r4)
   922f0:	10002f26 	beq	r2,zero,923b0 <__swbuf_r+0xe0>
   922f4:	3080030b 	ldhu	r2,12(r6)
   922f8:	30c00617 	ldw	r3,24(r6)
   922fc:	1080020c 	andi	r2,r2,8
   92300:	30c00215 	stw	r3,8(r6)
   92304:	10002226 	beq	r2,zero,92390 <__swbuf_r+0xc0>
   92308:	30c00417 	ldw	r3,16(r6)
   9230c:	18002026 	beq	r3,zero,92390 <__swbuf_r+0xc0>
   92310:	31000017 	ldw	r4,0(r6)
   92314:	30800517 	ldw	r2,20(r6)
   92318:	20c7c83a 	sub	r3,r4,r3
   9231c:	18802f0e 	bge	r3,r2,923dc <__swbuf_r+0x10c>
   92320:	19400044 	addi	r5,r3,1
   92324:	30800217 	ldw	r2,8(r6)
   92328:	84003fcc 	andi	r16,r16,255
   9232c:	20c00044 	addi	r3,r4,1
   92330:	10bfffc4 	addi	r2,r2,-1
   92334:	30800215 	stw	r2,8(r6)
   92338:	24000005 	stb	r16,0(r4)
   9233c:	30800517 	ldw	r2,20(r6)
   92340:	30c00015 	stw	r3,0(r6)
   92344:	11400c26 	beq	r2,r5,92378 <__swbuf_r+0xa8>
   92348:	3080030b 	ldhu	r2,12(r6)
   9234c:	1080004c 	andi	r2,r2,1
   92350:	1005003a 	cmpeq	r2,r2,zero
   92354:	10000626 	beq	r2,zero,92370 <__swbuf_r+0xa0>
   92358:	8005883a 	mov	r2,r16
   9235c:	dfc00317 	ldw	ra,12(sp)
   92360:	dc400217 	ldw	r17,8(sp)
   92364:	dc000117 	ldw	r16,4(sp)
   92368:	dec00404 	addi	sp,sp,16
   9236c:	f800283a 	ret
   92370:	00800284 	movi	r2,10
   92374:	80bff81e 	bne	r16,r2,92358 <__swbuf_r+0x88>
   92378:	8809883a 	mov	r4,r17
   9237c:	300b883a 	mov	r5,r6
   92380:	0084be40 	call	84be4 <_fflush_r>
   92384:	103ff426 	beq	r2,zero,92358 <__swbuf_r+0x88>
   92388:	043fffc4 	movi	r16,-1
   9238c:	003ff206 	br	92358 <__swbuf_r+0x88>
   92390:	300b883a 	mov	r5,r6
   92394:	8809883a 	mov	r4,r17
   92398:	d9800015 	stw	r6,0(sp)
   9239c:	0088cd00 	call	88cd0 <__swsetup_r>
   923a0:	d9800017 	ldw	r6,0(sp)
   923a4:	1000061e 	bne	r2,zero,923c0 <__swbuf_r+0xf0>
   923a8:	30c00417 	ldw	r3,16(r6)
   923ac:	003fd806 	br	92310 <__swbuf_r+0x40>
   923b0:	d9800015 	stw	r6,0(sp)
   923b4:	0084e7c0 	call	84e7c <__sinit>
   923b8:	d9800017 	ldw	r6,0(sp)
   923bc:	003fcd06 	br	922f4 <__swbuf_r+0x24>
   923c0:	3080030b 	ldhu	r2,12(r6)
   923c4:	00c00244 	movi	r3,9
   923c8:	043fffc4 	movi	r16,-1
   923cc:	10801014 	ori	r2,r2,64
   923d0:	3080030d 	sth	r2,12(r6)
   923d4:	88c00015 	stw	r3,0(r17)
   923d8:	003fdf06 	br	92358 <__swbuf_r+0x88>
   923dc:	300b883a 	mov	r5,r6
   923e0:	8809883a 	mov	r4,r17
   923e4:	d9800015 	stw	r6,0(sp)
   923e8:	0084be40 	call	84be4 <_fflush_r>
   923ec:	d9800017 	ldw	r6,0(sp)
   923f0:	103fe51e 	bne	r2,zero,92388 <__swbuf_r+0xb8>
   923f4:	31000017 	ldw	r4,0(r6)
   923f8:	01400044 	movi	r5,1
   923fc:	003fc906 	br	92324 <__swbuf_r+0x54>

00092400 <__swbuf>:
   92400:	01800274 	movhi	r6,9
   92404:	31932d04 	addi	r6,r6,19636
   92408:	2007883a 	mov	r3,r4
   9240c:	31000017 	ldw	r4,0(r6)
   92410:	280d883a 	mov	r6,r5
   92414:	180b883a 	mov	r5,r3
   92418:	00922d01 	jmpi	922d0 <__swbuf_r>

0009241c <__register_exitproc>:
   9241c:	defffa04 	addi	sp,sp,-24
   92420:	00800274 	movhi	r2,9
   92424:	10932e04 	addi	r2,r2,19640
   92428:	dc000015 	stw	r16,0(sp)
   9242c:	14000017 	ldw	r16,0(r2)
   92430:	dd000415 	stw	r20,16(sp)
   92434:	2829883a 	mov	r20,r5
   92438:	81405217 	ldw	r5,328(r16)
   9243c:	dcc00315 	stw	r19,12(sp)
   92440:	dc800215 	stw	r18,8(sp)
   92444:	dc400115 	stw	r17,4(sp)
   92448:	dfc00515 	stw	ra,20(sp)
   9244c:	2023883a 	mov	r17,r4
   92450:	3027883a 	mov	r19,r6
   92454:	3825883a 	mov	r18,r7
   92458:	28002526 	beq	r5,zero,924f0 <__register_exitproc+0xd4>
   9245c:	29000117 	ldw	r4,4(r5)
   92460:	008007c4 	movi	r2,31
   92464:	11002716 	blt	r2,r4,92504 <__register_exitproc+0xe8>
   92468:	8800101e 	bne	r17,zero,924ac <__register_exitproc+0x90>
   9246c:	2105883a 	add	r2,r4,r4
   92470:	1085883a 	add	r2,r2,r2
   92474:	20c00044 	addi	r3,r4,1
   92478:	1145883a 	add	r2,r2,r5
   9247c:	0009883a 	mov	r4,zero
   92480:	15000215 	stw	r20,8(r2)
   92484:	28c00115 	stw	r3,4(r5)
   92488:	2005883a 	mov	r2,r4
   9248c:	dfc00517 	ldw	ra,20(sp)
   92490:	dd000417 	ldw	r20,16(sp)
   92494:	dcc00317 	ldw	r19,12(sp)
   92498:	dc800217 	ldw	r18,8(sp)
   9249c:	dc400117 	ldw	r17,4(sp)
   924a0:	dc000017 	ldw	r16,0(sp)
   924a4:	dec00604 	addi	sp,sp,24
   924a8:	f800283a 	ret
   924ac:	29802204 	addi	r6,r5,136
   924b0:	00800044 	movi	r2,1
   924b4:	110e983a 	sll	r7,r2,r4
   924b8:	30c04017 	ldw	r3,256(r6)
   924bc:	2105883a 	add	r2,r4,r4
   924c0:	1085883a 	add	r2,r2,r2
   924c4:	1185883a 	add	r2,r2,r6
   924c8:	19c6b03a 	or	r3,r3,r7
   924cc:	14802015 	stw	r18,128(r2)
   924d0:	14c00015 	stw	r19,0(r2)
   924d4:	00800084 	movi	r2,2
   924d8:	30c04015 	stw	r3,256(r6)
   924dc:	88bfe31e 	bne	r17,r2,9246c <__register_exitproc+0x50>
   924e0:	30804117 	ldw	r2,260(r6)
   924e4:	11c4b03a 	or	r2,r2,r7
   924e8:	30804115 	stw	r2,260(r6)
   924ec:	003fdf06 	br	9246c <__register_exitproc+0x50>
   924f0:	00800274 	movhi	r2,9
   924f4:	109a9304 	addi	r2,r2,27212
   924f8:	100b883a 	mov	r5,r2
   924fc:	80805215 	stw	r2,328(r16)
   92500:	003fd606 	br	9245c <__register_exitproc+0x40>
   92504:	00800034 	movhi	r2,0
   92508:	10800004 	addi	r2,r2,0
   9250c:	1000021e 	bne	r2,zero,92518 <__register_exitproc+0xfc>
   92510:	013fffc4 	movi	r4,-1
   92514:	003fdc06 	br	92488 <__register_exitproc+0x6c>
   92518:	01006404 	movi	r4,400
   9251c:	103ee83a 	callr	r2
   92520:	1007883a 	mov	r3,r2
   92524:	103ffa26 	beq	r2,zero,92510 <__register_exitproc+0xf4>
   92528:	80805217 	ldw	r2,328(r16)
   9252c:	180b883a 	mov	r5,r3
   92530:	18000115 	stw	zero,4(r3)
   92534:	18800015 	stw	r2,0(r3)
   92538:	80c05215 	stw	r3,328(r16)
   9253c:	18006215 	stw	zero,392(r3)
   92540:	18006315 	stw	zero,396(r3)
   92544:	0009883a 	mov	r4,zero
   92548:	883fc826 	beq	r17,zero,9246c <__register_exitproc+0x50>
   9254c:	003fd706 	br	924ac <__register_exitproc+0x90>

00092550 <register_fini>:
   92550:	f800283a 	ret

00092554 <__call_exitprocs>:
   92554:	00800274 	movhi	r2,9
   92558:	10932e04 	addi	r2,r2,19640
   9255c:	10800017 	ldw	r2,0(r2)
   92560:	defff304 	addi	sp,sp,-52
   92564:	df000b15 	stw	fp,44(sp)
   92568:	d8800115 	stw	r2,4(sp)
   9256c:	00800034 	movhi	r2,0
   92570:	10800004 	addi	r2,r2,0
   92574:	1005003a 	cmpeq	r2,r2,zero
   92578:	d8800215 	stw	r2,8(sp)
   9257c:	d8800117 	ldw	r2,4(sp)
   92580:	dd400815 	stw	r21,32(sp)
   92584:	dd000715 	stw	r20,28(sp)
   92588:	10805204 	addi	r2,r2,328
   9258c:	dfc00c15 	stw	ra,48(sp)
   92590:	ddc00a15 	stw	r23,40(sp)
   92594:	dd800915 	stw	r22,36(sp)
   92598:	dcc00615 	stw	r19,24(sp)
   9259c:	dc800515 	stw	r18,20(sp)
   925a0:	dc400415 	stw	r17,16(sp)
   925a4:	dc000315 	stw	r16,12(sp)
   925a8:	282b883a 	mov	r21,r5
   925ac:	2039883a 	mov	fp,r4
   925b0:	d8800015 	stw	r2,0(sp)
   925b4:	2829003a 	cmpeq	r20,r5,zero
   925b8:	d8800117 	ldw	r2,4(sp)
   925bc:	14405217 	ldw	r17,328(r2)
   925c0:	88001026 	beq	r17,zero,92604 <__call_exitprocs+0xb0>
   925c4:	ddc00017 	ldw	r23,0(sp)
   925c8:	88800117 	ldw	r2,4(r17)
   925cc:	8c802204 	addi	r18,r17,136
   925d0:	143fffc4 	addi	r16,r2,-1
   925d4:	80000916 	blt	r16,zero,925fc <__call_exitprocs+0xa8>
   925d8:	05bfffc4 	movi	r22,-1
   925dc:	a000151e 	bne	r20,zero,92634 <__call_exitprocs+0xe0>
   925e0:	8409883a 	add	r4,r16,r16
   925e4:	2105883a 	add	r2,r4,r4
   925e8:	1485883a 	add	r2,r2,r18
   925ec:	10c02017 	ldw	r3,128(r2)
   925f0:	a8c01126 	beq	r21,r3,92638 <__call_exitprocs+0xe4>
   925f4:	843fffc4 	addi	r16,r16,-1
   925f8:	85bff81e 	bne	r16,r22,925dc <__call_exitprocs+0x88>
   925fc:	d8800217 	ldw	r2,8(sp)
   92600:	10003126 	beq	r2,zero,926c8 <__call_exitprocs+0x174>
   92604:	dfc00c17 	ldw	ra,48(sp)
   92608:	df000b17 	ldw	fp,44(sp)
   9260c:	ddc00a17 	ldw	r23,40(sp)
   92610:	dd800917 	ldw	r22,36(sp)
   92614:	dd400817 	ldw	r21,32(sp)
   92618:	dd000717 	ldw	r20,28(sp)
   9261c:	dcc00617 	ldw	r19,24(sp)
   92620:	dc800517 	ldw	r18,20(sp)
   92624:	dc400417 	ldw	r17,16(sp)
   92628:	dc000317 	ldw	r16,12(sp)
   9262c:	dec00d04 	addi	sp,sp,52
   92630:	f800283a 	ret
   92634:	8409883a 	add	r4,r16,r16
   92638:	88c00117 	ldw	r3,4(r17)
   9263c:	2105883a 	add	r2,r4,r4
   92640:	1445883a 	add	r2,r2,r17
   92644:	18ffffc4 	addi	r3,r3,-1
   92648:	11800217 	ldw	r6,8(r2)
   9264c:	1c001526 	beq	r3,r16,926a4 <__call_exitprocs+0x150>
   92650:	10000215 	stw	zero,8(r2)
   92654:	303fe726 	beq	r6,zero,925f4 <__call_exitprocs+0xa0>
   92658:	00c00044 	movi	r3,1
   9265c:	1c06983a 	sll	r3,r3,r16
   92660:	90804017 	ldw	r2,256(r18)
   92664:	8cc00117 	ldw	r19,4(r17)
   92668:	1884703a 	and	r2,r3,r2
   9266c:	10001426 	beq	r2,zero,926c0 <__call_exitprocs+0x16c>
   92670:	90804117 	ldw	r2,260(r18)
   92674:	1884703a 	and	r2,r3,r2
   92678:	10000c1e 	bne	r2,zero,926ac <__call_exitprocs+0x158>
   9267c:	2105883a 	add	r2,r4,r4
   92680:	1485883a 	add	r2,r2,r18
   92684:	11400017 	ldw	r5,0(r2)
   92688:	e009883a 	mov	r4,fp
   9268c:	303ee83a 	callr	r6
   92690:	88800117 	ldw	r2,4(r17)
   92694:	98bfc81e 	bne	r19,r2,925b8 <__call_exitprocs+0x64>
   92698:	b8800017 	ldw	r2,0(r23)
   9269c:	147fd526 	beq	r2,r17,925f4 <__call_exitprocs+0xa0>
   926a0:	003fc506 	br	925b8 <__call_exitprocs+0x64>
   926a4:	8c000115 	stw	r16,4(r17)
   926a8:	003fea06 	br	92654 <__call_exitprocs+0x100>
   926ac:	2105883a 	add	r2,r4,r4
   926b0:	1485883a 	add	r2,r2,r18
   926b4:	11000017 	ldw	r4,0(r2)
   926b8:	303ee83a 	callr	r6
   926bc:	003ff406 	br	92690 <__call_exitprocs+0x13c>
   926c0:	303ee83a 	callr	r6
   926c4:	003ff206 	br	92690 <__call_exitprocs+0x13c>
   926c8:	88800117 	ldw	r2,4(r17)
   926cc:	1000081e 	bne	r2,zero,926f0 <__call_exitprocs+0x19c>
   926d0:	89000017 	ldw	r4,0(r17)
   926d4:	20000726 	beq	r4,zero,926f4 <__call_exitprocs+0x1a0>
   926d8:	b9000015 	stw	r4,0(r23)
   926dc:	8809883a 	mov	r4,r17
   926e0:	00000000 	call	0 <__reset-0x80000>
   926e4:	bc400017 	ldw	r17,0(r23)
   926e8:	883fb71e 	bne	r17,zero,925c8 <__call_exitprocs+0x74>
   926ec:	003fc506 	br	92604 <__call_exitprocs+0xb0>
   926f0:	89000017 	ldw	r4,0(r17)
   926f4:	882f883a 	mov	r23,r17
   926f8:	2023883a 	mov	r17,r4
   926fc:	883fb21e 	bne	r17,zero,925c8 <__call_exitprocs+0x74>
   92700:	003fc006 	br	92604 <__call_exitprocs+0xb0>

00092704 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   92704:	defffd04 	addi	sp,sp,-12
   92708:	df000215 	stw	fp,8(sp)
   9270c:	df000204 	addi	fp,sp,8
   92710:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   92714:	e0bfff17 	ldw	r2,-4(fp)
   92718:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   9271c:	e0bffe17 	ldw	r2,-8(fp)
   92720:	1005003a 	cmpeq	r2,r2,zero
   92724:	1000021e 	bne	r2,zero,92730 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   92728:	002af070 	cmpltui	zero,zero,43969
   9272c:	00000106 	br	92734 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   92730:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   92734:	e037883a 	mov	sp,fp
   92738:	df000017 	ldw	fp,0(sp)
   9273c:	dec00104 	addi	sp,sp,4
   92740:	f800283a 	ret

00092744 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   92744:	defffd04 	addi	sp,sp,-12
   92748:	dfc00215 	stw	ra,8(sp)
   9274c:	df000115 	stw	fp,4(sp)
   92750:	df000104 	addi	fp,sp,4
   92754:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   92758:	e13fff17 	ldw	r4,-4(fp)
   9275c:	00927040 	call	92704 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   92760:	003fff06 	br	92760 <_exit+0x1c>
   92764:	00092550 	cmplti	zero,zero,9365
