
TestEllerEtEllerAndet.elf:     file format elf32-littlenios2
TestEllerEtEllerAndet.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0001476c memsz 0x0001476c flags r-x
    LOAD off    0x0001578c vaddr 0x0009478c paddr 0x00096338 align 2**12
         filesz 0x00001bac memsz 0x00001bac flags rw-
    LOAD off    0x00017ee4 vaddr 0x00097ee4 paddr 0x00097ee4 align 2**12
         filesz 0x00000000 memsz 0x000003f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013dec  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007ec  00093fa0  00093fa0  00014fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bac  0009478c  00096338  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003f4  00097ee4  00097ee4  00017ee4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00017338  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001158  00000000  00000000  00017360  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001a3f  00000000  00000000  000184b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00034aed  00000000  00000000  00019ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b24f  00000000  00000000  0004e9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001c5ba  00000000  00000000  00059c33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022d4  00000000  00000000  000761f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002d98  00000000  00000000  000784c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012536  00000000  00000000  0007b25c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0008d794  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ba0  00000000  00000000  0008d7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00091f89  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00091f8c  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00091f91  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00091f92  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00091f96  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00091f9a  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00091f9e  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00091fa9  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00091fb4  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00091fbf  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000004b  00000000  00000000  00091fca  2**0
                  CONTENTS, READONLY
 28 .jdi          0000431f  00000000  00000000  00092015  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0004cb97  00000000  00000000  00096334  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
00093fa0 l    d  .rodata	00000000 .rodata
0009478c l    d  .rwdata	00000000 .rwdata
00097ee4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 test.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00080a54 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0009478c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00082c68 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00083260 l     F .text	00000058 __sprint_r
000941b2 l     O .rodata	00000010 blanks.3452
000941a2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
000941ca l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
000942ed l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00086b4c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00088574 l     F .text	00000058 std
00088680 l     F .text	00000008 __fp_lock
00088688 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00096308 l     O .rwdata	00000004 charset
00094490 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000945d8 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strtod.c
0008a794 l     F .text	00000048 match
00094fb4 l     O .rwdata	00000014 fpi.1950
000945f4 l     O .rodata	00000028 tinytens
00094fa0 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0008cbd4 l     F .text	00000024 htinit
0008cc60 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0008d50c l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0008e79c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00090354 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000903b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000904b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000905dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000906bc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0009081c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00090928 l     F .text	000000f8 alt_file_locked
00090bac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00090d30 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00096324 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00091018 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00095170 l     O .rwdata	00001060 jtag_uart_0
000961d0 l     O .rwdata	00000120 lcd_0
00091148 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00091388 l     F .text	00000228 altera_avalon_jtag_uart_irq
000915b0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00096328 l     O .rwdata	00000004 colstart
00091c2c l     F .text	000000b8 lcd_write_command
00091ce4 l     F .text	000000d4 lcd_write_data
00091db8 l     F .text	000000d8 lcd_clear_screen
00091e90 l     F .text	00000214 lcd_repaint_screen
000920a4 l     F .text	000000e0 lcd_scroll_up
00092184 l     F .text	000002e4 lcd_handle_escape
000929a4 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00092c04 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000931ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00093880 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00093d88 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00093f3c l     F .text	00000040 alt_sim_halt
00089890 g     F .text	00000094 _mprec_log10
0008997c g     F .text	00000088 __any_on
00089114 g     F .text	00000070 _isatty_r
000945b0 g     O .rodata	00000028 __mprec_tinytens
0009087c g     F .text	0000006c alt_main
000823fc g     F .text	000000a0 _puts_r
00098048 g     O .bss	00000100 alt_irq
00089274 g     F .text	00000078 _lseek_r
00096338 g       *ABS*	00000000 __flash_rwdata_start
00088868 g     F .text	000000a0 __sflags
0008f2bc g     F .text	00000088 __eqdf2
000982d8 g       *ABS*	00000000 __alt_heap_start
00082384 g     F .text	00000044 printf
00082d78 g     F .text	00000068 __sseek
000885dc g     F .text	000000a4 __sinit
000801f0 g     F .text	000000bc setInputMatrices
000891d4 g     F .text	00000084 _setlocale_r
000886dc g     F .text	0000009c __sfmoreglue
0008c9cc g     F .text	0000001c ungetc
00090908 g     F .text	00000020 __malloc_unlock
0008a7dc g     F .text	000015cc _strtod_r
00097f10 g     O .bss	00000004 altera_avalon_timer_ts_freq
0008222c g     F .text	000000e0 memmove
000886cc g     F .text	00000010 _cleanup
00089a04 g     F .text	000000bc _Balloc
0008f3cc g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
000811d8 g     F .text	00000074 _fstat_r
00097ee4 g     O .bss	00000004 errno
00086828 g     F .text	00000024 __svfscanf
0008fbb4 g     F .text	0000002c __make_fp
00097f04 g     O .bss	00000004 alt_argv
0009e2f0 g       *ABS*	00000000 _gp
00090ec4 g     F .text	00000030 usleep
00094ff0 g     O .rwdata	00000180 alt_fd_list
00093314 g     F .text	00000094 alt_find_dev
0008218c g     F .text	000000a0 memcpy
0008d558 g     F .text	00000248 __hexnan
000886c0 g     F .text	0000000c _cleanup_r
0008f5ec g     F .text	000000f8 __floatsidf
00093958 g     F .text	00000078 alt_io_redirect
0008f4dc g     F .text	00000088 __ltdf2
00093fa0 g       *ABS*	00000000 __DTOR_END__
0008249c g     F .text	00000014 puts
0008936c g     F .text	00000040 mbrtowc
00093b74 g     F .text	00000020 altera_nios2_irq_init
0008684c g     F .text	00000068 _vfscanf_r
000897e0 g     F .text	000000b0 __ratio
000917c8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000823c8 g     F .text	00000034 _printf_r
00080b90 g     F .text	00000008 __udivsi3
00090518 g     F .text	000000c4 isatty
00089184 g     F .text	0000002c iswspace
000944c0 g     O .rodata	000000c8 __mprec_tens
000891b0 g     F .text	00000008 __locale_charset
0008d8c4 g     F .text	000000a4 __fixunsdfsi
00097ee8 g     O .bss	00000004 __malloc_top_pad
0008c440 g     F .text	00000024 strtoul
00096304 g     O .rwdata	00000004 __mb_cur_max
000891b8 g     F .text	0000000c _localeconv_r
0008c464 g     F .text	000002f0 _strtoull_r
0008a168 g     F .text	0000003c __i2b
0008124c g     F .text	0000049c __sfvwrite_r
00082c84 g     F .text	00000070 _sbrk_r
0008a510 g     F .text	00000078 _read_r
00094f94 g     O .rwdata	0000000c __lc_ctype
0009631c g     O .rwdata	00000004 alt_max_fd
0008fef4 g     F .text	00000138 __unpack_d
0008cab0 g     F .text	00000110 _fclose_r
00088540 g     F .text	00000034 fflush
00097eec g     O .bss	00000004 __malloc_max_sbrked_mem
0008ec2c g     F .text	00000074 __adddf3
0008e634 g     F .text	00000078 __nesf2
000896c0 g     F .text	00000120 __b2d
0008dfd4 g     F .text	00000660 __umoddi3
00090728 g     F .text	000000f4 lseek
000962f4 g     O .rwdata	00000004 _global_impure_ptr
000824b0 g     F .text	000005f4 _realloc_r
000982d8 g       *ABS*	00000000 __bss_end
00093788 g     F .text	000000f8 alt_iic_isr_register
00093a68 g     F .text	0000010c alt_tick
00097f48 g     O .bss	00000100 __hexdig
0008d968 g     F .text	0000066c __udivdi3
00094588 g     O .rodata	00000028 __mprec_bigtens
0008a3f0 g     F .text	00000120 __s2b
0008f830 g     F .text	00000194 __floatunsidf
000895e0 g     F .text	00000060 __mcmp
00096300 g     O .rwdata	00000004 __ctype_ptr
000886a8 g     F .text	00000018 __fp_lock_all
00093740 g     F .text	00000048 alt_ic_irq_enabled
000939d0 g     F .text	00000098 alt_alarm_stop
0008323c g     F .text	00000024 strtol
00097f14 g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000c8 alt_irq_handler
00094fc8 g     O .rwdata	00000028 alt_dev_null
0008fa44 g     F .text	000000c8 __unpack_f
0009311c g     F .text	0000001c alt_dcache_flush_all
000894ac g     F .text	00000070 __hi0bits
0008f6e4 g     F .text	000000d8 __fixdfsi
0008becc g     F .text	0000001c strtod
00096338 g       *ABS*	00000000 __ram_rwdata_end
00096314 g     O .rwdata	00000008 alt_dev_list
00090ef4 g     F .text	00000124 write
00092e44 g     F .text	00000028 alt_timestamp_freq
0008e6ac g     F .text	00000078 __gtsf2
0009478c g       *ABS*	00000000 __ram_rodata_end
000903e0 g     F .text	000000d8 fstat
0008f564 g     F .text	00000088 __ledf2
0008a2d0 g     F .text	00000120 __pow5mult
00097ef4 g     O .bss	00000004 __nlocale_changed
00080b98 g     F .text	00000008 __umodsi3
00082cf4 g     F .text	00000034 _scanf_r
000982d8 g       *ABS*	00000000 end
000900f4 g     F .text	00000160 __pack_f
00092468 g     F .text	0000053c altera_avalon_lcd_16207_write
000811b4 g     F .text	00000024 fseek
000912c8 g     F .text	000000c0 altera_avalon_jtag_uart_init
00093f9c g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
00092c74 g     F .text	00000090 alt_avalon_timer_sc_init
0008f9c4 g     F .text	00000080 __clzsi2
000919ec g     F .text	00000240 altera_avalon_jtag_uart_write
000885cc g     F .text	00000004 __sfp_lock_acquire
000820a8 g     F .text	000000e4 memchr
000832b8 g     F .text	00001ec4 ___vfprintf_internal_r
0008a734 g     F .text	00000060 _sprintf_r
00088c80 g     F .text	00000314 _free_r
00093d8c g     F .text	000001b0 __call_exitprocs
00097ef8 g     O .bss	00000004 __mlocale_changed
000962fc g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000003c _start
00097f18 g     O .bss	00000004 _alt_tick_rate
0008bee8 g     F .text	00000318 _strtoll_r
00089dc8 g     F .text	0000014c __lshift
00097f1c g     O .bss	00000004 _alt_nticks
00090c0c g     F .text	00000124 read
000910ac g     F .text	0000009c alt_sys_init
0008230c g     F .text	00000078 _open_r
00093c54 g     F .text	00000134 __register_exitproc
00089f14 g     F .text	00000254 __multiply
00091660 g     F .text	00000074 altera_avalon_jtag_uart_close
00080ba0 g     F .text	00000038 __mulsi3
0009478c g       *ABS*	00000000 __ram_rwdata_start
00093fa0 g       *ABS*	00000000 __ram_rodata_start
00097f20 g     O .bss	00000028 __malloc_current_mallinfo
00089ac0 g     F .text	0000017c __d2b
00091180 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0008c200 g     F .text	00000240 _strtoul_r
000934c8 g     F .text	000000d0 alt_get_fd
00092fc0 g     F .text	0000015c alt_busy_sleep
0009002c g     F .text	000000c8 __fpcmp_parts_d
00086adc g     F .text	00000070 _close_r
00093be0 g     F .text	00000074 memcmp
00091230 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000982d8 g       *ABS*	00000000 __alt_stack_base
00091278 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000816e8 g     F .text	000000ac _fwrite_r
000869a0 g     F .text	0000013c __swsetup_r
0008f064 g     F .text	00000258 __divdf3
00088778 g     F .text	000000f0 __sfp
00089924 g     F .text	00000058 __copybits
00094b8c g     O .rwdata	00000408 __malloc_av_
000885d8 g     F .text	00000004 __sinit_lock_release
0008eca0 g     F .text	000003c4 __muldf3
00082e5c g     F .text	00000060 __sread
00088b14 g     F .text	00000040 fread
000933a8 g     F .text	00000120 alt_find_file
00093138 g     F .text	000000b4 alt_dev_llist_insert
000908e8 g     F .text	00000020 __malloc_lock
00090e08 g     F .text	000000bc sbrk
00088344 g     F .text	000001fc _fflush_r
0008c9e8 g     F .text	000000c8 _calloc_r
00080ccc g     F .text	0000001c fopen
00097ee4 g       *ABS*	00000000 __bss_start
000893ec g     F .text	00000098 memset
0008064c g     F .text	00000378 main
00097f08 g     O .bss	00000004 alt_envp
00097ef0 g     O .bss	00000004 __malloc_max_total_mem
000911d8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0008e724 g     F .text	00000078 __ltsf2
00088908 g     F .text	0000020c _fread_r
00092a70 g     F .text	0000013c altera_avalon_lcd_16207_init
00082d70 g     F .text	00000008 __sclose
00100000 g       *ABS*	00000000 __alt_heap_limit
0008cbc0 g     F .text	00000014 fclose
0008f7bc g     F .text	00000074 __truncdfsf2
00082fec g     F .text	00000250 _strtol_r
00092d04 g     F .text	000000a4 alt_timestamp_start
00098148 g     O .bss	00000190 _atexit0
00086d90 g     F .text	000015b4 _dtoa_r
00081968 g     F .text	00000740 _malloc_r
00096320 g     O .rwdata	00000004 alt_errno
0008c754 g     F .text	000000dc __submore
0008905c g     F .text	000000b8 _fwalk
000893ac g     F .text	00000040 _mbtowc_r
00080ad0 g     F .text	00000060 __divsi3
00094638 g     O .rodata	00000014 __thenan_df
00088b54 g     F .text	0000012c _malloc_trim_r
00093fa0 g       *ABS*	00000000 __CTOR_END__
00082ebc g     F .text	000000bc strcmp
00093fa0 g       *ABS*	00000000 __flash_rodata_start
00093fa0 g       *ABS*	00000000 __DTOR_LIST__
0008f344 g     F .text	00000088 __nedf2
00080000 g       *ABS*	00000000 __alt_mem_sram_0
00091078 g     F .text	00000034 alt_irq_init
00090d90 g     F .text	00000078 alt_release_fd
0008a6c0 g     F .text	00000074 sprintf
0009464c g     O .rodata	00000100 __clz_tab
00097efc g     O .bss	00000004 _PathLocale
0008bda8 g     F .text	00000124 strtof
00093b94 g     F .text	00000014 atexit
00086928 g     F .text	00000078 _write_r
00089258 g     F .text	0000001c setlocale
00082d28 g     F .text	00000048 scanf
0008a6b8 g     F .text	00000008 nanf
000962f0 g     O .rwdata	00000004 _impure_ptr
00097f00 g     O .bss	00000004 alt_argc
000892ec g     F .text	00000080 _mbrtowc_r
00097f0c g     O .bss	00000004 altera_avalon_timer_ts_base
000932b0 g     F .text	00000064 _do_dtors
00080d78 g     F .text	0000043c _fseek_r
00082aa4 g     F .text	000001c4 __srefill_r
00080020 g       .exceptions	00000000 alt_irq_entry
00089640 g     F .text	00000080 __ulp
0008a588 g     F .text	00000040 __isinfd
00088690 g     F .text	00000018 __fp_unlock_all
00092bac g     F .text	00000058 altera_avalon_lcd_16207_write_fd
0009630c g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
000891c4 g     F .text	00000010 localeconv
00092da8 g     F .text	0000009c alt_timestamp
000935b4 g     F .text	00000050 alt_ic_isr_register
00081794 g     F .text	00000040 fwrite
0008cbf8 g     F .text	00000068 __hexdig_init
00096338 g       *ABS*	00000000 _edata
000982d8 g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
000868b4 g     F .text	00000074 vfscanf
000916d4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00080ce8 g     F .text	00000074 _fputs_r
000936a0 g     F .text	000000a0 alt_ic_irq_disable
00082de0 g     F .text	0000007c __swrite
000962f8 g     O .rwdata	00000004 __malloc_trim_threshold
0008057c g     F .text	000000d0 multiMatrixHard
00093ba8 g     F .text	00000038 exit
00088f94 g     F .text	000000c8 _fwalk_reent
00089c3c g     F .text	0000018c __mdiff
00080b30 g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000802ac g     F .text	00000164 displayMatrix
000885d0 g     F .text	00000004 __sfp_lock_release
0008a5f8 g     F .text	000000c0 __sccl
000941ec g     O .rodata	00000101 _ctype_
0008fb0c g     F .text	000000a8 __fpcmp_parts_f
00080bd8 g     F .text	000000f4 _fopen_r
00093f7c g     F .text	00000020 _exit
0008a5c8 g     F .text	00000030 __isnand
00092e6c g     F .text	00000154 alt_alarm_start
0008d7a0 g     F .text	00000124 __muldi3
000817d4 g     F .text	00000194 __smakebuf_r
00082f78 g     F .text	00000074 strlen
00090a20 g     F .text	0000018c open
0008f454 g     F .text	00000088 __gedf2
0008cd10 g     F .text	000007fc __gethex
00093598 g     F .text	0000001c alt_icache_flush_all
00080d5c g     F .text	0000001c fputs
0009632c g     O .rwdata	00000004 alt_priority_mask
00093604 g     F .text	0000009c alt_ic_irq_enable
0008517c g     F .text	00000024 __vfprintf_internal
0008ebac g     F .text	00000080 __subdf3
0008951c g     F .text	000000c4 __lo0bits
000851a0 g     F .text	00001688 __svfscanf_r
00096330 g     O .rwdata	00000008 alt_alarm_list
00080410 g     F .text	0000016c multiMatrixSoft
0008c830 g     F .text	0000019c _ungetc_r
0009324c g     F .text	00000064 _do_ctors
00090254 g     F .text	00000100 close
000809c4 g     F .text	00000090 BSDConverter
0009063c g     F .text	00000080 alt_load
0008fbe0 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
000885d4 g     F .text	00000004 __sinit_lock_acquire
0008a1a4 g     F .text	0000012c __multadd
00089484 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406d14 	ori	at,at,436
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c002b4 	movhi	r3,10
   80134:	18e01204 	addi	r3,r3,-32696
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c002b4 	movhi	r3,10
   8014c:	18e01204 	addi	r3,r3,-32696
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801c0:	d6b8bc14 	ori	gp,gp,58096
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801c8:	109fb914 	ori	r2,r2,32484

    movhi r3, %hi(__bss_end)
   801cc:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801d0:	18e0b614 	ori	r3,r3,33496

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	009063c0 	call	9063c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	009087c0 	call	9087c <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <setInputMatrices>:
void multiMatrixSoft(VectorArray A,VectorArray B, VectorArray P);
void multiMatrixHard(VectorArray A,VectorArray B, VectorArray P);
int BSDConverter(unsigned char input);

void setInputMatrices(VectorArray A,VectorArray B)
{
   801f0:	defffd04 	addi	sp,sp,-12
   801f4:	df000215 	stw	fp,8(sp)
   801f8:	df000204 	addi	fp,sp,8
   801fc:	e13ffe15 	stw	r4,-8(fp)
   80200:	e17fff15 	stw	r5,-4(fp)
	A[0].vect = 0x04030201;
   80204:	e0fffe17 	ldw	r3,-8(fp)
   80208:	008100f4 	movhi	r2,1027
   8020c:	10808044 	addi	r2,r2,513
   80210:	18800015 	stw	r2,0(r3)
	B[0].vect = 0x01010101;
   80214:	e0ffff17 	ldw	r3,-4(fp)
   80218:	00804074 	movhi	r2,257
   8021c:	10804044 	addi	r2,r2,257
   80220:	18800015 	stw	r2,0(r3)
	A[1].vect = 0x08070605;
   80224:	e0bffe17 	ldw	r2,-8(fp)
   80228:	10c00104 	addi	r3,r2,4
   8022c:	008201f4 	movhi	r2,2055
   80230:	10818144 	addi	r2,r2,1541
   80234:	18800015 	stw	r2,0(r3)
	B[1].vect = 0x02020202;
   80238:	e0bfff17 	ldw	r2,-4(fp)
   8023c:	10c00104 	addi	r3,r2,4
   80240:	008080b4 	movhi	r2,514
   80244:	10808084 	addi	r2,r2,514
   80248:	18800015 	stw	r2,0(r3)
	A[2].vect = 0x0C0B0A09;
   8024c:	e0bffe17 	ldw	r2,-8(fp)
   80250:	10c00204 	addi	r3,r2,8
   80254:	008302f4 	movhi	r2,3083
   80258:	10828244 	addi	r2,r2,2569
   8025c:	18800015 	stw	r2,0(r3)
	B[2].vect = 0x03030303;
   80260:	e0bfff17 	ldw	r2,-4(fp)
   80264:	10c00204 	addi	r3,r2,8
   80268:	0080c0f4 	movhi	r2,771
   8026c:	1080c0c4 	addi	r2,r2,771
   80270:	18800015 	stw	r2,0(r3)
	A[3].vect = 0x100F0E0D;
   80274:	e0bffe17 	ldw	r2,-8(fp)
   80278:	10c00304 	addi	r3,r2,12
   8027c:	008403f4 	movhi	r2,4111
   80280:	10838344 	addi	r2,r2,3597
   80284:	18800015 	stw	r2,0(r3)
	B[3].vect = 0x04040404;
   80288:	e0bfff17 	ldw	r2,-4(fp)
   8028c:	10c00304 	addi	r3,r2,12
   80290:	00810134 	movhi	r2,1028
   80294:	10810104 	addi	r2,r2,1028
   80298:	18800015 	stw	r2,0(r3)
}
   8029c:	e037883a 	mov	sp,fp
   802a0:	df000017 	ldw	fp,0(sp)
   802a4:	dec00104 	addi	sp,sp,4
   802a8:	f800283a 	ret

000802ac <displayMatrix>:

void displayMatrix(VectorArray input)
{
   802ac:	defffc04 	addi	sp,sp,-16
   802b0:	dfc00315 	stw	ra,12(sp)
   802b4:	df000215 	stw	fp,8(sp)
   802b8:	df000204 	addi	fp,sp,8
   802bc:	e13fff15 	stw	r4,-4(fp)
	printf("Matrix :\n");
   802c0:	01000274 	movhi	r4,9
   802c4:	210fe804 	addi	r4,r4,16288
   802c8:	008249c0 	call	8249c <puts>
	printf("%2d %2d %2d %2d\n", input[0].comp[0],
   802cc:	e0bfff17 	ldw	r2,-4(fp)
   802d0:	10800003 	ldbu	r2,0(r2)
   802d4:	11403fcc 	andi	r5,r2,255
   802d8:	e0bfff17 	ldw	r2,-4(fp)
   802dc:	10800043 	ldbu	r2,1(r2)
   802e0:	11803fcc 	andi	r6,r2,255
   802e4:	e0bfff17 	ldw	r2,-4(fp)
   802e8:	10800083 	ldbu	r2,2(r2)
   802ec:	11c03fcc 	andi	r7,r2,255
   802f0:	e0bfff17 	ldw	r2,-4(fp)
   802f4:	108000c3 	ldbu	r2,3(r2)
   802f8:	10803fcc 	andi	r2,r2,255
   802fc:	d8800015 	stw	r2,0(sp)
   80300:	01000274 	movhi	r4,9
   80304:	210feb04 	addi	r4,r4,16300
   80308:	00823840 	call	82384 <printf>
			                	input[0].comp[1],
			                	input[0].comp[2],
			                	input[0].comp[3]);
	printf("%2d %2d %2d %2d\n", input[1].comp[0],
   8030c:	e0bfff17 	ldw	r2,-4(fp)
   80310:	10800104 	addi	r2,r2,4
   80314:	10800003 	ldbu	r2,0(r2)
   80318:	11403fcc 	andi	r5,r2,255
   8031c:	e0bfff17 	ldw	r2,-4(fp)
   80320:	10800104 	addi	r2,r2,4
   80324:	10800043 	ldbu	r2,1(r2)
   80328:	11803fcc 	andi	r6,r2,255
   8032c:	e0bfff17 	ldw	r2,-4(fp)
   80330:	10800104 	addi	r2,r2,4
   80334:	10800083 	ldbu	r2,2(r2)
   80338:	11c03fcc 	andi	r7,r2,255
   8033c:	e0bfff17 	ldw	r2,-4(fp)
   80340:	10800104 	addi	r2,r2,4
   80344:	108000c3 	ldbu	r2,3(r2)
   80348:	10803fcc 	andi	r2,r2,255
   8034c:	d8800015 	stw	r2,0(sp)
   80350:	01000274 	movhi	r4,9
   80354:	210feb04 	addi	r4,r4,16300
   80358:	00823840 	call	82384 <printf>
			                	input[1].comp[1],
			                	input[1].comp[2],
			                	input[1].comp[3]);
	printf("%2d %2d %2d %2d\n", input[2].comp[0],
   8035c:	e0bfff17 	ldw	r2,-4(fp)
   80360:	10800204 	addi	r2,r2,8
   80364:	10800003 	ldbu	r2,0(r2)
   80368:	11403fcc 	andi	r5,r2,255
   8036c:	e0bfff17 	ldw	r2,-4(fp)
   80370:	10800204 	addi	r2,r2,8
   80374:	10800043 	ldbu	r2,1(r2)
   80378:	11803fcc 	andi	r6,r2,255
   8037c:	e0bfff17 	ldw	r2,-4(fp)
   80380:	10800204 	addi	r2,r2,8
   80384:	10800083 	ldbu	r2,2(r2)
   80388:	11c03fcc 	andi	r7,r2,255
   8038c:	e0bfff17 	ldw	r2,-4(fp)
   80390:	10800204 	addi	r2,r2,8
   80394:	108000c3 	ldbu	r2,3(r2)
   80398:	10803fcc 	andi	r2,r2,255
   8039c:	d8800015 	stw	r2,0(sp)
   803a0:	01000274 	movhi	r4,9
   803a4:	210feb04 	addi	r4,r4,16300
   803a8:	00823840 	call	82384 <printf>
			                	input[2].comp[1],
			                	input[2].comp[2],
			                	input[2].comp[3]);
	printf("%2d %2d %2d %2d\n", input[3].comp[0],
   803ac:	e0bfff17 	ldw	r2,-4(fp)
   803b0:	10800304 	addi	r2,r2,12
   803b4:	10800003 	ldbu	r2,0(r2)
   803b8:	11403fcc 	andi	r5,r2,255
   803bc:	e0bfff17 	ldw	r2,-4(fp)
   803c0:	10800304 	addi	r2,r2,12
   803c4:	10800043 	ldbu	r2,1(r2)
   803c8:	11803fcc 	andi	r6,r2,255
   803cc:	e0bfff17 	ldw	r2,-4(fp)
   803d0:	10800304 	addi	r2,r2,12
   803d4:	10800083 	ldbu	r2,2(r2)
   803d8:	11c03fcc 	andi	r7,r2,255
   803dc:	e0bfff17 	ldw	r2,-4(fp)
   803e0:	10800304 	addi	r2,r2,12
   803e4:	108000c3 	ldbu	r2,3(r2)
   803e8:	10803fcc 	andi	r2,r2,255
   803ec:	d8800015 	stw	r2,0(sp)
   803f0:	01000274 	movhi	r4,9
   803f4:	210feb04 	addi	r4,r4,16300
   803f8:	00823840 	call	82384 <printf>
			                	input[3].comp[1],
			                	input[3].comp[2],
			                	input[3].comp[3]);

}
   803fc:	e037883a 	mov	sp,fp
   80400:	dfc00117 	ldw	ra,4(sp)
   80404:	df000017 	ldw	fp,0(sp)
   80408:	dec00204 	addi	sp,sp,8
   8040c:	f800283a 	ret

00080410 <multiMatrixSoft>:

void multiMatrixSoft(VectorArray A,VectorArray B, VectorArray P)
{
   80410:	defff504 	addi	sp,sp,-44
   80414:	dfc00a15 	stw	ra,40(sp)
   80418:	df000915 	stw	fp,36(sp)
   8041c:	dc800815 	stw	r18,32(sp)
   80420:	dc400715 	stw	r17,28(sp)
   80424:	dc000615 	stw	r16,24(sp)
   80428:	df000604 	addi	fp,sp,24
   8042c:	e13ffd15 	stw	r4,-12(fp)
   80430:	e17ffe15 	stw	r5,-8(fp)
   80434:	e1bfff15 	stw	r6,-4(fp)
	int row, col, k;
	for (row = 0; row < MSIZE; row++)
   80438:	e03ffc15 	stw	zero,-16(fp)
   8043c:	00004406 	br	80550 <multiMatrixSoft+0x140>
	{
		for (col = 0; col < MSIZE; col++)
   80440:	e03ffb15 	stw	zero,-20(fp)
   80444:	00003c06 	br	80538 <multiMatrixSoft+0x128>
		{
			P[row].comp[col] = 0;
   80448:	e0bffc17 	ldw	r2,-16(fp)
   8044c:	1085883a 	add	r2,r2,r2
   80450:	1085883a 	add	r2,r2,r2
   80454:	1007883a 	mov	r3,r2
   80458:	e0bfff17 	ldw	r2,-4(fp)
   8045c:	1887883a 	add	r3,r3,r2
   80460:	e0bffb17 	ldw	r2,-20(fp)
   80464:	1885883a 	add	r2,r3,r2
   80468:	10000005 	stb	zero,0(r2)
			for (k = 0; k < MSIZE; k++)
   8046c:	e03ffa15 	stw	zero,-24(fp)
   80470:	00002b06 	br	80520 <multiMatrixSoft+0x110>
				P[row].comp[col] += A[row].comp[k] * B[col].comp[k];
   80474:	e0bffc17 	ldw	r2,-16(fp)
   80478:	1085883a 	add	r2,r2,r2
   8047c:	1085883a 	add	r2,r2,r2
   80480:	1007883a 	mov	r3,r2
   80484:	e0bfff17 	ldw	r2,-4(fp)
   80488:	18a1883a 	add	r16,r3,r2
   8048c:	e47ffb17 	ldw	r17,-20(fp)
   80490:	e0bffc17 	ldw	r2,-16(fp)
   80494:	1085883a 	add	r2,r2,r2
   80498:	1085883a 	add	r2,r2,r2
   8049c:	1007883a 	mov	r3,r2
   804a0:	e0bfff17 	ldw	r2,-4(fp)
   804a4:	1887883a 	add	r3,r3,r2
   804a8:	e0bffb17 	ldw	r2,-20(fp)
   804ac:	1885883a 	add	r2,r3,r2
   804b0:	14800003 	ldbu	r18,0(r2)
   804b4:	e0bffc17 	ldw	r2,-16(fp)
   804b8:	1085883a 	add	r2,r2,r2
   804bc:	1085883a 	add	r2,r2,r2
   804c0:	1007883a 	mov	r3,r2
   804c4:	e0bffd17 	ldw	r2,-12(fp)
   804c8:	1887883a 	add	r3,r3,r2
   804cc:	e0bffa17 	ldw	r2,-24(fp)
   804d0:	1885883a 	add	r2,r3,r2
   804d4:	11000003 	ldbu	r4,0(r2)
   804d8:	e0bffb17 	ldw	r2,-20(fp)
   804dc:	1085883a 	add	r2,r2,r2
   804e0:	1085883a 	add	r2,r2,r2
   804e4:	1007883a 	mov	r3,r2
   804e8:	e0bffe17 	ldw	r2,-8(fp)
   804ec:	1887883a 	add	r3,r3,r2
   804f0:	e0bffa17 	ldw	r2,-24(fp)
   804f4:	1885883a 	add	r2,r3,r2
   804f8:	10800003 	ldbu	r2,0(r2)
   804fc:	100b883a 	mov	r5,r2
   80500:	0080ba00 	call	80ba0 <__mulsi3>
   80504:	9085883a 	add	r2,r18,r2
   80508:	1007883a 	mov	r3,r2
   8050c:	8445883a 	add	r2,r16,r17
   80510:	10c00005 	stb	r3,0(r2)
	for (row = 0; row < MSIZE; row++)
	{
		for (col = 0; col < MSIZE; col++)
		{
			P[row].comp[col] = 0;
			for (k = 0; k < MSIZE; k++)
   80514:	e0bffa17 	ldw	r2,-24(fp)
   80518:	10800044 	addi	r2,r2,1
   8051c:	e0bffa15 	stw	r2,-24(fp)
   80520:	e0bffa17 	ldw	r2,-24(fp)
   80524:	10800110 	cmplti	r2,r2,4
   80528:	103fd21e 	bne	r2,zero,80474 <multiMatrixSoft+0x64>
void multiMatrixSoft(VectorArray A,VectorArray B, VectorArray P)
{
	int row, col, k;
	for (row = 0; row < MSIZE; row++)
	{
		for (col = 0; col < MSIZE; col++)
   8052c:	e0bffb17 	ldw	r2,-20(fp)
   80530:	10800044 	addi	r2,r2,1
   80534:	e0bffb15 	stw	r2,-20(fp)
   80538:	e0bffb17 	ldw	r2,-20(fp)
   8053c:	10800110 	cmplti	r2,r2,4
   80540:	103fc11e 	bne	r2,zero,80448 <multiMatrixSoft+0x38>
}

void multiMatrixSoft(VectorArray A,VectorArray B, VectorArray P)
{
	int row, col, k;
	for (row = 0; row < MSIZE; row++)
   80544:	e0bffc17 	ldw	r2,-16(fp)
   80548:	10800044 	addi	r2,r2,1
   8054c:	e0bffc15 	stw	r2,-16(fp)
   80550:	e0bffc17 	ldw	r2,-16(fp)
   80554:	10800110 	cmplti	r2,r2,4
   80558:	103fb91e 	bne	r2,zero,80440 <multiMatrixSoft+0x30>
			for (k = 0; k < MSIZE; k++)
				P[row].comp[col] += A[row].comp[k] * B[col].comp[k];
		}
	}

}
   8055c:	e037883a 	mov	sp,fp
   80560:	dfc00417 	ldw	ra,16(sp)
   80564:	df000317 	ldw	fp,12(sp)
   80568:	dc800217 	ldw	r18,8(sp)
   8056c:	dc400117 	ldw	r17,4(sp)
   80570:	dc000017 	ldw	r16,0(sp)
   80574:	dec00504 	addi	sp,sp,20
   80578:	f800283a 	ret

0008057c <multiMatrixHard>:

void multiMatrixHard(VectorArray A,VectorArray B, VectorArray P)
{
   8057c:	defff904 	addi	sp,sp,-28
   80580:	df000615 	stw	fp,24(sp)
   80584:	df000604 	addi	fp,sp,24
   80588:	e13ffd15 	stw	r4,-12(fp)
   8058c:	e17ffe15 	stw	r5,-8(fp)
   80590:	e1bfff15 	stw	r6,-4(fp)
	int row, col, k;
	for (row = 0; row < MSIZE; row++)
   80594:	e03ffc15 	stw	zero,-16(fp)
   80598:	00002506 	br	80630 <multiMatrixHard+0xb4>
	{
		for (col = 0; col < MSIZE; col++)
   8059c:	e03ffb15 	stw	zero,-20(fp)
   805a0:	00001d06 	br	80618 <multiMatrixHard+0x9c>
		{
			P[row].comp[col] = ALT_CI_VECTOR_MULT_INST( A[row].vect, B[col].vect);
   805a4:	e0bffc17 	ldw	r2,-16(fp)
   805a8:	1085883a 	add	r2,r2,r2
   805ac:	1085883a 	add	r2,r2,r2
   805b0:	1007883a 	mov	r3,r2
   805b4:	e0bfff17 	ldw	r2,-4(fp)
   805b8:	188b883a 	add	r5,r3,r2
   805bc:	e1bffb17 	ldw	r6,-20(fp)
   805c0:	e0bffc17 	ldw	r2,-16(fp)
   805c4:	1085883a 	add	r2,r2,r2
   805c8:	1085883a 	add	r2,r2,r2
   805cc:	1007883a 	mov	r3,r2
   805d0:	e0bffd17 	ldw	r2,-12(fp)
   805d4:	1885883a 	add	r2,r3,r2
   805d8:	10800017 	ldw	r2,0(r2)
   805dc:	1009883a 	mov	r4,r2
   805e0:	e0bffb17 	ldw	r2,-20(fp)
   805e4:	1085883a 	add	r2,r2,r2
   805e8:	1085883a 	add	r2,r2,r2
   805ec:	1007883a 	mov	r3,r2
   805f0:	e0bffe17 	ldw	r2,-8(fp)
   805f4:	1885883a 	add	r2,r3,r2
   805f8:	10800017 	ldw	r2,0(r2)
   805fc:	2085c032 	custom	0,r2,r4,r2
   80600:	1007883a 	mov	r3,r2
   80604:	2985883a 	add	r2,r5,r6
   80608:	10c00005 	stb	r3,0(r2)
void multiMatrixHard(VectorArray A,VectorArray B, VectorArray P)
{
	int row, col, k;
	for (row = 0; row < MSIZE; row++)
	{
		for (col = 0; col < MSIZE; col++)
   8060c:	e0bffb17 	ldw	r2,-20(fp)
   80610:	10800044 	addi	r2,r2,1
   80614:	e0bffb15 	stw	r2,-20(fp)
   80618:	e0bffb17 	ldw	r2,-20(fp)
   8061c:	10800110 	cmplti	r2,r2,4
   80620:	103fe01e 	bne	r2,zero,805a4 <multiMatrixHard+0x28>
}

void multiMatrixHard(VectorArray A,VectorArray B, VectorArray P)
{
	int row, col, k;
	for (row = 0; row < MSIZE; row++)
   80624:	e0bffc17 	ldw	r2,-16(fp)
   80628:	10800044 	addi	r2,r2,1
   8062c:	e0bffc15 	stw	r2,-16(fp)
   80630:	e0bffc17 	ldw	r2,-16(fp)
   80634:	10800110 	cmplti	r2,r2,4
   80638:	103fd81e 	bne	r2,zero,8059c <multiMatrixHard+0x20>
		{
			P[row].comp[col] = ALT_CI_VECTOR_MULT_INST( A[row].vect, B[col].vect);
		}
	}

}
   8063c:	e037883a 	mov	sp,fp
   80640:	df000017 	ldw	fp,0(sp)
   80644:	dec00104 	addi	sp,sp,4
   80648:	f800283a 	ret

0008064c <main>:


//////////////////////////////////////////////////////////

int main()
{
   8064c:	deffb904 	addi	sp,sp,-284
   80650:	dfc04615 	stw	ra,280(sp)
   80654:	df004515 	stw	fp,276(sp)
   80658:	df004504 	addi	fp,sp,276
	char cmd[CMD_LEN];
	char text[CMD_LEN];
	char* msg = "\x1b[1;1HSoPC Demo";
   8065c:	00800274 	movhi	r2,9
   80660:	108ff004 	addi	r2,r2,16320
   80664:	e0bfbe15 	stw	r2,-264(fp)
	VectorArray BTinst;
	VectorArray PInst;
	alt_u32 time1;
	alt_u32 time2;

	if (alt_timestamp_start() < 0)
   80668:	0092d040 	call	92d04 <alt_timestamp_start>
   8066c:	1004403a 	cmpge	r2,r2,zero
   80670:	1000031e 	bne	r2,zero,80680 <main+0x34>
    {
	  printf ("No timestamp device available\n");
   80674:	01000274 	movhi	r4,9
   80678:	210ff404 	addi	r4,r4,16336
   8067c:	008249c0 	call	8249c <puts>
    }

	// Opens LCD display driver
	fp = fopen (LCD_0_NAME, "w");
   80680:	01000274 	movhi	r4,9
   80684:	210ffc04 	addi	r4,r4,16368
   80688:	01400274 	movhi	r5,9
   8068c:	294fff04 	addi	r5,r5,16380
   80690:	0080ccc0 	call	80ccc <fopen>
   80694:	e0bfbd15 	stw	r2,-268(fp)
	if (fp==NULL)
   80698:	e0bfbd17 	ldw	r2,-268(fp)
   8069c:	1004c03a 	cmpne	r2,r2,zero
   806a0:	1000041e 	bne	r2,zero,806b4 <main+0x68>
	{
		printf("Could not open LCD driver\n");
   806a4:	01000274 	movhi	r4,9
   806a8:	21100004 	addi	r4,r4,16384
   806ac:	008249c0 	call	8249c <puts>
   806b0:	00000306 	br	806c0 <main+0x74>
	}
	else
		fprintf(fp, "%s", msg);
   806b4:	e13fbe17 	ldw	r4,-264(fp)
   806b8:	e17fbd17 	ldw	r5,-268(fp)
   806bc:	0080d5c0 	call	80d5c <fputs>

	// Set LED pattern
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_OUTPUT_0_BASE, 0xAA);
   806c0:	00c00434 	movhi	r3,16
   806c4:	18c49c04 	addi	r3,r3,4720
   806c8:	00802a84 	movi	r2,170
   806cc:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_OUTPUT_1_BASE, 0x55);
   806d0:	00c00434 	movhi	r3,16
   806d4:	18c49804 	addi	r3,r3,4704
   806d8:	00801544 	movi	r2,85
   806dc:	18800035 	stwio	r2,0(r3)

	// Nios II Console welcome text
	printf("Demo SoPC program\n");
   806e0:	01000274 	movhi	r4,9
   806e4:	21100704 	addi	r4,r4,16412
   806e8:	008249c0 	call	8249c <puts>
	printf("Enter command: ledr <value> | ledg <value> | sw | lcd <text> | mult <value>\n\n");
   806ec:	01000274 	movhi	r4,9
   806f0:	21100c04 	addi	r4,r4,16432
   806f4:	008249c0 	call	8249c <puts>

	while(1)
	{
		printf("CMD:\> ");
   806f8:	01000274 	movhi	r4,9
   806fc:	21102004 	addi	r4,r4,16512
   80700:	00823840 	call	82384 <printf>
		scanf(" %s", &cmd);
   80704:	e17fbf04 	addi	r5,fp,-260
   80708:	01000274 	movhi	r4,9
   8070c:	21102204 	addi	r4,r4,16520
   80710:	0082d280 	call	82d28 <scanf>

		if (!strcmp(cmd, "mult")) // LED command
   80714:	e13fbf04 	addi	r4,fp,-260
   80718:	01400274 	movhi	r5,9
   8071c:	29502304 	addi	r5,r5,16524
   80720:	0082ebc0 	call	82ebc <strcmp>
   80724:	1004c03a 	cmpne	r2,r2,zero
   80728:	10003a1e 	bne	r2,zero,80814 <main+0x1c8>
		{
			setInputMatrices(AInst, BTinst);
   8072c:	e13ff204 	addi	r4,fp,-56
   80730:	e17ff604 	addi	r5,fp,-40
   80734:	00801f00 	call	801f0 <setInputMatrices>
			displayMatrix(AInst);
   80738:	e13ff204 	addi	r4,fp,-56
   8073c:	00802ac0 	call	802ac <displayMatrix>
			displayMatrix(BTinst);
   80740:	e13ff604 	addi	r4,fp,-40
   80744:	00802ac0 	call	802ac <displayMatrix>
			scanf(" %d", &i_value);
   80748:	e17ff104 	addi	r5,fp,-60
   8074c:	01000274 	movhi	r4,9
   80750:	21102504 	addi	r4,r4,16532
   80754:	0082d280 	call	82d28 <scanf>

			switch (i_value)
   80758:	e0bff103 	ldbu	r2,-60(fp)
   8075c:	10803fcc 	andi	r2,r2,255
   80760:	e0bfff15 	stw	r2,-4(fp)
   80764:	e0ffff17 	ldw	r3,-4(fp)
   80768:	18800060 	cmpeqi	r2,r3,1
   8076c:	1000041e 	bne	r2,zero,80780 <main+0x134>
   80770:	e0ffff17 	ldw	r3,-4(fp)
   80774:	188000a0 	cmpeqi	r2,r3,2
   80778:	1000121e 	bne	r2,zero,807c4 <main+0x178>
   8077c:	00002206 	br	80808 <main+0x1bc>
			{
			case 1:
				time1 = alt_timestamp();
   80780:	0092da80 	call	92da8 <alt_timestamp>
   80784:	e0bfbc15 	stw	r2,-272(fp)
				multiMatrixSoft(AInst, BTinst, PInst);
   80788:	e13ff204 	addi	r4,fp,-56
   8078c:	e17ff604 	addi	r5,fp,-40
   80790:	e1bffa04 	addi	r6,fp,-24
   80794:	00804100 	call	80410 <multiMatrixSoft>
				time2 = alt_timestamp();
   80798:	0092da80 	call	92da8 <alt_timestamp>
   8079c:	e0bfbb15 	stw	r2,-276(fp)
				printf("SW time: %d\n", time2-time1);
   807a0:	e0ffbb17 	ldw	r3,-276(fp)
   807a4:	e0bfbc17 	ldw	r2,-272(fp)
   807a8:	188bc83a 	sub	r5,r3,r2
   807ac:	01000274 	movhi	r4,9
   807b0:	21102604 	addi	r4,r4,16536
   807b4:	00823840 	call	82384 <printf>
				displayMatrix(PInst);
   807b8:	e13ffa04 	addi	r4,fp,-24
   807bc:	00802ac0 	call	802ac <displayMatrix>
				break;
   807c0:	00001406 	br	80814 <main+0x1c8>
			case 2:
				time1 = alt_timestamp();
   807c4:	0092da80 	call	92da8 <alt_timestamp>
   807c8:	e0bfbc15 	stw	r2,-272(fp)
				multiMatrixHard(AInst, BTinst, PInst);
   807cc:	e13ff204 	addi	r4,fp,-56
   807d0:	e17ff604 	addi	r5,fp,-40
   807d4:	e1bffa04 	addi	r6,fp,-24
   807d8:	008057c0 	call	8057c <multiMatrixHard>
				time2 = alt_timestamp();
   807dc:	0092da80 	call	92da8 <alt_timestamp>
   807e0:	e0bfbb15 	stw	r2,-276(fp)
				printf("HW time: %d\n", time2-time1);
   807e4:	e0ffbb17 	ldw	r3,-276(fp)
   807e8:	e0bfbc17 	ldw	r2,-272(fp)
   807ec:	188bc83a 	sub	r5,r3,r2
   807f0:	01000274 	movhi	r4,9
   807f4:	21102a04 	addi	r4,r4,16552
   807f8:	00823840 	call	82384 <printf>
				displayMatrix(PInst);
   807fc:	e13ffa04 	addi	r4,fp,-24
   80800:	00802ac0 	call	802ac <displayMatrix>
				break;
   80804:	00000306 	br	80814 <main+0x1c8>
			default:
				printf("mult: invalid parameter");
   80808:	01000274 	movhi	r4,9
   8080c:	21102e04 	addi	r4,r4,16568
   80810:	00823840 	call	82384 <printf>
				break;
			}

		}

		if (!strcmp(cmd, "ledr")) // LED command
   80814:	e13fbf04 	addi	r4,fp,-260
   80818:	01400274 	movhi	r5,9
   8081c:	29503404 	addi	r5,r5,16592
   80820:	0082ebc0 	call	82ebc <strcmp>
   80824:	1004c03a 	cmpne	r2,r2,zero
   80828:	10000e1e 	bne	r2,zero,80864 <main+0x218>
		{
			scanf(" %d", &i_value);
   8082c:	e17ff104 	addi	r5,fp,-60
   80830:	01000274 	movhi	r4,9
   80834:	21102504 	addi	r4,r4,16532
   80838:	0082d280 	call	82d28 <scanf>
			// Writes to memory mapped PIO block
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_OUTPUT_0_BASE, i_value); //
   8083c:	e0bff103 	ldbu	r2,-60(fp)
   80840:	10c03fcc 	andi	r3,r2,255
   80844:	00800434 	movhi	r2,16
   80848:	10849c04 	addi	r2,r2,4720
   8084c:	10c00035 	stwio	r3,0(r2)
			printf("LED Red val:%d\n",i_value);
   80850:	e0bff103 	ldbu	r2,-60(fp)
   80854:	11403fcc 	andi	r5,r2,255
   80858:	01000274 	movhi	r4,9
   8085c:	21103604 	addi	r4,r4,16600
   80860:	00823840 	call	82384 <printf>
		}

		if (!strcmp(cmd, "ledg")) // LED command
   80864:	e13fbf04 	addi	r4,fp,-260
   80868:	01400274 	movhi	r5,9
   8086c:	29503a04 	addi	r5,r5,16616
   80870:	0082ebc0 	call	82ebc <strcmp>
   80874:	1004c03a 	cmpne	r2,r2,zero
   80878:	10000e1e 	bne	r2,zero,808b4 <main+0x268>
		{
			scanf(" %d", &i_value);
   8087c:	e17ff104 	addi	r5,fp,-60
   80880:	01000274 	movhi	r4,9
   80884:	21102504 	addi	r4,r4,16532
   80888:	0082d280 	call	82d28 <scanf>
			// Writes to memory mapped PIO block
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_OUTPUT_1_BASE, i_value);
   8088c:	e0bff103 	ldbu	r2,-60(fp)
   80890:	10c03fcc 	andi	r3,r2,255
   80894:	00800434 	movhi	r2,16
   80898:	10849804 	addi	r2,r2,4704
   8089c:	10c00035 	stwio	r3,0(r2)
			printf("LED Green val:%d\n",i_value);
   808a0:	e0bff103 	ldbu	r2,-60(fp)
   808a4:	11403fcc 	andi	r5,r2,255
   808a8:	01000274 	movhi	r4,9
   808ac:	21103c04 	addi	r4,r4,16624
   808b0:	00823840 	call	82384 <printf>
		}

		if (!strcmp(cmd, "sw")) // Switch command
   808b4:	e13fbf04 	addi	r4,fp,-260
   808b8:	01400274 	movhi	r5,9
   808bc:	29504104 	addi	r5,r5,16644
   808c0:	0082ebc0 	call	82ebc <strcmp>
   808c4:	1004c03a 	cmpne	r2,r2,zero
   808c8:	1000061e 	bne	r2,zero,808e4 <main+0x298>
		{
			// Reads from memory mapped PIO block
			printf("SW val: %02X\n", IORD_ALTERA_AVALON_PIO_DATA(PIO_INPUT_0_BASE));
   808cc:	00800434 	movhi	r2,16
   808d0:	10849404 	addi	r2,r2,4688
   808d4:	11400037 	ldwio	r5,0(r2)
   808d8:	01000274 	movhi	r4,9
   808dc:	21104204 	addi	r4,r4,16648
   808e0:	00823840 	call	82384 <printf>
		}

		if (!strcmp(cmd, "lcd")) // LCD command
   808e4:	e13fbf04 	addi	r4,fp,-260
   808e8:	01400274 	movhi	r5,9
   808ec:	29504604 	addi	r5,r5,16664
   808f0:	0082ebc0 	call	82ebc <strcmp>
   808f4:	1004c03a 	cmpne	r2,r2,zero
   808f8:	1000131e 	bne	r2,zero,80948 <main+0x2fc>
		{
			// Uses SW driver to access LCD block
			scanf(" %s", &text);
   808fc:	e17fd804 	addi	r5,fp,-160
   80900:	01000274 	movhi	r4,9
   80904:	21102204 	addi	r4,r4,16520
   80908:	0082d280 	call	82d28 <scanf>
			fprintf(fp, CLR_SCR()); // VT100 control command clear screen
   8090c:	01000274 	movhi	r4,9
   80910:	21104704 	addi	r4,r4,16668
   80914:	01400044 	movi	r5,1
   80918:	01800104 	movi	r6,4
   8091c:	e1ffbd17 	ldw	r7,-268(fp)
   80920:	00817940 	call	81794 <fwrite>
			fprintf(fp, SET_POS(1,1));
   80924:	01000274 	movhi	r4,9
   80928:	21104904 	addi	r4,r4,16676
   8092c:	01400044 	movi	r5,1
   80930:	01800184 	movi	r6,6
   80934:	e1ffbd17 	ldw	r7,-268(fp)
   80938:	00817940 	call	81794 <fwrite>
			fprintf(fp, "%s", text);
   8093c:	e13fd804 	addi	r4,fp,-160
   80940:	e17fbd17 	ldw	r5,-268(fp)
   80944:	0080d5c0 	call	80d5c <fputs>
		}

		if (!strcmp(cmd, "cnt")) // Counter command
   80948:	e13fbf04 	addi	r4,fp,-260
   8094c:	01400274 	movhi	r5,9
   80950:	29504b04 	addi	r5,r5,16684
   80954:	0082ebc0 	call	82ebc <strcmp>
		{
			// Reads from memory mapped PIO block
			// printf("Counter val: %d\n", IORD_16DIRECT(MM_BUS_COUNTER_0_BASE, 0));
		}

		if (!strcmp(cmd, "reset")) // Reset command
   80958:	e13fbf04 	addi	r4,fp,-260
   8095c:	01400274 	movhi	r5,9
   80960:	29504c04 	addi	r5,r5,16688
   80964:	0082ebc0 	call	82ebc <strcmp>
		{
			// Writes a reset to counter
			//IOWR_ALTERA_AVALON_PIO_DATA(MM_BUS_COUNTER_0_BASE + 1, 0);
		}

		if(!strcmp(cmd, "hex"))
   80968:	e13fbf04 	addi	r4,fp,-260
   8096c:	01400274 	movhi	r5,9
   80970:	29504e04 	addi	r5,r5,16696
   80974:	0082ebc0 	call	82ebc <strcmp>
   80978:	1004c03a 	cmpne	r2,r2,zero
   8097c:	10000e1e 	bne	r2,zero,809b8 <main+0x36c>
		{
			scanf(" %d", &i_value);
   80980:	e17ff104 	addi	r5,fp,-60
   80984:	01000274 	movhi	r4,9
   80988:	21102504 	addi	r4,r4,16532
   8098c:	0082d280 	call	82d28 <scanf>
			char * pEnd;
			IOWR_16DIRECT(MM_BUS_SEVEN_SEG_FOUR_DIGIT_1_BASE, 0, strtol(i_value, &pEnd,16));
   80990:	e0bff103 	ldbu	r2,-60(fp)
   80994:	10803fcc 	andi	r2,r2,255
   80998:	1009883a 	mov	r4,r2
   8099c:	e17ffe04 	addi	r5,fp,-8
   809a0:	01800404 	movi	r6,16
   809a4:	008323c0 	call	8323c <strtol>
   809a8:	1007883a 	mov	r3,r2
   809ac:	00800434 	movhi	r2,16
   809b0:	10840004 	addi	r2,r2,4096
   809b4:	10c0002d 	sthio	r3,0(r2)
		}

		usleep(10000); // Busy waiting 1 sec.
   809b8:	0109c404 	movi	r4,10000
   809bc:	0090ec40 	call	90ec4 <usleep>
	}
   809c0:	003f4d06 	br	806f8 <main+0xac>

000809c4 <BSDConverter>:
	fclose (fp);

}

int BSDConverter(unsigned char input)
{
   809c4:	defffc04 	addi	sp,sp,-16
   809c8:	dfc00315 	stw	ra,12(sp)
   809cc:	df000215 	stw	fp,8(sp)
   809d0:	df000204 	addi	fp,sp,8
   809d4:	e13fff05 	stb	r4,-4(fp)
	int buffer;
	buffer = input/100 << 8;
   809d8:	e13fff03 	ldbu	r4,-4(fp)
   809dc:	01401904 	movi	r5,100
   809e0:	0080b900 	call	80b90 <__udivsi3>
   809e4:	10803fcc 	andi	r2,r2,255
   809e8:	1004923a 	slli	r2,r2,8
   809ec:	e0bffe15 	stw	r2,-8(fp)
	buffer = buffer | (input % 100);
   809f0:	e13fff03 	ldbu	r4,-4(fp)
   809f4:	01401904 	movi	r5,100
   809f8:	0080b980 	call	80b98 <__umodsi3>
   809fc:	10c03fcc 	andi	r3,r2,255
   80a00:	e0bffe17 	ldw	r2,-8(fp)
   80a04:	10c4b03a 	or	r2,r2,r3
   80a08:	e0bffe15 	stw	r2,-8(fp)

	buffer = buffer/10 << 4;
   80a0c:	e13ffe17 	ldw	r4,-8(fp)
   80a10:	01400284 	movi	r5,10
   80a14:	0080ad00 	call	80ad0 <__divsi3>
   80a18:	1004913a 	slli	r2,r2,4
   80a1c:	e0bffe15 	stw	r2,-8(fp)
	buffer = buffer | (buffer % 10);
   80a20:	e13ffe17 	ldw	r4,-8(fp)
   80a24:	01400284 	movi	r5,10
   80a28:	0080b300 	call	80b30 <__modsi3>
   80a2c:	1007883a 	mov	r3,r2
   80a30:	e0bffe17 	ldw	r2,-8(fp)
   80a34:	10c4b03a 	or	r2,r2,r3
   80a38:	e0bffe15 	stw	r2,-8(fp)
	return buffer;
   80a3c:	e0bffe17 	ldw	r2,-8(fp)
}
   80a40:	e037883a 	mov	sp,fp
   80a44:	dfc00117 	ldw	ra,4(sp)
   80a48:	df000017 	ldw	fp,0(sp)
   80a4c:	dec00204 	addi	sp,sp,8
   80a50:	f800283a 	ret

00080a54 <udivmodsi4>:
   80a54:	29001b2e 	bgeu	r5,r4,80ac4 <udivmodsi4+0x70>
   80a58:	28001a16 	blt	r5,zero,80ac4 <udivmodsi4+0x70>
   80a5c:	00800044 	movi	r2,1
   80a60:	0007883a 	mov	r3,zero
   80a64:	01c007c4 	movi	r7,31
   80a68:	00000306 	br	80a78 <udivmodsi4+0x24>
   80a6c:	19c01326 	beq	r3,r7,80abc <udivmodsi4+0x68>
   80a70:	18c00044 	addi	r3,r3,1
   80a74:	28000416 	blt	r5,zero,80a88 <udivmodsi4+0x34>
   80a78:	294b883a 	add	r5,r5,r5
   80a7c:	1085883a 	add	r2,r2,r2
   80a80:	293ffa36 	bltu	r5,r4,80a6c <udivmodsi4+0x18>
   80a84:	10000d26 	beq	r2,zero,80abc <udivmodsi4+0x68>
   80a88:	0007883a 	mov	r3,zero
   80a8c:	21400236 	bltu	r4,r5,80a98 <udivmodsi4+0x44>
   80a90:	2149c83a 	sub	r4,r4,r5
   80a94:	1886b03a 	or	r3,r3,r2
   80a98:	1004d07a 	srli	r2,r2,1
   80a9c:	280ad07a 	srli	r5,r5,1
   80aa0:	103ffa1e 	bne	r2,zero,80a8c <udivmodsi4+0x38>
   80aa4:	30000226 	beq	r6,zero,80ab0 <udivmodsi4+0x5c>
   80aa8:	2005883a 	mov	r2,r4
   80aac:	f800283a 	ret
   80ab0:	1809883a 	mov	r4,r3
   80ab4:	2005883a 	mov	r2,r4
   80ab8:	f800283a 	ret
   80abc:	0007883a 	mov	r3,zero
   80ac0:	003ff806 	br	80aa4 <udivmodsi4+0x50>
   80ac4:	00800044 	movi	r2,1
   80ac8:	0007883a 	mov	r3,zero
   80acc:	003fef06 	br	80a8c <udivmodsi4+0x38>

00080ad0 <__divsi3>:
   80ad0:	defffe04 	addi	sp,sp,-8
   80ad4:	dc000015 	stw	r16,0(sp)
   80ad8:	dfc00115 	stw	ra,4(sp)
   80adc:	0021883a 	mov	r16,zero
   80ae0:	20000c16 	blt	r4,zero,80b14 <__divsi3+0x44>
   80ae4:	000d883a 	mov	r6,zero
   80ae8:	28000e16 	blt	r5,zero,80b24 <__divsi3+0x54>
   80aec:	0080a540 	call	80a54 <udivmodsi4>
   80af0:	1007883a 	mov	r3,r2
   80af4:	8005003a 	cmpeq	r2,r16,zero
   80af8:	1000011e 	bne	r2,zero,80b00 <__divsi3+0x30>
   80afc:	00c7c83a 	sub	r3,zero,r3
   80b00:	1805883a 	mov	r2,r3
   80b04:	dfc00117 	ldw	ra,4(sp)
   80b08:	dc000017 	ldw	r16,0(sp)
   80b0c:	dec00204 	addi	sp,sp,8
   80b10:	f800283a 	ret
   80b14:	0109c83a 	sub	r4,zero,r4
   80b18:	04000044 	movi	r16,1
   80b1c:	000d883a 	mov	r6,zero
   80b20:	283ff20e 	bge	r5,zero,80aec <__divsi3+0x1c>
   80b24:	014bc83a 	sub	r5,zero,r5
   80b28:	8021003a 	cmpeq	r16,r16,zero
   80b2c:	003fef06 	br	80aec <__divsi3+0x1c>

00080b30 <__modsi3>:
   80b30:	deffff04 	addi	sp,sp,-4
   80b34:	dfc00015 	stw	ra,0(sp)
   80b38:	01800044 	movi	r6,1
   80b3c:	2807883a 	mov	r3,r5
   80b40:	20000416 	blt	r4,zero,80b54 <__modsi3+0x24>
   80b44:	28000c16 	blt	r5,zero,80b78 <__modsi3+0x48>
   80b48:	dfc00017 	ldw	ra,0(sp)
   80b4c:	dec00104 	addi	sp,sp,4
   80b50:	0080a541 	jmpi	80a54 <udivmodsi4>
   80b54:	0109c83a 	sub	r4,zero,r4
   80b58:	28000b16 	blt	r5,zero,80b88 <__modsi3+0x58>
   80b5c:	180b883a 	mov	r5,r3
   80b60:	01800044 	movi	r6,1
   80b64:	0080a540 	call	80a54 <udivmodsi4>
   80b68:	0085c83a 	sub	r2,zero,r2
   80b6c:	dfc00017 	ldw	ra,0(sp)
   80b70:	dec00104 	addi	sp,sp,4
   80b74:	f800283a 	ret
   80b78:	014bc83a 	sub	r5,zero,r5
   80b7c:	dfc00017 	ldw	ra,0(sp)
   80b80:	dec00104 	addi	sp,sp,4
   80b84:	0080a541 	jmpi	80a54 <udivmodsi4>
   80b88:	0147c83a 	sub	r3,zero,r5
   80b8c:	003ff306 	br	80b5c <__modsi3+0x2c>

00080b90 <__udivsi3>:
   80b90:	000d883a 	mov	r6,zero
   80b94:	0080a541 	jmpi	80a54 <udivmodsi4>

00080b98 <__umodsi3>:
   80b98:	01800044 	movi	r6,1
   80b9c:	0080a541 	jmpi	80a54 <udivmodsi4>

00080ba0 <__mulsi3>:
   80ba0:	20000a26 	beq	r4,zero,80bcc <__mulsi3+0x2c>
   80ba4:	0007883a 	mov	r3,zero
   80ba8:	2080004c 	andi	r2,r4,1
   80bac:	1005003a 	cmpeq	r2,r2,zero
   80bb0:	2008d07a 	srli	r4,r4,1
   80bb4:	1000011e 	bne	r2,zero,80bbc <__mulsi3+0x1c>
   80bb8:	1947883a 	add	r3,r3,r5
   80bbc:	294b883a 	add	r5,r5,r5
   80bc0:	203ff91e 	bne	r4,zero,80ba8 <__mulsi3+0x8>
   80bc4:	1805883a 	mov	r2,r3
   80bc8:	f800283a 	ret
   80bcc:	0007883a 	mov	r3,zero
   80bd0:	1805883a 	mov	r2,r3
   80bd4:	f800283a 	ret

00080bd8 <_fopen_r>:
   80bd8:	defffa04 	addi	sp,sp,-24
   80bdc:	dcc00415 	stw	r19,16(sp)
   80be0:	2827883a 	mov	r19,r5
   80be4:	300b883a 	mov	r5,r6
   80be8:	d80d883a 	mov	r6,sp
   80bec:	dc800315 	stw	r18,12(sp)
   80bf0:	dc400215 	stw	r17,8(sp)
   80bf4:	dc000115 	stw	r16,4(sp)
   80bf8:	dfc00515 	stw	ra,20(sp)
   80bfc:	2021883a 	mov	r16,r4
   80c00:	00888680 	call	88868 <__sflags>
   80c04:	1025883a 	mov	r18,r2
   80c08:	8009883a 	mov	r4,r16
   80c0c:	0023883a 	mov	r17,zero
   80c10:	1000081e 	bne	r2,zero,80c34 <_fopen_r+0x5c>
   80c14:	8805883a 	mov	r2,r17
   80c18:	dfc00517 	ldw	ra,20(sp)
   80c1c:	dcc00417 	ldw	r19,16(sp)
   80c20:	dc800317 	ldw	r18,12(sp)
   80c24:	dc400217 	ldw	r17,8(sp)
   80c28:	dc000117 	ldw	r16,4(sp)
   80c2c:	dec00604 	addi	sp,sp,24
   80c30:	f800283a 	ret
   80c34:	00887780 	call	88778 <__sfp>
   80c38:	1023883a 	mov	r17,r2
   80c3c:	980b883a 	mov	r5,r19
   80c40:	8009883a 	mov	r4,r16
   80c44:	01c06d84 	movi	r7,438
   80c48:	103ff226 	beq	r2,zero,80c14 <_fopen_r+0x3c>
   80c4c:	d9800017 	ldw	r6,0(sp)
   80c50:	008230c0 	call	8230c <_open_r>
   80c54:	10001816 	blt	r2,zero,80cb8 <_fopen_r+0xe0>
   80c58:	00c00234 	movhi	r3,8
   80c5c:	18cb7804 	addi	r3,r3,11744
   80c60:	923fffcc 	andi	r8,r18,65535
   80c64:	8880038d 	sth	r2,14(r17)
   80c68:	00800234 	movhi	r2,8
   80c6c:	108b9704 	addi	r2,r2,11868
   80c70:	88800815 	stw	r2,32(r17)
   80c74:	88c00915 	stw	r3,36(r17)
   80c78:	00800234 	movhi	r2,8
   80c7c:	108b5e04 	addi	r2,r2,11640
   80c80:	00c00234 	movhi	r3,8
   80c84:	18cb5c04 	addi	r3,r3,11632
   80c88:	4200400c 	andi	r8,r8,256
   80c8c:	8c80030d 	sth	r18,12(r17)
   80c90:	8009883a 	mov	r4,r16
   80c94:	880b883a 	mov	r5,r17
   80c98:	000d883a 	mov	r6,zero
   80c9c:	01c00084 	movi	r7,2
   80ca0:	88800a15 	stw	r2,40(r17)
   80ca4:	88c00b15 	stw	r3,44(r17)
   80ca8:	8c400715 	stw	r17,28(r17)
   80cac:	403fd926 	beq	r8,zero,80c14 <_fopen_r+0x3c>
   80cb0:	0080d780 	call	80d78 <_fseek_r>
   80cb4:	003fd706 	br	80c14 <_fopen_r+0x3c>
   80cb8:	00885cc0 	call	885cc <__sfp_lock_acquire>
   80cbc:	8800030d 	sth	zero,12(r17)
   80cc0:	00885d00 	call	885d0 <__sfp_lock_release>
   80cc4:	0023883a 	mov	r17,zero
   80cc8:	003fd206 	br	80c14 <_fopen_r+0x3c>

00080ccc <fopen>:
   80ccc:	01800274 	movhi	r6,9
   80cd0:	3198bc04 	addi	r6,r6,25328
   80cd4:	2007883a 	mov	r3,r4
   80cd8:	31000017 	ldw	r4,0(r6)
   80cdc:	280d883a 	mov	r6,r5
   80ce0:	180b883a 	mov	r5,r3
   80ce4:	0080bd81 	jmpi	80bd8 <_fopen_r>

00080ce8 <_fputs_r>:
   80ce8:	defff804 	addi	sp,sp,-32
   80cec:	dc000515 	stw	r16,20(sp)
   80cf0:	2021883a 	mov	r16,r4
   80cf4:	2809883a 	mov	r4,r5
   80cf8:	dc400615 	stw	r17,24(sp)
   80cfc:	dfc00715 	stw	ra,28(sp)
   80d00:	3023883a 	mov	r17,r6
   80d04:	d9400015 	stw	r5,0(sp)
   80d08:	0082f780 	call	82f78 <strlen>
   80d0c:	00c00044 	movi	r3,1
   80d10:	d8800115 	stw	r2,4(sp)
   80d14:	d8c00315 	stw	r3,12(sp)
   80d18:	d8800415 	stw	r2,16(sp)
   80d1c:	dec00215 	stw	sp,8(sp)
   80d20:	80000326 	beq	r16,zero,80d30 <_fputs_r+0x48>
   80d24:	80800e17 	ldw	r2,56(r16)
   80d28:	8009883a 	mov	r4,r16
   80d2c:	10000926 	beq	r2,zero,80d54 <_fputs_r+0x6c>
   80d30:	8009883a 	mov	r4,r16
   80d34:	880b883a 	mov	r5,r17
   80d38:	d9800204 	addi	r6,sp,8
   80d3c:	008124c0 	call	8124c <__sfvwrite_r>
   80d40:	dfc00717 	ldw	ra,28(sp)
   80d44:	dc400617 	ldw	r17,24(sp)
   80d48:	dc000517 	ldw	r16,20(sp)
   80d4c:	dec00804 	addi	sp,sp,32
   80d50:	f800283a 	ret
   80d54:	00885dc0 	call	885dc <__sinit>
   80d58:	003ff506 	br	80d30 <_fputs_r+0x48>

00080d5c <fputs>:
   80d5c:	01800274 	movhi	r6,9
   80d60:	3198bc04 	addi	r6,r6,25328
   80d64:	2007883a 	mov	r3,r4
   80d68:	31000017 	ldw	r4,0(r6)
   80d6c:	280d883a 	mov	r6,r5
   80d70:	180b883a 	mov	r5,r3
   80d74:	0080ce81 	jmpi	80ce8 <_fputs_r>

00080d78 <_fseek_r>:
   80d78:	deffe804 	addi	sp,sp,-96
   80d7c:	dd801515 	stw	r22,84(sp)
   80d80:	dcc01215 	stw	r19,72(sp)
   80d84:	dc801115 	stw	r18,68(sp)
   80d88:	dc000f15 	stw	r16,60(sp)
   80d8c:	dfc01715 	stw	ra,92(sp)
   80d90:	ddc01615 	stw	r23,88(sp)
   80d94:	dd401415 	stw	r21,80(sp)
   80d98:	dd001315 	stw	r20,76(sp)
   80d9c:	dc401015 	stw	r17,64(sp)
   80da0:	2025883a 	mov	r18,r4
   80da4:	2821883a 	mov	r16,r5
   80da8:	302d883a 	mov	r22,r6
   80dac:	3827883a 	mov	r19,r7
   80db0:	20000226 	beq	r4,zero,80dbc <_fseek_r+0x44>
   80db4:	20800e17 	ldw	r2,56(r4)
   80db8:	10007826 	beq	r2,zero,80f9c <_fseek_r+0x224>
   80dbc:	8080030b 	ldhu	r2,12(r16)
   80dc0:	00c04204 	movi	r3,264
   80dc4:	1080420c 	andi	r2,r2,264
   80dc8:	10c07926 	beq	r2,r3,80fb0 <_fseek_r+0x238>
   80dcc:	85400a17 	ldw	r21,40(r16)
   80dd0:	a800ea26 	beq	r21,zero,8117c <_fseek_r+0x404>
   80dd4:	00800044 	movi	r2,1
   80dd8:	98805f26 	beq	r19,r2,80f58 <_fseek_r+0x1e0>
   80ddc:	00800084 	movi	r2,2
   80de0:	98801026 	beq	r19,r2,80e24 <_fseek_r+0xac>
   80de4:	98000f26 	beq	r19,zero,80e24 <_fseek_r+0xac>
   80de8:	00800584 	movi	r2,22
   80dec:	013fffc4 	movi	r4,-1
   80df0:	90800015 	stw	r2,0(r18)
   80df4:	2005883a 	mov	r2,r4
   80df8:	dfc01717 	ldw	ra,92(sp)
   80dfc:	ddc01617 	ldw	r23,88(sp)
   80e00:	dd801517 	ldw	r22,84(sp)
   80e04:	dd401417 	ldw	r21,80(sp)
   80e08:	dd001317 	ldw	r20,76(sp)
   80e0c:	dcc01217 	ldw	r19,72(sp)
   80e10:	dc801117 	ldw	r18,68(sp)
   80e14:	dc401017 	ldw	r17,64(sp)
   80e18:	dc000f17 	ldw	r16,60(sp)
   80e1c:	dec01804 	addi	sp,sp,96
   80e20:	f800283a 	ret
   80e24:	81800417 	ldw	r6,16(r16)
   80e28:	0023883a 	mov	r17,zero
   80e2c:	002f883a 	mov	r23,zero
   80e30:	3000a626 	beq	r6,zero,810cc <_fseek_r+0x354>
   80e34:	8100030b 	ldhu	r4,12(r16)
   80e38:	2082068c 	andi	r2,r4,2074
   80e3c:	1000081e 	bne	r2,zero,80e60 <_fseek_r+0xe8>
   80e40:	2081000c 	andi	r2,r4,1024
   80e44:	10001b1e 	bne	r2,zero,80eb4 <_fseek_r+0x13c>
   80e48:	00800234 	movhi	r2,8
   80e4c:	108b5e04 	addi	r2,r2,11640
   80e50:	a8800926 	beq	r21,r2,80e78 <_fseek_r+0x100>
   80e54:	8080030b 	ldhu	r2,12(r16)
   80e58:	10820014 	ori	r2,r2,2048
   80e5c:	8080030d 	sth	r2,12(r16)
   80e60:	9009883a 	mov	r4,r18
   80e64:	800b883a 	mov	r5,r16
   80e68:	00883440 	call	88344 <_fflush_r>
   80e6c:	1000a326 	beq	r2,zero,810fc <_fseek_r+0x384>
   80e70:	013fffc4 	movi	r4,-1
   80e74:	003fdf06 	br	80df4 <_fseek_r+0x7c>
   80e78:	8140038f 	ldh	r5,14(r16)
   80e7c:	283ff516 	blt	r5,zero,80e54 <_fseek_r+0xdc>
   80e80:	9009883a 	mov	r4,r18
   80e84:	d80d883a 	mov	r6,sp
   80e88:	00811d80 	call	811d8 <_fstat_r>
   80e8c:	103ff11e 	bne	r2,zero,80e54 <_fseek_r+0xdc>
   80e90:	d8800117 	ldw	r2,4(sp)
   80e94:	00e00014 	movui	r3,32768
   80e98:	10bc000c 	andi	r2,r2,61440
   80e9c:	10ffed1e 	bne	r2,r3,80e54 <_fseek_r+0xdc>
   80ea0:	80c0030b 	ldhu	r3,12(r16)
   80ea4:	00810004 	movi	r2,1024
   80ea8:	80801315 	stw	r2,76(r16)
   80eac:	1886b03a 	or	r3,r3,r2
   80eb0:	80c0030d 	sth	r3,12(r16)
   80eb4:	9800701e 	bne	r19,zero,81078 <_fseek_r+0x300>
   80eb8:	b029883a 	mov	r20,r22
   80ebc:	b804c03a 	cmpne	r2,r23,zero
   80ec0:	10003f1e 	bne	r2,zero,80fc0 <_fseek_r+0x248>
   80ec4:	8100030b 	ldhu	r4,12(r16)
   80ec8:	2084000c 	andi	r2,r4,4096
   80ecc:	1000a126 	beq	r2,zero,81154 <_fseek_r+0x3dc>
   80ed0:	81801417 	ldw	r6,80(r16)
   80ed4:	80c00117 	ldw	r3,4(r16)
   80ed8:	81400c17 	ldw	r5,48(r16)
   80edc:	30e3c83a 	sub	r17,r6,r3
   80ee0:	28008026 	beq	r5,zero,810e4 <_fseek_r+0x36c>
   80ee4:	81c00f17 	ldw	r7,60(r16)
   80ee8:	89e3c83a 	sub	r17,r17,r7
   80eec:	80800e17 	ldw	r2,56(r16)
   80ef0:	81800417 	ldw	r6,16(r16)
   80ef4:	88c7883a 	add	r3,r17,r3
   80ef8:	1185c83a 	sub	r2,r2,r6
   80efc:	11cf883a 	add	r7,r2,r7
   80f00:	1887c83a 	sub	r3,r3,r2
   80f04:	2088000c 	andi	r2,r4,8192
   80f08:	10003e1e 	bne	r2,zero,81004 <_fseek_r+0x28c>
   80f0c:	a0c03d16 	blt	r20,r3,81004 <_fseek_r+0x28c>
   80f10:	38c5883a 	add	r2,r7,r3
   80f14:	a0803b2e 	bgeu	r20,r2,81004 <_fseek_r+0x28c>
   80f18:	a0c5c83a 	sub	r2,r20,r3
   80f1c:	3887c83a 	sub	r3,r7,r2
   80f20:	3085883a 	add	r2,r6,r2
   80f24:	80800015 	stw	r2,0(r16)
   80f28:	80c00115 	stw	r3,4(r16)
   80f2c:	28000526 	beq	r5,zero,80f44 <_fseek_r+0x1cc>
   80f30:	80801004 	addi	r2,r16,64
   80f34:	28800226 	beq	r5,r2,80f40 <_fseek_r+0x1c8>
   80f38:	9009883a 	mov	r4,r18
   80f3c:	0088c800 	call	88c80 <_free_r>
   80f40:	80000c15 	stw	zero,48(r16)
   80f44:	8080030b 	ldhu	r2,12(r16)
   80f48:	0009883a 	mov	r4,zero
   80f4c:	10bff7cc 	andi	r2,r2,65503
   80f50:	8080030d 	sth	r2,12(r16)
   80f54:	003fa706 	br	80df4 <_fseek_r+0x7c>
   80f58:	9009883a 	mov	r4,r18
   80f5c:	800b883a 	mov	r5,r16
   80f60:	00883440 	call	88344 <_fflush_r>
   80f64:	8100030b 	ldhu	r4,12(r16)
   80f68:	2084000c 	andi	r2,r4,4096
   80f6c:	10008726 	beq	r2,zero,8118c <_fseek_r+0x414>
   80f70:	84401417 	ldw	r17,80(r16)
   80f74:	2080010c 	andi	r2,r4,4
   80f78:	1000171e 	bne	r2,zero,80fd8 <_fseek_r+0x260>
   80f7c:	2080020c 	andi	r2,r4,8
   80f80:	10003b26 	beq	r2,zero,81070 <_fseek_r+0x2f8>
   80f84:	80800017 	ldw	r2,0(r16)
   80f88:	10003926 	beq	r2,zero,81070 <_fseek_r+0x2f8>
   80f8c:	81800417 	ldw	r6,16(r16)
   80f90:	1185c83a 	sub	r2,r2,r6
   80f94:	88a3883a 	add	r17,r17,r2
   80f98:	00001606 	br	80ff4 <_fseek_r+0x27c>
   80f9c:	00885dc0 	call	885dc <__sinit>
   80fa0:	8080030b 	ldhu	r2,12(r16)
   80fa4:	00c04204 	movi	r3,264
   80fa8:	1080420c 	andi	r2,r2,264
   80fac:	10ff871e 	bne	r2,r3,80dcc <_fseek_r+0x54>
   80fb0:	9009883a 	mov	r4,r18
   80fb4:	800b883a 	mov	r5,r16
   80fb8:	00883440 	call	88344 <_fflush_r>
   80fbc:	003f8306 	br	80dcc <_fseek_r+0x54>
   80fc0:	81400c17 	ldw	r5,48(r16)
   80fc4:	28004526 	beq	r5,zero,810dc <_fseek_r+0x364>
   80fc8:	8100030b 	ldhu	r4,12(r16)
   80fcc:	80c00117 	ldw	r3,4(r16)
   80fd0:	81c00f17 	ldw	r7,60(r16)
   80fd4:	003fc506 	br	80eec <_fseek_r+0x174>
   80fd8:	80c00117 	ldw	r3,4(r16)
   80fdc:	80800c17 	ldw	r2,48(r16)
   80fe0:	88e3c83a 	sub	r17,r17,r3
   80fe4:	10002226 	beq	r2,zero,81070 <_fseek_r+0x2f8>
   80fe8:	81c00f17 	ldw	r7,60(r16)
   80fec:	81800417 	ldw	r6,16(r16)
   80ff0:	89e3c83a 	sub	r17,r17,r7
   80ff4:	b46d883a 	add	r22,r22,r17
   80ff8:	0027883a 	mov	r19,zero
   80ffc:	05c00044 	movi	r23,1
   81000:	003f8b06 	br	80e30 <_fseek_r+0xb8>
   81004:	80801317 	ldw	r2,76(r16)
   81008:	81400717 	ldw	r5,28(r16)
   8100c:	9009883a 	mov	r4,r18
   81010:	0085c83a 	sub	r2,zero,r2
   81014:	a0a2703a 	and	r17,r20,r2
   81018:	880d883a 	mov	r6,r17
   8101c:	000f883a 	mov	r7,zero
   81020:	a83ee83a 	callr	r21
   81024:	00ffffc4 	movi	r3,-1
   81028:	10ff8d26 	beq	r2,r3,80e60 <_fseek_r+0xe8>
   8102c:	80800417 	ldw	r2,16(r16)
   81030:	81400c17 	ldw	r5,48(r16)
   81034:	80000115 	stw	zero,4(r16)
   81038:	80800015 	stw	r2,0(r16)
   8103c:	28000526 	beq	r5,zero,81054 <_fseek_r+0x2dc>
   81040:	80801004 	addi	r2,r16,64
   81044:	28800226 	beq	r5,r2,81050 <_fseek_r+0x2d8>
   81048:	9009883a 	mov	r4,r18
   8104c:	0088c800 	call	88c80 <_free_r>
   81050:	80000c15 	stw	zero,48(r16)
   81054:	8080030b 	ldhu	r2,12(r16)
   81058:	a463c83a 	sub	r17,r20,r17
   8105c:	10bff7cc 	andi	r2,r2,65503
   81060:	8080030d 	sth	r2,12(r16)
   81064:	88000c1e 	bne	r17,zero,81098 <_fseek_r+0x320>
   81068:	0009883a 	mov	r4,zero
   8106c:	003f6106 	br	80df4 <_fseek_r+0x7c>
   81070:	81800417 	ldw	r6,16(r16)
   81074:	003fdf06 	br	80ff4 <_fseek_r+0x27c>
   81078:	8140038f 	ldh	r5,14(r16)
   8107c:	9009883a 	mov	r4,r18
   81080:	d80d883a 	mov	r6,sp
   81084:	00811d80 	call	811d8 <_fstat_r>
   81088:	103f751e 	bne	r2,zero,80e60 <_fseek_r+0xe8>
   8108c:	d8800417 	ldw	r2,16(sp)
   81090:	b0a9883a 	add	r20,r22,r2
   81094:	003f8906 	br	80ebc <_fseek_r+0x144>
   81098:	9009883a 	mov	r4,r18
   8109c:	800b883a 	mov	r5,r16
   810a0:	0082aa40 	call	82aa4 <__srefill_r>
   810a4:	103f6e1e 	bne	r2,zero,80e60 <_fseek_r+0xe8>
   810a8:	80c00117 	ldw	r3,4(r16)
   810ac:	1c7f6c36 	bltu	r3,r17,80e60 <_fseek_r+0xe8>
   810b0:	80800017 	ldw	r2,0(r16)
   810b4:	1c47c83a 	sub	r3,r3,r17
   810b8:	0009883a 	mov	r4,zero
   810bc:	1445883a 	add	r2,r2,r17
   810c0:	80c00115 	stw	r3,4(r16)
   810c4:	80800015 	stw	r2,0(r16)
   810c8:	003f4a06 	br	80df4 <_fseek_r+0x7c>
   810cc:	9009883a 	mov	r4,r18
   810d0:	800b883a 	mov	r5,r16
   810d4:	00817d40 	call	817d4 <__smakebuf_r>
   810d8:	003f5606 	br	80e34 <_fseek_r+0xbc>
   810dc:	8100030b 	ldhu	r4,12(r16)
   810e0:	80c00117 	ldw	r3,4(r16)
   810e4:	80800017 	ldw	r2,0(r16)
   810e8:	81800417 	ldw	r6,16(r16)
   810ec:	1185c83a 	sub	r2,r2,r6
   810f0:	10cf883a 	add	r7,r2,r3
   810f4:	8887c83a 	sub	r3,r17,r2
   810f8:	003f8206 	br	80f04 <_fseek_r+0x18c>
   810fc:	81400717 	ldw	r5,28(r16)
   81100:	b00d883a 	mov	r6,r22
   81104:	980f883a 	mov	r7,r19
   81108:	9009883a 	mov	r4,r18
   8110c:	a83ee83a 	callr	r21
   81110:	00ffffc4 	movi	r3,-1
   81114:	10ff5626 	beq	r2,r3,80e70 <_fseek_r+0xf8>
   81118:	81400c17 	ldw	r5,48(r16)
   8111c:	28000526 	beq	r5,zero,81134 <_fseek_r+0x3bc>
   81120:	80801004 	addi	r2,r16,64
   81124:	28800226 	beq	r5,r2,81130 <_fseek_r+0x3b8>
   81128:	9009883a 	mov	r4,r18
   8112c:	0088c800 	call	88c80 <_free_r>
   81130:	80000c15 	stw	zero,48(r16)
   81134:	8080030b 	ldhu	r2,12(r16)
   81138:	80c00417 	ldw	r3,16(r16)
   8113c:	0009883a 	mov	r4,zero
   81140:	10bdf7cc 	andi	r2,r2,63455
   81144:	8080030d 	sth	r2,12(r16)
   81148:	80c00015 	stw	r3,0(r16)
   8114c:	80000115 	stw	zero,4(r16)
   81150:	003f2806 	br	80df4 <_fseek_r+0x7c>
   81154:	81400717 	ldw	r5,28(r16)
   81158:	000d883a 	mov	r6,zero
   8115c:	9009883a 	mov	r4,r18
   81160:	01c00044 	movi	r7,1
   81164:	a83ee83a 	callr	r21
   81168:	100d883a 	mov	r6,r2
   8116c:	00bfffc4 	movi	r2,-1
   81170:	30bf3b26 	beq	r6,r2,80e60 <_fseek_r+0xe8>
   81174:	8100030b 	ldhu	r4,12(r16)
   81178:	003f5606 	br	80ed4 <_fseek_r+0x15c>
   8117c:	00800744 	movi	r2,29
   81180:	013fffc4 	movi	r4,-1
   81184:	90800015 	stw	r2,0(r18)
   81188:	003f1a06 	br	80df4 <_fseek_r+0x7c>
   8118c:	81400717 	ldw	r5,28(r16)
   81190:	980f883a 	mov	r7,r19
   81194:	9009883a 	mov	r4,r18
   81198:	000d883a 	mov	r6,zero
   8119c:	a83ee83a 	callr	r21
   811a0:	1023883a 	mov	r17,r2
   811a4:	00bfffc4 	movi	r2,-1
   811a8:	88bf3126 	beq	r17,r2,80e70 <_fseek_r+0xf8>
   811ac:	8100030b 	ldhu	r4,12(r16)
   811b0:	003f7006 	br	80f74 <_fseek_r+0x1fc>

000811b4 <fseek>:
   811b4:	00800274 	movhi	r2,9
   811b8:	1098bc04 	addi	r2,r2,25328
   811bc:	2013883a 	mov	r9,r4
   811c0:	11000017 	ldw	r4,0(r2)
   811c4:	2805883a 	mov	r2,r5
   811c8:	300f883a 	mov	r7,r6
   811cc:	480b883a 	mov	r5,r9
   811d0:	100d883a 	mov	r6,r2
   811d4:	0080d781 	jmpi	80d78 <_fseek_r>

000811d8 <_fstat_r>:
   811d8:	defffd04 	addi	sp,sp,-12
   811dc:	dc000015 	stw	r16,0(sp)
   811e0:	04000274 	movhi	r16,9
   811e4:	841fb904 	addi	r16,r16,32484
   811e8:	dc400115 	stw	r17,4(sp)
   811ec:	80000015 	stw	zero,0(r16)
   811f0:	2023883a 	mov	r17,r4
   811f4:	2809883a 	mov	r4,r5
   811f8:	300b883a 	mov	r5,r6
   811fc:	dfc00215 	stw	ra,8(sp)
   81200:	00903e00 	call	903e0 <fstat>
   81204:	1007883a 	mov	r3,r2
   81208:	00bfffc4 	movi	r2,-1
   8120c:	18800626 	beq	r3,r2,81228 <_fstat_r+0x50>
   81210:	1805883a 	mov	r2,r3
   81214:	dfc00217 	ldw	ra,8(sp)
   81218:	dc400117 	ldw	r17,4(sp)
   8121c:	dc000017 	ldw	r16,0(sp)
   81220:	dec00304 	addi	sp,sp,12
   81224:	f800283a 	ret
   81228:	80800017 	ldw	r2,0(r16)
   8122c:	103ff826 	beq	r2,zero,81210 <_fstat_r+0x38>
   81230:	88800015 	stw	r2,0(r17)
   81234:	1805883a 	mov	r2,r3
   81238:	dfc00217 	ldw	ra,8(sp)
   8123c:	dc400117 	ldw	r17,4(sp)
   81240:	dc000017 	ldw	r16,0(sp)
   81244:	dec00304 	addi	sp,sp,12
   81248:	f800283a 	ret

0008124c <__sfvwrite_r>:
   8124c:	30800217 	ldw	r2,8(r6)
   81250:	defff504 	addi	sp,sp,-44
   81254:	df000915 	stw	fp,36(sp)
   81258:	dd800715 	stw	r22,28(sp)
   8125c:	dc800315 	stw	r18,12(sp)
   81260:	dfc00a15 	stw	ra,40(sp)
   81264:	ddc00815 	stw	r23,32(sp)
   81268:	dd400615 	stw	r21,24(sp)
   8126c:	dd000515 	stw	r20,20(sp)
   81270:	dcc00415 	stw	r19,16(sp)
   81274:	dc400215 	stw	r17,8(sp)
   81278:	dc000115 	stw	r16,4(sp)
   8127c:	302d883a 	mov	r22,r6
   81280:	2039883a 	mov	fp,r4
   81284:	2825883a 	mov	r18,r5
   81288:	10001c26 	beq	r2,zero,812fc <__sfvwrite_r+0xb0>
   8128c:	29c0030b 	ldhu	r7,12(r5)
   81290:	3880020c 	andi	r2,r7,8
   81294:	10002726 	beq	r2,zero,81334 <__sfvwrite_r+0xe8>
   81298:	28800417 	ldw	r2,16(r5)
   8129c:	10002526 	beq	r2,zero,81334 <__sfvwrite_r+0xe8>
   812a0:	3880008c 	andi	r2,r7,2
   812a4:	b5400017 	ldw	r21,0(r22)
   812a8:	10002826 	beq	r2,zero,8134c <__sfvwrite_r+0x100>
   812ac:	0021883a 	mov	r16,zero
   812b0:	0023883a 	mov	r17,zero
   812b4:	880d883a 	mov	r6,r17
   812b8:	e009883a 	mov	r4,fp
   812bc:	00810004 	movi	r2,1024
   812c0:	80006e26 	beq	r16,zero,8147c <__sfvwrite_r+0x230>
   812c4:	800f883a 	mov	r7,r16
   812c8:	91400717 	ldw	r5,28(r18)
   812cc:	1400012e 	bgeu	r2,r16,812d4 <__sfvwrite_r+0x88>
   812d0:	100f883a 	mov	r7,r2
   812d4:	90c00917 	ldw	r3,36(r18)
   812d8:	183ee83a 	callr	r3
   812dc:	1007883a 	mov	r3,r2
   812e0:	80a1c83a 	sub	r16,r16,r2
   812e4:	88a3883a 	add	r17,r17,r2
   812e8:	00806d0e 	bge	zero,r2,814a0 <__sfvwrite_r+0x254>
   812ec:	b0800217 	ldw	r2,8(r22)
   812f0:	10c5c83a 	sub	r2,r2,r3
   812f4:	b0800215 	stw	r2,8(r22)
   812f8:	103fee1e 	bne	r2,zero,812b4 <__sfvwrite_r+0x68>
   812fc:	0009883a 	mov	r4,zero
   81300:	2005883a 	mov	r2,r4
   81304:	dfc00a17 	ldw	ra,40(sp)
   81308:	df000917 	ldw	fp,36(sp)
   8130c:	ddc00817 	ldw	r23,32(sp)
   81310:	dd800717 	ldw	r22,28(sp)
   81314:	dd400617 	ldw	r21,24(sp)
   81318:	dd000517 	ldw	r20,20(sp)
   8131c:	dcc00417 	ldw	r19,16(sp)
   81320:	dc800317 	ldw	r18,12(sp)
   81324:	dc400217 	ldw	r17,8(sp)
   81328:	dc000117 	ldw	r16,4(sp)
   8132c:	dec00b04 	addi	sp,sp,44
   81330:	f800283a 	ret
   81334:	00869a00 	call	869a0 <__swsetup_r>
   81338:	1000e41e 	bne	r2,zero,816cc <__sfvwrite_r+0x480>
   8133c:	91c0030b 	ldhu	r7,12(r18)
   81340:	b5400017 	ldw	r21,0(r22)
   81344:	3880008c 	andi	r2,r7,2
   81348:	103fd81e 	bne	r2,zero,812ac <__sfvwrite_r+0x60>
   8134c:	3880004c 	andi	r2,r7,1
   81350:	1005003a 	cmpeq	r2,r2,zero
   81354:	10005726 	beq	r2,zero,814b4 <__sfvwrite_r+0x268>
   81358:	0029883a 	mov	r20,zero
   8135c:	002f883a 	mov	r23,zero
   81360:	a0004226 	beq	r20,zero,8146c <__sfvwrite_r+0x220>
   81364:	3880800c 	andi	r2,r7,512
   81368:	94000217 	ldw	r16,8(r18)
   8136c:	10008b26 	beq	r2,zero,8159c <__sfvwrite_r+0x350>
   81370:	800d883a 	mov	r6,r16
   81374:	a400a536 	bltu	r20,r16,8160c <__sfvwrite_r+0x3c0>
   81378:	3881200c 	andi	r2,r7,1152
   8137c:	10002726 	beq	r2,zero,8141c <__sfvwrite_r+0x1d0>
   81380:	90800517 	ldw	r2,20(r18)
   81384:	92000417 	ldw	r8,16(r18)
   81388:	91400017 	ldw	r5,0(r18)
   8138c:	1087883a 	add	r3,r2,r2
   81390:	1887883a 	add	r3,r3,r2
   81394:	1808d7fa 	srli	r4,r3,31
   81398:	2a21c83a 	sub	r16,r5,r8
   8139c:	80800044 	addi	r2,r16,1
   813a0:	20c9883a 	add	r4,r4,r3
   813a4:	2027d07a 	srai	r19,r4,1
   813a8:	a085883a 	add	r2,r20,r2
   813ac:	980d883a 	mov	r6,r19
   813b0:	9880022e 	bgeu	r19,r2,813bc <__sfvwrite_r+0x170>
   813b4:	1027883a 	mov	r19,r2
   813b8:	100d883a 	mov	r6,r2
   813bc:	3881000c 	andi	r2,r7,1024
   813c0:	1000b826 	beq	r2,zero,816a4 <__sfvwrite_r+0x458>
   813c4:	300b883a 	mov	r5,r6
   813c8:	e009883a 	mov	r4,fp
   813cc:	00819680 	call	81968 <_malloc_r>
   813d0:	10003126 	beq	r2,zero,81498 <__sfvwrite_r+0x24c>
   813d4:	91400417 	ldw	r5,16(r18)
   813d8:	1009883a 	mov	r4,r2
   813dc:	800d883a 	mov	r6,r16
   813e0:	1023883a 	mov	r17,r2
   813e4:	008218c0 	call	8218c <memcpy>
   813e8:	90c0030b 	ldhu	r3,12(r18)
   813ec:	00beffc4 	movi	r2,-1025
   813f0:	1886703a 	and	r3,r3,r2
   813f4:	18c02014 	ori	r3,r3,128
   813f8:	90c0030d 	sth	r3,12(r18)
   813fc:	9c07c83a 	sub	r3,r19,r16
   81400:	8c05883a 	add	r2,r17,r16
   81404:	a00d883a 	mov	r6,r20
   81408:	a021883a 	mov	r16,r20
   8140c:	90800015 	stw	r2,0(r18)
   81410:	90c00215 	stw	r3,8(r18)
   81414:	94400415 	stw	r17,16(r18)
   81418:	94c00515 	stw	r19,20(r18)
   8141c:	91000017 	ldw	r4,0(r18)
   81420:	b80b883a 	mov	r5,r23
   81424:	a023883a 	mov	r17,r20
   81428:	008222c0 	call	8222c <memmove>
   8142c:	90c00217 	ldw	r3,8(r18)
   81430:	90800017 	ldw	r2,0(r18)
   81434:	a027883a 	mov	r19,r20
   81438:	1c07c83a 	sub	r3,r3,r16
   8143c:	1405883a 	add	r2,r2,r16
   81440:	90c00215 	stw	r3,8(r18)
   81444:	a021883a 	mov	r16,r20
   81448:	90800015 	stw	r2,0(r18)
   8144c:	b0800217 	ldw	r2,8(r22)
   81450:	1405c83a 	sub	r2,r2,r16
   81454:	b0800215 	stw	r2,8(r22)
   81458:	103fa826 	beq	r2,zero,812fc <__sfvwrite_r+0xb0>
   8145c:	a469c83a 	sub	r20,r20,r17
   81460:	91c0030b 	ldhu	r7,12(r18)
   81464:	bcef883a 	add	r23,r23,r19
   81468:	a03fbe1e 	bne	r20,zero,81364 <__sfvwrite_r+0x118>
   8146c:	adc00017 	ldw	r23,0(r21)
   81470:	ad000117 	ldw	r20,4(r21)
   81474:	ad400204 	addi	r21,r21,8
   81478:	003fb906 	br	81360 <__sfvwrite_r+0x114>
   8147c:	ac400017 	ldw	r17,0(r21)
   81480:	ac000117 	ldw	r16,4(r21)
   81484:	ad400204 	addi	r21,r21,8
   81488:	003f8a06 	br	812b4 <__sfvwrite_r+0x68>
   8148c:	91400417 	ldw	r5,16(r18)
   81490:	e009883a 	mov	r4,fp
   81494:	0088c800 	call	88c80 <_free_r>
   81498:	00800304 	movi	r2,12
   8149c:	e0800015 	stw	r2,0(fp)
   814a0:	9080030b 	ldhu	r2,12(r18)
   814a4:	013fffc4 	movi	r4,-1
   814a8:	10801014 	ori	r2,r2,64
   814ac:	9080030d 	sth	r2,12(r18)
   814b0:	003f9306 	br	81300 <__sfvwrite_r+0xb4>
   814b4:	0027883a 	mov	r19,zero
   814b8:	002f883a 	mov	r23,zero
   814bc:	d8000015 	stw	zero,0(sp)
   814c0:	0029883a 	mov	r20,zero
   814c4:	98001e26 	beq	r19,zero,81540 <__sfvwrite_r+0x2f4>
   814c8:	d8c00017 	ldw	r3,0(sp)
   814cc:	1804c03a 	cmpne	r2,r3,zero
   814d0:	10005e26 	beq	r2,zero,8164c <__sfvwrite_r+0x400>
   814d4:	9821883a 	mov	r16,r19
   814d8:	a4c0012e 	bgeu	r20,r19,814e0 <__sfvwrite_r+0x294>
   814dc:	a021883a 	mov	r16,r20
   814e0:	91000017 	ldw	r4,0(r18)
   814e4:	90800417 	ldw	r2,16(r18)
   814e8:	91800217 	ldw	r6,8(r18)
   814ec:	91c00517 	ldw	r7,20(r18)
   814f0:	1100022e 	bgeu	r2,r4,814fc <__sfvwrite_r+0x2b0>
   814f4:	31e3883a 	add	r17,r6,r7
   814f8:	8c001616 	blt	r17,r16,81554 <__sfvwrite_r+0x308>
   814fc:	81c03816 	blt	r16,r7,815e0 <__sfvwrite_r+0x394>
   81500:	90c00917 	ldw	r3,36(r18)
   81504:	91400717 	ldw	r5,28(r18)
   81508:	e009883a 	mov	r4,fp
   8150c:	b80d883a 	mov	r6,r23
   81510:	183ee83a 	callr	r3
   81514:	1023883a 	mov	r17,r2
   81518:	00bfe10e 	bge	zero,r2,814a0 <__sfvwrite_r+0x254>
   8151c:	a469c83a 	sub	r20,r20,r17
   81520:	a0001826 	beq	r20,zero,81584 <__sfvwrite_r+0x338>
   81524:	b0800217 	ldw	r2,8(r22)
   81528:	1445c83a 	sub	r2,r2,r17
   8152c:	b0800215 	stw	r2,8(r22)
   81530:	103f7226 	beq	r2,zero,812fc <__sfvwrite_r+0xb0>
   81534:	9c67c83a 	sub	r19,r19,r17
   81538:	bc6f883a 	add	r23,r23,r17
   8153c:	983fe21e 	bne	r19,zero,814c8 <__sfvwrite_r+0x27c>
   81540:	adc00017 	ldw	r23,0(r21)
   81544:	acc00117 	ldw	r19,4(r21)
   81548:	ad400204 	addi	r21,r21,8
   8154c:	d8000015 	stw	zero,0(sp)
   81550:	003fdc06 	br	814c4 <__sfvwrite_r+0x278>
   81554:	b80b883a 	mov	r5,r23
   81558:	880d883a 	mov	r6,r17
   8155c:	008222c0 	call	8222c <memmove>
   81560:	90c00017 	ldw	r3,0(r18)
   81564:	e009883a 	mov	r4,fp
   81568:	900b883a 	mov	r5,r18
   8156c:	1c47883a 	add	r3,r3,r17
   81570:	90c00015 	stw	r3,0(r18)
   81574:	00883440 	call	88344 <_fflush_r>
   81578:	103fc91e 	bne	r2,zero,814a0 <__sfvwrite_r+0x254>
   8157c:	a469c83a 	sub	r20,r20,r17
   81580:	a03fe81e 	bne	r20,zero,81524 <__sfvwrite_r+0x2d8>
   81584:	e009883a 	mov	r4,fp
   81588:	900b883a 	mov	r5,r18
   8158c:	00883440 	call	88344 <_fflush_r>
   81590:	103fc31e 	bne	r2,zero,814a0 <__sfvwrite_r+0x254>
   81594:	d8000015 	stw	zero,0(sp)
   81598:	003fe206 	br	81524 <__sfvwrite_r+0x2d8>
   8159c:	91000017 	ldw	r4,0(r18)
   815a0:	90800417 	ldw	r2,16(r18)
   815a4:	1100022e 	bgeu	r2,r4,815b0 <__sfvwrite_r+0x364>
   815a8:	8023883a 	mov	r17,r16
   815ac:	85003136 	bltu	r16,r20,81674 <__sfvwrite_r+0x428>
   815b0:	91c00517 	ldw	r7,20(r18)
   815b4:	a1c01836 	bltu	r20,r7,81618 <__sfvwrite_r+0x3cc>
   815b8:	90c00917 	ldw	r3,36(r18)
   815bc:	91400717 	ldw	r5,28(r18)
   815c0:	e009883a 	mov	r4,fp
   815c4:	b80d883a 	mov	r6,r23
   815c8:	183ee83a 	callr	r3
   815cc:	1021883a 	mov	r16,r2
   815d0:	00bfb30e 	bge	zero,r2,814a0 <__sfvwrite_r+0x254>
   815d4:	1023883a 	mov	r17,r2
   815d8:	1027883a 	mov	r19,r2
   815dc:	003f9b06 	br	8144c <__sfvwrite_r+0x200>
   815e0:	b80b883a 	mov	r5,r23
   815e4:	800d883a 	mov	r6,r16
   815e8:	008222c0 	call	8222c <memmove>
   815ec:	90c00217 	ldw	r3,8(r18)
   815f0:	90800017 	ldw	r2,0(r18)
   815f4:	8023883a 	mov	r17,r16
   815f8:	1c07c83a 	sub	r3,r3,r16
   815fc:	1405883a 	add	r2,r2,r16
   81600:	90c00215 	stw	r3,8(r18)
   81604:	90800015 	stw	r2,0(r18)
   81608:	003fc406 	br	8151c <__sfvwrite_r+0x2d0>
   8160c:	a00d883a 	mov	r6,r20
   81610:	a021883a 	mov	r16,r20
   81614:	003f8106 	br	8141c <__sfvwrite_r+0x1d0>
   81618:	b80b883a 	mov	r5,r23
   8161c:	a00d883a 	mov	r6,r20
   81620:	008222c0 	call	8222c <memmove>
   81624:	90c00217 	ldw	r3,8(r18)
   81628:	90800017 	ldw	r2,0(r18)
   8162c:	a021883a 	mov	r16,r20
   81630:	1d07c83a 	sub	r3,r3,r20
   81634:	1505883a 	add	r2,r2,r20
   81638:	a023883a 	mov	r17,r20
   8163c:	a027883a 	mov	r19,r20
   81640:	90c00215 	stw	r3,8(r18)
   81644:	90800015 	stw	r2,0(r18)
   81648:	003f8006 	br	8144c <__sfvwrite_r+0x200>
   8164c:	b809883a 	mov	r4,r23
   81650:	01400284 	movi	r5,10
   81654:	980d883a 	mov	r6,r19
   81658:	00820a80 	call	820a8 <memchr>
   8165c:	10001726 	beq	r2,zero,816bc <__sfvwrite_r+0x470>
   81660:	15c5c83a 	sub	r2,r2,r23
   81664:	15000044 	addi	r20,r2,1
   81668:	00800044 	movi	r2,1
   8166c:	d8800015 	stw	r2,0(sp)
   81670:	003f9806 	br	814d4 <__sfvwrite_r+0x288>
   81674:	b80b883a 	mov	r5,r23
   81678:	800d883a 	mov	r6,r16
   8167c:	008222c0 	call	8222c <memmove>
   81680:	90c00017 	ldw	r3,0(r18)
   81684:	e009883a 	mov	r4,fp
   81688:	900b883a 	mov	r5,r18
   8168c:	1c07883a 	add	r3,r3,r16
   81690:	90c00015 	stw	r3,0(r18)
   81694:	8027883a 	mov	r19,r16
   81698:	00883440 	call	88344 <_fflush_r>
   8169c:	103f6b26 	beq	r2,zero,8144c <__sfvwrite_r+0x200>
   816a0:	003f7f06 	br	814a0 <__sfvwrite_r+0x254>
   816a4:	400b883a 	mov	r5,r8
   816a8:	e009883a 	mov	r4,fp
   816ac:	00824b00 	call	824b0 <_realloc_r>
   816b0:	103f7626 	beq	r2,zero,8148c <__sfvwrite_r+0x240>
   816b4:	1023883a 	mov	r17,r2
   816b8:	003f5006 	br	813fc <__sfvwrite_r+0x1b0>
   816bc:	00c00044 	movi	r3,1
   816c0:	9d000044 	addi	r20,r19,1
   816c4:	d8c00015 	stw	r3,0(sp)
   816c8:	003f8206 	br	814d4 <__sfvwrite_r+0x288>
   816cc:	9080030b 	ldhu	r2,12(r18)
   816d0:	00c00244 	movi	r3,9
   816d4:	013fffc4 	movi	r4,-1
   816d8:	10801014 	ori	r2,r2,64
   816dc:	9080030d 	sth	r2,12(r18)
   816e0:	e0c00015 	stw	r3,0(fp)
   816e4:	003f0606 	br	81300 <__sfvwrite_r+0xb4>

000816e8 <_fwrite_r>:
   816e8:	defff604 	addi	sp,sp,-40
   816ec:	dc000515 	stw	r16,20(sp)
   816f0:	d9400015 	stw	r5,0(sp)
   816f4:	2021883a 	mov	r16,r4
   816f8:	300b883a 	mov	r5,r6
   816fc:	3809883a 	mov	r4,r7
   81700:	dcc00815 	stw	r19,32(sp)
   81704:	dc800715 	stw	r18,28(sp)
   81708:	dc400615 	stw	r17,24(sp)
   8170c:	dfc00915 	stw	ra,36(sp)
   81710:	3825883a 	mov	r18,r7
   81714:	3027883a 	mov	r19,r6
   81718:	0080ba00 	call	80ba0 <__mulsi3>
   8171c:	1023883a 	mov	r17,r2
   81720:	00800044 	movi	r2,1
   81724:	d8800315 	stw	r2,12(sp)
   81728:	dc400115 	stw	r17,4(sp)
   8172c:	dc400415 	stw	r17,16(sp)
   81730:	dec00215 	stw	sp,8(sp)
   81734:	80000326 	beq	r16,zero,81744 <_fwrite_r+0x5c>
   81738:	80800e17 	ldw	r2,56(r16)
   8173c:	8009883a 	mov	r4,r16
   81740:	10001226 	beq	r2,zero,8178c <_fwrite_r+0xa4>
   81744:	d9400a17 	ldw	r5,40(sp)
   81748:	8009883a 	mov	r4,r16
   8174c:	d9800204 	addi	r6,sp,8
   81750:	008124c0 	call	8124c <__sfvwrite_r>
   81754:	980b883a 	mov	r5,r19
   81758:	10000426 	beq	r2,zero,8176c <_fwrite_r+0x84>
   8175c:	d9000417 	ldw	r4,16(sp)
   81760:	8909c83a 	sub	r4,r17,r4
   81764:	0080b900 	call	80b90 <__udivsi3>
   81768:	1025883a 	mov	r18,r2
   8176c:	9005883a 	mov	r2,r18
   81770:	dfc00917 	ldw	ra,36(sp)
   81774:	dcc00817 	ldw	r19,32(sp)
   81778:	dc800717 	ldw	r18,28(sp)
   8177c:	dc400617 	ldw	r17,24(sp)
   81780:	dc000517 	ldw	r16,20(sp)
   81784:	dec00a04 	addi	sp,sp,40
   81788:	f800283a 	ret
   8178c:	00885dc0 	call	885dc <__sinit>
   81790:	003fec06 	br	81744 <_fwrite_r+0x5c>

00081794 <fwrite>:
   81794:	00800274 	movhi	r2,9
   81798:	1098bc04 	addi	r2,r2,25328
   8179c:	2017883a 	mov	r11,r4
   817a0:	11000017 	ldw	r4,0(r2)
   817a4:	defffe04 	addi	sp,sp,-8
   817a8:	3013883a 	mov	r9,r6
   817ac:	2805883a 	mov	r2,r5
   817b0:	d9c00015 	stw	r7,0(sp)
   817b4:	580b883a 	mov	r5,r11
   817b8:	100d883a 	mov	r6,r2
   817bc:	480f883a 	mov	r7,r9
   817c0:	dfc00115 	stw	ra,4(sp)
   817c4:	00816e80 	call	816e8 <_fwrite_r>
   817c8:	dfc00117 	ldw	ra,4(sp)
   817cc:	dec00204 	addi	sp,sp,8
   817d0:	f800283a 	ret

000817d4 <__smakebuf_r>:
   817d4:	2880030b 	ldhu	r2,12(r5)
   817d8:	deffed04 	addi	sp,sp,-76
   817dc:	dc401015 	stw	r17,64(sp)
   817e0:	1080008c 	andi	r2,r2,2
   817e4:	dc000f15 	stw	r16,60(sp)
   817e8:	dfc01215 	stw	ra,72(sp)
   817ec:	dc801115 	stw	r18,68(sp)
   817f0:	2821883a 	mov	r16,r5
   817f4:	2023883a 	mov	r17,r4
   817f8:	10000b26 	beq	r2,zero,81828 <__smakebuf_r+0x54>
   817fc:	28c010c4 	addi	r3,r5,67
   81800:	00800044 	movi	r2,1
   81804:	28800515 	stw	r2,20(r5)
   81808:	28c00415 	stw	r3,16(r5)
   8180c:	28c00015 	stw	r3,0(r5)
   81810:	dfc01217 	ldw	ra,72(sp)
   81814:	dc801117 	ldw	r18,68(sp)
   81818:	dc401017 	ldw	r17,64(sp)
   8181c:	dc000f17 	ldw	r16,60(sp)
   81820:	dec01304 	addi	sp,sp,76
   81824:	f800283a 	ret
   81828:	2940038f 	ldh	r5,14(r5)
   8182c:	28002116 	blt	r5,zero,818b4 <__smakebuf_r+0xe0>
   81830:	d80d883a 	mov	r6,sp
   81834:	00811d80 	call	811d8 <_fstat_r>
   81838:	10001e16 	blt	r2,zero,818b4 <__smakebuf_r+0xe0>
   8183c:	d8800117 	ldw	r2,4(sp)
   81840:	00e00014 	movui	r3,32768
   81844:	113c000c 	andi	r4,r2,61440
   81848:	20c03126 	beq	r4,r3,81910 <__smakebuf_r+0x13c>
   8184c:	8080030b 	ldhu	r2,12(r16)
   81850:	00c80004 	movi	r3,8192
   81854:	10820014 	ori	r2,r2,2048
   81858:	8080030d 	sth	r2,12(r16)
   8185c:	20c01e26 	beq	r4,r3,818d8 <__smakebuf_r+0x104>
   81860:	04810004 	movi	r18,1024
   81864:	8809883a 	mov	r4,r17
   81868:	900b883a 	mov	r5,r18
   8186c:	00819680 	call	81968 <_malloc_r>
   81870:	1009883a 	mov	r4,r2
   81874:	10003126 	beq	r2,zero,8193c <__smakebuf_r+0x168>
   81878:	80c0030b 	ldhu	r3,12(r16)
   8187c:	00800274 	movhi	r2,9
   81880:	10a1b004 	addi	r2,r2,-31040
   81884:	88800f15 	stw	r2,60(r17)
   81888:	18c02014 	ori	r3,r3,128
   8188c:	84800515 	stw	r18,20(r16)
   81890:	80c0030d 	sth	r3,12(r16)
   81894:	81000415 	stw	r4,16(r16)
   81898:	81000015 	stw	r4,0(r16)
   8189c:	dfc01217 	ldw	ra,72(sp)
   818a0:	dc801117 	ldw	r18,68(sp)
   818a4:	dc401017 	ldw	r17,64(sp)
   818a8:	dc000f17 	ldw	r16,60(sp)
   818ac:	dec01304 	addi	sp,sp,76
   818b0:	f800283a 	ret
   818b4:	80c0030b 	ldhu	r3,12(r16)
   818b8:	1880200c 	andi	r2,r3,128
   818bc:	10000426 	beq	r2,zero,818d0 <__smakebuf_r+0xfc>
   818c0:	04801004 	movi	r18,64
   818c4:	18820014 	ori	r2,r3,2048
   818c8:	8080030d 	sth	r2,12(r16)
   818cc:	003fe506 	br	81864 <__smakebuf_r+0x90>
   818d0:	04810004 	movi	r18,1024
   818d4:	003ffb06 	br	818c4 <__smakebuf_r+0xf0>
   818d8:	8140038f 	ldh	r5,14(r16)
   818dc:	8809883a 	mov	r4,r17
   818e0:	00891140 	call	89114 <_isatty_r>
   818e4:	103fde26 	beq	r2,zero,81860 <__smakebuf_r+0x8c>
   818e8:	8080030b 	ldhu	r2,12(r16)
   818ec:	80c010c4 	addi	r3,r16,67
   818f0:	04810004 	movi	r18,1024
   818f4:	10800054 	ori	r2,r2,1
   818f8:	8080030d 	sth	r2,12(r16)
   818fc:	00800044 	movi	r2,1
   81900:	80c00415 	stw	r3,16(r16)
   81904:	80800515 	stw	r2,20(r16)
   81908:	80c00015 	stw	r3,0(r16)
   8190c:	003fd506 	br	81864 <__smakebuf_r+0x90>
   81910:	80c00a17 	ldw	r3,40(r16)
   81914:	00800234 	movhi	r2,8
   81918:	108b5e04 	addi	r2,r2,11640
   8191c:	18bfcb1e 	bne	r3,r2,8184c <__smakebuf_r+0x78>
   81920:	8080030b 	ldhu	r2,12(r16)
   81924:	00c10004 	movi	r3,1024
   81928:	1825883a 	mov	r18,r3
   8192c:	10c4b03a 	or	r2,r2,r3
   81930:	8080030d 	sth	r2,12(r16)
   81934:	80c01315 	stw	r3,76(r16)
   81938:	003fca06 	br	81864 <__smakebuf_r+0x90>
   8193c:	8100030b 	ldhu	r4,12(r16)
   81940:	2080800c 	andi	r2,r4,512
   81944:	103fb21e 	bne	r2,zero,81810 <__smakebuf_r+0x3c>
   81948:	80c010c4 	addi	r3,r16,67
   8194c:	21000094 	ori	r4,r4,2
   81950:	00800044 	movi	r2,1
   81954:	80800515 	stw	r2,20(r16)
   81958:	8100030d 	sth	r4,12(r16)
   8195c:	80c00415 	stw	r3,16(r16)
   81960:	80c00015 	stw	r3,0(r16)
   81964:	003faa06 	br	81810 <__smakebuf_r+0x3c>

00081968 <_malloc_r>:
   81968:	defff604 	addi	sp,sp,-40
   8196c:	28c002c4 	addi	r3,r5,11
   81970:	00800584 	movi	r2,22
   81974:	dc800215 	stw	r18,8(sp)
   81978:	dfc00915 	stw	ra,36(sp)
   8197c:	df000815 	stw	fp,32(sp)
   81980:	ddc00715 	stw	r23,28(sp)
   81984:	dd800615 	stw	r22,24(sp)
   81988:	dd400515 	stw	r21,20(sp)
   8198c:	dd000415 	stw	r20,16(sp)
   81990:	dcc00315 	stw	r19,12(sp)
   81994:	dc400115 	stw	r17,4(sp)
   81998:	dc000015 	stw	r16,0(sp)
   8199c:	2025883a 	mov	r18,r4
   819a0:	10c01236 	bltu	r2,r3,819ec <_malloc_r+0x84>
   819a4:	04400404 	movi	r17,16
   819a8:	8940142e 	bgeu	r17,r5,819fc <_malloc_r+0x94>
   819ac:	00800304 	movi	r2,12
   819b0:	0007883a 	mov	r3,zero
   819b4:	90800015 	stw	r2,0(r18)
   819b8:	1805883a 	mov	r2,r3
   819bc:	dfc00917 	ldw	ra,36(sp)
   819c0:	df000817 	ldw	fp,32(sp)
   819c4:	ddc00717 	ldw	r23,28(sp)
   819c8:	dd800617 	ldw	r22,24(sp)
   819cc:	dd400517 	ldw	r21,20(sp)
   819d0:	dd000417 	ldw	r20,16(sp)
   819d4:	dcc00317 	ldw	r19,12(sp)
   819d8:	dc800217 	ldw	r18,8(sp)
   819dc:	dc400117 	ldw	r17,4(sp)
   819e0:	dc000017 	ldw	r16,0(sp)
   819e4:	dec00a04 	addi	sp,sp,40
   819e8:	f800283a 	ret
   819ec:	00bffe04 	movi	r2,-8
   819f0:	18a2703a 	and	r17,r3,r2
   819f4:	883fed16 	blt	r17,zero,819ac <_malloc_r+0x44>
   819f8:	897fec36 	bltu	r17,r5,819ac <_malloc_r+0x44>
   819fc:	9009883a 	mov	r4,r18
   81a00:	00908e80 	call	908e8 <__malloc_lock>
   81a04:	00807dc4 	movi	r2,503
   81a08:	14402b2e 	bgeu	r2,r17,81ab8 <_malloc_r+0x150>
   81a0c:	8806d27a 	srli	r3,r17,9
   81a10:	18003f1e 	bne	r3,zero,81b10 <_malloc_r+0x1a8>
   81a14:	880cd0fa 	srli	r6,r17,3
   81a18:	300490fa 	slli	r2,r6,3
   81a1c:	02c00274 	movhi	r11,9
   81a20:	5ad2e304 	addi	r11,r11,19340
   81a24:	12cb883a 	add	r5,r2,r11
   81a28:	2c000317 	ldw	r16,12(r5)
   81a2c:	580f883a 	mov	r7,r11
   81a30:	2c00041e 	bne	r5,r16,81a44 <_malloc_r+0xdc>
   81a34:	00000a06 	br	81a60 <_malloc_r+0xf8>
   81a38:	1800860e 	bge	r3,zero,81c54 <_malloc_r+0x2ec>
   81a3c:	84000317 	ldw	r16,12(r16)
   81a40:	2c000726 	beq	r5,r16,81a60 <_malloc_r+0xf8>
   81a44:	80800117 	ldw	r2,4(r16)
   81a48:	00ffff04 	movi	r3,-4
   81a4c:	10c8703a 	and	r4,r2,r3
   81a50:	2447c83a 	sub	r3,r4,r17
   81a54:	008003c4 	movi	r2,15
   81a58:	10fff70e 	bge	r2,r3,81a38 <_malloc_r+0xd0>
   81a5c:	31bfffc4 	addi	r6,r6,-1
   81a60:	32400044 	addi	r9,r6,1
   81a64:	02800274 	movhi	r10,9
   81a68:	5292e504 	addi	r10,r10,19348
   81a6c:	54000217 	ldw	r16,8(r10)
   81a70:	8280a026 	beq	r16,r10,81cf4 <_malloc_r+0x38c>
   81a74:	80800117 	ldw	r2,4(r16)
   81a78:	00ffff04 	movi	r3,-4
   81a7c:	10ca703a 	and	r5,r2,r3
   81a80:	2c4dc83a 	sub	r6,r5,r17
   81a84:	008003c4 	movi	r2,15
   81a88:	11808316 	blt	r2,r6,81c98 <_malloc_r+0x330>
   81a8c:	52800315 	stw	r10,12(r10)
   81a90:	52800215 	stw	r10,8(r10)
   81a94:	30002916 	blt	r6,zero,81b3c <_malloc_r+0x1d4>
   81a98:	8147883a 	add	r3,r16,r5
   81a9c:	18800117 	ldw	r2,4(r3)
   81aa0:	9009883a 	mov	r4,r18
   81aa4:	10800054 	ori	r2,r2,1
   81aa8:	18800115 	stw	r2,4(r3)
   81aac:	00909080 	call	90908 <__malloc_unlock>
   81ab0:	80c00204 	addi	r3,r16,8
   81ab4:	003fc006 	br	819b8 <_malloc_r+0x50>
   81ab8:	02c00274 	movhi	r11,9
   81abc:	5ad2e304 	addi	r11,r11,19340
   81ac0:	8ac5883a 	add	r2,r17,r11
   81ac4:	14000317 	ldw	r16,12(r2)
   81ac8:	580f883a 	mov	r7,r11
   81acc:	8806d0fa 	srli	r3,r17,3
   81ad0:	14006c26 	beq	r2,r16,81c84 <_malloc_r+0x31c>
   81ad4:	80c00117 	ldw	r3,4(r16)
   81ad8:	00bfff04 	movi	r2,-4
   81adc:	81800317 	ldw	r6,12(r16)
   81ae0:	1886703a 	and	r3,r3,r2
   81ae4:	80c7883a 	add	r3,r16,r3
   81ae8:	18800117 	ldw	r2,4(r3)
   81aec:	81400217 	ldw	r5,8(r16)
   81af0:	9009883a 	mov	r4,r18
   81af4:	10800054 	ori	r2,r2,1
   81af8:	18800115 	stw	r2,4(r3)
   81afc:	31400215 	stw	r5,8(r6)
   81b00:	29800315 	stw	r6,12(r5)
   81b04:	00909080 	call	90908 <__malloc_unlock>
   81b08:	80c00204 	addi	r3,r16,8
   81b0c:	003faa06 	br	819b8 <_malloc_r+0x50>
   81b10:	00800104 	movi	r2,4
   81b14:	10c0052e 	bgeu	r2,r3,81b2c <_malloc_r+0x1c4>
   81b18:	00800504 	movi	r2,20
   81b1c:	10c07836 	bltu	r2,r3,81d00 <_malloc_r+0x398>
   81b20:	198016c4 	addi	r6,r3,91
   81b24:	300490fa 	slli	r2,r6,3
   81b28:	003fbc06 	br	81a1c <_malloc_r+0xb4>
   81b2c:	8804d1ba 	srli	r2,r17,6
   81b30:	11800e04 	addi	r6,r2,56
   81b34:	300490fa 	slli	r2,r6,3
   81b38:	003fb806 	br	81a1c <_malloc_r+0xb4>
   81b3c:	00807fc4 	movi	r2,511
   81b40:	1140bb36 	bltu	r2,r5,81e30 <_malloc_r+0x4c8>
   81b44:	2806d0fa 	srli	r3,r5,3
   81b48:	573ffe04 	addi	fp,r10,-8
   81b4c:	00800044 	movi	r2,1
   81b50:	180890fa 	slli	r4,r3,3
   81b54:	1807d0ba 	srai	r3,r3,2
   81b58:	e1c00117 	ldw	r7,4(fp)
   81b5c:	5909883a 	add	r4,r11,r4
   81b60:	21400217 	ldw	r5,8(r4)
   81b64:	10c4983a 	sll	r2,r2,r3
   81b68:	81000315 	stw	r4,12(r16)
   81b6c:	81400215 	stw	r5,8(r16)
   81b70:	388eb03a 	or	r7,r7,r2
   81b74:	2c000315 	stw	r16,12(r5)
   81b78:	24000215 	stw	r16,8(r4)
   81b7c:	e1c00115 	stw	r7,4(fp)
   81b80:	4807883a 	mov	r3,r9
   81b84:	4800cd16 	blt	r9,zero,81ebc <_malloc_r+0x554>
   81b88:	1807d0ba 	srai	r3,r3,2
   81b8c:	00800044 	movi	r2,1
   81b90:	10c8983a 	sll	r4,r2,r3
   81b94:	39004436 	bltu	r7,r4,81ca8 <_malloc_r+0x340>
   81b98:	21c4703a 	and	r2,r4,r7
   81b9c:	10000a1e 	bne	r2,zero,81bc8 <_malloc_r+0x260>
   81ba0:	2109883a 	add	r4,r4,r4
   81ba4:	00bfff04 	movi	r2,-4
   81ba8:	4884703a 	and	r2,r9,r2
   81bac:	3906703a 	and	r3,r7,r4
   81bb0:	12400104 	addi	r9,r2,4
   81bb4:	1800041e 	bne	r3,zero,81bc8 <_malloc_r+0x260>
   81bb8:	2109883a 	add	r4,r4,r4
   81bbc:	3904703a 	and	r2,r7,r4
   81bc0:	4a400104 	addi	r9,r9,4
   81bc4:	103ffc26 	beq	r2,zero,81bb8 <_malloc_r+0x250>
   81bc8:	480490fa 	slli	r2,r9,3
   81bcc:	4819883a 	mov	r12,r9
   81bd0:	023fff04 	movi	r8,-4
   81bd4:	589b883a 	add	r13,r11,r2
   81bd8:	6807883a 	mov	r3,r13
   81bdc:	014003c4 	movi	r5,15
   81be0:	1c000317 	ldw	r16,12(r3)
   81be4:	1c00041e 	bne	r3,r16,81bf8 <_malloc_r+0x290>
   81be8:	0000a706 	br	81e88 <_malloc_r+0x520>
   81bec:	3000ab0e 	bge	r6,zero,81e9c <_malloc_r+0x534>
   81bf0:	84000317 	ldw	r16,12(r16)
   81bf4:	1c00a426 	beq	r3,r16,81e88 <_malloc_r+0x520>
   81bf8:	80800117 	ldw	r2,4(r16)
   81bfc:	1204703a 	and	r2,r2,r8
   81c00:	144dc83a 	sub	r6,r2,r17
   81c04:	29bff90e 	bge	r5,r6,81bec <_malloc_r+0x284>
   81c08:	81000317 	ldw	r4,12(r16)
   81c0c:	80c00217 	ldw	r3,8(r16)
   81c10:	89400054 	ori	r5,r17,1
   81c14:	8445883a 	add	r2,r16,r17
   81c18:	20c00215 	stw	r3,8(r4)
   81c1c:	19000315 	stw	r4,12(r3)
   81c20:	81400115 	stw	r5,4(r16)
   81c24:	1187883a 	add	r3,r2,r6
   81c28:	31000054 	ori	r4,r6,1
   81c2c:	50800315 	stw	r2,12(r10)
   81c30:	50800215 	stw	r2,8(r10)
   81c34:	19800015 	stw	r6,0(r3)
   81c38:	11000115 	stw	r4,4(r2)
   81c3c:	12800215 	stw	r10,8(r2)
   81c40:	12800315 	stw	r10,12(r2)
   81c44:	9009883a 	mov	r4,r18
   81c48:	00909080 	call	90908 <__malloc_unlock>
   81c4c:	80c00204 	addi	r3,r16,8
   81c50:	003f5906 	br	819b8 <_malloc_r+0x50>
   81c54:	8109883a 	add	r4,r16,r4
   81c58:	20800117 	ldw	r2,4(r4)
   81c5c:	80c00217 	ldw	r3,8(r16)
   81c60:	81400317 	ldw	r5,12(r16)
   81c64:	10800054 	ori	r2,r2,1
   81c68:	20800115 	stw	r2,4(r4)
   81c6c:	28c00215 	stw	r3,8(r5)
   81c70:	19400315 	stw	r5,12(r3)
   81c74:	9009883a 	mov	r4,r18
   81c78:	00909080 	call	90908 <__malloc_unlock>
   81c7c:	80c00204 	addi	r3,r16,8
   81c80:	003f4d06 	br	819b8 <_malloc_r+0x50>
   81c84:	80800204 	addi	r2,r16,8
   81c88:	14000317 	ldw	r16,12(r2)
   81c8c:	143f911e 	bne	r2,r16,81ad4 <_malloc_r+0x16c>
   81c90:	1a400084 	addi	r9,r3,2
   81c94:	003f7306 	br	81a64 <_malloc_r+0xfc>
   81c98:	88c00054 	ori	r3,r17,1
   81c9c:	8445883a 	add	r2,r16,r17
   81ca0:	80c00115 	stw	r3,4(r16)
   81ca4:	003fdf06 	br	81c24 <_malloc_r+0x2bc>
   81ca8:	e4000217 	ldw	r16,8(fp)
   81cac:	00bfff04 	movi	r2,-4
   81cb0:	80c00117 	ldw	r3,4(r16)
   81cb4:	802d883a 	mov	r22,r16
   81cb8:	18aa703a 	and	r21,r3,r2
   81cbc:	ac401636 	bltu	r21,r17,81d18 <_malloc_r+0x3b0>
   81cc0:	ac49c83a 	sub	r4,r21,r17
   81cc4:	008003c4 	movi	r2,15
   81cc8:	1100130e 	bge	r2,r4,81d18 <_malloc_r+0x3b0>
   81ccc:	88800054 	ori	r2,r17,1
   81cd0:	8447883a 	add	r3,r16,r17
   81cd4:	80800115 	stw	r2,4(r16)
   81cd8:	20800054 	ori	r2,r4,1
   81cdc:	18800115 	stw	r2,4(r3)
   81ce0:	e0c00215 	stw	r3,8(fp)
   81ce4:	9009883a 	mov	r4,r18
   81ce8:	00909080 	call	90908 <__malloc_unlock>
   81cec:	80c00204 	addi	r3,r16,8
   81cf0:	003f3106 	br	819b8 <_malloc_r+0x50>
   81cf4:	39c00117 	ldw	r7,4(r7)
   81cf8:	573ffe04 	addi	fp,r10,-8
   81cfc:	003fa006 	br	81b80 <_malloc_r+0x218>
   81d00:	00801504 	movi	r2,84
   81d04:	10c06736 	bltu	r2,r3,81ea4 <_malloc_r+0x53c>
   81d08:	8804d33a 	srli	r2,r17,12
   81d0c:	11801b84 	addi	r6,r2,110
   81d10:	300490fa 	slli	r2,r6,3
   81d14:	003f4106 	br	81a1c <_malloc_r+0xb4>
   81d18:	d0a6fe17 	ldw	r2,-25608(gp)
   81d1c:	d0e00317 	ldw	r3,-32756(gp)
   81d20:	053fffc4 	movi	r20,-1
   81d24:	10800404 	addi	r2,r2,16
   81d28:	88a7883a 	add	r19,r17,r2
   81d2c:	1d000326 	beq	r3,r20,81d3c <_malloc_r+0x3d4>
   81d30:	98c3ffc4 	addi	r3,r19,4095
   81d34:	00bc0004 	movi	r2,-4096
   81d38:	18a6703a 	and	r19,r3,r2
   81d3c:	9009883a 	mov	r4,r18
   81d40:	980b883a 	mov	r5,r19
   81d44:	0082c840 	call	82c84 <_sbrk_r>
   81d48:	1009883a 	mov	r4,r2
   81d4c:	15000426 	beq	r2,r20,81d60 <_malloc_r+0x3f8>
   81d50:	854b883a 	add	r5,r16,r21
   81d54:	1029883a 	mov	r20,r2
   81d58:	11405a2e 	bgeu	r2,r5,81ec4 <_malloc_r+0x55c>
   81d5c:	87000c26 	beq	r16,fp,81d90 <_malloc_r+0x428>
   81d60:	e4000217 	ldw	r16,8(fp)
   81d64:	80c00117 	ldw	r3,4(r16)
   81d68:	00bfff04 	movi	r2,-4
   81d6c:	1884703a 	and	r2,r3,r2
   81d70:	14400336 	bltu	r2,r17,81d80 <_malloc_r+0x418>
   81d74:	1449c83a 	sub	r4,r2,r17
   81d78:	008003c4 	movi	r2,15
   81d7c:	113fd316 	blt	r2,r4,81ccc <_malloc_r+0x364>
   81d80:	9009883a 	mov	r4,r18
   81d84:	00909080 	call	90908 <__malloc_unlock>
   81d88:	0007883a 	mov	r3,zero
   81d8c:	003f0a06 	br	819b8 <_malloc_r+0x50>
   81d90:	05c00274 	movhi	r23,9
   81d94:	bddfc804 	addi	r23,r23,32544
   81d98:	b8800017 	ldw	r2,0(r23)
   81d9c:	988d883a 	add	r6,r19,r2
   81da0:	b9800015 	stw	r6,0(r23)
   81da4:	d0e00317 	ldw	r3,-32756(gp)
   81da8:	00bfffc4 	movi	r2,-1
   81dac:	18808e26 	beq	r3,r2,81fe8 <_malloc_r+0x680>
   81db0:	2145c83a 	sub	r2,r4,r5
   81db4:	3085883a 	add	r2,r6,r2
   81db8:	b8800015 	stw	r2,0(r23)
   81dbc:	20c001cc 	andi	r3,r4,7
   81dc0:	18005f1e 	bne	r3,zero,81f40 <_malloc_r+0x5d8>
   81dc4:	000b883a 	mov	r5,zero
   81dc8:	a4c5883a 	add	r2,r20,r19
   81dcc:	1083ffcc 	andi	r2,r2,4095
   81dd0:	00c40004 	movi	r3,4096
   81dd4:	1887c83a 	sub	r3,r3,r2
   81dd8:	28e7883a 	add	r19,r5,r3
   81ddc:	9009883a 	mov	r4,r18
   81de0:	980b883a 	mov	r5,r19
   81de4:	0082c840 	call	82c84 <_sbrk_r>
   81de8:	1007883a 	mov	r3,r2
   81dec:	00bfffc4 	movi	r2,-1
   81df0:	18807a26 	beq	r3,r2,81fdc <_malloc_r+0x674>
   81df4:	1d05c83a 	sub	r2,r3,r20
   81df8:	9885883a 	add	r2,r19,r2
   81dfc:	10c00054 	ori	r3,r2,1
   81e00:	b8800017 	ldw	r2,0(r23)
   81e04:	a021883a 	mov	r16,r20
   81e08:	a0c00115 	stw	r3,4(r20)
   81e0c:	9885883a 	add	r2,r19,r2
   81e10:	b8800015 	stw	r2,0(r23)
   81e14:	e5000215 	stw	r20,8(fp)
   81e18:	b7003626 	beq	r22,fp,81ef4 <_malloc_r+0x58c>
   81e1c:	018003c4 	movi	r6,15
   81e20:	35404b36 	bltu	r6,r21,81f50 <_malloc_r+0x5e8>
   81e24:	00800044 	movi	r2,1
   81e28:	a0800115 	stw	r2,4(r20)
   81e2c:	003fcd06 	br	81d64 <_malloc_r+0x3fc>
   81e30:	2808d27a 	srli	r4,r5,9
   81e34:	2000371e 	bne	r4,zero,81f14 <_malloc_r+0x5ac>
   81e38:	2808d0fa 	srli	r4,r5,3
   81e3c:	200690fa 	slli	r3,r4,3
   81e40:	1ad1883a 	add	r8,r3,r11
   81e44:	41800217 	ldw	r6,8(r8)
   81e48:	41805b26 	beq	r8,r6,81fb8 <_malloc_r+0x650>
   81e4c:	30800117 	ldw	r2,4(r6)
   81e50:	00ffff04 	movi	r3,-4
   81e54:	10c4703a 	and	r2,r2,r3
   81e58:	2880022e 	bgeu	r5,r2,81e64 <_malloc_r+0x4fc>
   81e5c:	31800217 	ldw	r6,8(r6)
   81e60:	41bffa1e 	bne	r8,r6,81e4c <_malloc_r+0x4e4>
   81e64:	32000317 	ldw	r8,12(r6)
   81e68:	39c00117 	ldw	r7,4(r7)
   81e6c:	82000315 	stw	r8,12(r16)
   81e70:	81800215 	stw	r6,8(r16)
   81e74:	07000274 	movhi	fp,9
   81e78:	e712e304 	addi	fp,fp,19340
   81e7c:	34000315 	stw	r16,12(r6)
   81e80:	44000215 	stw	r16,8(r8)
   81e84:	003f3e06 	br	81b80 <_malloc_r+0x218>
   81e88:	63000044 	addi	r12,r12,1
   81e8c:	608000cc 	andi	r2,r12,3
   81e90:	10005d26 	beq	r2,zero,82008 <_malloc_r+0x6a0>
   81e94:	18c00204 	addi	r3,r3,8
   81e98:	003f5106 	br	81be0 <_malloc_r+0x278>
   81e9c:	8089883a 	add	r4,r16,r2
   81ea0:	003f6d06 	br	81c58 <_malloc_r+0x2f0>
   81ea4:	00805504 	movi	r2,340
   81ea8:	10c02036 	bltu	r2,r3,81f2c <_malloc_r+0x5c4>
   81eac:	8804d3fa 	srli	r2,r17,15
   81eb0:	11801dc4 	addi	r6,r2,119
   81eb4:	300490fa 	slli	r2,r6,3
   81eb8:	003ed806 	br	81a1c <_malloc_r+0xb4>
   81ebc:	48c000c4 	addi	r3,r9,3
   81ec0:	003f3106 	br	81b88 <_malloc_r+0x220>
   81ec4:	05c00274 	movhi	r23,9
   81ec8:	bddfc804 	addi	r23,r23,32544
   81ecc:	b8800017 	ldw	r2,0(r23)
   81ed0:	988d883a 	add	r6,r19,r2
   81ed4:	b9800015 	stw	r6,0(r23)
   81ed8:	293fb21e 	bne	r5,r4,81da4 <_malloc_r+0x43c>
   81edc:	2083ffcc 	andi	r2,r4,4095
   81ee0:	103fb01e 	bne	r2,zero,81da4 <_malloc_r+0x43c>
   81ee4:	e4000217 	ldw	r16,8(fp)
   81ee8:	9d45883a 	add	r2,r19,r21
   81eec:	10800054 	ori	r2,r2,1
   81ef0:	80800115 	stw	r2,4(r16)
   81ef4:	b8c00017 	ldw	r3,0(r23)
   81ef8:	d0a6ff17 	ldw	r2,-25604(gp)
   81efc:	10c0012e 	bgeu	r2,r3,81f04 <_malloc_r+0x59c>
   81f00:	d0e6ff15 	stw	r3,-25604(gp)
   81f04:	d0a70017 	ldw	r2,-25600(gp)
   81f08:	10ff962e 	bgeu	r2,r3,81d64 <_malloc_r+0x3fc>
   81f0c:	d0e70015 	stw	r3,-25600(gp)
   81f10:	003f9406 	br	81d64 <_malloc_r+0x3fc>
   81f14:	00800104 	movi	r2,4
   81f18:	11001e36 	bltu	r2,r4,81f94 <_malloc_r+0x62c>
   81f1c:	2804d1ba 	srli	r2,r5,6
   81f20:	11000e04 	addi	r4,r2,56
   81f24:	200690fa 	slli	r3,r4,3
   81f28:	003fc506 	br	81e40 <_malloc_r+0x4d8>
   81f2c:	00815504 	movi	r2,1364
   81f30:	10c01d2e 	bgeu	r2,r3,81fa8 <_malloc_r+0x640>
   81f34:	01801f84 	movi	r6,126
   81f38:	0080fc04 	movi	r2,1008
   81f3c:	003eb706 	br	81a1c <_malloc_r+0xb4>
   81f40:	00800204 	movi	r2,8
   81f44:	10cbc83a 	sub	r5,r2,r3
   81f48:	2169883a 	add	r20,r4,r5
   81f4c:	003f9e06 	br	81dc8 <_malloc_r+0x460>
   81f50:	00bffe04 	movi	r2,-8
   81f54:	a93ffd04 	addi	r4,r21,-12
   81f58:	2088703a 	and	r4,r4,r2
   81f5c:	b10b883a 	add	r5,r22,r4
   81f60:	00c00144 	movi	r3,5
   81f64:	28c00215 	stw	r3,8(r5)
   81f68:	28c00115 	stw	r3,4(r5)
   81f6c:	b0800117 	ldw	r2,4(r22)
   81f70:	1080004c 	andi	r2,r2,1
   81f74:	2084b03a 	or	r2,r4,r2
   81f78:	b0800115 	stw	r2,4(r22)
   81f7c:	313fdd2e 	bgeu	r6,r4,81ef4 <_malloc_r+0x58c>
   81f80:	b1400204 	addi	r5,r22,8
   81f84:	9009883a 	mov	r4,r18
   81f88:	0088c800 	call	88c80 <_free_r>
   81f8c:	e4000217 	ldw	r16,8(fp)
   81f90:	003fd806 	br	81ef4 <_malloc_r+0x58c>
   81f94:	00800504 	movi	r2,20
   81f98:	11001536 	bltu	r2,r4,81ff0 <_malloc_r+0x688>
   81f9c:	210016c4 	addi	r4,r4,91
   81fa0:	200690fa 	slli	r3,r4,3
   81fa4:	003fa606 	br	81e40 <_malloc_r+0x4d8>
   81fa8:	8804d4ba 	srli	r2,r17,18
   81fac:	11801f04 	addi	r6,r2,124
   81fb0:	300490fa 	slli	r2,r6,3
   81fb4:	003e9906 	br	81a1c <_malloc_r+0xb4>
   81fb8:	2009d0ba 	srai	r4,r4,2
   81fbc:	01400274 	movhi	r5,9
   81fc0:	2952e304 	addi	r5,r5,19340
   81fc4:	00c00044 	movi	r3,1
   81fc8:	28800117 	ldw	r2,4(r5)
   81fcc:	1906983a 	sll	r3,r3,r4
   81fd0:	10c4b03a 	or	r2,r2,r3
   81fd4:	28800115 	stw	r2,4(r5)
   81fd8:	003fa306 	br	81e68 <_malloc_r+0x500>
   81fdc:	0027883a 	mov	r19,zero
   81fe0:	00c00044 	movi	r3,1
   81fe4:	003f8606 	br	81e00 <_malloc_r+0x498>
   81fe8:	d1200315 	stw	r4,-32756(gp)
   81fec:	003f7306 	br	81dbc <_malloc_r+0x454>
   81ff0:	00801504 	movi	r2,84
   81ff4:	11001936 	bltu	r2,r4,8205c <_malloc_r+0x6f4>
   81ff8:	2804d33a 	srli	r2,r5,12
   81ffc:	11001b84 	addi	r4,r2,110
   82000:	200690fa 	slli	r3,r4,3
   82004:	003f8e06 	br	81e40 <_malloc_r+0x4d8>
   82008:	480b883a 	mov	r5,r9
   8200c:	6807883a 	mov	r3,r13
   82010:	288000cc 	andi	r2,r5,3
   82014:	18fffe04 	addi	r3,r3,-8
   82018:	297fffc4 	addi	r5,r5,-1
   8201c:	10001526 	beq	r2,zero,82074 <_malloc_r+0x70c>
   82020:	18800217 	ldw	r2,8(r3)
   82024:	10fffa26 	beq	r2,r3,82010 <_malloc_r+0x6a8>
   82028:	2109883a 	add	r4,r4,r4
   8202c:	393f1e36 	bltu	r7,r4,81ca8 <_malloc_r+0x340>
   82030:	203f1d26 	beq	r4,zero,81ca8 <_malloc_r+0x340>
   82034:	21c4703a 	and	r2,r4,r7
   82038:	10000226 	beq	r2,zero,82044 <_malloc_r+0x6dc>
   8203c:	6013883a 	mov	r9,r12
   82040:	003ee106 	br	81bc8 <_malloc_r+0x260>
   82044:	2109883a 	add	r4,r4,r4
   82048:	3904703a 	and	r2,r7,r4
   8204c:	63000104 	addi	r12,r12,4
   82050:	103ffc26 	beq	r2,zero,82044 <_malloc_r+0x6dc>
   82054:	6013883a 	mov	r9,r12
   82058:	003edb06 	br	81bc8 <_malloc_r+0x260>
   8205c:	00805504 	movi	r2,340
   82060:	11000836 	bltu	r2,r4,82084 <_malloc_r+0x71c>
   82064:	2804d3fa 	srli	r2,r5,15
   82068:	11001dc4 	addi	r4,r2,119
   8206c:	200690fa 	slli	r3,r4,3
   82070:	003f7306 	br	81e40 <_malloc_r+0x4d8>
   82074:	0104303a 	nor	r2,zero,r4
   82078:	388e703a 	and	r7,r7,r2
   8207c:	e1c00115 	stw	r7,4(fp)
   82080:	003fe906 	br	82028 <_malloc_r+0x6c0>
   82084:	00815504 	movi	r2,1364
   82088:	1100032e 	bgeu	r2,r4,82098 <_malloc_r+0x730>
   8208c:	01001f84 	movi	r4,126
   82090:	00c0fc04 	movi	r3,1008
   82094:	003f6a06 	br	81e40 <_malloc_r+0x4d8>
   82098:	2804d4ba 	srli	r2,r5,18
   8209c:	11001f04 	addi	r4,r2,124
   820a0:	200690fa 	slli	r3,r4,3
   820a4:	003f6606 	br	81e40 <_malloc_r+0x4d8>

000820a8 <memchr>:
   820a8:	008000c4 	movi	r2,3
   820ac:	29403fcc 	andi	r5,r5,255
   820b0:	2007883a 	mov	r3,r4
   820b4:	1180022e 	bgeu	r2,r6,820c0 <memchr+0x18>
   820b8:	2084703a 	and	r2,r4,r2
   820bc:	10000b26 	beq	r2,zero,820ec <memchr+0x44>
   820c0:	313fffc4 	addi	r4,r6,-1
   820c4:	3000051e 	bne	r6,zero,820dc <memchr+0x34>
   820c8:	00002c06 	br	8217c <memchr+0xd4>
   820cc:	213fffc4 	addi	r4,r4,-1
   820d0:	00bfffc4 	movi	r2,-1
   820d4:	18c00044 	addi	r3,r3,1
   820d8:	20802826 	beq	r4,r2,8217c <memchr+0xd4>
   820dc:	18800003 	ldbu	r2,0(r3)
   820e0:	28bffa1e 	bne	r5,r2,820cc <memchr+0x24>
   820e4:	1805883a 	mov	r2,r3
   820e8:	f800283a 	ret
   820ec:	0011883a 	mov	r8,zero
   820f0:	0007883a 	mov	r3,zero
   820f4:	01c00104 	movi	r7,4
   820f8:	4004923a 	slli	r2,r8,8
   820fc:	18c00044 	addi	r3,r3,1
   82100:	1151883a 	add	r8,r2,r5
   82104:	19fffc1e 	bne	r3,r7,820f8 <memchr+0x50>
   82108:	02bfbff4 	movhi	r10,65279
   8210c:	52bfbfc4 	addi	r10,r10,-257
   82110:	02602074 	movhi	r9,32897
   82114:	4a602004 	addi	r9,r9,-32640
   82118:	02c000c4 	movi	r11,3
   8211c:	20800017 	ldw	r2,0(r4)
   82120:	31bfff04 	addi	r6,r6,-4
   82124:	200f883a 	mov	r7,r4
   82128:	1204f03a 	xor	r2,r2,r8
   8212c:	1287883a 	add	r3,r2,r10
   82130:	1a46703a 	and	r3,r3,r9
   82134:	0084303a 	nor	r2,zero,r2
   82138:	10c4703a 	and	r2,r2,r3
   8213c:	10000b26 	beq	r2,zero,8216c <memchr+0xc4>
   82140:	20800003 	ldbu	r2,0(r4)
   82144:	28800f26 	beq	r5,r2,82184 <memchr+0xdc>
   82148:	20800043 	ldbu	r2,1(r4)
   8214c:	21c00044 	addi	r7,r4,1
   82150:	28800c26 	beq	r5,r2,82184 <memchr+0xdc>
   82154:	20800083 	ldbu	r2,2(r4)
   82158:	21c00084 	addi	r7,r4,2
   8215c:	28800926 	beq	r5,r2,82184 <memchr+0xdc>
   82160:	208000c3 	ldbu	r2,3(r4)
   82164:	21c000c4 	addi	r7,r4,3
   82168:	28800626 	beq	r5,r2,82184 <memchr+0xdc>
   8216c:	21000104 	addi	r4,r4,4
   82170:	59bfea36 	bltu	r11,r6,8211c <memchr+0x74>
   82174:	2007883a 	mov	r3,r4
   82178:	003fd106 	br	820c0 <memchr+0x18>
   8217c:	0005883a 	mov	r2,zero
   82180:	f800283a 	ret
   82184:	3805883a 	mov	r2,r7
   82188:	f800283a 	ret

0008218c <memcpy>:
   8218c:	01c003c4 	movi	r7,15
   82190:	2007883a 	mov	r3,r4
   82194:	3980032e 	bgeu	r7,r6,821a4 <memcpy+0x18>
   82198:	2904b03a 	or	r2,r5,r4
   8219c:	108000cc 	andi	r2,r2,3
   821a0:	10000926 	beq	r2,zero,821c8 <memcpy+0x3c>
   821a4:	30000626 	beq	r6,zero,821c0 <memcpy+0x34>
   821a8:	30cd883a 	add	r6,r6,r3
   821ac:	28800003 	ldbu	r2,0(r5)
   821b0:	29400044 	addi	r5,r5,1
   821b4:	18800005 	stb	r2,0(r3)
   821b8:	18c00044 	addi	r3,r3,1
   821bc:	30fffb1e 	bne	r6,r3,821ac <memcpy+0x20>
   821c0:	2005883a 	mov	r2,r4
   821c4:	f800283a 	ret
   821c8:	3811883a 	mov	r8,r7
   821cc:	200f883a 	mov	r7,r4
   821d0:	28c00017 	ldw	r3,0(r5)
   821d4:	31bffc04 	addi	r6,r6,-16
   821d8:	38c00015 	stw	r3,0(r7)
   821dc:	28800117 	ldw	r2,4(r5)
   821e0:	38800115 	stw	r2,4(r7)
   821e4:	28c00217 	ldw	r3,8(r5)
   821e8:	38c00215 	stw	r3,8(r7)
   821ec:	28800317 	ldw	r2,12(r5)
   821f0:	29400404 	addi	r5,r5,16
   821f4:	38800315 	stw	r2,12(r7)
   821f8:	39c00404 	addi	r7,r7,16
   821fc:	41bff436 	bltu	r8,r6,821d0 <memcpy+0x44>
   82200:	008000c4 	movi	r2,3
   82204:	1180072e 	bgeu	r2,r6,82224 <memcpy+0x98>
   82208:	1007883a 	mov	r3,r2
   8220c:	28800017 	ldw	r2,0(r5)
   82210:	31bfff04 	addi	r6,r6,-4
   82214:	29400104 	addi	r5,r5,4
   82218:	38800015 	stw	r2,0(r7)
   8221c:	39c00104 	addi	r7,r7,4
   82220:	19bffa36 	bltu	r3,r6,8220c <memcpy+0x80>
   82224:	3807883a 	mov	r3,r7
   82228:	003fde06 	br	821a4 <memcpy+0x18>

0008222c <memmove>:
   8222c:	2807883a 	mov	r3,r5
   82230:	2011883a 	mov	r8,r4
   82234:	29000c2e 	bgeu	r5,r4,82268 <memmove+0x3c>
   82238:	298f883a 	add	r7,r5,r6
   8223c:	21c00a2e 	bgeu	r4,r7,82268 <memmove+0x3c>
   82240:	30000726 	beq	r6,zero,82260 <memmove+0x34>
   82244:	2187883a 	add	r3,r4,r6
   82248:	198dc83a 	sub	r6,r3,r6
   8224c:	39ffffc4 	addi	r7,r7,-1
   82250:	38800003 	ldbu	r2,0(r7)
   82254:	18ffffc4 	addi	r3,r3,-1
   82258:	18800005 	stb	r2,0(r3)
   8225c:	19bffb1e 	bne	r3,r6,8224c <memmove+0x20>
   82260:	2005883a 	mov	r2,r4
   82264:	f800283a 	ret
   82268:	01c003c4 	movi	r7,15
   8226c:	39800a36 	bltu	r7,r6,82298 <memmove+0x6c>
   82270:	303ffb26 	beq	r6,zero,82260 <memmove+0x34>
   82274:	400f883a 	mov	r7,r8
   82278:	320d883a 	add	r6,r6,r8
   8227c:	28800003 	ldbu	r2,0(r5)
   82280:	29400044 	addi	r5,r5,1
   82284:	38800005 	stb	r2,0(r7)
   82288:	39c00044 	addi	r7,r7,1
   8228c:	39bffb1e 	bne	r7,r6,8227c <memmove+0x50>
   82290:	2005883a 	mov	r2,r4
   82294:	f800283a 	ret
   82298:	1904b03a 	or	r2,r3,r4
   8229c:	108000cc 	andi	r2,r2,3
   822a0:	103ff31e 	bne	r2,zero,82270 <memmove+0x44>
   822a4:	3811883a 	mov	r8,r7
   822a8:	180b883a 	mov	r5,r3
   822ac:	200f883a 	mov	r7,r4
   822b0:	28c00017 	ldw	r3,0(r5)
   822b4:	31bffc04 	addi	r6,r6,-16
   822b8:	38c00015 	stw	r3,0(r7)
   822bc:	28800117 	ldw	r2,4(r5)
   822c0:	38800115 	stw	r2,4(r7)
   822c4:	28c00217 	ldw	r3,8(r5)
   822c8:	38c00215 	stw	r3,8(r7)
   822cc:	28800317 	ldw	r2,12(r5)
   822d0:	29400404 	addi	r5,r5,16
   822d4:	38800315 	stw	r2,12(r7)
   822d8:	39c00404 	addi	r7,r7,16
   822dc:	41bff436 	bltu	r8,r6,822b0 <memmove+0x84>
   822e0:	008000c4 	movi	r2,3
   822e4:	1180072e 	bgeu	r2,r6,82304 <memmove+0xd8>
   822e8:	1007883a 	mov	r3,r2
   822ec:	28800017 	ldw	r2,0(r5)
   822f0:	31bfff04 	addi	r6,r6,-4
   822f4:	29400104 	addi	r5,r5,4
   822f8:	38800015 	stw	r2,0(r7)
   822fc:	39c00104 	addi	r7,r7,4
   82300:	19bffa36 	bltu	r3,r6,822ec <memmove+0xc0>
   82304:	3811883a 	mov	r8,r7
   82308:	003fd906 	br	82270 <memmove+0x44>

0008230c <_open_r>:
   8230c:	defffd04 	addi	sp,sp,-12
   82310:	dc000015 	stw	r16,0(sp)
   82314:	04000274 	movhi	r16,9
   82318:	841fb904 	addi	r16,r16,32484
   8231c:	dc400115 	stw	r17,4(sp)
   82320:	80000015 	stw	zero,0(r16)
   82324:	2023883a 	mov	r17,r4
   82328:	2809883a 	mov	r4,r5
   8232c:	300b883a 	mov	r5,r6
   82330:	380d883a 	mov	r6,r7
   82334:	dfc00215 	stw	ra,8(sp)
   82338:	0090a200 	call	90a20 <open>
   8233c:	1007883a 	mov	r3,r2
   82340:	00bfffc4 	movi	r2,-1
   82344:	18800626 	beq	r3,r2,82360 <_open_r+0x54>
   82348:	1805883a 	mov	r2,r3
   8234c:	dfc00217 	ldw	ra,8(sp)
   82350:	dc400117 	ldw	r17,4(sp)
   82354:	dc000017 	ldw	r16,0(sp)
   82358:	dec00304 	addi	sp,sp,12
   8235c:	f800283a 	ret
   82360:	80800017 	ldw	r2,0(r16)
   82364:	103ff826 	beq	r2,zero,82348 <_open_r+0x3c>
   82368:	88800015 	stw	r2,0(r17)
   8236c:	1805883a 	mov	r2,r3
   82370:	dfc00217 	ldw	ra,8(sp)
   82374:	dc400117 	ldw	r17,4(sp)
   82378:	dc000017 	ldw	r16,0(sp)
   8237c:	dec00304 	addi	sp,sp,12
   82380:	f800283a 	ret

00082384 <printf>:
   82384:	defffb04 	addi	sp,sp,-20
   82388:	dfc00115 	stw	ra,4(sp)
   8238c:	d9400215 	stw	r5,8(sp)
   82390:	d9800315 	stw	r6,12(sp)
   82394:	d9c00415 	stw	r7,16(sp)
   82398:	00800274 	movhi	r2,9
   8239c:	1098bc04 	addi	r2,r2,25328
   823a0:	10c00017 	ldw	r3,0(r2)
   823a4:	200b883a 	mov	r5,r4
   823a8:	d8800204 	addi	r2,sp,8
   823ac:	19000217 	ldw	r4,8(r3)
   823b0:	100d883a 	mov	r6,r2
   823b4:	d8800015 	stw	r2,0(sp)
   823b8:	008517c0 	call	8517c <__vfprintf_internal>
   823bc:	dfc00117 	ldw	ra,4(sp)
   823c0:	dec00504 	addi	sp,sp,20
   823c4:	f800283a 	ret

000823c8 <_printf_r>:
   823c8:	defffc04 	addi	sp,sp,-16
   823cc:	dfc00115 	stw	ra,4(sp)
   823d0:	d9800215 	stw	r6,8(sp)
   823d4:	d9c00315 	stw	r7,12(sp)
   823d8:	280d883a 	mov	r6,r5
   823dc:	21400217 	ldw	r5,8(r4)
   823e0:	d8c00204 	addi	r3,sp,8
   823e4:	180f883a 	mov	r7,r3
   823e8:	d8c00015 	stw	r3,0(sp)
   823ec:	00832b80 	call	832b8 <___vfprintf_internal_r>
   823f0:	dfc00117 	ldw	ra,4(sp)
   823f4:	dec00404 	addi	sp,sp,16
   823f8:	f800283a 	ret

000823fc <_puts_r>:
   823fc:	defff604 	addi	sp,sp,-40
   82400:	dc400715 	stw	r17,28(sp)
   82404:	2023883a 	mov	r17,r4
   82408:	2809883a 	mov	r4,r5
   8240c:	dfc00915 	stw	ra,36(sp)
   82410:	dcc00815 	stw	r19,32(sp)
   82414:	2827883a 	mov	r19,r5
   82418:	0082f780 	call	82f78 <strlen>
   8241c:	89400217 	ldw	r5,8(r17)
   82420:	00c00274 	movhi	r3,9
   82424:	18d05004 	addi	r3,r3,16704
   82428:	01c00044 	movi	r7,1
   8242c:	12000044 	addi	r8,r2,1
   82430:	d8c00515 	stw	r3,20(sp)
   82434:	d9c00615 	stw	r7,24(sp)
   82438:	d8c00304 	addi	r3,sp,12
   8243c:	01c00084 	movi	r7,2
   82440:	8809883a 	mov	r4,r17
   82444:	d80d883a 	mov	r6,sp
   82448:	d8c00015 	stw	r3,0(sp)
   8244c:	dcc00315 	stw	r19,12(sp)
   82450:	da000215 	stw	r8,8(sp)
   82454:	d9c00115 	stw	r7,4(sp)
   82458:	d8800415 	stw	r2,16(sp)
   8245c:	008124c0 	call	8124c <__sfvwrite_r>
   82460:	00ffffc4 	movi	r3,-1
   82464:	10000626 	beq	r2,zero,82480 <_puts_r+0x84>
   82468:	1805883a 	mov	r2,r3
   8246c:	dfc00917 	ldw	ra,36(sp)
   82470:	dcc00817 	ldw	r19,32(sp)
   82474:	dc400717 	ldw	r17,28(sp)
   82478:	dec00a04 	addi	sp,sp,40
   8247c:	f800283a 	ret
   82480:	00c00284 	movi	r3,10
   82484:	1805883a 	mov	r2,r3
   82488:	dfc00917 	ldw	ra,36(sp)
   8248c:	dcc00817 	ldw	r19,32(sp)
   82490:	dc400717 	ldw	r17,28(sp)
   82494:	dec00a04 	addi	sp,sp,40
   82498:	f800283a 	ret

0008249c <puts>:
   8249c:	00800274 	movhi	r2,9
   824a0:	1098bc04 	addi	r2,r2,25328
   824a4:	200b883a 	mov	r5,r4
   824a8:	11000017 	ldw	r4,0(r2)
   824ac:	00823fc1 	jmpi	823fc <_puts_r>

000824b0 <_realloc_r>:
   824b0:	defff404 	addi	sp,sp,-48
   824b4:	dd800815 	stw	r22,32(sp)
   824b8:	dc800415 	stw	r18,16(sp)
   824bc:	dc400315 	stw	r17,12(sp)
   824c0:	dfc00b15 	stw	ra,44(sp)
   824c4:	df000a15 	stw	fp,40(sp)
   824c8:	ddc00915 	stw	r23,36(sp)
   824cc:	dd400715 	stw	r21,28(sp)
   824d0:	dd000615 	stw	r20,24(sp)
   824d4:	dcc00515 	stw	r19,20(sp)
   824d8:	dc000215 	stw	r16,8(sp)
   824dc:	2825883a 	mov	r18,r5
   824e0:	3023883a 	mov	r17,r6
   824e4:	202d883a 	mov	r22,r4
   824e8:	2800c926 	beq	r5,zero,82810 <_realloc_r+0x360>
   824ec:	00908e80 	call	908e8 <__malloc_lock>
   824f0:	943ffe04 	addi	r16,r18,-8
   824f4:	88c002c4 	addi	r3,r17,11
   824f8:	00800584 	movi	r2,22
   824fc:	82000117 	ldw	r8,4(r16)
   82500:	10c01b2e 	bgeu	r2,r3,82570 <_realloc_r+0xc0>
   82504:	00bffe04 	movi	r2,-8
   82508:	188e703a 	and	r7,r3,r2
   8250c:	3839883a 	mov	fp,r7
   82510:	38001a16 	blt	r7,zero,8257c <_realloc_r+0xcc>
   82514:	e4401936 	bltu	fp,r17,8257c <_realloc_r+0xcc>
   82518:	013fff04 	movi	r4,-4
   8251c:	4126703a 	and	r19,r8,r4
   82520:	99c02616 	blt	r19,r7,825bc <_realloc_r+0x10c>
   82524:	802b883a 	mov	r21,r16
   82528:	9829883a 	mov	r20,r19
   8252c:	84000204 	addi	r16,r16,8
   82530:	a80f883a 	mov	r7,r21
   82534:	a70dc83a 	sub	r6,r20,fp
   82538:	008003c4 	movi	r2,15
   8253c:	1180c136 	bltu	r2,r6,82844 <_realloc_r+0x394>
   82540:	38800117 	ldw	r2,4(r7)
   82544:	a549883a 	add	r4,r20,r21
   82548:	1080004c 	andi	r2,r2,1
   8254c:	a084b03a 	or	r2,r20,r2
   82550:	38800115 	stw	r2,4(r7)
   82554:	20c00117 	ldw	r3,4(r4)
   82558:	18c00054 	ori	r3,r3,1
   8255c:	20c00115 	stw	r3,4(r4)
   82560:	b009883a 	mov	r4,r22
   82564:	00909080 	call	90908 <__malloc_unlock>
   82568:	8023883a 	mov	r17,r16
   8256c:	00000606 	br	82588 <_realloc_r+0xd8>
   82570:	01c00404 	movi	r7,16
   82574:	3839883a 	mov	fp,r7
   82578:	e47fe72e 	bgeu	fp,r17,82518 <_realloc_r+0x68>
   8257c:	00800304 	movi	r2,12
   82580:	0023883a 	mov	r17,zero
   82584:	b0800015 	stw	r2,0(r22)
   82588:	8805883a 	mov	r2,r17
   8258c:	dfc00b17 	ldw	ra,44(sp)
   82590:	df000a17 	ldw	fp,40(sp)
   82594:	ddc00917 	ldw	r23,36(sp)
   82598:	dd800817 	ldw	r22,32(sp)
   8259c:	dd400717 	ldw	r21,28(sp)
   825a0:	dd000617 	ldw	r20,24(sp)
   825a4:	dcc00517 	ldw	r19,20(sp)
   825a8:	dc800417 	ldw	r18,16(sp)
   825ac:	dc400317 	ldw	r17,12(sp)
   825b0:	dc000217 	ldw	r16,8(sp)
   825b4:	dec00c04 	addi	sp,sp,48
   825b8:	f800283a 	ret
   825bc:	00800274 	movhi	r2,9
   825c0:	1092e304 	addi	r2,r2,19340
   825c4:	12400217 	ldw	r9,8(r2)
   825c8:	84cd883a 	add	r6,r16,r19
   825cc:	802b883a 	mov	r21,r16
   825d0:	3240b926 	beq	r6,r9,828b8 <_realloc_r+0x408>
   825d4:	31400117 	ldw	r5,4(r6)
   825d8:	00bfff84 	movi	r2,-2
   825dc:	2884703a 	and	r2,r5,r2
   825e0:	1185883a 	add	r2,r2,r6
   825e4:	10c00117 	ldw	r3,4(r2)
   825e8:	18c0004c 	andi	r3,r3,1
   825ec:	1807003a 	cmpeq	r3,r3,zero
   825f0:	1800a326 	beq	r3,zero,82880 <_realloc_r+0x3d0>
   825f4:	2908703a 	and	r4,r5,r4
   825f8:	9929883a 	add	r20,r19,r4
   825fc:	a1c0a30e 	bge	r20,r7,8288c <_realloc_r+0x3dc>
   82600:	4080004c 	andi	r2,r8,1
   82604:	1000551e 	bne	r2,zero,8275c <_realloc_r+0x2ac>
   82608:	80800017 	ldw	r2,0(r16)
   8260c:	80afc83a 	sub	r23,r16,r2
   82610:	b8c00117 	ldw	r3,4(r23)
   82614:	00bfff04 	movi	r2,-4
   82618:	1884703a 	and	r2,r3,r2
   8261c:	30002e26 	beq	r6,zero,826d8 <_realloc_r+0x228>
   82620:	3240b926 	beq	r6,r9,82908 <_realloc_r+0x458>
   82624:	98a9883a 	add	r20,r19,r2
   82628:	2509883a 	add	r4,r4,r20
   8262c:	d9000015 	stw	r4,0(sp)
   82630:	21c02a16 	blt	r4,r7,826dc <_realloc_r+0x22c>
   82634:	30800317 	ldw	r2,12(r6)
   82638:	30c00217 	ldw	r3,8(r6)
   8263c:	01400904 	movi	r5,36
   82640:	99bfff04 	addi	r6,r19,-4
   82644:	18800315 	stw	r2,12(r3)
   82648:	10c00215 	stw	r3,8(r2)
   8264c:	b9000317 	ldw	r4,12(r23)
   82650:	b8800217 	ldw	r2,8(r23)
   82654:	b82b883a 	mov	r21,r23
   82658:	bc000204 	addi	r16,r23,8
   8265c:	20800215 	stw	r2,8(r4)
   82660:	11000315 	stw	r4,12(r2)
   82664:	2980e436 	bltu	r5,r6,829f8 <_realloc_r+0x548>
   82668:	008004c4 	movi	r2,19
   8266c:	9009883a 	mov	r4,r18
   82670:	8011883a 	mov	r8,r16
   82674:	11800f2e 	bgeu	r2,r6,826b4 <_realloc_r+0x204>
   82678:	90800017 	ldw	r2,0(r18)
   8267c:	ba000404 	addi	r8,r23,16
   82680:	91000204 	addi	r4,r18,8
   82684:	b8800215 	stw	r2,8(r23)
   82688:	90c00117 	ldw	r3,4(r18)
   8268c:	008006c4 	movi	r2,27
   82690:	b8c00315 	stw	r3,12(r23)
   82694:	1180072e 	bgeu	r2,r6,826b4 <_realloc_r+0x204>
   82698:	90c00217 	ldw	r3,8(r18)
   8269c:	ba000604 	addi	r8,r23,24
   826a0:	91000404 	addi	r4,r18,16
   826a4:	b8c00415 	stw	r3,16(r23)
   826a8:	90800317 	ldw	r2,12(r18)
   826ac:	b8800515 	stw	r2,20(r23)
   826b0:	3140e726 	beq	r6,r5,82a50 <_realloc_r+0x5a0>
   826b4:	20800017 	ldw	r2,0(r4)
   826b8:	dd000017 	ldw	r20,0(sp)
   826bc:	b80f883a 	mov	r7,r23
   826c0:	40800015 	stw	r2,0(r8)
   826c4:	20c00117 	ldw	r3,4(r4)
   826c8:	40c00115 	stw	r3,4(r8)
   826cc:	20800217 	ldw	r2,8(r4)
   826d0:	40800215 	stw	r2,8(r8)
   826d4:	003f9706 	br	82534 <_realloc_r+0x84>
   826d8:	98a9883a 	add	r20,r19,r2
   826dc:	a1c01f16 	blt	r20,r7,8275c <_realloc_r+0x2ac>
   826e0:	b8c00317 	ldw	r3,12(r23)
   826e4:	b8800217 	ldw	r2,8(r23)
   826e8:	99bfff04 	addi	r6,r19,-4
   826ec:	01400904 	movi	r5,36
   826f0:	b82b883a 	mov	r21,r23
   826f4:	18800215 	stw	r2,8(r3)
   826f8:	10c00315 	stw	r3,12(r2)
   826fc:	bc000204 	addi	r16,r23,8
   82700:	2980c336 	bltu	r5,r6,82a10 <_realloc_r+0x560>
   82704:	008004c4 	movi	r2,19
   82708:	9009883a 	mov	r4,r18
   8270c:	8011883a 	mov	r8,r16
   82710:	11800f2e 	bgeu	r2,r6,82750 <_realloc_r+0x2a0>
   82714:	90800017 	ldw	r2,0(r18)
   82718:	ba000404 	addi	r8,r23,16
   8271c:	91000204 	addi	r4,r18,8
   82720:	b8800215 	stw	r2,8(r23)
   82724:	90c00117 	ldw	r3,4(r18)
   82728:	008006c4 	movi	r2,27
   8272c:	b8c00315 	stw	r3,12(r23)
   82730:	1180072e 	bgeu	r2,r6,82750 <_realloc_r+0x2a0>
   82734:	90c00217 	ldw	r3,8(r18)
   82738:	ba000604 	addi	r8,r23,24
   8273c:	91000404 	addi	r4,r18,16
   82740:	b8c00415 	stw	r3,16(r23)
   82744:	90800317 	ldw	r2,12(r18)
   82748:	b8800515 	stw	r2,20(r23)
   8274c:	3140c726 	beq	r6,r5,82a6c <_realloc_r+0x5bc>
   82750:	20800017 	ldw	r2,0(r4)
   82754:	b80f883a 	mov	r7,r23
   82758:	003fd906 	br	826c0 <_realloc_r+0x210>
   8275c:	880b883a 	mov	r5,r17
   82760:	b009883a 	mov	r4,r22
   82764:	00819680 	call	81968 <_malloc_r>
   82768:	1023883a 	mov	r17,r2
   8276c:	10002526 	beq	r2,zero,82804 <_realloc_r+0x354>
   82770:	80800117 	ldw	r2,4(r16)
   82774:	00ffff84 	movi	r3,-2
   82778:	893ffe04 	addi	r4,r17,-8
   8277c:	10c4703a 	and	r2,r2,r3
   82780:	8085883a 	add	r2,r16,r2
   82784:	20809526 	beq	r4,r2,829dc <_realloc_r+0x52c>
   82788:	99bfff04 	addi	r6,r19,-4
   8278c:	01c00904 	movi	r7,36
   82790:	39804536 	bltu	r7,r6,828a8 <_realloc_r+0x3f8>
   82794:	008004c4 	movi	r2,19
   82798:	9009883a 	mov	r4,r18
   8279c:	880b883a 	mov	r5,r17
   827a0:	11800f2e 	bgeu	r2,r6,827e0 <_realloc_r+0x330>
   827a4:	90800017 	ldw	r2,0(r18)
   827a8:	89400204 	addi	r5,r17,8
   827ac:	91000204 	addi	r4,r18,8
   827b0:	88800015 	stw	r2,0(r17)
   827b4:	90c00117 	ldw	r3,4(r18)
   827b8:	008006c4 	movi	r2,27
   827bc:	88c00115 	stw	r3,4(r17)
   827c0:	1180072e 	bgeu	r2,r6,827e0 <_realloc_r+0x330>
   827c4:	90c00217 	ldw	r3,8(r18)
   827c8:	89400404 	addi	r5,r17,16
   827cc:	91000404 	addi	r4,r18,16
   827d0:	88c00215 	stw	r3,8(r17)
   827d4:	90800317 	ldw	r2,12(r18)
   827d8:	88800315 	stw	r2,12(r17)
   827dc:	31c09126 	beq	r6,r7,82a24 <_realloc_r+0x574>
   827e0:	20800017 	ldw	r2,0(r4)
   827e4:	28800015 	stw	r2,0(r5)
   827e8:	20c00117 	ldw	r3,4(r4)
   827ec:	28c00115 	stw	r3,4(r5)
   827f0:	20800217 	ldw	r2,8(r4)
   827f4:	28800215 	stw	r2,8(r5)
   827f8:	900b883a 	mov	r5,r18
   827fc:	b009883a 	mov	r4,r22
   82800:	0088c800 	call	88c80 <_free_r>
   82804:	b009883a 	mov	r4,r22
   82808:	00909080 	call	90908 <__malloc_unlock>
   8280c:	003f5e06 	br	82588 <_realloc_r+0xd8>
   82810:	300b883a 	mov	r5,r6
   82814:	dfc00b17 	ldw	ra,44(sp)
   82818:	df000a17 	ldw	fp,40(sp)
   8281c:	ddc00917 	ldw	r23,36(sp)
   82820:	dd800817 	ldw	r22,32(sp)
   82824:	dd400717 	ldw	r21,28(sp)
   82828:	dd000617 	ldw	r20,24(sp)
   8282c:	dcc00517 	ldw	r19,20(sp)
   82830:	dc800417 	ldw	r18,16(sp)
   82834:	dc400317 	ldw	r17,12(sp)
   82838:	dc000217 	ldw	r16,8(sp)
   8283c:	dec00c04 	addi	sp,sp,48
   82840:	00819681 	jmpi	81968 <_malloc_r>
   82844:	38800117 	ldw	r2,4(r7)
   82848:	e54b883a 	add	r5,fp,r21
   8284c:	31000054 	ori	r4,r6,1
   82850:	1080004c 	andi	r2,r2,1
   82854:	1704b03a 	or	r2,r2,fp
   82858:	38800115 	stw	r2,4(r7)
   8285c:	29000115 	stw	r4,4(r5)
   82860:	2987883a 	add	r3,r5,r6
   82864:	18800117 	ldw	r2,4(r3)
   82868:	29400204 	addi	r5,r5,8
   8286c:	b009883a 	mov	r4,r22
   82870:	10800054 	ori	r2,r2,1
   82874:	18800115 	stw	r2,4(r3)
   82878:	0088c800 	call	88c80 <_free_r>
   8287c:	003f3806 	br	82560 <_realloc_r+0xb0>
   82880:	000d883a 	mov	r6,zero
   82884:	0009883a 	mov	r4,zero
   82888:	003f5d06 	br	82600 <_realloc_r+0x150>
   8288c:	30c00217 	ldw	r3,8(r6)
   82890:	30800317 	ldw	r2,12(r6)
   82894:	800f883a 	mov	r7,r16
   82898:	84000204 	addi	r16,r16,8
   8289c:	10c00215 	stw	r3,8(r2)
   828a0:	18800315 	stw	r2,12(r3)
   828a4:	003f2306 	br	82534 <_realloc_r+0x84>
   828a8:	8809883a 	mov	r4,r17
   828ac:	900b883a 	mov	r5,r18
   828b0:	008222c0 	call	8222c <memmove>
   828b4:	003fd006 	br	827f8 <_realloc_r+0x348>
   828b8:	30800117 	ldw	r2,4(r6)
   828bc:	e0c00404 	addi	r3,fp,16
   828c0:	1108703a 	and	r4,r2,r4
   828c4:	9905883a 	add	r2,r19,r4
   828c8:	10ff4d16 	blt	r2,r3,82600 <_realloc_r+0x150>
   828cc:	1705c83a 	sub	r2,r2,fp
   828d0:	870b883a 	add	r5,r16,fp
   828d4:	10800054 	ori	r2,r2,1
   828d8:	28800115 	stw	r2,4(r5)
   828dc:	80c00117 	ldw	r3,4(r16)
   828e0:	00800274 	movhi	r2,9
   828e4:	1092e304 	addi	r2,r2,19340
   828e8:	b009883a 	mov	r4,r22
   828ec:	18c0004c 	andi	r3,r3,1
   828f0:	e0c6b03a 	or	r3,fp,r3
   828f4:	11400215 	stw	r5,8(r2)
   828f8:	80c00115 	stw	r3,4(r16)
   828fc:	00909080 	call	90908 <__malloc_unlock>
   82900:	84400204 	addi	r17,r16,8
   82904:	003f2006 	br	82588 <_realloc_r+0xd8>
   82908:	98a9883a 	add	r20,r19,r2
   8290c:	2509883a 	add	r4,r4,r20
   82910:	e0800404 	addi	r2,fp,16
   82914:	d9000115 	stw	r4,4(sp)
   82918:	20bf7016 	blt	r4,r2,826dc <_realloc_r+0x22c>
   8291c:	b8c00317 	ldw	r3,12(r23)
   82920:	b8800217 	ldw	r2,8(r23)
   82924:	99bfff04 	addi	r6,r19,-4
   82928:	01400904 	movi	r5,36
   8292c:	18800215 	stw	r2,8(r3)
   82930:	10c00315 	stw	r3,12(r2)
   82934:	bc400204 	addi	r17,r23,8
   82938:	29804136 	bltu	r5,r6,82a40 <_realloc_r+0x590>
   8293c:	008004c4 	movi	r2,19
   82940:	9009883a 	mov	r4,r18
   82944:	880f883a 	mov	r7,r17
   82948:	11800f2e 	bgeu	r2,r6,82988 <_realloc_r+0x4d8>
   8294c:	90800017 	ldw	r2,0(r18)
   82950:	b9c00404 	addi	r7,r23,16
   82954:	91000204 	addi	r4,r18,8
   82958:	b8800215 	stw	r2,8(r23)
   8295c:	90c00117 	ldw	r3,4(r18)
   82960:	008006c4 	movi	r2,27
   82964:	b8c00315 	stw	r3,12(r23)
   82968:	1180072e 	bgeu	r2,r6,82988 <_realloc_r+0x4d8>
   8296c:	90c00217 	ldw	r3,8(r18)
   82970:	b9c00604 	addi	r7,r23,24
   82974:	91000404 	addi	r4,r18,16
   82978:	b8c00415 	stw	r3,16(r23)
   8297c:	90800317 	ldw	r2,12(r18)
   82980:	b8800515 	stw	r2,20(r23)
   82984:	31404026 	beq	r6,r5,82a88 <_realloc_r+0x5d8>
   82988:	20800017 	ldw	r2,0(r4)
   8298c:	38800015 	stw	r2,0(r7)
   82990:	20c00117 	ldw	r3,4(r4)
   82994:	38c00115 	stw	r3,4(r7)
   82998:	20800217 	ldw	r2,8(r4)
   8299c:	38800215 	stw	r2,8(r7)
   829a0:	d8c00117 	ldw	r3,4(sp)
   829a4:	bf0b883a 	add	r5,r23,fp
   829a8:	b009883a 	mov	r4,r22
   829ac:	1f05c83a 	sub	r2,r3,fp
   829b0:	10800054 	ori	r2,r2,1
   829b4:	28800115 	stw	r2,4(r5)
   829b8:	b8c00117 	ldw	r3,4(r23)
   829bc:	00800274 	movhi	r2,9
   829c0:	1092e304 	addi	r2,r2,19340
   829c4:	11400215 	stw	r5,8(r2)
   829c8:	18c0004c 	andi	r3,r3,1
   829cc:	e0c6b03a 	or	r3,fp,r3
   829d0:	b8c00115 	stw	r3,4(r23)
   829d4:	00909080 	call	90908 <__malloc_unlock>
   829d8:	003eeb06 	br	82588 <_realloc_r+0xd8>
   829dc:	20800117 	ldw	r2,4(r4)
   829e0:	00ffff04 	movi	r3,-4
   829e4:	800f883a 	mov	r7,r16
   829e8:	10c4703a 	and	r2,r2,r3
   829ec:	98a9883a 	add	r20,r19,r2
   829f0:	84000204 	addi	r16,r16,8
   829f4:	003ecf06 	br	82534 <_realloc_r+0x84>
   829f8:	900b883a 	mov	r5,r18
   829fc:	8009883a 	mov	r4,r16
   82a00:	008222c0 	call	8222c <memmove>
   82a04:	dd000017 	ldw	r20,0(sp)
   82a08:	b80f883a 	mov	r7,r23
   82a0c:	003ec906 	br	82534 <_realloc_r+0x84>
   82a10:	900b883a 	mov	r5,r18
   82a14:	8009883a 	mov	r4,r16
   82a18:	008222c0 	call	8222c <memmove>
   82a1c:	b80f883a 	mov	r7,r23
   82a20:	003ec406 	br	82534 <_realloc_r+0x84>
   82a24:	90c00417 	ldw	r3,16(r18)
   82a28:	89400604 	addi	r5,r17,24
   82a2c:	91000604 	addi	r4,r18,24
   82a30:	88c00415 	stw	r3,16(r17)
   82a34:	90800517 	ldw	r2,20(r18)
   82a38:	88800515 	stw	r2,20(r17)
   82a3c:	003f6806 	br	827e0 <_realloc_r+0x330>
   82a40:	900b883a 	mov	r5,r18
   82a44:	8809883a 	mov	r4,r17
   82a48:	008222c0 	call	8222c <memmove>
   82a4c:	003fd406 	br	829a0 <_realloc_r+0x4f0>
   82a50:	90c00417 	ldw	r3,16(r18)
   82a54:	91000604 	addi	r4,r18,24
   82a58:	ba000804 	addi	r8,r23,32
   82a5c:	b8c00615 	stw	r3,24(r23)
   82a60:	90800517 	ldw	r2,20(r18)
   82a64:	b8800715 	stw	r2,28(r23)
   82a68:	003f1206 	br	826b4 <_realloc_r+0x204>
   82a6c:	90c00417 	ldw	r3,16(r18)
   82a70:	91000604 	addi	r4,r18,24
   82a74:	ba000804 	addi	r8,r23,32
   82a78:	b8c00615 	stw	r3,24(r23)
   82a7c:	90800517 	ldw	r2,20(r18)
   82a80:	b8800715 	stw	r2,28(r23)
   82a84:	003f3206 	br	82750 <_realloc_r+0x2a0>
   82a88:	90c00417 	ldw	r3,16(r18)
   82a8c:	91000604 	addi	r4,r18,24
   82a90:	b9c00804 	addi	r7,r23,32
   82a94:	b8c00615 	stw	r3,24(r23)
   82a98:	90800517 	ldw	r2,20(r18)
   82a9c:	b8800715 	stw	r2,28(r23)
   82aa0:	003fb906 	br	82988 <_realloc_r+0x4d8>

00082aa4 <__srefill_r>:
   82aa4:	defffd04 	addi	sp,sp,-12
   82aa8:	dc400115 	stw	r17,4(sp)
   82aac:	dc000015 	stw	r16,0(sp)
   82ab0:	dfc00215 	stw	ra,8(sp)
   82ab4:	2023883a 	mov	r17,r4
   82ab8:	2821883a 	mov	r16,r5
   82abc:	20000226 	beq	r4,zero,82ac8 <__srefill_r+0x24>
   82ac0:	20800e17 	ldw	r2,56(r4)
   82ac4:	10004126 	beq	r2,zero,82bcc <__srefill_r+0x128>
   82ac8:	80c0030b 	ldhu	r3,12(r16)
   82acc:	80000115 	stw	zero,4(r16)
   82ad0:	1880080c 	andi	r2,r3,32
   82ad4:	1000361e 	bne	r2,zero,82bb0 <__srefill_r+0x10c>
   82ad8:	1880010c 	andi	r2,r3,4
   82adc:	1000211e 	bne	r2,zero,82b64 <__srefill_r+0xc0>
   82ae0:	1880040c 	andi	r2,r3,16
   82ae4:	10005026 	beq	r2,zero,82c28 <__srefill_r+0x184>
   82ae8:	1880020c 	andi	r2,r3,8
   82aec:	1000541e 	bne	r2,zero,82c40 <__srefill_r+0x19c>
   82af0:	8080030b 	ldhu	r2,12(r16)
   82af4:	10800114 	ori	r2,r2,4
   82af8:	8080030d 	sth	r2,12(r16)
   82afc:	80800417 	ldw	r2,16(r16)
   82b00:	10004526 	beq	r2,zero,82c18 <__srefill_r+0x174>
   82b04:	8080030b 	ldhu	r2,12(r16)
   82b08:	108000cc 	andi	r2,r2,3
   82b0c:	1000361e 	bne	r2,zero,82be8 <__srefill_r+0x144>
   82b10:	81800417 	ldw	r6,16(r16)
   82b14:	80c00817 	ldw	r3,32(r16)
   82b18:	81400717 	ldw	r5,28(r16)
   82b1c:	81c00517 	ldw	r7,20(r16)
   82b20:	8809883a 	mov	r4,r17
   82b24:	81800015 	stw	r6,0(r16)
   82b28:	183ee83a 	callr	r3
   82b2c:	80c0030b 	ldhu	r3,12(r16)
   82b30:	1009883a 	mov	r4,r2
   82b34:	80800115 	stw	r2,4(r16)
   82b38:	00b7ffc4 	movi	r2,-8193
   82b3c:	1884703a 	and	r2,r3,r2
   82b40:	8080030d 	sth	r2,12(r16)
   82b44:	0100230e 	bge	zero,r4,82bd4 <__srefill_r+0x130>
   82b48:	0009883a 	mov	r4,zero
   82b4c:	2005883a 	mov	r2,r4
   82b50:	dfc00217 	ldw	ra,8(sp)
   82b54:	dc400117 	ldw	r17,4(sp)
   82b58:	dc000017 	ldw	r16,0(sp)
   82b5c:	dec00304 	addi	sp,sp,12
   82b60:	f800283a 	ret
   82b64:	81400c17 	ldw	r5,48(r16)
   82b68:	283fe426 	beq	r5,zero,82afc <__srefill_r+0x58>
   82b6c:	80801004 	addi	r2,r16,64
   82b70:	28800226 	beq	r5,r2,82b7c <__srefill_r+0xd8>
   82b74:	8809883a 	mov	r4,r17
   82b78:	0088c800 	call	88c80 <_free_r>
   82b7c:	80800f17 	ldw	r2,60(r16)
   82b80:	80000c15 	stw	zero,48(r16)
   82b84:	80800115 	stw	r2,4(r16)
   82b88:	103fdc26 	beq	r2,zero,82afc <__srefill_r+0x58>
   82b8c:	80800e17 	ldw	r2,56(r16)
   82b90:	0009883a 	mov	r4,zero
   82b94:	80800015 	stw	r2,0(r16)
   82b98:	2005883a 	mov	r2,r4
   82b9c:	dfc00217 	ldw	ra,8(sp)
   82ba0:	dc400117 	ldw	r17,4(sp)
   82ba4:	dc000017 	ldw	r16,0(sp)
   82ba8:	dec00304 	addi	sp,sp,12
   82bac:	f800283a 	ret
   82bb0:	013fffc4 	movi	r4,-1
   82bb4:	2005883a 	mov	r2,r4
   82bb8:	dfc00217 	ldw	ra,8(sp)
   82bbc:	dc400117 	ldw	r17,4(sp)
   82bc0:	dc000017 	ldw	r16,0(sp)
   82bc4:	dec00304 	addi	sp,sp,12
   82bc8:	f800283a 	ret
   82bcc:	00885dc0 	call	885dc <__sinit>
   82bd0:	003fbd06 	br	82ac8 <__srefill_r+0x24>
   82bd4:	20000b1e 	bne	r4,zero,82c04 <__srefill_r+0x160>
   82bd8:	10800814 	ori	r2,r2,32
   82bdc:	013fffc4 	movi	r4,-1
   82be0:	8080030d 	sth	r2,12(r16)
   82be4:	003fd906 	br	82b4c <__srefill_r+0xa8>
   82be8:	00800274 	movhi	r2,9
   82bec:	1098bd04 	addi	r2,r2,25332
   82bf0:	11000017 	ldw	r4,0(r2)
   82bf4:	01400234 	movhi	r5,8
   82bf8:	294b1a04 	addi	r5,r5,11368
   82bfc:	008905c0 	call	8905c <_fwalk>
   82c00:	003fc306 	br	82b10 <__srefill_r+0x6c>
   82c04:	10801014 	ori	r2,r2,64
   82c08:	013fffc4 	movi	r4,-1
   82c0c:	8080030d 	sth	r2,12(r16)
   82c10:	80000115 	stw	zero,4(r16)
   82c14:	003fcd06 	br	82b4c <__srefill_r+0xa8>
   82c18:	8809883a 	mov	r4,r17
   82c1c:	800b883a 	mov	r5,r16
   82c20:	00817d40 	call	817d4 <__smakebuf_r>
   82c24:	003fb706 	br	82b04 <__srefill_r+0x60>
   82c28:	18c01014 	ori	r3,r3,64
   82c2c:	00800244 	movi	r2,9
   82c30:	013fffc4 	movi	r4,-1
   82c34:	88800015 	stw	r2,0(r17)
   82c38:	80c0030d 	sth	r3,12(r16)
   82c3c:	003fc306 	br	82b4c <__srefill_r+0xa8>
   82c40:	8809883a 	mov	r4,r17
   82c44:	800b883a 	mov	r5,r16
   82c48:	00883440 	call	88344 <_fflush_r>
   82c4c:	103fd81e 	bne	r2,zero,82bb0 <__srefill_r+0x10c>
   82c50:	8080030b 	ldhu	r2,12(r16)
   82c54:	80000215 	stw	zero,8(r16)
   82c58:	80000615 	stw	zero,24(r16)
   82c5c:	10bffdcc 	andi	r2,r2,65527
   82c60:	8080030d 	sth	r2,12(r16)
   82c64:	003fa206 	br	82af0 <__srefill_r+0x4c>

00082c68 <lflush>:
   82c68:	20c0030b 	ldhu	r3,12(r4)
   82c6c:	01400244 	movi	r5,9
   82c70:	0005883a 	mov	r2,zero
   82c74:	18c0024c 	andi	r3,r3,9
   82c78:	19400126 	beq	r3,r5,82c80 <lflush+0x18>
   82c7c:	f800283a 	ret
   82c80:	00885401 	jmpi	88540 <fflush>

00082c84 <_sbrk_r>:
   82c84:	defffd04 	addi	sp,sp,-12
   82c88:	dc000015 	stw	r16,0(sp)
   82c8c:	04000274 	movhi	r16,9
   82c90:	841fb904 	addi	r16,r16,32484
   82c94:	dc400115 	stw	r17,4(sp)
   82c98:	80000015 	stw	zero,0(r16)
   82c9c:	2023883a 	mov	r17,r4
   82ca0:	2809883a 	mov	r4,r5
   82ca4:	dfc00215 	stw	ra,8(sp)
   82ca8:	0090e080 	call	90e08 <sbrk>
   82cac:	1007883a 	mov	r3,r2
   82cb0:	00bfffc4 	movi	r2,-1
   82cb4:	18800626 	beq	r3,r2,82cd0 <_sbrk_r+0x4c>
   82cb8:	1805883a 	mov	r2,r3
   82cbc:	dfc00217 	ldw	ra,8(sp)
   82cc0:	dc400117 	ldw	r17,4(sp)
   82cc4:	dc000017 	ldw	r16,0(sp)
   82cc8:	dec00304 	addi	sp,sp,12
   82ccc:	f800283a 	ret
   82cd0:	80800017 	ldw	r2,0(r16)
   82cd4:	103ff826 	beq	r2,zero,82cb8 <_sbrk_r+0x34>
   82cd8:	88800015 	stw	r2,0(r17)
   82cdc:	1805883a 	mov	r2,r3
   82ce0:	dfc00217 	ldw	ra,8(sp)
   82ce4:	dc400117 	ldw	r17,4(sp)
   82ce8:	dc000017 	ldw	r16,0(sp)
   82cec:	dec00304 	addi	sp,sp,12
   82cf0:	f800283a 	ret

00082cf4 <_scanf_r>:
   82cf4:	defffc04 	addi	sp,sp,-16
   82cf8:	dfc00115 	stw	ra,4(sp)
   82cfc:	d9800215 	stw	r6,8(sp)
   82d00:	d9c00315 	stw	r7,12(sp)
   82d04:	280d883a 	mov	r6,r5
   82d08:	21400117 	ldw	r5,4(r4)
   82d0c:	d8c00204 	addi	r3,sp,8
   82d10:	180f883a 	mov	r7,r3
   82d14:	d8c00015 	stw	r3,0(sp)
   82d18:	00851a00 	call	851a0 <__svfscanf_r>
   82d1c:	dfc00117 	ldw	ra,4(sp)
   82d20:	dec00404 	addi	sp,sp,16
   82d24:	f800283a 	ret

00082d28 <scanf>:
   82d28:	defffb04 	addi	sp,sp,-20
   82d2c:	dfc00115 	stw	ra,4(sp)
   82d30:	d9400215 	stw	r5,8(sp)
   82d34:	d9800315 	stw	r6,12(sp)
   82d38:	d9c00415 	stw	r7,16(sp)
   82d3c:	00800274 	movhi	r2,9
   82d40:	1098bc04 	addi	r2,r2,25328
   82d44:	11400017 	ldw	r5,0(r2)
   82d48:	200d883a 	mov	r6,r4
   82d4c:	d8800204 	addi	r2,sp,8
   82d50:	2809883a 	mov	r4,r5
   82d54:	29400117 	ldw	r5,4(r5)
   82d58:	100f883a 	mov	r7,r2
   82d5c:	d8800015 	stw	r2,0(sp)
   82d60:	00851a00 	call	851a0 <__svfscanf_r>
   82d64:	dfc00117 	ldw	ra,4(sp)
   82d68:	dec00504 	addi	sp,sp,20
   82d6c:	f800283a 	ret

00082d70 <__sclose>:
   82d70:	2940038f 	ldh	r5,14(r5)
   82d74:	0086adc1 	jmpi	86adc <_close_r>

00082d78 <__sseek>:
   82d78:	defffe04 	addi	sp,sp,-8
   82d7c:	dc000015 	stw	r16,0(sp)
   82d80:	2821883a 	mov	r16,r5
   82d84:	2940038f 	ldh	r5,14(r5)
   82d88:	dfc00115 	stw	ra,4(sp)
   82d8c:	00892740 	call	89274 <_lseek_r>
   82d90:	1007883a 	mov	r3,r2
   82d94:	00bfffc4 	movi	r2,-1
   82d98:	18800926 	beq	r3,r2,82dc0 <__sseek+0x48>
   82d9c:	8080030b 	ldhu	r2,12(r16)
   82da0:	80c01415 	stw	r3,80(r16)
   82da4:	10840014 	ori	r2,r2,4096
   82da8:	8080030d 	sth	r2,12(r16)
   82dac:	1805883a 	mov	r2,r3
   82db0:	dfc00117 	ldw	ra,4(sp)
   82db4:	dc000017 	ldw	r16,0(sp)
   82db8:	dec00204 	addi	sp,sp,8
   82dbc:	f800283a 	ret
   82dc0:	8080030b 	ldhu	r2,12(r16)
   82dc4:	10bbffcc 	andi	r2,r2,61439
   82dc8:	8080030d 	sth	r2,12(r16)
   82dcc:	1805883a 	mov	r2,r3
   82dd0:	dfc00117 	ldw	ra,4(sp)
   82dd4:	dc000017 	ldw	r16,0(sp)
   82dd8:	dec00204 	addi	sp,sp,8
   82ddc:	f800283a 	ret

00082de0 <__swrite>:
   82de0:	2880030b 	ldhu	r2,12(r5)
   82de4:	defffb04 	addi	sp,sp,-20
   82de8:	dcc00315 	stw	r19,12(sp)
   82dec:	1080400c 	andi	r2,r2,256
   82df0:	dc800215 	stw	r18,8(sp)
   82df4:	dc400115 	stw	r17,4(sp)
   82df8:	dc000015 	stw	r16,0(sp)
   82dfc:	3027883a 	mov	r19,r6
   82e00:	3825883a 	mov	r18,r7
   82e04:	dfc00415 	stw	ra,16(sp)
   82e08:	2821883a 	mov	r16,r5
   82e0c:	000d883a 	mov	r6,zero
   82e10:	01c00084 	movi	r7,2
   82e14:	2023883a 	mov	r17,r4
   82e18:	10000226 	beq	r2,zero,82e24 <__swrite+0x44>
   82e1c:	2940038f 	ldh	r5,14(r5)
   82e20:	00892740 	call	89274 <_lseek_r>
   82e24:	8080030b 	ldhu	r2,12(r16)
   82e28:	8140038f 	ldh	r5,14(r16)
   82e2c:	8809883a 	mov	r4,r17
   82e30:	10bbffcc 	andi	r2,r2,61439
   82e34:	980d883a 	mov	r6,r19
   82e38:	900f883a 	mov	r7,r18
   82e3c:	8080030d 	sth	r2,12(r16)
   82e40:	dfc00417 	ldw	ra,16(sp)
   82e44:	dcc00317 	ldw	r19,12(sp)
   82e48:	dc800217 	ldw	r18,8(sp)
   82e4c:	dc400117 	ldw	r17,4(sp)
   82e50:	dc000017 	ldw	r16,0(sp)
   82e54:	dec00504 	addi	sp,sp,20
   82e58:	00869281 	jmpi	86928 <_write_r>

00082e5c <__sread>:
   82e5c:	defffe04 	addi	sp,sp,-8
   82e60:	dc000015 	stw	r16,0(sp)
   82e64:	2821883a 	mov	r16,r5
   82e68:	2940038f 	ldh	r5,14(r5)
   82e6c:	dfc00115 	stw	ra,4(sp)
   82e70:	008a5100 	call	8a510 <_read_r>
   82e74:	1007883a 	mov	r3,r2
   82e78:	10000816 	blt	r2,zero,82e9c <__sread+0x40>
   82e7c:	80801417 	ldw	r2,80(r16)
   82e80:	10c5883a 	add	r2,r2,r3
   82e84:	80801415 	stw	r2,80(r16)
   82e88:	1805883a 	mov	r2,r3
   82e8c:	dfc00117 	ldw	ra,4(sp)
   82e90:	dc000017 	ldw	r16,0(sp)
   82e94:	dec00204 	addi	sp,sp,8
   82e98:	f800283a 	ret
   82e9c:	8080030b 	ldhu	r2,12(r16)
   82ea0:	10bbffcc 	andi	r2,r2,61439
   82ea4:	8080030d 	sth	r2,12(r16)
   82ea8:	1805883a 	mov	r2,r3
   82eac:	dfc00117 	ldw	ra,4(sp)
   82eb0:	dc000017 	ldw	r16,0(sp)
   82eb4:	dec00204 	addi	sp,sp,8
   82eb8:	f800283a 	ret

00082ebc <strcmp>:
   82ebc:	2144b03a 	or	r2,r4,r5
   82ec0:	108000cc 	andi	r2,r2,3
   82ec4:	10001d1e 	bne	r2,zero,82f3c <strcmp+0x80>
   82ec8:	200f883a 	mov	r7,r4
   82ecc:	28800017 	ldw	r2,0(r5)
   82ed0:	21000017 	ldw	r4,0(r4)
   82ed4:	280d883a 	mov	r6,r5
   82ed8:	2080161e 	bne	r4,r2,82f34 <strcmp+0x78>
   82edc:	023fbff4 	movhi	r8,65279
   82ee0:	423fbfc4 	addi	r8,r8,-257
   82ee4:	2207883a 	add	r3,r4,r8
   82ee8:	01602074 	movhi	r5,32897
   82eec:	29602004 	addi	r5,r5,-32640
   82ef0:	1946703a 	and	r3,r3,r5
   82ef4:	0104303a 	nor	r2,zero,r4
   82ef8:	10c4703a 	and	r2,r2,r3
   82efc:	10001c1e 	bne	r2,zero,82f70 <strcmp+0xb4>
   82f00:	4013883a 	mov	r9,r8
   82f04:	2811883a 	mov	r8,r5
   82f08:	00000106 	br	82f10 <strcmp+0x54>
   82f0c:	1800181e 	bne	r3,zero,82f70 <strcmp+0xb4>
   82f10:	39c00104 	addi	r7,r7,4
   82f14:	39000017 	ldw	r4,0(r7)
   82f18:	31800104 	addi	r6,r6,4
   82f1c:	31400017 	ldw	r5,0(r6)
   82f20:	2245883a 	add	r2,r4,r9
   82f24:	1204703a 	and	r2,r2,r8
   82f28:	0106303a 	nor	r3,zero,r4
   82f2c:	1886703a 	and	r3,r3,r2
   82f30:	217ff626 	beq	r4,r5,82f0c <strcmp+0x50>
   82f34:	3809883a 	mov	r4,r7
   82f38:	300b883a 	mov	r5,r6
   82f3c:	20c00007 	ldb	r3,0(r4)
   82f40:	1800051e 	bne	r3,zero,82f58 <strcmp+0x9c>
   82f44:	00000606 	br	82f60 <strcmp+0xa4>
   82f48:	21000044 	addi	r4,r4,1
   82f4c:	20c00007 	ldb	r3,0(r4)
   82f50:	29400044 	addi	r5,r5,1
   82f54:	18000226 	beq	r3,zero,82f60 <strcmp+0xa4>
   82f58:	28800007 	ldb	r2,0(r5)
   82f5c:	18bffa26 	beq	r3,r2,82f48 <strcmp+0x8c>
   82f60:	20c00003 	ldbu	r3,0(r4)
   82f64:	28800003 	ldbu	r2,0(r5)
   82f68:	1885c83a 	sub	r2,r3,r2
   82f6c:	f800283a 	ret
   82f70:	0005883a 	mov	r2,zero
   82f74:	f800283a 	ret

00082f78 <strlen>:
   82f78:	208000cc 	andi	r2,r4,3
   82f7c:	2011883a 	mov	r8,r4
   82f80:	1000161e 	bne	r2,zero,82fdc <strlen+0x64>
   82f84:	20c00017 	ldw	r3,0(r4)
   82f88:	017fbff4 	movhi	r5,65279
   82f8c:	297fbfc4 	addi	r5,r5,-257
   82f90:	01e02074 	movhi	r7,32897
   82f94:	39e02004 	addi	r7,r7,-32640
   82f98:	1945883a 	add	r2,r3,r5
   82f9c:	11c4703a 	and	r2,r2,r7
   82fa0:	00c6303a 	nor	r3,zero,r3
   82fa4:	1886703a 	and	r3,r3,r2
   82fa8:	18000c1e 	bne	r3,zero,82fdc <strlen+0x64>
   82fac:	280d883a 	mov	r6,r5
   82fb0:	380b883a 	mov	r5,r7
   82fb4:	21000104 	addi	r4,r4,4
   82fb8:	20800017 	ldw	r2,0(r4)
   82fbc:	1187883a 	add	r3,r2,r6
   82fc0:	1946703a 	and	r3,r3,r5
   82fc4:	0084303a 	nor	r2,zero,r2
   82fc8:	10c4703a 	and	r2,r2,r3
   82fcc:	103ff926 	beq	r2,zero,82fb4 <strlen+0x3c>
   82fd0:	20800007 	ldb	r2,0(r4)
   82fd4:	10000326 	beq	r2,zero,82fe4 <strlen+0x6c>
   82fd8:	21000044 	addi	r4,r4,1
   82fdc:	20800007 	ldb	r2,0(r4)
   82fe0:	103ffd1e 	bne	r2,zero,82fd8 <strlen+0x60>
   82fe4:	2205c83a 	sub	r2,r4,r8
   82fe8:	f800283a 	ret

00082fec <_strtol_r>:
   82fec:	defff304 	addi	sp,sp,-52
   82ff0:	00800274 	movhi	r2,9
   82ff4:	1098c004 	addi	r2,r2,25344
   82ff8:	dd000715 	stw	r20,28(sp)
   82ffc:	15000017 	ldw	r20,0(r2)
   83000:	ddc00a15 	stw	r23,40(sp)
   83004:	dc800515 	stw	r18,20(sp)
   83008:	dc400415 	stw	r17,16(sp)
   8300c:	dfc00c15 	stw	ra,48(sp)
   83010:	df000b15 	stw	fp,44(sp)
   83014:	dd800915 	stw	r22,36(sp)
   83018:	dd400815 	stw	r21,32(sp)
   8301c:	dcc00615 	stw	r19,24(sp)
   83020:	dc000315 	stw	r16,12(sp)
   83024:	282f883a 	mov	r23,r5
   83028:	d9000115 	stw	r4,4(sp)
   8302c:	d9800215 	stw	r6,8(sp)
   83030:	3825883a 	mov	r18,r7
   83034:	2823883a 	mov	r17,r5
   83038:	8c000007 	ldb	r16,0(r17)
   8303c:	8c400044 	addi	r17,r17,1
   83040:	a407883a 	add	r3,r20,r16
   83044:	18800003 	ldbu	r2,0(r3)
   83048:	1080020c 	andi	r2,r2,8
   8304c:	103ffa1e 	bne	r2,zero,83038 <_strtol_r+0x4c>
   83050:	00800b44 	movi	r2,45
   83054:	80805c26 	beq	r16,r2,831c8 <_strtol_r+0x1dc>
   83058:	00800ac4 	movi	r2,43
   8305c:	80805726 	beq	r16,r2,831bc <_strtol_r+0x1d0>
   83060:	d8000015 	stw	zero,0(sp)
   83064:	9007003a 	cmpeq	r3,r18,zero
   83068:	1800431e 	bne	r3,zero,83178 <_strtol_r+0x18c>
   8306c:	00800404 	movi	r2,16
   83070:	90804126 	beq	r18,r2,83178 <_strtol_r+0x18c>
   83074:	902b883a 	mov	r21,r18
   83078:	d8c00017 	ldw	r3,0(sp)
   8307c:	1838c03a 	cmpne	fp,r3,zero
   83080:	e0004a1e 	bne	fp,zero,831ac <_strtol_r+0x1c0>
   83084:	04e00034 	movhi	r19,32768
   83088:	9cffffc4 	addi	r19,r19,-1
   8308c:	9809883a 	mov	r4,r19
   83090:	a80b883a 	mov	r5,r21
   83094:	0080b980 	call	80b98 <__umodsi3>
   83098:	9809883a 	mov	r4,r19
   8309c:	a80b883a 	mov	r5,r21
   830a0:	102d883a 	mov	r22,r2
   830a4:	0080b900 	call	80b90 <__udivsi3>
   830a8:	1027883a 	mov	r19,r2
   830ac:	a405883a 	add	r2,r20,r16
   830b0:	11400003 	ldbu	r5,0(r2)
   830b4:	0009883a 	mov	r4,zero
   830b8:	000d883a 	mov	r6,zero
   830bc:	28c0010c 	andi	r3,r5,4
   830c0:	18000f26 	beq	r3,zero,83100 <_strtol_r+0x114>
   830c4:	843ff404 	addi	r16,r16,-48
   830c8:	8480150e 	bge	r16,r18,83120 <_strtol_r+0x134>
   830cc:	30003216 	blt	r6,zero,83198 <_strtol_r+0x1ac>
   830d0:	99003136 	bltu	r19,r4,83198 <_strtol_r+0x1ac>
   830d4:	24c02f26 	beq	r4,r19,83194 <_strtol_r+0x1a8>
   830d8:	a80b883a 	mov	r5,r21
   830dc:	0080ba00 	call	80ba0 <__mulsi3>
   830e0:	1409883a 	add	r4,r2,r16
   830e4:	01800044 	movi	r6,1
   830e8:	8c000007 	ldb	r16,0(r17)
   830ec:	8c400044 	addi	r17,r17,1
   830f0:	a405883a 	add	r2,r20,r16
   830f4:	11400003 	ldbu	r5,0(r2)
   830f8:	28c0010c 	andi	r3,r5,4
   830fc:	183ff11e 	bne	r3,zero,830c4 <_strtol_r+0xd8>
   83100:	288000cc 	andi	r2,r5,3
   83104:	10000626 	beq	r2,zero,83120 <_strtol_r+0x134>
   83108:	2880004c 	andi	r2,r5,1
   8310c:	1005003a 	cmpeq	r2,r2,zero
   83110:	1000231e 	bne	r2,zero,831a0 <_strtol_r+0x1b4>
   83114:	00800dc4 	movi	r2,55
   83118:	80a1c83a 	sub	r16,r16,r2
   8311c:	84bfeb16 	blt	r16,r18,830cc <_strtol_r+0xe0>
   83120:	30002e16 	blt	r6,zero,831dc <_strtol_r+0x1f0>
   83124:	e000231e 	bne	fp,zero,831b4 <_strtol_r+0x1c8>
   83128:	2007883a 	mov	r3,r4
   8312c:	d8800217 	ldw	r2,8(sp)
   83130:	10000426 	beq	r2,zero,83144 <_strtol_r+0x158>
   83134:	30000126 	beq	r6,zero,8313c <_strtol_r+0x150>
   83138:	8dffffc4 	addi	r23,r17,-1
   8313c:	d9000217 	ldw	r4,8(sp)
   83140:	25c00015 	stw	r23,0(r4)
   83144:	1805883a 	mov	r2,r3
   83148:	dfc00c17 	ldw	ra,48(sp)
   8314c:	df000b17 	ldw	fp,44(sp)
   83150:	ddc00a17 	ldw	r23,40(sp)
   83154:	dd800917 	ldw	r22,36(sp)
   83158:	dd400817 	ldw	r21,32(sp)
   8315c:	dd000717 	ldw	r20,28(sp)
   83160:	dcc00617 	ldw	r19,24(sp)
   83164:	dc800517 	ldw	r18,20(sp)
   83168:	dc400417 	ldw	r17,16(sp)
   8316c:	dc000317 	ldw	r16,12(sp)
   83170:	dec00d04 	addi	sp,sp,52
   83174:	f800283a 	ret
   83178:	00800c04 	movi	r2,48
   8317c:	80801f26 	beq	r16,r2,831fc <_strtol_r+0x210>
   83180:	183fbc26 	beq	r3,zero,83074 <_strtol_r+0x88>
   83184:	00800c04 	movi	r2,48
   83188:	80802926 	beq	r16,r2,83230 <_strtol_r+0x244>
   8318c:	04800284 	movi	r18,10
   83190:	003fb806 	br	83074 <_strtol_r+0x88>
   83194:	b43fd00e 	bge	r22,r16,830d8 <_strtol_r+0xec>
   83198:	01bfffc4 	movi	r6,-1
   8319c:	003fd206 	br	830e8 <_strtol_r+0xfc>
   831a0:	008015c4 	movi	r2,87
   831a4:	80a1c83a 	sub	r16,r16,r2
   831a8:	003fdc06 	br	8311c <_strtol_r+0x130>
   831ac:	04e00034 	movhi	r19,32768
   831b0:	003fb606 	br	8308c <_strtol_r+0xa0>
   831b4:	0107c83a 	sub	r3,zero,r4
   831b8:	003fdc06 	br	8312c <_strtol_r+0x140>
   831bc:	8c000007 	ldb	r16,0(r17)
   831c0:	8c400044 	addi	r17,r17,1
   831c4:	003fa606 	br	83060 <_strtol_r+0x74>
   831c8:	8c000007 	ldb	r16,0(r17)
   831cc:	00800044 	movi	r2,1
   831d0:	8c400044 	addi	r17,r17,1
   831d4:	d8800015 	stw	r2,0(sp)
   831d8:	003fa206 	br	83064 <_strtol_r+0x78>
   831dc:	d9000017 	ldw	r4,0(sp)
   831e0:	2005003a 	cmpeq	r2,r4,zero
   831e4:	10000f1e 	bne	r2,zero,83224 <_strtol_r+0x238>
   831e8:	00e00034 	movhi	r3,32768
   831ec:	d9000117 	ldw	r4,4(sp)
   831f0:	00800884 	movi	r2,34
   831f4:	20800015 	stw	r2,0(r4)
   831f8:	003fcc06 	br	8312c <_strtol_r+0x140>
   831fc:	89000007 	ldb	r4,0(r17)
   83200:	00801e04 	movi	r2,120
   83204:	20800226 	beq	r4,r2,83210 <_strtol_r+0x224>
   83208:	00801604 	movi	r2,88
   8320c:	20bfdc1e 	bne	r4,r2,83180 <_strtol_r+0x194>
   83210:	8c000047 	ldb	r16,1(r17)
   83214:	04800404 	movi	r18,16
   83218:	8c400084 	addi	r17,r17,2
   8321c:	902b883a 	mov	r21,r18
   83220:	003f9506 	br	83078 <_strtol_r+0x8c>
   83224:	00e00034 	movhi	r3,32768
   83228:	18ffffc4 	addi	r3,r3,-1
   8322c:	003fef06 	br	831ec <_strtol_r+0x200>
   83230:	04800204 	movi	r18,8
   83234:	902b883a 	mov	r21,r18
   83238:	003f8f06 	br	83078 <_strtol_r+0x8c>

0008323c <strtol>:
   8323c:	00800274 	movhi	r2,9
   83240:	1098bc04 	addi	r2,r2,25328
   83244:	2013883a 	mov	r9,r4
   83248:	11000017 	ldw	r4,0(r2)
   8324c:	2805883a 	mov	r2,r5
   83250:	300f883a 	mov	r7,r6
   83254:	480b883a 	mov	r5,r9
   83258:	100d883a 	mov	r6,r2
   8325c:	0082fec1 	jmpi	82fec <_strtol_r>

00083260 <__sprint_r>:
   83260:	30800217 	ldw	r2,8(r6)
   83264:	defffe04 	addi	sp,sp,-8
   83268:	dc000015 	stw	r16,0(sp)
   8326c:	dfc00115 	stw	ra,4(sp)
   83270:	3021883a 	mov	r16,r6
   83274:	0007883a 	mov	r3,zero
   83278:	1000061e 	bne	r2,zero,83294 <__sprint_r+0x34>
   8327c:	1805883a 	mov	r2,r3
   83280:	30000115 	stw	zero,4(r6)
   83284:	dfc00117 	ldw	ra,4(sp)
   83288:	dc000017 	ldw	r16,0(sp)
   8328c:	dec00204 	addi	sp,sp,8
   83290:	f800283a 	ret
   83294:	008124c0 	call	8124c <__sfvwrite_r>
   83298:	1007883a 	mov	r3,r2
   8329c:	1805883a 	mov	r2,r3
   832a0:	80000115 	stw	zero,4(r16)
   832a4:	80000215 	stw	zero,8(r16)
   832a8:	dfc00117 	ldw	ra,4(sp)
   832ac:	dc000017 	ldw	r16,0(sp)
   832b0:	dec00204 	addi	sp,sp,8
   832b4:	f800283a 	ret

000832b8 <___vfprintf_internal_r>:
   832b8:	defea404 	addi	sp,sp,-1392
   832bc:	dd815815 	stw	r22,1376(sp)
   832c0:	dc015215 	stw	r16,1352(sp)
   832c4:	d9c15115 	stw	r7,1348(sp)
   832c8:	dfc15b15 	stw	ra,1388(sp)
   832cc:	df015a15 	stw	fp,1384(sp)
   832d0:	ddc15915 	stw	r23,1380(sp)
   832d4:	dd415715 	stw	r21,1372(sp)
   832d8:	dd015615 	stw	r20,1368(sp)
   832dc:	dcc15515 	stw	r19,1364(sp)
   832e0:	dc815415 	stw	r18,1360(sp)
   832e4:	dc415315 	stw	r17,1356(sp)
   832e8:	282d883a 	mov	r22,r5
   832ec:	3021883a 	mov	r16,r6
   832f0:	d9014f15 	stw	r4,1340(sp)
   832f4:	00891b80 	call	891b8 <_localeconv_r>
   832f8:	10800017 	ldw	r2,0(r2)
   832fc:	d9c15117 	ldw	r7,1348(sp)
   83300:	d8814915 	stw	r2,1316(sp)
   83304:	d8814f17 	ldw	r2,1340(sp)
   83308:	10000226 	beq	r2,zero,83314 <___vfprintf_internal_r+0x5c>
   8330c:	10800e17 	ldw	r2,56(r2)
   83310:	10020d26 	beq	r2,zero,83b48 <___vfprintf_internal_r+0x890>
   83314:	b080030b 	ldhu	r2,12(r22)
   83318:	1080020c 	andi	r2,r2,8
   8331c:	10020e26 	beq	r2,zero,83b58 <___vfprintf_internal_r+0x8a0>
   83320:	b0800417 	ldw	r2,16(r22)
   83324:	10020c26 	beq	r2,zero,83b58 <___vfprintf_internal_r+0x8a0>
   83328:	b200030b 	ldhu	r8,12(r22)
   8332c:	00800284 	movi	r2,10
   83330:	40c0068c 	andi	r3,r8,26
   83334:	18802f1e 	bne	r3,r2,833f4 <___vfprintf_internal_r+0x13c>
   83338:	b080038f 	ldh	r2,14(r22)
   8333c:	10002d16 	blt	r2,zero,833f4 <___vfprintf_internal_r+0x13c>
   83340:	b240038b 	ldhu	r9,14(r22)
   83344:	b2800717 	ldw	r10,28(r22)
   83348:	b2c00917 	ldw	r11,36(r22)
   8334c:	d9014f17 	ldw	r4,1340(sp)
   83350:	dc402904 	addi	r17,sp,164
   83354:	d8804004 	addi	r2,sp,256
   83358:	00c10004 	movi	r3,1024
   8335c:	423fff4c 	andi	r8,r8,65533
   83360:	800d883a 	mov	r6,r16
   83364:	880b883a 	mov	r5,r17
   83368:	da002c0d 	sth	r8,176(sp)
   8336c:	da402c8d 	sth	r9,178(sp)
   83370:	da803015 	stw	r10,192(sp)
   83374:	dac03215 	stw	r11,200(sp)
   83378:	d8802d15 	stw	r2,180(sp)
   8337c:	d8c02e15 	stw	r3,184(sp)
   83380:	d8802915 	stw	r2,164(sp)
   83384:	d8c02b15 	stw	r3,172(sp)
   83388:	d8002f15 	stw	zero,188(sp)
   8338c:	00832b80 	call	832b8 <___vfprintf_internal_r>
   83390:	d8814b15 	stw	r2,1324(sp)
   83394:	10000416 	blt	r2,zero,833a8 <___vfprintf_internal_r+0xf0>
   83398:	d9014f17 	ldw	r4,1340(sp)
   8339c:	880b883a 	mov	r5,r17
   833a0:	00883440 	call	88344 <_fflush_r>
   833a4:	1002321e 	bne	r2,zero,83c70 <___vfprintf_internal_r+0x9b8>
   833a8:	d8802c0b 	ldhu	r2,176(sp)
   833ac:	1080100c 	andi	r2,r2,64
   833b0:	10000326 	beq	r2,zero,833c0 <___vfprintf_internal_r+0x108>
   833b4:	b080030b 	ldhu	r2,12(r22)
   833b8:	10801014 	ori	r2,r2,64
   833bc:	b080030d 	sth	r2,12(r22)
   833c0:	d8814b17 	ldw	r2,1324(sp)
   833c4:	dfc15b17 	ldw	ra,1388(sp)
   833c8:	df015a17 	ldw	fp,1384(sp)
   833cc:	ddc15917 	ldw	r23,1380(sp)
   833d0:	dd815817 	ldw	r22,1376(sp)
   833d4:	dd415717 	ldw	r21,1372(sp)
   833d8:	dd015617 	ldw	r20,1368(sp)
   833dc:	dcc15517 	ldw	r19,1364(sp)
   833e0:	dc815417 	ldw	r18,1360(sp)
   833e4:	dc415317 	ldw	r17,1356(sp)
   833e8:	dc015217 	ldw	r16,1352(sp)
   833ec:	dec15c04 	addi	sp,sp,1392
   833f0:	f800283a 	ret
   833f4:	0005883a 	mov	r2,zero
   833f8:	0007883a 	mov	r3,zero
   833fc:	dd401904 	addi	r21,sp,100
   83400:	d8814215 	stw	r2,1288(sp)
   83404:	802f883a 	mov	r23,r16
   83408:	d8c14315 	stw	r3,1292(sp)
   8340c:	d8014b15 	stw	zero,1324(sp)
   83410:	d8014815 	stw	zero,1312(sp)
   83414:	d8014415 	stw	zero,1296(sp)
   83418:	d8014715 	stw	zero,1308(sp)
   8341c:	dd400c15 	stw	r21,48(sp)
   83420:	d8000e15 	stw	zero,56(sp)
   83424:	d8000d15 	stw	zero,52(sp)
   83428:	b8800007 	ldb	r2,0(r23)
   8342c:	10001926 	beq	r2,zero,83494 <___vfprintf_internal_r+0x1dc>
   83430:	00c00944 	movi	r3,37
   83434:	10c01726 	beq	r2,r3,83494 <___vfprintf_internal_r+0x1dc>
   83438:	b821883a 	mov	r16,r23
   8343c:	00000106 	br	83444 <___vfprintf_internal_r+0x18c>
   83440:	10c00326 	beq	r2,r3,83450 <___vfprintf_internal_r+0x198>
   83444:	84000044 	addi	r16,r16,1
   83448:	80800007 	ldb	r2,0(r16)
   8344c:	103ffc1e 	bne	r2,zero,83440 <___vfprintf_internal_r+0x188>
   83450:	85e7c83a 	sub	r19,r16,r23
   83454:	98000e26 	beq	r19,zero,83490 <___vfprintf_internal_r+0x1d8>
   83458:	dc800e17 	ldw	r18,56(sp)
   8345c:	dc400d17 	ldw	r17,52(sp)
   83460:	008001c4 	movi	r2,7
   83464:	94e5883a 	add	r18,r18,r19
   83468:	8c400044 	addi	r17,r17,1
   8346c:	adc00015 	stw	r23,0(r21)
   83470:	dc800e15 	stw	r18,56(sp)
   83474:	acc00115 	stw	r19,4(r21)
   83478:	dc400d15 	stw	r17,52(sp)
   8347c:	14428b16 	blt	r2,r17,83eac <___vfprintf_internal_r+0xbf4>
   83480:	ad400204 	addi	r21,r21,8
   83484:	d9014b17 	ldw	r4,1324(sp)
   83488:	24c9883a 	add	r4,r4,r19
   8348c:	d9014b15 	stw	r4,1324(sp)
   83490:	802f883a 	mov	r23,r16
   83494:	b8800007 	ldb	r2,0(r23)
   83498:	10013c26 	beq	r2,zero,8398c <___vfprintf_internal_r+0x6d4>
   8349c:	bdc00044 	addi	r23,r23,1
   834a0:	d8000405 	stb	zero,16(sp)
   834a4:	b8c00007 	ldb	r3,0(r23)
   834a8:	04ffffc4 	movi	r19,-1
   834ac:	d8014c15 	stw	zero,1328(sp)
   834b0:	d8014a15 	stw	zero,1320(sp)
   834b4:	d8c14d15 	stw	r3,1332(sp)
   834b8:	bdc00044 	addi	r23,r23,1
   834bc:	d9414d17 	ldw	r5,1332(sp)
   834c0:	00801604 	movi	r2,88
   834c4:	28fff804 	addi	r3,r5,-32
   834c8:	10c06036 	bltu	r2,r3,8364c <___vfprintf_internal_r+0x394>
   834cc:	18c5883a 	add	r2,r3,r3
   834d0:	1085883a 	add	r2,r2,r2
   834d4:	00c00234 	movhi	r3,8
   834d8:	18cd3a04 	addi	r3,r3,13544
   834dc:	10c5883a 	add	r2,r2,r3
   834e0:	11000017 	ldw	r4,0(r2)
   834e4:	2000683a 	jmp	r4
   834e8:	0008445c 	xori	zero,zero,8465
   834ec:	0008364c 	andi	zero,zero,8409
   834f0:	0008364c 	andi	zero,zero,8409
   834f4:	00084448 	cmpgei	zero,zero,8465
   834f8:	0008364c 	andi	zero,zero,8409
   834fc:	0008364c 	andi	zero,zero,8409
   83500:	0008364c 	andi	zero,zero,8409
   83504:	0008364c 	andi	zero,zero,8409
   83508:	0008364c 	andi	zero,zero,8409
   8350c:	0008364c 	andi	zero,zero,8409
   83510:	00084228 	cmpgeui	zero,zero,8456
   83514:	00084438 	rdprs	zero,zero,8464
   83518:	0008364c 	andi	zero,zero,8409
   8351c:	00084240 	call	8424 <__alt_mem_sram_0-0x77bdc>
   83520:	000844e0 	cmpeqi	zero,zero,8467
   83524:	0008364c 	andi	zero,zero,8409
   83528:	000844cc 	andi	zero,zero,8467
   8352c:	00084488 	cmpgei	zero,zero,8466
   83530:	00084488 	cmpgei	zero,zero,8466
   83534:	00084488 	cmpgei	zero,zero,8466
   83538:	00084488 	cmpgei	zero,zero,8466
   8353c:	00084488 	cmpgei	zero,zero,8466
   83540:	00084488 	cmpgei	zero,zero,8466
   83544:	00084488 	cmpgei	zero,zero,8466
   83548:	00084488 	cmpgei	zero,zero,8466
   8354c:	00084488 	cmpgei	zero,zero,8466
   83550:	0008364c 	andi	zero,zero,8409
   83554:	0008364c 	andi	zero,zero,8409
   83558:	0008364c 	andi	zero,zero,8409
   8355c:	0008364c 	andi	zero,zero,8409
   83560:	0008364c 	andi	zero,zero,8409
   83564:	0008364c 	andi	zero,zero,8409
   83568:	0008364c 	andi	zero,zero,8409
   8356c:	0008364c 	andi	zero,zero,8409
   83570:	0008364c 	andi	zero,zero,8409
   83574:	0008364c 	andi	zero,zero,8409
   83578:	00083ca4 	muli	zero,zero,8434
   8357c:	00084310 	cmplti	zero,zero,8460
   83580:	0008364c 	andi	zero,zero,8409
   83584:	00084310 	cmplti	zero,zero,8460
   83588:	0008364c 	andi	zero,zero,8409
   8358c:	0008364c 	andi	zero,zero,8409
   83590:	0008364c 	andi	zero,zero,8409
   83594:	0008364c 	andi	zero,zero,8409
   83598:	00084474 	movhi	zero,8465
   8359c:	0008364c 	andi	zero,zero,8409
   835a0:	0008364c 	andi	zero,zero,8409
   835a4:	00083d58 	cmpnei	zero,zero,8437
   835a8:	0008364c 	andi	zero,zero,8409
   835ac:	0008364c 	andi	zero,zero,8409
   835b0:	0008364c 	andi	zero,zero,8409
   835b4:	0008364c 	andi	zero,zero,8409
   835b8:	0008364c 	andi	zero,zero,8409
   835bc:	00083da4 	muli	zero,zero,8438
   835c0:	0008364c 	andi	zero,zero,8409
   835c4:	0008364c 	andi	zero,zero,8409
   835c8:	000843c4 	movi	zero,8463
   835cc:	0008364c 	andi	zero,zero,8409
   835d0:	0008364c 	andi	zero,zero,8409
   835d4:	0008364c 	andi	zero,zero,8409
   835d8:	0008364c 	andi	zero,zero,8409
   835dc:	0008364c 	andi	zero,zero,8409
   835e0:	0008364c 	andi	zero,zero,8409
   835e4:	0008364c 	andi	zero,zero,8409
   835e8:	0008364c 	andi	zero,zero,8409
   835ec:	0008364c 	andi	zero,zero,8409
   835f0:	0008364c 	andi	zero,zero,8409
   835f4:	00084398 	cmpnei	zero,zero,8462
   835f8:	00083cb0 	cmpltui	zero,zero,8434
   835fc:	00084310 	cmplti	zero,zero,8460
   83600:	00084310 	cmplti	zero,zero,8460
   83604:	00084310 	cmplti	zero,zero,8460
   83608:	000842fc 	xorhi	zero,zero,8459
   8360c:	00083cb0 	cmpltui	zero,zero,8434
   83610:	0008364c 	andi	zero,zero,8409
   83614:	0008364c 	andi	zero,zero,8409
   83618:	00084284 	movi	zero,8458
   8361c:	0008364c 	andi	zero,zero,8409
   83620:	00084254 	movui	zero,8457
   83624:	00083d64 	muli	zero,zero,8437
   83628:	000842b4 	movhi	zero,8458
   8362c:	000842a0 	cmpeqi	zero,zero,8458
   83630:	0008364c 	andi	zero,zero,8409
   83634:	00084548 	cmpgei	zero,zero,8469
   83638:	0008364c 	andi	zero,zero,8409
   8363c:	00083db0 	cmpltui	zero,zero,8438
   83640:	0008364c 	andi	zero,zero,8409
   83644:	0008364c 	andi	zero,zero,8409
   83648:	00084428 	cmpgeui	zero,zero,8464
   8364c:	d9014d17 	ldw	r4,1332(sp)
   83650:	2000ce26 	beq	r4,zero,8398c <___vfprintf_internal_r+0x6d4>
   83654:	01400044 	movi	r5,1
   83658:	d9800f04 	addi	r6,sp,60
   8365c:	d9c14015 	stw	r7,1280(sp)
   83660:	d9414515 	stw	r5,1300(sp)
   83664:	d9814115 	stw	r6,1284(sp)
   83668:	280f883a 	mov	r7,r5
   8366c:	d9000f05 	stb	r4,60(sp)
   83670:	d8000405 	stb	zero,16(sp)
   83674:	d8014615 	stw	zero,1304(sp)
   83678:	d8c14c17 	ldw	r3,1328(sp)
   8367c:	1880008c 	andi	r2,r3,2
   83680:	1005003a 	cmpeq	r2,r2,zero
   83684:	d8815015 	stw	r2,1344(sp)
   83688:	1000031e 	bne	r2,zero,83698 <___vfprintf_internal_r+0x3e0>
   8368c:	d9014517 	ldw	r4,1300(sp)
   83690:	21000084 	addi	r4,r4,2
   83694:	d9014515 	stw	r4,1300(sp)
   83698:	d9414c17 	ldw	r5,1328(sp)
   8369c:	2940210c 	andi	r5,r5,132
   836a0:	d9414e15 	stw	r5,1336(sp)
   836a4:	28002d1e 	bne	r5,zero,8375c <___vfprintf_internal_r+0x4a4>
   836a8:	d9814a17 	ldw	r6,1320(sp)
   836ac:	d8814517 	ldw	r2,1300(sp)
   836b0:	30a1c83a 	sub	r16,r6,r2
   836b4:	0400290e 	bge	zero,r16,8375c <___vfprintf_internal_r+0x4a4>
   836b8:	00800404 	movi	r2,16
   836bc:	14045e0e 	bge	r2,r16,84838 <___vfprintf_internal_r+0x1580>
   836c0:	dc800e17 	ldw	r18,56(sp)
   836c4:	dc400d17 	ldw	r17,52(sp)
   836c8:	1027883a 	mov	r19,r2
   836cc:	07000274 	movhi	fp,9
   836d0:	e7106c84 	addi	fp,fp,16818
   836d4:	050001c4 	movi	r20,7
   836d8:	00000306 	br	836e8 <___vfprintf_internal_r+0x430>
   836dc:	843ffc04 	addi	r16,r16,-16
   836e0:	ad400204 	addi	r21,r21,8
   836e4:	9c00130e 	bge	r19,r16,83734 <___vfprintf_internal_r+0x47c>
   836e8:	94800404 	addi	r18,r18,16
   836ec:	8c400044 	addi	r17,r17,1
   836f0:	af000015 	stw	fp,0(r21)
   836f4:	acc00115 	stw	r19,4(r21)
   836f8:	dc800e15 	stw	r18,56(sp)
   836fc:	dc400d15 	stw	r17,52(sp)
   83700:	a47ff60e 	bge	r20,r17,836dc <___vfprintf_internal_r+0x424>
   83704:	d9014f17 	ldw	r4,1340(sp)
   83708:	b00b883a 	mov	r5,r22
   8370c:	d9800c04 	addi	r6,sp,48
   83710:	d9c15115 	stw	r7,1348(sp)
   83714:	00832600 	call	83260 <__sprint_r>
   83718:	d9c15117 	ldw	r7,1348(sp)
   8371c:	10009e1e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   83720:	843ffc04 	addi	r16,r16,-16
   83724:	dc800e17 	ldw	r18,56(sp)
   83728:	dc400d17 	ldw	r17,52(sp)
   8372c:	dd401904 	addi	r21,sp,100
   83730:	9c3fed16 	blt	r19,r16,836e8 <___vfprintf_internal_r+0x430>
   83734:	9425883a 	add	r18,r18,r16
   83738:	8c400044 	addi	r17,r17,1
   8373c:	008001c4 	movi	r2,7
   83740:	af000015 	stw	fp,0(r21)
   83744:	ac000115 	stw	r16,4(r21)
   83748:	dc800e15 	stw	r18,56(sp)
   8374c:	dc400d15 	stw	r17,52(sp)
   83750:	1441f516 	blt	r2,r17,83f28 <___vfprintf_internal_r+0xc70>
   83754:	ad400204 	addi	r21,r21,8
   83758:	00000206 	br	83764 <___vfprintf_internal_r+0x4ac>
   8375c:	dc800e17 	ldw	r18,56(sp)
   83760:	dc400d17 	ldw	r17,52(sp)
   83764:	d8800407 	ldb	r2,16(sp)
   83768:	10000b26 	beq	r2,zero,83798 <___vfprintf_internal_r+0x4e0>
   8376c:	00800044 	movi	r2,1
   83770:	94800044 	addi	r18,r18,1
   83774:	8c400044 	addi	r17,r17,1
   83778:	a8800115 	stw	r2,4(r21)
   8377c:	d8c00404 	addi	r3,sp,16
   83780:	008001c4 	movi	r2,7
   83784:	a8c00015 	stw	r3,0(r21)
   83788:	dc800e15 	stw	r18,56(sp)
   8378c:	dc400d15 	stw	r17,52(sp)
   83790:	1441da16 	blt	r2,r17,83efc <___vfprintf_internal_r+0xc44>
   83794:	ad400204 	addi	r21,r21,8
   83798:	d9015017 	ldw	r4,1344(sp)
   8379c:	20000b1e 	bne	r4,zero,837cc <___vfprintf_internal_r+0x514>
   837a0:	d8800444 	addi	r2,sp,17
   837a4:	94800084 	addi	r18,r18,2
   837a8:	8c400044 	addi	r17,r17,1
   837ac:	a8800015 	stw	r2,0(r21)
   837b0:	00c00084 	movi	r3,2
   837b4:	008001c4 	movi	r2,7
   837b8:	a8c00115 	stw	r3,4(r21)
   837bc:	dc800e15 	stw	r18,56(sp)
   837c0:	dc400d15 	stw	r17,52(sp)
   837c4:	1441c216 	blt	r2,r17,83ed0 <___vfprintf_internal_r+0xc18>
   837c8:	ad400204 	addi	r21,r21,8
   837cc:	d9414e17 	ldw	r5,1336(sp)
   837d0:	00802004 	movi	r2,128
   837d4:	2880b126 	beq	r5,r2,83a9c <___vfprintf_internal_r+0x7e4>
   837d8:	d8c14617 	ldw	r3,1304(sp)
   837dc:	19e1c83a 	sub	r16,r3,r7
   837e0:	0400260e 	bge	zero,r16,8387c <___vfprintf_internal_r+0x5c4>
   837e4:	00800404 	movi	r2,16
   837e8:	1403cf0e 	bge	r2,r16,84728 <___vfprintf_internal_r+0x1470>
   837ec:	1027883a 	mov	r19,r2
   837f0:	07000274 	movhi	fp,9
   837f4:	e7106884 	addi	fp,fp,16802
   837f8:	050001c4 	movi	r20,7
   837fc:	00000306 	br	8380c <___vfprintf_internal_r+0x554>
   83800:	843ffc04 	addi	r16,r16,-16
   83804:	ad400204 	addi	r21,r21,8
   83808:	9c00130e 	bge	r19,r16,83858 <___vfprintf_internal_r+0x5a0>
   8380c:	94800404 	addi	r18,r18,16
   83810:	8c400044 	addi	r17,r17,1
   83814:	af000015 	stw	fp,0(r21)
   83818:	acc00115 	stw	r19,4(r21)
   8381c:	dc800e15 	stw	r18,56(sp)
   83820:	dc400d15 	stw	r17,52(sp)
   83824:	a47ff60e 	bge	r20,r17,83800 <___vfprintf_internal_r+0x548>
   83828:	d9014f17 	ldw	r4,1340(sp)
   8382c:	b00b883a 	mov	r5,r22
   83830:	d9800c04 	addi	r6,sp,48
   83834:	d9c15115 	stw	r7,1348(sp)
   83838:	00832600 	call	83260 <__sprint_r>
   8383c:	d9c15117 	ldw	r7,1348(sp)
   83840:	1000551e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   83844:	843ffc04 	addi	r16,r16,-16
   83848:	dc800e17 	ldw	r18,56(sp)
   8384c:	dc400d17 	ldw	r17,52(sp)
   83850:	dd401904 	addi	r21,sp,100
   83854:	9c3fed16 	blt	r19,r16,8380c <___vfprintf_internal_r+0x554>
   83858:	9425883a 	add	r18,r18,r16
   8385c:	8c400044 	addi	r17,r17,1
   83860:	008001c4 	movi	r2,7
   83864:	af000015 	stw	fp,0(r21)
   83868:	ac000115 	stw	r16,4(r21)
   8386c:	dc800e15 	stw	r18,56(sp)
   83870:	dc400d15 	stw	r17,52(sp)
   83874:	14418216 	blt	r2,r17,83e80 <___vfprintf_internal_r+0xbc8>
   83878:	ad400204 	addi	r21,r21,8
   8387c:	d9014c17 	ldw	r4,1328(sp)
   83880:	2080400c 	andi	r2,r4,256
   83884:	10004a1e 	bne	r2,zero,839b0 <___vfprintf_internal_r+0x6f8>
   83888:	d9414117 	ldw	r5,1284(sp)
   8388c:	91e5883a 	add	r18,r18,r7
   83890:	8c400044 	addi	r17,r17,1
   83894:	008001c4 	movi	r2,7
   83898:	a9400015 	stw	r5,0(r21)
   8389c:	a9c00115 	stw	r7,4(r21)
   838a0:	dc800e15 	stw	r18,56(sp)
   838a4:	dc400d15 	stw	r17,52(sp)
   838a8:	14416716 	blt	r2,r17,83e48 <___vfprintf_internal_r+0xb90>
   838ac:	a8c00204 	addi	r3,r21,8
   838b0:	d9814c17 	ldw	r6,1328(sp)
   838b4:	3080010c 	andi	r2,r6,4
   838b8:	10002826 	beq	r2,zero,8395c <___vfprintf_internal_r+0x6a4>
   838bc:	d8814a17 	ldw	r2,1320(sp)
   838c0:	d9014517 	ldw	r4,1300(sp)
   838c4:	1121c83a 	sub	r16,r2,r4
   838c8:	0400240e 	bge	zero,r16,8395c <___vfprintf_internal_r+0x6a4>
   838cc:	00800404 	movi	r2,16
   838d0:	1404550e 	bge	r2,r16,84a28 <___vfprintf_internal_r+0x1770>
   838d4:	dc400d17 	ldw	r17,52(sp)
   838d8:	1027883a 	mov	r19,r2
   838dc:	07000274 	movhi	fp,9
   838e0:	e7106c84 	addi	fp,fp,16818
   838e4:	050001c4 	movi	r20,7
   838e8:	00000306 	br	838f8 <___vfprintf_internal_r+0x640>
   838ec:	843ffc04 	addi	r16,r16,-16
   838f0:	18c00204 	addi	r3,r3,8
   838f4:	9c00110e 	bge	r19,r16,8393c <___vfprintf_internal_r+0x684>
   838f8:	94800404 	addi	r18,r18,16
   838fc:	8c400044 	addi	r17,r17,1
   83900:	1f000015 	stw	fp,0(r3)
   83904:	1cc00115 	stw	r19,4(r3)
   83908:	dc800e15 	stw	r18,56(sp)
   8390c:	dc400d15 	stw	r17,52(sp)
   83910:	a47ff60e 	bge	r20,r17,838ec <___vfprintf_internal_r+0x634>
   83914:	d9014f17 	ldw	r4,1340(sp)
   83918:	b00b883a 	mov	r5,r22
   8391c:	d9800c04 	addi	r6,sp,48
   83920:	00832600 	call	83260 <__sprint_r>
   83924:	10001c1e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   83928:	843ffc04 	addi	r16,r16,-16
   8392c:	dc800e17 	ldw	r18,56(sp)
   83930:	dc400d17 	ldw	r17,52(sp)
   83934:	d8c01904 	addi	r3,sp,100
   83938:	9c3fef16 	blt	r19,r16,838f8 <___vfprintf_internal_r+0x640>
   8393c:	9425883a 	add	r18,r18,r16
   83940:	8c400044 	addi	r17,r17,1
   83944:	008001c4 	movi	r2,7
   83948:	1f000015 	stw	fp,0(r3)
   8394c:	1c000115 	stw	r16,4(r3)
   83950:	dc800e15 	stw	r18,56(sp)
   83954:	dc400d15 	stw	r17,52(sp)
   83958:	1440cb16 	blt	r2,r17,83c88 <___vfprintf_internal_r+0x9d0>
   8395c:	d8814a17 	ldw	r2,1320(sp)
   83960:	d9414517 	ldw	r5,1300(sp)
   83964:	1140010e 	bge	r2,r5,8396c <___vfprintf_internal_r+0x6b4>
   83968:	2805883a 	mov	r2,r5
   8396c:	d9814b17 	ldw	r6,1324(sp)
   83970:	308d883a 	add	r6,r6,r2
   83974:	d9814b15 	stw	r6,1324(sp)
   83978:	90013b1e 	bne	r18,zero,83e68 <___vfprintf_internal_r+0xbb0>
   8397c:	d9c14017 	ldw	r7,1280(sp)
   83980:	dd401904 	addi	r21,sp,100
   83984:	d8000d15 	stw	zero,52(sp)
   83988:	003ea706 	br	83428 <___vfprintf_internal_r+0x170>
   8398c:	d8800e17 	ldw	r2,56(sp)
   83990:	1005451e 	bne	r2,zero,84ea8 <___vfprintf_internal_r+0x1bf0>
   83994:	d8000d15 	stw	zero,52(sp)
   83998:	b080030b 	ldhu	r2,12(r22)
   8399c:	1080100c 	andi	r2,r2,64
   839a0:	103e8726 	beq	r2,zero,833c0 <___vfprintf_internal_r+0x108>
   839a4:	00bfffc4 	movi	r2,-1
   839a8:	d8814b15 	stw	r2,1324(sp)
   839ac:	003e8406 	br	833c0 <___vfprintf_internal_r+0x108>
   839b0:	d9814d17 	ldw	r6,1332(sp)
   839b4:	00801944 	movi	r2,101
   839b8:	11806e16 	blt	r2,r6,83b74 <___vfprintf_internal_r+0x8bc>
   839bc:	d9414717 	ldw	r5,1308(sp)
   839c0:	00c00044 	movi	r3,1
   839c4:	1943490e 	bge	r3,r5,846ec <___vfprintf_internal_r+0x1434>
   839c8:	d8814117 	ldw	r2,1284(sp)
   839cc:	94800044 	addi	r18,r18,1
   839d0:	8c400044 	addi	r17,r17,1
   839d4:	a8800015 	stw	r2,0(r21)
   839d8:	008001c4 	movi	r2,7
   839dc:	a8c00115 	stw	r3,4(r21)
   839e0:	dc800e15 	stw	r18,56(sp)
   839e4:	dc400d15 	stw	r17,52(sp)
   839e8:	1441ca16 	blt	r2,r17,84114 <___vfprintf_internal_r+0xe5c>
   839ec:	a8c00204 	addi	r3,r21,8
   839f0:	d9014917 	ldw	r4,1316(sp)
   839f4:	00800044 	movi	r2,1
   839f8:	94800044 	addi	r18,r18,1
   839fc:	8c400044 	addi	r17,r17,1
   83a00:	18800115 	stw	r2,4(r3)
   83a04:	008001c4 	movi	r2,7
   83a08:	19000015 	stw	r4,0(r3)
   83a0c:	dc800e15 	stw	r18,56(sp)
   83a10:	dc400d15 	stw	r17,52(sp)
   83a14:	1441b616 	blt	r2,r17,840f0 <___vfprintf_internal_r+0xe38>
   83a18:	1cc00204 	addi	r19,r3,8
   83a1c:	d9014217 	ldw	r4,1288(sp)
   83a20:	d9414317 	ldw	r5,1292(sp)
   83a24:	000d883a 	mov	r6,zero
   83a28:	000f883a 	mov	r7,zero
   83a2c:	008f3440 	call	8f344 <__nedf2>
   83a30:	10017426 	beq	r2,zero,84004 <___vfprintf_internal_r+0xd4c>
   83a34:	d9414717 	ldw	r5,1308(sp)
   83a38:	d9814117 	ldw	r6,1284(sp)
   83a3c:	8c400044 	addi	r17,r17,1
   83a40:	2c85883a 	add	r2,r5,r18
   83a44:	14bfffc4 	addi	r18,r2,-1
   83a48:	28bfffc4 	addi	r2,r5,-1
   83a4c:	30c00044 	addi	r3,r6,1
   83a50:	98800115 	stw	r2,4(r19)
   83a54:	008001c4 	movi	r2,7
   83a58:	98c00015 	stw	r3,0(r19)
   83a5c:	dc800e15 	stw	r18,56(sp)
   83a60:	dc400d15 	stw	r17,52(sp)
   83a64:	14418e16 	blt	r2,r17,840a0 <___vfprintf_internal_r+0xde8>
   83a68:	9cc00204 	addi	r19,r19,8
   83a6c:	d9414817 	ldw	r5,1312(sp)
   83a70:	d8800804 	addi	r2,sp,32
   83a74:	8c400044 	addi	r17,r17,1
   83a78:	9165883a 	add	r18,r18,r5
   83a7c:	98800015 	stw	r2,0(r19)
   83a80:	008001c4 	movi	r2,7
   83a84:	99400115 	stw	r5,4(r19)
   83a88:	dc800e15 	stw	r18,56(sp)
   83a8c:	dc400d15 	stw	r17,52(sp)
   83a90:	1440ed16 	blt	r2,r17,83e48 <___vfprintf_internal_r+0xb90>
   83a94:	98c00204 	addi	r3,r19,8
   83a98:	003f8506 	br	838b0 <___vfprintf_internal_r+0x5f8>
   83a9c:	d9814a17 	ldw	r6,1320(sp)
   83aa0:	d8814517 	ldw	r2,1300(sp)
   83aa4:	30a1c83a 	sub	r16,r6,r2
   83aa8:	043f4b0e 	bge	zero,r16,837d8 <___vfprintf_internal_r+0x520>
   83aac:	00800404 	movi	r2,16
   83ab0:	14043a0e 	bge	r2,r16,84b9c <___vfprintf_internal_r+0x18e4>
   83ab4:	1027883a 	mov	r19,r2
   83ab8:	07000274 	movhi	fp,9
   83abc:	e7106884 	addi	fp,fp,16802
   83ac0:	050001c4 	movi	r20,7
   83ac4:	00000306 	br	83ad4 <___vfprintf_internal_r+0x81c>
   83ac8:	843ffc04 	addi	r16,r16,-16
   83acc:	ad400204 	addi	r21,r21,8
   83ad0:	9c00130e 	bge	r19,r16,83b20 <___vfprintf_internal_r+0x868>
   83ad4:	94800404 	addi	r18,r18,16
   83ad8:	8c400044 	addi	r17,r17,1
   83adc:	af000015 	stw	fp,0(r21)
   83ae0:	acc00115 	stw	r19,4(r21)
   83ae4:	dc800e15 	stw	r18,56(sp)
   83ae8:	dc400d15 	stw	r17,52(sp)
   83aec:	a47ff60e 	bge	r20,r17,83ac8 <___vfprintf_internal_r+0x810>
   83af0:	d9014f17 	ldw	r4,1340(sp)
   83af4:	b00b883a 	mov	r5,r22
   83af8:	d9800c04 	addi	r6,sp,48
   83afc:	d9c15115 	stw	r7,1348(sp)
   83b00:	00832600 	call	83260 <__sprint_r>
   83b04:	d9c15117 	ldw	r7,1348(sp)
   83b08:	103fa31e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   83b0c:	843ffc04 	addi	r16,r16,-16
   83b10:	dc800e17 	ldw	r18,56(sp)
   83b14:	dc400d17 	ldw	r17,52(sp)
   83b18:	dd401904 	addi	r21,sp,100
   83b1c:	9c3fed16 	blt	r19,r16,83ad4 <___vfprintf_internal_r+0x81c>
   83b20:	9425883a 	add	r18,r18,r16
   83b24:	8c400044 	addi	r17,r17,1
   83b28:	008001c4 	movi	r2,7
   83b2c:	af000015 	stw	fp,0(r21)
   83b30:	ac000115 	stw	r16,4(r21)
   83b34:	dc800e15 	stw	r18,56(sp)
   83b38:	dc400d15 	stw	r17,52(sp)
   83b3c:	14416116 	blt	r2,r17,840c4 <___vfprintf_internal_r+0xe0c>
   83b40:	ad400204 	addi	r21,r21,8
   83b44:	003f2406 	br	837d8 <___vfprintf_internal_r+0x520>
   83b48:	d9014f17 	ldw	r4,1340(sp)
   83b4c:	00885dc0 	call	885dc <__sinit>
   83b50:	d9c15117 	ldw	r7,1348(sp)
   83b54:	003def06 	br	83314 <___vfprintf_internal_r+0x5c>
   83b58:	d9014f17 	ldw	r4,1340(sp)
   83b5c:	b00b883a 	mov	r5,r22
   83b60:	d9c15115 	stw	r7,1348(sp)
   83b64:	00869a00 	call	869a0 <__swsetup_r>
   83b68:	d9c15117 	ldw	r7,1348(sp)
   83b6c:	103dee26 	beq	r2,zero,83328 <___vfprintf_internal_r+0x70>
   83b70:	003f8c06 	br	839a4 <___vfprintf_internal_r+0x6ec>
   83b74:	d9014217 	ldw	r4,1288(sp)
   83b78:	d9414317 	ldw	r5,1292(sp)
   83b7c:	000d883a 	mov	r6,zero
   83b80:	000f883a 	mov	r7,zero
   83b84:	008f2bc0 	call	8f2bc <__eqdf2>
   83b88:	1000f21e 	bne	r2,zero,83f54 <___vfprintf_internal_r+0xc9c>
   83b8c:	00800274 	movhi	r2,9
   83b90:	10906804 	addi	r2,r2,16800
   83b94:	94800044 	addi	r18,r18,1
   83b98:	8c400044 	addi	r17,r17,1
   83b9c:	a8800015 	stw	r2,0(r21)
   83ba0:	00c00044 	movi	r3,1
   83ba4:	008001c4 	movi	r2,7
   83ba8:	a8c00115 	stw	r3,4(r21)
   83bac:	dc800e15 	stw	r18,56(sp)
   83bb0:	dc400d15 	stw	r17,52(sp)
   83bb4:	14430016 	blt	r2,r17,847b8 <___vfprintf_internal_r+0x1500>
   83bb8:	a8c00204 	addi	r3,r21,8
   83bbc:	d8800517 	ldw	r2,20(sp)
   83bc0:	d9014717 	ldw	r4,1308(sp)
   83bc4:	11015c0e 	bge	r2,r4,84138 <___vfprintf_internal_r+0xe80>
   83bc8:	dc400d17 	ldw	r17,52(sp)
   83bcc:	d9814917 	ldw	r6,1316(sp)
   83bd0:	00800044 	movi	r2,1
   83bd4:	94800044 	addi	r18,r18,1
   83bd8:	8c400044 	addi	r17,r17,1
   83bdc:	18800115 	stw	r2,4(r3)
   83be0:	008001c4 	movi	r2,7
   83be4:	19800015 	stw	r6,0(r3)
   83be8:	dc800e15 	stw	r18,56(sp)
   83bec:	dc400d15 	stw	r17,52(sp)
   83bf0:	14431616 	blt	r2,r17,8484c <___vfprintf_internal_r+0x1594>
   83bf4:	18c00204 	addi	r3,r3,8
   83bf8:	d8814717 	ldw	r2,1308(sp)
   83bfc:	143fffc4 	addi	r16,r2,-1
   83c00:	043f2b0e 	bge	zero,r16,838b0 <___vfprintf_internal_r+0x5f8>
   83c04:	00800404 	movi	r2,16
   83c08:	1402a80e 	bge	r2,r16,846ac <___vfprintf_internal_r+0x13f4>
   83c0c:	dc400d17 	ldw	r17,52(sp)
   83c10:	1027883a 	mov	r19,r2
   83c14:	07000274 	movhi	fp,9
   83c18:	e7106884 	addi	fp,fp,16802
   83c1c:	050001c4 	movi	r20,7
   83c20:	00000306 	br	83c30 <___vfprintf_internal_r+0x978>
   83c24:	18c00204 	addi	r3,r3,8
   83c28:	843ffc04 	addi	r16,r16,-16
   83c2c:	9c02a20e 	bge	r19,r16,846b8 <___vfprintf_internal_r+0x1400>
   83c30:	94800404 	addi	r18,r18,16
   83c34:	8c400044 	addi	r17,r17,1
   83c38:	1f000015 	stw	fp,0(r3)
   83c3c:	1cc00115 	stw	r19,4(r3)
   83c40:	dc800e15 	stw	r18,56(sp)
   83c44:	dc400d15 	stw	r17,52(sp)
   83c48:	a47ff60e 	bge	r20,r17,83c24 <___vfprintf_internal_r+0x96c>
   83c4c:	d9014f17 	ldw	r4,1340(sp)
   83c50:	b00b883a 	mov	r5,r22
   83c54:	d9800c04 	addi	r6,sp,48
   83c58:	00832600 	call	83260 <__sprint_r>
   83c5c:	103f4e1e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   83c60:	dc800e17 	ldw	r18,56(sp)
   83c64:	dc400d17 	ldw	r17,52(sp)
   83c68:	d8c01904 	addi	r3,sp,100
   83c6c:	003fee06 	br	83c28 <___vfprintf_internal_r+0x970>
   83c70:	d8802c0b 	ldhu	r2,176(sp)
   83c74:	00ffffc4 	movi	r3,-1
   83c78:	d8c14b15 	stw	r3,1324(sp)
   83c7c:	1080100c 	andi	r2,r2,64
   83c80:	103dcc1e 	bne	r2,zero,833b4 <___vfprintf_internal_r+0xfc>
   83c84:	003dce06 	br	833c0 <___vfprintf_internal_r+0x108>
   83c88:	d9014f17 	ldw	r4,1340(sp)
   83c8c:	b00b883a 	mov	r5,r22
   83c90:	d9800c04 	addi	r6,sp,48
   83c94:	00832600 	call	83260 <__sprint_r>
   83c98:	103f3f1e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   83c9c:	dc800e17 	ldw	r18,56(sp)
   83ca0:	003f2e06 	br	8395c <___vfprintf_internal_r+0x6a4>
   83ca4:	d9414c17 	ldw	r5,1328(sp)
   83ca8:	29400414 	ori	r5,r5,16
   83cac:	d9414c15 	stw	r5,1328(sp)
   83cb0:	d9814c17 	ldw	r6,1328(sp)
   83cb4:	3080080c 	andi	r2,r6,32
   83cb8:	10014f1e 	bne	r2,zero,841f8 <___vfprintf_internal_r+0xf40>
   83cbc:	d8c14c17 	ldw	r3,1328(sp)
   83cc0:	1880040c 	andi	r2,r3,16
   83cc4:	1002f01e 	bne	r2,zero,84888 <___vfprintf_internal_r+0x15d0>
   83cc8:	d9014c17 	ldw	r4,1328(sp)
   83ccc:	2080100c 	andi	r2,r4,64
   83cd0:	1002ed26 	beq	r2,zero,84888 <___vfprintf_internal_r+0x15d0>
   83cd4:	3880000f 	ldh	r2,0(r7)
   83cd8:	39c00104 	addi	r7,r7,4
   83cdc:	d9c14015 	stw	r7,1280(sp)
   83ce0:	1023d7fa 	srai	r17,r2,31
   83ce4:	1021883a 	mov	r16,r2
   83ce8:	88037816 	blt	r17,zero,84acc <___vfprintf_internal_r+0x1814>
   83cec:	01000044 	movi	r4,1
   83cf0:	98000416 	blt	r19,zero,83d04 <___vfprintf_internal_r+0xa4c>
   83cf4:	d8c14c17 	ldw	r3,1328(sp)
   83cf8:	00bfdfc4 	movi	r2,-129
   83cfc:	1886703a 	and	r3,r3,r2
   83d00:	d8c14c15 	stw	r3,1328(sp)
   83d04:	8444b03a 	or	r2,r16,r17
   83d08:	10022c1e 	bne	r2,zero,845bc <___vfprintf_internal_r+0x1304>
   83d0c:	98022b1e 	bne	r19,zero,845bc <___vfprintf_internal_r+0x1304>
   83d10:	20803fcc 	andi	r2,r4,255
   83d14:	1002a126 	beq	r2,zero,8479c <___vfprintf_internal_r+0x14e4>
   83d18:	d8c01904 	addi	r3,sp,100
   83d1c:	dd000f04 	addi	r20,sp,60
   83d20:	d8c14115 	stw	r3,1284(sp)
   83d24:	d8c14117 	ldw	r3,1284(sp)
   83d28:	dcc14515 	stw	r19,1300(sp)
   83d2c:	a0c5c83a 	sub	r2,r20,r3
   83d30:	11c00a04 	addi	r7,r2,40
   83d34:	99c0010e 	bge	r19,r7,83d3c <___vfprintf_internal_r+0xa84>
   83d38:	d9c14515 	stw	r7,1300(sp)
   83d3c:	dcc14615 	stw	r19,1304(sp)
   83d40:	d8800407 	ldb	r2,16(sp)
   83d44:	103e4c26 	beq	r2,zero,83678 <___vfprintf_internal_r+0x3c0>
   83d48:	d8814517 	ldw	r2,1300(sp)
   83d4c:	10800044 	addi	r2,r2,1
   83d50:	d8814515 	stw	r2,1300(sp)
   83d54:	003e4806 	br	83678 <___vfprintf_internal_r+0x3c0>
   83d58:	d9814c17 	ldw	r6,1328(sp)
   83d5c:	31800414 	ori	r6,r6,16
   83d60:	d9814c15 	stw	r6,1328(sp)
   83d64:	d8c14c17 	ldw	r3,1328(sp)
   83d68:	1880080c 	andi	r2,r3,32
   83d6c:	1001271e 	bne	r2,zero,8420c <___vfprintf_internal_r+0xf54>
   83d70:	d9414c17 	ldw	r5,1328(sp)
   83d74:	2880040c 	andi	r2,r5,16
   83d78:	1002bc1e 	bne	r2,zero,8486c <___vfprintf_internal_r+0x15b4>
   83d7c:	d9814c17 	ldw	r6,1328(sp)
   83d80:	3080100c 	andi	r2,r6,64
   83d84:	1002b926 	beq	r2,zero,8486c <___vfprintf_internal_r+0x15b4>
   83d88:	3c00000b 	ldhu	r16,0(r7)
   83d8c:	0009883a 	mov	r4,zero
   83d90:	39c00104 	addi	r7,r7,4
   83d94:	0023883a 	mov	r17,zero
   83d98:	d9c14015 	stw	r7,1280(sp)
   83d9c:	d8000405 	stb	zero,16(sp)
   83da0:	003fd306 	br	83cf0 <___vfprintf_internal_r+0xa38>
   83da4:	d9014c17 	ldw	r4,1328(sp)
   83da8:	21000414 	ori	r4,r4,16
   83dac:	d9014c15 	stw	r4,1328(sp)
   83db0:	d9414c17 	ldw	r5,1328(sp)
   83db4:	2880080c 	andi	r2,r5,32
   83db8:	1001081e 	bne	r2,zero,841dc <___vfprintf_internal_r+0xf24>
   83dbc:	d8c14c17 	ldw	r3,1328(sp)
   83dc0:	1880040c 	andi	r2,r3,16
   83dc4:	1002b61e 	bne	r2,zero,848a0 <___vfprintf_internal_r+0x15e8>
   83dc8:	d9014c17 	ldw	r4,1328(sp)
   83dcc:	2080100c 	andi	r2,r4,64
   83dd0:	1002b326 	beq	r2,zero,848a0 <___vfprintf_internal_r+0x15e8>
   83dd4:	3c00000b 	ldhu	r16,0(r7)
   83dd8:	01000044 	movi	r4,1
   83ddc:	39c00104 	addi	r7,r7,4
   83de0:	0023883a 	mov	r17,zero
   83de4:	d9c14015 	stw	r7,1280(sp)
   83de8:	d8000405 	stb	zero,16(sp)
   83dec:	003fc006 	br	83cf0 <___vfprintf_internal_r+0xa38>
   83df0:	d9014f17 	ldw	r4,1340(sp)
   83df4:	b00b883a 	mov	r5,r22
   83df8:	d9800c04 	addi	r6,sp,48
   83dfc:	00832600 	call	83260 <__sprint_r>
   83e00:	103ee51e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   83e04:	dc800e17 	ldw	r18,56(sp)
   83e08:	d8c01904 	addi	r3,sp,100
   83e0c:	d9814c17 	ldw	r6,1328(sp)
   83e10:	3080004c 	andi	r2,r6,1
   83e14:	1005003a 	cmpeq	r2,r2,zero
   83e18:	103ea51e 	bne	r2,zero,838b0 <___vfprintf_internal_r+0x5f8>
   83e1c:	00800044 	movi	r2,1
   83e20:	dc400d17 	ldw	r17,52(sp)
   83e24:	18800115 	stw	r2,4(r3)
   83e28:	d8814917 	ldw	r2,1316(sp)
   83e2c:	94800044 	addi	r18,r18,1
   83e30:	8c400044 	addi	r17,r17,1
   83e34:	18800015 	stw	r2,0(r3)
   83e38:	008001c4 	movi	r2,7
   83e3c:	dc800e15 	stw	r18,56(sp)
   83e40:	dc400d15 	stw	r17,52(sp)
   83e44:	1442240e 	bge	r2,r17,846d8 <___vfprintf_internal_r+0x1420>
   83e48:	d9014f17 	ldw	r4,1340(sp)
   83e4c:	b00b883a 	mov	r5,r22
   83e50:	d9800c04 	addi	r6,sp,48
   83e54:	00832600 	call	83260 <__sprint_r>
   83e58:	103ecf1e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   83e5c:	dc800e17 	ldw	r18,56(sp)
   83e60:	d8c01904 	addi	r3,sp,100
   83e64:	003e9206 	br	838b0 <___vfprintf_internal_r+0x5f8>
   83e68:	d9014f17 	ldw	r4,1340(sp)
   83e6c:	b00b883a 	mov	r5,r22
   83e70:	d9800c04 	addi	r6,sp,48
   83e74:	00832600 	call	83260 <__sprint_r>
   83e78:	103ec026 	beq	r2,zero,8397c <___vfprintf_internal_r+0x6c4>
   83e7c:	003ec606 	br	83998 <___vfprintf_internal_r+0x6e0>
   83e80:	d9014f17 	ldw	r4,1340(sp)
   83e84:	b00b883a 	mov	r5,r22
   83e88:	d9800c04 	addi	r6,sp,48
   83e8c:	d9c15115 	stw	r7,1348(sp)
   83e90:	00832600 	call	83260 <__sprint_r>
   83e94:	d9c15117 	ldw	r7,1348(sp)
   83e98:	103ebf1e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   83e9c:	dc800e17 	ldw	r18,56(sp)
   83ea0:	dc400d17 	ldw	r17,52(sp)
   83ea4:	dd401904 	addi	r21,sp,100
   83ea8:	003e7406 	br	8387c <___vfprintf_internal_r+0x5c4>
   83eac:	d9014f17 	ldw	r4,1340(sp)
   83eb0:	b00b883a 	mov	r5,r22
   83eb4:	d9800c04 	addi	r6,sp,48
   83eb8:	d9c15115 	stw	r7,1348(sp)
   83ebc:	00832600 	call	83260 <__sprint_r>
   83ec0:	d9c15117 	ldw	r7,1348(sp)
   83ec4:	103eb41e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   83ec8:	dd401904 	addi	r21,sp,100
   83ecc:	003d6d06 	br	83484 <___vfprintf_internal_r+0x1cc>
   83ed0:	d9014f17 	ldw	r4,1340(sp)
   83ed4:	b00b883a 	mov	r5,r22
   83ed8:	d9800c04 	addi	r6,sp,48
   83edc:	d9c15115 	stw	r7,1348(sp)
   83ee0:	00832600 	call	83260 <__sprint_r>
   83ee4:	d9c15117 	ldw	r7,1348(sp)
   83ee8:	103eab1e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   83eec:	dc800e17 	ldw	r18,56(sp)
   83ef0:	dc400d17 	ldw	r17,52(sp)
   83ef4:	dd401904 	addi	r21,sp,100
   83ef8:	003e3406 	br	837cc <___vfprintf_internal_r+0x514>
   83efc:	d9014f17 	ldw	r4,1340(sp)
   83f00:	b00b883a 	mov	r5,r22
   83f04:	d9800c04 	addi	r6,sp,48
   83f08:	d9c15115 	stw	r7,1348(sp)
   83f0c:	00832600 	call	83260 <__sprint_r>
   83f10:	d9c15117 	ldw	r7,1348(sp)
   83f14:	103ea01e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   83f18:	dc800e17 	ldw	r18,56(sp)
   83f1c:	dc400d17 	ldw	r17,52(sp)
   83f20:	dd401904 	addi	r21,sp,100
   83f24:	003e1c06 	br	83798 <___vfprintf_internal_r+0x4e0>
   83f28:	d9014f17 	ldw	r4,1340(sp)
   83f2c:	b00b883a 	mov	r5,r22
   83f30:	d9800c04 	addi	r6,sp,48
   83f34:	d9c15115 	stw	r7,1348(sp)
   83f38:	00832600 	call	83260 <__sprint_r>
   83f3c:	d9c15117 	ldw	r7,1348(sp)
   83f40:	103e951e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   83f44:	dc800e17 	ldw	r18,56(sp)
   83f48:	dc400d17 	ldw	r17,52(sp)
   83f4c:	dd401904 	addi	r21,sp,100
   83f50:	003e0406 	br	83764 <___vfprintf_internal_r+0x4ac>
   83f54:	d9000517 	ldw	r4,20(sp)
   83f58:	0102580e 	bge	zero,r4,848bc <___vfprintf_internal_r+0x1604>
   83f5c:	d9814717 	ldw	r6,1308(sp)
   83f60:	21807a16 	blt	r4,r6,8414c <___vfprintf_internal_r+0xe94>
   83f64:	d8814117 	ldw	r2,1284(sp)
   83f68:	91a5883a 	add	r18,r18,r6
   83f6c:	8c400044 	addi	r17,r17,1
   83f70:	a8800015 	stw	r2,0(r21)
   83f74:	008001c4 	movi	r2,7
   83f78:	a9800115 	stw	r6,4(r21)
   83f7c:	dc800e15 	stw	r18,56(sp)
   83f80:	dc400d15 	stw	r17,52(sp)
   83f84:	1442fc16 	blt	r2,r17,84b78 <___vfprintf_internal_r+0x18c0>
   83f88:	a8c00204 	addi	r3,r21,8
   83f8c:	d9414717 	ldw	r5,1308(sp)
   83f90:	2161c83a 	sub	r16,r4,r5
   83f94:	043f9d0e 	bge	zero,r16,83e0c <___vfprintf_internal_r+0xb54>
   83f98:	00800404 	movi	r2,16
   83f9c:	1402190e 	bge	r2,r16,84804 <___vfprintf_internal_r+0x154c>
   83fa0:	dc400d17 	ldw	r17,52(sp)
   83fa4:	1027883a 	mov	r19,r2
   83fa8:	07000274 	movhi	fp,9
   83fac:	e7106884 	addi	fp,fp,16802
   83fb0:	050001c4 	movi	r20,7
   83fb4:	00000306 	br	83fc4 <___vfprintf_internal_r+0xd0c>
   83fb8:	18c00204 	addi	r3,r3,8
   83fbc:	843ffc04 	addi	r16,r16,-16
   83fc0:	9c02130e 	bge	r19,r16,84810 <___vfprintf_internal_r+0x1558>
   83fc4:	94800404 	addi	r18,r18,16
   83fc8:	8c400044 	addi	r17,r17,1
   83fcc:	1f000015 	stw	fp,0(r3)
   83fd0:	1cc00115 	stw	r19,4(r3)
   83fd4:	dc800e15 	stw	r18,56(sp)
   83fd8:	dc400d15 	stw	r17,52(sp)
   83fdc:	a47ff60e 	bge	r20,r17,83fb8 <___vfprintf_internal_r+0xd00>
   83fe0:	d9014f17 	ldw	r4,1340(sp)
   83fe4:	b00b883a 	mov	r5,r22
   83fe8:	d9800c04 	addi	r6,sp,48
   83fec:	00832600 	call	83260 <__sprint_r>
   83ff0:	103e691e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   83ff4:	dc800e17 	ldw	r18,56(sp)
   83ff8:	dc400d17 	ldw	r17,52(sp)
   83ffc:	d8c01904 	addi	r3,sp,100
   84000:	003fee06 	br	83fbc <___vfprintf_internal_r+0xd04>
   84004:	d8814717 	ldw	r2,1308(sp)
   84008:	143fffc4 	addi	r16,r2,-1
   8400c:	043e970e 	bge	zero,r16,83a6c <___vfprintf_internal_r+0x7b4>
   84010:	00800404 	movi	r2,16
   84014:	1400180e 	bge	r2,r16,84078 <___vfprintf_internal_r+0xdc0>
   84018:	1029883a 	mov	r20,r2
   8401c:	07000274 	movhi	fp,9
   84020:	e7106884 	addi	fp,fp,16802
   84024:	054001c4 	movi	r21,7
   84028:	00000306 	br	84038 <___vfprintf_internal_r+0xd80>
   8402c:	9cc00204 	addi	r19,r19,8
   84030:	843ffc04 	addi	r16,r16,-16
   84034:	a400120e 	bge	r20,r16,84080 <___vfprintf_internal_r+0xdc8>
   84038:	94800404 	addi	r18,r18,16
   8403c:	8c400044 	addi	r17,r17,1
   84040:	9f000015 	stw	fp,0(r19)
   84044:	9d000115 	stw	r20,4(r19)
   84048:	dc800e15 	stw	r18,56(sp)
   8404c:	dc400d15 	stw	r17,52(sp)
   84050:	ac7ff60e 	bge	r21,r17,8402c <___vfprintf_internal_r+0xd74>
   84054:	d9014f17 	ldw	r4,1340(sp)
   84058:	b00b883a 	mov	r5,r22
   8405c:	d9800c04 	addi	r6,sp,48
   84060:	00832600 	call	83260 <__sprint_r>
   84064:	103e4c1e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   84068:	dc800e17 	ldw	r18,56(sp)
   8406c:	dc400d17 	ldw	r17,52(sp)
   84070:	dcc01904 	addi	r19,sp,100
   84074:	003fee06 	br	84030 <___vfprintf_internal_r+0xd78>
   84078:	07000274 	movhi	fp,9
   8407c:	e7106884 	addi	fp,fp,16802
   84080:	9425883a 	add	r18,r18,r16
   84084:	8c400044 	addi	r17,r17,1
   84088:	008001c4 	movi	r2,7
   8408c:	9f000015 	stw	fp,0(r19)
   84090:	9c000115 	stw	r16,4(r19)
   84094:	dc800e15 	stw	r18,56(sp)
   84098:	dc400d15 	stw	r17,52(sp)
   8409c:	147e720e 	bge	r2,r17,83a68 <___vfprintf_internal_r+0x7b0>
   840a0:	d9014f17 	ldw	r4,1340(sp)
   840a4:	b00b883a 	mov	r5,r22
   840a8:	d9800c04 	addi	r6,sp,48
   840ac:	00832600 	call	83260 <__sprint_r>
   840b0:	103e391e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   840b4:	dc800e17 	ldw	r18,56(sp)
   840b8:	dc400d17 	ldw	r17,52(sp)
   840bc:	dcc01904 	addi	r19,sp,100
   840c0:	003e6a06 	br	83a6c <___vfprintf_internal_r+0x7b4>
   840c4:	d9014f17 	ldw	r4,1340(sp)
   840c8:	b00b883a 	mov	r5,r22
   840cc:	d9800c04 	addi	r6,sp,48
   840d0:	d9c15115 	stw	r7,1348(sp)
   840d4:	00832600 	call	83260 <__sprint_r>
   840d8:	d9c15117 	ldw	r7,1348(sp)
   840dc:	103e2e1e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   840e0:	dc800e17 	ldw	r18,56(sp)
   840e4:	dc400d17 	ldw	r17,52(sp)
   840e8:	dd401904 	addi	r21,sp,100
   840ec:	003dba06 	br	837d8 <___vfprintf_internal_r+0x520>
   840f0:	d9014f17 	ldw	r4,1340(sp)
   840f4:	b00b883a 	mov	r5,r22
   840f8:	d9800c04 	addi	r6,sp,48
   840fc:	00832600 	call	83260 <__sprint_r>
   84100:	103e251e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   84104:	dc800e17 	ldw	r18,56(sp)
   84108:	dc400d17 	ldw	r17,52(sp)
   8410c:	dcc01904 	addi	r19,sp,100
   84110:	003e4206 	br	83a1c <___vfprintf_internal_r+0x764>
   84114:	d9014f17 	ldw	r4,1340(sp)
   84118:	b00b883a 	mov	r5,r22
   8411c:	d9800c04 	addi	r6,sp,48
   84120:	00832600 	call	83260 <__sprint_r>
   84124:	103e1c1e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   84128:	dc800e17 	ldw	r18,56(sp)
   8412c:	dc400d17 	ldw	r17,52(sp)
   84130:	d8c01904 	addi	r3,sp,100
   84134:	003e2e06 	br	839f0 <___vfprintf_internal_r+0x738>
   84138:	d9414c17 	ldw	r5,1328(sp)
   8413c:	2880004c 	andi	r2,r5,1
   84140:	1005003a 	cmpeq	r2,r2,zero
   84144:	103dda1e 	bne	r2,zero,838b0 <___vfprintf_internal_r+0x5f8>
   84148:	003e9f06 	br	83bc8 <___vfprintf_internal_r+0x910>
   8414c:	d8c14117 	ldw	r3,1284(sp)
   84150:	9125883a 	add	r18,r18,r4
   84154:	8c400044 	addi	r17,r17,1
   84158:	008001c4 	movi	r2,7
   8415c:	a8c00015 	stw	r3,0(r21)
   84160:	a9000115 	stw	r4,4(r21)
   84164:	dc800e15 	stw	r18,56(sp)
   84168:	dc400d15 	stw	r17,52(sp)
   8416c:	14426c16 	blt	r2,r17,84b20 <___vfprintf_internal_r+0x1868>
   84170:	a8c00204 	addi	r3,r21,8
   84174:	d9414917 	ldw	r5,1316(sp)
   84178:	00800044 	movi	r2,1
   8417c:	94800044 	addi	r18,r18,1
   84180:	8c400044 	addi	r17,r17,1
   84184:	18800115 	stw	r2,4(r3)
   84188:	008001c4 	movi	r2,7
   8418c:	19400015 	stw	r5,0(r3)
   84190:	dc800e15 	stw	r18,56(sp)
   84194:	dc400d15 	stw	r17,52(sp)
   84198:	2021883a 	mov	r16,r4
   8419c:	14425616 	blt	r2,r17,84af8 <___vfprintf_internal_r+0x1840>
   841a0:	19400204 	addi	r5,r3,8
   841a4:	d9814717 	ldw	r6,1308(sp)
   841a8:	8c400044 	addi	r17,r17,1
   841ac:	dc400d15 	stw	r17,52(sp)
   841b0:	3107c83a 	sub	r3,r6,r4
   841b4:	d9014117 	ldw	r4,1284(sp)
   841b8:	90e5883a 	add	r18,r18,r3
   841bc:	28c00115 	stw	r3,4(r5)
   841c0:	8105883a 	add	r2,r16,r4
   841c4:	28800015 	stw	r2,0(r5)
   841c8:	008001c4 	movi	r2,7
   841cc:	dc800e15 	stw	r18,56(sp)
   841d0:	147f1d16 	blt	r2,r17,83e48 <___vfprintf_internal_r+0xb90>
   841d4:	28c00204 	addi	r3,r5,8
   841d8:	003db506 	br	838b0 <___vfprintf_internal_r+0x5f8>
   841dc:	3c000017 	ldw	r16,0(r7)
   841e0:	3c400117 	ldw	r17,4(r7)
   841e4:	39800204 	addi	r6,r7,8
   841e8:	01000044 	movi	r4,1
   841ec:	d9814015 	stw	r6,1280(sp)
   841f0:	d8000405 	stb	zero,16(sp)
   841f4:	003ebe06 	br	83cf0 <___vfprintf_internal_r+0xa38>
   841f8:	3c000017 	ldw	r16,0(r7)
   841fc:	3c400117 	ldw	r17,4(r7)
   84200:	38800204 	addi	r2,r7,8
   84204:	d8814015 	stw	r2,1280(sp)
   84208:	003eb706 	br	83ce8 <___vfprintf_internal_r+0xa30>
   8420c:	3c000017 	ldw	r16,0(r7)
   84210:	3c400117 	ldw	r17,4(r7)
   84214:	39000204 	addi	r4,r7,8
   84218:	d9014015 	stw	r4,1280(sp)
   8421c:	0009883a 	mov	r4,zero
   84220:	d8000405 	stb	zero,16(sp)
   84224:	003eb206 	br	83cf0 <___vfprintf_internal_r+0xa38>
   84228:	38c00017 	ldw	r3,0(r7)
   8422c:	39c00104 	addi	r7,r7,4
   84230:	d8c14a15 	stw	r3,1320(sp)
   84234:	1800d70e 	bge	r3,zero,84594 <___vfprintf_internal_r+0x12dc>
   84238:	00c7c83a 	sub	r3,zero,r3
   8423c:	d8c14a15 	stw	r3,1320(sp)
   84240:	d9014c17 	ldw	r4,1328(sp)
   84244:	b8c00007 	ldb	r3,0(r23)
   84248:	21000114 	ori	r4,r4,4
   8424c:	d9014c15 	stw	r4,1328(sp)
   84250:	003c9806 	br	834b4 <___vfprintf_internal_r+0x1fc>
   84254:	d9814c17 	ldw	r6,1328(sp)
   84258:	3080080c 	andi	r2,r6,32
   8425c:	1001f626 	beq	r2,zero,84a38 <___vfprintf_internal_r+0x1780>
   84260:	d9014b17 	ldw	r4,1324(sp)
   84264:	38800017 	ldw	r2,0(r7)
   84268:	39c00104 	addi	r7,r7,4
   8426c:	d9c14015 	stw	r7,1280(sp)
   84270:	2007d7fa 	srai	r3,r4,31
   84274:	d9c14017 	ldw	r7,1280(sp)
   84278:	11000015 	stw	r4,0(r2)
   8427c:	10c00115 	stw	r3,4(r2)
   84280:	003c6906 	br	83428 <___vfprintf_internal_r+0x170>
   84284:	b8c00007 	ldb	r3,0(r23)
   84288:	00801b04 	movi	r2,108
   8428c:	18825526 	beq	r3,r2,84be4 <___vfprintf_internal_r+0x192c>
   84290:	d9414c17 	ldw	r5,1328(sp)
   84294:	29400414 	ori	r5,r5,16
   84298:	d9414c15 	stw	r5,1328(sp)
   8429c:	003c8506 	br	834b4 <___vfprintf_internal_r+0x1fc>
   842a0:	d9814c17 	ldw	r6,1328(sp)
   842a4:	b8c00007 	ldb	r3,0(r23)
   842a8:	31800814 	ori	r6,r6,32
   842ac:	d9814c15 	stw	r6,1328(sp)
   842b0:	003c8006 	br	834b4 <___vfprintf_internal_r+0x1fc>
   842b4:	d8814c17 	ldw	r2,1328(sp)
   842b8:	3c000017 	ldw	r16,0(r7)
   842bc:	00c01e04 	movi	r3,120
   842c0:	10800094 	ori	r2,r2,2
   842c4:	d8814c15 	stw	r2,1328(sp)
   842c8:	39c00104 	addi	r7,r7,4
   842cc:	01400274 	movhi	r5,9
   842d0:	29505104 	addi	r5,r5,16708
   842d4:	00800c04 	movi	r2,48
   842d8:	0023883a 	mov	r17,zero
   842dc:	01000084 	movi	r4,2
   842e0:	d9c14015 	stw	r7,1280(sp)
   842e4:	d8c14d15 	stw	r3,1332(sp)
   842e8:	d9414415 	stw	r5,1296(sp)
   842ec:	d8800445 	stb	r2,17(sp)
   842f0:	d8c00485 	stb	r3,18(sp)
   842f4:	d8000405 	stb	zero,16(sp)
   842f8:	003e7d06 	br	83cf0 <___vfprintf_internal_r+0xa38>
   842fc:	d8814c17 	ldw	r2,1328(sp)
   84300:	b8c00007 	ldb	r3,0(r23)
   84304:	10801014 	ori	r2,r2,64
   84308:	d8814c15 	stw	r2,1328(sp)
   8430c:	003c6906 	br	834b4 <___vfprintf_internal_r+0x1fc>
   84310:	d9414c17 	ldw	r5,1328(sp)
   84314:	2880020c 	andi	r2,r5,8
   84318:	1001e526 	beq	r2,zero,84ab0 <___vfprintf_internal_r+0x17f8>
   8431c:	39800017 	ldw	r6,0(r7)
   84320:	38800204 	addi	r2,r7,8
   84324:	d8814015 	stw	r2,1280(sp)
   84328:	d9814215 	stw	r6,1288(sp)
   8432c:	39c00117 	ldw	r7,4(r7)
   84330:	d9c14315 	stw	r7,1292(sp)
   84334:	d9014217 	ldw	r4,1288(sp)
   84338:	d9414317 	ldw	r5,1292(sp)
   8433c:	008a5880 	call	8a588 <__isinfd>
   84340:	10021d26 	beq	r2,zero,84bb8 <___vfprintf_internal_r+0x1900>
   84344:	d9014217 	ldw	r4,1288(sp)
   84348:	d9414317 	ldw	r5,1292(sp)
   8434c:	000d883a 	mov	r6,zero
   84350:	000f883a 	mov	r7,zero
   84354:	008f4dc0 	call	8f4dc <__ltdf2>
   84358:	1002d016 	blt	r2,zero,84e9c <___vfprintf_internal_r+0x1be4>
   8435c:	d9414d17 	ldw	r5,1332(sp)
   84360:	008011c4 	movi	r2,71
   84364:	11421016 	blt	r2,r5,84ba8 <___vfprintf_internal_r+0x18f0>
   84368:	01800274 	movhi	r6,9
   8436c:	31905604 	addi	r6,r6,16728
   84370:	d9814115 	stw	r6,1284(sp)
   84374:	d9014c17 	ldw	r4,1328(sp)
   84378:	00c000c4 	movi	r3,3
   8437c:	00bfdfc4 	movi	r2,-129
   84380:	2088703a 	and	r4,r4,r2
   84384:	180f883a 	mov	r7,r3
   84388:	d8c14515 	stw	r3,1300(sp)
   8438c:	d9014c15 	stw	r4,1328(sp)
   84390:	d8014615 	stw	zero,1304(sp)
   84394:	003e6a06 	br	83d40 <___vfprintf_internal_r+0xa88>
   84398:	38800017 	ldw	r2,0(r7)
   8439c:	00c00044 	movi	r3,1
   843a0:	39c00104 	addi	r7,r7,4
   843a4:	d9c14015 	stw	r7,1280(sp)
   843a8:	d9000f04 	addi	r4,sp,60
   843ac:	180f883a 	mov	r7,r3
   843b0:	d8c14515 	stw	r3,1300(sp)
   843b4:	d9014115 	stw	r4,1284(sp)
   843b8:	d8800f05 	stb	r2,60(sp)
   843bc:	d8000405 	stb	zero,16(sp)
   843c0:	003cac06 	br	83674 <___vfprintf_internal_r+0x3bc>
   843c4:	01400274 	movhi	r5,9
   843c8:	29505c04 	addi	r5,r5,16752
   843cc:	d9414415 	stw	r5,1296(sp)
   843d0:	d9814c17 	ldw	r6,1328(sp)
   843d4:	3080080c 	andi	r2,r6,32
   843d8:	1000ff26 	beq	r2,zero,847d8 <___vfprintf_internal_r+0x1520>
   843dc:	3c000017 	ldw	r16,0(r7)
   843e0:	3c400117 	ldw	r17,4(r7)
   843e4:	38800204 	addi	r2,r7,8
   843e8:	d8814015 	stw	r2,1280(sp)
   843ec:	d9414c17 	ldw	r5,1328(sp)
   843f0:	2880004c 	andi	r2,r5,1
   843f4:	1005003a 	cmpeq	r2,r2,zero
   843f8:	1000b91e 	bne	r2,zero,846e0 <___vfprintf_internal_r+0x1428>
   843fc:	8444b03a 	or	r2,r16,r17
   84400:	1000b726 	beq	r2,zero,846e0 <___vfprintf_internal_r+0x1428>
   84404:	d9814d17 	ldw	r6,1332(sp)
   84408:	29400094 	ori	r5,r5,2
   8440c:	00800c04 	movi	r2,48
   84410:	01000084 	movi	r4,2
   84414:	d9414c15 	stw	r5,1328(sp)
   84418:	d8800445 	stb	r2,17(sp)
   8441c:	d9800485 	stb	r6,18(sp)
   84420:	d8000405 	stb	zero,16(sp)
   84424:	003e3206 	br	83cf0 <___vfprintf_internal_r+0xa38>
   84428:	01800274 	movhi	r6,9
   8442c:	31905104 	addi	r6,r6,16708
   84430:	d9814415 	stw	r6,1296(sp)
   84434:	003fe606 	br	843d0 <___vfprintf_internal_r+0x1118>
   84438:	00800ac4 	movi	r2,43
   8443c:	d8800405 	stb	r2,16(sp)
   84440:	b8c00007 	ldb	r3,0(r23)
   84444:	003c1b06 	br	834b4 <___vfprintf_internal_r+0x1fc>
   84448:	d8814c17 	ldw	r2,1328(sp)
   8444c:	b8c00007 	ldb	r3,0(r23)
   84450:	10800054 	ori	r2,r2,1
   84454:	d8814c15 	stw	r2,1328(sp)
   84458:	003c1606 	br	834b4 <___vfprintf_internal_r+0x1fc>
   8445c:	d8800407 	ldb	r2,16(sp)
   84460:	10004c1e 	bne	r2,zero,84594 <___vfprintf_internal_r+0x12dc>
   84464:	00800804 	movi	r2,32
   84468:	d8800405 	stb	r2,16(sp)
   8446c:	b8c00007 	ldb	r3,0(r23)
   84470:	003c1006 	br	834b4 <___vfprintf_internal_r+0x1fc>
   84474:	d9814c17 	ldw	r6,1328(sp)
   84478:	b8c00007 	ldb	r3,0(r23)
   8447c:	31800214 	ori	r6,r6,8
   84480:	d9814c15 	stw	r6,1328(sp)
   84484:	003c0b06 	br	834b4 <___vfprintf_internal_r+0x1fc>
   84488:	0009883a 	mov	r4,zero
   8448c:	04000244 	movi	r16,9
   84490:	01400284 	movi	r5,10
   84494:	d9c15115 	stw	r7,1348(sp)
   84498:	0080ba00 	call	80ba0 <__mulsi3>
   8449c:	b9000007 	ldb	r4,0(r23)
   844a0:	d8c14d17 	ldw	r3,1332(sp)
   844a4:	bdc00044 	addi	r23,r23,1
   844a8:	d9014d15 	stw	r4,1332(sp)
   844ac:	d9414d17 	ldw	r5,1332(sp)
   844b0:	1885883a 	add	r2,r3,r2
   844b4:	113ff404 	addi	r4,r2,-48
   844b8:	28bff404 	addi	r2,r5,-48
   844bc:	d9c15117 	ldw	r7,1348(sp)
   844c0:	80bff32e 	bgeu	r16,r2,84490 <___vfprintf_internal_r+0x11d8>
   844c4:	d9014a15 	stw	r4,1320(sp)
   844c8:	003bfc06 	br	834bc <___vfprintf_internal_r+0x204>
   844cc:	d8814c17 	ldw	r2,1328(sp)
   844d0:	b8c00007 	ldb	r3,0(r23)
   844d4:	10802014 	ori	r2,r2,128
   844d8:	d8814c15 	stw	r2,1328(sp)
   844dc:	003bf506 	br	834b4 <___vfprintf_internal_r+0x1fc>
   844e0:	b8c00007 	ldb	r3,0(r23)
   844e4:	00800a84 	movi	r2,42
   844e8:	bdc00044 	addi	r23,r23,1
   844ec:	18831826 	beq	r3,r2,85150 <___vfprintf_internal_r+0x1e98>
   844f0:	d8c14d15 	stw	r3,1332(sp)
   844f4:	18bff404 	addi	r2,r3,-48
   844f8:	00c00244 	movi	r3,9
   844fc:	18827b36 	bltu	r3,r2,84eec <___vfprintf_internal_r+0x1c34>
   84500:	1821883a 	mov	r16,r3
   84504:	0009883a 	mov	r4,zero
   84508:	01400284 	movi	r5,10
   8450c:	d9c15115 	stw	r7,1348(sp)
   84510:	0080ba00 	call	80ba0 <__mulsi3>
   84514:	d9414d17 	ldw	r5,1332(sp)
   84518:	b9800007 	ldb	r6,0(r23)
   8451c:	d9c15117 	ldw	r7,1348(sp)
   84520:	1145883a 	add	r2,r2,r5
   84524:	113ff404 	addi	r4,r2,-48
   84528:	30bff404 	addi	r2,r6,-48
   8452c:	d9814d15 	stw	r6,1332(sp)
   84530:	bdc00044 	addi	r23,r23,1
   84534:	80bff42e 	bgeu	r16,r2,84508 <___vfprintf_internal_r+0x1250>
   84538:	2027883a 	mov	r19,r4
   8453c:	203bdf0e 	bge	r4,zero,834bc <___vfprintf_internal_r+0x204>
   84540:	04ffffc4 	movi	r19,-1
   84544:	003bdd06 	br	834bc <___vfprintf_internal_r+0x204>
   84548:	d8000405 	stb	zero,16(sp)
   8454c:	39800017 	ldw	r6,0(r7)
   84550:	39c00104 	addi	r7,r7,4
   84554:	d9c14015 	stw	r7,1280(sp)
   84558:	d9814115 	stw	r6,1284(sp)
   8455c:	3001c926 	beq	r6,zero,84c84 <___vfprintf_internal_r+0x19cc>
   84560:	98000e16 	blt	r19,zero,8459c <___vfprintf_internal_r+0x12e4>
   84564:	d9014117 	ldw	r4,1284(sp)
   84568:	000b883a 	mov	r5,zero
   8456c:	980d883a 	mov	r6,r19
   84570:	00820a80 	call	820a8 <memchr>
   84574:	10025926 	beq	r2,zero,84edc <___vfprintf_internal_r+0x1c24>
   84578:	d8c14117 	ldw	r3,1284(sp)
   8457c:	10cfc83a 	sub	r7,r2,r3
   84580:	99c19e16 	blt	r19,r7,84bfc <___vfprintf_internal_r+0x1944>
   84584:	d9c14515 	stw	r7,1300(sp)
   84588:	38000916 	blt	r7,zero,845b0 <___vfprintf_internal_r+0x12f8>
   8458c:	d8014615 	stw	zero,1304(sp)
   84590:	003deb06 	br	83d40 <___vfprintf_internal_r+0xa88>
   84594:	b8c00007 	ldb	r3,0(r23)
   84598:	003bc606 	br	834b4 <___vfprintf_internal_r+0x1fc>
   8459c:	d9014117 	ldw	r4,1284(sp)
   845a0:	0082f780 	call	82f78 <strlen>
   845a4:	d8814515 	stw	r2,1300(sp)
   845a8:	100f883a 	mov	r7,r2
   845ac:	103ff70e 	bge	r2,zero,8458c <___vfprintf_internal_r+0x12d4>
   845b0:	d8014515 	stw	zero,1300(sp)
   845b4:	d8014615 	stw	zero,1304(sp)
   845b8:	003de106 	br	83d40 <___vfprintf_internal_r+0xa88>
   845bc:	20c03fcc 	andi	r3,r4,255
   845c0:	00800044 	movi	r2,1
   845c4:	18802d26 	beq	r3,r2,8467c <___vfprintf_internal_r+0x13c4>
   845c8:	18800e36 	bltu	r3,r2,84604 <___vfprintf_internal_r+0x134c>
   845cc:	00800084 	movi	r2,2
   845d0:	1880fa26 	beq	r3,r2,849bc <___vfprintf_internal_r+0x1704>
   845d4:	01000274 	movhi	r4,9
   845d8:	21106104 	addi	r4,r4,16772
   845dc:	0082f780 	call	82f78 <strlen>
   845e0:	100f883a 	mov	r7,r2
   845e4:	dcc14515 	stw	r19,1300(sp)
   845e8:	9880010e 	bge	r19,r2,845f0 <___vfprintf_internal_r+0x1338>
   845ec:	d8814515 	stw	r2,1300(sp)
   845f0:	00800274 	movhi	r2,9
   845f4:	10906104 	addi	r2,r2,16772
   845f8:	dcc14615 	stw	r19,1304(sp)
   845fc:	d8814115 	stw	r2,1284(sp)
   84600:	003dcf06 	br	83d40 <___vfprintf_internal_r+0xa88>
   84604:	d9401904 	addi	r5,sp,100
   84608:	dd000f04 	addi	r20,sp,60
   8460c:	d9414115 	stw	r5,1284(sp)
   84610:	880a977a 	slli	r5,r17,29
   84614:	d9814117 	ldw	r6,1284(sp)
   84618:	8004d0fa 	srli	r2,r16,3
   8461c:	8806d0fa 	srli	r3,r17,3
   84620:	810001cc 	andi	r4,r16,7
   84624:	2884b03a 	or	r2,r5,r2
   84628:	31bfffc4 	addi	r6,r6,-1
   8462c:	21000c04 	addi	r4,r4,48
   84630:	d9814115 	stw	r6,1284(sp)
   84634:	10cab03a 	or	r5,r2,r3
   84638:	31000005 	stb	r4,0(r6)
   8463c:	1021883a 	mov	r16,r2
   84640:	1823883a 	mov	r17,r3
   84644:	283ff21e 	bne	r5,zero,84610 <___vfprintf_internal_r+0x1358>
   84648:	d8c14c17 	ldw	r3,1328(sp)
   8464c:	1880004c 	andi	r2,r3,1
   84650:	1005003a 	cmpeq	r2,r2,zero
   84654:	103db31e 	bne	r2,zero,83d24 <___vfprintf_internal_r+0xa6c>
   84658:	20803fcc 	andi	r2,r4,255
   8465c:	1080201c 	xori	r2,r2,128
   84660:	10bfe004 	addi	r2,r2,-128
   84664:	00c00c04 	movi	r3,48
   84668:	10fdae26 	beq	r2,r3,83d24 <___vfprintf_internal_r+0xa6c>
   8466c:	31bfffc4 	addi	r6,r6,-1
   84670:	d9814115 	stw	r6,1284(sp)
   84674:	30c00005 	stb	r3,0(r6)
   84678:	003daa06 	br	83d24 <___vfprintf_internal_r+0xa6c>
   8467c:	88800068 	cmpgeui	r2,r17,1
   84680:	10002c1e 	bne	r2,zero,84734 <___vfprintf_internal_r+0x147c>
   84684:	8800021e 	bne	r17,zero,84690 <___vfprintf_internal_r+0x13d8>
   84688:	00800244 	movi	r2,9
   8468c:	14002936 	bltu	r2,r16,84734 <___vfprintf_internal_r+0x147c>
   84690:	d90018c4 	addi	r4,sp,99
   84694:	dd000f04 	addi	r20,sp,60
   84698:	d9014115 	stw	r4,1284(sp)
   8469c:	d9014117 	ldw	r4,1284(sp)
   846a0:	80800c04 	addi	r2,r16,48
   846a4:	20800005 	stb	r2,0(r4)
   846a8:	003d9e06 	br	83d24 <___vfprintf_internal_r+0xa6c>
   846ac:	dc400d17 	ldw	r17,52(sp)
   846b0:	07000274 	movhi	fp,9
   846b4:	e7106884 	addi	fp,fp,16802
   846b8:	9425883a 	add	r18,r18,r16
   846bc:	8c400044 	addi	r17,r17,1
   846c0:	008001c4 	movi	r2,7
   846c4:	1f000015 	stw	fp,0(r3)
   846c8:	1c000115 	stw	r16,4(r3)
   846cc:	dc800e15 	stw	r18,56(sp)
   846d0:	dc400d15 	stw	r17,52(sp)
   846d4:	147ddc16 	blt	r2,r17,83e48 <___vfprintf_internal_r+0xb90>
   846d8:	18c00204 	addi	r3,r3,8
   846dc:	003c7406 	br	838b0 <___vfprintf_internal_r+0x5f8>
   846e0:	01000084 	movi	r4,2
   846e4:	d8000405 	stb	zero,16(sp)
   846e8:	003d8106 	br	83cf0 <___vfprintf_internal_r+0xa38>
   846ec:	d9814c17 	ldw	r6,1328(sp)
   846f0:	30c4703a 	and	r2,r6,r3
   846f4:	1005003a 	cmpeq	r2,r2,zero
   846f8:	103cb326 	beq	r2,zero,839c8 <___vfprintf_internal_r+0x710>
   846fc:	d9014117 	ldw	r4,1284(sp)
   84700:	94800044 	addi	r18,r18,1
   84704:	8c400044 	addi	r17,r17,1
   84708:	008001c4 	movi	r2,7
   8470c:	a9000015 	stw	r4,0(r21)
   84710:	a8c00115 	stw	r3,4(r21)
   84714:	dc800e15 	stw	r18,56(sp)
   84718:	dc400d15 	stw	r17,52(sp)
   8471c:	147e6016 	blt	r2,r17,840a0 <___vfprintf_internal_r+0xde8>
   84720:	acc00204 	addi	r19,r21,8
   84724:	003cd106 	br	83a6c <___vfprintf_internal_r+0x7b4>
   84728:	07000274 	movhi	fp,9
   8472c:	e7106884 	addi	fp,fp,16802
   84730:	003c4906 	br	83858 <___vfprintf_internal_r+0x5a0>
   84734:	dd000f04 	addi	r20,sp,60
   84738:	dc801904 	addi	r18,sp,100
   8473c:	8009883a 	mov	r4,r16
   84740:	880b883a 	mov	r5,r17
   84744:	01800284 	movi	r6,10
   84748:	000f883a 	mov	r7,zero
   8474c:	008dfd40 	call	8dfd4 <__umoddi3>
   84750:	12000c04 	addi	r8,r2,48
   84754:	94bfffc4 	addi	r18,r18,-1
   84758:	8009883a 	mov	r4,r16
   8475c:	880b883a 	mov	r5,r17
   84760:	01800284 	movi	r6,10
   84764:	000f883a 	mov	r7,zero
   84768:	92000005 	stb	r8,0(r18)
   8476c:	008d9680 	call	8d968 <__udivdi3>
   84770:	1009883a 	mov	r4,r2
   84774:	1021883a 	mov	r16,r2
   84778:	18800068 	cmpgeui	r2,r3,1
   8477c:	1823883a 	mov	r17,r3
   84780:	103fee1e 	bne	r2,zero,8473c <___vfprintf_internal_r+0x1484>
   84784:	1800021e 	bne	r3,zero,84790 <___vfprintf_internal_r+0x14d8>
   84788:	00800244 	movi	r2,9
   8478c:	113feb36 	bltu	r2,r4,8473c <___vfprintf_internal_r+0x1484>
   84790:	94bfffc4 	addi	r18,r18,-1
   84794:	dc814115 	stw	r18,1284(sp)
   84798:	003fc006 	br	8469c <___vfprintf_internal_r+0x13e4>
   8479c:	d9014c17 	ldw	r4,1328(sp)
   847a0:	2080004c 	andi	r2,r4,1
   847a4:	10009a1e 	bne	r2,zero,84a10 <___vfprintf_internal_r+0x1758>
   847a8:	d9401904 	addi	r5,sp,100
   847ac:	dd000f04 	addi	r20,sp,60
   847b0:	d9414115 	stw	r5,1284(sp)
   847b4:	003d5b06 	br	83d24 <___vfprintf_internal_r+0xa6c>
   847b8:	d9014f17 	ldw	r4,1340(sp)
   847bc:	b00b883a 	mov	r5,r22
   847c0:	d9800c04 	addi	r6,sp,48
   847c4:	00832600 	call	83260 <__sprint_r>
   847c8:	103c731e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   847cc:	dc800e17 	ldw	r18,56(sp)
   847d0:	d8c01904 	addi	r3,sp,100
   847d4:	003cf906 	br	83bbc <___vfprintf_internal_r+0x904>
   847d8:	d8c14c17 	ldw	r3,1328(sp)
   847dc:	1880040c 	andi	r2,r3,16
   847e0:	1000711e 	bne	r2,zero,849a8 <___vfprintf_internal_r+0x16f0>
   847e4:	d9014c17 	ldw	r4,1328(sp)
   847e8:	2080100c 	andi	r2,r4,64
   847ec:	10006e26 	beq	r2,zero,849a8 <___vfprintf_internal_r+0x16f0>
   847f0:	3c00000b 	ldhu	r16,0(r7)
   847f4:	0023883a 	mov	r17,zero
   847f8:	39c00104 	addi	r7,r7,4
   847fc:	d9c14015 	stw	r7,1280(sp)
   84800:	003efa06 	br	843ec <___vfprintf_internal_r+0x1134>
   84804:	dc400d17 	ldw	r17,52(sp)
   84808:	07000274 	movhi	fp,9
   8480c:	e7106884 	addi	fp,fp,16802
   84810:	9425883a 	add	r18,r18,r16
   84814:	8c400044 	addi	r17,r17,1
   84818:	008001c4 	movi	r2,7
   8481c:	1f000015 	stw	fp,0(r3)
   84820:	1c000115 	stw	r16,4(r3)
   84824:	dc800e15 	stw	r18,56(sp)
   84828:	dc400d15 	stw	r17,52(sp)
   8482c:	147d7016 	blt	r2,r17,83df0 <___vfprintf_internal_r+0xb38>
   84830:	18c00204 	addi	r3,r3,8
   84834:	003d7506 	br	83e0c <___vfprintf_internal_r+0xb54>
   84838:	dc800e17 	ldw	r18,56(sp)
   8483c:	dc400d17 	ldw	r17,52(sp)
   84840:	07000274 	movhi	fp,9
   84844:	e7106c84 	addi	fp,fp,16818
   84848:	003bba06 	br	83734 <___vfprintf_internal_r+0x47c>
   8484c:	d9014f17 	ldw	r4,1340(sp)
   84850:	b00b883a 	mov	r5,r22
   84854:	d9800c04 	addi	r6,sp,48
   84858:	00832600 	call	83260 <__sprint_r>
   8485c:	103c4e1e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   84860:	dc800e17 	ldw	r18,56(sp)
   84864:	d8c01904 	addi	r3,sp,100
   84868:	003ce306 	br	83bf8 <___vfprintf_internal_r+0x940>
   8486c:	3c000017 	ldw	r16,0(r7)
   84870:	0009883a 	mov	r4,zero
   84874:	39c00104 	addi	r7,r7,4
   84878:	0023883a 	mov	r17,zero
   8487c:	d9c14015 	stw	r7,1280(sp)
   84880:	d8000405 	stb	zero,16(sp)
   84884:	003d1a06 	br	83cf0 <___vfprintf_internal_r+0xa38>
   84888:	38800017 	ldw	r2,0(r7)
   8488c:	39c00104 	addi	r7,r7,4
   84890:	d9c14015 	stw	r7,1280(sp)
   84894:	1023d7fa 	srai	r17,r2,31
   84898:	1021883a 	mov	r16,r2
   8489c:	003d1206 	br	83ce8 <___vfprintf_internal_r+0xa30>
   848a0:	3c000017 	ldw	r16,0(r7)
   848a4:	01000044 	movi	r4,1
   848a8:	39c00104 	addi	r7,r7,4
   848ac:	0023883a 	mov	r17,zero
   848b0:	d9c14015 	stw	r7,1280(sp)
   848b4:	d8000405 	stb	zero,16(sp)
   848b8:	003d0d06 	br	83cf0 <___vfprintf_internal_r+0xa38>
   848bc:	00800274 	movhi	r2,9
   848c0:	10906804 	addi	r2,r2,16800
   848c4:	94800044 	addi	r18,r18,1
   848c8:	8c400044 	addi	r17,r17,1
   848cc:	a8800015 	stw	r2,0(r21)
   848d0:	00c00044 	movi	r3,1
   848d4:	008001c4 	movi	r2,7
   848d8:	a8c00115 	stw	r3,4(r21)
   848dc:	dc800e15 	stw	r18,56(sp)
   848e0:	dc400d15 	stw	r17,52(sp)
   848e4:	1440ca16 	blt	r2,r17,84c10 <___vfprintf_internal_r+0x1958>
   848e8:	a8c00204 	addi	r3,r21,8
   848ec:	2000061e 	bne	r4,zero,84908 <___vfprintf_internal_r+0x1650>
   848f0:	d9414717 	ldw	r5,1308(sp)
   848f4:	2800041e 	bne	r5,zero,84908 <___vfprintf_internal_r+0x1650>
   848f8:	d9814c17 	ldw	r6,1328(sp)
   848fc:	3080004c 	andi	r2,r6,1
   84900:	1005003a 	cmpeq	r2,r2,zero
   84904:	103bea1e 	bne	r2,zero,838b0 <___vfprintf_internal_r+0x5f8>
   84908:	00800044 	movi	r2,1
   8490c:	dc400d17 	ldw	r17,52(sp)
   84910:	18800115 	stw	r2,4(r3)
   84914:	d8814917 	ldw	r2,1316(sp)
   84918:	94800044 	addi	r18,r18,1
   8491c:	8c400044 	addi	r17,r17,1
   84920:	18800015 	stw	r2,0(r3)
   84924:	008001c4 	movi	r2,7
   84928:	dc800e15 	stw	r18,56(sp)
   8492c:	dc400d15 	stw	r17,52(sp)
   84930:	1440ca16 	blt	r2,r17,84c5c <___vfprintf_internal_r+0x19a4>
   84934:	18c00204 	addi	r3,r3,8
   84938:	0121c83a 	sub	r16,zero,r4
   8493c:	0400500e 	bge	zero,r16,84a80 <___vfprintf_internal_r+0x17c8>
   84940:	00800404 	movi	r2,16
   84944:	1400800e 	bge	r2,r16,84b48 <___vfprintf_internal_r+0x1890>
   84948:	1027883a 	mov	r19,r2
   8494c:	07000274 	movhi	fp,9
   84950:	e7106884 	addi	fp,fp,16802
   84954:	050001c4 	movi	r20,7
   84958:	00000306 	br	84968 <___vfprintf_internal_r+0x16b0>
   8495c:	18c00204 	addi	r3,r3,8
   84960:	843ffc04 	addi	r16,r16,-16
   84964:	9c007a0e 	bge	r19,r16,84b50 <___vfprintf_internal_r+0x1898>
   84968:	94800404 	addi	r18,r18,16
   8496c:	8c400044 	addi	r17,r17,1
   84970:	1f000015 	stw	fp,0(r3)
   84974:	1cc00115 	stw	r19,4(r3)
   84978:	dc800e15 	stw	r18,56(sp)
   8497c:	dc400d15 	stw	r17,52(sp)
   84980:	a47ff60e 	bge	r20,r17,8495c <___vfprintf_internal_r+0x16a4>
   84984:	d9014f17 	ldw	r4,1340(sp)
   84988:	b00b883a 	mov	r5,r22
   8498c:	d9800c04 	addi	r6,sp,48
   84990:	00832600 	call	83260 <__sprint_r>
   84994:	103c001e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   84998:	dc800e17 	ldw	r18,56(sp)
   8499c:	dc400d17 	ldw	r17,52(sp)
   849a0:	d8c01904 	addi	r3,sp,100
   849a4:	003fee06 	br	84960 <___vfprintf_internal_r+0x16a8>
   849a8:	3c000017 	ldw	r16,0(r7)
   849ac:	0023883a 	mov	r17,zero
   849b0:	39c00104 	addi	r7,r7,4
   849b4:	d9c14015 	stw	r7,1280(sp)
   849b8:	003e8c06 	br	843ec <___vfprintf_internal_r+0x1134>
   849bc:	d9401904 	addi	r5,sp,100
   849c0:	dd000f04 	addi	r20,sp,60
   849c4:	d9414115 	stw	r5,1284(sp)
   849c8:	d9814417 	ldw	r6,1296(sp)
   849cc:	880a973a 	slli	r5,r17,28
   849d0:	8004d13a 	srli	r2,r16,4
   849d4:	810003cc 	andi	r4,r16,15
   849d8:	3109883a 	add	r4,r6,r4
   849dc:	2884b03a 	or	r2,r5,r2
   849e0:	21400003 	ldbu	r5,0(r4)
   849e4:	d9014117 	ldw	r4,1284(sp)
   849e8:	8806d13a 	srli	r3,r17,4
   849ec:	1021883a 	mov	r16,r2
   849f0:	213fffc4 	addi	r4,r4,-1
   849f4:	d9014115 	stw	r4,1284(sp)
   849f8:	d9814117 	ldw	r6,1284(sp)
   849fc:	10c8b03a 	or	r4,r2,r3
   84a00:	1823883a 	mov	r17,r3
   84a04:	31400005 	stb	r5,0(r6)
   84a08:	203fef1e 	bne	r4,zero,849c8 <___vfprintf_internal_r+0x1710>
   84a0c:	003cc506 	br	83d24 <___vfprintf_internal_r+0xa6c>
   84a10:	00800c04 	movi	r2,48
   84a14:	d98018c4 	addi	r6,sp,99
   84a18:	dd000f04 	addi	r20,sp,60
   84a1c:	d88018c5 	stb	r2,99(sp)
   84a20:	d9814115 	stw	r6,1284(sp)
   84a24:	003cbf06 	br	83d24 <___vfprintf_internal_r+0xa6c>
   84a28:	dc400d17 	ldw	r17,52(sp)
   84a2c:	07000274 	movhi	fp,9
   84a30:	e7106c84 	addi	fp,fp,16818
   84a34:	003bc106 	br	8393c <___vfprintf_internal_r+0x684>
   84a38:	d9414c17 	ldw	r5,1328(sp)
   84a3c:	2880040c 	andi	r2,r5,16
   84a40:	10007c26 	beq	r2,zero,84c34 <___vfprintf_internal_r+0x197c>
   84a44:	38800017 	ldw	r2,0(r7)
   84a48:	39c00104 	addi	r7,r7,4
   84a4c:	d9c14015 	stw	r7,1280(sp)
   84a50:	d9814b17 	ldw	r6,1324(sp)
   84a54:	d9c14017 	ldw	r7,1280(sp)
   84a58:	11800015 	stw	r6,0(r2)
   84a5c:	003a7206 	br	83428 <___vfprintf_internal_r+0x170>
   84a60:	d9014f17 	ldw	r4,1340(sp)
   84a64:	b00b883a 	mov	r5,r22
   84a68:	d9800c04 	addi	r6,sp,48
   84a6c:	00832600 	call	83260 <__sprint_r>
   84a70:	103bc91e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   84a74:	dc800e17 	ldw	r18,56(sp)
   84a78:	dc400d17 	ldw	r17,52(sp)
   84a7c:	d8c01904 	addi	r3,sp,100
   84a80:	d9014717 	ldw	r4,1308(sp)
   84a84:	d9414117 	ldw	r5,1284(sp)
   84a88:	8c400044 	addi	r17,r17,1
   84a8c:	9125883a 	add	r18,r18,r4
   84a90:	008001c4 	movi	r2,7
   84a94:	19400015 	stw	r5,0(r3)
   84a98:	19000115 	stw	r4,4(r3)
   84a9c:	dc800e15 	stw	r18,56(sp)
   84aa0:	dc400d15 	stw	r17,52(sp)
   84aa4:	147ce816 	blt	r2,r17,83e48 <___vfprintf_internal_r+0xb90>
   84aa8:	18c00204 	addi	r3,r3,8
   84aac:	003b8006 	br	838b0 <___vfprintf_internal_r+0x5f8>
   84ab0:	38c00017 	ldw	r3,0(r7)
   84ab4:	39000204 	addi	r4,r7,8
   84ab8:	d9014015 	stw	r4,1280(sp)
   84abc:	d8c14215 	stw	r3,1288(sp)
   84ac0:	39c00117 	ldw	r7,4(r7)
   84ac4:	d9c14315 	stw	r7,1292(sp)
   84ac8:	003e1a06 	br	84334 <___vfprintf_internal_r+0x107c>
   84acc:	0005883a 	mov	r2,zero
   84ad0:	1409c83a 	sub	r4,r2,r16
   84ad4:	1105803a 	cmpltu	r2,r2,r4
   84ad8:	044bc83a 	sub	r5,zero,r17
   84adc:	2885c83a 	sub	r2,r5,r2
   84ae0:	2021883a 	mov	r16,r4
   84ae4:	1023883a 	mov	r17,r2
   84ae8:	01000044 	movi	r4,1
   84aec:	00800b44 	movi	r2,45
   84af0:	d8800405 	stb	r2,16(sp)
   84af4:	003c7e06 	br	83cf0 <___vfprintf_internal_r+0xa38>
   84af8:	d9014f17 	ldw	r4,1340(sp)
   84afc:	b00b883a 	mov	r5,r22
   84b00:	d9800c04 	addi	r6,sp,48
   84b04:	00832600 	call	83260 <__sprint_r>
   84b08:	103ba31e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   84b0c:	dc800e17 	ldw	r18,56(sp)
   84b10:	dc400d17 	ldw	r17,52(sp)
   84b14:	d9000517 	ldw	r4,20(sp)
   84b18:	d9401904 	addi	r5,sp,100
   84b1c:	003da106 	br	841a4 <___vfprintf_internal_r+0xeec>
   84b20:	d9014f17 	ldw	r4,1340(sp)
   84b24:	b00b883a 	mov	r5,r22
   84b28:	d9800c04 	addi	r6,sp,48
   84b2c:	00832600 	call	83260 <__sprint_r>
   84b30:	103b991e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   84b34:	dc800e17 	ldw	r18,56(sp)
   84b38:	dc400d17 	ldw	r17,52(sp)
   84b3c:	d9000517 	ldw	r4,20(sp)
   84b40:	d8c01904 	addi	r3,sp,100
   84b44:	003d8b06 	br	84174 <___vfprintf_internal_r+0xebc>
   84b48:	07000274 	movhi	fp,9
   84b4c:	e7106884 	addi	fp,fp,16802
   84b50:	9425883a 	add	r18,r18,r16
   84b54:	8c400044 	addi	r17,r17,1
   84b58:	008001c4 	movi	r2,7
   84b5c:	1f000015 	stw	fp,0(r3)
   84b60:	1c000115 	stw	r16,4(r3)
   84b64:	dc800e15 	stw	r18,56(sp)
   84b68:	dc400d15 	stw	r17,52(sp)
   84b6c:	147fbc16 	blt	r2,r17,84a60 <___vfprintf_internal_r+0x17a8>
   84b70:	18c00204 	addi	r3,r3,8
   84b74:	003fc206 	br	84a80 <___vfprintf_internal_r+0x17c8>
   84b78:	d9014f17 	ldw	r4,1340(sp)
   84b7c:	b00b883a 	mov	r5,r22
   84b80:	d9800c04 	addi	r6,sp,48
   84b84:	00832600 	call	83260 <__sprint_r>
   84b88:	103b831e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   84b8c:	dc800e17 	ldw	r18,56(sp)
   84b90:	d9000517 	ldw	r4,20(sp)
   84b94:	d8c01904 	addi	r3,sp,100
   84b98:	003cfc06 	br	83f8c <___vfprintf_internal_r+0xcd4>
   84b9c:	07000274 	movhi	fp,9
   84ba0:	e7106884 	addi	fp,fp,16802
   84ba4:	003bde06 	br	83b20 <___vfprintf_internal_r+0x868>
   84ba8:	00800274 	movhi	r2,9
   84bac:	10905704 	addi	r2,r2,16732
   84bb0:	d8814115 	stw	r2,1284(sp)
   84bb4:	003def06 	br	84374 <___vfprintf_internal_r+0x10bc>
   84bb8:	d9014217 	ldw	r4,1288(sp)
   84bbc:	d9414317 	ldw	r5,1292(sp)
   84bc0:	008a5c80 	call	8a5c8 <__isnand>
   84bc4:	10003926 	beq	r2,zero,84cac <___vfprintf_internal_r+0x19f4>
   84bc8:	d9414d17 	ldw	r5,1332(sp)
   84bcc:	008011c4 	movi	r2,71
   84bd0:	1140ce16 	blt	r2,r5,84f0c <___vfprintf_internal_r+0x1c54>
   84bd4:	01800274 	movhi	r6,9
   84bd8:	31905804 	addi	r6,r6,16736
   84bdc:	d9814115 	stw	r6,1284(sp)
   84be0:	003de406 	br	84374 <___vfprintf_internal_r+0x10bc>
   84be4:	d9014c17 	ldw	r4,1328(sp)
   84be8:	bdc00044 	addi	r23,r23,1
   84bec:	b8c00007 	ldb	r3,0(r23)
   84bf0:	21000814 	ori	r4,r4,32
   84bf4:	d9014c15 	stw	r4,1328(sp)
   84bf8:	003a2e06 	br	834b4 <___vfprintf_internal_r+0x1fc>
   84bfc:	dcc14515 	stw	r19,1300(sp)
   84c00:	98011016 	blt	r19,zero,85044 <___vfprintf_internal_r+0x1d8c>
   84c04:	980f883a 	mov	r7,r19
   84c08:	d8014615 	stw	zero,1304(sp)
   84c0c:	003c4c06 	br	83d40 <___vfprintf_internal_r+0xa88>
   84c10:	d9014f17 	ldw	r4,1340(sp)
   84c14:	b00b883a 	mov	r5,r22
   84c18:	d9800c04 	addi	r6,sp,48
   84c1c:	00832600 	call	83260 <__sprint_r>
   84c20:	103b5d1e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   84c24:	dc800e17 	ldw	r18,56(sp)
   84c28:	d9000517 	ldw	r4,20(sp)
   84c2c:	d8c01904 	addi	r3,sp,100
   84c30:	003f2e06 	br	848ec <___vfprintf_internal_r+0x1634>
   84c34:	d8c14c17 	ldw	r3,1328(sp)
   84c38:	1880100c 	andi	r2,r3,64
   84c3c:	1000a026 	beq	r2,zero,84ec0 <___vfprintf_internal_r+0x1c08>
   84c40:	38800017 	ldw	r2,0(r7)
   84c44:	39c00104 	addi	r7,r7,4
   84c48:	d9c14015 	stw	r7,1280(sp)
   84c4c:	d9014b17 	ldw	r4,1324(sp)
   84c50:	d9c14017 	ldw	r7,1280(sp)
   84c54:	1100000d 	sth	r4,0(r2)
   84c58:	0039f306 	br	83428 <___vfprintf_internal_r+0x170>
   84c5c:	d9014f17 	ldw	r4,1340(sp)
   84c60:	b00b883a 	mov	r5,r22
   84c64:	d9800c04 	addi	r6,sp,48
   84c68:	00832600 	call	83260 <__sprint_r>
   84c6c:	103b4a1e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   84c70:	dc800e17 	ldw	r18,56(sp)
   84c74:	dc400d17 	ldw	r17,52(sp)
   84c78:	d9000517 	ldw	r4,20(sp)
   84c7c:	d8c01904 	addi	r3,sp,100
   84c80:	003f2d06 	br	84938 <___vfprintf_internal_r+0x1680>
   84c84:	00800184 	movi	r2,6
   84c88:	14c09a36 	bltu	r2,r19,84ef4 <___vfprintf_internal_r+0x1c3c>
   84c8c:	dcc14515 	stw	r19,1300(sp)
   84c90:	9800010e 	bge	r19,zero,84c98 <___vfprintf_internal_r+0x19e0>
   84c94:	d8014515 	stw	zero,1300(sp)
   84c98:	00800274 	movhi	r2,9
   84c9c:	10905a04 	addi	r2,r2,16744
   84ca0:	980f883a 	mov	r7,r19
   84ca4:	d8814115 	stw	r2,1284(sp)
   84ca8:	003a7206 	br	83674 <___vfprintf_internal_r+0x3bc>
   84cac:	00bfffc4 	movi	r2,-1
   84cb0:	9880e226 	beq	r19,r2,8503c <___vfprintf_internal_r+0x1d84>
   84cb4:	d9414d17 	ldw	r5,1332(sp)
   84cb8:	008019c4 	movi	r2,103
   84cbc:	2880dc26 	beq	r5,r2,85030 <___vfprintf_internal_r+0x1d78>
   84cc0:	008011c4 	movi	r2,71
   84cc4:	2880da26 	beq	r5,r2,85030 <___vfprintf_internal_r+0x1d78>
   84cc8:	d9414c17 	ldw	r5,1328(sp)
   84ccc:	d9014317 	ldw	r4,1292(sp)
   84cd0:	d9814217 	ldw	r6,1288(sp)
   84cd4:	29404014 	ori	r5,r5,256
   84cd8:	d9414c15 	stw	r5,1328(sp)
   84cdc:	2000cc16 	blt	r4,zero,85010 <___vfprintf_internal_r+0x1d58>
   84ce0:	3021883a 	mov	r16,r6
   84ce4:	2023883a 	mov	r17,r4
   84ce8:	0039883a 	mov	fp,zero
   84cec:	d9414d17 	ldw	r5,1332(sp)
   84cf0:	00801984 	movi	r2,102
   84cf4:	2880b726 	beq	r5,r2,84fd4 <___vfprintf_internal_r+0x1d1c>
   84cf8:	00801184 	movi	r2,70
   84cfc:	2880b526 	beq	r5,r2,84fd4 <___vfprintf_internal_r+0x1d1c>
   84d00:	00801944 	movi	r2,101
   84d04:	2880c826 	beq	r5,r2,85028 <___vfprintf_internal_r+0x1d70>
   84d08:	00801144 	movi	r2,69
   84d0c:	2880c626 	beq	r5,r2,85028 <___vfprintf_internal_r+0x1d70>
   84d10:	9829883a 	mov	r20,r19
   84d14:	d9014f17 	ldw	r4,1340(sp)
   84d18:	d8800504 	addi	r2,sp,20
   84d1c:	880d883a 	mov	r6,r17
   84d20:	d8800115 	stw	r2,4(sp)
   84d24:	d8c00604 	addi	r3,sp,24
   84d28:	d8800704 	addi	r2,sp,28
   84d2c:	800b883a 	mov	r5,r16
   84d30:	01c00084 	movi	r7,2
   84d34:	d8c00215 	stw	r3,8(sp)
   84d38:	d8800315 	stw	r2,12(sp)
   84d3c:	dd000015 	stw	r20,0(sp)
   84d40:	0086d900 	call	86d90 <_dtoa_r>
   84d44:	d9814d17 	ldw	r6,1332(sp)
   84d48:	d8814115 	stw	r2,1284(sp)
   84d4c:	008019c4 	movi	r2,103
   84d50:	30809526 	beq	r6,r2,84fa8 <___vfprintf_internal_r+0x1cf0>
   84d54:	d8c14d17 	ldw	r3,1332(sp)
   84d58:	008011c4 	movi	r2,71
   84d5c:	18809226 	beq	r3,r2,84fa8 <___vfprintf_internal_r+0x1cf0>
   84d60:	d9414117 	ldw	r5,1284(sp)
   84d64:	d9814d17 	ldw	r6,1332(sp)
   84d68:	00801984 	movi	r2,102
   84d6c:	2d25883a 	add	r18,r5,r20
   84d70:	30808626 	beq	r6,r2,84f8c <___vfprintf_internal_r+0x1cd4>
   84d74:	00801184 	movi	r2,70
   84d78:	30808426 	beq	r6,r2,84f8c <___vfprintf_internal_r+0x1cd4>
   84d7c:	000d883a 	mov	r6,zero
   84d80:	000f883a 	mov	r7,zero
   84d84:	880b883a 	mov	r5,r17
   84d88:	8009883a 	mov	r4,r16
   84d8c:	008f2bc0 	call	8f2bc <__eqdf2>
   84d90:	1000751e 	bne	r2,zero,84f68 <___vfprintf_internal_r+0x1cb0>
   84d94:	9005883a 	mov	r2,r18
   84d98:	dc800715 	stw	r18,28(sp)
   84d9c:	d9014117 	ldw	r4,1284(sp)
   84da0:	d9414d17 	ldw	r5,1332(sp)
   84da4:	00c019c4 	movi	r3,103
   84da8:	1125c83a 	sub	r18,r2,r4
   84dac:	28c06826 	beq	r5,r3,84f50 <___vfprintf_internal_r+0x1c98>
   84db0:	008011c4 	movi	r2,71
   84db4:	28806626 	beq	r5,r2,84f50 <___vfprintf_internal_r+0x1c98>
   84db8:	d9000517 	ldw	r4,20(sp)
   84dbc:	d8c14d17 	ldw	r3,1332(sp)
   84dc0:	00801944 	movi	r2,101
   84dc4:	10c05516 	blt	r2,r3,84f1c <___vfprintf_internal_r+0x1c64>
   84dc8:	213fffc4 	addi	r4,r4,-1
   84dcc:	d9000515 	stw	r4,20(sp)
   84dd0:	d8c00805 	stb	r3,32(sp)
   84dd4:	2021883a 	mov	r16,r4
   84dd8:	2000c116 	blt	r4,zero,850e0 <___vfprintf_internal_r+0x1e28>
   84ddc:	00800ac4 	movi	r2,43
   84de0:	d8800845 	stb	r2,33(sp)
   84de4:	00800244 	movi	r2,9
   84de8:	1400af0e 	bge	r2,r16,850a8 <___vfprintf_internal_r+0x1df0>
   84dec:	1027883a 	mov	r19,r2
   84df0:	dc400b84 	addi	r17,sp,46
   84df4:	8009883a 	mov	r4,r16
   84df8:	01400284 	movi	r5,10
   84dfc:	0080b300 	call	80b30 <__modsi3>
   84e00:	10800c04 	addi	r2,r2,48
   84e04:	8c7fffc4 	addi	r17,r17,-1
   84e08:	8009883a 	mov	r4,r16
   84e0c:	01400284 	movi	r5,10
   84e10:	88800005 	stb	r2,0(r17)
   84e14:	0080ad00 	call	80ad0 <__divsi3>
   84e18:	1021883a 	mov	r16,r2
   84e1c:	98bff516 	blt	r19,r2,84df4 <___vfprintf_internal_r+0x1b3c>
   84e20:	10c00c04 	addi	r3,r2,48
   84e24:	d88009c4 	addi	r2,sp,39
   84e28:	108001c4 	addi	r2,r2,7
   84e2c:	897fffc4 	addi	r5,r17,-1
   84e30:	88ffffc5 	stb	r3,-1(r17)
   84e34:	2880a72e 	bgeu	r5,r2,850d4 <___vfprintf_internal_r+0x1e1c>
   84e38:	1009883a 	mov	r4,r2
   84e3c:	d9800804 	addi	r6,sp,32
   84e40:	d8c00884 	addi	r3,sp,34
   84e44:	28800003 	ldbu	r2,0(r5)
   84e48:	29400044 	addi	r5,r5,1
   84e4c:	18800005 	stb	r2,0(r3)
   84e50:	18c00044 	addi	r3,r3,1
   84e54:	293ffb36 	bltu	r5,r4,84e44 <___vfprintf_internal_r+0x1b8c>
   84e58:	1987c83a 	sub	r3,r3,r6
   84e5c:	00800044 	movi	r2,1
   84e60:	d8c14815 	stw	r3,1312(sp)
   84e64:	90cf883a 	add	r7,r18,r3
   84e68:	1480960e 	bge	r2,r18,850c4 <___vfprintf_internal_r+0x1e0c>
   84e6c:	39c00044 	addi	r7,r7,1
   84e70:	d9c14515 	stw	r7,1300(sp)
   84e74:	38003416 	blt	r7,zero,84f48 <___vfprintf_internal_r+0x1c90>
   84e78:	e0803fcc 	andi	r2,fp,255
   84e7c:	1080201c 	xori	r2,r2,128
   84e80:	10bfe004 	addi	r2,r2,-128
   84e84:	10004e26 	beq	r2,zero,84fc0 <___vfprintf_internal_r+0x1d08>
   84e88:	00800b44 	movi	r2,45
   84e8c:	dc814715 	stw	r18,1308(sp)
   84e90:	d8014615 	stw	zero,1304(sp)
   84e94:	d8800405 	stb	r2,16(sp)
   84e98:	003bab06 	br	83d48 <___vfprintf_internal_r+0xa90>
   84e9c:	00800b44 	movi	r2,45
   84ea0:	d8800405 	stb	r2,16(sp)
   84ea4:	003d2d06 	br	8435c <___vfprintf_internal_r+0x10a4>
   84ea8:	d9014f17 	ldw	r4,1340(sp)
   84eac:	b00b883a 	mov	r5,r22
   84eb0:	d9800c04 	addi	r6,sp,48
   84eb4:	00832600 	call	83260 <__sprint_r>
   84eb8:	103ab71e 	bne	r2,zero,83998 <___vfprintf_internal_r+0x6e0>
   84ebc:	003ab506 	br	83994 <___vfprintf_internal_r+0x6dc>
   84ec0:	38800017 	ldw	r2,0(r7)
   84ec4:	39c00104 	addi	r7,r7,4
   84ec8:	d9c14015 	stw	r7,1280(sp)
   84ecc:	d9414b17 	ldw	r5,1324(sp)
   84ed0:	d9c14017 	ldw	r7,1280(sp)
   84ed4:	11400015 	stw	r5,0(r2)
   84ed8:	00395306 	br	83428 <___vfprintf_internal_r+0x170>
   84edc:	980f883a 	mov	r7,r19
   84ee0:	dcc14515 	stw	r19,1300(sp)
   84ee4:	d8014615 	stw	zero,1304(sp)
   84ee8:	003b9506 	br	83d40 <___vfprintf_internal_r+0xa88>
   84eec:	0027883a 	mov	r19,zero
   84ef0:	00397206 	br	834bc <___vfprintf_internal_r+0x204>
   84ef4:	00c00274 	movhi	r3,9
   84ef8:	18d05a04 	addi	r3,r3,16744
   84efc:	100f883a 	mov	r7,r2
   84f00:	d8814515 	stw	r2,1300(sp)
   84f04:	d8c14115 	stw	r3,1284(sp)
   84f08:	0039da06 	br	83674 <___vfprintf_internal_r+0x3bc>
   84f0c:	00800274 	movhi	r2,9
   84f10:	10905904 	addi	r2,r2,16740
   84f14:	d8814115 	stw	r2,1284(sp)
   84f18:	003d1606 	br	84374 <___vfprintf_internal_r+0x10bc>
   84f1c:	d9414d17 	ldw	r5,1332(sp)
   84f20:	00801984 	movi	r2,102
   84f24:	28804926 	beq	r5,r2,8504c <___vfprintf_internal_r+0x1d94>
   84f28:	200f883a 	mov	r7,r4
   84f2c:	24805716 	blt	r4,r18,8508c <___vfprintf_internal_r+0x1dd4>
   84f30:	d9414c17 	ldw	r5,1328(sp)
   84f34:	2880004c 	andi	r2,r5,1
   84f38:	10000126 	beq	r2,zero,84f40 <___vfprintf_internal_r+0x1c88>
   84f3c:	21c00044 	addi	r7,r4,1
   84f40:	d9c14515 	stw	r7,1300(sp)
   84f44:	383fcc0e 	bge	r7,zero,84e78 <___vfprintf_internal_r+0x1bc0>
   84f48:	d8014515 	stw	zero,1300(sp)
   84f4c:	003fca06 	br	84e78 <___vfprintf_internal_r+0x1bc0>
   84f50:	d9000517 	ldw	r4,20(sp)
   84f54:	00bfff04 	movi	r2,-4
   84f58:	1100480e 	bge	r2,r4,8507c <___vfprintf_internal_r+0x1dc4>
   84f5c:	99004716 	blt	r19,r4,8507c <___vfprintf_internal_r+0x1dc4>
   84f60:	d8c14d15 	stw	r3,1332(sp)
   84f64:	003ff006 	br	84f28 <___vfprintf_internal_r+0x1c70>
   84f68:	d8800717 	ldw	r2,28(sp)
   84f6c:	14bf8b2e 	bgeu	r2,r18,84d9c <___vfprintf_internal_r+0x1ae4>
   84f70:	9007883a 	mov	r3,r18
   84f74:	01000c04 	movi	r4,48
   84f78:	11000005 	stb	r4,0(r2)
   84f7c:	10800044 	addi	r2,r2,1
   84f80:	d8800715 	stw	r2,28(sp)
   84f84:	18bffc1e 	bne	r3,r2,84f78 <___vfprintf_internal_r+0x1cc0>
   84f88:	003f8406 	br	84d9c <___vfprintf_internal_r+0x1ae4>
   84f8c:	d8814117 	ldw	r2,1284(sp)
   84f90:	10c00007 	ldb	r3,0(r2)
   84f94:	00800c04 	movi	r2,48
   84f98:	18805b26 	beq	r3,r2,85108 <___vfprintf_internal_r+0x1e50>
   84f9c:	d9000517 	ldw	r4,20(sp)
   84fa0:	9125883a 	add	r18,r18,r4
   84fa4:	003f7506 	br	84d7c <___vfprintf_internal_r+0x1ac4>
   84fa8:	d9014c17 	ldw	r4,1328(sp)
   84fac:	2080004c 	andi	r2,r4,1
   84fb0:	1005003a 	cmpeq	r2,r2,zero
   84fb4:	103f6a26 	beq	r2,zero,84d60 <___vfprintf_internal_r+0x1aa8>
   84fb8:	d8800717 	ldw	r2,28(sp)
   84fbc:	003f7706 	br	84d9c <___vfprintf_internal_r+0x1ae4>
   84fc0:	d9c14515 	stw	r7,1300(sp)
   84fc4:	38004d16 	blt	r7,zero,850fc <___vfprintf_internal_r+0x1e44>
   84fc8:	dc814715 	stw	r18,1308(sp)
   84fcc:	d8014615 	stw	zero,1304(sp)
   84fd0:	003b5b06 	br	83d40 <___vfprintf_internal_r+0xa88>
   84fd4:	d9014f17 	ldw	r4,1340(sp)
   84fd8:	d8800504 	addi	r2,sp,20
   84fdc:	d8800115 	stw	r2,4(sp)
   84fe0:	d8c00604 	addi	r3,sp,24
   84fe4:	d8800704 	addi	r2,sp,28
   84fe8:	800b883a 	mov	r5,r16
   84fec:	880d883a 	mov	r6,r17
   84ff0:	01c000c4 	movi	r7,3
   84ff4:	d8c00215 	stw	r3,8(sp)
   84ff8:	d8800315 	stw	r2,12(sp)
   84ffc:	dcc00015 	stw	r19,0(sp)
   85000:	9829883a 	mov	r20,r19
   85004:	0086d900 	call	86d90 <_dtoa_r>
   85008:	d8814115 	stw	r2,1284(sp)
   8500c:	003f5106 	br	84d54 <___vfprintf_internal_r+0x1a9c>
   85010:	d8c14217 	ldw	r3,1288(sp)
   85014:	d9014317 	ldw	r4,1292(sp)
   85018:	07000b44 	movi	fp,45
   8501c:	1821883a 	mov	r16,r3
   85020:	2460003c 	xorhi	r17,r4,32768
   85024:	003f3106 	br	84cec <___vfprintf_internal_r+0x1a34>
   85028:	9d000044 	addi	r20,r19,1
   8502c:	003f3906 	br	84d14 <___vfprintf_internal_r+0x1a5c>
   85030:	983f251e 	bne	r19,zero,84cc8 <___vfprintf_internal_r+0x1a10>
   85034:	04c00044 	movi	r19,1
   85038:	003f2306 	br	84cc8 <___vfprintf_internal_r+0x1a10>
   8503c:	04c00184 	movi	r19,6
   85040:	003f2106 	br	84cc8 <___vfprintf_internal_r+0x1a10>
   85044:	d8014515 	stw	zero,1300(sp)
   85048:	003eee06 	br	84c04 <___vfprintf_internal_r+0x194c>
   8504c:	200f883a 	mov	r7,r4
   85050:	0100370e 	bge	zero,r4,85130 <___vfprintf_internal_r+0x1e78>
   85054:	9800031e 	bne	r19,zero,85064 <___vfprintf_internal_r+0x1dac>
   85058:	d9814c17 	ldw	r6,1328(sp)
   8505c:	3080004c 	andi	r2,r6,1
   85060:	103fb726 	beq	r2,zero,84f40 <___vfprintf_internal_r+0x1c88>
   85064:	20800044 	addi	r2,r4,1
   85068:	98a7883a 	add	r19,r19,r2
   8506c:	dcc14515 	stw	r19,1300(sp)
   85070:	980f883a 	mov	r7,r19
   85074:	983f800e 	bge	r19,zero,84e78 <___vfprintf_internal_r+0x1bc0>
   85078:	003fb306 	br	84f48 <___vfprintf_internal_r+0x1c90>
   8507c:	d9814d17 	ldw	r6,1332(sp)
   85080:	31bfff84 	addi	r6,r6,-2
   85084:	d9814d15 	stw	r6,1332(sp)
   85088:	003f4c06 	br	84dbc <___vfprintf_internal_r+0x1b04>
   8508c:	0100180e 	bge	zero,r4,850f0 <___vfprintf_internal_r+0x1e38>
   85090:	00800044 	movi	r2,1
   85094:	1485883a 	add	r2,r2,r18
   85098:	d8814515 	stw	r2,1300(sp)
   8509c:	100f883a 	mov	r7,r2
   850a0:	103f750e 	bge	r2,zero,84e78 <___vfprintf_internal_r+0x1bc0>
   850a4:	003fa806 	br	84f48 <___vfprintf_internal_r+0x1c90>
   850a8:	80c00c04 	addi	r3,r16,48
   850ac:	00800c04 	movi	r2,48
   850b0:	d8c008c5 	stb	r3,35(sp)
   850b4:	d9800804 	addi	r6,sp,32
   850b8:	d8c00904 	addi	r3,sp,36
   850bc:	d8800885 	stb	r2,34(sp)
   850c0:	003f6506 	br	84e58 <___vfprintf_internal_r+0x1ba0>
   850c4:	d9014c17 	ldw	r4,1328(sp)
   850c8:	2084703a 	and	r2,r4,r2
   850cc:	103f9c26 	beq	r2,zero,84f40 <___vfprintf_internal_r+0x1c88>
   850d0:	003f6606 	br	84e6c <___vfprintf_internal_r+0x1bb4>
   850d4:	d9800804 	addi	r6,sp,32
   850d8:	d8c00884 	addi	r3,sp,34
   850dc:	003f5e06 	br	84e58 <___vfprintf_internal_r+0x1ba0>
   850e0:	00800b44 	movi	r2,45
   850e4:	0121c83a 	sub	r16,zero,r4
   850e8:	d8800845 	stb	r2,33(sp)
   850ec:	003f3d06 	br	84de4 <___vfprintf_internal_r+0x1b2c>
   850f0:	00800084 	movi	r2,2
   850f4:	1105c83a 	sub	r2,r2,r4
   850f8:	003fe606 	br	85094 <___vfprintf_internal_r+0x1ddc>
   850fc:	d8014515 	stw	zero,1300(sp)
   85100:	dc814715 	stw	r18,1308(sp)
   85104:	003fb106 	br	84fcc <___vfprintf_internal_r+0x1d14>
   85108:	000d883a 	mov	r6,zero
   8510c:	000f883a 	mov	r7,zero
   85110:	8009883a 	mov	r4,r16
   85114:	880b883a 	mov	r5,r17
   85118:	008f3440 	call	8f344 <__nedf2>
   8511c:	103f9f26 	beq	r2,zero,84f9c <___vfprintf_internal_r+0x1ce4>
   85120:	00800044 	movi	r2,1
   85124:	1509c83a 	sub	r4,r2,r20
   85128:	d9000515 	stw	r4,20(sp)
   8512c:	003f9b06 	br	84f9c <___vfprintf_internal_r+0x1ce4>
   85130:	98000d1e 	bne	r19,zero,85168 <___vfprintf_internal_r+0x1eb0>
   85134:	d8c14c17 	ldw	r3,1328(sp)
   85138:	1880004c 	andi	r2,r3,1
   8513c:	10000a1e 	bne	r2,zero,85168 <___vfprintf_internal_r+0x1eb0>
   85140:	01000044 	movi	r4,1
   85144:	200f883a 	mov	r7,r4
   85148:	d9014515 	stw	r4,1300(sp)
   8514c:	003f4a06 	br	84e78 <___vfprintf_internal_r+0x1bc0>
   85150:	3cc00017 	ldw	r19,0(r7)
   85154:	39c00104 	addi	r7,r7,4
   85158:	983d0e0e 	bge	r19,zero,84594 <___vfprintf_internal_r+0x12dc>
   8515c:	b8c00007 	ldb	r3,0(r23)
   85160:	04ffffc4 	movi	r19,-1
   85164:	0038d306 	br	834b4 <___vfprintf_internal_r+0x1fc>
   85168:	9cc00084 	addi	r19,r19,2
   8516c:	dcc14515 	stw	r19,1300(sp)
   85170:	980f883a 	mov	r7,r19
   85174:	983f400e 	bge	r19,zero,84e78 <___vfprintf_internal_r+0x1bc0>
   85178:	003f7306 	br	84f48 <___vfprintf_internal_r+0x1c90>

0008517c <__vfprintf_internal>:
   8517c:	00800274 	movhi	r2,9
   85180:	1098bc04 	addi	r2,r2,25328
   85184:	2013883a 	mov	r9,r4
   85188:	11000017 	ldw	r4,0(r2)
   8518c:	2805883a 	mov	r2,r5
   85190:	300f883a 	mov	r7,r6
   85194:	480b883a 	mov	r5,r9
   85198:	100d883a 	mov	r6,r2
   8519c:	00832b81 	jmpi	832b8 <___vfprintf_internal_r>

000851a0 <__svfscanf_r>:
   851a0:	deff4e04 	addi	sp,sp,-712
   851a4:	dd80ae15 	stw	r22,696(sp)
   851a8:	dd00ac15 	stw	r20,688(sp)
   851ac:	dc40a915 	stw	r17,676(sp)
   851b0:	dc00a815 	stw	r16,672(sp)
   851b4:	dfc0b115 	stw	ra,708(sp)
   851b8:	df00b015 	stw	fp,704(sp)
   851bc:	ddc0af15 	stw	r23,700(sp)
   851c0:	dd40ad15 	stw	r21,692(sp)
   851c4:	dcc0ab15 	stw	r19,684(sp)
   851c8:	dc80aa15 	stw	r18,680(sp)
   851cc:	202d883a 	mov	r22,r4
   851d0:	2821883a 	mov	r16,r5
   851d4:	d9c0a415 	stw	r7,656(sp)
   851d8:	3029883a 	mov	r20,r6
   851dc:	d800a215 	stw	zero,648(sp)
   851e0:	0023883a 	mov	r17,zero
   851e4:	d800a115 	stw	zero,644(sp)
   851e8:	d800a015 	stw	zero,640(sp)
   851ec:	a1000007 	ldb	r4,0(r20)
   851f0:	d9000115 	stw	r4,4(sp)
   851f4:	20001f26 	beq	r4,zero,85274 <__svfscanf_r+0xd4>
   851f8:	04c00274 	movhi	r19,9
   851fc:	9cd8c004 	addi	r19,r19,25344
   85200:	9c800017 	ldw	r18,0(r19)
   85204:	a5000044 	addi	r20,r20,1
   85208:	9107883a 	add	r3,r18,r4
   8520c:	18800003 	ldbu	r2,0(r3)
   85210:	1080020c 	andi	r2,r2,8
   85214:	10002426 	beq	r2,zero,852a8 <__svfscanf_r+0x108>
   85218:	80c00117 	ldw	r3,4(r16)
   8521c:	00c00e0e 	bge	zero,r3,85258 <__svfscanf_r+0xb8>
   85220:	81400017 	ldw	r5,0(r16)
   85224:	98800017 	ldw	r2,0(r19)
   85228:	28c00003 	ldbu	r3,0(r5)
   8522c:	1887883a 	add	r3,r3,r2
   85230:	19000003 	ldbu	r4,0(r3)
   85234:	2100020c 	andi	r4,r4,8
   85238:	203fec26 	beq	r4,zero,851ec <__svfscanf_r+0x4c>
   8523c:	80c00117 	ldw	r3,4(r16)
   85240:	29800044 	addi	r6,r5,1
   85244:	8c400044 	addi	r17,r17,1
   85248:	18ffffc4 	addi	r3,r3,-1
   8524c:	81800015 	stw	r6,0(r16)
   85250:	80c00115 	stw	r3,4(r16)
   85254:	00fff216 	blt	zero,r3,85220 <__svfscanf_r+0x80>
   85258:	b009883a 	mov	r4,r22
   8525c:	800b883a 	mov	r5,r16
   85260:	0082aa40 	call	82aa4 <__srefill_r>
   85264:	103fee26 	beq	r2,zero,85220 <__svfscanf_r+0x80>
   85268:	a1000007 	ldb	r4,0(r20)
   8526c:	d9000115 	stw	r4,4(sp)
   85270:	203fe11e 	bne	r4,zero,851f8 <__svfscanf_r+0x58>
   85274:	d880a217 	ldw	r2,648(sp)
   85278:	dfc0b117 	ldw	ra,708(sp)
   8527c:	df00b017 	ldw	fp,704(sp)
   85280:	ddc0af17 	ldw	r23,700(sp)
   85284:	dd80ae17 	ldw	r22,696(sp)
   85288:	dd40ad17 	ldw	r21,692(sp)
   8528c:	dd00ac17 	ldw	r20,688(sp)
   85290:	dcc0ab17 	ldw	r19,684(sp)
   85294:	dc80aa17 	ldw	r18,680(sp)
   85298:	dc40a917 	ldw	r17,676(sp)
   8529c:	dc00a817 	ldw	r16,672(sp)
   852a0:	dec0b204 	addi	sp,sp,712
   852a4:	f800283a 	ret
   852a8:	00800944 	movi	r2,37
   852ac:	20801626 	beq	r4,r2,85308 <__svfscanf_r+0x168>
   852b0:	80800117 	ldw	r2,4(r16)
   852b4:	00800b0e 	bge	zero,r2,852e4 <__svfscanf_r+0x144>
   852b8:	81000017 	ldw	r4,0(r16)
   852bc:	a0ffffc7 	ldb	r3,-1(r20)
   852c0:	20800003 	ldbu	r2,0(r4)
   852c4:	10ffeb1e 	bne	r2,r3,85274 <__svfscanf_r+0xd4>
   852c8:	80c00117 	ldw	r3,4(r16)
   852cc:	21800044 	addi	r6,r4,1
   852d0:	8c400044 	addi	r17,r17,1
   852d4:	18ffffc4 	addi	r3,r3,-1
   852d8:	80c00115 	stw	r3,4(r16)
   852dc:	81800015 	stw	r6,0(r16)
   852e0:	003fc206 	br	851ec <__svfscanf_r+0x4c>
   852e4:	b009883a 	mov	r4,r22
   852e8:	800b883a 	mov	r5,r16
   852ec:	0082aa40 	call	82aa4 <__srefill_r>
   852f0:	103ff126 	beq	r2,zero,852b8 <__svfscanf_r+0x118>
   852f4:	d900a217 	ldw	r4,648(sp)
   852f8:	2004981e 	bne	r4,zero,8655c <__svfscanf_r+0x13bc>
   852fc:	00bfffc4 	movi	r2,-1
   85300:	d880a215 	stw	r2,648(sp)
   85304:	003fdb06 	br	85274 <__svfscanf_r+0xd4>
   85308:	d800a315 	stw	zero,652(sp)
   8530c:	002b883a 	mov	r21,zero
   85310:	a0c00003 	ldbu	r3,0(r20)
   85314:	00801e04 	movi	r2,120
   85318:	a5000044 	addi	r20,r20,1
   8531c:	1dc03fcc 	andi	r23,r3,255
   85320:	bdc0201c 	xori	r23,r23,128
   85324:	bdffe004 	addi	r23,r23,-128
   85328:	10c08036 	bltu	r2,r3,8552c <__svfscanf_r+0x38c>
   8532c:	18c5883a 	add	r2,r3,r3
   85330:	1085883a 	add	r2,r2,r2
   85334:	00c00234 	movhi	r3,8
   85338:	18d4d204 	addi	r3,r3,21320
   8533c:	10c5883a 	add	r2,r2,r3
   85340:	11000017 	ldw	r4,0(r2)
   85344:	2000683a 	jmp	r4
   85348:	000852fc 	xorhi	zero,zero,8523
   8534c:	0008552c 	andhi	zero,zero,8532
   85350:	0008552c 	andhi	zero,zero,8532
   85354:	0008552c 	andhi	zero,zero,8532
   85358:	0008552c 	andhi	zero,zero,8532
   8535c:	0008552c 	andhi	zero,zero,8532
   85360:	0008552c 	andhi	zero,zero,8532
   85364:	0008552c 	andhi	zero,zero,8532
   85368:	0008552c 	andhi	zero,zero,8532
   8536c:	0008552c 	andhi	zero,zero,8532
   85370:	0008552c 	andhi	zero,zero,8532
   85374:	0008552c 	andhi	zero,zero,8532
   85378:	0008552c 	andhi	zero,zero,8532
   8537c:	0008552c 	andhi	zero,zero,8532
   85380:	0008552c 	andhi	zero,zero,8532
   85384:	0008552c 	andhi	zero,zero,8532
   85388:	0008552c 	andhi	zero,zero,8532
   8538c:	0008552c 	andhi	zero,zero,8532
   85390:	0008552c 	andhi	zero,zero,8532
   85394:	0008552c 	andhi	zero,zero,8532
   85398:	0008552c 	andhi	zero,zero,8532
   8539c:	0008552c 	andhi	zero,zero,8532
   853a0:	0008552c 	andhi	zero,zero,8532
   853a4:	0008552c 	andhi	zero,zero,8532
   853a8:	0008552c 	andhi	zero,zero,8532
   853ac:	0008552c 	andhi	zero,zero,8532
   853b0:	0008552c 	andhi	zero,zero,8532
   853b4:	0008552c 	andhi	zero,zero,8532
   853b8:	0008552c 	andhi	zero,zero,8532
   853bc:	0008552c 	andhi	zero,zero,8532
   853c0:	0008552c 	andhi	zero,zero,8532
   853c4:	0008552c 	andhi	zero,zero,8532
   853c8:	0008552c 	andhi	zero,zero,8532
   853cc:	0008552c 	andhi	zero,zero,8532
   853d0:	0008552c 	andhi	zero,zero,8532
   853d4:	0008552c 	andhi	zero,zero,8532
   853d8:	0008552c 	andhi	zero,zero,8532
   853dc:	000852b0 	cmpltui	zero,zero,8522
   853e0:	0008552c 	andhi	zero,zero,8532
   853e4:	0008552c 	andhi	zero,zero,8532
   853e8:	0008552c 	andhi	zero,zero,8532
   853ec:	0008552c 	andhi	zero,zero,8532
   853f0:	000863cc 	andi	zero,zero,8591
   853f4:	0008552c 	andhi	zero,zero,8532
   853f8:	0008552c 	andhi	zero,zero,8532
   853fc:	0008552c 	andhi	zero,zero,8532
   85400:	0008552c 	andhi	zero,zero,8532
   85404:	0008552c 	andhi	zero,zero,8532
   85408:	000863b0 	cmpltui	zero,zero,8590
   8540c:	000863b0 	cmpltui	zero,zero,8590
   85410:	000863b0 	cmpltui	zero,zero,8590
   85414:	000863b0 	cmpltui	zero,zero,8590
   85418:	000863b0 	cmpltui	zero,zero,8590
   8541c:	000863b0 	cmpltui	zero,zero,8590
   85420:	000863b0 	cmpltui	zero,zero,8590
   85424:	000863b0 	cmpltui	zero,zero,8590
   85428:	000863b0 	cmpltui	zero,zero,8590
   8542c:	000863b0 	cmpltui	zero,zero,8590
   85430:	0008552c 	andhi	zero,zero,8532
   85434:	0008552c 	andhi	zero,zero,8532
   85438:	0008552c 	andhi	zero,zero,8532
   8543c:	0008552c 	andhi	zero,zero,8532
   85440:	0008552c 	andhi	zero,zero,8532
   85444:	0008552c 	andhi	zero,zero,8532
   85448:	0008552c 	andhi	zero,zero,8532
   8544c:	0008552c 	andhi	zero,zero,8532
   85450:	0008552c 	andhi	zero,zero,8532
   85454:	0008552c 	andhi	zero,zero,8532
   85458:	00085540 	call	8554 <__alt_mem_sram_0-0x77aac>
   8545c:	000864b4 	movhi	zero,8594
   85460:	0008552c 	andhi	zero,zero,8532
   85464:	000864b4 	movhi	zero,8594
   85468:	0008552c 	andhi	zero,zero,8532
   8546c:	0008552c 	andhi	zero,zero,8532
   85470:	0008552c 	andhi	zero,zero,8532
   85474:	0008552c 	andhi	zero,zero,8532
   85478:	000863a8 	cmpgeui	zero,zero,8590
   8547c:	0008552c 	andhi	zero,zero,8532
   85480:	0008552c 	andhi	zero,zero,8532
   85484:	00086388 	cmpgei	zero,zero,8590
   85488:	0008552c 	andhi	zero,zero,8532
   8548c:	0008552c 	andhi	zero,zero,8532
   85490:	0008552c 	andhi	zero,zero,8532
   85494:	0008552c 	andhi	zero,zero,8532
   85498:	0008552c 	andhi	zero,zero,8532
   8549c:	0008552c 	andhi	zero,zero,8532
   854a0:	0008552c 	andhi	zero,zero,8532
   854a4:	0008552c 	andhi	zero,zero,8532
   854a8:	000863d4 	movui	zero,8591
   854ac:	0008552c 	andhi	zero,zero,8532
   854b0:	0008552c 	andhi	zero,zero,8532
   854b4:	0008636c 	andhi	zero,zero,8589
   854b8:	0008552c 	andhi	zero,zero,8532
   854bc:	0008552c 	andhi	zero,zero,8532
   854c0:	0008552c 	andhi	zero,zero,8532
   854c4:	0008552c 	andhi	zero,zero,8532
   854c8:	0008552c 	andhi	zero,zero,8532
   854cc:	0008552c 	andhi	zero,zero,8532
   854d0:	0008552c 	andhi	zero,zero,8532
   854d4:	000864bc 	xorhi	zero,zero,8594
   854d8:	00085544 	movi	zero,8533
   854dc:	000864b4 	movhi	zero,8594
   854e0:	000864b4 	movhi	zero,8594
   854e4:	000864b4 	movhi	zero,8594
   854e8:	000864c8 	cmpgei	zero,zero,8595
   854ec:	00086410 	cmplti	zero,zero,8592
   854f0:	0008552c 	andhi	zero,zero,8532
   854f4:	0008552c 	andhi	zero,zero,8532
   854f8:	00085ad8 	cmpnei	zero,zero,8555
   854fc:	0008552c 	andhi	zero,zero,8532
   85500:	000865c4 	movi	zero,8599
   85504:	00086580 	call	8658 <__alt_mem_sram_0-0x779a8>
   85508:	000865a4 	muli	zero,zero,8598
   8550c:	0008552c 	andhi	zero,zero,8532
   85510:	0008552c 	andhi	zero,zero,8532
   85514:	0008659c 	xori	zero,zero,8598
   85518:	0008552c 	andhi	zero,zero,8532
   8551c:	000863f4 	movhi	zero,8591
   85520:	0008552c 	andhi	zero,zero,8532
   85524:	0008552c 	andhi	zero,zero,8532
   85528:	000863d4 	movui	zero,8591
   8552c:	bc87883a 	add	r3,r23,r18
   85530:	18800003 	ldbu	r2,0(r3)
   85534:	1080004c 	andi	r2,r2,1
   85538:	1005003a 	cmpeq	r2,r2,zero
   8553c:	1000011e 	bne	r2,zero,85544 <__svfscanf_r+0x3a4>
   85540:	ad400054 	ori	r21,r21,1
   85544:	01000234 	movhi	r4,8
   85548:	210bfb04 	addi	r4,r4,12268
   8554c:	00800284 	movi	r2,10
   85550:	d900a015 	stw	r4,640(sp)
   85554:	048000c4 	movi	r18,3
   85558:	d880a115 	stw	r2,644(sp)
   8555c:	80c00117 	ldw	r3,4(r16)
   85560:	00c13f0e 	bge	zero,r3,85a60 <__svfscanf_r+0x8c0>
   85564:	a880100c 	andi	r2,r21,64
   85568:	10001326 	beq	r2,zero,855b8 <__svfscanf_r+0x418>
   8556c:	00800104 	movi	r2,4
   85570:	14bf1e36 	bltu	r2,r18,851ec <__svfscanf_r+0x4c>
   85574:	9485883a 	add	r2,r18,r18
   85578:	1085883a 	add	r2,r2,r2
   8557c:	00c00234 	movhi	r3,8
   85580:	18d56404 	addi	r3,r3,21904
   85584:	10c5883a 	add	r2,r2,r3
   85588:	11000017 	ldw	r4,0(r2)
   8558c:	2000683a 	jmp	r4
   85590:	000855f4 	movhi	zero,8535
   85594:	000856f4 	movhi	zero,8539
   85598:	00085904 	movi	zero,8548
   8559c:	00085768 	cmpgeui	zero,zero,8541
   855a0:	00085a3c 	xorhi	zero,zero,8552
   855a4:	b009883a 	mov	r4,r22
   855a8:	800b883a 	mov	r5,r16
   855ac:	0082aa40 	call	82aa4 <__srefill_r>
   855b0:	103f501e 	bne	r2,zero,852f4 <__svfscanf_r+0x154>
   855b4:	8c400044 	addi	r17,r17,1
   855b8:	81400017 	ldw	r5,0(r16)
   855bc:	98800017 	ldw	r2,0(r19)
   855c0:	28c00003 	ldbu	r3,0(r5)
   855c4:	1887883a 	add	r3,r3,r2
   855c8:	19000003 	ldbu	r4,0(r3)
   855cc:	2100020c 	andi	r4,r4,8
   855d0:	203fe626 	beq	r4,zero,8556c <__svfscanf_r+0x3cc>
   855d4:	80c00117 	ldw	r3,4(r16)
   855d8:	18ffffc4 	addi	r3,r3,-1
   855dc:	80c00115 	stw	r3,4(r16)
   855e0:	00fff00e 	bge	zero,r3,855a4 <__svfscanf_r+0x404>
   855e4:	29800044 	addi	r6,r5,1
   855e8:	8c400044 	addi	r17,r17,1
   855ec:	81800015 	stw	r6,0(r16)
   855f0:	003ff106 	br	855b8 <__svfscanf_r+0x418>
   855f4:	d8c0a317 	ldw	r3,652(sp)
   855f8:	1800021e 	bne	r3,zero,85604 <__svfscanf_r+0x464>
   855fc:	01000044 	movi	r4,1
   85600:	d900a315 	stw	r4,652(sp)
   85604:	a880004c 	andi	r2,r21,1
   85608:	1005003a 	cmpeq	r2,r2,zero
   8560c:	1002811e 	bne	r2,zero,86014 <__svfscanf_r+0xe74>
   85610:	ad40040c 	andi	r21,r21,16
   85614:	a805003a 	cmpeq	r2,r21,zero
   85618:	d880a615 	stw	r2,664(sp)
   8561c:	1003d31e 	bne	r2,zero,8656c <__svfscanf_r+0x13cc>
   85620:	0027883a 	mov	r19,zero
   85624:	d900a317 	ldw	r4,652(sp)
   85628:	2003c726 	beq	r4,zero,86548 <__svfscanf_r+0x13a8>
   8562c:	07000274 	movhi	fp,9
   85630:	e718c104 	addi	fp,fp,25348
   85634:	e0800017 	ldw	r2,0(fp)
   85638:	103f2e26 	beq	r2,zero,852f4 <__svfscanf_r+0x154>
   8563c:	d8804404 	addi	r2,sp,272
   85640:	0025883a 	mov	r18,zero
   85644:	d880a515 	stw	r2,660(sp)
   85648:	05ffffc4 	movi	r23,-1
   8564c:	80800017 	ldw	r2,0(r16)
   85650:	80c00117 	ldw	r3,4(r16)
   85654:	d900a517 	ldw	r4,660(sp)
   85658:	12000003 	ldbu	r8,0(r2)
   8565c:	18ffffc4 	addi	r3,r3,-1
   85660:	11800044 	addi	r6,r2,1
   85664:	248f883a 	add	r7,r4,r18
   85668:	80c00115 	stw	r3,4(r16)
   8566c:	81800015 	stw	r6,0(r16)
   85670:	3a000005 	stb	r8,0(r7)
   85674:	d9000204 	addi	r4,sp,8
   85678:	000b883a 	mov	r5,zero
   8567c:	01800204 	movi	r6,8
   85680:	00893ec0 	call	893ec <memset>
   85684:	d980a517 	ldw	r6,660(sp)
   85688:	94800044 	addi	r18,r18,1
   8568c:	d8800204 	addi	r2,sp,8
   85690:	b009883a 	mov	r4,r22
   85694:	980b883a 	mov	r5,r19
   85698:	900f883a 	mov	r7,r18
   8569c:	d8800015 	stw	r2,0(sp)
   856a0:	00892ec0 	call	892ec <_mbrtowc_r>
   856a4:	1007883a 	mov	r3,r2
   856a8:	15ff1226 	beq	r2,r23,852f4 <__svfscanf_r+0x154>
   856ac:	10039e1e 	bne	r2,zero,86528 <__svfscanf_r+0x1388>
   856b0:	a800011e 	bne	r21,zero,856b8 <__svfscanf_r+0x518>
   856b4:	98000015 	stw	zero,0(r19)
   856b8:	d8c0a317 	ldw	r3,652(sp)
   856bc:	d900a617 	ldw	r4,664(sp)
   856c0:	8ca3883a 	add	r17,r17,r18
   856c4:	18ffffc4 	addi	r3,r3,-1
   856c8:	d8c0a315 	stw	r3,652(sp)
   856cc:	20000126 	beq	r4,zero,856d4 <__svfscanf_r+0x534>
   856d0:	9cc00104 	addi	r19,r19,4
   856d4:	0025883a 	mov	r18,zero
   856d8:	80c00117 	ldw	r3,4(r16)
   856dc:	00c3950e 	bge	zero,r3,86534 <__svfscanf_r+0x1394>
   856e0:	d880a317 	ldw	r2,652(sp)
   856e4:	10039826 	beq	r2,zero,86548 <__svfscanf_r+0x13a8>
   856e8:	e0800017 	ldw	r2,0(fp)
   856ec:	90bfd71e 	bne	r18,r2,8564c <__svfscanf_r+0x4ac>
   856f0:	003f0006 	br	852f4 <__svfscanf_r+0x154>
   856f4:	d880a317 	ldw	r2,652(sp)
   856f8:	1000021e 	bne	r2,zero,85704 <__svfscanf_r+0x564>
   856fc:	00ffffc4 	movi	r3,-1
   85700:	d8c0a315 	stw	r3,652(sp)
   85704:	a880040c 	andi	r2,r21,16
   85708:	1003b826 	beq	r2,zero,865ec <__svfscanf_r+0x144c>
   8570c:	0027883a 	mov	r19,zero
   85710:	dd400404 	addi	r21,sp,16
   85714:	81000017 	ldw	r4,0(r16)
   85718:	20800003 	ldbu	r2,0(r4)
   8571c:	a885883a 	add	r2,r21,r2
   85720:	10c00007 	ldb	r3,0(r2)
   85724:	18037d26 	beq	r3,zero,8651c <__svfscanf_r+0x137c>
   85728:	80c00117 	ldw	r3,4(r16)
   8572c:	21800044 	addi	r6,r4,1
   85730:	d900a317 	ldw	r4,652(sp)
   85734:	18ffffc4 	addi	r3,r3,-1
   85738:	9cc00044 	addi	r19,r19,1
   8573c:	81800015 	stw	r6,0(r16)
   85740:	80c00115 	stw	r3,4(r16)
   85744:	24c37526 	beq	r4,r19,8651c <__svfscanf_r+0x137c>
   85748:	00fff216 	blt	zero,r3,85714 <__svfscanf_r+0x574>
   8574c:	b009883a 	mov	r4,r22
   85750:	800b883a 	mov	r5,r16
   85754:	0082aa40 	call	82aa4 <__srefill_r>
   85758:	103fee26 	beq	r2,zero,85714 <__svfscanf_r+0x574>
   8575c:	983ee526 	beq	r19,zero,852f4 <__svfscanf_r+0x154>
   85760:	8ce3883a 	add	r17,r17,r19
   85764:	003ea106 	br	851ec <__svfscanf_r+0x4c>
   85768:	d900a317 	ldw	r4,652(sp)
   8576c:	00805704 	movi	r2,348
   85770:	20ffffc4 	addi	r3,r4,-1
   85774:	10c0bf2e 	bgeu	r2,r3,85a74 <__svfscanf_r+0x8d4>
   85778:	00805744 	movi	r2,349
   8577c:	24ffa8c4 	addi	r19,r4,-349
   85780:	ac836014 	ori	r18,r21,3456
   85784:	d880a315 	stw	r2,652(sp)
   85788:	d8c04404 	addi	r3,sp,272
   8578c:	d8c0a515 	stw	r3,660(sp)
   85790:	002f883a 	mov	r23,zero
   85794:	182b883a 	mov	r21,r3
   85798:	81800017 	ldw	r6,0(r16)
   8579c:	00c01344 	movi	r3,77
   857a0:	31400003 	ldbu	r5,0(r6)
   857a4:	28bff544 	addi	r2,r5,-43
   857a8:	10803fcc 	andi	r2,r2,255
   857ac:	1880b836 	bltu	r3,r2,85a90 <__svfscanf_r+0x8f0>
   857b0:	1085883a 	add	r2,r2,r2
   857b4:	1085883a 	add	r2,r2,r2
   857b8:	00c00234 	movhi	r3,8
   857bc:	18d5f304 	addi	r3,r3,22476
   857c0:	10c5883a 	add	r2,r2,r3
   857c4:	11000017 	ldw	r4,0(r2)
   857c8:	2000683a 	jmp	r4
   857cc:	00085be0 	cmpeqi	zero,zero,8559
   857d0:	00085a90 	cmplti	zero,zero,8554
   857d4:	00085be0 	cmpeqi	zero,zero,8559
   857d8:	00085a90 	cmplti	zero,zero,8554
   857dc:	00085a90 	cmplti	zero,zero,8554
   857e0:	00085c24 	muli	zero,zero,8560
   857e4:	00086428 	cmpgeui	zero,zero,8592
   857e8:	00086428 	cmpgeui	zero,zero,8592
   857ec:	00086428 	cmpgeui	zero,zero,8592
   857f0:	00086428 	cmpgeui	zero,zero,8592
   857f4:	00086428 	cmpgeui	zero,zero,8592
   857f8:	00086428 	cmpgeui	zero,zero,8592
   857fc:	00086428 	cmpgeui	zero,zero,8592
   85800:	00086450 	cmplti	zero,zero,8593
   85804:	00086450 	cmplti	zero,zero,8593
   85808:	00085a90 	cmplti	zero,zero,8554
   8580c:	00085a90 	cmplti	zero,zero,8554
   85810:	00085a90 	cmplti	zero,zero,8554
   85814:	00085a90 	cmplti	zero,zero,8554
   85818:	00085a90 	cmplti	zero,zero,8554
   8581c:	00085a90 	cmplti	zero,zero,8554
   85820:	00085a90 	cmplti	zero,zero,8554
   85824:	00086480 	call	8648 <__alt_mem_sram_0-0x779b8>
   85828:	00086480 	call	8648 <__alt_mem_sram_0-0x779b8>
   8582c:	00086480 	call	8648 <__alt_mem_sram_0-0x779b8>
   85830:	00086480 	call	8648 <__alt_mem_sram_0-0x779b8>
   85834:	00086480 	call	8648 <__alt_mem_sram_0-0x779b8>
   85838:	00086480 	call	8648 <__alt_mem_sram_0-0x779b8>
   8583c:	00085a90 	cmplti	zero,zero,8554
   85840:	00085a90 	cmplti	zero,zero,8554
   85844:	00085a90 	cmplti	zero,zero,8554
   85848:	00085a90 	cmplti	zero,zero,8554
   8584c:	00085a90 	cmplti	zero,zero,8554
   85850:	00085a90 	cmplti	zero,zero,8554
   85854:	00085a90 	cmplti	zero,zero,8554
   85858:	00085a90 	cmplti	zero,zero,8554
   8585c:	00085a90 	cmplti	zero,zero,8554
   85860:	00085a90 	cmplti	zero,zero,8554
   85864:	00085a90 	cmplti	zero,zero,8554
   85868:	00085a90 	cmplti	zero,zero,8554
   8586c:	00085a90 	cmplti	zero,zero,8554
   85870:	00085a90 	cmplti	zero,zero,8554
   85874:	00085a90 	cmplti	zero,zero,8554
   85878:	00085a90 	cmplti	zero,zero,8554
   8587c:	00085a90 	cmplti	zero,zero,8554
   85880:	00086490 	cmplti	zero,zero,8594
   85884:	00085a90 	cmplti	zero,zero,8554
   85888:	00085a90 	cmplti	zero,zero,8554
   8588c:	00085a90 	cmplti	zero,zero,8554
   85890:	00085a90 	cmplti	zero,zero,8554
   85894:	00085a90 	cmplti	zero,zero,8554
   85898:	00085a90 	cmplti	zero,zero,8554
   8589c:	00085a90 	cmplti	zero,zero,8554
   858a0:	00085a90 	cmplti	zero,zero,8554
   858a4:	00086480 	call	8648 <__alt_mem_sram_0-0x779b8>
   858a8:	00086480 	call	8648 <__alt_mem_sram_0-0x779b8>
   858ac:	00086480 	call	8648 <__alt_mem_sram_0-0x779b8>
   858b0:	00086480 	call	8648 <__alt_mem_sram_0-0x779b8>
   858b4:	00086480 	call	8648 <__alt_mem_sram_0-0x779b8>
   858b8:	00086480 	call	8648 <__alt_mem_sram_0-0x779b8>
   858bc:	00085a90 	cmplti	zero,zero,8554
   858c0:	00085a90 	cmplti	zero,zero,8554
   858c4:	00085a90 	cmplti	zero,zero,8554
   858c8:	00085a90 	cmplti	zero,zero,8554
   858cc:	00085a90 	cmplti	zero,zero,8554
   858d0:	00085a90 	cmplti	zero,zero,8554
   858d4:	00085a90 	cmplti	zero,zero,8554
   858d8:	00085a90 	cmplti	zero,zero,8554
   858dc:	00085a90 	cmplti	zero,zero,8554
   858e0:	00085a90 	cmplti	zero,zero,8554
   858e4:	00085a90 	cmplti	zero,zero,8554
   858e8:	00085a90 	cmplti	zero,zero,8554
   858ec:	00085a90 	cmplti	zero,zero,8554
   858f0:	00085a90 	cmplti	zero,zero,8554
   858f4:	00085a90 	cmplti	zero,zero,8554
   858f8:	00085a90 	cmplti	zero,zero,8554
   858fc:	00085a90 	cmplti	zero,zero,8554
   85900:	00086490 	cmplti	zero,zero,8594
   85904:	d900a317 	ldw	r4,652(sp)
   85908:	2000021e 	bne	r4,zero,85914 <__svfscanf_r+0x774>
   8590c:	00bfffc4 	movi	r2,-1
   85910:	d880a315 	stw	r2,652(sp)
   85914:	a880004c 	andi	r2,r21,1
   85918:	1005003a 	cmpeq	r2,r2,zero
   8591c:	1003651e 	bne	r2,zero,866b4 <__svfscanf_r+0x1514>
   85920:	adc0040c 	andi	r23,r21,16
   85924:	b807003a 	cmpeq	r3,r23,zero
   85928:	d8c0a715 	stw	r3,668(sp)
   8592c:	1802f61e 	bne	r3,zero,86508 <__svfscanf_r+0x1368>
   85930:	dd400104 	addi	r21,sp,4
   85934:	0025883a 	mov	r18,zero
   85938:	073fffc4 	movi	fp,-1
   8593c:	81400017 	ldw	r5,0(r16)
   85940:	98800017 	ldw	r2,0(r19)
   85944:	29c00003 	ldbu	r7,0(r5)
   85948:	38c03fcc 	andi	r3,r7,255
   8594c:	1887883a 	add	r3,r3,r2
   85950:	19000003 	ldbu	r4,0(r3)
   85954:	2100020c 	andi	r4,r4,8
   85958:	2000321e 	bne	r4,zero,85a24 <__svfscanf_r+0x884>
   8595c:	d8c0a317 	ldw	r3,652(sp)
   85960:	18003026 	beq	r3,zero,85a24 <__svfscanf_r+0x884>
   85964:	00800274 	movhi	r2,9
   85968:	1098c104 	addi	r2,r2,25348
   8596c:	10c00017 	ldw	r3,0(r2)
   85970:	90fe6026 	beq	r18,r3,852f4 <__svfscanf_r+0x154>
   85974:	d8c04404 	addi	r3,sp,272
   85978:	80800117 	ldw	r2,4(r16)
   8597c:	d8c0a515 	stw	r3,660(sp)
   85980:	d900a517 	ldw	r4,660(sp)
   85984:	10ffffc4 	addi	r3,r2,-1
   85988:	29800044 	addi	r6,r5,1
   8598c:	80c00115 	stw	r3,4(r16)
   85990:	2485883a 	add	r2,r4,r18
   85994:	81800015 	stw	r6,0(r16)
   85998:	d9000204 	addi	r4,sp,8
   8599c:	000b883a 	mov	r5,zero
   859a0:	01800204 	movi	r6,8
   859a4:	11c00005 	stb	r7,0(r2)
   859a8:	00893ec0 	call	893ec <memset>
   859ac:	d980a517 	ldw	r6,660(sp)
   859b0:	94800044 	addi	r18,r18,1
   859b4:	d8800204 	addi	r2,sp,8
   859b8:	b009883a 	mov	r4,r22
   859bc:	a80b883a 	mov	r5,r21
   859c0:	900f883a 	mov	r7,r18
   859c4:	d8800015 	stw	r2,0(sp)
   859c8:	00892ec0 	call	892ec <_mbrtowc_r>
   859cc:	1007883a 	mov	r3,r2
   859d0:	173e4826 	beq	r2,fp,852f4 <__svfscanf_r+0x154>
   859d4:	1002c91e 	bne	r2,zero,864fc <__svfscanf_r+0x135c>
   859d8:	a8000015 	stw	zero,0(r21)
   859dc:	a9000017 	ldw	r4,0(r21)
   859e0:	00891840 	call	89184 <iswspace>
   859e4:	1002bc1e 	bne	r2,zero,864d8 <__svfscanf_r+0x1338>
   859e8:	d900a317 	ldw	r4,652(sp)
   859ec:	d880a717 	ldw	r2,668(sp)
   859f0:	8ca3883a 	add	r17,r17,r18
   859f4:	213fffc4 	addi	r4,r4,-1
   859f8:	d900a315 	stw	r4,652(sp)
   859fc:	10000126 	beq	r2,zero,85a04 <__svfscanf_r+0x864>
   85a00:	ad400104 	addi	r21,r21,4
   85a04:	0025883a 	mov	r18,zero
   85a08:	80c00117 	ldw	r3,4(r16)
   85a0c:	00ffcb16 	blt	zero,r3,8593c <__svfscanf_r+0x79c>
   85a10:	b009883a 	mov	r4,r22
   85a14:	800b883a 	mov	r5,r16
   85a18:	0082aa40 	call	82aa4 <__srefill_r>
   85a1c:	103fc726 	beq	r2,zero,8593c <__svfscanf_r+0x79c>
   85a20:	903e341e 	bne	r18,zero,852f4 <__svfscanf_r+0x154>
   85a24:	b83df11e 	bne	r23,zero,851ec <__svfscanf_r+0x4c>
   85a28:	d900a217 	ldw	r4,648(sp)
   85a2c:	a8000015 	stw	zero,0(r21)
   85a30:	21000044 	addi	r4,r4,1
   85a34:	d900a215 	stw	r4,648(sp)
   85a38:	003dec06 	br	851ec <__svfscanf_r+0x4c>
   85a3c:	d900a317 	ldw	r4,652(sp)
   85a40:	00805704 	movi	r2,348
   85a44:	20ffffc4 	addi	r3,r4,-1
   85a48:	10c0902e 	bgeu	r2,r3,85c8c <__svfscanf_r+0xaec>
   85a4c:	00805744 	movi	r2,349
   85a50:	24ffa8c4 	addi	r19,r4,-349
   85a54:	ad41e014 	ori	r21,r21,1920
   85a58:	d880a315 	stw	r2,652(sp)
   85a5c:	00010806 	br	85e80 <__svfscanf_r+0xce0>
   85a60:	b009883a 	mov	r4,r22
   85a64:	800b883a 	mov	r5,r16
   85a68:	0082aa40 	call	82aa4 <__srefill_r>
   85a6c:	103ebd26 	beq	r2,zero,85564 <__svfscanf_r+0x3c4>
   85a70:	003e2006 	br	852f4 <__svfscanf_r+0x154>
   85a74:	d900a317 	ldw	r4,652(sp)
   85a78:	ac836014 	ori	r18,r21,3456
   85a7c:	2002941e 	bne	r4,zero,864d0 <__svfscanf_r+0x1330>
   85a80:	d8804404 	addi	r2,sp,272
   85a84:	d880a515 	stw	r2,660(sp)
   85a88:	002f883a 	mov	r23,zero
   85a8c:	102b883a 	mov	r21,r2
   85a90:	9080400c 	andi	r2,r18,256
   85a94:	10000926 	beq	r2,zero,85abc <__svfscanf_r+0x91c>
   85a98:	d8c0a517 	ldw	r3,660(sp)
   85a9c:	1d40052e 	bgeu	r3,r21,85ab4 <__svfscanf_r+0x914>
   85aa0:	ad7fffc4 	addi	r21,r21,-1
   85aa4:	a9400007 	ldb	r5,0(r21)
   85aa8:	b009883a 	mov	r4,r22
   85aac:	800d883a 	mov	r6,r16
   85ab0:	008c8300 	call	8c830 <_ungetc_r>
   85ab4:	d900a517 	ldw	r4,660(sp)
   85ab8:	257dee26 	beq	r4,r21,85274 <__svfscanf_r+0xd4>
   85abc:	9080040c 	andi	r2,r18,16
   85ac0:	10000a26 	beq	r2,zero,85aec <__svfscanf_r+0x94c>
   85ac4:	d8c0a517 	ldw	r3,660(sp)
   85ac8:	a8c5c83a 	sub	r2,r21,r3
   85acc:	b885883a 	add	r2,r23,r2
   85ad0:	88a3883a 	add	r17,r17,r2
   85ad4:	003dc506 	br	851ec <__svfscanf_r+0x4c>
   85ad8:	a0c00007 	ldb	r3,0(r20)
   85adc:	00801b04 	movi	r2,108
   85ae0:	18801726 	beq	r3,r2,85b40 <__svfscanf_r+0x9a0>
   85ae4:	ad400054 	ori	r21,r21,1
   85ae8:	003e0906 	br	85310 <__svfscanf_r+0x170>
   85aec:	a8000005 	stb	zero,0(r21)
   85af0:	d8c0a017 	ldw	r3,640(sp)
   85af4:	d940a517 	ldw	r5,660(sp)
   85af8:	d9c0a117 	ldw	r7,644(sp)
   85afc:	b009883a 	mov	r4,r22
   85b00:	000d883a 	mov	r6,zero
   85b04:	183ee83a 	callr	r3
   85b08:	1007883a 	mov	r3,r2
   85b0c:	9080080c 	andi	r2,r18,32
   85b10:	1000251e 	bne	r2,zero,85ba8 <__svfscanf_r+0xa08>
   85b14:	9080010c 	andi	r2,r18,4
   85b18:	10000c26 	beq	r2,zero,85b4c <__svfscanf_r+0x9ac>
   85b1c:	d900a417 	ldw	r4,656(sp)
   85b20:	20800017 	ldw	r2,0(r4)
   85b24:	21000104 	addi	r4,r4,4
   85b28:	d900a415 	stw	r4,656(sp)
   85b2c:	10c0000d 	sth	r3,0(r2)
   85b30:	d880a217 	ldw	r2,648(sp)
   85b34:	10800044 	addi	r2,r2,1
   85b38:	d880a215 	stw	r2,648(sp)
   85b3c:	003fe106 	br	85ac4 <__svfscanf_r+0x924>
   85b40:	a5000044 	addi	r20,r20,1
   85b44:	ad400094 	ori	r21,r21,2
   85b48:	003df106 	br	85310 <__svfscanf_r+0x170>
   85b4c:	9080004c 	andi	r2,r18,1
   85b50:	1005003a 	cmpeq	r2,r2,zero
   85b54:	10001426 	beq	r2,zero,85ba8 <__svfscanf_r+0xa08>
   85b58:	9080008c 	andi	r2,r18,2
   85b5c:	10001226 	beq	r2,zero,85ba8 <__svfscanf_r+0xa08>
   85b60:	d8c0a017 	ldw	r3,640(sp)
   85b64:	00800274 	movhi	r2,9
   85b68:	10b08004 	addi	r2,r2,-15872
   85b6c:	18801426 	beq	r3,r2,85bc0 <__svfscanf_r+0xa20>
   85b70:	d9c0a117 	ldw	r7,644(sp)
   85b74:	d940a517 	ldw	r5,660(sp)
   85b78:	000d883a 	mov	r6,zero
   85b7c:	b009883a 	mov	r4,r22
   85b80:	008bee80 	call	8bee8 <_strtoll_r>
   85b84:	100d883a 	mov	r6,r2
   85b88:	180f883a 	mov	r7,r3
   85b8c:	d900a417 	ldw	r4,656(sp)
   85b90:	20800017 	ldw	r2,0(r4)
   85b94:	21000104 	addi	r4,r4,4
   85b98:	d900a415 	stw	r4,656(sp)
   85b9c:	11c00115 	stw	r7,4(r2)
   85ba0:	11800015 	stw	r6,0(r2)
   85ba4:	003fe206 	br	85b30 <__svfscanf_r+0x990>
   85ba8:	d900a417 	ldw	r4,656(sp)
   85bac:	20800017 	ldw	r2,0(r4)
   85bb0:	21000104 	addi	r4,r4,4
   85bb4:	d900a415 	stw	r4,656(sp)
   85bb8:	10c00015 	stw	r3,0(r2)
   85bbc:	003fdc06 	br	85b30 <__svfscanf_r+0x990>
   85bc0:	d9c0a117 	ldw	r7,644(sp)
   85bc4:	d940a517 	ldw	r5,660(sp)
   85bc8:	000d883a 	mov	r6,zero
   85bcc:	b009883a 	mov	r4,r22
   85bd0:	008c4640 	call	8c464 <_strtoull_r>
   85bd4:	100d883a 	mov	r6,r2
   85bd8:	180f883a 	mov	r7,r3
   85bdc:	003feb06 	br	85b8c <__svfscanf_r+0x9ec>
   85be0:	9080200c 	andi	r2,r18,128
   85be4:	103faa26 	beq	r2,zero,85a90 <__svfscanf_r+0x8f0>
   85be8:	00bfdfc4 	movi	r2,-129
   85bec:	90a4703a 	and	r18,r18,r2
   85bf0:	a9400005 	stb	r5,0(r21)
   85bf4:	ad400044 	addi	r21,r21,1
   85bf8:	80c00117 	ldw	r3,4(r16)
   85bfc:	18ffffc4 	addi	r3,r3,-1
   85c00:	80c00115 	stw	r3,4(r16)
   85c04:	00c0130e 	bge	zero,r3,85c54 <__svfscanf_r+0xab4>
   85c08:	31800044 	addi	r6,r6,1
   85c0c:	81800015 	stw	r6,0(r16)
   85c10:	d880a317 	ldw	r2,652(sp)
   85c14:	10bfffc4 	addi	r2,r2,-1
   85c18:	d880a315 	stw	r2,652(sp)
   85c1c:	103ede1e 	bne	r2,zero,85798 <__svfscanf_r+0x5f8>
   85c20:	003f9b06 	br	85a90 <__svfscanf_r+0x8f0>
   85c24:	9082000c 	andi	r2,r18,2048
   85c28:	103ff126 	beq	r2,zero,85bf0 <__svfscanf_r+0xa50>
   85c2c:	d8c0a117 	ldw	r3,644(sp)
   85c30:	1800031e 	bne	r3,zero,85c40 <__svfscanf_r+0xaa0>
   85c34:	01000204 	movi	r4,8
   85c38:	94808014 	ori	r18,r18,512
   85c3c:	d900a115 	stw	r4,644(sp)
   85c40:	9081000c 	andi	r2,r18,1024
   85c44:	10000826 	beq	r2,zero,85c68 <__svfscanf_r+0xac8>
   85c48:	00be9fc4 	movi	r2,-1409
   85c4c:	90a4703a 	and	r18,r18,r2
   85c50:	003fe706 	br	85bf0 <__svfscanf_r+0xa50>
   85c54:	b009883a 	mov	r4,r22
   85c58:	800b883a 	mov	r5,r16
   85c5c:	0082aa40 	call	82aa4 <__srefill_r>
   85c60:	103feb26 	beq	r2,zero,85c10 <__svfscanf_r+0xa70>
   85c64:	003f8a06 	br	85a90 <__svfscanf_r+0x8f0>
   85c68:	98000426 	beq	r19,zero,85c7c <__svfscanf_r+0xadc>
   85c6c:	d880a317 	ldw	r2,652(sp)
   85c70:	9cffffc4 	addi	r19,r19,-1
   85c74:	10800044 	addi	r2,r2,1
   85c78:	d880a315 	stw	r2,652(sp)
   85c7c:	00bf1fc4 	movi	r2,-897
   85c80:	90a4703a 	and	r18,r18,r2
   85c84:	bdc00044 	addi	r23,r23,1
   85c88:	003fdb06 	br	85bf8 <__svfscanf_r+0xa58>
   85c8c:	d900a317 	ldw	r4,652(sp)
   85c90:	ad41e014 	ori	r21,r21,1920
   85c94:	2000791e 	bne	r4,zero,85e7c <__svfscanf_r+0xcdc>
   85c98:	d8c04404 	addi	r3,sp,272
   85c9c:	d8c0a515 	stw	r3,660(sp)
   85ca0:	182f883a 	mov	r23,r3
   85ca4:	d8009c15 	stw	zero,624(sp)
   85ca8:	d8009d15 	stw	zero,628(sp)
   85cac:	d8009f15 	stw	zero,636(sp)
   85cb0:	d8009e15 	stw	zero,632(sp)
   85cb4:	0039883a 	mov	fp,zero
   85cb8:	e1003fcc 	andi	r4,fp,255
   85cbc:	2100201c 	xori	r4,r4,128
   85cc0:	213fe004 	addi	r4,r4,-128
   85cc4:	20ffffc4 	addi	r3,r4,-1
   85cc8:	00800184 	movi	r2,6
   85ccc:	10c01736 	bltu	r2,r3,85d2c <__svfscanf_r+0xb8c>
   85cd0:	00c00084 	movi	r3,2
   85cd4:	19026d0e 	bge	r3,r4,8668c <__svfscanf_r+0x14ec>
   85cd8:	008000c4 	movi	r2,3
   85cdc:	1100130e 	bge	r2,r4,85d2c <__svfscanf_r+0xb8c>
   85ce0:	e4ffffc4 	addi	r19,fp,-1
   85ce4:	b825883a 	mov	r18,r23
   85ce8:	94bfffc4 	addi	r18,r18,-1
   85cec:	91400007 	ldb	r5,0(r18)
   85cf0:	b009883a 	mov	r4,r22
   85cf4:	800d883a 	mov	r6,r16
   85cf8:	008c8300 	call	8c830 <_ungetc_r>
   85cfc:	9cffffc4 	addi	r19,r19,-1
   85d00:	98c03fcc 	andi	r3,r19,255
   85d04:	18c0201c 	xori	r3,r3,128
   85d08:	18ffe004 	addi	r3,r3,-128
   85d0c:	00800084 	movi	r2,2
   85d10:	18bff51e 	bne	r3,r2,85ce8 <__svfscanf_r+0xb48>
   85d14:	e0bfff04 	addi	r2,fp,-4
   85d18:	10803fcc 	andi	r2,r2,255
   85d1c:	b887c83a 	sub	r3,r23,r2
   85d20:	8885c83a 	sub	r2,r17,r2
   85d24:	147fffc4 	addi	r17,r2,-1
   85d28:	1dffffc4 	addi	r23,r3,-1
   85d2c:	a880400c 	andi	r2,r21,256
   85d30:	10001226 	beq	r2,zero,85d7c <__svfscanf_r+0xbdc>
   85d34:	a881000c 	andi	r2,r21,1024
   85d38:	10002b1e 	bne	r2,zero,85de8 <__svfscanf_r+0xc48>
   85d3c:	bdffffc4 	addi	r23,r23,-1
   85d40:	b9400007 	ldb	r5,0(r23)
   85d44:	00801944 	movi	r2,101
   85d48:	8c7fffc4 	addi	r17,r17,-1
   85d4c:	28800826 	beq	r5,r2,85d70 <__svfscanf_r+0xbd0>
   85d50:	00801144 	movi	r2,69
   85d54:	28800626 	beq	r5,r2,85d70 <__svfscanf_r+0xbd0>
   85d58:	bdffffc4 	addi	r23,r23,-1
   85d5c:	b009883a 	mov	r4,r22
   85d60:	800d883a 	mov	r6,r16
   85d64:	008c8300 	call	8c830 <_ungetc_r>
   85d68:	b9400007 	ldb	r5,0(r23)
   85d6c:	8c7fffc4 	addi	r17,r17,-1
   85d70:	b009883a 	mov	r4,r22
   85d74:	800d883a 	mov	r6,r16
   85d78:	008c8300 	call	8c830 <_ungetc_r>
   85d7c:	a880040c 	andi	r2,r21,16
   85d80:	103d1a1e 	bne	r2,zero,851ec <__svfscanf_r+0x4c>
   85d84:	a8c1800c 	andi	r3,r21,1536
   85d88:	00810004 	movi	r2,1024
   85d8c:	b8000005 	stb	zero,0(r23)
   85d90:	18813326 	beq	r3,r2,86260 <__svfscanf_r+0x10c0>
   85d94:	d8809d17 	ldw	r2,628(sp)
   85d98:	1000251e 	bne	r2,zero,85e30 <__svfscanf_r+0xc90>
   85d9c:	d940a517 	ldw	r5,660(sp)
   85da0:	b009883a 	mov	r4,r22
   85da4:	000d883a 	mov	r6,zero
   85da8:	008a7dc0 	call	8a7dc <_strtod_r>
   85dac:	a900004c 	andi	r4,r21,1
   85db0:	2009003a 	cmpeq	r4,r4,zero
   85db4:	1025883a 	mov	r18,r2
   85db8:	1827883a 	mov	r19,r3
   85dbc:	2000141e 	bne	r4,zero,85e10 <__svfscanf_r+0xc70>
   85dc0:	d8c0a417 	ldw	r3,656(sp)
   85dc4:	18800017 	ldw	r2,0(r3)
   85dc8:	1d400104 	addi	r21,r3,4
   85dcc:	14c00115 	stw	r19,4(r2)
   85dd0:	14800015 	stw	r18,0(r2)
   85dd4:	d8c0a217 	ldw	r3,648(sp)
   85dd8:	dd40a415 	stw	r21,656(sp)
   85ddc:	18c00044 	addi	r3,r3,1
   85de0:	d8c0a215 	stw	r3,648(sp)
   85de4:	003d0106 	br	851ec <__svfscanf_r+0x4c>
   85de8:	d900a517 	ldw	r4,660(sp)
   85dec:	25fd212e 	bgeu	r4,r23,85274 <__svfscanf_r+0xd4>
   85df0:	bdffffc4 	addi	r23,r23,-1
   85df4:	b9400007 	ldb	r5,0(r23)
   85df8:	b009883a 	mov	r4,r22
   85dfc:	800d883a 	mov	r6,r16
   85e00:	008c8300 	call	8c830 <_ungetc_r>
   85e04:	d880a517 	ldw	r2,660(sp)
   85e08:	15fff936 	bltu	r2,r23,85df0 <__svfscanf_r+0xc50>
   85e0c:	003d1906 	br	85274 <__svfscanf_r+0xd4>
   85e10:	a880008c 	andi	r2,r21,2
   85e14:	10011926 	beq	r2,zero,8627c <__svfscanf_r+0x10dc>
   85e18:	d900a417 	ldw	r4,656(sp)
   85e1c:	20800017 	ldw	r2,0(r4)
   85e20:	25400104 	addi	r21,r4,4
   85e24:	10c00115 	stw	r3,4(r2)
   85e28:	14800015 	stw	r18,0(r2)
   85e2c:	003fe906 	br	85dd4 <__svfscanf_r+0xc34>
   85e30:	d8c09c17 	ldw	r3,624(sp)
   85e34:	b009883a 	mov	r4,r22
   85e38:	000d883a 	mov	r6,zero
   85e3c:	19400044 	addi	r5,r3,1
   85e40:	01c00284 	movi	r7,10
   85e44:	0082fec0 	call	82fec <_strtol_r>
   85e48:	d9009d17 	ldw	r4,628(sp)
   85e4c:	110dc83a 	sub	r6,r2,r4
   85e50:	d8c0a517 	ldw	r3,660(sp)
   85e54:	d9009c17 	ldw	r4,624(sp)
   85e58:	188054c4 	addi	r2,r3,339
   85e5c:	20800236 	bltu	r4,r2,85e68 <__svfscanf_r+0xcc8>
   85e60:	18805484 	addi	r2,r3,338
   85e64:	d8809c15 	stw	r2,624(sp)
   85e68:	d9009c17 	ldw	r4,624(sp)
   85e6c:	01400274 	movhi	r5,9
   85e70:	29507104 	addi	r5,r5,16836
   85e74:	008a6c00 	call	8a6c0 <sprintf>
   85e78:	003fc806 	br	85d9c <__svfscanf_r+0xbfc>
   85e7c:	0027883a 	mov	r19,zero
   85e80:	d8c04404 	addi	r3,sp,272
   85e84:	d8c0a515 	stw	r3,660(sp)
   85e88:	182f883a 	mov	r23,r3
   85e8c:	d8009f15 	stw	zero,636(sp)
   85e90:	d8009e15 	stw	zero,632(sp)
   85e94:	d8009d15 	stw	zero,628(sp)
   85e98:	d8009c15 	stw	zero,624(sp)
   85e9c:	0039883a 	mov	fp,zero
   85ea0:	0025883a 	mov	r18,zero
   85ea4:	80800017 	ldw	r2,0(r16)
   85ea8:	11400003 	ldbu	r5,0(r2)
   85eac:	00801384 	movi	r2,78
   85eb0:	28fff544 	addi	r3,r5,-43
   85eb4:	18c03fcc 	andi	r3,r3,255
   85eb8:	10c08336 	bltu	r2,r3,860c8 <__svfscanf_r+0xf28>
   85ebc:	18c5883a 	add	r2,r3,r3
   85ec0:	1085883a 	add	r2,r2,r2
   85ec4:	00c00234 	movhi	r3,8
   85ec8:	18d7b604 	addi	r3,r3,24280
   85ecc:	10c5883a 	add	r2,r2,r3
   85ed0:	11000017 	ldw	r4,0(r2)
   85ed4:	2000683a 	jmp	r4
   85ed8:	00086080 	call	8608 <__alt_mem_sram_0-0x779f8>
   85edc:	000860c8 	cmpgei	zero,zero,8579
   85ee0:	00086080 	call	8608 <__alt_mem_sram_0-0x779f8>
   85ee4:	0008610c 	andi	zero,zero,8580
   85ee8:	000860c8 	cmpgei	zero,zero,8579
   85eec:	00086178 	rdprs	zero,zero,8581
   85ef0:	000861ac 	andhi	zero,zero,8582
   85ef4:	000861ac 	andhi	zero,zero,8582
   85ef8:	000861ac 	andhi	zero,zero,8582
   85efc:	000861ac 	andhi	zero,zero,8582
   85f00:	000861ac 	andhi	zero,zero,8582
   85f04:	000861ac 	andhi	zero,zero,8582
   85f08:	000861ac 	andhi	zero,zero,8582
   85f0c:	000861ac 	andhi	zero,zero,8582
   85f10:	000861ac 	andhi	zero,zero,8582
   85f14:	000860c8 	cmpgei	zero,zero,8579
   85f18:	000860c8 	cmpgei	zero,zero,8579
   85f1c:	000860c8 	cmpgei	zero,zero,8579
   85f20:	000860c8 	cmpgei	zero,zero,8579
   85f24:	000860c8 	cmpgei	zero,zero,8579
   85f28:	000860c8 	cmpgei	zero,zero,8579
   85f2c:	000860c8 	cmpgei	zero,zero,8579
   85f30:	000861cc 	andi	zero,zero,8583
   85f34:	000860c8 	cmpgei	zero,zero,8579
   85f38:	000860c8 	cmpgei	zero,zero,8579
   85f3c:	000860c8 	cmpgei	zero,zero,8579
   85f40:	000861dc 	xori	zero,zero,8583
   85f44:	00086228 	cmpgeui	zero,zero,8584
   85f48:	000860c8 	cmpgei	zero,zero,8579
   85f4c:	000860c8 	cmpgei	zero,zero,8579
   85f50:	00086300 	call	8630 <__alt_mem_sram_0-0x779d0>
   85f54:	000860c8 	cmpgei	zero,zero,8579
   85f58:	000860c8 	cmpgei	zero,zero,8579
   85f5c:	000860c8 	cmpgei	zero,zero,8579
   85f60:	000860c8 	cmpgei	zero,zero,8579
   85f64:	000862ac 	andhi	zero,zero,8586
   85f68:	000860c8 	cmpgei	zero,zero,8579
   85f6c:	000860c8 	cmpgei	zero,zero,8579
   85f70:	000860c8 	cmpgei	zero,zero,8579
   85f74:	000860c8 	cmpgei	zero,zero,8579
   85f78:	000860c8 	cmpgei	zero,zero,8579
   85f7c:	00086340 	call	8634 <__alt_mem_sram_0-0x779cc>
   85f80:	000860c8 	cmpgei	zero,zero,8579
   85f84:	000860c8 	cmpgei	zero,zero,8579
   85f88:	000860c8 	cmpgei	zero,zero,8579
   85f8c:	000860c8 	cmpgei	zero,zero,8579
   85f90:	00086244 	movi	zero,8585
   85f94:	000860c8 	cmpgei	zero,zero,8579
   85f98:	000860c8 	cmpgei	zero,zero,8579
   85f9c:	000860c8 	cmpgei	zero,zero,8579
   85fa0:	000860c8 	cmpgei	zero,zero,8579
   85fa4:	000860c8 	cmpgei	zero,zero,8579
   85fa8:	000860c8 	cmpgei	zero,zero,8579
   85fac:	000860c8 	cmpgei	zero,zero,8579
   85fb0:	000861cc 	andi	zero,zero,8583
   85fb4:	000860c8 	cmpgei	zero,zero,8579
   85fb8:	000860c8 	cmpgei	zero,zero,8579
   85fbc:	000860c8 	cmpgei	zero,zero,8579
   85fc0:	000861dc 	xori	zero,zero,8583
   85fc4:	00086228 	cmpgeui	zero,zero,8584
   85fc8:	000860c8 	cmpgei	zero,zero,8579
   85fcc:	000860c8 	cmpgei	zero,zero,8579
   85fd0:	00086300 	call	8630 <__alt_mem_sram_0-0x779d0>
   85fd4:	000860c8 	cmpgei	zero,zero,8579
   85fd8:	000860c8 	cmpgei	zero,zero,8579
   85fdc:	000860c8 	cmpgei	zero,zero,8579
   85fe0:	000860c8 	cmpgei	zero,zero,8579
   85fe4:	000862ac 	andhi	zero,zero,8586
   85fe8:	000860c8 	cmpgei	zero,zero,8579
   85fec:	000860c8 	cmpgei	zero,zero,8579
   85ff0:	000860c8 	cmpgei	zero,zero,8579
   85ff4:	000860c8 	cmpgei	zero,zero,8579
   85ff8:	000860c8 	cmpgei	zero,zero,8579
   85ffc:	00086340 	call	8634 <__alt_mem_sram_0-0x779cc>
   86000:	000860c8 	cmpgei	zero,zero,8579
   86004:	000860c8 	cmpgei	zero,zero,8579
   86008:	000860c8 	cmpgei	zero,zero,8579
   8600c:	000860c8 	cmpgei	zero,zero,8579
   86010:	00086244 	movi	zero,8585
   86014:	a880040c 	andi	r2,r21,16
   86018:	10004826 	beq	r2,zero,8613c <__svfscanf_r+0xf9c>
   8601c:	0027883a 	mov	r19,zero
   86020:	00000b06 	br	86050 <__svfscanf_r+0xeb0>
   86024:	80800017 	ldw	r2,0(r16)
   86028:	b009883a 	mov	r4,r22
   8602c:	800b883a 	mov	r5,r16
   86030:	148d883a 	add	r6,r2,r18
   86034:	81800015 	stw	r6,0(r16)
   86038:	9ca7883a 	add	r19,r19,r18
   8603c:	0082aa40 	call	82aa4 <__srefill_r>
   86040:	103dc61e 	bne	r2,zero,8575c <__svfscanf_r+0x5bc>
   86044:	d880a317 	ldw	r2,652(sp)
   86048:	1485c83a 	sub	r2,r2,r18
   8604c:	d880a315 	stw	r2,652(sp)
   86050:	84800117 	ldw	r18,4(r16)
   86054:	d900a317 	ldw	r4,652(sp)
   86058:	913ff216 	blt	r18,r4,86024 <__svfscanf_r+0xe84>
   8605c:	d900a317 	ldw	r4,652(sp)
   86060:	80800017 	ldw	r2,0(r16)
   86064:	9927883a 	add	r19,r19,r4
   86068:	9107c83a 	sub	r3,r18,r4
   8606c:	110d883a 	add	r6,r2,r4
   86070:	8ce3883a 	add	r17,r17,r19
   86074:	80c00115 	stw	r3,4(r16)
   86078:	81800015 	stw	r6,0(r16)
   8607c:	003c5b06 	br	851ec <__svfscanf_r+0x4c>
   86080:	a880200c 	andi	r2,r21,128
   86084:	10001026 	beq	r2,zero,860c8 <__svfscanf_r+0xf28>
   86088:	00bfdfc4 	movi	r2,-129
   8608c:	a8aa703a 	and	r21,r21,r2
   86090:	b9400005 	stb	r5,0(r23)
   86094:	bdc00044 	addi	r23,r23,1
   86098:	80c00117 	ldw	r3,4(r16)
   8609c:	8c400044 	addi	r17,r17,1
   860a0:	18bfffc4 	addi	r2,r3,-1
   860a4:	80800115 	stw	r2,4(r16)
   860a8:	00801f0e 	bge	zero,r2,86128 <__svfscanf_r+0xf88>
   860ac:	80800017 	ldw	r2,0(r16)
   860b0:	10800044 	addi	r2,r2,1
   860b4:	80800015 	stw	r2,0(r16)
   860b8:	d880a317 	ldw	r2,652(sp)
   860bc:	10bfffc4 	addi	r2,r2,-1
   860c0:	d880a315 	stw	r2,652(sp)
   860c4:	103f771e 	bne	r2,zero,85ea4 <__svfscanf_r+0xd04>
   860c8:	d8c09e17 	ldw	r3,632(sp)
   860cc:	18000226 	beq	r3,zero,860d8 <__svfscanf_r+0xf38>
   860d0:	00bfbfc4 	movi	r2,-257
   860d4:	a8aa703a 	and	r21,r21,r2
   860d8:	90ffffc4 	addi	r3,r18,-1
   860dc:	00800044 	movi	r2,1
   860e0:	10fef536 	bltu	r2,r3,85cb8 <__svfscanf_r+0xb18>
   860e4:	d900a517 	ldw	r4,660(sp)
   860e8:	25fc622e 	bgeu	r4,r23,85274 <__svfscanf_r+0xd4>
   860ec:	bdffffc4 	addi	r23,r23,-1
   860f0:	b9400007 	ldb	r5,0(r23)
   860f4:	b009883a 	mov	r4,r22
   860f8:	800d883a 	mov	r6,r16
   860fc:	008c8300 	call	8c830 <_ungetc_r>
   86100:	d880a517 	ldw	r2,660(sp)
   86104:	15fff936 	bltu	r2,r23,860ec <__svfscanf_r+0xf4c>
   86108:	003c5a06 	br	85274 <__svfscanf_r+0xd4>
   8610c:	a880800c 	andi	r2,r21,512
   86110:	103fed26 	beq	r2,zero,860c8 <__svfscanf_r+0xf28>
   86114:	d9009e17 	ldw	r4,632(sp)
   86118:	00bf5fc4 	movi	r2,-641
   8611c:	a8aa703a 	and	r21,r21,r2
   86120:	d9009f15 	stw	r4,636(sp)
   86124:	003fda06 	br	86090 <__svfscanf_r+0xef0>
   86128:	b009883a 	mov	r4,r22
   8612c:	800b883a 	mov	r5,r16
   86130:	0082aa40 	call	82aa4 <__srefill_r>
   86134:	103fe026 	beq	r2,zero,860b8 <__svfscanf_r+0xf18>
   86138:	003fe306 	br	860c8 <__svfscanf_r+0xf28>
   8613c:	d880a417 	ldw	r2,656(sp)
   86140:	d980a317 	ldw	r6,652(sp)
   86144:	01400044 	movi	r5,1
   86148:	11000017 	ldw	r4,0(r2)
   8614c:	800f883a 	mov	r7,r16
   86150:	0088b140 	call	88b14 <fread>
   86154:	103c6726 	beq	r2,zero,852f4 <__svfscanf_r+0x154>
   86158:	d8c0a417 	ldw	r3,656(sp)
   8615c:	d900a217 	ldw	r4,648(sp)
   86160:	88a3883a 	add	r17,r17,r2
   86164:	18c00104 	addi	r3,r3,4
   86168:	21000044 	addi	r4,r4,1
   8616c:	d8c0a415 	stw	r3,656(sp)
   86170:	d900a215 	stw	r4,648(sp)
   86174:	003c1d06 	br	851ec <__svfscanf_r+0x4c>
   86178:	a880400c 	andi	r2,r21,256
   8617c:	10000b26 	beq	r2,zero,861ac <__svfscanf_r+0x100c>
   86180:	00bfdfc4 	movi	r2,-129
   86184:	a8aa703a 	and	r21,r21,r2
   86188:	d8809e17 	ldw	r2,632(sp)
   8618c:	10800044 	addi	r2,r2,1
   86190:	d8809e15 	stw	r2,632(sp)
   86194:	983fc026 	beq	r19,zero,86098 <__svfscanf_r+0xef8>
   86198:	d8c0a317 	ldw	r3,652(sp)
   8619c:	9cffffc4 	addi	r19,r19,-1
   861a0:	18c00044 	addi	r3,r3,1
   861a4:	d8c0a315 	stw	r3,652(sp)
   861a8:	003fbb06 	br	86098 <__svfscanf_r+0xef8>
   861ac:	e0803fcc 	andi	r2,fp,255
   861b0:	1080201c 	xori	r2,r2,128
   861b4:	10bfe004 	addi	r2,r2,-128
   861b8:	9085883a 	add	r2,r18,r2
   861bc:	103fc21e 	bne	r2,zero,860c8 <__svfscanf_r+0xf28>
   861c0:	00bf9fc4 	movi	r2,-385
   861c4:	a8aa703a 	and	r21,r21,r2
   861c8:	003fb106 	br	86090 <__svfscanf_r+0xef0>
   861cc:	00800044 	movi	r2,1
   861d0:	90bfbd1e 	bne	r18,r2,860c8 <__svfscanf_r+0xf28>
   861d4:	04800084 	movi	r18,2
   861d8:	003fad06 	br	86090 <__svfscanf_r+0xef0>
   861dc:	a8c1400c 	andi	r3,r21,1280
   861e0:	00810004 	movi	r2,1024
   861e4:	18800426 	beq	r3,r2,861f8 <__svfscanf_r+0x1058>
   861e8:	a884703a 	and	r2,r21,r2
   861ec:	103fb626 	beq	r2,zero,860c8 <__svfscanf_r+0xf28>
   861f0:	d8809e17 	ldw	r2,632(sp)
   861f4:	103fb826 	beq	r2,zero,860d8 <__svfscanf_r+0xf38>
   861f8:	a880800c 	andi	r2,r21,512
   861fc:	1000051e 	bne	r2,zero,86214 <__svfscanf_r+0x1074>
   86200:	d8c09e17 	ldw	r3,632(sp)
   86204:	d9009f17 	ldw	r4,636(sp)
   86208:	ddc09c15 	stw	r23,624(sp)
   8620c:	1907c83a 	sub	r3,r3,r4
   86210:	d8c09d15 	stw	r3,628(sp)
   86214:	00be7fc4 	movi	r2,-1537
   86218:	a884703a 	and	r2,r21,r2
   8621c:	15406014 	ori	r21,r2,384
   86220:	d8009e15 	stw	zero,632(sp)
   86224:	003f9a06 	br	86090 <__svfscanf_r+0xef0>
   86228:	e0c03fcc 	andi	r3,fp,255
   8622c:	18c0201c 	xori	r3,r3,128
   86230:	18ffe004 	addi	r3,r3,-128
   86234:	00800084 	movi	r2,2
   86238:	18bfa31e 	bne	r3,r2,860c8 <__svfscanf_r+0xf28>
   8623c:	070000c4 	movi	fp,3
   86240:	003f9306 	br	86090 <__svfscanf_r+0xef0>
   86244:	e0c03fcc 	andi	r3,fp,255
   86248:	18c0201c 	xori	r3,r3,128
   8624c:	18ffe004 	addi	r3,r3,-128
   86250:	008001c4 	movi	r2,7
   86254:	18bf9c1e 	bne	r3,r2,860c8 <__svfscanf_r+0xf28>
   86258:	07000204 	movi	fp,8
   8625c:	003f8c06 	br	86090 <__svfscanf_r+0xef0>
   86260:	d8c09e17 	ldw	r3,632(sp)
   86264:	d9009f17 	ldw	r4,636(sp)
   86268:	1905c83a 	sub	r2,r3,r4
   8626c:	103ecb26 	beq	r2,zero,85d9c <__svfscanf_r+0xbfc>
   86270:	008dc83a 	sub	r6,zero,r2
   86274:	ddc09c15 	stw	r23,624(sp)
   86278:	003ef506 	br	85e50 <__svfscanf_r+0xcb0>
   8627c:	d880a417 	ldw	r2,656(sp)
   86280:	9009883a 	mov	r4,r18
   86284:	180b883a 	mov	r5,r3
   86288:	15c00017 	ldw	r23,0(r2)
   8628c:	15400104 	addi	r21,r2,4
   86290:	008a5c80 	call	8a5c8 <__isnand>
   86294:	1000311e 	bne	r2,zero,8635c <__svfscanf_r+0x11bc>
   86298:	980b883a 	mov	r5,r19
   8629c:	9009883a 	mov	r4,r18
   862a0:	008f7bc0 	call	8f7bc <__truncdfsf2>
   862a4:	b8800015 	stw	r2,0(r23)
   862a8:	003eca06 	br	85dd4 <__svfscanf_r+0xc34>
   862ac:	9000101e 	bne	r18,zero,862f0 <__svfscanf_r+0x1150>
   862b0:	a8c1c00c 	andi	r3,r21,1792
   862b4:	0081c004 	movi	r2,1792
   862b8:	18800926 	beq	r3,r2,862e0 <__svfscanf_r+0x1140>
   862bc:	e0c03fcc 	andi	r3,fp,255
   862c0:	18c0201c 	xori	r3,r3,128
   862c4:	18ffe004 	addi	r3,r3,-128
   862c8:	00800044 	movi	r2,1
   862cc:	18800226 	beq	r3,r2,862d8 <__svfscanf_r+0x1138>
   862d0:	00800104 	movi	r2,4
   862d4:	18bf7c1e 	bne	r3,r2,860c8 <__svfscanf_r+0xf28>
   862d8:	e7000044 	addi	fp,fp,1
   862dc:	003f6c06 	br	86090 <__svfscanf_r+0xef0>
   862e0:	00be1fc4 	movi	r2,-1921
   862e4:	a8aa703a 	and	r21,r21,r2
   862e8:	04800044 	movi	r18,1
   862ec:	003f6806 	br	86090 <__svfscanf_r+0xef0>
   862f0:	00800084 	movi	r2,2
   862f4:	90bff11e 	bne	r18,r2,862bc <__svfscanf_r+0x111c>
   862f8:	048000c4 	movi	r18,3
   862fc:	003f6406 	br	86090 <__svfscanf_r+0xef0>
   86300:	e0c03fcc 	andi	r3,fp,255
   86304:	18c0201c 	xori	r3,r3,128
   86308:	18ffe004 	addi	r3,r3,-128
   8630c:	1800071e 	bne	r3,zero,8632c <__svfscanf_r+0x118c>
   86310:	a8c1c00c 	andi	r3,r21,1792
   86314:	0081c004 	movi	r2,1792
   86318:	18bf6b1e 	bne	r3,r2,860c8 <__svfscanf_r+0xf28>
   8631c:	00be1fc4 	movi	r2,-1921
   86320:	a8aa703a 	and	r21,r21,r2
   86324:	07000044 	movi	fp,1
   86328:	003f5906 	br	86090 <__svfscanf_r+0xef0>
   8632c:	008000c4 	movi	r2,3
   86330:	18bfe926 	beq	r3,r2,862d8 <__svfscanf_r+0x1138>
   86334:	00800144 	movi	r2,5
   86338:	18bfe726 	beq	r3,r2,862d8 <__svfscanf_r+0x1138>
   8633c:	003f6206 	br	860c8 <__svfscanf_r+0xf28>
   86340:	e0c03fcc 	andi	r3,fp,255
   86344:	18c0201c 	xori	r3,r3,128
   86348:	18ffe004 	addi	r3,r3,-128
   8634c:	00800184 	movi	r2,6
   86350:	18bf5d1e 	bne	r3,r2,860c8 <__svfscanf_r+0xf28>
   86354:	070001c4 	movi	fp,7
   86358:	003f4d06 	br	86090 <__svfscanf_r+0xef0>
   8635c:	0009883a 	mov	r4,zero
   86360:	008a6b80 	call	8a6b8 <nanf>
   86364:	b8800015 	stw	r2,0(r23)
   86368:	003e9a06 	br	85dd4 <__svfscanf_r+0xc34>
   8636c:	a00b883a 	mov	r5,r20
   86370:	d9000404 	addi	r4,sp,16
   86374:	008a5f80 	call	8a5f8 <__sccl>
   86378:	1029883a 	mov	r20,r2
   8637c:	ad401014 	ori	r21,r21,64
   86380:	04800044 	movi	r18,1
   86384:	003c7506 	br	8555c <__svfscanf_r+0x3bc>
   86388:	01000204 	movi	r4,8
   8638c:	00800274 	movhi	r2,9
   86390:	10b08004 	addi	r2,r2,-15872
   86394:	ad400054 	ori	r21,r21,1
   86398:	048000c4 	movi	r18,3
   8639c:	d900a115 	stw	r4,644(sp)
   863a0:	d880a015 	stw	r2,640(sp)
   863a4:	003c6d06 	br	8555c <__svfscanf_r+0x3bc>
   863a8:	ad400094 	ori	r21,r21,2
   863ac:	003bd806 	br	85310 <__svfscanf_r+0x170>
   863b0:	d900a317 	ldw	r4,652(sp)
   863b4:	01400284 	movi	r5,10
   863b8:	0080ba00 	call	80ba0 <__mulsi3>
   863bc:	15c5883a 	add	r2,r2,r23
   863c0:	10bff404 	addi	r2,r2,-48
   863c4:	d880a315 	stw	r2,652(sp)
   863c8:	003bd106 	br	85310 <__svfscanf_r+0x170>
   863cc:	ad400414 	ori	r21,r21,16
   863d0:	003bcf06 	br	85310 <__svfscanf_r+0x170>
   863d4:	00800404 	movi	r2,16
   863d8:	00c00274 	movhi	r3,9
   863dc:	18f08004 	addi	r3,r3,-15872
   863e0:	ad408014 	ori	r21,r21,512
   863e4:	048000c4 	movi	r18,3
   863e8:	d880a115 	stw	r2,644(sp)
   863ec:	d8c0a015 	stw	r3,640(sp)
   863f0:	003c5a06 	br	8555c <__svfscanf_r+0x3bc>
   863f4:	00c00284 	movi	r3,10
   863f8:	01000274 	movhi	r4,9
   863fc:	21308004 	addi	r4,r4,-15872
   86400:	048000c4 	movi	r18,3
   86404:	d8c0a115 	stw	r3,644(sp)
   86408:	d900a015 	stw	r4,640(sp)
   8640c:	003c5306 	br	8555c <__svfscanf_r+0x3bc>
   86410:	00c00234 	movhi	r3,8
   86414:	18cbfb04 	addi	r3,r3,12268
   86418:	048000c4 	movi	r18,3
   8641c:	d8c0a015 	stw	r3,640(sp)
   86420:	d800a115 	stw	zero,644(sp)
   86424:	003c4d06 	br	8555c <__svfscanf_r+0x3bc>
   86428:	d8c0a117 	ldw	r3,644(sp)
   8642c:	18c5883a 	add	r2,r3,r3
   86430:	00c00274 	movhi	r3,9
   86434:	18d07284 	addi	r3,r3,16842
   86438:	10c5883a 	add	r2,r2,r3
   8643c:	1080000f 	ldh	r2,0(r2)
   86440:	00fd1fc4 	movi	r3,-2945
   86444:	90e4703a 	and	r18,r18,r3
   86448:	d880a115 	stw	r2,644(sp)
   8644c:	003de806 	br	85bf0 <__svfscanf_r+0xa50>
   86450:	d900a117 	ldw	r4,644(sp)
   86454:	00c00274 	movhi	r3,9
   86458:	18d07284 	addi	r3,r3,16842
   8645c:	2105883a 	add	r2,r4,r4
   86460:	10c5883a 	add	r2,r2,r3
   86464:	1080000f 	ldh	r2,0(r2)
   86468:	00c00204 	movi	r3,8
   8646c:	d880a115 	stw	r2,644(sp)
   86470:	18bd870e 	bge	r3,r2,85a90 <__svfscanf_r+0x8f0>
   86474:	00bd1fc4 	movi	r2,-2945
   86478:	90a4703a 	and	r18,r18,r2
   8647c:	003ddc06 	br	85bf0 <__svfscanf_r+0xa50>
   86480:	d8c0a117 	ldw	r3,644(sp)
   86484:	00800284 	movi	r2,10
   86488:	10fffa16 	blt	r2,r3,86474 <__svfscanf_r+0x12d4>
   8648c:	003d8006 	br	85a90 <__svfscanf_r+0x8f0>
   86490:	90c1800c 	andi	r3,r18,1536
   86494:	00808004 	movi	r2,512
   86498:	18bd7d1e 	bne	r3,r2,85a90 <__svfscanf_r+0x8f0>
   8649c:	00bf7fc4 	movi	r2,-513
   864a0:	9084703a 	and	r2,r18,r2
   864a4:	01000404 	movi	r4,16
   864a8:	14814014 	ori	r18,r2,1280
   864ac:	d900a115 	stw	r4,644(sp)
   864b0:	003dcf06 	br	85bf0 <__svfscanf_r+0xa50>
   864b4:	04800104 	movi	r18,4
   864b8:	003c2806 	br	8555c <__svfscanf_r+0x3bc>
   864bc:	ad401014 	ori	r21,r21,64
   864c0:	0025883a 	mov	r18,zero
   864c4:	003c2506 	br	8555c <__svfscanf_r+0x3bc>
   864c8:	ad400114 	ori	r21,r21,4
   864cc:	003b9006 	br	85310 <__svfscanf_r+0x170>
   864d0:	0027883a 	mov	r19,zero
   864d4:	003cac06 	br	85788 <__svfscanf_r+0x5e8>
   864d8:	903d5226 	beq	r18,zero,85a24 <__svfscanf_r+0x884>
   864dc:	94bfffc4 	addi	r18,r18,-1
   864e0:	d8c04404 	addi	r3,sp,272
   864e4:	1c85883a 	add	r2,r3,r18
   864e8:	11400003 	ldbu	r5,0(r2)
   864ec:	b009883a 	mov	r4,r22
   864f0:	800d883a 	mov	r6,r16
   864f4:	008c8300 	call	8c830 <_ungetc_r>
   864f8:	003ff706 	br	864d8 <__svfscanf_r+0x1338>
   864fc:	00bfff84 	movi	r2,-2
   86500:	18bd361e 	bne	r3,r2,859dc <__svfscanf_r+0x83c>
   86504:	003d4006 	br	85a08 <__svfscanf_r+0x868>
   86508:	d900a417 	ldw	r4,656(sp)
   8650c:	25400017 	ldw	r21,0(r4)
   86510:	21000104 	addi	r4,r4,4
   86514:	d900a415 	stw	r4,656(sp)
   86518:	003d0606 	br	85934 <__svfscanf_r+0x794>
   8651c:	983b5526 	beq	r19,zero,85274 <__svfscanf_r+0xd4>
   86520:	8ce3883a 	add	r17,r17,r19
   86524:	003b3106 	br	851ec <__svfscanf_r+0x4c>
   86528:	00bfff84 	movi	r2,-2
   8652c:	18bc621e 	bne	r3,r2,856b8 <__svfscanf_r+0x518>
   86530:	003c6906 	br	856d8 <__svfscanf_r+0x538>
   86534:	b009883a 	mov	r4,r22
   86538:	800b883a 	mov	r5,r16
   8653c:	0082aa40 	call	82aa4 <__srefill_r>
   86540:	103c6726 	beq	r2,zero,856e0 <__svfscanf_r+0x540>
   86544:	903b6b1e 	bne	r18,zero,852f4 <__svfscanf_r+0x154>
   86548:	a83b281e 	bne	r21,zero,851ec <__svfscanf_r+0x4c>
   8654c:	d8c0a217 	ldw	r3,648(sp)
   86550:	18c00044 	addi	r3,r3,1
   86554:	d8c0a215 	stw	r3,648(sp)
   86558:	003b2406 	br	851ec <__svfscanf_r+0x4c>
   8655c:	8080030b 	ldhu	r2,12(r16)
   86560:	1080100c 	andi	r2,r2,64
   86564:	103b4326 	beq	r2,zero,85274 <__svfscanf_r+0xd4>
   86568:	003b6406 	br	852fc <__svfscanf_r+0x15c>
   8656c:	d8c0a417 	ldw	r3,656(sp)
   86570:	1cc00017 	ldw	r19,0(r3)
   86574:	18c00104 	addi	r3,r3,4
   86578:	d8c0a415 	stw	r3,656(sp)
   8657c:	003c2906 	br	85624 <__svfscanf_r+0x484>
   86580:	00800204 	movi	r2,8
   86584:	00c00274 	movhi	r3,9
   86588:	18f08004 	addi	r3,r3,-15872
   8658c:	048000c4 	movi	r18,3
   86590:	d880a115 	stw	r2,644(sp)
   86594:	d8c0a015 	stw	r3,640(sp)
   86598:	003bf006 	br	8555c <__svfscanf_r+0x3bc>
   8659c:	04800084 	movi	r18,2
   865a0:	003bee06 	br	8555c <__svfscanf_r+0x3bc>
   865a4:	01000404 	movi	r4,16
   865a8:	00800274 	movhi	r2,9
   865ac:	10b08004 	addi	r2,r2,-15872
   865b0:	ad408814 	ori	r21,r21,544
   865b4:	048000c4 	movi	r18,3
   865b8:	d900a115 	stw	r4,644(sp)
   865bc:	d880a015 	stw	r2,640(sp)
   865c0:	003be606 	br	8555c <__svfscanf_r+0x3bc>
   865c4:	a880040c 	andi	r2,r21,16
   865c8:	103b081e 	bne	r2,zero,851ec <__svfscanf_r+0x4c>
   865cc:	a880010c 	andi	r2,r21,4
   865d0:	10004e26 	beq	r2,zero,8670c <__svfscanf_r+0x156c>
   865d4:	d8c0a417 	ldw	r3,656(sp)
   865d8:	18800017 	ldw	r2,0(r3)
   865dc:	18c00104 	addi	r3,r3,4
   865e0:	d8c0a415 	stw	r3,656(sp)
   865e4:	1440000d 	sth	r17,0(r2)
   865e8:	003b0006 	br	851ec <__svfscanf_r+0x4c>
   865ec:	d880a417 	ldw	r2,656(sp)
   865f0:	dd400404 	addi	r21,sp,16
   865f4:	14800017 	ldw	r18,0(r2)
   865f8:	9027883a 	mov	r19,r18
   865fc:	81000017 	ldw	r4,0(r16)
   86600:	20800003 	ldbu	r2,0(r4)
   86604:	a885883a 	add	r2,r21,r2
   86608:	10c00007 	ldb	r3,0(r2)
   8660c:	18001426 	beq	r3,zero,86660 <__svfscanf_r+0x14c0>
   86610:	d8c0a317 	ldw	r3,652(sp)
   86614:	80800117 	ldw	r2,4(r16)
   86618:	21800044 	addi	r6,r4,1
   8661c:	18ffffc4 	addi	r3,r3,-1
   86620:	d8c0a315 	stw	r3,652(sp)
   86624:	10ffffc4 	addi	r3,r2,-1
   86628:	80c00115 	stw	r3,4(r16)
   8662c:	20800003 	ldbu	r2,0(r4)
   86630:	90800005 	stb	r2,0(r18)
   86634:	d900a317 	ldw	r4,652(sp)
   86638:	81800015 	stw	r6,0(r16)
   8663c:	94800044 	addi	r18,r18,1
   86640:	20000726 	beq	r4,zero,86660 <__svfscanf_r+0x14c0>
   86644:	80800117 	ldw	r2,4(r16)
   86648:	00bfec16 	blt	zero,r2,865fc <__svfscanf_r+0x145c>
   8664c:	b009883a 	mov	r4,r22
   86650:	800b883a 	mov	r5,r16
   86654:	0082aa40 	call	82aa4 <__srefill_r>
   86658:	103fe826 	beq	r2,zero,865fc <__svfscanf_r+0x145c>
   8665c:	9cbb2526 	beq	r19,r18,852f4 <__svfscanf_r+0x154>
   86660:	94e7c83a 	sub	r19,r18,r19
   86664:	983b0326 	beq	r19,zero,85274 <__svfscanf_r+0xd4>
   86668:	90000005 	stb	zero,0(r18)
   8666c:	d880a417 	ldw	r2,656(sp)
   86670:	d8c0a217 	ldw	r3,648(sp)
   86674:	8ce3883a 	add	r17,r17,r19
   86678:	10800104 	addi	r2,r2,4
   8667c:	18c00044 	addi	r3,r3,1
   86680:	d880a415 	stw	r2,656(sp)
   86684:	d8c0a215 	stw	r3,648(sp)
   86688:	003ad806 	br	851ec <__svfscanf_r+0x4c>
   8668c:	d900a517 	ldw	r4,660(sp)
   86690:	25faf82e 	bgeu	r4,r23,85274 <__svfscanf_r+0xd4>
   86694:	bdffffc4 	addi	r23,r23,-1
   86698:	b9400007 	ldb	r5,0(r23)
   8669c:	b009883a 	mov	r4,r22
   866a0:	800d883a 	mov	r6,r16
   866a4:	008c8300 	call	8c830 <_ungetc_r>
   866a8:	d8c0a517 	ldw	r3,660(sp)
   866ac:	1dfff936 	bltu	r3,r23,86694 <__svfscanf_r+0x14f4>
   866b0:	003af006 	br	85274 <__svfscanf_r+0xd4>
   866b4:	a880040c 	andi	r2,r21,16
   866b8:	10002d26 	beq	r2,zero,86770 <__svfscanf_r+0x15d0>
   866bc:	0025883a 	mov	r18,zero
   866c0:	00000906 	br	866e8 <__svfscanf_r+0x1548>
   866c4:	80c00117 	ldw	r3,4(r16)
   866c8:	d880a317 	ldw	r2,652(sp)
   866cc:	29800044 	addi	r6,r5,1
   866d0:	18ffffc4 	addi	r3,r3,-1
   866d4:	94800044 	addi	r18,r18,1
   866d8:	81800015 	stw	r6,0(r16)
   866dc:	80c00115 	stw	r3,4(r16)
   866e0:	14800826 	beq	r2,r18,86704 <__svfscanf_r+0x1564>
   866e4:	00c0120e 	bge	zero,r3,86730 <__svfscanf_r+0x1590>
   866e8:	81400017 	ldw	r5,0(r16)
   866ec:	98800017 	ldw	r2,0(r19)
   866f0:	28c00003 	ldbu	r3,0(r5)
   866f4:	1887883a 	add	r3,r3,r2
   866f8:	19000003 	ldbu	r4,0(r3)
   866fc:	2100020c 	andi	r4,r4,8
   86700:	203ff026 	beq	r4,zero,866c4 <__svfscanf_r+0x1524>
   86704:	8ca3883a 	add	r17,r17,r18
   86708:	003ab806 	br	851ec <__svfscanf_r+0x4c>
   8670c:	a880004c 	andi	r2,r21,1
   86710:	1005003a 	cmpeq	r2,r2,zero
   86714:	10000b1e 	bne	r2,zero,86744 <__svfscanf_r+0x15a4>
   86718:	d900a417 	ldw	r4,656(sp)
   8671c:	20800017 	ldw	r2,0(r4)
   86720:	21000104 	addi	r4,r4,4
   86724:	d900a415 	stw	r4,656(sp)
   86728:	14400015 	stw	r17,0(r2)
   8672c:	003aaf06 	br	851ec <__svfscanf_r+0x4c>
   86730:	b009883a 	mov	r4,r22
   86734:	800b883a 	mov	r5,r16
   86738:	0082aa40 	call	82aa4 <__srefill_r>
   8673c:	103fea26 	beq	r2,zero,866e8 <__svfscanf_r+0x1548>
   86740:	003ff006 	br	86704 <__svfscanf_r+0x1564>
   86744:	a880008c 	andi	r2,r21,2
   86748:	10002c26 	beq	r2,zero,867fc <__svfscanf_r+0x165c>
   8674c:	d8c0a417 	ldw	r3,656(sp)
   86750:	d900a417 	ldw	r4,656(sp)
   86754:	18800017 	ldw	r2,0(r3)
   86758:	8807d7fa 	srai	r3,r17,31
   8675c:	21000104 	addi	r4,r4,4
   86760:	d900a415 	stw	r4,656(sp)
   86764:	14400015 	stw	r17,0(r2)
   86768:	10c00115 	stw	r3,4(r2)
   8676c:	003a9f06 	br	851ec <__svfscanf_r+0x4c>
   86770:	d8c0a417 	ldw	r3,656(sp)
   86774:	1d400017 	ldw	r21,0(r3)
   86778:	a825883a 	mov	r18,r21
   8677c:	00000e06 	br	867b8 <__svfscanf_r+0x1618>
   86780:	80800117 	ldw	r2,4(r16)
   86784:	d900a317 	ldw	r4,652(sp)
   86788:	29800044 	addi	r6,r5,1
   8678c:	10ffffc4 	addi	r3,r2,-1
   86790:	213fffc4 	addi	r4,r4,-1
   86794:	d900a315 	stw	r4,652(sp)
   86798:	80c00115 	stw	r3,4(r16)
   8679c:	28800003 	ldbu	r2,0(r5)
   867a0:	90800005 	stb	r2,0(r18)
   867a4:	81800015 	stw	r6,0(r16)
   867a8:	94800044 	addi	r18,r18,1
   867ac:	20000926 	beq	r4,zero,867d4 <__svfscanf_r+0x1634>
   867b0:	80800117 	ldw	r2,4(r16)
   867b4:	0080170e 	bge	zero,r2,86814 <__svfscanf_r+0x1674>
   867b8:	81400017 	ldw	r5,0(r16)
   867bc:	98800017 	ldw	r2,0(r19)
   867c0:	28c00003 	ldbu	r3,0(r5)
   867c4:	1887883a 	add	r3,r3,r2
   867c8:	19000003 	ldbu	r4,0(r3)
   867cc:	2100020c 	andi	r4,r4,8
   867d0:	203feb26 	beq	r4,zero,86780 <__svfscanf_r+0x15e0>
   867d4:	9545c83a 	sub	r2,r18,r21
   867d8:	d8c0a217 	ldw	r3,648(sp)
   867dc:	88a3883a 	add	r17,r17,r2
   867e0:	d880a417 	ldw	r2,656(sp)
   867e4:	18c00044 	addi	r3,r3,1
   867e8:	d8c0a215 	stw	r3,648(sp)
   867ec:	10800104 	addi	r2,r2,4
   867f0:	d880a415 	stw	r2,656(sp)
   867f4:	90000005 	stb	zero,0(r18)
   867f8:	003a7c06 	br	851ec <__svfscanf_r+0x4c>
   867fc:	d8c0a417 	ldw	r3,656(sp)
   86800:	18800017 	ldw	r2,0(r3)
   86804:	18c00104 	addi	r3,r3,4
   86808:	d8c0a415 	stw	r3,656(sp)
   8680c:	14400015 	stw	r17,0(r2)
   86810:	003a7606 	br	851ec <__svfscanf_r+0x4c>
   86814:	b009883a 	mov	r4,r22
   86818:	800b883a 	mov	r5,r16
   8681c:	0082aa40 	call	82aa4 <__srefill_r>
   86820:	103fe526 	beq	r2,zero,867b8 <__svfscanf_r+0x1618>
   86824:	003feb06 	br	867d4 <__svfscanf_r+0x1634>

00086828 <__svfscanf>:
   86828:	00800274 	movhi	r2,9
   8682c:	1098bc04 	addi	r2,r2,25328
   86830:	2013883a 	mov	r9,r4
   86834:	11000017 	ldw	r4,0(r2)
   86838:	2805883a 	mov	r2,r5
   8683c:	300f883a 	mov	r7,r6
   86840:	480b883a 	mov	r5,r9
   86844:	100d883a 	mov	r6,r2
   86848:	00851a01 	jmpi	851a0 <__svfscanf_r>

0008684c <_vfscanf_r>:
   8684c:	defffb04 	addi	sp,sp,-20
   86850:	dcc00315 	stw	r19,12(sp)
   86854:	dc800215 	stw	r18,8(sp)
   86858:	dc400115 	stw	r17,4(sp)
   8685c:	dc000015 	stw	r16,0(sp)
   86860:	dfc00415 	stw	ra,16(sp)
   86864:	2021883a 	mov	r16,r4
   86868:	2823883a 	mov	r17,r5
   8686c:	3025883a 	mov	r18,r6
   86870:	3827883a 	mov	r19,r7
   86874:	20000226 	beq	r4,zero,86880 <_vfscanf_r+0x34>
   86878:	20800e17 	ldw	r2,56(r4)
   8687c:	10000b26 	beq	r2,zero,868ac <_vfscanf_r+0x60>
   86880:	8009883a 	mov	r4,r16
   86884:	880b883a 	mov	r5,r17
   86888:	900d883a 	mov	r6,r18
   8688c:	980f883a 	mov	r7,r19
   86890:	dfc00417 	ldw	ra,16(sp)
   86894:	dcc00317 	ldw	r19,12(sp)
   86898:	dc800217 	ldw	r18,8(sp)
   8689c:	dc400117 	ldw	r17,4(sp)
   868a0:	dc000017 	ldw	r16,0(sp)
   868a4:	dec00504 	addi	sp,sp,20
   868a8:	00851a01 	jmpi	851a0 <__svfscanf_r>
   868ac:	00885dc0 	call	885dc <__sinit>
   868b0:	003ff306 	br	86880 <_vfscanf_r+0x34>

000868b4 <vfscanf>:
   868b4:	defffb04 	addi	sp,sp,-20
   868b8:	dcc00315 	stw	r19,12(sp)
   868bc:	04c00274 	movhi	r19,9
   868c0:	9cd8bc04 	addi	r19,r19,25328
   868c4:	98c00017 	ldw	r3,0(r19)
   868c8:	dc800215 	stw	r18,8(sp)
   868cc:	dc400115 	stw	r17,4(sp)
   868d0:	dc000015 	stw	r16,0(sp)
   868d4:	dfc00415 	stw	ra,16(sp)
   868d8:	2021883a 	mov	r16,r4
   868dc:	2823883a 	mov	r17,r5
   868e0:	3025883a 	mov	r18,r6
   868e4:	18000326 	beq	r3,zero,868f4 <vfscanf+0x40>
   868e8:	18800e17 	ldw	r2,56(r3)
   868ec:	1809883a 	mov	r4,r3
   868f0:	10000b26 	beq	r2,zero,86920 <vfscanf+0x6c>
   868f4:	99000017 	ldw	r4,0(r19)
   868f8:	800b883a 	mov	r5,r16
   868fc:	880d883a 	mov	r6,r17
   86900:	900f883a 	mov	r7,r18
   86904:	dfc00417 	ldw	ra,16(sp)
   86908:	dcc00317 	ldw	r19,12(sp)
   8690c:	dc800217 	ldw	r18,8(sp)
   86910:	dc400117 	ldw	r17,4(sp)
   86914:	dc000017 	ldw	r16,0(sp)
   86918:	dec00504 	addi	sp,sp,20
   8691c:	00851a01 	jmpi	851a0 <__svfscanf_r>
   86920:	00885dc0 	call	885dc <__sinit>
   86924:	003ff306 	br	868f4 <vfscanf+0x40>

00086928 <_write_r>:
   86928:	defffd04 	addi	sp,sp,-12
   8692c:	dc000015 	stw	r16,0(sp)
   86930:	04000274 	movhi	r16,9
   86934:	841fb904 	addi	r16,r16,32484
   86938:	dc400115 	stw	r17,4(sp)
   8693c:	80000015 	stw	zero,0(r16)
   86940:	2023883a 	mov	r17,r4
   86944:	2809883a 	mov	r4,r5
   86948:	300b883a 	mov	r5,r6
   8694c:	380d883a 	mov	r6,r7
   86950:	dfc00215 	stw	ra,8(sp)
   86954:	0090ef40 	call	90ef4 <write>
   86958:	1007883a 	mov	r3,r2
   8695c:	00bfffc4 	movi	r2,-1
   86960:	18800626 	beq	r3,r2,8697c <_write_r+0x54>
   86964:	1805883a 	mov	r2,r3
   86968:	dfc00217 	ldw	ra,8(sp)
   8696c:	dc400117 	ldw	r17,4(sp)
   86970:	dc000017 	ldw	r16,0(sp)
   86974:	dec00304 	addi	sp,sp,12
   86978:	f800283a 	ret
   8697c:	80800017 	ldw	r2,0(r16)
   86980:	103ff826 	beq	r2,zero,86964 <_write_r+0x3c>
   86984:	88800015 	stw	r2,0(r17)
   86988:	1805883a 	mov	r2,r3
   8698c:	dfc00217 	ldw	ra,8(sp)
   86990:	dc400117 	ldw	r17,4(sp)
   86994:	dc000017 	ldw	r16,0(sp)
   86998:	dec00304 	addi	sp,sp,12
   8699c:	f800283a 	ret

000869a0 <__swsetup_r>:
   869a0:	00800274 	movhi	r2,9
   869a4:	1098bc04 	addi	r2,r2,25328
   869a8:	10c00017 	ldw	r3,0(r2)
   869ac:	defffd04 	addi	sp,sp,-12
   869b0:	dc400115 	stw	r17,4(sp)
   869b4:	dc000015 	stw	r16,0(sp)
   869b8:	dfc00215 	stw	ra,8(sp)
   869bc:	2023883a 	mov	r17,r4
   869c0:	2821883a 	mov	r16,r5
   869c4:	18000226 	beq	r3,zero,869d0 <__swsetup_r+0x30>
   869c8:	18800e17 	ldw	r2,56(r3)
   869cc:	10001f26 	beq	r2,zero,86a4c <__swsetup_r+0xac>
   869d0:	8100030b 	ldhu	r4,12(r16)
   869d4:	2080020c 	andi	r2,r4,8
   869d8:	10002826 	beq	r2,zero,86a7c <__swsetup_r+0xdc>
   869dc:	81400417 	ldw	r5,16(r16)
   869e0:	28001d26 	beq	r5,zero,86a58 <__swsetup_r+0xb8>
   869e4:	2080004c 	andi	r2,r4,1
   869e8:	1005003a 	cmpeq	r2,r2,zero
   869ec:	10000b26 	beq	r2,zero,86a1c <__swsetup_r+0x7c>
   869f0:	2080008c 	andi	r2,r4,2
   869f4:	10001226 	beq	r2,zero,86a40 <__swsetup_r+0xa0>
   869f8:	0005883a 	mov	r2,zero
   869fc:	80800215 	stw	r2,8(r16)
   86a00:	28000b26 	beq	r5,zero,86a30 <__swsetup_r+0x90>
   86a04:	0005883a 	mov	r2,zero
   86a08:	dfc00217 	ldw	ra,8(sp)
   86a0c:	dc400117 	ldw	r17,4(sp)
   86a10:	dc000017 	ldw	r16,0(sp)
   86a14:	dec00304 	addi	sp,sp,12
   86a18:	f800283a 	ret
   86a1c:	80800517 	ldw	r2,20(r16)
   86a20:	80000215 	stw	zero,8(r16)
   86a24:	0085c83a 	sub	r2,zero,r2
   86a28:	80800615 	stw	r2,24(r16)
   86a2c:	283ff51e 	bne	r5,zero,86a04 <__swsetup_r+0x64>
   86a30:	2080200c 	andi	r2,r4,128
   86a34:	103ff326 	beq	r2,zero,86a04 <__swsetup_r+0x64>
   86a38:	00bfffc4 	movi	r2,-1
   86a3c:	003ff206 	br	86a08 <__swsetup_r+0x68>
   86a40:	80800517 	ldw	r2,20(r16)
   86a44:	80800215 	stw	r2,8(r16)
   86a48:	003fed06 	br	86a00 <__swsetup_r+0x60>
   86a4c:	1809883a 	mov	r4,r3
   86a50:	00885dc0 	call	885dc <__sinit>
   86a54:	003fde06 	br	869d0 <__swsetup_r+0x30>
   86a58:	20c0a00c 	andi	r3,r4,640
   86a5c:	00808004 	movi	r2,512
   86a60:	18bfe026 	beq	r3,r2,869e4 <__swsetup_r+0x44>
   86a64:	8809883a 	mov	r4,r17
   86a68:	800b883a 	mov	r5,r16
   86a6c:	00817d40 	call	817d4 <__smakebuf_r>
   86a70:	8100030b 	ldhu	r4,12(r16)
   86a74:	81400417 	ldw	r5,16(r16)
   86a78:	003fda06 	br	869e4 <__swsetup_r+0x44>
   86a7c:	2080040c 	andi	r2,r4,16
   86a80:	103fed26 	beq	r2,zero,86a38 <__swsetup_r+0x98>
   86a84:	2080010c 	andi	r2,r4,4
   86a88:	10001226 	beq	r2,zero,86ad4 <__swsetup_r+0x134>
   86a8c:	81400c17 	ldw	r5,48(r16)
   86a90:	28000526 	beq	r5,zero,86aa8 <__swsetup_r+0x108>
   86a94:	80801004 	addi	r2,r16,64
   86a98:	28800226 	beq	r5,r2,86aa4 <__swsetup_r+0x104>
   86a9c:	8809883a 	mov	r4,r17
   86aa0:	0088c800 	call	88c80 <_free_r>
   86aa4:	80000c15 	stw	zero,48(r16)
   86aa8:	8080030b 	ldhu	r2,12(r16)
   86aac:	81400417 	ldw	r5,16(r16)
   86ab0:	80000115 	stw	zero,4(r16)
   86ab4:	10bff6cc 	andi	r2,r2,65499
   86ab8:	8080030d 	sth	r2,12(r16)
   86abc:	81400015 	stw	r5,0(r16)
   86ac0:	8080030b 	ldhu	r2,12(r16)
   86ac4:	10800214 	ori	r2,r2,8
   86ac8:	113fffcc 	andi	r4,r2,65535
   86acc:	8080030d 	sth	r2,12(r16)
   86ad0:	003fc306 	br	869e0 <__swsetup_r+0x40>
   86ad4:	81400417 	ldw	r5,16(r16)
   86ad8:	003ff906 	br	86ac0 <__swsetup_r+0x120>

00086adc <_close_r>:
   86adc:	defffd04 	addi	sp,sp,-12
   86ae0:	dc000015 	stw	r16,0(sp)
   86ae4:	04000274 	movhi	r16,9
   86ae8:	841fb904 	addi	r16,r16,32484
   86aec:	dc400115 	stw	r17,4(sp)
   86af0:	80000015 	stw	zero,0(r16)
   86af4:	2023883a 	mov	r17,r4
   86af8:	2809883a 	mov	r4,r5
   86afc:	dfc00215 	stw	ra,8(sp)
   86b00:	00902540 	call	90254 <close>
   86b04:	1007883a 	mov	r3,r2
   86b08:	00bfffc4 	movi	r2,-1
   86b0c:	18800626 	beq	r3,r2,86b28 <_close_r+0x4c>
   86b10:	1805883a 	mov	r2,r3
   86b14:	dfc00217 	ldw	ra,8(sp)
   86b18:	dc400117 	ldw	r17,4(sp)
   86b1c:	dc000017 	ldw	r16,0(sp)
   86b20:	dec00304 	addi	sp,sp,12
   86b24:	f800283a 	ret
   86b28:	80800017 	ldw	r2,0(r16)
   86b2c:	103ff826 	beq	r2,zero,86b10 <_close_r+0x34>
   86b30:	88800015 	stw	r2,0(r17)
   86b34:	1805883a 	mov	r2,r3
   86b38:	dfc00217 	ldw	ra,8(sp)
   86b3c:	dc400117 	ldw	r17,4(sp)
   86b40:	dc000017 	ldw	r16,0(sp)
   86b44:	dec00304 	addi	sp,sp,12
   86b48:	f800283a 	ret

00086b4c <quorem>:
   86b4c:	28c00417 	ldw	r3,16(r5)
   86b50:	20800417 	ldw	r2,16(r4)
   86b54:	defff104 	addi	sp,sp,-60
   86b58:	dfc00e15 	stw	ra,56(sp)
   86b5c:	df000d15 	stw	fp,52(sp)
   86b60:	ddc00c15 	stw	r23,48(sp)
   86b64:	dd800b15 	stw	r22,44(sp)
   86b68:	dd400a15 	stw	r21,40(sp)
   86b6c:	dd000915 	stw	r20,36(sp)
   86b70:	dcc00815 	stw	r19,32(sp)
   86b74:	dc800715 	stw	r18,28(sp)
   86b78:	dc400615 	stw	r17,24(sp)
   86b7c:	dc000515 	stw	r16,20(sp)
   86b80:	d9000315 	stw	r4,12(sp)
   86b84:	d9400415 	stw	r5,16(sp)
   86b88:	10c07f16 	blt	r2,r3,86d88 <quorem+0x23c>
   86b8c:	1d3fffc4 	addi	r20,r3,-1
   86b90:	d8c00417 	ldw	r3,16(sp)
   86b94:	d9000317 	ldw	r4,12(sp)
   86b98:	a505883a 	add	r2,r20,r20
   86b9c:	1085883a 	add	r2,r2,r2
   86ba0:	1cc00504 	addi	r19,r3,20
   86ba4:	25c00504 	addi	r23,r4,20
   86ba8:	98ad883a 	add	r22,r19,r2
   86bac:	15c7883a 	add	r3,r2,r23
   86bb0:	b1400017 	ldw	r5,0(r22)
   86bb4:	19000017 	ldw	r4,0(r3)
   86bb8:	d8c00015 	stw	r3,0(sp)
   86bbc:	29400044 	addi	r5,r5,1
   86bc0:	d9000215 	stw	r4,8(sp)
   86bc4:	0080b900 	call	80b90 <__udivsi3>
   86bc8:	1039883a 	mov	fp,r2
   86bcc:	10003d1e 	bne	r2,zero,86cc4 <quorem+0x178>
   86bd0:	d9400417 	ldw	r5,16(sp)
   86bd4:	d9000317 	ldw	r4,12(sp)
   86bd8:	00895e00 	call	895e0 <__mcmp>
   86bdc:	10002c16 	blt	r2,zero,86c90 <quorem+0x144>
   86be0:	e7000044 	addi	fp,fp,1
   86be4:	b80f883a 	mov	r7,r23
   86be8:	0011883a 	mov	r8,zero
   86bec:	0009883a 	mov	r4,zero
   86bf0:	99400017 	ldw	r5,0(r19)
   86bf4:	38c00017 	ldw	r3,0(r7)
   86bf8:	9cc00104 	addi	r19,r19,4
   86bfc:	28bfffcc 	andi	r2,r5,65535
   86c00:	2085883a 	add	r2,r4,r2
   86c04:	11bfffcc 	andi	r6,r2,65535
   86c08:	193fffcc 	andi	r4,r3,65535
   86c0c:	1004d43a 	srli	r2,r2,16
   86c10:	280ad43a 	srli	r5,r5,16
   86c14:	2189c83a 	sub	r4,r4,r6
   86c18:	2209883a 	add	r4,r4,r8
   86c1c:	1806d43a 	srli	r3,r3,16
   86c20:	288b883a 	add	r5,r5,r2
   86c24:	200dd43a 	srai	r6,r4,16
   86c28:	28bfffcc 	andi	r2,r5,65535
   86c2c:	1887c83a 	sub	r3,r3,r2
   86c30:	1987883a 	add	r3,r3,r6
   86c34:	3900000d 	sth	r4,0(r7)
   86c38:	38c0008d 	sth	r3,2(r7)
   86c3c:	2808d43a 	srli	r4,r5,16
   86c40:	39c00104 	addi	r7,r7,4
   86c44:	1811d43a 	srai	r8,r3,16
   86c48:	b4ffe92e 	bgeu	r22,r19,86bf0 <quorem+0xa4>
   86c4c:	a505883a 	add	r2,r20,r20
   86c50:	1085883a 	add	r2,r2,r2
   86c54:	b885883a 	add	r2,r23,r2
   86c58:	10c00017 	ldw	r3,0(r2)
   86c5c:	18000c1e 	bne	r3,zero,86c90 <quorem+0x144>
   86c60:	113fff04 	addi	r4,r2,-4
   86c64:	b900082e 	bgeu	r23,r4,86c88 <quorem+0x13c>
   86c68:	10bfff17 	ldw	r2,-4(r2)
   86c6c:	10000326 	beq	r2,zero,86c7c <quorem+0x130>
   86c70:	00000506 	br	86c88 <quorem+0x13c>
   86c74:	20800017 	ldw	r2,0(r4)
   86c78:	1000031e 	bne	r2,zero,86c88 <quorem+0x13c>
   86c7c:	213fff04 	addi	r4,r4,-4
   86c80:	a53fffc4 	addi	r20,r20,-1
   86c84:	b93ffb36 	bltu	r23,r4,86c74 <quorem+0x128>
   86c88:	d9000317 	ldw	r4,12(sp)
   86c8c:	25000415 	stw	r20,16(r4)
   86c90:	e005883a 	mov	r2,fp
   86c94:	dfc00e17 	ldw	ra,56(sp)
   86c98:	df000d17 	ldw	fp,52(sp)
   86c9c:	ddc00c17 	ldw	r23,48(sp)
   86ca0:	dd800b17 	ldw	r22,44(sp)
   86ca4:	dd400a17 	ldw	r21,40(sp)
   86ca8:	dd000917 	ldw	r20,36(sp)
   86cac:	dcc00817 	ldw	r19,32(sp)
   86cb0:	dc800717 	ldw	r18,28(sp)
   86cb4:	dc400617 	ldw	r17,24(sp)
   86cb8:	dc000517 	ldw	r16,20(sp)
   86cbc:	dec00f04 	addi	sp,sp,60
   86cc0:	f800283a 	ret
   86cc4:	b823883a 	mov	r17,r23
   86cc8:	9825883a 	mov	r18,r19
   86ccc:	d8000115 	stw	zero,4(sp)
   86cd0:	002b883a 	mov	r21,zero
   86cd4:	94000017 	ldw	r16,0(r18)
   86cd8:	e009883a 	mov	r4,fp
   86cdc:	94800104 	addi	r18,r18,4
   86ce0:	817fffcc 	andi	r5,r16,65535
   86ce4:	0080ba00 	call	80ba0 <__mulsi3>
   86ce8:	800ad43a 	srli	r5,r16,16
   86cec:	e009883a 	mov	r4,fp
   86cf0:	a8a1883a 	add	r16,r21,r2
   86cf4:	0080ba00 	call	80ba0 <__mulsi3>
   86cf8:	89000017 	ldw	r4,0(r17)
   86cfc:	80ffffcc 	andi	r3,r16,65535
   86d00:	8020d43a 	srli	r16,r16,16
   86d04:	217fffcc 	andi	r5,r4,65535
   86d08:	28cbc83a 	sub	r5,r5,r3
   86d0c:	d8c00117 	ldw	r3,4(sp)
   86d10:	2008d43a 	srli	r4,r4,16
   86d14:	1405883a 	add	r2,r2,r16
   86d18:	28cb883a 	add	r5,r5,r3
   86d1c:	280dd43a 	srai	r6,r5,16
   86d20:	10ffffcc 	andi	r3,r2,65535
   86d24:	20c9c83a 	sub	r4,r4,r3
   86d28:	2189883a 	add	r4,r4,r6
   86d2c:	8900008d 	sth	r4,2(r17)
   86d30:	2009d43a 	srai	r4,r4,16
   86d34:	8940000d 	sth	r5,0(r17)
   86d38:	102ad43a 	srli	r21,r2,16
   86d3c:	8c400104 	addi	r17,r17,4
   86d40:	d9000115 	stw	r4,4(sp)
   86d44:	b4bfe32e 	bgeu	r22,r18,86cd4 <quorem+0x188>
   86d48:	d9000217 	ldw	r4,8(sp)
   86d4c:	203fa01e 	bne	r4,zero,86bd0 <quorem+0x84>
   86d50:	d8800017 	ldw	r2,0(sp)
   86d54:	10ffff04 	addi	r3,r2,-4
   86d58:	b8c0082e 	bgeu	r23,r3,86d7c <quorem+0x230>
   86d5c:	10bfff17 	ldw	r2,-4(r2)
   86d60:	10000326 	beq	r2,zero,86d70 <quorem+0x224>
   86d64:	00000506 	br	86d7c <quorem+0x230>
   86d68:	18800017 	ldw	r2,0(r3)
   86d6c:	1000031e 	bne	r2,zero,86d7c <quorem+0x230>
   86d70:	18ffff04 	addi	r3,r3,-4
   86d74:	a53fffc4 	addi	r20,r20,-1
   86d78:	b8fffb36 	bltu	r23,r3,86d68 <quorem+0x21c>
   86d7c:	d8c00317 	ldw	r3,12(sp)
   86d80:	1d000415 	stw	r20,16(r3)
   86d84:	003f9206 	br	86bd0 <quorem+0x84>
   86d88:	0005883a 	mov	r2,zero
   86d8c:	003fc106 	br	86c94 <quorem+0x148>

00086d90 <_dtoa_r>:
   86d90:	22001017 	ldw	r8,64(r4)
   86d94:	deffda04 	addi	sp,sp,-152
   86d98:	dd402115 	stw	r21,132(sp)
   86d9c:	dd002015 	stw	r20,128(sp)
   86da0:	dc801e15 	stw	r18,120(sp)
   86da4:	dc401d15 	stw	r17,116(sp)
   86da8:	dfc02515 	stw	ra,148(sp)
   86dac:	df002415 	stw	fp,144(sp)
   86db0:	ddc02315 	stw	r23,140(sp)
   86db4:	dd802215 	stw	r22,136(sp)
   86db8:	dcc01f15 	stw	r19,124(sp)
   86dbc:	dc001c15 	stw	r16,112(sp)
   86dc0:	d9001615 	stw	r4,88(sp)
   86dc4:	3023883a 	mov	r17,r6
   86dc8:	2829883a 	mov	r20,r5
   86dcc:	d9c01715 	stw	r7,92(sp)
   86dd0:	dc802817 	ldw	r18,160(sp)
   86dd4:	302b883a 	mov	r21,r6
   86dd8:	40000a26 	beq	r8,zero,86e04 <_dtoa_r+0x74>
   86ddc:	20801117 	ldw	r2,68(r4)
   86de0:	400b883a 	mov	r5,r8
   86de4:	40800115 	stw	r2,4(r8)
   86de8:	20c01117 	ldw	r3,68(r4)
   86dec:	00800044 	movi	r2,1
   86df0:	10c4983a 	sll	r2,r2,r3
   86df4:	40800215 	stw	r2,8(r8)
   86df8:	00894840 	call	89484 <_Bfree>
   86dfc:	d8c01617 	ldw	r3,88(sp)
   86e00:	18001015 	stw	zero,64(r3)
   86e04:	8800a316 	blt	r17,zero,87094 <_dtoa_r+0x304>
   86e08:	90000015 	stw	zero,0(r18)
   86e0c:	a8dffc2c 	andhi	r3,r21,32752
   86e10:	009ffc34 	movhi	r2,32752
   86e14:	18809126 	beq	r3,r2,8705c <_dtoa_r+0x2cc>
   86e18:	000d883a 	mov	r6,zero
   86e1c:	000f883a 	mov	r7,zero
   86e20:	a009883a 	mov	r4,r20
   86e24:	a80b883a 	mov	r5,r21
   86e28:	dd001215 	stw	r20,72(sp)
   86e2c:	dd401315 	stw	r21,76(sp)
   86e30:	008f3440 	call	8f344 <__nedf2>
   86e34:	1000171e 	bne	r2,zero,86e94 <_dtoa_r+0x104>
   86e38:	d9802717 	ldw	r6,156(sp)
   86e3c:	00800044 	movi	r2,1
   86e40:	30800015 	stw	r2,0(r6)
   86e44:	d8802917 	ldw	r2,164(sp)
   86e48:	10029b26 	beq	r2,zero,878b8 <_dtoa_r+0xb28>
   86e4c:	d9002917 	ldw	r4,164(sp)
   86e50:	00800274 	movhi	r2,9
   86e54:	10906844 	addi	r2,r2,16801
   86e58:	10ffffc4 	addi	r3,r2,-1
   86e5c:	20800015 	stw	r2,0(r4)
   86e60:	1805883a 	mov	r2,r3
   86e64:	dfc02517 	ldw	ra,148(sp)
   86e68:	df002417 	ldw	fp,144(sp)
   86e6c:	ddc02317 	ldw	r23,140(sp)
   86e70:	dd802217 	ldw	r22,136(sp)
   86e74:	dd402117 	ldw	r21,132(sp)
   86e78:	dd002017 	ldw	r20,128(sp)
   86e7c:	dcc01f17 	ldw	r19,124(sp)
   86e80:	dc801e17 	ldw	r18,120(sp)
   86e84:	dc401d17 	ldw	r17,116(sp)
   86e88:	dc001c17 	ldw	r16,112(sp)
   86e8c:	dec02604 	addi	sp,sp,152
   86e90:	f800283a 	ret
   86e94:	d9001617 	ldw	r4,88(sp)
   86e98:	d9401217 	ldw	r5,72(sp)
   86e9c:	d8800104 	addi	r2,sp,4
   86ea0:	a80d883a 	mov	r6,r21
   86ea4:	d9c00204 	addi	r7,sp,8
   86ea8:	d8800015 	stw	r2,0(sp)
   86eac:	0089ac00 	call	89ac0 <__d2b>
   86eb0:	d8800715 	stw	r2,28(sp)
   86eb4:	a804d53a 	srli	r2,r21,20
   86eb8:	1101ffcc 	andi	r4,r2,2047
   86ebc:	20008626 	beq	r4,zero,870d8 <_dtoa_r+0x348>
   86ec0:	d8c01217 	ldw	r3,72(sp)
   86ec4:	00800434 	movhi	r2,16
   86ec8:	10bfffc4 	addi	r2,r2,-1
   86ecc:	ddc00117 	ldw	r23,4(sp)
   86ed0:	a884703a 	and	r2,r21,r2
   86ed4:	1811883a 	mov	r8,r3
   86ed8:	124ffc34 	orhi	r9,r2,16368
   86edc:	25bf0044 	addi	r22,r4,-1023
   86ee0:	d8000815 	stw	zero,32(sp)
   86ee4:	0005883a 	mov	r2,zero
   86ee8:	00cffe34 	movhi	r3,16376
   86eec:	480b883a 	mov	r5,r9
   86ef0:	4009883a 	mov	r4,r8
   86ef4:	180f883a 	mov	r7,r3
   86ef8:	100d883a 	mov	r6,r2
   86efc:	008ebac0 	call	8ebac <__subdf3>
   86f00:	0218dbf4 	movhi	r8,25455
   86f04:	4210d844 	addi	r8,r8,17249
   86f08:	024ff4f4 	movhi	r9,16339
   86f0c:	4a61e9c4 	addi	r9,r9,-30809
   86f10:	480f883a 	mov	r7,r9
   86f14:	400d883a 	mov	r6,r8
   86f18:	180b883a 	mov	r5,r3
   86f1c:	1009883a 	mov	r4,r2
   86f20:	008eca00 	call	8eca0 <__muldf3>
   86f24:	0222d874 	movhi	r8,35681
   86f28:	42322cc4 	addi	r8,r8,-14157
   86f2c:	024ff1f4 	movhi	r9,16327
   86f30:	4a628a04 	addi	r9,r9,-30168
   86f34:	480f883a 	mov	r7,r9
   86f38:	400d883a 	mov	r6,r8
   86f3c:	180b883a 	mov	r5,r3
   86f40:	1009883a 	mov	r4,r2
   86f44:	008ec2c0 	call	8ec2c <__adddf3>
   86f48:	b009883a 	mov	r4,r22
   86f4c:	1021883a 	mov	r16,r2
   86f50:	1823883a 	mov	r17,r3
   86f54:	008f5ec0 	call	8f5ec <__floatsidf>
   86f58:	021427f4 	movhi	r8,20639
   86f5c:	421e7ec4 	addi	r8,r8,31227
   86f60:	024ff4f4 	movhi	r9,16339
   86f64:	4a5104c4 	addi	r9,r9,17427
   86f68:	480f883a 	mov	r7,r9
   86f6c:	400d883a 	mov	r6,r8
   86f70:	180b883a 	mov	r5,r3
   86f74:	1009883a 	mov	r4,r2
   86f78:	008eca00 	call	8eca0 <__muldf3>
   86f7c:	180f883a 	mov	r7,r3
   86f80:	880b883a 	mov	r5,r17
   86f84:	100d883a 	mov	r6,r2
   86f88:	8009883a 	mov	r4,r16
   86f8c:	008ec2c0 	call	8ec2c <__adddf3>
   86f90:	1009883a 	mov	r4,r2
   86f94:	180b883a 	mov	r5,r3
   86f98:	1021883a 	mov	r16,r2
   86f9c:	1823883a 	mov	r17,r3
   86fa0:	008f6e40 	call	8f6e4 <__fixdfsi>
   86fa4:	000d883a 	mov	r6,zero
   86fa8:	000f883a 	mov	r7,zero
   86fac:	8009883a 	mov	r4,r16
   86fb0:	880b883a 	mov	r5,r17
   86fb4:	d8800d15 	stw	r2,52(sp)
   86fb8:	008f4dc0 	call	8f4dc <__ltdf2>
   86fbc:	10031716 	blt	r2,zero,87c1c <_dtoa_r+0xe8c>
   86fc0:	d8c00d17 	ldw	r3,52(sp)
   86fc4:	00800584 	movi	r2,22
   86fc8:	10c1482e 	bgeu	r2,r3,874ec <_dtoa_r+0x75c>
   86fcc:	01000044 	movi	r4,1
   86fd0:	d9000c15 	stw	r4,48(sp)
   86fd4:	bd85c83a 	sub	r2,r23,r22
   86fd8:	11bfffc4 	addi	r6,r2,-1
   86fdc:	30030b16 	blt	r6,zero,87c0c <_dtoa_r+0xe7c>
   86fe0:	d9800a15 	stw	r6,40(sp)
   86fe4:	d8001115 	stw	zero,68(sp)
   86fe8:	d8c00d17 	ldw	r3,52(sp)
   86fec:	1802ff16 	blt	r3,zero,87bec <_dtoa_r+0xe5c>
   86ff0:	d9000a17 	ldw	r4,40(sp)
   86ff4:	d8c00915 	stw	r3,36(sp)
   86ff8:	d8001015 	stw	zero,64(sp)
   86ffc:	20c9883a 	add	r4,r4,r3
   87000:	d9000a15 	stw	r4,40(sp)
   87004:	d9001717 	ldw	r4,92(sp)
   87008:	00800244 	movi	r2,9
   8700c:	11004636 	bltu	r2,r4,87128 <_dtoa_r+0x398>
   87010:	00800144 	movi	r2,5
   87014:	11020416 	blt	r2,r4,87828 <_dtoa_r+0xa98>
   87018:	04400044 	movi	r17,1
   8701c:	d8c01717 	ldw	r3,92(sp)
   87020:	00800144 	movi	r2,5
   87024:	10c1ed36 	bltu	r2,r3,877dc <_dtoa_r+0xa4c>
   87028:	18c5883a 	add	r2,r3,r3
   8702c:	1085883a 	add	r2,r2,r2
   87030:	00c00234 	movhi	r3,8
   87034:	18dc1104 	addi	r3,r3,28740
   87038:	10c5883a 	add	r2,r2,r3
   8703c:	11000017 	ldw	r4,0(r2)
   87040:	2000683a 	jmp	r4
   87044:	00087130 	cmpltui	zero,zero,8644
   87048:	00087130 	cmpltui	zero,zero,8644
   8704c:	00087b30 	cmpltui	zero,zero,8684
   87050:	00087b08 	cmpgei	zero,zero,8684
   87054:	00087b4c 	andi	zero,zero,8685
   87058:	00087b58 	cmpnei	zero,zero,8685
   8705c:	d9002717 	ldw	r4,156(sp)
   87060:	0089c3c4 	movi	r2,9999
   87064:	20800015 	stw	r2,0(r4)
   87068:	a0001026 	beq	r20,zero,870ac <_dtoa_r+0x31c>
   8706c:	00c00274 	movhi	r3,9
   87070:	18d11f04 	addi	r3,r3,17532
   87074:	d9802917 	ldw	r6,164(sp)
   87078:	303f7926 	beq	r6,zero,86e60 <_dtoa_r+0xd0>
   8707c:	188000c7 	ldb	r2,3(r3)
   87080:	190000c4 	addi	r4,r3,3
   87084:	1000101e 	bne	r2,zero,870c8 <_dtoa_r+0x338>
   87088:	d8802917 	ldw	r2,164(sp)
   8708c:	11000015 	stw	r4,0(r2)
   87090:	003f7306 	br	86e60 <_dtoa_r+0xd0>
   87094:	00a00034 	movhi	r2,32768
   87098:	10bfffc4 	addi	r2,r2,-1
   8709c:	00c00044 	movi	r3,1
   870a0:	88aa703a 	and	r21,r17,r2
   870a4:	90c00015 	stw	r3,0(r18)
   870a8:	003f5806 	br	86e0c <_dtoa_r+0x7c>
   870ac:	00800434 	movhi	r2,16
   870b0:	10bfffc4 	addi	r2,r2,-1
   870b4:	a884703a 	and	r2,r21,r2
   870b8:	103fec1e 	bne	r2,zero,8706c <_dtoa_r+0x2dc>
   870bc:	00c00274 	movhi	r3,9
   870c0:	18d11c04 	addi	r3,r3,17520
   870c4:	003feb06 	br	87074 <_dtoa_r+0x2e4>
   870c8:	d8802917 	ldw	r2,164(sp)
   870cc:	19000204 	addi	r4,r3,8
   870d0:	11000015 	stw	r4,0(r2)
   870d4:	003f6206 	br	86e60 <_dtoa_r+0xd0>
   870d8:	ddc00117 	ldw	r23,4(sp)
   870dc:	d8800217 	ldw	r2,8(sp)
   870e0:	01000804 	movi	r4,32
   870e4:	b8c10c84 	addi	r3,r23,1074
   870e8:	18a3883a 	add	r17,r3,r2
   870ec:	2441b80e 	bge	r4,r17,877d0 <_dtoa_r+0xa40>
   870f0:	00c01004 	movi	r3,64
   870f4:	1c47c83a 	sub	r3,r3,r17
   870f8:	88bff804 	addi	r2,r17,-32
   870fc:	a8c6983a 	sll	r3,r21,r3
   87100:	a084d83a 	srl	r2,r20,r2
   87104:	1888b03a 	or	r4,r3,r2
   87108:	008f8300 	call	8f830 <__floatunsidf>
   8710c:	1011883a 	mov	r8,r2
   87110:	00bf8434 	movhi	r2,65040
   87114:	01000044 	movi	r4,1
   87118:	10d3883a 	add	r9,r2,r3
   8711c:	8dbef344 	addi	r22,r17,-1075
   87120:	d9000815 	stw	r4,32(sp)
   87124:	003f6f06 	br	86ee4 <_dtoa_r+0x154>
   87128:	d8001715 	stw	zero,92(sp)
   8712c:	04400044 	movi	r17,1
   87130:	00bfffc4 	movi	r2,-1
   87134:	00c00044 	movi	r3,1
   87138:	d8800e15 	stw	r2,56(sp)
   8713c:	d8002615 	stw	zero,152(sp)
   87140:	d8800f15 	stw	r2,60(sp)
   87144:	d8c00b15 	stw	r3,44(sp)
   87148:	1021883a 	mov	r16,r2
   8714c:	d8801617 	ldw	r2,88(sp)
   87150:	10001115 	stw	zero,68(r2)
   87154:	d8801617 	ldw	r2,88(sp)
   87158:	11401117 	ldw	r5,68(r2)
   8715c:	1009883a 	mov	r4,r2
   87160:	0089a040 	call	89a04 <_Balloc>
   87164:	d8c01617 	ldw	r3,88(sp)
   87168:	d8800515 	stw	r2,20(sp)
   8716c:	18801015 	stw	r2,64(r3)
   87170:	00800384 	movi	r2,14
   87174:	14006836 	bltu	r2,r16,87318 <_dtoa_r+0x588>
   87178:	8805003a 	cmpeq	r2,r17,zero
   8717c:	1000661e 	bne	r2,zero,87318 <_dtoa_r+0x588>
   87180:	d9000d17 	ldw	r4,52(sp)
   87184:	0102300e 	bge	zero,r4,87a48 <_dtoa_r+0xcb8>
   87188:	208003cc 	andi	r2,r4,15
   8718c:	100490fa 	slli	r2,r2,3
   87190:	2025d13a 	srai	r18,r4,4
   87194:	00c00274 	movhi	r3,9
   87198:	18d13004 	addi	r3,r3,17600
   8719c:	10c5883a 	add	r2,r2,r3
   871a0:	90c0040c 	andi	r3,r18,16
   871a4:	14000017 	ldw	r16,0(r2)
   871a8:	14400117 	ldw	r17,4(r2)
   871ac:	18036a1e 	bne	r3,zero,87f58 <_dtoa_r+0x11c8>
   871b0:	05800084 	movi	r22,2
   871b4:	90001026 	beq	r18,zero,871f8 <_dtoa_r+0x468>
   871b8:	04c00274 	movhi	r19,9
   871bc:	9cd16204 	addi	r19,r19,17800
   871c0:	9080004c 	andi	r2,r18,1
   871c4:	1005003a 	cmpeq	r2,r2,zero
   871c8:	1000081e 	bne	r2,zero,871ec <_dtoa_r+0x45c>
   871cc:	99800017 	ldw	r6,0(r19)
   871d0:	99c00117 	ldw	r7,4(r19)
   871d4:	880b883a 	mov	r5,r17
   871d8:	8009883a 	mov	r4,r16
   871dc:	008eca00 	call	8eca0 <__muldf3>
   871e0:	1021883a 	mov	r16,r2
   871e4:	b5800044 	addi	r22,r22,1
   871e8:	1823883a 	mov	r17,r3
   871ec:	9025d07a 	srai	r18,r18,1
   871f0:	9cc00204 	addi	r19,r19,8
   871f4:	903ff21e 	bne	r18,zero,871c0 <_dtoa_r+0x430>
   871f8:	a80b883a 	mov	r5,r21
   871fc:	a009883a 	mov	r4,r20
   87200:	880f883a 	mov	r7,r17
   87204:	800d883a 	mov	r6,r16
   87208:	008f0640 	call	8f064 <__divdf3>
   8720c:	1029883a 	mov	r20,r2
   87210:	182b883a 	mov	r21,r3
   87214:	d8c00c17 	ldw	r3,48(sp)
   87218:	1805003a 	cmpeq	r2,r3,zero
   8721c:	1000081e 	bne	r2,zero,87240 <_dtoa_r+0x4b0>
   87220:	0005883a 	mov	r2,zero
   87224:	00cffc34 	movhi	r3,16368
   87228:	180f883a 	mov	r7,r3
   8722c:	a009883a 	mov	r4,r20
   87230:	a80b883a 	mov	r5,r21
   87234:	100d883a 	mov	r6,r2
   87238:	008f4dc0 	call	8f4dc <__ltdf2>
   8723c:	1003fe16 	blt	r2,zero,88238 <_dtoa_r+0x14a8>
   87240:	b009883a 	mov	r4,r22
   87244:	008f5ec0 	call	8f5ec <__floatsidf>
   87248:	180b883a 	mov	r5,r3
   8724c:	1009883a 	mov	r4,r2
   87250:	a00d883a 	mov	r6,r20
   87254:	a80f883a 	mov	r7,r21
   87258:	008eca00 	call	8eca0 <__muldf3>
   8725c:	0011883a 	mov	r8,zero
   87260:	02500734 	movhi	r9,16412
   87264:	1009883a 	mov	r4,r2
   87268:	180b883a 	mov	r5,r3
   8726c:	480f883a 	mov	r7,r9
   87270:	400d883a 	mov	r6,r8
   87274:	008ec2c0 	call	8ec2c <__adddf3>
   87278:	d9000f17 	ldw	r4,60(sp)
   8727c:	102d883a 	mov	r22,r2
   87280:	00bf3034 	movhi	r2,64704
   87284:	18b9883a 	add	fp,r3,r2
   87288:	e02f883a 	mov	r23,fp
   8728c:	20028f1e 	bne	r4,zero,87ccc <_dtoa_r+0xf3c>
   87290:	0005883a 	mov	r2,zero
   87294:	00d00534 	movhi	r3,16404
   87298:	a009883a 	mov	r4,r20
   8729c:	a80b883a 	mov	r5,r21
   872a0:	180f883a 	mov	r7,r3
   872a4:	100d883a 	mov	r6,r2
   872a8:	008ebac0 	call	8ebac <__subdf3>
   872ac:	1009883a 	mov	r4,r2
   872b0:	e00f883a 	mov	r7,fp
   872b4:	180b883a 	mov	r5,r3
   872b8:	b00d883a 	mov	r6,r22
   872bc:	1025883a 	mov	r18,r2
   872c0:	1827883a 	mov	r19,r3
   872c4:	008f3cc0 	call	8f3cc <__gtdf2>
   872c8:	00834f16 	blt	zero,r2,88008 <_dtoa_r+0x1278>
   872cc:	e0e0003c 	xorhi	r3,fp,32768
   872d0:	9009883a 	mov	r4,r18
   872d4:	980b883a 	mov	r5,r19
   872d8:	180f883a 	mov	r7,r3
   872dc:	b00d883a 	mov	r6,r22
   872e0:	008f4dc0 	call	8f4dc <__ltdf2>
   872e4:	1000080e 	bge	r2,zero,87308 <_dtoa_r+0x578>
   872e8:	0027883a 	mov	r19,zero
   872ec:	0025883a 	mov	r18,zero
   872f0:	d8802617 	ldw	r2,152(sp)
   872f4:	df000517 	ldw	fp,20(sp)
   872f8:	d8000615 	stw	zero,24(sp)
   872fc:	0084303a 	nor	r2,zero,r2
   87300:	d8800d15 	stw	r2,52(sp)
   87304:	00019b06 	br	87974 <_dtoa_r+0xbe4>
   87308:	d9801217 	ldw	r6,72(sp)
   8730c:	d8801317 	ldw	r2,76(sp)
   87310:	3029883a 	mov	r20,r6
   87314:	102b883a 	mov	r21,r2
   87318:	d8c00217 	ldw	r3,8(sp)
   8731c:	18008516 	blt	r3,zero,87534 <_dtoa_r+0x7a4>
   87320:	d9000d17 	ldw	r4,52(sp)
   87324:	00800384 	movi	r2,14
   87328:	11008216 	blt	r2,r4,87534 <_dtoa_r+0x7a4>
   8732c:	200490fa 	slli	r2,r4,3
   87330:	d9802617 	ldw	r6,152(sp)
   87334:	00c00274 	movhi	r3,9
   87338:	18d13004 	addi	r3,r3,17600
   8733c:	10c5883a 	add	r2,r2,r3
   87340:	14800017 	ldw	r18,0(r2)
   87344:	14c00117 	ldw	r19,4(r2)
   87348:	30031e16 	blt	r6,zero,87fc4 <_dtoa_r+0x1234>
   8734c:	d9000517 	ldw	r4,20(sp)
   87350:	d8c00f17 	ldw	r3,60(sp)
   87354:	a823883a 	mov	r17,r21
   87358:	a021883a 	mov	r16,r20
   8735c:	192b883a 	add	r21,r3,r4
   87360:	2039883a 	mov	fp,r4
   87364:	00000f06 	br	873a4 <_dtoa_r+0x614>
   87368:	0005883a 	mov	r2,zero
   8736c:	00d00934 	movhi	r3,16420
   87370:	5009883a 	mov	r4,r10
   87374:	580b883a 	mov	r5,r11
   87378:	180f883a 	mov	r7,r3
   8737c:	100d883a 	mov	r6,r2
   87380:	008eca00 	call	8eca0 <__muldf3>
   87384:	180b883a 	mov	r5,r3
   87388:	000d883a 	mov	r6,zero
   8738c:	000f883a 	mov	r7,zero
   87390:	1009883a 	mov	r4,r2
   87394:	1021883a 	mov	r16,r2
   87398:	1823883a 	mov	r17,r3
   8739c:	008f3440 	call	8f344 <__nedf2>
   873a0:	10004526 	beq	r2,zero,874b8 <_dtoa_r+0x728>
   873a4:	900d883a 	mov	r6,r18
   873a8:	980f883a 	mov	r7,r19
   873ac:	8009883a 	mov	r4,r16
   873b0:	880b883a 	mov	r5,r17
   873b4:	008f0640 	call	8f064 <__divdf3>
   873b8:	180b883a 	mov	r5,r3
   873bc:	1009883a 	mov	r4,r2
   873c0:	008f6e40 	call	8f6e4 <__fixdfsi>
   873c4:	1009883a 	mov	r4,r2
   873c8:	1029883a 	mov	r20,r2
   873cc:	008f5ec0 	call	8f5ec <__floatsidf>
   873d0:	180f883a 	mov	r7,r3
   873d4:	9009883a 	mov	r4,r18
   873d8:	980b883a 	mov	r5,r19
   873dc:	100d883a 	mov	r6,r2
   873e0:	008eca00 	call	8eca0 <__muldf3>
   873e4:	180f883a 	mov	r7,r3
   873e8:	880b883a 	mov	r5,r17
   873ec:	8009883a 	mov	r4,r16
   873f0:	100d883a 	mov	r6,r2
   873f4:	008ebac0 	call	8ebac <__subdf3>
   873f8:	1015883a 	mov	r10,r2
   873fc:	a0800c04 	addi	r2,r20,48
   87400:	e0800005 	stb	r2,0(fp)
   87404:	e7000044 	addi	fp,fp,1
   87408:	1817883a 	mov	r11,r3
   8740c:	e57fd61e 	bne	fp,r21,87368 <_dtoa_r+0x5d8>
   87410:	500d883a 	mov	r6,r10
   87414:	180f883a 	mov	r7,r3
   87418:	5009883a 	mov	r4,r10
   8741c:	180b883a 	mov	r5,r3
   87420:	008ec2c0 	call	8ec2c <__adddf3>
   87424:	100d883a 	mov	r6,r2
   87428:	9009883a 	mov	r4,r18
   8742c:	980b883a 	mov	r5,r19
   87430:	180f883a 	mov	r7,r3
   87434:	1021883a 	mov	r16,r2
   87438:	1823883a 	mov	r17,r3
   8743c:	008f4dc0 	call	8f4dc <__ltdf2>
   87440:	10000816 	blt	r2,zero,87464 <_dtoa_r+0x6d4>
   87444:	980b883a 	mov	r5,r19
   87448:	800d883a 	mov	r6,r16
   8744c:	880f883a 	mov	r7,r17
   87450:	9009883a 	mov	r4,r18
   87454:	008f2bc0 	call	8f2bc <__eqdf2>
   87458:	1000171e 	bne	r2,zero,874b8 <_dtoa_r+0x728>
   8745c:	a080004c 	andi	r2,r20,1
   87460:	10001526 	beq	r2,zero,874b8 <_dtoa_r+0x728>
   87464:	d8800d17 	ldw	r2,52(sp)
   87468:	d8800415 	stw	r2,16(sp)
   8746c:	e009883a 	mov	r4,fp
   87470:	213fffc4 	addi	r4,r4,-1
   87474:	20c00007 	ldb	r3,0(r4)
   87478:	00800e44 	movi	r2,57
   8747c:	1880081e 	bne	r3,r2,874a0 <_dtoa_r+0x710>
   87480:	d8800517 	ldw	r2,20(sp)
   87484:	113ffa1e 	bne	r2,r4,87470 <_dtoa_r+0x6e0>
   87488:	d8c00417 	ldw	r3,16(sp)
   8748c:	d9800517 	ldw	r6,20(sp)
   87490:	00800c04 	movi	r2,48
   87494:	18c00044 	addi	r3,r3,1
   87498:	d8c00415 	stw	r3,16(sp)
   8749c:	30800005 	stb	r2,0(r6)
   874a0:	20800003 	ldbu	r2,0(r4)
   874a4:	d8c00417 	ldw	r3,16(sp)
   874a8:	27000044 	addi	fp,r4,1
   874ac:	10800044 	addi	r2,r2,1
   874b0:	d8c00d15 	stw	r3,52(sp)
   874b4:	20800005 	stb	r2,0(r4)
   874b8:	d9001617 	ldw	r4,88(sp)
   874bc:	d9400717 	ldw	r5,28(sp)
   874c0:	00894840 	call	89484 <_Bfree>
   874c4:	e0000005 	stb	zero,0(fp)
   874c8:	d9800d17 	ldw	r6,52(sp)
   874cc:	d8c02717 	ldw	r3,156(sp)
   874d0:	d9002917 	ldw	r4,164(sp)
   874d4:	30800044 	addi	r2,r6,1
   874d8:	18800015 	stw	r2,0(r3)
   874dc:	20029c26 	beq	r4,zero,87f50 <_dtoa_r+0x11c0>
   874e0:	d8c00517 	ldw	r3,20(sp)
   874e4:	27000015 	stw	fp,0(r4)
   874e8:	003e5d06 	br	86e60 <_dtoa_r+0xd0>
   874ec:	d9800d17 	ldw	r6,52(sp)
   874f0:	00c00274 	movhi	r3,9
   874f4:	18d13004 	addi	r3,r3,17600
   874f8:	d9001217 	ldw	r4,72(sp)
   874fc:	300490fa 	slli	r2,r6,3
   87500:	d9401317 	ldw	r5,76(sp)
   87504:	10c5883a 	add	r2,r2,r3
   87508:	12000017 	ldw	r8,0(r2)
   8750c:	12400117 	ldw	r9,4(r2)
   87510:	400d883a 	mov	r6,r8
   87514:	480f883a 	mov	r7,r9
   87518:	008f4dc0 	call	8f4dc <__ltdf2>
   8751c:	1000030e 	bge	r2,zero,8752c <_dtoa_r+0x79c>
   87520:	d8800d17 	ldw	r2,52(sp)
   87524:	10bfffc4 	addi	r2,r2,-1
   87528:	d8800d15 	stw	r2,52(sp)
   8752c:	d8000c15 	stw	zero,48(sp)
   87530:	003ea806 	br	86fd4 <_dtoa_r+0x244>
   87534:	d9000b17 	ldw	r4,44(sp)
   87538:	202cc03a 	cmpne	r22,r4,zero
   8753c:	b000c71e 	bne	r22,zero,8785c <_dtoa_r+0xacc>
   87540:	dc001117 	ldw	r16,68(sp)
   87544:	dc801017 	ldw	r18,64(sp)
   87548:	0027883a 	mov	r19,zero
   8754c:	04000b0e 	bge	zero,r16,8757c <_dtoa_r+0x7ec>
   87550:	d8c00a17 	ldw	r3,40(sp)
   87554:	00c0090e 	bge	zero,r3,8757c <_dtoa_r+0x7ec>
   87558:	8005883a 	mov	r2,r16
   8755c:	1c011316 	blt	r3,r16,879ac <_dtoa_r+0xc1c>
   87560:	d9000a17 	ldw	r4,40(sp)
   87564:	d9801117 	ldw	r6,68(sp)
   87568:	80a1c83a 	sub	r16,r16,r2
   8756c:	2089c83a 	sub	r4,r4,r2
   87570:	308dc83a 	sub	r6,r6,r2
   87574:	d9000a15 	stw	r4,40(sp)
   87578:	d9801115 	stw	r6,68(sp)
   8757c:	d8801017 	ldw	r2,64(sp)
   87580:	0080150e 	bge	zero,r2,875d8 <_dtoa_r+0x848>
   87584:	d8c00b17 	ldw	r3,44(sp)
   87588:	1805003a 	cmpeq	r2,r3,zero
   8758c:	1001c91e 	bne	r2,zero,87cb4 <_dtoa_r+0xf24>
   87590:	04800e0e 	bge	zero,r18,875cc <_dtoa_r+0x83c>
   87594:	d9001617 	ldw	r4,88(sp)
   87598:	980b883a 	mov	r5,r19
   8759c:	900d883a 	mov	r6,r18
   875a0:	008a2d00 	call	8a2d0 <__pow5mult>
   875a4:	d9001617 	ldw	r4,88(sp)
   875a8:	d9800717 	ldw	r6,28(sp)
   875ac:	100b883a 	mov	r5,r2
   875b0:	1027883a 	mov	r19,r2
   875b4:	0089f140 	call	89f14 <__multiply>
   875b8:	d9001617 	ldw	r4,88(sp)
   875bc:	d9400717 	ldw	r5,28(sp)
   875c0:	1023883a 	mov	r17,r2
   875c4:	00894840 	call	89484 <_Bfree>
   875c8:	dc400715 	stw	r17,28(sp)
   875cc:	d9001017 	ldw	r4,64(sp)
   875d0:	248dc83a 	sub	r6,r4,r18
   875d4:	30010e1e 	bne	r6,zero,87a10 <_dtoa_r+0xc80>
   875d8:	d9001617 	ldw	r4,88(sp)
   875dc:	04400044 	movi	r17,1
   875e0:	880b883a 	mov	r5,r17
   875e4:	008a1680 	call	8a168 <__i2b>
   875e8:	d9800917 	ldw	r6,36(sp)
   875ec:	1025883a 	mov	r18,r2
   875f0:	0180040e 	bge	zero,r6,87604 <_dtoa_r+0x874>
   875f4:	d9001617 	ldw	r4,88(sp)
   875f8:	100b883a 	mov	r5,r2
   875fc:	008a2d00 	call	8a2d0 <__pow5mult>
   87600:	1025883a 	mov	r18,r2
   87604:	d8801717 	ldw	r2,92(sp)
   87608:	8880f30e 	bge	r17,r2,879d8 <_dtoa_r+0xc48>
   8760c:	0023883a 	mov	r17,zero
   87610:	d9800917 	ldw	r6,36(sp)
   87614:	30019e1e 	bne	r6,zero,87c90 <_dtoa_r+0xf00>
   87618:	00c00044 	movi	r3,1
   8761c:	d9000a17 	ldw	r4,40(sp)
   87620:	20c5883a 	add	r2,r4,r3
   87624:	10c007cc 	andi	r3,r2,31
   87628:	1800841e 	bne	r3,zero,8783c <_dtoa_r+0xaac>
   8762c:	00800704 	movi	r2,28
   87630:	d9000a17 	ldw	r4,40(sp)
   87634:	d9801117 	ldw	r6,68(sp)
   87638:	80a1883a 	add	r16,r16,r2
   8763c:	2089883a 	add	r4,r4,r2
   87640:	308d883a 	add	r6,r6,r2
   87644:	d9000a15 	stw	r4,40(sp)
   87648:	d9801115 	stw	r6,68(sp)
   8764c:	d8801117 	ldw	r2,68(sp)
   87650:	0080050e 	bge	zero,r2,87668 <_dtoa_r+0x8d8>
   87654:	d9400717 	ldw	r5,28(sp)
   87658:	d9001617 	ldw	r4,88(sp)
   8765c:	100d883a 	mov	r6,r2
   87660:	0089dc80 	call	89dc8 <__lshift>
   87664:	d8800715 	stw	r2,28(sp)
   87668:	d8c00a17 	ldw	r3,40(sp)
   8766c:	00c0050e 	bge	zero,r3,87684 <_dtoa_r+0x8f4>
   87670:	d9001617 	ldw	r4,88(sp)
   87674:	900b883a 	mov	r5,r18
   87678:	180d883a 	mov	r6,r3
   8767c:	0089dc80 	call	89dc8 <__lshift>
   87680:	1025883a 	mov	r18,r2
   87684:	d9000c17 	ldw	r4,48(sp)
   87688:	2005003a 	cmpeq	r2,r4,zero
   8768c:	10016f26 	beq	r2,zero,87c4c <_dtoa_r+0xebc>
   87690:	d9000f17 	ldw	r4,60(sp)
   87694:	0102170e 	bge	zero,r4,87ef4 <_dtoa_r+0x1164>
   87698:	d9800b17 	ldw	r6,44(sp)
   8769c:	3005003a 	cmpeq	r2,r6,zero
   876a0:	1000881e 	bne	r2,zero,878c4 <_dtoa_r+0xb34>
   876a4:	0400050e 	bge	zero,r16,876bc <_dtoa_r+0x92c>
   876a8:	d9001617 	ldw	r4,88(sp)
   876ac:	980b883a 	mov	r5,r19
   876b0:	800d883a 	mov	r6,r16
   876b4:	0089dc80 	call	89dc8 <__lshift>
   876b8:	1027883a 	mov	r19,r2
   876bc:	8804c03a 	cmpne	r2,r17,zero
   876c0:	1002541e 	bne	r2,zero,88014 <_dtoa_r+0x1284>
   876c4:	980b883a 	mov	r5,r19
   876c8:	dd800517 	ldw	r22,20(sp)
   876cc:	dcc00615 	stw	r19,24(sp)
   876d0:	a700004c 	andi	fp,r20,1
   876d4:	2827883a 	mov	r19,r5
   876d8:	d9000717 	ldw	r4,28(sp)
   876dc:	900b883a 	mov	r5,r18
   876e0:	0086b4c0 	call	86b4c <quorem>
   876e4:	d9000717 	ldw	r4,28(sp)
   876e8:	d9400617 	ldw	r5,24(sp)
   876ec:	1023883a 	mov	r17,r2
   876f0:	8dc00c04 	addi	r23,r17,48
   876f4:	00895e00 	call	895e0 <__mcmp>
   876f8:	d9001617 	ldw	r4,88(sp)
   876fc:	900b883a 	mov	r5,r18
   87700:	980d883a 	mov	r6,r19
   87704:	1029883a 	mov	r20,r2
   87708:	0089c3c0 	call	89c3c <__mdiff>
   8770c:	102b883a 	mov	r21,r2
   87710:	10800317 	ldw	r2,12(r2)
   87714:	1001281e 	bne	r2,zero,87bb8 <_dtoa_r+0xe28>
   87718:	d9000717 	ldw	r4,28(sp)
   8771c:	a80b883a 	mov	r5,r21
   87720:	00895e00 	call	895e0 <__mcmp>
   87724:	d9001617 	ldw	r4,88(sp)
   87728:	1021883a 	mov	r16,r2
   8772c:	a80b883a 	mov	r5,r21
   87730:	00894840 	call	89484 <_Bfree>
   87734:	8000041e 	bne	r16,zero,87748 <_dtoa_r+0x9b8>
   87738:	d8801717 	ldw	r2,92(sp)
   8773c:	1000021e 	bne	r2,zero,87748 <_dtoa_r+0x9b8>
   87740:	e004c03a 	cmpne	r2,fp,zero
   87744:	10011726 	beq	r2,zero,87ba4 <_dtoa_r+0xe14>
   87748:	a0010616 	blt	r20,zero,87b64 <_dtoa_r+0xdd4>
   8774c:	a000041e 	bne	r20,zero,87760 <_dtoa_r+0x9d0>
   87750:	d8c01717 	ldw	r3,92(sp)
   87754:	1800021e 	bne	r3,zero,87760 <_dtoa_r+0x9d0>
   87758:	e004c03a 	cmpne	r2,fp,zero
   8775c:	10010126 	beq	r2,zero,87b64 <_dtoa_r+0xdd4>
   87760:	04023d16 	blt	zero,r16,88058 <_dtoa_r+0x12c8>
   87764:	b5c00005 	stb	r23,0(r22)
   87768:	d9800517 	ldw	r6,20(sp)
   8776c:	d9000f17 	ldw	r4,60(sp)
   87770:	b5800044 	addi	r22,r22,1
   87774:	3105883a 	add	r2,r6,r4
   87778:	b0806526 	beq	r22,r2,87910 <_dtoa_r+0xb80>
   8777c:	d9400717 	ldw	r5,28(sp)
   87780:	d9001617 	ldw	r4,88(sp)
   87784:	01800284 	movi	r6,10
   87788:	000f883a 	mov	r7,zero
   8778c:	008a1a40 	call	8a1a4 <__multadd>
   87790:	d8800715 	stw	r2,28(sp)
   87794:	d8800617 	ldw	r2,24(sp)
   87798:	14c10c26 	beq	r2,r19,87bcc <_dtoa_r+0xe3c>
   8779c:	d9400617 	ldw	r5,24(sp)
   877a0:	d9001617 	ldw	r4,88(sp)
   877a4:	01800284 	movi	r6,10
   877a8:	000f883a 	mov	r7,zero
   877ac:	008a1a40 	call	8a1a4 <__multadd>
   877b0:	d9001617 	ldw	r4,88(sp)
   877b4:	980b883a 	mov	r5,r19
   877b8:	01800284 	movi	r6,10
   877bc:	000f883a 	mov	r7,zero
   877c0:	d8800615 	stw	r2,24(sp)
   877c4:	008a1a40 	call	8a1a4 <__multadd>
   877c8:	1027883a 	mov	r19,r2
   877cc:	003fc206 	br	876d8 <_dtoa_r+0x948>
   877d0:	2445c83a 	sub	r2,r4,r17
   877d4:	a088983a 	sll	r4,r20,r2
   877d8:	003e4b06 	br	87108 <_dtoa_r+0x378>
   877dc:	01bfffc4 	movi	r6,-1
   877e0:	00800044 	movi	r2,1
   877e4:	d9800e15 	stw	r6,56(sp)
   877e8:	d9800f15 	stw	r6,60(sp)
   877ec:	d8800b15 	stw	r2,44(sp)
   877f0:	d8c01617 	ldw	r3,88(sp)
   877f4:	008005c4 	movi	r2,23
   877f8:	18001115 	stw	zero,68(r3)
   877fc:	1580082e 	bgeu	r2,r22,87820 <_dtoa_r+0xa90>
   87800:	00c00104 	movi	r3,4
   87804:	0009883a 	mov	r4,zero
   87808:	18c7883a 	add	r3,r3,r3
   8780c:	18800504 	addi	r2,r3,20
   87810:	21000044 	addi	r4,r4,1
   87814:	b0bffc2e 	bgeu	r22,r2,87808 <_dtoa_r+0xa78>
   87818:	d9801617 	ldw	r6,88(sp)
   8781c:	31001115 	stw	r4,68(r6)
   87820:	dc000f17 	ldw	r16,60(sp)
   87824:	003e4b06 	br	87154 <_dtoa_r+0x3c4>
   87828:	d9801717 	ldw	r6,92(sp)
   8782c:	0023883a 	mov	r17,zero
   87830:	31bfff04 	addi	r6,r6,-4
   87834:	d9801715 	stw	r6,92(sp)
   87838:	003df806 	br	8701c <_dtoa_r+0x28c>
   8783c:	00800804 	movi	r2,32
   87840:	10c9c83a 	sub	r4,r2,r3
   87844:	00c00104 	movi	r3,4
   87848:	19005a16 	blt	r3,r4,879b4 <_dtoa_r+0xc24>
   8784c:	008000c4 	movi	r2,3
   87850:	113f7e16 	blt	r2,r4,8764c <_dtoa_r+0x8bc>
   87854:	20800704 	addi	r2,r4,28
   87858:	003f7506 	br	87630 <_dtoa_r+0x8a0>
   8785c:	d9801717 	ldw	r6,92(sp)
   87860:	00800044 	movi	r2,1
   87864:	1180a10e 	bge	r2,r6,87aec <_dtoa_r+0xd5c>
   87868:	d9800f17 	ldw	r6,60(sp)
   8786c:	d8c01017 	ldw	r3,64(sp)
   87870:	30bfffc4 	addi	r2,r6,-1
   87874:	1881c616 	blt	r3,r2,87f90 <_dtoa_r+0x1200>
   87878:	18a5c83a 	sub	r18,r3,r2
   8787c:	d8800f17 	ldw	r2,60(sp)
   87880:	10026216 	blt	r2,zero,8820c <_dtoa_r+0x147c>
   87884:	dc001117 	ldw	r16,68(sp)
   87888:	1007883a 	mov	r3,r2
   8788c:	d9800a17 	ldw	r6,40(sp)
   87890:	d8801117 	ldw	r2,68(sp)
   87894:	d9001617 	ldw	r4,88(sp)
   87898:	30cd883a 	add	r6,r6,r3
   8789c:	10c5883a 	add	r2,r2,r3
   878a0:	01400044 	movi	r5,1
   878a4:	d9800a15 	stw	r6,40(sp)
   878a8:	d8801115 	stw	r2,68(sp)
   878ac:	008a1680 	call	8a168 <__i2b>
   878b0:	1027883a 	mov	r19,r2
   878b4:	003f2506 	br	8754c <_dtoa_r+0x7bc>
   878b8:	00c00274 	movhi	r3,9
   878bc:	18d06804 	addi	r3,r3,16800
   878c0:	003d6706 	br	86e60 <_dtoa_r+0xd0>
   878c4:	dd800517 	ldw	r22,20(sp)
   878c8:	04000044 	movi	r16,1
   878cc:	00000706 	br	878ec <_dtoa_r+0xb5c>
   878d0:	d9400717 	ldw	r5,28(sp)
   878d4:	d9001617 	ldw	r4,88(sp)
   878d8:	01800284 	movi	r6,10
   878dc:	000f883a 	mov	r7,zero
   878e0:	008a1a40 	call	8a1a4 <__multadd>
   878e4:	d8800715 	stw	r2,28(sp)
   878e8:	84000044 	addi	r16,r16,1
   878ec:	d9000717 	ldw	r4,28(sp)
   878f0:	900b883a 	mov	r5,r18
   878f4:	0086b4c0 	call	86b4c <quorem>
   878f8:	15c00c04 	addi	r23,r2,48
   878fc:	b5c00005 	stb	r23,0(r22)
   87900:	d8c00f17 	ldw	r3,60(sp)
   87904:	b5800044 	addi	r22,r22,1
   87908:	80fff116 	blt	r16,r3,878d0 <_dtoa_r+0xb40>
   8790c:	d8000615 	stw	zero,24(sp)
   87910:	d9400717 	ldw	r5,28(sp)
   87914:	d9001617 	ldw	r4,88(sp)
   87918:	01800044 	movi	r6,1
   8791c:	0089dc80 	call	89dc8 <__lshift>
   87920:	1009883a 	mov	r4,r2
   87924:	900b883a 	mov	r5,r18
   87928:	d8800715 	stw	r2,28(sp)
   8792c:	00895e00 	call	895e0 <__mcmp>
   87930:	00803c0e 	bge	zero,r2,87a24 <_dtoa_r+0xc94>
   87934:	b009883a 	mov	r4,r22
   87938:	213fffc4 	addi	r4,r4,-1
   8793c:	21400003 	ldbu	r5,0(r4)
   87940:	00800e44 	movi	r2,57
   87944:	28c03fcc 	andi	r3,r5,255
   87948:	18c0201c 	xori	r3,r3,128
   8794c:	18ffe004 	addi	r3,r3,-128
   87950:	1881981e 	bne	r3,r2,87fb4 <_dtoa_r+0x1224>
   87954:	d9800517 	ldw	r6,20(sp)
   87958:	21bff71e 	bne	r4,r6,87938 <_dtoa_r+0xba8>
   8795c:	d8800d17 	ldw	r2,52(sp)
   87960:	37000044 	addi	fp,r6,1
   87964:	10800044 	addi	r2,r2,1
   87968:	d8800d15 	stw	r2,52(sp)
   8796c:	00800c44 	movi	r2,49
   87970:	30800005 	stb	r2,0(r6)
   87974:	d9001617 	ldw	r4,88(sp)
   87978:	900b883a 	mov	r5,r18
   8797c:	00894840 	call	89484 <_Bfree>
   87980:	983ecd26 	beq	r19,zero,874b8 <_dtoa_r+0x728>
   87984:	d8c00617 	ldw	r3,24(sp)
   87988:	18000426 	beq	r3,zero,8799c <_dtoa_r+0xc0c>
   8798c:	1cc00326 	beq	r3,r19,8799c <_dtoa_r+0xc0c>
   87990:	d9001617 	ldw	r4,88(sp)
   87994:	180b883a 	mov	r5,r3
   87998:	00894840 	call	89484 <_Bfree>
   8799c:	d9001617 	ldw	r4,88(sp)
   879a0:	980b883a 	mov	r5,r19
   879a4:	00894840 	call	89484 <_Bfree>
   879a8:	003ec306 	br	874b8 <_dtoa_r+0x728>
   879ac:	1805883a 	mov	r2,r3
   879b0:	003eeb06 	br	87560 <_dtoa_r+0x7d0>
   879b4:	d9800a17 	ldw	r6,40(sp)
   879b8:	d8c01117 	ldw	r3,68(sp)
   879bc:	20bfff04 	addi	r2,r4,-4
   879c0:	308d883a 	add	r6,r6,r2
   879c4:	1887883a 	add	r3,r3,r2
   879c8:	80a1883a 	add	r16,r16,r2
   879cc:	d9800a15 	stw	r6,40(sp)
   879d0:	d8c01115 	stw	r3,68(sp)
   879d4:	003f1d06 	br	8764c <_dtoa_r+0x8bc>
   879d8:	a03f0c1e 	bne	r20,zero,8760c <_dtoa_r+0x87c>
   879dc:	00800434 	movhi	r2,16
   879e0:	10bfffc4 	addi	r2,r2,-1
   879e4:	a884703a 	and	r2,r21,r2
   879e8:	103f081e 	bne	r2,zero,8760c <_dtoa_r+0x87c>
   879ec:	a89ffc2c 	andhi	r2,r21,32752
   879f0:	103f0626 	beq	r2,zero,8760c <_dtoa_r+0x87c>
   879f4:	d8c01117 	ldw	r3,68(sp)
   879f8:	d9000a17 	ldw	r4,40(sp)
   879fc:	18c00044 	addi	r3,r3,1
   87a00:	21000044 	addi	r4,r4,1
   87a04:	d8c01115 	stw	r3,68(sp)
   87a08:	d9000a15 	stw	r4,40(sp)
   87a0c:	003f0006 	br	87610 <_dtoa_r+0x880>
   87a10:	d9400717 	ldw	r5,28(sp)
   87a14:	d9001617 	ldw	r4,88(sp)
   87a18:	008a2d00 	call	8a2d0 <__pow5mult>
   87a1c:	d8800715 	stw	r2,28(sp)
   87a20:	003eed06 	br	875d8 <_dtoa_r+0x848>
   87a24:	1000021e 	bne	r2,zero,87a30 <_dtoa_r+0xca0>
   87a28:	b880004c 	andi	r2,r23,1
   87a2c:	103fc11e 	bne	r2,zero,87934 <_dtoa_r+0xba4>
   87a30:	b5bfffc4 	addi	r22,r22,-1
   87a34:	b0c00007 	ldb	r3,0(r22)
   87a38:	00800c04 	movi	r2,48
   87a3c:	18bffc26 	beq	r3,r2,87a30 <_dtoa_r+0xca0>
   87a40:	b7000044 	addi	fp,r22,1
   87a44:	003fcb06 	br	87974 <_dtoa_r+0xbe4>
   87a48:	d9800d17 	ldw	r6,52(sp)
   87a4c:	018fc83a 	sub	r7,zero,r6
   87a50:	3801f726 	beq	r7,zero,88230 <_dtoa_r+0x14a0>
   87a54:	398003cc 	andi	r6,r7,15
   87a58:	300c90fa 	slli	r6,r6,3
   87a5c:	01400274 	movhi	r5,9
   87a60:	29513004 	addi	r5,r5,17600
   87a64:	d9001217 	ldw	r4,72(sp)
   87a68:	314d883a 	add	r6,r6,r5
   87a6c:	30c00117 	ldw	r3,4(r6)
   87a70:	30800017 	ldw	r2,0(r6)
   87a74:	d9401317 	ldw	r5,76(sp)
   87a78:	3821d13a 	srai	r16,r7,4
   87a7c:	100d883a 	mov	r6,r2
   87a80:	180f883a 	mov	r7,r3
   87a84:	008eca00 	call	8eca0 <__muldf3>
   87a88:	1011883a 	mov	r8,r2
   87a8c:	1813883a 	mov	r9,r3
   87a90:	1029883a 	mov	r20,r2
   87a94:	182b883a 	mov	r21,r3
   87a98:	8001e526 	beq	r16,zero,88230 <_dtoa_r+0x14a0>
   87a9c:	05800084 	movi	r22,2
   87aa0:	04400274 	movhi	r17,9
   87aa4:	8c516204 	addi	r17,r17,17800
   87aa8:	8080004c 	andi	r2,r16,1
   87aac:	1005003a 	cmpeq	r2,r2,zero
   87ab0:	1000081e 	bne	r2,zero,87ad4 <_dtoa_r+0xd44>
   87ab4:	89800017 	ldw	r6,0(r17)
   87ab8:	89c00117 	ldw	r7,4(r17)
   87abc:	480b883a 	mov	r5,r9
   87ac0:	4009883a 	mov	r4,r8
   87ac4:	008eca00 	call	8eca0 <__muldf3>
   87ac8:	1011883a 	mov	r8,r2
   87acc:	b5800044 	addi	r22,r22,1
   87ad0:	1813883a 	mov	r9,r3
   87ad4:	8021d07a 	srai	r16,r16,1
   87ad8:	8c400204 	addi	r17,r17,8
   87adc:	803ff21e 	bne	r16,zero,87aa8 <_dtoa_r+0xd18>
   87ae0:	4029883a 	mov	r20,r8
   87ae4:	482b883a 	mov	r21,r9
   87ae8:	003dca06 	br	87214 <_dtoa_r+0x484>
   87aec:	d9000817 	ldw	r4,32(sp)
   87af0:	2005003a 	cmpeq	r2,r4,zero
   87af4:	1001f61e 	bne	r2,zero,882d0 <_dtoa_r+0x1540>
   87af8:	dc001117 	ldw	r16,68(sp)
   87afc:	dc801017 	ldw	r18,64(sp)
   87b00:	18c10cc4 	addi	r3,r3,1075
   87b04:	003f6106 	br	8788c <_dtoa_r+0xafc>
   87b08:	d8000b15 	stw	zero,44(sp)
   87b0c:	d9802617 	ldw	r6,152(sp)
   87b10:	d8c00d17 	ldw	r3,52(sp)
   87b14:	30800044 	addi	r2,r6,1
   87b18:	18ad883a 	add	r22,r3,r2
   87b1c:	b13fffc4 	addi	r4,r22,-1
   87b20:	d9000e15 	stw	r4,56(sp)
   87b24:	0581f60e 	bge	zero,r22,88300 <_dtoa_r+0x1570>
   87b28:	dd800f15 	stw	r22,60(sp)
   87b2c:	003f3006 	br	877f0 <_dtoa_r+0xa60>
   87b30:	d8000b15 	stw	zero,44(sp)
   87b34:	d9002617 	ldw	r4,152(sp)
   87b38:	0101eb0e 	bge	zero,r4,882e8 <_dtoa_r+0x1558>
   87b3c:	202d883a 	mov	r22,r4
   87b40:	d9000e15 	stw	r4,56(sp)
   87b44:	d9000f15 	stw	r4,60(sp)
   87b48:	003f2906 	br	877f0 <_dtoa_r+0xa60>
   87b4c:	01800044 	movi	r6,1
   87b50:	d9800b15 	stw	r6,44(sp)
   87b54:	003ff706 	br	87b34 <_dtoa_r+0xda4>
   87b58:	01000044 	movi	r4,1
   87b5c:	d9000b15 	stw	r4,44(sp)
   87b60:	003fea06 	br	87b0c <_dtoa_r+0xd7c>
   87b64:	04000c0e 	bge	zero,r16,87b98 <_dtoa_r+0xe08>
   87b68:	d9400717 	ldw	r5,28(sp)
   87b6c:	d9001617 	ldw	r4,88(sp)
   87b70:	01800044 	movi	r6,1
   87b74:	0089dc80 	call	89dc8 <__lshift>
   87b78:	1009883a 	mov	r4,r2
   87b7c:	900b883a 	mov	r5,r18
   87b80:	d8800715 	stw	r2,28(sp)
   87b84:	00895e00 	call	895e0 <__mcmp>
   87b88:	0081e00e 	bge	zero,r2,8830c <_dtoa_r+0x157c>
   87b8c:	bdc00044 	addi	r23,r23,1
   87b90:	00800e84 	movi	r2,58
   87b94:	b881a226 	beq	r23,r2,88220 <_dtoa_r+0x1490>
   87b98:	b7000044 	addi	fp,r22,1
   87b9c:	b5c00005 	stb	r23,0(r22)
   87ba0:	003f7406 	br	87974 <_dtoa_r+0xbe4>
   87ba4:	00800e44 	movi	r2,57
   87ba8:	b8819d26 	beq	r23,r2,88220 <_dtoa_r+0x1490>
   87bac:	053ffa0e 	bge	zero,r20,87b98 <_dtoa_r+0xe08>
   87bb0:	8dc00c44 	addi	r23,r17,49
   87bb4:	003ff806 	br	87b98 <_dtoa_r+0xe08>
   87bb8:	d9001617 	ldw	r4,88(sp)
   87bbc:	a80b883a 	mov	r5,r21
   87bc0:	04000044 	movi	r16,1
   87bc4:	00894840 	call	89484 <_Bfree>
   87bc8:	003edf06 	br	87748 <_dtoa_r+0x9b8>
   87bcc:	d9001617 	ldw	r4,88(sp)
   87bd0:	980b883a 	mov	r5,r19
   87bd4:	01800284 	movi	r6,10
   87bd8:	000f883a 	mov	r7,zero
   87bdc:	008a1a40 	call	8a1a4 <__multadd>
   87be0:	1027883a 	mov	r19,r2
   87be4:	d8800615 	stw	r2,24(sp)
   87be8:	003ebb06 	br	876d8 <_dtoa_r+0x948>
   87bec:	d9801117 	ldw	r6,68(sp)
   87bf0:	d8800d17 	ldw	r2,52(sp)
   87bf4:	d8000915 	stw	zero,36(sp)
   87bf8:	308dc83a 	sub	r6,r6,r2
   87bfc:	0087c83a 	sub	r3,zero,r2
   87c00:	d9801115 	stw	r6,68(sp)
   87c04:	d8c01015 	stw	r3,64(sp)
   87c08:	003cfe06 	br	87004 <_dtoa_r+0x274>
   87c0c:	018dc83a 	sub	r6,zero,r6
   87c10:	d9801115 	stw	r6,68(sp)
   87c14:	d8000a15 	stw	zero,40(sp)
   87c18:	003cf306 	br	86fe8 <_dtoa_r+0x258>
   87c1c:	d9000d17 	ldw	r4,52(sp)
   87c20:	008f5ec0 	call	8f5ec <__floatsidf>
   87c24:	880b883a 	mov	r5,r17
   87c28:	8009883a 	mov	r4,r16
   87c2c:	180f883a 	mov	r7,r3
   87c30:	100d883a 	mov	r6,r2
   87c34:	008f3440 	call	8f344 <__nedf2>
   87c38:	103ce126 	beq	r2,zero,86fc0 <_dtoa_r+0x230>
   87c3c:	d9800d17 	ldw	r6,52(sp)
   87c40:	31bfffc4 	addi	r6,r6,-1
   87c44:	d9800d15 	stw	r6,52(sp)
   87c48:	003cdd06 	br	86fc0 <_dtoa_r+0x230>
   87c4c:	d9000717 	ldw	r4,28(sp)
   87c50:	900b883a 	mov	r5,r18
   87c54:	00895e00 	call	895e0 <__mcmp>
   87c58:	103e8d0e 	bge	r2,zero,87690 <_dtoa_r+0x900>
   87c5c:	d9400717 	ldw	r5,28(sp)
   87c60:	d9001617 	ldw	r4,88(sp)
   87c64:	01800284 	movi	r6,10
   87c68:	000f883a 	mov	r7,zero
   87c6c:	008a1a40 	call	8a1a4 <__multadd>
   87c70:	d9800d17 	ldw	r6,52(sp)
   87c74:	d8800715 	stw	r2,28(sp)
   87c78:	31bfffc4 	addi	r6,r6,-1
   87c7c:	d9800d15 	stw	r6,52(sp)
   87c80:	b001a71e 	bne	r22,zero,88320 <_dtoa_r+0x1590>
   87c84:	d8800e17 	ldw	r2,56(sp)
   87c88:	d8800f15 	stw	r2,60(sp)
   87c8c:	003e8006 	br	87690 <_dtoa_r+0x900>
   87c90:	90800417 	ldw	r2,16(r18)
   87c94:	1085883a 	add	r2,r2,r2
   87c98:	1085883a 	add	r2,r2,r2
   87c9c:	1485883a 	add	r2,r2,r18
   87ca0:	11000417 	ldw	r4,16(r2)
   87ca4:	00894ac0 	call	894ac <__hi0bits>
   87ca8:	00c00804 	movi	r3,32
   87cac:	1887c83a 	sub	r3,r3,r2
   87cb0:	003e5a06 	br	8761c <_dtoa_r+0x88c>
   87cb4:	d9400717 	ldw	r5,28(sp)
   87cb8:	d9801017 	ldw	r6,64(sp)
   87cbc:	d9001617 	ldw	r4,88(sp)
   87cc0:	008a2d00 	call	8a2d0 <__pow5mult>
   87cc4:	d8800715 	stw	r2,28(sp)
   87cc8:	003e4306 	br	875d8 <_dtoa_r+0x848>
   87ccc:	d9800f17 	ldw	r6,60(sp)
   87cd0:	d8800d17 	ldw	r2,52(sp)
   87cd4:	d9800315 	stw	r6,12(sp)
   87cd8:	d8800415 	stw	r2,16(sp)
   87cdc:	d8c00b17 	ldw	r3,44(sp)
   87ce0:	1805003a 	cmpeq	r2,r3,zero
   87ce4:	1000e21e 	bne	r2,zero,88070 <_dtoa_r+0x12e0>
   87ce8:	d9000317 	ldw	r4,12(sp)
   87cec:	0005883a 	mov	r2,zero
   87cf0:	00cff834 	movhi	r3,16352
   87cf4:	200c90fa 	slli	r6,r4,3
   87cf8:	01000274 	movhi	r4,9
   87cfc:	21113004 	addi	r4,r4,17600
   87d00:	180b883a 	mov	r5,r3
   87d04:	310d883a 	add	r6,r6,r4
   87d08:	327fff17 	ldw	r9,-4(r6)
   87d0c:	323ffe17 	ldw	r8,-8(r6)
   87d10:	1009883a 	mov	r4,r2
   87d14:	480f883a 	mov	r7,r9
   87d18:	400d883a 	mov	r6,r8
   87d1c:	008f0640 	call	8f064 <__divdf3>
   87d20:	180b883a 	mov	r5,r3
   87d24:	b00d883a 	mov	r6,r22
   87d28:	b80f883a 	mov	r7,r23
   87d2c:	1009883a 	mov	r4,r2
   87d30:	008ebac0 	call	8ebac <__subdf3>
   87d34:	a80b883a 	mov	r5,r21
   87d38:	a009883a 	mov	r4,r20
   87d3c:	d8c01915 	stw	r3,100(sp)
   87d40:	d8801815 	stw	r2,96(sp)
   87d44:	008f6e40 	call	8f6e4 <__fixdfsi>
   87d48:	1009883a 	mov	r4,r2
   87d4c:	1027883a 	mov	r19,r2
   87d50:	008f5ec0 	call	8f5ec <__floatsidf>
   87d54:	a80b883a 	mov	r5,r21
   87d58:	a009883a 	mov	r4,r20
   87d5c:	180f883a 	mov	r7,r3
   87d60:	100d883a 	mov	r6,r2
   87d64:	008ebac0 	call	8ebac <__subdf3>
   87d68:	d9801817 	ldw	r6,96(sp)
   87d6c:	1823883a 	mov	r17,r3
   87d70:	d8801415 	stw	r2,80(sp)
   87d74:	302d883a 	mov	r22,r6
   87d78:	d9800517 	ldw	r6,20(sp)
   87d7c:	9cc00c04 	addi	r19,r19,48
   87d80:	dc401515 	stw	r17,84(sp)
   87d84:	d8c01917 	ldw	r3,100(sp)
   87d88:	34c00005 	stb	r19,0(r6)
   87d8c:	d8800517 	ldw	r2,20(sp)
   87d90:	d9401917 	ldw	r5,100(sp)
   87d94:	d9801417 	ldw	r6,80(sp)
   87d98:	b009883a 	mov	r4,r22
   87d9c:	880f883a 	mov	r7,r17
   87da0:	182f883a 	mov	r23,r3
   87da4:	17000044 	addi	fp,r2,1
   87da8:	008f3cc0 	call	8f3cc <__gtdf2>
   87dac:	00804e16 	blt	zero,r2,87ee8 <_dtoa_r+0x1158>
   87db0:	d9801417 	ldw	r6,80(sp)
   87db4:	0005883a 	mov	r2,zero
   87db8:	00cffc34 	movhi	r3,16368
   87dbc:	180b883a 	mov	r5,r3
   87dc0:	880f883a 	mov	r7,r17
   87dc4:	1009883a 	mov	r4,r2
   87dc8:	008ebac0 	call	8ebac <__subdf3>
   87dcc:	d9401917 	ldw	r5,100(sp)
   87dd0:	180f883a 	mov	r7,r3
   87dd4:	b009883a 	mov	r4,r22
   87dd8:	100d883a 	mov	r6,r2
   87ddc:	008f3cc0 	call	8f3cc <__gtdf2>
   87de0:	00bda216 	blt	zero,r2,8746c <_dtoa_r+0x6dc>
   87de4:	d8c00317 	ldw	r3,12(sp)
   87de8:	00800044 	movi	r2,1
   87dec:	10c01216 	blt	r2,r3,87e38 <_dtoa_r+0x10a8>
   87df0:	003d4506 	br	87308 <_dtoa_r+0x578>
   87df4:	d9801417 	ldw	r6,80(sp)
   87df8:	0005883a 	mov	r2,zero
   87dfc:	00cffc34 	movhi	r3,16368
   87e00:	180b883a 	mov	r5,r3
   87e04:	880f883a 	mov	r7,r17
   87e08:	1009883a 	mov	r4,r2
   87e0c:	008ebac0 	call	8ebac <__subdf3>
   87e10:	d9c01b17 	ldw	r7,108(sp)
   87e14:	180b883a 	mov	r5,r3
   87e18:	1009883a 	mov	r4,r2
   87e1c:	b00d883a 	mov	r6,r22
   87e20:	008f4dc0 	call	8f4dc <__ltdf2>
   87e24:	103d9116 	blt	r2,zero,8746c <_dtoa_r+0x6dc>
   87e28:	d9800517 	ldw	r6,20(sp)
   87e2c:	d9000317 	ldw	r4,12(sp)
   87e30:	3105883a 	add	r2,r6,r4
   87e34:	e0bd3426 	beq	fp,r2,87308 <_dtoa_r+0x578>
   87e38:	04500934 	movhi	r17,16420
   87e3c:	0021883a 	mov	r16,zero
   87e40:	b80b883a 	mov	r5,r23
   87e44:	b009883a 	mov	r4,r22
   87e48:	800d883a 	mov	r6,r16
   87e4c:	880f883a 	mov	r7,r17
   87e50:	008eca00 	call	8eca0 <__muldf3>
   87e54:	d9401517 	ldw	r5,84(sp)
   87e58:	d9001417 	ldw	r4,80(sp)
   87e5c:	880f883a 	mov	r7,r17
   87e60:	000d883a 	mov	r6,zero
   87e64:	d8801a15 	stw	r2,104(sp)
   87e68:	d8c01b15 	stw	r3,108(sp)
   87e6c:	008eca00 	call	8eca0 <__muldf3>
   87e70:	180b883a 	mov	r5,r3
   87e74:	1009883a 	mov	r4,r2
   87e78:	1823883a 	mov	r17,r3
   87e7c:	1021883a 	mov	r16,r2
   87e80:	008f6e40 	call	8f6e4 <__fixdfsi>
   87e84:	1009883a 	mov	r4,r2
   87e88:	102b883a 	mov	r21,r2
   87e8c:	008f5ec0 	call	8f5ec <__floatsidf>
   87e90:	880b883a 	mov	r5,r17
   87e94:	8009883a 	mov	r4,r16
   87e98:	180f883a 	mov	r7,r3
   87e9c:	100d883a 	mov	r6,r2
   87ea0:	008ebac0 	call	8ebac <__subdf3>
   87ea4:	1021883a 	mov	r16,r2
   87ea8:	d9001b17 	ldw	r4,108(sp)
   87eac:	1823883a 	mov	r17,r3
   87eb0:	dc001415 	stw	r16,80(sp)
   87eb4:	ad400c04 	addi	r21,r21,48
   87eb8:	dc401515 	stw	r17,84(sp)
   87ebc:	d8801a17 	ldw	r2,104(sp)
   87ec0:	e5400005 	stb	r21,0(fp)
   87ec4:	202f883a 	mov	r23,r4
   87ec8:	d9c01b17 	ldw	r7,108(sp)
   87ecc:	d9001417 	ldw	r4,80(sp)
   87ed0:	880b883a 	mov	r5,r17
   87ed4:	100d883a 	mov	r6,r2
   87ed8:	102d883a 	mov	r22,r2
   87edc:	e7000044 	addi	fp,fp,1
   87ee0:	008f4dc0 	call	8f4dc <__ltdf2>
   87ee4:	103fc30e 	bge	r2,zero,87df4 <_dtoa_r+0x1064>
   87ee8:	d9000417 	ldw	r4,16(sp)
   87eec:	d9000d15 	stw	r4,52(sp)
   87ef0:	003d7106 	br	874b8 <_dtoa_r+0x728>
   87ef4:	d9801717 	ldw	r6,92(sp)
   87ef8:	00800084 	movi	r2,2
   87efc:	11bde60e 	bge	r2,r6,87698 <_dtoa_r+0x908>
   87f00:	203cfb1e 	bne	r4,zero,872f0 <_dtoa_r+0x560>
   87f04:	d9001617 	ldw	r4,88(sp)
   87f08:	900b883a 	mov	r5,r18
   87f0c:	01800144 	movi	r6,5
   87f10:	000f883a 	mov	r7,zero
   87f14:	008a1a40 	call	8a1a4 <__multadd>
   87f18:	d9000717 	ldw	r4,28(sp)
   87f1c:	100b883a 	mov	r5,r2
   87f20:	1025883a 	mov	r18,r2
   87f24:	00895e00 	call	895e0 <__mcmp>
   87f28:	00bcf10e 	bge	zero,r2,872f0 <_dtoa_r+0x560>
   87f2c:	d8c00d17 	ldw	r3,52(sp)
   87f30:	d9000517 	ldw	r4,20(sp)
   87f34:	d8000615 	stw	zero,24(sp)
   87f38:	18c00044 	addi	r3,r3,1
   87f3c:	d8c00d15 	stw	r3,52(sp)
   87f40:	00800c44 	movi	r2,49
   87f44:	27000044 	addi	fp,r4,1
   87f48:	20800005 	stb	r2,0(r4)
   87f4c:	003e8906 	br	87974 <_dtoa_r+0xbe4>
   87f50:	d8c00517 	ldw	r3,20(sp)
   87f54:	003bc206 	br	86e60 <_dtoa_r+0xd0>
   87f58:	01800274 	movhi	r6,9
   87f5c:	31916204 	addi	r6,r6,17800
   87f60:	30c00917 	ldw	r3,36(r6)
   87f64:	30800817 	ldw	r2,32(r6)
   87f68:	d9001217 	ldw	r4,72(sp)
   87f6c:	d9401317 	ldw	r5,76(sp)
   87f70:	180f883a 	mov	r7,r3
   87f74:	100d883a 	mov	r6,r2
   87f78:	008f0640 	call	8f064 <__divdf3>
   87f7c:	948003cc 	andi	r18,r18,15
   87f80:	058000c4 	movi	r22,3
   87f84:	1029883a 	mov	r20,r2
   87f88:	182b883a 	mov	r21,r3
   87f8c:	003c8906 	br	871b4 <_dtoa_r+0x424>
   87f90:	d9001017 	ldw	r4,64(sp)
   87f94:	d9800917 	ldw	r6,36(sp)
   87f98:	0025883a 	mov	r18,zero
   87f9c:	1105c83a 	sub	r2,r2,r4
   87fa0:	2089883a 	add	r4,r4,r2
   87fa4:	308d883a 	add	r6,r6,r2
   87fa8:	d9001015 	stw	r4,64(sp)
   87fac:	d9800915 	stw	r6,36(sp)
   87fb0:	003e3206 	br	8787c <_dtoa_r+0xaec>
   87fb4:	28800044 	addi	r2,r5,1
   87fb8:	27000044 	addi	fp,r4,1
   87fbc:	20800005 	stb	r2,0(r4)
   87fc0:	003e6c06 	br	87974 <_dtoa_r+0xbe4>
   87fc4:	d8800f17 	ldw	r2,60(sp)
   87fc8:	00bce016 	blt	zero,r2,8734c <_dtoa_r+0x5bc>
   87fcc:	d9800f17 	ldw	r6,60(sp)
   87fd0:	303cc51e 	bne	r6,zero,872e8 <_dtoa_r+0x558>
   87fd4:	0005883a 	mov	r2,zero
   87fd8:	00d00534 	movhi	r3,16404
   87fdc:	980b883a 	mov	r5,r19
   87fe0:	180f883a 	mov	r7,r3
   87fe4:	9009883a 	mov	r4,r18
   87fe8:	100d883a 	mov	r6,r2
   87fec:	008eca00 	call	8eca0 <__muldf3>
   87ff0:	180b883a 	mov	r5,r3
   87ff4:	a80f883a 	mov	r7,r21
   87ff8:	1009883a 	mov	r4,r2
   87ffc:	a00d883a 	mov	r6,r20
   88000:	008f4540 	call	8f454 <__gedf2>
   88004:	103cb80e 	bge	r2,zero,872e8 <_dtoa_r+0x558>
   88008:	0027883a 	mov	r19,zero
   8800c:	0025883a 	mov	r18,zero
   88010:	003fc606 	br	87f2c <_dtoa_r+0x119c>
   88014:	99400117 	ldw	r5,4(r19)
   88018:	d9001617 	ldw	r4,88(sp)
   8801c:	0089a040 	call	89a04 <_Balloc>
   88020:	99800417 	ldw	r6,16(r19)
   88024:	11000304 	addi	r4,r2,12
   88028:	99400304 	addi	r5,r19,12
   8802c:	318d883a 	add	r6,r6,r6
   88030:	318d883a 	add	r6,r6,r6
   88034:	31800204 	addi	r6,r6,8
   88038:	1023883a 	mov	r17,r2
   8803c:	008218c0 	call	8218c <memcpy>
   88040:	d9001617 	ldw	r4,88(sp)
   88044:	880b883a 	mov	r5,r17
   88048:	01800044 	movi	r6,1
   8804c:	0089dc80 	call	89dc8 <__lshift>
   88050:	100b883a 	mov	r5,r2
   88054:	003d9c06 	br	876c8 <_dtoa_r+0x938>
   88058:	00800e44 	movi	r2,57
   8805c:	b8807026 	beq	r23,r2,88220 <_dtoa_r+0x1490>
   88060:	b8800044 	addi	r2,r23,1
   88064:	b7000044 	addi	fp,r22,1
   88068:	b0800005 	stb	r2,0(r22)
   8806c:	003e4106 	br	87974 <_dtoa_r+0xbe4>
   88070:	d8800317 	ldw	r2,12(sp)
   88074:	01800274 	movhi	r6,9
   88078:	31913004 	addi	r6,r6,17600
   8807c:	b009883a 	mov	r4,r22
   88080:	100e90fa 	slli	r7,r2,3
   88084:	b80b883a 	mov	r5,r23
   88088:	398f883a 	add	r7,r7,r6
   8808c:	38bffe17 	ldw	r2,-8(r7)
   88090:	d9800517 	ldw	r6,20(sp)
   88094:	38ffff17 	ldw	r3,-4(r7)
   88098:	37000044 	addi	fp,r6,1
   8809c:	180f883a 	mov	r7,r3
   880a0:	100d883a 	mov	r6,r2
   880a4:	008eca00 	call	8eca0 <__muldf3>
   880a8:	a80b883a 	mov	r5,r21
   880ac:	a009883a 	mov	r4,r20
   880b0:	182f883a 	mov	r23,r3
   880b4:	102d883a 	mov	r22,r2
   880b8:	008f6e40 	call	8f6e4 <__fixdfsi>
   880bc:	1009883a 	mov	r4,r2
   880c0:	1027883a 	mov	r19,r2
   880c4:	008f5ec0 	call	8f5ec <__floatsidf>
   880c8:	a80b883a 	mov	r5,r21
   880cc:	a009883a 	mov	r4,r20
   880d0:	180f883a 	mov	r7,r3
   880d4:	100d883a 	mov	r6,r2
   880d8:	008ebac0 	call	8ebac <__subdf3>
   880dc:	180b883a 	mov	r5,r3
   880e0:	d8c00517 	ldw	r3,20(sp)
   880e4:	9cc00c04 	addi	r19,r19,48
   880e8:	1009883a 	mov	r4,r2
   880ec:	1cc00005 	stb	r19,0(r3)
   880f0:	2021883a 	mov	r16,r4
   880f4:	d9000317 	ldw	r4,12(sp)
   880f8:	00800044 	movi	r2,1
   880fc:	2823883a 	mov	r17,r5
   88100:	20802226 	beq	r4,r2,8818c <_dtoa_r+0x13fc>
   88104:	1029883a 	mov	r20,r2
   88108:	0005883a 	mov	r2,zero
   8810c:	00d00934 	movhi	r3,16420
   88110:	180f883a 	mov	r7,r3
   88114:	100d883a 	mov	r6,r2
   88118:	880b883a 	mov	r5,r17
   8811c:	8009883a 	mov	r4,r16
   88120:	008eca00 	call	8eca0 <__muldf3>
   88124:	180b883a 	mov	r5,r3
   88128:	1009883a 	mov	r4,r2
   8812c:	1823883a 	mov	r17,r3
   88130:	1021883a 	mov	r16,r2
   88134:	008f6e40 	call	8f6e4 <__fixdfsi>
   88138:	1009883a 	mov	r4,r2
   8813c:	102b883a 	mov	r21,r2
   88140:	008f5ec0 	call	8f5ec <__floatsidf>
   88144:	880b883a 	mov	r5,r17
   88148:	8009883a 	mov	r4,r16
   8814c:	180f883a 	mov	r7,r3
   88150:	100d883a 	mov	r6,r2
   88154:	008ebac0 	call	8ebac <__subdf3>
   88158:	180b883a 	mov	r5,r3
   8815c:	d8c00517 	ldw	r3,20(sp)
   88160:	1009883a 	mov	r4,r2
   88164:	ad400c04 	addi	r21,r21,48
   88168:	1d05883a 	add	r2,r3,r20
   8816c:	15400005 	stb	r21,0(r2)
   88170:	2021883a 	mov	r16,r4
   88174:	d9000317 	ldw	r4,12(sp)
   88178:	a5000044 	addi	r20,r20,1
   8817c:	2823883a 	mov	r17,r5
   88180:	a13fe11e 	bne	r20,r4,88108 <_dtoa_r+0x1378>
   88184:	e505883a 	add	r2,fp,r20
   88188:	173fffc4 	addi	fp,r2,-1
   8818c:	0025883a 	mov	r18,zero
   88190:	04cff834 	movhi	r19,16352
   88194:	b009883a 	mov	r4,r22
   88198:	b80b883a 	mov	r5,r23
   8819c:	900d883a 	mov	r6,r18
   881a0:	980f883a 	mov	r7,r19
   881a4:	008ec2c0 	call	8ec2c <__adddf3>
   881a8:	180b883a 	mov	r5,r3
   881ac:	1009883a 	mov	r4,r2
   881b0:	800d883a 	mov	r6,r16
   881b4:	880f883a 	mov	r7,r17
   881b8:	008f4dc0 	call	8f4dc <__ltdf2>
   881bc:	103cab16 	blt	r2,zero,8746c <_dtoa_r+0x6dc>
   881c0:	0009883a 	mov	r4,zero
   881c4:	980b883a 	mov	r5,r19
   881c8:	b80f883a 	mov	r7,r23
   881cc:	b00d883a 	mov	r6,r22
   881d0:	008ebac0 	call	8ebac <__subdf3>
   881d4:	180b883a 	mov	r5,r3
   881d8:	880f883a 	mov	r7,r17
   881dc:	1009883a 	mov	r4,r2
   881e0:	800d883a 	mov	r6,r16
   881e4:	008f3cc0 	call	8f3cc <__gtdf2>
   881e8:	00bc470e 	bge	zero,r2,87308 <_dtoa_r+0x578>
   881ec:	00c00c04 	movi	r3,48
   881f0:	e73fffc4 	addi	fp,fp,-1
   881f4:	e0800007 	ldb	r2,0(fp)
   881f8:	10fffd26 	beq	r2,r3,881f0 <_dtoa_r+0x1460>
   881fc:	d9800417 	ldw	r6,16(sp)
   88200:	e7000044 	addi	fp,fp,1
   88204:	d9800d15 	stw	r6,52(sp)
   88208:	003cab06 	br	874b8 <_dtoa_r+0x728>
   8820c:	d8c00f17 	ldw	r3,60(sp)
   88210:	d9001117 	ldw	r4,68(sp)
   88214:	20e1c83a 	sub	r16,r4,r3
   88218:	0007883a 	mov	r3,zero
   8821c:	003d9b06 	br	8788c <_dtoa_r+0xafc>
   88220:	00800e44 	movi	r2,57
   88224:	b0800005 	stb	r2,0(r22)
   88228:	b5800044 	addi	r22,r22,1
   8822c:	003dc106 	br	87934 <_dtoa_r+0xba4>
   88230:	05800084 	movi	r22,2
   88234:	003bf706 	br	87214 <_dtoa_r+0x484>
   88238:	d9000f17 	ldw	r4,60(sp)
   8823c:	013c000e 	bge	zero,r4,87240 <_dtoa_r+0x4b0>
   88240:	d9800e17 	ldw	r6,56(sp)
   88244:	01bc300e 	bge	zero,r6,87308 <_dtoa_r+0x578>
   88248:	0005883a 	mov	r2,zero
   8824c:	00d00934 	movhi	r3,16420
   88250:	a80b883a 	mov	r5,r21
   88254:	180f883a 	mov	r7,r3
   88258:	a009883a 	mov	r4,r20
   8825c:	100d883a 	mov	r6,r2
   88260:	008eca00 	call	8eca0 <__muldf3>
   88264:	b1000044 	addi	r4,r22,1
   88268:	1021883a 	mov	r16,r2
   8826c:	1823883a 	mov	r17,r3
   88270:	008f5ec0 	call	8f5ec <__floatsidf>
   88274:	880b883a 	mov	r5,r17
   88278:	8009883a 	mov	r4,r16
   8827c:	180f883a 	mov	r7,r3
   88280:	100d883a 	mov	r6,r2
   88284:	008eca00 	call	8eca0 <__muldf3>
   88288:	0011883a 	mov	r8,zero
   8828c:	02500734 	movhi	r9,16412
   88290:	180b883a 	mov	r5,r3
   88294:	480f883a 	mov	r7,r9
   88298:	1009883a 	mov	r4,r2
   8829c:	400d883a 	mov	r6,r8
   882a0:	008ec2c0 	call	8ec2c <__adddf3>
   882a4:	102d883a 	mov	r22,r2
   882a8:	00bf3034 	movhi	r2,64704
   882ac:	10ef883a 	add	r23,r2,r3
   882b0:	d8800d17 	ldw	r2,52(sp)
   882b4:	d8c00e17 	ldw	r3,56(sp)
   882b8:	8029883a 	mov	r20,r16
   882bc:	10bfffc4 	addi	r2,r2,-1
   882c0:	882b883a 	mov	r21,r17
   882c4:	d8800415 	stw	r2,16(sp)
   882c8:	d8c00315 	stw	r3,12(sp)
   882cc:	003e8306 	br	87cdc <_dtoa_r+0xf4c>
   882d0:	d8800117 	ldw	r2,4(sp)
   882d4:	dc001117 	ldw	r16,68(sp)
   882d8:	dc801017 	ldw	r18,64(sp)
   882dc:	00c00d84 	movi	r3,54
   882e0:	1887c83a 	sub	r3,r3,r2
   882e4:	003d6906 	br	8788c <_dtoa_r+0xafc>
   882e8:	01800044 	movi	r6,1
   882ec:	3021883a 	mov	r16,r6
   882f0:	d9800f15 	stw	r6,60(sp)
   882f4:	d9802615 	stw	r6,152(sp)
   882f8:	d9800e15 	stw	r6,56(sp)
   882fc:	003b9306 	br	8714c <_dtoa_r+0x3bc>
   88300:	b021883a 	mov	r16,r22
   88304:	dd800f15 	stw	r22,60(sp)
   88308:	003b9006 	br	8714c <_dtoa_r+0x3bc>
   8830c:	103e221e 	bne	r2,zero,87b98 <_dtoa_r+0xe08>
   88310:	b880004c 	andi	r2,r23,1
   88314:	1005003a 	cmpeq	r2,r2,zero
   88318:	103e1f1e 	bne	r2,zero,87b98 <_dtoa_r+0xe08>
   8831c:	003e1b06 	br	87b8c <_dtoa_r+0xdfc>
   88320:	d9001617 	ldw	r4,88(sp)
   88324:	980b883a 	mov	r5,r19
   88328:	01800284 	movi	r6,10
   8832c:	000f883a 	mov	r7,zero
   88330:	008a1a40 	call	8a1a4 <__multadd>
   88334:	d8c00e17 	ldw	r3,56(sp)
   88338:	1027883a 	mov	r19,r2
   8833c:	d8c00f15 	stw	r3,60(sp)
   88340:	003cd306 	br	87690 <_dtoa_r+0x900>

00088344 <_fflush_r>:
   88344:	defffb04 	addi	sp,sp,-20
   88348:	dcc00315 	stw	r19,12(sp)
   8834c:	dc800215 	stw	r18,8(sp)
   88350:	dfc00415 	stw	ra,16(sp)
   88354:	dc400115 	stw	r17,4(sp)
   88358:	dc000015 	stw	r16,0(sp)
   8835c:	2027883a 	mov	r19,r4
   88360:	2825883a 	mov	r18,r5
   88364:	20000226 	beq	r4,zero,88370 <_fflush_r+0x2c>
   88368:	20800e17 	ldw	r2,56(r4)
   8836c:	10005626 	beq	r2,zero,884c8 <_fflush_r+0x184>
   88370:	9100030b 	ldhu	r4,12(r18)
   88374:	20ffffcc 	andi	r3,r4,65535
   88378:	18e0001c 	xori	r3,r3,32768
   8837c:	18e00004 	addi	r3,r3,-32768
   88380:	1880020c 	andi	r2,r3,8
   88384:	1000261e 	bne	r2,zero,88420 <_fflush_r+0xdc>
   88388:	90c00117 	ldw	r3,4(r18)
   8838c:	20820014 	ori	r2,r4,2048
   88390:	9080030d 	sth	r2,12(r18)
   88394:	1009883a 	mov	r4,r2
   88398:	00c0400e 	bge	zero,r3,8849c <_fflush_r+0x158>
   8839c:	92000a17 	ldw	r8,40(r18)
   883a0:	40004026 	beq	r8,zero,884a4 <_fflush_r+0x160>
   883a4:	2084000c 	andi	r2,r4,4096
   883a8:	10005326 	beq	r2,zero,884f8 <_fflush_r+0x1b4>
   883ac:	94001417 	ldw	r16,80(r18)
   883b0:	9080030b 	ldhu	r2,12(r18)
   883b4:	1080010c 	andi	r2,r2,4
   883b8:	1000481e 	bne	r2,zero,884dc <_fflush_r+0x198>
   883bc:	91400717 	ldw	r5,28(r18)
   883c0:	9809883a 	mov	r4,r19
   883c4:	800d883a 	mov	r6,r16
   883c8:	000f883a 	mov	r7,zero
   883cc:	403ee83a 	callr	r8
   883d0:	8080261e 	bne	r16,r2,8846c <_fflush_r+0x128>
   883d4:	9080030b 	ldhu	r2,12(r18)
   883d8:	91000417 	ldw	r4,16(r18)
   883dc:	90000115 	stw	zero,4(r18)
   883e0:	10bdffcc 	andi	r2,r2,63487
   883e4:	10ffffcc 	andi	r3,r2,65535
   883e8:	18c4000c 	andi	r3,r3,4096
   883ec:	9080030d 	sth	r2,12(r18)
   883f0:	91000015 	stw	r4,0(r18)
   883f4:	18002b26 	beq	r3,zero,884a4 <_fflush_r+0x160>
   883f8:	0007883a 	mov	r3,zero
   883fc:	1805883a 	mov	r2,r3
   88400:	94001415 	stw	r16,80(r18)
   88404:	dfc00417 	ldw	ra,16(sp)
   88408:	dcc00317 	ldw	r19,12(sp)
   8840c:	dc800217 	ldw	r18,8(sp)
   88410:	dc400117 	ldw	r17,4(sp)
   88414:	dc000017 	ldw	r16,0(sp)
   88418:	dec00504 	addi	sp,sp,20
   8841c:	f800283a 	ret
   88420:	94400417 	ldw	r17,16(r18)
   88424:	88001f26 	beq	r17,zero,884a4 <_fflush_r+0x160>
   88428:	90800017 	ldw	r2,0(r18)
   8842c:	18c000cc 	andi	r3,r3,3
   88430:	94400015 	stw	r17,0(r18)
   88434:	1461c83a 	sub	r16,r2,r17
   88438:	18002526 	beq	r3,zero,884d0 <_fflush_r+0x18c>
   8843c:	0005883a 	mov	r2,zero
   88440:	90800215 	stw	r2,8(r18)
   88444:	0400170e 	bge	zero,r16,884a4 <_fflush_r+0x160>
   88448:	90c00917 	ldw	r3,36(r18)
   8844c:	91400717 	ldw	r5,28(r18)
   88450:	880d883a 	mov	r6,r17
   88454:	800f883a 	mov	r7,r16
   88458:	9809883a 	mov	r4,r19
   8845c:	183ee83a 	callr	r3
   88460:	88a3883a 	add	r17,r17,r2
   88464:	80a1c83a 	sub	r16,r16,r2
   88468:	00bff616 	blt	zero,r2,88444 <_fflush_r+0x100>
   8846c:	9080030b 	ldhu	r2,12(r18)
   88470:	00ffffc4 	movi	r3,-1
   88474:	10801014 	ori	r2,r2,64
   88478:	9080030d 	sth	r2,12(r18)
   8847c:	1805883a 	mov	r2,r3
   88480:	dfc00417 	ldw	ra,16(sp)
   88484:	dcc00317 	ldw	r19,12(sp)
   88488:	dc800217 	ldw	r18,8(sp)
   8848c:	dc400117 	ldw	r17,4(sp)
   88490:	dc000017 	ldw	r16,0(sp)
   88494:	dec00504 	addi	sp,sp,20
   88498:	f800283a 	ret
   8849c:	90800f17 	ldw	r2,60(r18)
   884a0:	00bfbe16 	blt	zero,r2,8839c <_fflush_r+0x58>
   884a4:	0007883a 	mov	r3,zero
   884a8:	1805883a 	mov	r2,r3
   884ac:	dfc00417 	ldw	ra,16(sp)
   884b0:	dcc00317 	ldw	r19,12(sp)
   884b4:	dc800217 	ldw	r18,8(sp)
   884b8:	dc400117 	ldw	r17,4(sp)
   884bc:	dc000017 	ldw	r16,0(sp)
   884c0:	dec00504 	addi	sp,sp,20
   884c4:	f800283a 	ret
   884c8:	00885dc0 	call	885dc <__sinit>
   884cc:	003fa806 	br	88370 <_fflush_r+0x2c>
   884d0:	90800517 	ldw	r2,20(r18)
   884d4:	90800215 	stw	r2,8(r18)
   884d8:	003fda06 	br	88444 <_fflush_r+0x100>
   884dc:	90800117 	ldw	r2,4(r18)
   884e0:	90c00c17 	ldw	r3,48(r18)
   884e4:	80a1c83a 	sub	r16,r16,r2
   884e8:	183fb426 	beq	r3,zero,883bc <_fflush_r+0x78>
   884ec:	90800f17 	ldw	r2,60(r18)
   884f0:	80a1c83a 	sub	r16,r16,r2
   884f4:	003fb106 	br	883bc <_fflush_r+0x78>
   884f8:	91400717 	ldw	r5,28(r18)
   884fc:	9809883a 	mov	r4,r19
   88500:	000d883a 	mov	r6,zero
   88504:	01c00044 	movi	r7,1
   88508:	403ee83a 	callr	r8
   8850c:	1021883a 	mov	r16,r2
   88510:	00bfffc4 	movi	r2,-1
   88514:	80800226 	beq	r16,r2,88520 <_fflush_r+0x1dc>
   88518:	92000a17 	ldw	r8,40(r18)
   8851c:	003fa406 	br	883b0 <_fflush_r+0x6c>
   88520:	98c00017 	ldw	r3,0(r19)
   88524:	00800744 	movi	r2,29
   88528:	18bfde26 	beq	r3,r2,884a4 <_fflush_r+0x160>
   8852c:	9080030b 	ldhu	r2,12(r18)
   88530:	8007883a 	mov	r3,r16
   88534:	10801014 	ori	r2,r2,64
   88538:	9080030d 	sth	r2,12(r18)
   8853c:	003fcf06 	br	8847c <_fflush_r+0x138>

00088540 <fflush>:
   88540:	01400274 	movhi	r5,9
   88544:	2960d104 	addi	r5,r5,-31932
   88548:	2007883a 	mov	r3,r4
   8854c:	20000526 	beq	r4,zero,88564 <fflush+0x24>
   88550:	00800274 	movhi	r2,9
   88554:	1098bc04 	addi	r2,r2,25328
   88558:	11000017 	ldw	r4,0(r2)
   8855c:	180b883a 	mov	r5,r3
   88560:	00883441 	jmpi	88344 <_fflush_r>
   88564:	00800274 	movhi	r2,9
   88568:	1098bd04 	addi	r2,r2,25332
   8856c:	11000017 	ldw	r4,0(r2)
   88570:	0088f941 	jmpi	88f94 <_fwalk_reent>

00088574 <std>:
   88574:	00800234 	movhi	r2,8
   88578:	108b5c04 	addi	r2,r2,11632
   8857c:	20800b15 	stw	r2,44(r4)
   88580:	00800234 	movhi	r2,8
   88584:	108b9704 	addi	r2,r2,11868
   88588:	20800815 	stw	r2,32(r4)
   8858c:	00c00234 	movhi	r3,8
   88590:	18cb7804 	addi	r3,r3,11744
   88594:	00800234 	movhi	r2,8
   88598:	108b5e04 	addi	r2,r2,11640
   8859c:	2140030d 	sth	r5,12(r4)
   885a0:	2180038d 	sth	r6,14(r4)
   885a4:	20c00915 	stw	r3,36(r4)
   885a8:	20800a15 	stw	r2,40(r4)
   885ac:	20000015 	stw	zero,0(r4)
   885b0:	20000115 	stw	zero,4(r4)
   885b4:	20000215 	stw	zero,8(r4)
   885b8:	20000415 	stw	zero,16(r4)
   885bc:	20000515 	stw	zero,20(r4)
   885c0:	20000615 	stw	zero,24(r4)
   885c4:	21000715 	stw	r4,28(r4)
   885c8:	f800283a 	ret

000885cc <__sfp_lock_acquire>:
   885cc:	f800283a 	ret

000885d0 <__sfp_lock_release>:
   885d0:	f800283a 	ret

000885d4 <__sinit_lock_acquire>:
   885d4:	f800283a 	ret

000885d8 <__sinit_lock_release>:
   885d8:	f800283a 	ret

000885dc <__sinit>:
   885dc:	20800e17 	ldw	r2,56(r4)
   885e0:	defffd04 	addi	sp,sp,-12
   885e4:	dc400115 	stw	r17,4(sp)
   885e8:	dc000015 	stw	r16,0(sp)
   885ec:	dfc00215 	stw	ra,8(sp)
   885f0:	04400044 	movi	r17,1
   885f4:	01400104 	movi	r5,4
   885f8:	000d883a 	mov	r6,zero
   885fc:	2021883a 	mov	r16,r4
   88600:	2200bb04 	addi	r8,r4,748
   88604:	200f883a 	mov	r7,r4
   88608:	10000526 	beq	r2,zero,88620 <__sinit+0x44>
   8860c:	dfc00217 	ldw	ra,8(sp)
   88610:	dc400117 	ldw	r17,4(sp)
   88614:	dc000017 	ldw	r16,0(sp)
   88618:	dec00304 	addi	sp,sp,12
   8861c:	f800283a 	ret
   88620:	21000117 	ldw	r4,4(r4)
   88624:	00800274 	movhi	r2,9
   88628:	10a1b004 	addi	r2,r2,-31040
   8862c:	00c000c4 	movi	r3,3
   88630:	80800f15 	stw	r2,60(r16)
   88634:	80c0b915 	stw	r3,740(r16)
   88638:	8200ba15 	stw	r8,744(r16)
   8863c:	84400e15 	stw	r17,56(r16)
   88640:	8000b815 	stw	zero,736(r16)
   88644:	00885740 	call	88574 <std>
   88648:	81000217 	ldw	r4,8(r16)
   8864c:	880d883a 	mov	r6,r17
   88650:	800f883a 	mov	r7,r16
   88654:	01400284 	movi	r5,10
   88658:	00885740 	call	88574 <std>
   8865c:	81000317 	ldw	r4,12(r16)
   88660:	800f883a 	mov	r7,r16
   88664:	01400484 	movi	r5,18
   88668:	01800084 	movi	r6,2
   8866c:	dfc00217 	ldw	ra,8(sp)
   88670:	dc400117 	ldw	r17,4(sp)
   88674:	dc000017 	ldw	r16,0(sp)
   88678:	dec00304 	addi	sp,sp,12
   8867c:	00885741 	jmpi	88574 <std>

00088680 <__fp_lock>:
   88680:	0005883a 	mov	r2,zero
   88684:	f800283a 	ret

00088688 <__fp_unlock>:
   88688:	0005883a 	mov	r2,zero
   8868c:	f800283a 	ret

00088690 <__fp_unlock_all>:
   88690:	00800274 	movhi	r2,9
   88694:	1098bc04 	addi	r2,r2,25328
   88698:	11000017 	ldw	r4,0(r2)
   8869c:	01400274 	movhi	r5,9
   886a0:	2961a204 	addi	r5,r5,-31096
   886a4:	008905c1 	jmpi	8905c <_fwalk>

000886a8 <__fp_lock_all>:
   886a8:	00800274 	movhi	r2,9
   886ac:	1098bc04 	addi	r2,r2,25328
   886b0:	11000017 	ldw	r4,0(r2)
   886b4:	01400274 	movhi	r5,9
   886b8:	2961a004 	addi	r5,r5,-31104
   886bc:	008905c1 	jmpi	8905c <_fwalk>

000886c0 <_cleanup_r>:
   886c0:	01400274 	movhi	r5,9
   886c4:	2972f004 	addi	r5,r5,-13376
   886c8:	008905c1 	jmpi	8905c <_fwalk>

000886cc <_cleanup>:
   886cc:	00800274 	movhi	r2,9
   886d0:	1098bd04 	addi	r2,r2,25332
   886d4:	11000017 	ldw	r4,0(r2)
   886d8:	00886c01 	jmpi	886c0 <_cleanup_r>

000886dc <__sfmoreglue>:
   886dc:	defffc04 	addi	sp,sp,-16
   886e0:	dc000015 	stw	r16,0(sp)
   886e4:	2821883a 	mov	r16,r5
   886e8:	dc400115 	stw	r17,4(sp)
   886ec:	01401704 	movi	r5,92
   886f0:	2023883a 	mov	r17,r4
   886f4:	8009883a 	mov	r4,r16
   886f8:	dfc00315 	stw	ra,12(sp)
   886fc:	dcc00215 	stw	r19,8(sp)
   88700:	0080ba00 	call	80ba0 <__mulsi3>
   88704:	11400304 	addi	r5,r2,12
   88708:	8809883a 	mov	r4,r17
   8870c:	1027883a 	mov	r19,r2
   88710:	00819680 	call	81968 <_malloc_r>
   88714:	10c00304 	addi	r3,r2,12
   88718:	1023883a 	mov	r17,r2
   8871c:	1809883a 	mov	r4,r3
   88720:	980d883a 	mov	r6,r19
   88724:	000b883a 	mov	r5,zero
   88728:	10000b26 	beq	r2,zero,88758 <__sfmoreglue+0x7c>
   8872c:	14000115 	stw	r16,4(r2)
   88730:	10c00215 	stw	r3,8(r2)
   88734:	10000015 	stw	zero,0(r2)
   88738:	00893ec0 	call	893ec <memset>
   8873c:	8805883a 	mov	r2,r17
   88740:	dfc00317 	ldw	ra,12(sp)
   88744:	dcc00217 	ldw	r19,8(sp)
   88748:	dc400117 	ldw	r17,4(sp)
   8874c:	dc000017 	ldw	r16,0(sp)
   88750:	dec00404 	addi	sp,sp,16
   88754:	f800283a 	ret
   88758:	0023883a 	mov	r17,zero
   8875c:	8805883a 	mov	r2,r17
   88760:	dfc00317 	ldw	ra,12(sp)
   88764:	dcc00217 	ldw	r19,8(sp)
   88768:	dc400117 	ldw	r17,4(sp)
   8876c:	dc000017 	ldw	r16,0(sp)
   88770:	dec00404 	addi	sp,sp,16
   88774:	f800283a 	ret

00088778 <__sfp>:
   88778:	defffd04 	addi	sp,sp,-12
   8877c:	00800274 	movhi	r2,9
   88780:	1098bd04 	addi	r2,r2,25332
   88784:	dc000015 	stw	r16,0(sp)
   88788:	14000017 	ldw	r16,0(r2)
   8878c:	dc400115 	stw	r17,4(sp)
   88790:	dfc00215 	stw	ra,8(sp)
   88794:	80800e17 	ldw	r2,56(r16)
   88798:	2023883a 	mov	r17,r4
   8879c:	10002626 	beq	r2,zero,88838 <__sfp+0xc0>
   887a0:	8400b804 	addi	r16,r16,736
   887a4:	80800117 	ldw	r2,4(r16)
   887a8:	81000217 	ldw	r4,8(r16)
   887ac:	10ffffc4 	addi	r3,r2,-1
   887b0:	18000916 	blt	r3,zero,887d8 <__sfp+0x60>
   887b4:	2080030f 	ldh	r2,12(r4)
   887b8:	10000b26 	beq	r2,zero,887e8 <__sfp+0x70>
   887bc:	017fffc4 	movi	r5,-1
   887c0:	00000206 	br	887cc <__sfp+0x54>
   887c4:	2080030f 	ldh	r2,12(r4)
   887c8:	10000726 	beq	r2,zero,887e8 <__sfp+0x70>
   887cc:	18ffffc4 	addi	r3,r3,-1
   887d0:	21001704 	addi	r4,r4,92
   887d4:	197ffb1e 	bne	r3,r5,887c4 <__sfp+0x4c>
   887d8:	80800017 	ldw	r2,0(r16)
   887dc:	10001926 	beq	r2,zero,88844 <__sfp+0xcc>
   887e0:	1021883a 	mov	r16,r2
   887e4:	003fef06 	br	887a4 <__sfp+0x2c>
   887e8:	00bfffc4 	movi	r2,-1
   887ec:	00c00044 	movi	r3,1
   887f0:	2080038d 	sth	r2,14(r4)
   887f4:	20c0030d 	sth	r3,12(r4)
   887f8:	20000015 	stw	zero,0(r4)
   887fc:	20000215 	stw	zero,8(r4)
   88800:	20000115 	stw	zero,4(r4)
   88804:	20000415 	stw	zero,16(r4)
   88808:	20000515 	stw	zero,20(r4)
   8880c:	20000615 	stw	zero,24(r4)
   88810:	20000c15 	stw	zero,48(r4)
   88814:	20000d15 	stw	zero,52(r4)
   88818:	20001115 	stw	zero,68(r4)
   8881c:	20001215 	stw	zero,72(r4)
   88820:	2005883a 	mov	r2,r4
   88824:	dfc00217 	ldw	ra,8(sp)
   88828:	dc400117 	ldw	r17,4(sp)
   8882c:	dc000017 	ldw	r16,0(sp)
   88830:	dec00304 	addi	sp,sp,12
   88834:	f800283a 	ret
   88838:	8009883a 	mov	r4,r16
   8883c:	00885dc0 	call	885dc <__sinit>
   88840:	003fd706 	br	887a0 <__sfp+0x28>
   88844:	8809883a 	mov	r4,r17
   88848:	01400104 	movi	r5,4
   8884c:	00886dc0 	call	886dc <__sfmoreglue>
   88850:	80800015 	stw	r2,0(r16)
   88854:	103fe21e 	bne	r2,zero,887e0 <__sfp+0x68>
   88858:	00800304 	movi	r2,12
   8885c:	0009883a 	mov	r4,zero
   88860:	88800015 	stw	r2,0(r17)
   88864:	003fee06 	br	88820 <__sfp+0xa8>

00088868 <__sflags>:
   88868:	28c00007 	ldb	r3,0(r5)
   8886c:	00801c84 	movi	r2,114
   88870:	18800926 	beq	r3,r2,88898 <__sflags+0x30>
   88874:	00801dc4 	movi	r2,119
   88878:	18801426 	beq	r3,r2,888cc <__sflags+0x64>
   8887c:	00801844 	movi	r2,97
   88880:	18801626 	beq	r3,r2,888dc <__sflags+0x74>
   88884:	0007883a 	mov	r3,zero
   88888:	00800584 	movi	r2,22
   8888c:	20800015 	stw	r2,0(r4)
   88890:	1805883a 	mov	r2,r3
   88894:	f800283a 	ret
   88898:	000f883a 	mov	r7,zero
   8889c:	0011883a 	mov	r8,zero
   888a0:	00c00104 	movi	r3,4
   888a4:	28800047 	ldb	r2,1(r5)
   888a8:	10000426 	beq	r2,zero,888bc <__sflags+0x54>
   888ac:	01000ac4 	movi	r4,43
   888b0:	11000e26 	beq	r2,r4,888ec <__sflags+0x84>
   888b4:	28800087 	ldb	r2,2(r5)
   888b8:	11000c26 	beq	r2,r4,888ec <__sflags+0x84>
   888bc:	3a04b03a 	or	r2,r7,r8
   888c0:	30800015 	stw	r2,0(r6)
   888c4:	1805883a 	mov	r2,r3
   888c8:	f800283a 	ret
   888cc:	01c00044 	movi	r7,1
   888d0:	02018004 	movi	r8,1536
   888d4:	00c00204 	movi	r3,8
   888d8:	003ff206 	br	888a4 <__sflags+0x3c>
   888dc:	01c00044 	movi	r7,1
   888e0:	02008204 	movi	r8,520
   888e4:	00c04204 	movi	r3,264
   888e8:	003fee06 	br	888a4 <__sflags+0x3c>
   888ec:	00bffcc4 	movi	r2,-13
   888f0:	1884703a 	and	r2,r3,r2
   888f4:	01c00084 	movi	r7,2
   888f8:	10c00414 	ori	r3,r2,16
   888fc:	3a04b03a 	or	r2,r7,r8
   88900:	30800015 	stw	r2,0(r6)
   88904:	003fef06 	br	888c4 <__sflags+0x5c>

00088908 <_fread_r>:
   88908:	defff504 	addi	sp,sp,-44
   8890c:	dd800715 	stw	r22,28(sp)
   88910:	dc000115 	stw	r16,4(sp)
   88914:	202d883a 	mov	r22,r4
   88918:	2821883a 	mov	r16,r5
   8891c:	3809883a 	mov	r4,r7
   88920:	300b883a 	mov	r5,r6
   88924:	df000915 	stw	fp,36(sp)
   88928:	ddc00815 	stw	r23,32(sp)
   8892c:	dcc00415 	stw	r19,16(sp)
   88930:	dfc00a15 	stw	ra,40(sp)
   88934:	dd400615 	stw	r21,24(sp)
   88938:	dd000515 	stw	r20,20(sp)
   8893c:	dc800315 	stw	r18,12(sp)
   88940:	dc400215 	stw	r17,8(sp)
   88944:	d9800015 	stw	r6,0(sp)
   88948:	3839883a 	mov	fp,r7
   8894c:	0080ba00 	call	80ba0 <__mulsi3>
   88950:	102f883a 	mov	r23,r2
   88954:	dcc00b17 	ldw	r19,44(sp)
   88958:	10005926 	beq	r2,zero,88ac0 <_fread_r+0x1b8>
   8895c:	b0000226 	beq	r22,zero,88968 <_fread_r+0x60>
   88960:	b0800e17 	ldw	r2,56(r22)
   88964:	10005826 	beq	r2,zero,88ac8 <_fread_r+0x1c0>
   88968:	9c400117 	ldw	r17,4(r19)
   8896c:	88005a16 	blt	r17,zero,88ad8 <_fread_r+0x1d0>
   88970:	9880030b 	ldhu	r2,12(r19)
   88974:	8029883a 	mov	r20,r16
   88978:	1080008c 	andi	r2,r2,2
   8897c:	1000221e 	bne	r2,zero,88a08 <_fread_r+0x100>
   88980:	b825883a 	mov	r18,r23
   88984:	00000106 	br	8898c <_fread_r+0x84>
   88988:	9c400117 	ldw	r17,4(r19)
   8898c:	a009883a 	mov	r4,r20
   88990:	880d883a 	mov	r6,r17
   88994:	8c80552e 	bgeu	r17,r18,88aec <_fread_r+0x1e4>
   88998:	99400017 	ldw	r5,0(r19)
   8899c:	a469883a 	add	r20,r20,r17
   889a0:	9465c83a 	sub	r18,r18,r17
   889a4:	008218c0 	call	8218c <memcpy>
   889a8:	98800017 	ldw	r2,0(r19)
   889ac:	b009883a 	mov	r4,r22
   889b0:	980b883a 	mov	r5,r19
   889b4:	1461883a 	add	r16,r2,r17
   889b8:	9c000015 	stw	r16,0(r19)
   889bc:	0082aa40 	call	82aa4 <__srefill_r>
   889c0:	103ff126 	beq	r2,zero,88988 <_fread_r+0x80>
   889c4:	d9400017 	ldw	r5,0(sp)
   889c8:	bc89c83a 	sub	r4,r23,r18
   889cc:	0080b900 	call	80b90 <__udivsi3>
   889d0:	1039883a 	mov	fp,r2
   889d4:	e005883a 	mov	r2,fp
   889d8:	dfc00a17 	ldw	ra,40(sp)
   889dc:	df000917 	ldw	fp,36(sp)
   889e0:	ddc00817 	ldw	r23,32(sp)
   889e4:	dd800717 	ldw	r22,28(sp)
   889e8:	dd400617 	ldw	r21,24(sp)
   889ec:	dd000517 	ldw	r20,20(sp)
   889f0:	dcc00417 	ldw	r19,16(sp)
   889f4:	dc800317 	ldw	r18,12(sp)
   889f8:	dc400217 	ldw	r17,8(sp)
   889fc:	dc000117 	ldw	r16,4(sp)
   88a00:	dec00b04 	addi	sp,sp,44
   88a04:	f800283a 	ret
   88a08:	b825883a 	mov	r18,r23
   88a0c:	8dc03536 	bltu	r17,r23,88ae4 <_fread_r+0x1dc>
   88a10:	99400017 	ldw	r5,0(r19)
   88a14:	a009883a 	mov	r4,r20
   88a18:	900d883a 	mov	r6,r18
   88a1c:	008218c0 	call	8218c <memcpy>
   88a20:	9c000017 	ldw	r16,0(r19)
   88a24:	98800117 	ldw	r2,4(r19)
   88a28:	99400c17 	ldw	r5,48(r19)
   88a2c:	84a1883a 	add	r16,r16,r18
   88a30:	14a3c83a 	sub	r17,r2,r18
   88a34:	a4ab883a 	add	r21,r20,r18
   88a38:	9c400115 	stw	r17,4(r19)
   88a3c:	9c000015 	stw	r16,0(r19)
   88a40:	bca9c83a 	sub	r20,r23,r18
   88a44:	28000826 	beq	r5,zero,88a68 <_fread_r+0x160>
   88a48:	a03fe226 	beq	r20,zero,889d4 <_fread_r+0xcc>
   88a4c:	98801004 	addi	r2,r19,64
   88a50:	28800326 	beq	r5,r2,88a60 <_fread_r+0x158>
   88a54:	b009883a 	mov	r4,r22
   88a58:	0088c800 	call	88c80 <_free_r>
   88a5c:	9c000017 	ldw	r16,0(r19)
   88a60:	98000c15 	stw	zero,48(r19)
   88a64:	00000106 	br	88a6c <_fread_r+0x164>
   88a68:	a03fda26 	beq	r20,zero,889d4 <_fread_r+0xcc>
   88a6c:	9c800417 	ldw	r18,16(r19)
   88a70:	9c400517 	ldw	r17,20(r19)
   88a74:	9d400015 	stw	r21,0(r19)
   88a78:	9d400415 	stw	r21,16(r19)
   88a7c:	9d000515 	stw	r20,20(r19)
   88a80:	b009883a 	mov	r4,r22
   88a84:	980b883a 	mov	r5,r19
   88a88:	0082aa40 	call	82aa4 <__srefill_r>
   88a8c:	98c00117 	ldw	r3,4(r19)
   88a90:	9c800415 	stw	r18,16(r19)
   88a94:	9c400515 	stw	r17,20(r19)
   88a98:	a8eb883a 	add	r21,r21,r3
   88a9c:	9c000015 	stw	r16,0(r19)
   88aa0:	a0e9c83a 	sub	r20,r20,r3
   88aa4:	98000115 	stw	zero,4(r19)
   88aa8:	103fef26 	beq	r2,zero,88a68 <_fread_r+0x160>
   88aac:	d9400017 	ldw	r5,0(sp)
   88ab0:	bd09c83a 	sub	r4,r23,r20
   88ab4:	0080b900 	call	80b90 <__udivsi3>
   88ab8:	1039883a 	mov	fp,r2
   88abc:	003fc506 	br	889d4 <_fread_r+0xcc>
   88ac0:	0039883a 	mov	fp,zero
   88ac4:	003fc306 	br	889d4 <_fread_r+0xcc>
   88ac8:	b009883a 	mov	r4,r22
   88acc:	00885dc0 	call	885dc <__sinit>
   88ad0:	9c400117 	ldw	r17,4(r19)
   88ad4:	883fa60e 	bge	r17,zero,88970 <_fread_r+0x68>
   88ad8:	0023883a 	mov	r17,zero
   88adc:	98000115 	stw	zero,4(r19)
   88ae0:	003fa306 	br	88970 <_fread_r+0x68>
   88ae4:	8825883a 	mov	r18,r17
   88ae8:	003fc906 	br	88a10 <_fread_r+0x108>
   88aec:	99400017 	ldw	r5,0(r19)
   88af0:	900d883a 	mov	r6,r18
   88af4:	008218c0 	call	8218c <memcpy>
   88af8:	98c00117 	ldw	r3,4(r19)
   88afc:	98800017 	ldw	r2,0(r19)
   88b00:	1c87c83a 	sub	r3,r3,r18
   88b04:	1485883a 	add	r2,r2,r18
   88b08:	98800015 	stw	r2,0(r19)
   88b0c:	98c00115 	stw	r3,4(r19)
   88b10:	003fb006 	br	889d4 <_fread_r+0xcc>

00088b14 <fread>:
   88b14:	00800274 	movhi	r2,9
   88b18:	1098bc04 	addi	r2,r2,25328
   88b1c:	2017883a 	mov	r11,r4
   88b20:	11000017 	ldw	r4,0(r2)
   88b24:	defffe04 	addi	sp,sp,-8
   88b28:	3013883a 	mov	r9,r6
   88b2c:	2805883a 	mov	r2,r5
   88b30:	d9c00015 	stw	r7,0(sp)
   88b34:	580b883a 	mov	r5,r11
   88b38:	100d883a 	mov	r6,r2
   88b3c:	480f883a 	mov	r7,r9
   88b40:	dfc00115 	stw	ra,4(sp)
   88b44:	00889080 	call	88908 <_fread_r>
   88b48:	dfc00117 	ldw	ra,4(sp)
   88b4c:	dec00204 	addi	sp,sp,8
   88b50:	f800283a 	ret

00088b54 <_malloc_trim_r>:
   88b54:	defffb04 	addi	sp,sp,-20
   88b58:	dcc00315 	stw	r19,12(sp)
   88b5c:	04c00274 	movhi	r19,9
   88b60:	9cd2e304 	addi	r19,r19,19340
   88b64:	dc800215 	stw	r18,8(sp)
   88b68:	dc400115 	stw	r17,4(sp)
   88b6c:	dc000015 	stw	r16,0(sp)
   88b70:	2823883a 	mov	r17,r5
   88b74:	2025883a 	mov	r18,r4
   88b78:	dfc00415 	stw	ra,16(sp)
   88b7c:	00908e80 	call	908e8 <__malloc_lock>
   88b80:	98800217 	ldw	r2,8(r19)
   88b84:	9009883a 	mov	r4,r18
   88b88:	000b883a 	mov	r5,zero
   88b8c:	10c00117 	ldw	r3,4(r2)
   88b90:	00bfff04 	movi	r2,-4
   88b94:	18a0703a 	and	r16,r3,r2
   88b98:	8463c83a 	sub	r17,r16,r17
   88b9c:	8c43fbc4 	addi	r17,r17,4079
   88ba0:	8822d33a 	srli	r17,r17,12
   88ba4:	0083ffc4 	movi	r2,4095
   88ba8:	8c7fffc4 	addi	r17,r17,-1
   88bac:	8822933a 	slli	r17,r17,12
   88bb0:	1440060e 	bge	r2,r17,88bcc <_malloc_trim_r+0x78>
   88bb4:	0082c840 	call	82c84 <_sbrk_r>
   88bb8:	98c00217 	ldw	r3,8(r19)
   88bbc:	9009883a 	mov	r4,r18
   88bc0:	044bc83a 	sub	r5,zero,r17
   88bc4:	80c7883a 	add	r3,r16,r3
   88bc8:	10c00926 	beq	r2,r3,88bf0 <_malloc_trim_r+0x9c>
   88bcc:	00909080 	call	90908 <__malloc_unlock>
   88bd0:	0005883a 	mov	r2,zero
   88bd4:	dfc00417 	ldw	ra,16(sp)
   88bd8:	dcc00317 	ldw	r19,12(sp)
   88bdc:	dc800217 	ldw	r18,8(sp)
   88be0:	dc400117 	ldw	r17,4(sp)
   88be4:	dc000017 	ldw	r16,0(sp)
   88be8:	dec00504 	addi	sp,sp,20
   88bec:	f800283a 	ret
   88bf0:	9009883a 	mov	r4,r18
   88bf4:	0082c840 	call	82c84 <_sbrk_r>
   88bf8:	844dc83a 	sub	r6,r16,r17
   88bfc:	00ffffc4 	movi	r3,-1
   88c00:	9009883a 	mov	r4,r18
   88c04:	000b883a 	mov	r5,zero
   88c08:	01c00274 	movhi	r7,9
   88c0c:	39dfc804 	addi	r7,r7,32544
   88c10:	31800054 	ori	r6,r6,1
   88c14:	10c00926 	beq	r2,r3,88c3c <_malloc_trim_r+0xe8>
   88c18:	38800017 	ldw	r2,0(r7)
   88c1c:	98c00217 	ldw	r3,8(r19)
   88c20:	9009883a 	mov	r4,r18
   88c24:	1445c83a 	sub	r2,r2,r17
   88c28:	38800015 	stw	r2,0(r7)
   88c2c:	19800115 	stw	r6,4(r3)
   88c30:	00909080 	call	90908 <__malloc_unlock>
   88c34:	00800044 	movi	r2,1
   88c38:	003fe606 	br	88bd4 <_malloc_trim_r+0x80>
   88c3c:	0082c840 	call	82c84 <_sbrk_r>
   88c40:	99800217 	ldw	r6,8(r19)
   88c44:	100f883a 	mov	r7,r2
   88c48:	9009883a 	mov	r4,r18
   88c4c:	1187c83a 	sub	r3,r2,r6
   88c50:	008003c4 	movi	r2,15
   88c54:	19400054 	ori	r5,r3,1
   88c58:	10ffdc0e 	bge	r2,r3,88bcc <_malloc_trim_r+0x78>
   88c5c:	00800274 	movhi	r2,9
   88c60:	1098bf04 	addi	r2,r2,25340
   88c64:	10c00017 	ldw	r3,0(r2)
   88c68:	00800274 	movhi	r2,9
   88c6c:	109fc804 	addi	r2,r2,32544
   88c70:	31400115 	stw	r5,4(r6)
   88c74:	38c7c83a 	sub	r3,r7,r3
   88c78:	10c00015 	stw	r3,0(r2)
   88c7c:	003fd306 	br	88bcc <_malloc_trim_r+0x78>

00088c80 <_free_r>:
   88c80:	defffd04 	addi	sp,sp,-12
   88c84:	dc400115 	stw	r17,4(sp)
   88c88:	dc000015 	stw	r16,0(sp)
   88c8c:	dfc00215 	stw	ra,8(sp)
   88c90:	2821883a 	mov	r16,r5
   88c94:	2023883a 	mov	r17,r4
   88c98:	28005a26 	beq	r5,zero,88e04 <_free_r+0x184>
   88c9c:	00908e80 	call	908e8 <__malloc_lock>
   88ca0:	823ffe04 	addi	r8,r16,-8
   88ca4:	41400117 	ldw	r5,4(r8)
   88ca8:	00bfff84 	movi	r2,-2
   88cac:	02800274 	movhi	r10,9
   88cb0:	5292e304 	addi	r10,r10,19340
   88cb4:	288e703a 	and	r7,r5,r2
   88cb8:	41cd883a 	add	r6,r8,r7
   88cbc:	30c00117 	ldw	r3,4(r6)
   88cc0:	51000217 	ldw	r4,8(r10)
   88cc4:	00bfff04 	movi	r2,-4
   88cc8:	1892703a 	and	r9,r3,r2
   88ccc:	5017883a 	mov	r11,r10
   88cd0:	31006726 	beq	r6,r4,88e70 <_free_r+0x1f0>
   88cd4:	2880004c 	andi	r2,r5,1
   88cd8:	1005003a 	cmpeq	r2,r2,zero
   88cdc:	32400115 	stw	r9,4(r6)
   88ce0:	10001a1e 	bne	r2,zero,88d4c <_free_r+0xcc>
   88ce4:	000b883a 	mov	r5,zero
   88ce8:	3247883a 	add	r3,r6,r9
   88cec:	18800117 	ldw	r2,4(r3)
   88cf0:	1080004c 	andi	r2,r2,1
   88cf4:	1000231e 	bne	r2,zero,88d84 <_free_r+0x104>
   88cf8:	280ac03a 	cmpne	r5,r5,zero
   88cfc:	3a4f883a 	add	r7,r7,r9
   88d00:	2800451e 	bne	r5,zero,88e18 <_free_r+0x198>
   88d04:	31000217 	ldw	r4,8(r6)
   88d08:	00800274 	movhi	r2,9
   88d0c:	1092e504 	addi	r2,r2,19348
   88d10:	20807b26 	beq	r4,r2,88f00 <_free_r+0x280>
   88d14:	30800317 	ldw	r2,12(r6)
   88d18:	3a07883a 	add	r3,r7,r8
   88d1c:	19c00015 	stw	r7,0(r3)
   88d20:	11000215 	stw	r4,8(r2)
   88d24:	20800315 	stw	r2,12(r4)
   88d28:	38800054 	ori	r2,r7,1
   88d2c:	40800115 	stw	r2,4(r8)
   88d30:	28001a26 	beq	r5,zero,88d9c <_free_r+0x11c>
   88d34:	8809883a 	mov	r4,r17
   88d38:	dfc00217 	ldw	ra,8(sp)
   88d3c:	dc400117 	ldw	r17,4(sp)
   88d40:	dc000017 	ldw	r16,0(sp)
   88d44:	dec00304 	addi	sp,sp,12
   88d48:	00909081 	jmpi	90908 <__malloc_unlock>
   88d4c:	80bffe17 	ldw	r2,-8(r16)
   88d50:	50c00204 	addi	r3,r10,8
   88d54:	4091c83a 	sub	r8,r8,r2
   88d58:	41000217 	ldw	r4,8(r8)
   88d5c:	388f883a 	add	r7,r7,r2
   88d60:	20c06126 	beq	r4,r3,88ee8 <_free_r+0x268>
   88d64:	40800317 	ldw	r2,12(r8)
   88d68:	3247883a 	add	r3,r6,r9
   88d6c:	000b883a 	mov	r5,zero
   88d70:	11000215 	stw	r4,8(r2)
   88d74:	20800315 	stw	r2,12(r4)
   88d78:	18800117 	ldw	r2,4(r3)
   88d7c:	1080004c 	andi	r2,r2,1
   88d80:	103fdd26 	beq	r2,zero,88cf8 <_free_r+0x78>
   88d84:	38800054 	ori	r2,r7,1
   88d88:	3a07883a 	add	r3,r7,r8
   88d8c:	280ac03a 	cmpne	r5,r5,zero
   88d90:	40800115 	stw	r2,4(r8)
   88d94:	19c00015 	stw	r7,0(r3)
   88d98:	283fe61e 	bne	r5,zero,88d34 <_free_r+0xb4>
   88d9c:	00807fc4 	movi	r2,511
   88da0:	11c01f2e 	bgeu	r2,r7,88e20 <_free_r+0x1a0>
   88da4:	3806d27a 	srli	r3,r7,9
   88da8:	1800481e 	bne	r3,zero,88ecc <_free_r+0x24c>
   88dac:	3804d0fa 	srli	r2,r7,3
   88db0:	100690fa 	slli	r3,r2,3
   88db4:	1acd883a 	add	r6,r3,r11
   88db8:	31400217 	ldw	r5,8(r6)
   88dbc:	31405926 	beq	r6,r5,88f24 <_free_r+0x2a4>
   88dc0:	28800117 	ldw	r2,4(r5)
   88dc4:	00ffff04 	movi	r3,-4
   88dc8:	10c4703a 	and	r2,r2,r3
   88dcc:	3880022e 	bgeu	r7,r2,88dd8 <_free_r+0x158>
   88dd0:	29400217 	ldw	r5,8(r5)
   88dd4:	317ffa1e 	bne	r6,r5,88dc0 <_free_r+0x140>
   88dd8:	29800317 	ldw	r6,12(r5)
   88ddc:	41800315 	stw	r6,12(r8)
   88de0:	41400215 	stw	r5,8(r8)
   88de4:	8809883a 	mov	r4,r17
   88de8:	2a000315 	stw	r8,12(r5)
   88dec:	32000215 	stw	r8,8(r6)
   88df0:	dfc00217 	ldw	ra,8(sp)
   88df4:	dc400117 	ldw	r17,4(sp)
   88df8:	dc000017 	ldw	r16,0(sp)
   88dfc:	dec00304 	addi	sp,sp,12
   88e00:	00909081 	jmpi	90908 <__malloc_unlock>
   88e04:	dfc00217 	ldw	ra,8(sp)
   88e08:	dc400117 	ldw	r17,4(sp)
   88e0c:	dc000017 	ldw	r16,0(sp)
   88e10:	dec00304 	addi	sp,sp,12
   88e14:	f800283a 	ret
   88e18:	31000217 	ldw	r4,8(r6)
   88e1c:	003fbd06 	br	88d14 <_free_r+0x94>
   88e20:	3806d0fa 	srli	r3,r7,3
   88e24:	00800044 	movi	r2,1
   88e28:	51400117 	ldw	r5,4(r10)
   88e2c:	180890fa 	slli	r4,r3,3
   88e30:	1807d0ba 	srai	r3,r3,2
   88e34:	22c9883a 	add	r4,r4,r11
   88e38:	21800217 	ldw	r6,8(r4)
   88e3c:	10c4983a 	sll	r2,r2,r3
   88e40:	41000315 	stw	r4,12(r8)
   88e44:	41800215 	stw	r6,8(r8)
   88e48:	288ab03a 	or	r5,r5,r2
   88e4c:	22000215 	stw	r8,8(r4)
   88e50:	8809883a 	mov	r4,r17
   88e54:	51400115 	stw	r5,4(r10)
   88e58:	32000315 	stw	r8,12(r6)
   88e5c:	dfc00217 	ldw	ra,8(sp)
   88e60:	dc400117 	ldw	r17,4(sp)
   88e64:	dc000017 	ldw	r16,0(sp)
   88e68:	dec00304 	addi	sp,sp,12
   88e6c:	00909081 	jmpi	90908 <__malloc_unlock>
   88e70:	2880004c 	andi	r2,r5,1
   88e74:	3a4d883a 	add	r6,r7,r9
   88e78:	1000071e 	bne	r2,zero,88e98 <_free_r+0x218>
   88e7c:	80bffe17 	ldw	r2,-8(r16)
   88e80:	4091c83a 	sub	r8,r8,r2
   88e84:	41000317 	ldw	r4,12(r8)
   88e88:	40c00217 	ldw	r3,8(r8)
   88e8c:	308d883a 	add	r6,r6,r2
   88e90:	20c00215 	stw	r3,8(r4)
   88e94:	19000315 	stw	r4,12(r3)
   88e98:	00800274 	movhi	r2,9
   88e9c:	1098be04 	addi	r2,r2,25336
   88ea0:	11000017 	ldw	r4,0(r2)
   88ea4:	30c00054 	ori	r3,r6,1
   88ea8:	52000215 	stw	r8,8(r10)
   88eac:	40c00115 	stw	r3,4(r8)
   88eb0:	313fa036 	bltu	r6,r4,88d34 <_free_r+0xb4>
   88eb4:	00800274 	movhi	r2,9
   88eb8:	109fba04 	addi	r2,r2,32488
   88ebc:	11400017 	ldw	r5,0(r2)
   88ec0:	8809883a 	mov	r4,r17
   88ec4:	0088b540 	call	88b54 <_malloc_trim_r>
   88ec8:	003f9a06 	br	88d34 <_free_r+0xb4>
   88ecc:	00800104 	movi	r2,4
   88ed0:	10c0072e 	bgeu	r2,r3,88ef0 <_free_r+0x270>
   88ed4:	00800504 	movi	r2,20
   88ed8:	10c01936 	bltu	r2,r3,88f40 <_free_r+0x2c0>
   88edc:	188016c4 	addi	r2,r3,91
   88ee0:	100690fa 	slli	r3,r2,3
   88ee4:	003fb306 	br	88db4 <_free_r+0x134>
   88ee8:	01400044 	movi	r5,1
   88eec:	003f7e06 	br	88ce8 <_free_r+0x68>
   88ef0:	3804d1ba 	srli	r2,r7,6
   88ef4:	10800e04 	addi	r2,r2,56
   88ef8:	100690fa 	slli	r3,r2,3
   88efc:	003fad06 	br	88db4 <_free_r+0x134>
   88f00:	22000315 	stw	r8,12(r4)
   88f04:	22000215 	stw	r8,8(r4)
   88f08:	3a05883a 	add	r2,r7,r8
   88f0c:	38c00054 	ori	r3,r7,1
   88f10:	11c00015 	stw	r7,0(r2)
   88f14:	41000215 	stw	r4,8(r8)
   88f18:	40c00115 	stw	r3,4(r8)
   88f1c:	41000315 	stw	r4,12(r8)
   88f20:	003f8406 	br	88d34 <_free_r+0xb4>
   88f24:	1005d0ba 	srai	r2,r2,2
   88f28:	00c00044 	movi	r3,1
   88f2c:	51000117 	ldw	r4,4(r10)
   88f30:	1886983a 	sll	r3,r3,r2
   88f34:	20c8b03a 	or	r4,r4,r3
   88f38:	51000115 	stw	r4,4(r10)
   88f3c:	003fa706 	br	88ddc <_free_r+0x15c>
   88f40:	00801504 	movi	r2,84
   88f44:	10c00436 	bltu	r2,r3,88f58 <_free_r+0x2d8>
   88f48:	3804d33a 	srli	r2,r7,12
   88f4c:	10801b84 	addi	r2,r2,110
   88f50:	100690fa 	slli	r3,r2,3
   88f54:	003f9706 	br	88db4 <_free_r+0x134>
   88f58:	00805504 	movi	r2,340
   88f5c:	10c00436 	bltu	r2,r3,88f70 <_free_r+0x2f0>
   88f60:	3804d3fa 	srli	r2,r7,15
   88f64:	10801dc4 	addi	r2,r2,119
   88f68:	100690fa 	slli	r3,r2,3
   88f6c:	003f9106 	br	88db4 <_free_r+0x134>
   88f70:	00815504 	movi	r2,1364
   88f74:	10c0032e 	bgeu	r2,r3,88f84 <_free_r+0x304>
   88f78:	00801f84 	movi	r2,126
   88f7c:	00c0fc04 	movi	r3,1008
   88f80:	003f8c06 	br	88db4 <_free_r+0x134>
   88f84:	3804d4ba 	srli	r2,r7,18
   88f88:	10801f04 	addi	r2,r2,124
   88f8c:	100690fa 	slli	r3,r2,3
   88f90:	003f8806 	br	88db4 <_free_r+0x134>

00088f94 <_fwalk_reent>:
   88f94:	defff704 	addi	sp,sp,-36
   88f98:	dcc00315 	stw	r19,12(sp)
   88f9c:	24c0b804 	addi	r19,r4,736
   88fa0:	dd800615 	stw	r22,24(sp)
   88fa4:	dd400515 	stw	r21,20(sp)
   88fa8:	dfc00815 	stw	ra,32(sp)
   88fac:	ddc00715 	stw	r23,28(sp)
   88fb0:	dd000415 	stw	r20,16(sp)
   88fb4:	dc800215 	stw	r18,8(sp)
   88fb8:	dc400115 	stw	r17,4(sp)
   88fbc:	dc000015 	stw	r16,0(sp)
   88fc0:	202b883a 	mov	r21,r4
   88fc4:	282d883a 	mov	r22,r5
   88fc8:	00885cc0 	call	885cc <__sfp_lock_acquire>
   88fcc:	98002126 	beq	r19,zero,89054 <_fwalk_reent+0xc0>
   88fd0:	002f883a 	mov	r23,zero
   88fd4:	9c800117 	ldw	r18,4(r19)
   88fd8:	9c000217 	ldw	r16,8(r19)
   88fdc:	90bfffc4 	addi	r2,r18,-1
   88fe0:	10000d16 	blt	r2,zero,89018 <_fwalk_reent+0x84>
   88fe4:	0023883a 	mov	r17,zero
   88fe8:	053fffc4 	movi	r20,-1
   88fec:	8080030f 	ldh	r2,12(r16)
   88ff0:	8c400044 	addi	r17,r17,1
   88ff4:	10000626 	beq	r2,zero,89010 <_fwalk_reent+0x7c>
   88ff8:	8080038f 	ldh	r2,14(r16)
   88ffc:	800b883a 	mov	r5,r16
   89000:	a809883a 	mov	r4,r21
   89004:	15000226 	beq	r2,r20,89010 <_fwalk_reent+0x7c>
   89008:	b03ee83a 	callr	r22
   8900c:	b8aeb03a 	or	r23,r23,r2
   89010:	84001704 	addi	r16,r16,92
   89014:	947ff51e 	bne	r18,r17,88fec <_fwalk_reent+0x58>
   89018:	9cc00017 	ldw	r19,0(r19)
   8901c:	983fed1e 	bne	r19,zero,88fd4 <_fwalk_reent+0x40>
   89020:	00885d00 	call	885d0 <__sfp_lock_release>
   89024:	b805883a 	mov	r2,r23
   89028:	dfc00817 	ldw	ra,32(sp)
   8902c:	ddc00717 	ldw	r23,28(sp)
   89030:	dd800617 	ldw	r22,24(sp)
   89034:	dd400517 	ldw	r21,20(sp)
   89038:	dd000417 	ldw	r20,16(sp)
   8903c:	dcc00317 	ldw	r19,12(sp)
   89040:	dc800217 	ldw	r18,8(sp)
   89044:	dc400117 	ldw	r17,4(sp)
   89048:	dc000017 	ldw	r16,0(sp)
   8904c:	dec00904 	addi	sp,sp,36
   89050:	f800283a 	ret
   89054:	002f883a 	mov	r23,zero
   89058:	003ff106 	br	89020 <_fwalk_reent+0x8c>

0008905c <_fwalk>:
   8905c:	defff804 	addi	sp,sp,-32
   89060:	dcc00315 	stw	r19,12(sp)
   89064:	24c0b804 	addi	r19,r4,736
   89068:	dd400515 	stw	r21,20(sp)
   8906c:	dfc00715 	stw	ra,28(sp)
   89070:	dd800615 	stw	r22,24(sp)
   89074:	dd000415 	stw	r20,16(sp)
   89078:	dc800215 	stw	r18,8(sp)
   8907c:	dc400115 	stw	r17,4(sp)
   89080:	dc000015 	stw	r16,0(sp)
   89084:	282b883a 	mov	r21,r5
   89088:	00885cc0 	call	885cc <__sfp_lock_acquire>
   8908c:	98001f26 	beq	r19,zero,8910c <_fwalk+0xb0>
   89090:	002d883a 	mov	r22,zero
   89094:	9c800117 	ldw	r18,4(r19)
   89098:	9c000217 	ldw	r16,8(r19)
   8909c:	90bfffc4 	addi	r2,r18,-1
   890a0:	10000c16 	blt	r2,zero,890d4 <_fwalk+0x78>
   890a4:	0023883a 	mov	r17,zero
   890a8:	053fffc4 	movi	r20,-1
   890ac:	8080030f 	ldh	r2,12(r16)
   890b0:	8c400044 	addi	r17,r17,1
   890b4:	10000526 	beq	r2,zero,890cc <_fwalk+0x70>
   890b8:	8080038f 	ldh	r2,14(r16)
   890bc:	8009883a 	mov	r4,r16
   890c0:	15000226 	beq	r2,r20,890cc <_fwalk+0x70>
   890c4:	a83ee83a 	callr	r21
   890c8:	b0acb03a 	or	r22,r22,r2
   890cc:	84001704 	addi	r16,r16,92
   890d0:	947ff61e 	bne	r18,r17,890ac <_fwalk+0x50>
   890d4:	9cc00017 	ldw	r19,0(r19)
   890d8:	983fee1e 	bne	r19,zero,89094 <_fwalk+0x38>
   890dc:	00885d00 	call	885d0 <__sfp_lock_release>
   890e0:	b005883a 	mov	r2,r22
   890e4:	dfc00717 	ldw	ra,28(sp)
   890e8:	dd800617 	ldw	r22,24(sp)
   890ec:	dd400517 	ldw	r21,20(sp)
   890f0:	dd000417 	ldw	r20,16(sp)
   890f4:	dcc00317 	ldw	r19,12(sp)
   890f8:	dc800217 	ldw	r18,8(sp)
   890fc:	dc400117 	ldw	r17,4(sp)
   89100:	dc000017 	ldw	r16,0(sp)
   89104:	dec00804 	addi	sp,sp,32
   89108:	f800283a 	ret
   8910c:	002d883a 	mov	r22,zero
   89110:	003ff206 	br	890dc <_fwalk+0x80>

00089114 <_isatty_r>:
   89114:	defffd04 	addi	sp,sp,-12
   89118:	dc000015 	stw	r16,0(sp)
   8911c:	04000274 	movhi	r16,9
   89120:	841fb904 	addi	r16,r16,32484
   89124:	dc400115 	stw	r17,4(sp)
   89128:	80000015 	stw	zero,0(r16)
   8912c:	2023883a 	mov	r17,r4
   89130:	2809883a 	mov	r4,r5
   89134:	dfc00215 	stw	ra,8(sp)
   89138:	00905180 	call	90518 <isatty>
   8913c:	1007883a 	mov	r3,r2
   89140:	00bfffc4 	movi	r2,-1
   89144:	18800626 	beq	r3,r2,89160 <_isatty_r+0x4c>
   89148:	1805883a 	mov	r2,r3
   8914c:	dfc00217 	ldw	ra,8(sp)
   89150:	dc400117 	ldw	r17,4(sp)
   89154:	dc000017 	ldw	r16,0(sp)
   89158:	dec00304 	addi	sp,sp,12
   8915c:	f800283a 	ret
   89160:	80800017 	ldw	r2,0(r16)
   89164:	103ff826 	beq	r2,zero,89148 <_isatty_r+0x34>
   89168:	88800015 	stw	r2,0(r17)
   8916c:	1805883a 	mov	r2,r3
   89170:	dfc00217 	ldw	ra,8(sp)
   89174:	dc400117 	ldw	r17,4(sp)
   89178:	dc000017 	ldw	r16,0(sp)
   8917c:	dec00304 	addi	sp,sp,12
   89180:	f800283a 	ret

00089184 <iswspace>:
   89184:	00803fc4 	movi	r2,255
   89188:	0007883a 	mov	r3,zero
   8918c:	11000636 	bltu	r2,r4,891a8 <iswspace+0x24>
   89190:	00800274 	movhi	r2,9
   89194:	1098c004 	addi	r2,r2,25344
   89198:	10c00017 	ldw	r3,0(r2)
   8919c:	1907883a 	add	r3,r3,r4
   891a0:	18800003 	ldbu	r2,0(r3)
   891a4:	10c0020c 	andi	r3,r2,8
   891a8:	1805883a 	mov	r2,r3
   891ac:	f800283a 	ret

000891b0 <__locale_charset>:
   891b0:	d0a00617 	ldw	r2,-32744(gp)
   891b4:	f800283a 	ret

000891b8 <_localeconv_r>:
   891b8:	00800274 	movhi	r2,9
   891bc:	10912404 	addi	r2,r2,17552
   891c0:	f800283a 	ret

000891c4 <localeconv>:
   891c4:	00800274 	movhi	r2,9
   891c8:	1098bc04 	addi	r2,r2,25328
   891cc:	11000017 	ldw	r4,0(r2)
   891d0:	00891b81 	jmpi	891b8 <_localeconv_r>

000891d4 <_setlocale_r>:
   891d4:	defffc04 	addi	sp,sp,-16
   891d8:	00c00274 	movhi	r3,9
   891dc:	18d04f04 	addi	r3,r3,16700
   891e0:	dc800215 	stw	r18,8(sp)
   891e4:	dc400115 	stw	r17,4(sp)
   891e8:	dc000015 	stw	r16,0(sp)
   891ec:	2023883a 	mov	r17,r4
   891f0:	2825883a 	mov	r18,r5
   891f4:	dfc00315 	stw	ra,12(sp)
   891f8:	3021883a 	mov	r16,r6
   891fc:	3009883a 	mov	r4,r6
   89200:	180b883a 	mov	r5,r3
   89204:	30000926 	beq	r6,zero,8922c <_setlocale_r+0x58>
   89208:	0082ebc0 	call	82ebc <strcmp>
   8920c:	8009883a 	mov	r4,r16
   89210:	01400274 	movhi	r5,9
   89214:	29506004 	addi	r5,r5,16768
   89218:	10000b1e 	bne	r2,zero,89248 <_setlocale_r+0x74>
   8921c:	8c000d15 	stw	r16,52(r17)
   89220:	8c800c15 	stw	r18,48(r17)
   89224:	00c00274 	movhi	r3,9
   89228:	18d04f04 	addi	r3,r3,16700
   8922c:	1805883a 	mov	r2,r3
   89230:	dfc00317 	ldw	ra,12(sp)
   89234:	dc800217 	ldw	r18,8(sp)
   89238:	dc400117 	ldw	r17,4(sp)
   8923c:	dc000017 	ldw	r16,0(sp)
   89240:	dec00404 	addi	sp,sp,16
   89244:	f800283a 	ret
   89248:	0082ebc0 	call	82ebc <strcmp>
   8924c:	0007883a 	mov	r3,zero
   89250:	103ff226 	beq	r2,zero,8921c <_setlocale_r+0x48>
   89254:	003ff506 	br	8922c <_setlocale_r+0x58>

00089258 <setlocale>:
   89258:	01800274 	movhi	r6,9
   8925c:	3198bc04 	addi	r6,r6,25328
   89260:	2007883a 	mov	r3,r4
   89264:	31000017 	ldw	r4,0(r6)
   89268:	280d883a 	mov	r6,r5
   8926c:	180b883a 	mov	r5,r3
   89270:	00891d41 	jmpi	891d4 <_setlocale_r>

00089274 <_lseek_r>:
   89274:	defffd04 	addi	sp,sp,-12
   89278:	dc000015 	stw	r16,0(sp)
   8927c:	04000274 	movhi	r16,9
   89280:	841fb904 	addi	r16,r16,32484
   89284:	dc400115 	stw	r17,4(sp)
   89288:	80000015 	stw	zero,0(r16)
   8928c:	2023883a 	mov	r17,r4
   89290:	2809883a 	mov	r4,r5
   89294:	300b883a 	mov	r5,r6
   89298:	380d883a 	mov	r6,r7
   8929c:	dfc00215 	stw	ra,8(sp)
   892a0:	00907280 	call	90728 <lseek>
   892a4:	1007883a 	mov	r3,r2
   892a8:	00bfffc4 	movi	r2,-1
   892ac:	18800626 	beq	r3,r2,892c8 <_lseek_r+0x54>
   892b0:	1805883a 	mov	r2,r3
   892b4:	dfc00217 	ldw	ra,8(sp)
   892b8:	dc400117 	ldw	r17,4(sp)
   892bc:	dc000017 	ldw	r16,0(sp)
   892c0:	dec00304 	addi	sp,sp,12
   892c4:	f800283a 	ret
   892c8:	80800017 	ldw	r2,0(r16)
   892cc:	103ff826 	beq	r2,zero,892b0 <_lseek_r+0x3c>
   892d0:	88800015 	stw	r2,0(r17)
   892d4:	1805883a 	mov	r2,r3
   892d8:	dfc00217 	ldw	ra,8(sp)
   892dc:	dc400117 	ldw	r17,4(sp)
   892e0:	dc000017 	ldw	r16,0(sp)
   892e4:	dec00304 	addi	sp,sp,12
   892e8:	f800283a 	ret

000892ec <_mbrtowc_r>:
   892ec:	defffc04 	addi	sp,sp,-16
   892f0:	dc400215 	stw	r17,8(sp)
   892f4:	dc000115 	stw	r16,4(sp)
   892f8:	dfc00315 	stw	ra,12(sp)
   892fc:	dc000417 	ldw	r16,16(sp)
   89300:	2023883a 	mov	r17,r4
   89304:	30000f26 	beq	r6,zero,89344 <_mbrtowc_r+0x58>
   89308:	dc000015 	stw	r16,0(sp)
   8930c:	00893ac0 	call	893ac <_mbtowc_r>
   89310:	1007883a 	mov	r3,r2
   89314:	00bfffc4 	movi	r2,-1
   89318:	1809883a 	mov	r4,r3
   8931c:	1880111e 	bne	r3,r2,89364 <_mbrtowc_r+0x78>
   89320:	80000015 	stw	zero,0(r16)
   89324:	00802284 	movi	r2,138
   89328:	88800015 	stw	r2,0(r17)
   8932c:	2005883a 	mov	r2,r4
   89330:	dfc00317 	ldw	ra,12(sp)
   89334:	dc400217 	ldw	r17,8(sp)
   89338:	dc000117 	ldw	r16,4(sp)
   8933c:	dec00404 	addi	sp,sp,16
   89340:	f800283a 	ret
   89344:	000b883a 	mov	r5,zero
   89348:	01800274 	movhi	r6,9
   8934c:	31906004 	addi	r6,r6,16768
   89350:	01c00044 	movi	r7,1
   89354:	dc000015 	stw	r16,0(sp)
   89358:	00893ac0 	call	893ac <_mbtowc_r>
   8935c:	1007883a 	mov	r3,r2
   89360:	003fec06 	br	89314 <_mbrtowc_r+0x28>
   89364:	1809883a 	mov	r4,r3
   89368:	003ff006 	br	8932c <_mbrtowc_r+0x40>

0008936c <mbrtowc>:
   8936c:	00800274 	movhi	r2,9
   89370:	1098bc04 	addi	r2,r2,25328
   89374:	2017883a 	mov	r11,r4
   89378:	11000017 	ldw	r4,0(r2)
   8937c:	defffe04 	addi	sp,sp,-8
   89380:	3013883a 	mov	r9,r6
   89384:	2805883a 	mov	r2,r5
   89388:	d9c00015 	stw	r7,0(sp)
   8938c:	580b883a 	mov	r5,r11
   89390:	100d883a 	mov	r6,r2
   89394:	480f883a 	mov	r7,r9
   89398:	dfc00115 	stw	ra,4(sp)
   8939c:	00892ec0 	call	892ec <_mbrtowc_r>
   893a0:	dfc00117 	ldw	ra,4(sp)
   893a4:	dec00204 	addi	sp,sp,8
   893a8:	f800283a 	ret

000893ac <_mbtowc_r>:
   893ac:	deffff04 	addi	sp,sp,-4
   893b0:	0005883a 	mov	r2,zero
   893b4:	28000326 	beq	r5,zero,893c4 <_mbtowc_r+0x18>
   893b8:	3000041e 	bne	r6,zero,893cc <_mbtowc_r+0x20>
   893bc:	dec00104 	addi	sp,sp,4
   893c0:	f800283a 	ret
   893c4:	d80b883a 	mov	r5,sp
   893c8:	303ffc26 	beq	r6,zero,893bc <_mbtowc_r+0x10>
   893cc:	00bfff84 	movi	r2,-2
   893d0:	383ffa26 	beq	r7,zero,893bc <_mbtowc_r+0x10>
   893d4:	30800003 	ldbu	r2,0(r6)
   893d8:	28800015 	stw	r2,0(r5)
   893dc:	30c00003 	ldbu	r3,0(r6)
   893e0:	1804c03a 	cmpne	r2,r3,zero
   893e4:	dec00104 	addi	sp,sp,4
   893e8:	f800283a 	ret

000893ec <memset>:
   893ec:	008000c4 	movi	r2,3
   893f0:	29403fcc 	andi	r5,r5,255
   893f4:	2007883a 	mov	r3,r4
   893f8:	1180022e 	bgeu	r2,r6,89404 <memset+0x18>
   893fc:	2084703a 	and	r2,r4,r2
   89400:	10000826 	beq	r2,zero,89424 <memset+0x38>
   89404:	30000526 	beq	r6,zero,8941c <memset+0x30>
   89408:	2805883a 	mov	r2,r5
   8940c:	30cd883a 	add	r6,r6,r3
   89410:	18800005 	stb	r2,0(r3)
   89414:	18c00044 	addi	r3,r3,1
   89418:	19bffd1e 	bne	r3,r6,89410 <memset+0x24>
   8941c:	2005883a 	mov	r2,r4
   89420:	f800283a 	ret
   89424:	2804923a 	slli	r2,r5,8
   89428:	020003c4 	movi	r8,15
   8942c:	200f883a 	mov	r7,r4
   89430:	2884b03a 	or	r2,r5,r2
   89434:	1006943a 	slli	r3,r2,16
   89438:	10c6b03a 	or	r3,r2,r3
   8943c:	41800a2e 	bgeu	r8,r6,89468 <memset+0x7c>
   89440:	4005883a 	mov	r2,r8
   89444:	31bffc04 	addi	r6,r6,-16
   89448:	38c00015 	stw	r3,0(r7)
   8944c:	38c00115 	stw	r3,4(r7)
   89450:	38c00215 	stw	r3,8(r7)
   89454:	38c00315 	stw	r3,12(r7)
   89458:	39c00404 	addi	r7,r7,16
   8945c:	11bff936 	bltu	r2,r6,89444 <memset+0x58>
   89460:	008000c4 	movi	r2,3
   89464:	1180052e 	bgeu	r2,r6,8947c <memset+0x90>
   89468:	31bfff04 	addi	r6,r6,-4
   8946c:	008000c4 	movi	r2,3
   89470:	38c00015 	stw	r3,0(r7)
   89474:	39c00104 	addi	r7,r7,4
   89478:	11bffb36 	bltu	r2,r6,89468 <memset+0x7c>
   8947c:	3807883a 	mov	r3,r7
   89480:	003fe006 	br	89404 <memset+0x18>

00089484 <_Bfree>:
   89484:	28000826 	beq	r5,zero,894a8 <_Bfree+0x24>
   89488:	28800117 	ldw	r2,4(r5)
   8948c:	21001317 	ldw	r4,76(r4)
   89490:	1085883a 	add	r2,r2,r2
   89494:	1085883a 	add	r2,r2,r2
   89498:	1105883a 	add	r2,r2,r4
   8949c:	10c00017 	ldw	r3,0(r2)
   894a0:	28c00015 	stw	r3,0(r5)
   894a4:	11400015 	stw	r5,0(r2)
   894a8:	f800283a 	ret

000894ac <__hi0bits>:
   894ac:	20bfffec 	andhi	r2,r4,65535
   894b0:	10001426 	beq	r2,zero,89504 <__hi0bits+0x58>
   894b4:	0007883a 	mov	r3,zero
   894b8:	20bfc02c 	andhi	r2,r4,65280
   894bc:	1000021e 	bne	r2,zero,894c8 <__hi0bits+0x1c>
   894c0:	2008923a 	slli	r4,r4,8
   894c4:	18c00204 	addi	r3,r3,8
   894c8:	20bc002c 	andhi	r2,r4,61440
   894cc:	1000021e 	bne	r2,zero,894d8 <__hi0bits+0x2c>
   894d0:	2008913a 	slli	r4,r4,4
   894d4:	18c00104 	addi	r3,r3,4
   894d8:	20b0002c 	andhi	r2,r4,49152
   894dc:	1000031e 	bne	r2,zero,894ec <__hi0bits+0x40>
   894e0:	2105883a 	add	r2,r4,r4
   894e4:	18c00084 	addi	r3,r3,2
   894e8:	1089883a 	add	r4,r2,r2
   894ec:	20000316 	blt	r4,zero,894fc <__hi0bits+0x50>
   894f0:	2090002c 	andhi	r2,r4,16384
   894f4:	10000626 	beq	r2,zero,89510 <__hi0bits+0x64>
   894f8:	18c00044 	addi	r3,r3,1
   894fc:	1805883a 	mov	r2,r3
   89500:	f800283a 	ret
   89504:	2008943a 	slli	r4,r4,16
   89508:	00c00404 	movi	r3,16
   8950c:	003fea06 	br	894b8 <__hi0bits+0xc>
   89510:	00c00804 	movi	r3,32
   89514:	1805883a 	mov	r2,r3
   89518:	f800283a 	ret

0008951c <__lo0bits>:
   8951c:	20c00017 	ldw	r3,0(r4)
   89520:	188001cc 	andi	r2,r3,7
   89524:	10000a26 	beq	r2,zero,89550 <__lo0bits+0x34>
   89528:	1880004c 	andi	r2,r3,1
   8952c:	1005003a 	cmpeq	r2,r2,zero
   89530:	10002126 	beq	r2,zero,895b8 <__lo0bits+0x9c>
   89534:	1880008c 	andi	r2,r3,2
   89538:	1000251e 	bne	r2,zero,895d0 <__lo0bits+0xb4>
   8953c:	1804d0ba 	srli	r2,r3,2
   89540:	01400084 	movi	r5,2
   89544:	20800015 	stw	r2,0(r4)
   89548:	2805883a 	mov	r2,r5
   8954c:	f800283a 	ret
   89550:	18bfffcc 	andi	r2,r3,65535
   89554:	10001526 	beq	r2,zero,895ac <__lo0bits+0x90>
   89558:	000b883a 	mov	r5,zero
   8955c:	18803fcc 	andi	r2,r3,255
   89560:	1000021e 	bne	r2,zero,8956c <__lo0bits+0x50>
   89564:	1806d23a 	srli	r3,r3,8
   89568:	29400204 	addi	r5,r5,8
   8956c:	188003cc 	andi	r2,r3,15
   89570:	1000021e 	bne	r2,zero,8957c <__lo0bits+0x60>
   89574:	1806d13a 	srli	r3,r3,4
   89578:	29400104 	addi	r5,r5,4
   8957c:	188000cc 	andi	r2,r3,3
   89580:	1000021e 	bne	r2,zero,8958c <__lo0bits+0x70>
   89584:	1806d0ba 	srli	r3,r3,2
   89588:	29400084 	addi	r5,r5,2
   8958c:	1880004c 	andi	r2,r3,1
   89590:	1000031e 	bne	r2,zero,895a0 <__lo0bits+0x84>
   89594:	1806d07a 	srli	r3,r3,1
   89598:	18000a26 	beq	r3,zero,895c4 <__lo0bits+0xa8>
   8959c:	29400044 	addi	r5,r5,1
   895a0:	2805883a 	mov	r2,r5
   895a4:	20c00015 	stw	r3,0(r4)
   895a8:	f800283a 	ret
   895ac:	1806d43a 	srli	r3,r3,16
   895b0:	01400404 	movi	r5,16
   895b4:	003fe906 	br	8955c <__lo0bits+0x40>
   895b8:	000b883a 	mov	r5,zero
   895bc:	2805883a 	mov	r2,r5
   895c0:	f800283a 	ret
   895c4:	01400804 	movi	r5,32
   895c8:	2805883a 	mov	r2,r5
   895cc:	f800283a 	ret
   895d0:	1804d07a 	srli	r2,r3,1
   895d4:	01400044 	movi	r5,1
   895d8:	20800015 	stw	r2,0(r4)
   895dc:	003fda06 	br	89548 <__lo0bits+0x2c>

000895e0 <__mcmp>:
   895e0:	20800417 	ldw	r2,16(r4)
   895e4:	28c00417 	ldw	r3,16(r5)
   895e8:	10cfc83a 	sub	r7,r2,r3
   895ec:	38000c1e 	bne	r7,zero,89620 <__mcmp+0x40>
   895f0:	18c5883a 	add	r2,r3,r3
   895f4:	1085883a 	add	r2,r2,r2
   895f8:	10c00504 	addi	r3,r2,20
   895fc:	21000504 	addi	r4,r4,20
   89600:	28cb883a 	add	r5,r5,r3
   89604:	2085883a 	add	r2,r4,r2
   89608:	10bfff04 	addi	r2,r2,-4
   8960c:	297fff04 	addi	r5,r5,-4
   89610:	11800017 	ldw	r6,0(r2)
   89614:	28c00017 	ldw	r3,0(r5)
   89618:	30c0031e 	bne	r6,r3,89628 <__mcmp+0x48>
   8961c:	20bffa36 	bltu	r4,r2,89608 <__mcmp+0x28>
   89620:	3805883a 	mov	r2,r7
   89624:	f800283a 	ret
   89628:	30c00336 	bltu	r6,r3,89638 <__mcmp+0x58>
   8962c:	01c00044 	movi	r7,1
   89630:	3805883a 	mov	r2,r7
   89634:	f800283a 	ret
   89638:	01ffffc4 	movi	r7,-1
   8963c:	003ff806 	br	89620 <__mcmp+0x40>

00089640 <__ulp>:
   89640:	295ffc2c 	andhi	r5,r5,32752
   89644:	013f3034 	movhi	r4,64704
   89648:	290b883a 	add	r5,r5,r4
   8964c:	0145c83a 	sub	r2,zero,r5
   89650:	1007d53a 	srai	r3,r2,20
   89654:	000d883a 	mov	r6,zero
   89658:	0140040e 	bge	zero,r5,8966c <__ulp+0x2c>
   8965c:	280f883a 	mov	r7,r5
   89660:	3807883a 	mov	r3,r7
   89664:	3005883a 	mov	r2,r6
   89668:	f800283a 	ret
   8966c:	008004c4 	movi	r2,19
   89670:	193ffb04 	addi	r4,r3,-20
   89674:	10c00c0e 	bge	r2,r3,896a8 <__ulp+0x68>
   89678:	008007c4 	movi	r2,31
   8967c:	1107c83a 	sub	r3,r2,r4
   89680:	00800784 	movi	r2,30
   89684:	01400044 	movi	r5,1
   89688:	11000216 	blt	r2,r4,89694 <__ulp+0x54>
   8968c:	00800044 	movi	r2,1
   89690:	10ca983a 	sll	r5,r2,r3
   89694:	000f883a 	mov	r7,zero
   89698:	280d883a 	mov	r6,r5
   8969c:	3807883a 	mov	r3,r7
   896a0:	3005883a 	mov	r2,r6
   896a4:	f800283a 	ret
   896a8:	00800234 	movhi	r2,8
   896ac:	10cfd83a 	sra	r7,r2,r3
   896b0:	000d883a 	mov	r6,zero
   896b4:	3005883a 	mov	r2,r6
   896b8:	3807883a 	mov	r3,r7
   896bc:	f800283a 	ret

000896c0 <__b2d>:
   896c0:	20800417 	ldw	r2,16(r4)
   896c4:	defff904 	addi	sp,sp,-28
   896c8:	dd000415 	stw	r20,16(sp)
   896cc:	1085883a 	add	r2,r2,r2
   896d0:	25000504 	addi	r20,r4,20
   896d4:	1085883a 	add	r2,r2,r2
   896d8:	dc000015 	stw	r16,0(sp)
   896dc:	a0a1883a 	add	r16,r20,r2
   896e0:	dd400515 	stw	r21,20(sp)
   896e4:	857fff17 	ldw	r21,-4(r16)
   896e8:	dc400115 	stw	r17,4(sp)
   896ec:	dfc00615 	stw	ra,24(sp)
   896f0:	a809883a 	mov	r4,r21
   896f4:	2823883a 	mov	r17,r5
   896f8:	dcc00315 	stw	r19,12(sp)
   896fc:	dc800215 	stw	r18,8(sp)
   89700:	00894ac0 	call	894ac <__hi0bits>
   89704:	100b883a 	mov	r5,r2
   89708:	00800804 	movi	r2,32
   8970c:	1145c83a 	sub	r2,r2,r5
   89710:	88800015 	stw	r2,0(r17)
   89714:	00800284 	movi	r2,10
   89718:	80ffff04 	addi	r3,r16,-4
   8971c:	11401416 	blt	r2,r5,89770 <__b2d+0xb0>
   89720:	008002c4 	movi	r2,11
   89724:	1149c83a 	sub	r4,r2,r5
   89728:	a0c02736 	bltu	r20,r3,897c8 <__b2d+0x108>
   8972c:	000d883a 	mov	r6,zero
   89730:	28800544 	addi	r2,r5,21
   89734:	a906d83a 	srl	r3,r21,r4
   89738:	a884983a 	sll	r2,r21,r2
   8973c:	1ccffc34 	orhi	r19,r3,16368
   89740:	11a4b03a 	or	r18,r2,r6
   89744:	9005883a 	mov	r2,r18
   89748:	9807883a 	mov	r3,r19
   8974c:	dfc00617 	ldw	ra,24(sp)
   89750:	dd400517 	ldw	r21,20(sp)
   89754:	dd000417 	ldw	r20,16(sp)
   89758:	dcc00317 	ldw	r19,12(sp)
   8975c:	dc800217 	ldw	r18,8(sp)
   89760:	dc400117 	ldw	r17,4(sp)
   89764:	dc000017 	ldw	r16,0(sp)
   89768:	dec00704 	addi	sp,sp,28
   8976c:	f800283a 	ret
   89770:	a0c00e36 	bltu	r20,r3,897ac <__b2d+0xec>
   89774:	293ffd44 	addi	r4,r5,-11
   89778:	000d883a 	mov	r6,zero
   8977c:	20000f26 	beq	r4,zero,897bc <__b2d+0xfc>
   89780:	00800804 	movi	r2,32
   89784:	110bc83a 	sub	r5,r2,r4
   89788:	a0c01236 	bltu	r20,r3,897d4 <__b2d+0x114>
   8978c:	000f883a 	mov	r7,zero
   89790:	a904983a 	sll	r2,r21,r4
   89794:	3146d83a 	srl	r3,r6,r5
   89798:	3108983a 	sll	r4,r6,r4
   8979c:	108ffc34 	orhi	r2,r2,16368
   897a0:	18a6b03a 	or	r19,r3,r2
   897a4:	3924b03a 	or	r18,r7,r4
   897a8:	003fe606 	br	89744 <__b2d+0x84>
   897ac:	293ffd44 	addi	r4,r5,-11
   897b0:	81bffe17 	ldw	r6,-8(r16)
   897b4:	80fffe04 	addi	r3,r16,-8
   897b8:	203ff11e 	bne	r4,zero,89780 <__b2d+0xc0>
   897bc:	accffc34 	orhi	r19,r21,16368
   897c0:	3025883a 	mov	r18,r6
   897c4:	003fdf06 	br	89744 <__b2d+0x84>
   897c8:	18bfff17 	ldw	r2,-4(r3)
   897cc:	110cd83a 	srl	r6,r2,r4
   897d0:	003fd706 	br	89730 <__b2d+0x70>
   897d4:	18bfff17 	ldw	r2,-4(r3)
   897d8:	114ed83a 	srl	r7,r2,r5
   897dc:	003fec06 	br	89790 <__b2d+0xd0>

000897e0 <__ratio>:
   897e0:	defff904 	addi	sp,sp,-28
   897e4:	dc400215 	stw	r17,8(sp)
   897e8:	2823883a 	mov	r17,r5
   897ec:	d80b883a 	mov	r5,sp
   897f0:	dfc00615 	stw	ra,24(sp)
   897f4:	dd000515 	stw	r20,20(sp)
   897f8:	dcc00415 	stw	r19,16(sp)
   897fc:	dc800315 	stw	r18,12(sp)
   89800:	2025883a 	mov	r18,r4
   89804:	00896c00 	call	896c0 <__b2d>
   89808:	8809883a 	mov	r4,r17
   8980c:	d9400104 	addi	r5,sp,4
   89810:	1027883a 	mov	r19,r2
   89814:	1829883a 	mov	r20,r3
   89818:	00896c00 	call	896c0 <__b2d>
   8981c:	89000417 	ldw	r4,16(r17)
   89820:	91c00417 	ldw	r7,16(r18)
   89824:	d9800117 	ldw	r6,4(sp)
   89828:	180b883a 	mov	r5,r3
   8982c:	390fc83a 	sub	r7,r7,r4
   89830:	1009883a 	mov	r4,r2
   89834:	d8800017 	ldw	r2,0(sp)
   89838:	380e917a 	slli	r7,r7,5
   8983c:	2011883a 	mov	r8,r4
   89840:	1185c83a 	sub	r2,r2,r6
   89844:	11c5883a 	add	r2,r2,r7
   89848:	1006953a 	slli	r3,r2,20
   8984c:	2813883a 	mov	r9,r5
   89850:	00800d0e 	bge	zero,r2,89888 <__ratio+0xa8>
   89854:	1d29883a 	add	r20,r3,r20
   89858:	a00b883a 	mov	r5,r20
   8985c:	480f883a 	mov	r7,r9
   89860:	9809883a 	mov	r4,r19
   89864:	400d883a 	mov	r6,r8
   89868:	008f0640 	call	8f064 <__divdf3>
   8986c:	dfc00617 	ldw	ra,24(sp)
   89870:	dd000517 	ldw	r20,20(sp)
   89874:	dcc00417 	ldw	r19,16(sp)
   89878:	dc800317 	ldw	r18,12(sp)
   8987c:	dc400217 	ldw	r17,8(sp)
   89880:	dec00704 	addi	sp,sp,28
   89884:	f800283a 	ret
   89888:	28d3c83a 	sub	r9,r5,r3
   8988c:	003ff206 	br	89858 <__ratio+0x78>

00089890 <_mprec_log10>:
   89890:	defffe04 	addi	sp,sp,-8
   89894:	008005c4 	movi	r2,23
   89898:	dc000015 	stw	r16,0(sp)
   8989c:	dfc00115 	stw	ra,4(sp)
   898a0:	2021883a 	mov	r16,r4
   898a4:	11000c16 	blt	r2,r4,898d8 <_mprec_log10+0x48>
   898a8:	200490fa 	slli	r2,r4,3
   898ac:	00c00274 	movhi	r3,9
   898b0:	18d13004 	addi	r3,r3,17600
   898b4:	10c5883a 	add	r2,r2,r3
   898b8:	12400117 	ldw	r9,4(r2)
   898bc:	12000017 	ldw	r8,0(r2)
   898c0:	4807883a 	mov	r3,r9
   898c4:	4005883a 	mov	r2,r8
   898c8:	dfc00117 	ldw	ra,4(sp)
   898cc:	dc000017 	ldw	r16,0(sp)
   898d0:	dec00204 	addi	sp,sp,8
   898d4:	f800283a 	ret
   898d8:	0011883a 	mov	r8,zero
   898dc:	024ffc34 	movhi	r9,16368
   898e0:	0005883a 	mov	r2,zero
   898e4:	00d00934 	movhi	r3,16420
   898e8:	480b883a 	mov	r5,r9
   898ec:	4009883a 	mov	r4,r8
   898f0:	180f883a 	mov	r7,r3
   898f4:	100d883a 	mov	r6,r2
   898f8:	008eca00 	call	8eca0 <__muldf3>
   898fc:	843fffc4 	addi	r16,r16,-1
   89900:	1011883a 	mov	r8,r2
   89904:	1813883a 	mov	r9,r3
   89908:	803ff51e 	bne	r16,zero,898e0 <_mprec_log10+0x50>
   8990c:	4005883a 	mov	r2,r8
   89910:	4807883a 	mov	r3,r9
   89914:	dfc00117 	ldw	ra,4(sp)
   89918:	dc000017 	ldw	r16,0(sp)
   8991c:	dec00204 	addi	sp,sp,8
   89920:	f800283a 	ret

00089924 <__copybits>:
   89924:	297fffc4 	addi	r5,r5,-1
   89928:	30800417 	ldw	r2,16(r6)
   8992c:	280bd17a 	srai	r5,r5,5
   89930:	31800504 	addi	r6,r6,20
   89934:	1085883a 	add	r2,r2,r2
   89938:	294b883a 	add	r5,r5,r5
   8993c:	294b883a 	add	r5,r5,r5
   89940:	1085883a 	add	r2,r2,r2
   89944:	290b883a 	add	r5,r5,r4
   89948:	3087883a 	add	r3,r6,r2
   8994c:	29400104 	addi	r5,r5,4
   89950:	30c0052e 	bgeu	r6,r3,89968 <__copybits+0x44>
   89954:	30800017 	ldw	r2,0(r6)
   89958:	31800104 	addi	r6,r6,4
   8995c:	20800015 	stw	r2,0(r4)
   89960:	21000104 	addi	r4,r4,4
   89964:	30fffb36 	bltu	r6,r3,89954 <__copybits+0x30>
   89968:	2140032e 	bgeu	r4,r5,89978 <__copybits+0x54>
   8996c:	20000015 	stw	zero,0(r4)
   89970:	21000104 	addi	r4,r4,4
   89974:	217ffd36 	bltu	r4,r5,8996c <__copybits+0x48>
   89978:	f800283a 	ret

0008997c <__any_on>:
   8997c:	20800417 	ldw	r2,16(r4)
   89980:	2807d17a 	srai	r3,r5,5
   89984:	21000504 	addi	r4,r4,20
   89988:	10c00d0e 	bge	r2,r3,899c0 <__any_on+0x44>
   8998c:	1085883a 	add	r2,r2,r2
   89990:	1085883a 	add	r2,r2,r2
   89994:	208d883a 	add	r6,r4,r2
   89998:	2180182e 	bgeu	r4,r6,899fc <__any_on+0x80>
   8999c:	30bfff17 	ldw	r2,-4(r6)
   899a0:	30ffff04 	addi	r3,r6,-4
   899a4:	1000041e 	bne	r2,zero,899b8 <__any_on+0x3c>
   899a8:	20c0142e 	bgeu	r4,r3,899fc <__any_on+0x80>
   899ac:	18ffff04 	addi	r3,r3,-4
   899b0:	18800017 	ldw	r2,0(r3)
   899b4:	103ffc26 	beq	r2,zero,899a8 <__any_on+0x2c>
   899b8:	00800044 	movi	r2,1
   899bc:	f800283a 	ret
   899c0:	18800a0e 	bge	r3,r2,899ec <__any_on+0x70>
   899c4:	294007cc 	andi	r5,r5,31
   899c8:	28000826 	beq	r5,zero,899ec <__any_on+0x70>
   899cc:	18c5883a 	add	r2,r3,r3
   899d0:	1085883a 	add	r2,r2,r2
   899d4:	208d883a 	add	r6,r4,r2
   899d8:	30c00017 	ldw	r3,0(r6)
   899dc:	1944d83a 	srl	r2,r3,r5
   899e0:	1144983a 	sll	r2,r2,r5
   899e4:	18bff41e 	bne	r3,r2,899b8 <__any_on+0x3c>
   899e8:	003feb06 	br	89998 <__any_on+0x1c>
   899ec:	18c5883a 	add	r2,r3,r3
   899f0:	1085883a 	add	r2,r2,r2
   899f4:	208d883a 	add	r6,r4,r2
   899f8:	003fe706 	br	89998 <__any_on+0x1c>
   899fc:	0005883a 	mov	r2,zero
   89a00:	f800283a 	ret

00089a04 <_Balloc>:
   89a04:	20c01317 	ldw	r3,76(r4)
   89a08:	defffb04 	addi	sp,sp,-20
   89a0c:	dcc00315 	stw	r19,12(sp)
   89a10:	dc800215 	stw	r18,8(sp)
   89a14:	dfc00415 	stw	ra,16(sp)
   89a18:	2825883a 	mov	r18,r5
   89a1c:	dc400115 	stw	r17,4(sp)
   89a20:	dc000015 	stw	r16,0(sp)
   89a24:	2027883a 	mov	r19,r4
   89a28:	01800404 	movi	r6,16
   89a2c:	01400104 	movi	r5,4
   89a30:	18001726 	beq	r3,zero,89a90 <_Balloc+0x8c>
   89a34:	01400044 	movi	r5,1
   89a38:	9485883a 	add	r2,r18,r18
   89a3c:	2ca2983a 	sll	r17,r5,r18
   89a40:	1085883a 	add	r2,r2,r2
   89a44:	10c7883a 	add	r3,r2,r3
   89a48:	1c000017 	ldw	r16,0(r3)
   89a4c:	8c4d883a 	add	r6,r17,r17
   89a50:	318d883a 	add	r6,r6,r6
   89a54:	9809883a 	mov	r4,r19
   89a58:	31800504 	addi	r6,r6,20
   89a5c:	80001226 	beq	r16,zero,89aa8 <_Balloc+0xa4>
   89a60:	80800017 	ldw	r2,0(r16)
   89a64:	18800015 	stw	r2,0(r3)
   89a68:	80000415 	stw	zero,16(r16)
   89a6c:	80000315 	stw	zero,12(r16)
   89a70:	8005883a 	mov	r2,r16
   89a74:	dfc00417 	ldw	ra,16(sp)
   89a78:	dcc00317 	ldw	r19,12(sp)
   89a7c:	dc800217 	ldw	r18,8(sp)
   89a80:	dc400117 	ldw	r17,4(sp)
   89a84:	dc000017 	ldw	r16,0(sp)
   89a88:	dec00504 	addi	sp,sp,20
   89a8c:	f800283a 	ret
   89a90:	008c9e80 	call	8c9e8 <_calloc_r>
   89a94:	1007883a 	mov	r3,r2
   89a98:	0021883a 	mov	r16,zero
   89a9c:	98801315 	stw	r2,76(r19)
   89aa0:	103fe41e 	bne	r2,zero,89a34 <_Balloc+0x30>
   89aa4:	003ff206 	br	89a70 <_Balloc+0x6c>
   89aa8:	008c9e80 	call	8c9e8 <_calloc_r>
   89aac:	103ff026 	beq	r2,zero,89a70 <_Balloc+0x6c>
   89ab0:	1021883a 	mov	r16,r2
   89ab4:	14800115 	stw	r18,4(r2)
   89ab8:	14400215 	stw	r17,8(r2)
   89abc:	003fea06 	br	89a68 <_Balloc+0x64>

00089ac0 <__d2b>:
   89ac0:	defff504 	addi	sp,sp,-44
   89ac4:	dcc00515 	stw	r19,20(sp)
   89ac8:	04c00044 	movi	r19,1
   89acc:	dc000215 	stw	r16,8(sp)
   89ad0:	2821883a 	mov	r16,r5
   89ad4:	980b883a 	mov	r5,r19
   89ad8:	ddc00915 	stw	r23,36(sp)
   89adc:	dd800815 	stw	r22,32(sp)
   89ae0:	dd400715 	stw	r21,28(sp)
   89ae4:	dd000615 	stw	r20,24(sp)
   89ae8:	dc800415 	stw	r18,16(sp)
   89aec:	dc400315 	stw	r17,12(sp)
   89af0:	dfc00a15 	stw	ra,40(sp)
   89af4:	3023883a 	mov	r17,r6
   89af8:	382d883a 	mov	r22,r7
   89afc:	ddc00b17 	ldw	r23,44(sp)
   89b00:	0089a040 	call	89a04 <_Balloc>
   89b04:	1025883a 	mov	r18,r2
   89b08:	00a00034 	movhi	r2,32768
   89b0c:	10bfffc4 	addi	r2,r2,-1
   89b10:	8888703a 	and	r4,r17,r2
   89b14:	202ad53a 	srli	r21,r4,20
   89b18:	00800434 	movhi	r2,16
   89b1c:	10bfffc4 	addi	r2,r2,-1
   89b20:	8886703a 	and	r3,r17,r2
   89b24:	a829003a 	cmpeq	r20,r21,zero
   89b28:	800b883a 	mov	r5,r16
   89b2c:	d8c00115 	stw	r3,4(sp)
   89b30:	94000504 	addi	r16,r18,20
   89b34:	a000021e 	bne	r20,zero,89b40 <__d2b+0x80>
   89b38:	18c00434 	orhi	r3,r3,16
   89b3c:	d8c00115 	stw	r3,4(sp)
   89b40:	28002726 	beq	r5,zero,89be0 <__d2b+0x120>
   89b44:	d809883a 	mov	r4,sp
   89b48:	d9400015 	stw	r5,0(sp)
   89b4c:	008951c0 	call	8951c <__lo0bits>
   89b50:	100d883a 	mov	r6,r2
   89b54:	10003526 	beq	r2,zero,89c2c <__d2b+0x16c>
   89b58:	d8c00117 	ldw	r3,4(sp)
   89b5c:	00800804 	movi	r2,32
   89b60:	1185c83a 	sub	r2,r2,r6
   89b64:	d9000017 	ldw	r4,0(sp)
   89b68:	1886983a 	sll	r3,r3,r2
   89b6c:	1906b03a 	or	r3,r3,r4
   89b70:	90c00515 	stw	r3,20(r18)
   89b74:	d8c00117 	ldw	r3,4(sp)
   89b78:	1986d83a 	srl	r3,r3,r6
   89b7c:	d8c00115 	stw	r3,4(sp)
   89b80:	180b003a 	cmpeq	r5,r3,zero
   89b84:	00800084 	movi	r2,2
   89b88:	114bc83a 	sub	r5,r2,r5
   89b8c:	80c00115 	stw	r3,4(r16)
   89b90:	91400415 	stw	r5,16(r18)
   89b94:	a0001a1e 	bne	r20,zero,89c00 <__d2b+0x140>
   89b98:	3545883a 	add	r2,r6,r21
   89b9c:	10bef344 	addi	r2,r2,-1075
   89ba0:	00c00d44 	movi	r3,53
   89ba4:	b0800015 	stw	r2,0(r22)
   89ba8:	1987c83a 	sub	r3,r3,r6
   89bac:	b8c00015 	stw	r3,0(r23)
   89bb0:	9005883a 	mov	r2,r18
   89bb4:	dfc00a17 	ldw	ra,40(sp)
   89bb8:	ddc00917 	ldw	r23,36(sp)
   89bbc:	dd800817 	ldw	r22,32(sp)
   89bc0:	dd400717 	ldw	r21,28(sp)
   89bc4:	dd000617 	ldw	r20,24(sp)
   89bc8:	dcc00517 	ldw	r19,20(sp)
   89bcc:	dc800417 	ldw	r18,16(sp)
   89bd0:	dc400317 	ldw	r17,12(sp)
   89bd4:	dc000217 	ldw	r16,8(sp)
   89bd8:	dec00b04 	addi	sp,sp,44
   89bdc:	f800283a 	ret
   89be0:	d9000104 	addi	r4,sp,4
   89be4:	008951c0 	call	8951c <__lo0bits>
   89be8:	11800804 	addi	r6,r2,32
   89bec:	d8800117 	ldw	r2,4(sp)
   89bf0:	94c00415 	stw	r19,16(r18)
   89bf4:	980b883a 	mov	r5,r19
   89bf8:	90800515 	stw	r2,20(r18)
   89bfc:	a03fe626 	beq	r20,zero,89b98 <__d2b+0xd8>
   89c00:	2945883a 	add	r2,r5,r5
   89c04:	1085883a 	add	r2,r2,r2
   89c08:	1405883a 	add	r2,r2,r16
   89c0c:	113fff17 	ldw	r4,-4(r2)
   89c10:	30fef384 	addi	r3,r6,-1074
   89c14:	2820917a 	slli	r16,r5,5
   89c18:	b0c00015 	stw	r3,0(r22)
   89c1c:	00894ac0 	call	894ac <__hi0bits>
   89c20:	80a1c83a 	sub	r16,r16,r2
   89c24:	bc000015 	stw	r16,0(r23)
   89c28:	003fe106 	br	89bb0 <__d2b+0xf0>
   89c2c:	d8800017 	ldw	r2,0(sp)
   89c30:	90800515 	stw	r2,20(r18)
   89c34:	d8c00117 	ldw	r3,4(sp)
   89c38:	003fd106 	br	89b80 <__d2b+0xc0>

00089c3c <__mdiff>:
   89c3c:	defffb04 	addi	sp,sp,-20
   89c40:	dc000015 	stw	r16,0(sp)
   89c44:	2821883a 	mov	r16,r5
   89c48:	dc800215 	stw	r18,8(sp)
   89c4c:	300b883a 	mov	r5,r6
   89c50:	2025883a 	mov	r18,r4
   89c54:	8009883a 	mov	r4,r16
   89c58:	dc400115 	stw	r17,4(sp)
   89c5c:	dfc00415 	stw	ra,16(sp)
   89c60:	dcc00315 	stw	r19,12(sp)
   89c64:	3023883a 	mov	r17,r6
   89c68:	00895e00 	call	895e0 <__mcmp>
   89c6c:	10004226 	beq	r2,zero,89d78 <__mdiff+0x13c>
   89c70:	10005016 	blt	r2,zero,89db4 <__mdiff+0x178>
   89c74:	0027883a 	mov	r19,zero
   89c78:	81400117 	ldw	r5,4(r16)
   89c7c:	9009883a 	mov	r4,r18
   89c80:	0089a040 	call	89a04 <_Balloc>
   89c84:	1019883a 	mov	r12,r2
   89c88:	82800417 	ldw	r10,16(r16)
   89c8c:	88800417 	ldw	r2,16(r17)
   89c90:	81800504 	addi	r6,r16,20
   89c94:	5287883a 	add	r3,r10,r10
   89c98:	1085883a 	add	r2,r2,r2
   89c9c:	18c7883a 	add	r3,r3,r3
   89ca0:	1085883a 	add	r2,r2,r2
   89ca4:	8a000504 	addi	r8,r17,20
   89ca8:	64c00315 	stw	r19,12(r12)
   89cac:	30db883a 	add	r13,r6,r3
   89cb0:	4097883a 	add	r11,r8,r2
   89cb4:	61c00504 	addi	r7,r12,20
   89cb8:	0013883a 	mov	r9,zero
   89cbc:	31000017 	ldw	r4,0(r6)
   89cc0:	41400017 	ldw	r5,0(r8)
   89cc4:	42000104 	addi	r8,r8,4
   89cc8:	20bfffcc 	andi	r2,r4,65535
   89ccc:	28ffffcc 	andi	r3,r5,65535
   89cd0:	10c5c83a 	sub	r2,r2,r3
   89cd4:	1245883a 	add	r2,r2,r9
   89cd8:	2008d43a 	srli	r4,r4,16
   89cdc:	280ad43a 	srli	r5,r5,16
   89ce0:	1007d43a 	srai	r3,r2,16
   89ce4:	3880000d 	sth	r2,0(r7)
   89ce8:	2149c83a 	sub	r4,r4,r5
   89cec:	20c9883a 	add	r4,r4,r3
   89cf0:	3900008d 	sth	r4,2(r7)
   89cf4:	31800104 	addi	r6,r6,4
   89cf8:	39c00104 	addi	r7,r7,4
   89cfc:	2013d43a 	srai	r9,r4,16
   89d00:	42ffee36 	bltu	r8,r11,89cbc <__mdiff+0x80>
   89d04:	33400c2e 	bgeu	r6,r13,89d38 <__mdiff+0xfc>
   89d08:	30800017 	ldw	r2,0(r6)
   89d0c:	31800104 	addi	r6,r6,4
   89d10:	10ffffcc 	andi	r3,r2,65535
   89d14:	1a47883a 	add	r3,r3,r9
   89d18:	1004d43a 	srli	r2,r2,16
   89d1c:	1809d43a 	srai	r4,r3,16
   89d20:	38c0000d 	sth	r3,0(r7)
   89d24:	1105883a 	add	r2,r2,r4
   89d28:	3880008d 	sth	r2,2(r7)
   89d2c:	1013d43a 	srai	r9,r2,16
   89d30:	39c00104 	addi	r7,r7,4
   89d34:	337ff436 	bltu	r6,r13,89d08 <__mdiff+0xcc>
   89d38:	38bfff17 	ldw	r2,-4(r7)
   89d3c:	38ffff04 	addi	r3,r7,-4
   89d40:	1000041e 	bne	r2,zero,89d54 <__mdiff+0x118>
   89d44:	18ffff04 	addi	r3,r3,-4
   89d48:	18800017 	ldw	r2,0(r3)
   89d4c:	52bfffc4 	addi	r10,r10,-1
   89d50:	103ffc26 	beq	r2,zero,89d44 <__mdiff+0x108>
   89d54:	6005883a 	mov	r2,r12
   89d58:	62800415 	stw	r10,16(r12)
   89d5c:	dfc00417 	ldw	ra,16(sp)
   89d60:	dcc00317 	ldw	r19,12(sp)
   89d64:	dc800217 	ldw	r18,8(sp)
   89d68:	dc400117 	ldw	r17,4(sp)
   89d6c:	dc000017 	ldw	r16,0(sp)
   89d70:	dec00504 	addi	sp,sp,20
   89d74:	f800283a 	ret
   89d78:	9009883a 	mov	r4,r18
   89d7c:	000b883a 	mov	r5,zero
   89d80:	0089a040 	call	89a04 <_Balloc>
   89d84:	1019883a 	mov	r12,r2
   89d88:	00800044 	movi	r2,1
   89d8c:	60800415 	stw	r2,16(r12)
   89d90:	6005883a 	mov	r2,r12
   89d94:	60000515 	stw	zero,20(r12)
   89d98:	dfc00417 	ldw	ra,16(sp)
   89d9c:	dcc00317 	ldw	r19,12(sp)
   89da0:	dc800217 	ldw	r18,8(sp)
   89da4:	dc400117 	ldw	r17,4(sp)
   89da8:	dc000017 	ldw	r16,0(sp)
   89dac:	dec00504 	addi	sp,sp,20
   89db0:	f800283a 	ret
   89db4:	880d883a 	mov	r6,r17
   89db8:	04c00044 	movi	r19,1
   89dbc:	8023883a 	mov	r17,r16
   89dc0:	3021883a 	mov	r16,r6
   89dc4:	003fac06 	br	89c78 <__mdiff+0x3c>

00089dc8 <__lshift>:
   89dc8:	defff904 	addi	sp,sp,-28
   89dcc:	28800417 	ldw	r2,16(r5)
   89dd0:	dc000015 	stw	r16,0(sp)
   89dd4:	3021d17a 	srai	r16,r6,5
   89dd8:	28c00217 	ldw	r3,8(r5)
   89ddc:	10800044 	addi	r2,r2,1
   89de0:	dc400115 	stw	r17,4(sp)
   89de4:	80a3883a 	add	r17,r16,r2
   89de8:	dd400515 	stw	r21,20(sp)
   89dec:	dd000415 	stw	r20,16(sp)
   89df0:	dc800215 	stw	r18,8(sp)
   89df4:	dfc00615 	stw	ra,24(sp)
   89df8:	2825883a 	mov	r18,r5
   89dfc:	dcc00315 	stw	r19,12(sp)
   89e00:	3029883a 	mov	r20,r6
   89e04:	202b883a 	mov	r21,r4
   89e08:	29400117 	ldw	r5,4(r5)
   89e0c:	1c40030e 	bge	r3,r17,89e1c <__lshift+0x54>
   89e10:	18c7883a 	add	r3,r3,r3
   89e14:	29400044 	addi	r5,r5,1
   89e18:	1c7ffd16 	blt	r3,r17,89e10 <__lshift+0x48>
   89e1c:	a809883a 	mov	r4,r21
   89e20:	0089a040 	call	89a04 <_Balloc>
   89e24:	1027883a 	mov	r19,r2
   89e28:	11400504 	addi	r5,r2,20
   89e2c:	0400090e 	bge	zero,r16,89e54 <__lshift+0x8c>
   89e30:	2805883a 	mov	r2,r5
   89e34:	0007883a 	mov	r3,zero
   89e38:	18c00044 	addi	r3,r3,1
   89e3c:	10000015 	stw	zero,0(r2)
   89e40:	10800104 	addi	r2,r2,4
   89e44:	80fffc1e 	bne	r16,r3,89e38 <__lshift+0x70>
   89e48:	8405883a 	add	r2,r16,r16
   89e4c:	1085883a 	add	r2,r2,r2
   89e50:	288b883a 	add	r5,r5,r2
   89e54:	90800417 	ldw	r2,16(r18)
   89e58:	91000504 	addi	r4,r18,20
   89e5c:	a18007cc 	andi	r6,r20,31
   89e60:	1085883a 	add	r2,r2,r2
   89e64:	1085883a 	add	r2,r2,r2
   89e68:	208f883a 	add	r7,r4,r2
   89e6c:	30001e26 	beq	r6,zero,89ee8 <__lshift+0x120>
   89e70:	00800804 	movi	r2,32
   89e74:	1191c83a 	sub	r8,r2,r6
   89e78:	0007883a 	mov	r3,zero
   89e7c:	20800017 	ldw	r2,0(r4)
   89e80:	1184983a 	sll	r2,r2,r6
   89e84:	1884b03a 	or	r2,r3,r2
   89e88:	28800015 	stw	r2,0(r5)
   89e8c:	20c00017 	ldw	r3,0(r4)
   89e90:	21000104 	addi	r4,r4,4
   89e94:	29400104 	addi	r5,r5,4
   89e98:	1a06d83a 	srl	r3,r3,r8
   89e9c:	21fff736 	bltu	r4,r7,89e7c <__lshift+0xb4>
   89ea0:	28c00015 	stw	r3,0(r5)
   89ea4:	18000126 	beq	r3,zero,89eac <__lshift+0xe4>
   89ea8:	8c400044 	addi	r17,r17,1
   89eac:	88bfffc4 	addi	r2,r17,-1
   89eb0:	98800415 	stw	r2,16(r19)
   89eb4:	a809883a 	mov	r4,r21
   89eb8:	900b883a 	mov	r5,r18
   89ebc:	00894840 	call	89484 <_Bfree>
   89ec0:	9805883a 	mov	r2,r19
   89ec4:	dfc00617 	ldw	ra,24(sp)
   89ec8:	dd400517 	ldw	r21,20(sp)
   89ecc:	dd000417 	ldw	r20,16(sp)
   89ed0:	dcc00317 	ldw	r19,12(sp)
   89ed4:	dc800217 	ldw	r18,8(sp)
   89ed8:	dc400117 	ldw	r17,4(sp)
   89edc:	dc000017 	ldw	r16,0(sp)
   89ee0:	dec00704 	addi	sp,sp,28
   89ee4:	f800283a 	ret
   89ee8:	20800017 	ldw	r2,0(r4)
   89eec:	21000104 	addi	r4,r4,4
   89ef0:	28800015 	stw	r2,0(r5)
   89ef4:	29400104 	addi	r5,r5,4
   89ef8:	21ffec2e 	bgeu	r4,r7,89eac <__lshift+0xe4>
   89efc:	20800017 	ldw	r2,0(r4)
   89f00:	21000104 	addi	r4,r4,4
   89f04:	28800015 	stw	r2,0(r5)
   89f08:	29400104 	addi	r5,r5,4
   89f0c:	21fff636 	bltu	r4,r7,89ee8 <__lshift+0x120>
   89f10:	003fe606 	br	89eac <__lshift+0xe4>

00089f14 <__multiply>:
   89f14:	defff004 	addi	sp,sp,-64
   89f18:	dc800815 	stw	r18,32(sp)
   89f1c:	dc400715 	stw	r17,28(sp)
   89f20:	2c800417 	ldw	r18,16(r5)
   89f24:	34400417 	ldw	r17,16(r6)
   89f28:	dcc00915 	stw	r19,36(sp)
   89f2c:	dc000615 	stw	r16,24(sp)
   89f30:	dfc00f15 	stw	ra,60(sp)
   89f34:	df000e15 	stw	fp,56(sp)
   89f38:	ddc00d15 	stw	r23,52(sp)
   89f3c:	dd800c15 	stw	r22,48(sp)
   89f40:	dd400b15 	stw	r21,44(sp)
   89f44:	dd000a15 	stw	r20,40(sp)
   89f48:	2821883a 	mov	r16,r5
   89f4c:	3027883a 	mov	r19,r6
   89f50:	9440040e 	bge	r18,r17,89f64 <__multiply+0x50>
   89f54:	8825883a 	mov	r18,r17
   89f58:	2c400417 	ldw	r17,16(r5)
   89f5c:	2827883a 	mov	r19,r5
   89f60:	3021883a 	mov	r16,r6
   89f64:	80800217 	ldw	r2,8(r16)
   89f68:	9447883a 	add	r3,r18,r17
   89f6c:	d8c00415 	stw	r3,16(sp)
   89f70:	81400117 	ldw	r5,4(r16)
   89f74:	10c0010e 	bge	r2,r3,89f7c <__multiply+0x68>
   89f78:	29400044 	addi	r5,r5,1
   89f7c:	0089a040 	call	89a04 <_Balloc>
   89f80:	d8800515 	stw	r2,20(sp)
   89f84:	d9000417 	ldw	r4,16(sp)
   89f88:	d8c00517 	ldw	r3,20(sp)
   89f8c:	2105883a 	add	r2,r4,r4
   89f90:	1085883a 	add	r2,r2,r2
   89f94:	19000504 	addi	r4,r3,20
   89f98:	2085883a 	add	r2,r4,r2
   89f9c:	d8800315 	stw	r2,12(sp)
   89fa0:	2080052e 	bgeu	r4,r2,89fb8 <__multiply+0xa4>
   89fa4:	2005883a 	mov	r2,r4
   89fa8:	d8c00317 	ldw	r3,12(sp)
   89fac:	10000015 	stw	zero,0(r2)
   89fb0:	10800104 	addi	r2,r2,4
   89fb4:	10fffc36 	bltu	r2,r3,89fa8 <__multiply+0x94>
   89fb8:	8c45883a 	add	r2,r17,r17
   89fbc:	9487883a 	add	r3,r18,r18
   89fc0:	9dc00504 	addi	r23,r19,20
   89fc4:	1085883a 	add	r2,r2,r2
   89fc8:	84000504 	addi	r16,r16,20
   89fcc:	18c7883a 	add	r3,r3,r3
   89fd0:	b885883a 	add	r2,r23,r2
   89fd4:	dc000015 	stw	r16,0(sp)
   89fd8:	d8800215 	stw	r2,8(sp)
   89fdc:	80f9883a 	add	fp,r16,r3
   89fe0:	b880432e 	bgeu	r23,r2,8a0f0 <__multiply+0x1dc>
   89fe4:	d9000115 	stw	r4,4(sp)
   89fe8:	b9000017 	ldw	r4,0(r23)
   89fec:	253fffcc 	andi	r20,r4,65535
   89ff0:	a0001a26 	beq	r20,zero,8a05c <__multiply+0x148>
   89ff4:	dcc00017 	ldw	r19,0(sp)
   89ff8:	dc800117 	ldw	r18,4(sp)
   89ffc:	002b883a 	mov	r21,zero
   8a000:	9c400017 	ldw	r17,0(r19)
   8a004:	94000017 	ldw	r16,0(r18)
   8a008:	a009883a 	mov	r4,r20
   8a00c:	897fffcc 	andi	r5,r17,65535
   8a010:	0080ba00 	call	80ba0 <__mulsi3>
   8a014:	880ad43a 	srli	r5,r17,16
   8a018:	80ffffcc 	andi	r3,r16,65535
   8a01c:	a8c7883a 	add	r3,r21,r3
   8a020:	a009883a 	mov	r4,r20
   8a024:	10e3883a 	add	r17,r2,r3
   8a028:	8020d43a 	srli	r16,r16,16
   8a02c:	0080ba00 	call	80ba0 <__mulsi3>
   8a030:	8806d43a 	srli	r3,r17,16
   8a034:	1405883a 	add	r2,r2,r16
   8a038:	9cc00104 	addi	r19,r19,4
   8a03c:	1887883a 	add	r3,r3,r2
   8a040:	90c0008d 	sth	r3,2(r18)
   8a044:	9440000d 	sth	r17,0(r18)
   8a048:	182ad43a 	srli	r21,r3,16
   8a04c:	94800104 	addi	r18,r18,4
   8a050:	9f3feb36 	bltu	r19,fp,8a000 <__multiply+0xec>
   8a054:	95400015 	stw	r21,0(r18)
   8a058:	b9000017 	ldw	r4,0(r23)
   8a05c:	202ad43a 	srli	r21,r4,16
   8a060:	a8001c26 	beq	r21,zero,8a0d4 <__multiply+0x1c0>
   8a064:	d9000117 	ldw	r4,4(sp)
   8a068:	dd000017 	ldw	r20,0(sp)
   8a06c:	002d883a 	mov	r22,zero
   8a070:	24c00017 	ldw	r19,0(r4)
   8a074:	2025883a 	mov	r18,r4
   8a078:	9823883a 	mov	r17,r19
   8a07c:	a4000017 	ldw	r16,0(r20)
   8a080:	a809883a 	mov	r4,r21
   8a084:	a5000104 	addi	r20,r20,4
   8a088:	817fffcc 	andi	r5,r16,65535
   8a08c:	0080ba00 	call	80ba0 <__mulsi3>
   8a090:	8806d43a 	srli	r3,r17,16
   8a094:	800ad43a 	srli	r5,r16,16
   8a098:	94c0000d 	sth	r19,0(r18)
   8a09c:	b0c7883a 	add	r3,r22,r3
   8a0a0:	10e1883a 	add	r16,r2,r3
   8a0a4:	9400008d 	sth	r16,2(r18)
   8a0a8:	a809883a 	mov	r4,r21
   8a0ac:	94800104 	addi	r18,r18,4
   8a0b0:	0080ba00 	call	80ba0 <__mulsi3>
   8a0b4:	94400017 	ldw	r17,0(r18)
   8a0b8:	8020d43a 	srli	r16,r16,16
   8a0bc:	88ffffcc 	andi	r3,r17,65535
   8a0c0:	10c5883a 	add	r2,r2,r3
   8a0c4:	80a7883a 	add	r19,r16,r2
   8a0c8:	982cd43a 	srli	r22,r19,16
   8a0cc:	a73feb36 	bltu	r20,fp,8a07c <__multiply+0x168>
   8a0d0:	94c00015 	stw	r19,0(r18)
   8a0d4:	d8800217 	ldw	r2,8(sp)
   8a0d8:	bdc00104 	addi	r23,r23,4
   8a0dc:	b880042e 	bgeu	r23,r2,8a0f0 <__multiply+0x1dc>
   8a0e0:	d8c00117 	ldw	r3,4(sp)
   8a0e4:	18c00104 	addi	r3,r3,4
   8a0e8:	d8c00115 	stw	r3,4(sp)
   8a0ec:	003fbe06 	br	89fe8 <__multiply+0xd4>
   8a0f0:	d9000417 	ldw	r4,16(sp)
   8a0f4:	01000c0e 	bge	zero,r4,8a128 <__multiply+0x214>
   8a0f8:	d8c00317 	ldw	r3,12(sp)
   8a0fc:	18bfff17 	ldw	r2,-4(r3)
   8a100:	18ffff04 	addi	r3,r3,-4
   8a104:	10000326 	beq	r2,zero,8a114 <__multiply+0x200>
   8a108:	00000706 	br	8a128 <__multiply+0x214>
   8a10c:	18800017 	ldw	r2,0(r3)
   8a110:	1000051e 	bne	r2,zero,8a128 <__multiply+0x214>
   8a114:	d9000417 	ldw	r4,16(sp)
   8a118:	18ffff04 	addi	r3,r3,-4
   8a11c:	213fffc4 	addi	r4,r4,-1
   8a120:	d9000415 	stw	r4,16(sp)
   8a124:	203ff91e 	bne	r4,zero,8a10c <__multiply+0x1f8>
   8a128:	d8800417 	ldw	r2,16(sp)
   8a12c:	d8c00517 	ldw	r3,20(sp)
   8a130:	18800415 	stw	r2,16(r3)
   8a134:	1805883a 	mov	r2,r3
   8a138:	dfc00f17 	ldw	ra,60(sp)
   8a13c:	df000e17 	ldw	fp,56(sp)
   8a140:	ddc00d17 	ldw	r23,52(sp)
   8a144:	dd800c17 	ldw	r22,48(sp)
   8a148:	dd400b17 	ldw	r21,44(sp)
   8a14c:	dd000a17 	ldw	r20,40(sp)
   8a150:	dcc00917 	ldw	r19,36(sp)
   8a154:	dc800817 	ldw	r18,32(sp)
   8a158:	dc400717 	ldw	r17,28(sp)
   8a15c:	dc000617 	ldw	r16,24(sp)
   8a160:	dec01004 	addi	sp,sp,64
   8a164:	f800283a 	ret

0008a168 <__i2b>:
   8a168:	defffd04 	addi	sp,sp,-12
   8a16c:	dc000015 	stw	r16,0(sp)
   8a170:	04000044 	movi	r16,1
   8a174:	dc800115 	stw	r18,4(sp)
   8a178:	2825883a 	mov	r18,r5
   8a17c:	800b883a 	mov	r5,r16
   8a180:	dfc00215 	stw	ra,8(sp)
   8a184:	0089a040 	call	89a04 <_Balloc>
   8a188:	14000415 	stw	r16,16(r2)
   8a18c:	14800515 	stw	r18,20(r2)
   8a190:	dfc00217 	ldw	ra,8(sp)
   8a194:	dc800117 	ldw	r18,4(sp)
   8a198:	dc000017 	ldw	r16,0(sp)
   8a19c:	dec00304 	addi	sp,sp,12
   8a1a0:	f800283a 	ret

0008a1a4 <__multadd>:
   8a1a4:	defff604 	addi	sp,sp,-40
   8a1a8:	dd800615 	stw	r22,24(sp)
   8a1ac:	2d800417 	ldw	r22,16(r5)
   8a1b0:	df000815 	stw	fp,32(sp)
   8a1b4:	ddc00715 	stw	r23,28(sp)
   8a1b8:	dd400515 	stw	r21,20(sp)
   8a1bc:	dd000415 	stw	r20,16(sp)
   8a1c0:	dcc00315 	stw	r19,12(sp)
   8a1c4:	dc800215 	stw	r18,8(sp)
   8a1c8:	dfc00915 	stw	ra,36(sp)
   8a1cc:	dc400115 	stw	r17,4(sp)
   8a1d0:	dc000015 	stw	r16,0(sp)
   8a1d4:	282f883a 	mov	r23,r5
   8a1d8:	2039883a 	mov	fp,r4
   8a1dc:	302b883a 	mov	r21,r6
   8a1e0:	3829883a 	mov	r20,r7
   8a1e4:	2c800504 	addi	r18,r5,20
   8a1e8:	0027883a 	mov	r19,zero
   8a1ec:	94400017 	ldw	r17,0(r18)
   8a1f0:	a80b883a 	mov	r5,r21
   8a1f4:	9cc00044 	addi	r19,r19,1
   8a1f8:	893fffcc 	andi	r4,r17,65535
   8a1fc:	0080ba00 	call	80ba0 <__mulsi3>
   8a200:	8808d43a 	srli	r4,r17,16
   8a204:	1521883a 	add	r16,r2,r20
   8a208:	a80b883a 	mov	r5,r21
   8a20c:	0080ba00 	call	80ba0 <__mulsi3>
   8a210:	8008d43a 	srli	r4,r16,16
   8a214:	843fffcc 	andi	r16,r16,65535
   8a218:	1105883a 	add	r2,r2,r4
   8a21c:	1006943a 	slli	r3,r2,16
   8a220:	1028d43a 	srli	r20,r2,16
   8a224:	1c07883a 	add	r3,r3,r16
   8a228:	90c00015 	stw	r3,0(r18)
   8a22c:	94800104 	addi	r18,r18,4
   8a230:	9dbfee16 	blt	r19,r22,8a1ec <__multadd+0x48>
   8a234:	a0000826 	beq	r20,zero,8a258 <__multadd+0xb4>
   8a238:	b8800217 	ldw	r2,8(r23)
   8a23c:	b080130e 	bge	r22,r2,8a28c <__multadd+0xe8>
   8a240:	b585883a 	add	r2,r22,r22
   8a244:	1085883a 	add	r2,r2,r2
   8a248:	15c5883a 	add	r2,r2,r23
   8a24c:	b0c00044 	addi	r3,r22,1
   8a250:	15000515 	stw	r20,20(r2)
   8a254:	b8c00415 	stw	r3,16(r23)
   8a258:	b805883a 	mov	r2,r23
   8a25c:	dfc00917 	ldw	ra,36(sp)
   8a260:	df000817 	ldw	fp,32(sp)
   8a264:	ddc00717 	ldw	r23,28(sp)
   8a268:	dd800617 	ldw	r22,24(sp)
   8a26c:	dd400517 	ldw	r21,20(sp)
   8a270:	dd000417 	ldw	r20,16(sp)
   8a274:	dcc00317 	ldw	r19,12(sp)
   8a278:	dc800217 	ldw	r18,8(sp)
   8a27c:	dc400117 	ldw	r17,4(sp)
   8a280:	dc000017 	ldw	r16,0(sp)
   8a284:	dec00a04 	addi	sp,sp,40
   8a288:	f800283a 	ret
   8a28c:	b9400117 	ldw	r5,4(r23)
   8a290:	e009883a 	mov	r4,fp
   8a294:	29400044 	addi	r5,r5,1
   8a298:	0089a040 	call	89a04 <_Balloc>
   8a29c:	b9800417 	ldw	r6,16(r23)
   8a2a0:	b9400304 	addi	r5,r23,12
   8a2a4:	11000304 	addi	r4,r2,12
   8a2a8:	318d883a 	add	r6,r6,r6
   8a2ac:	318d883a 	add	r6,r6,r6
   8a2b0:	31800204 	addi	r6,r6,8
   8a2b4:	1023883a 	mov	r17,r2
   8a2b8:	008218c0 	call	8218c <memcpy>
   8a2bc:	b80b883a 	mov	r5,r23
   8a2c0:	e009883a 	mov	r4,fp
   8a2c4:	00894840 	call	89484 <_Bfree>
   8a2c8:	882f883a 	mov	r23,r17
   8a2cc:	003fdc06 	br	8a240 <__multadd+0x9c>

0008a2d0 <__pow5mult>:
   8a2d0:	defffa04 	addi	sp,sp,-24
   8a2d4:	308000cc 	andi	r2,r6,3
   8a2d8:	dd000415 	stw	r20,16(sp)
   8a2dc:	dcc00315 	stw	r19,12(sp)
   8a2e0:	dc000015 	stw	r16,0(sp)
   8a2e4:	dfc00515 	stw	ra,20(sp)
   8a2e8:	dc800215 	stw	r18,8(sp)
   8a2ec:	dc400115 	stw	r17,4(sp)
   8a2f0:	3021883a 	mov	r16,r6
   8a2f4:	2027883a 	mov	r19,r4
   8a2f8:	2829883a 	mov	r20,r5
   8a2fc:	10002b1e 	bne	r2,zero,8a3ac <__pow5mult+0xdc>
   8a300:	8025d0ba 	srai	r18,r16,2
   8a304:	90001b26 	beq	r18,zero,8a374 <__pow5mult+0xa4>
   8a308:	9c001217 	ldw	r16,72(r19)
   8a30c:	8000081e 	bne	r16,zero,8a330 <__pow5mult+0x60>
   8a310:	00003006 	br	8a3d4 <__pow5mult+0x104>
   8a314:	800b883a 	mov	r5,r16
   8a318:	800d883a 	mov	r6,r16
   8a31c:	9809883a 	mov	r4,r19
   8a320:	90001426 	beq	r18,zero,8a374 <__pow5mult+0xa4>
   8a324:	80800017 	ldw	r2,0(r16)
   8a328:	10001b26 	beq	r2,zero,8a398 <__pow5mult+0xc8>
   8a32c:	1021883a 	mov	r16,r2
   8a330:	9080004c 	andi	r2,r18,1
   8a334:	1005003a 	cmpeq	r2,r2,zero
   8a338:	9025d07a 	srai	r18,r18,1
   8a33c:	800d883a 	mov	r6,r16
   8a340:	9809883a 	mov	r4,r19
   8a344:	a00b883a 	mov	r5,r20
   8a348:	103ff21e 	bne	r2,zero,8a314 <__pow5mult+0x44>
   8a34c:	0089f140 	call	89f14 <__multiply>
   8a350:	a00b883a 	mov	r5,r20
   8a354:	9809883a 	mov	r4,r19
   8a358:	1023883a 	mov	r17,r2
   8a35c:	00894840 	call	89484 <_Bfree>
   8a360:	8829883a 	mov	r20,r17
   8a364:	800b883a 	mov	r5,r16
   8a368:	800d883a 	mov	r6,r16
   8a36c:	9809883a 	mov	r4,r19
   8a370:	903fec1e 	bne	r18,zero,8a324 <__pow5mult+0x54>
   8a374:	a005883a 	mov	r2,r20
   8a378:	dfc00517 	ldw	ra,20(sp)
   8a37c:	dd000417 	ldw	r20,16(sp)
   8a380:	dcc00317 	ldw	r19,12(sp)
   8a384:	dc800217 	ldw	r18,8(sp)
   8a388:	dc400117 	ldw	r17,4(sp)
   8a38c:	dc000017 	ldw	r16,0(sp)
   8a390:	dec00604 	addi	sp,sp,24
   8a394:	f800283a 	ret
   8a398:	0089f140 	call	89f14 <__multiply>
   8a39c:	80800015 	stw	r2,0(r16)
   8a3a0:	1021883a 	mov	r16,r2
   8a3a4:	10000015 	stw	zero,0(r2)
   8a3a8:	003fe106 	br	8a330 <__pow5mult+0x60>
   8a3ac:	1085883a 	add	r2,r2,r2
   8a3b0:	00c00274 	movhi	r3,9
   8a3b4:	18d17604 	addi	r3,r3,17880
   8a3b8:	1085883a 	add	r2,r2,r2
   8a3bc:	10c5883a 	add	r2,r2,r3
   8a3c0:	11bfff17 	ldw	r6,-4(r2)
   8a3c4:	000f883a 	mov	r7,zero
   8a3c8:	008a1a40 	call	8a1a4 <__multadd>
   8a3cc:	1029883a 	mov	r20,r2
   8a3d0:	003fcb06 	br	8a300 <__pow5mult+0x30>
   8a3d4:	9809883a 	mov	r4,r19
   8a3d8:	01409c44 	movi	r5,625
   8a3dc:	008a1680 	call	8a168 <__i2b>
   8a3e0:	98801215 	stw	r2,72(r19)
   8a3e4:	1021883a 	mov	r16,r2
   8a3e8:	10000015 	stw	zero,0(r2)
   8a3ec:	003fd006 	br	8a330 <__pow5mult+0x60>

0008a3f0 <__s2b>:
   8a3f0:	defff904 	addi	sp,sp,-28
   8a3f4:	dcc00315 	stw	r19,12(sp)
   8a3f8:	dc800215 	stw	r18,8(sp)
   8a3fc:	2827883a 	mov	r19,r5
   8a400:	2025883a 	mov	r18,r4
   8a404:	01400244 	movi	r5,9
   8a408:	39000204 	addi	r4,r7,8
   8a40c:	dd000415 	stw	r20,16(sp)
   8a410:	dc400115 	stw	r17,4(sp)
   8a414:	dfc00615 	stw	ra,24(sp)
   8a418:	dd400515 	stw	r21,20(sp)
   8a41c:	dc000015 	stw	r16,0(sp)
   8a420:	3829883a 	mov	r20,r7
   8a424:	3023883a 	mov	r17,r6
   8a428:	0080ad00 	call	80ad0 <__divsi3>
   8a42c:	00c00044 	movi	r3,1
   8a430:	1880350e 	bge	r3,r2,8a508 <__s2b+0x118>
   8a434:	000b883a 	mov	r5,zero
   8a438:	18c7883a 	add	r3,r3,r3
   8a43c:	29400044 	addi	r5,r5,1
   8a440:	18bffd16 	blt	r3,r2,8a438 <__s2b+0x48>
   8a444:	9009883a 	mov	r4,r18
   8a448:	0089a040 	call	89a04 <_Balloc>
   8a44c:	1011883a 	mov	r8,r2
   8a450:	d8800717 	ldw	r2,28(sp)
   8a454:	00c00044 	movi	r3,1
   8a458:	01800244 	movi	r6,9
   8a45c:	40800515 	stw	r2,20(r8)
   8a460:	40c00415 	stw	r3,16(r8)
   8a464:	3440260e 	bge	r6,r17,8a500 <__s2b+0x110>
   8a468:	3021883a 	mov	r16,r6
   8a46c:	99ab883a 	add	r21,r19,r6
   8a470:	9c05883a 	add	r2,r19,r16
   8a474:	11c00007 	ldb	r7,0(r2)
   8a478:	400b883a 	mov	r5,r8
   8a47c:	9009883a 	mov	r4,r18
   8a480:	39fff404 	addi	r7,r7,-48
   8a484:	01800284 	movi	r6,10
   8a488:	008a1a40 	call	8a1a4 <__multadd>
   8a48c:	84000044 	addi	r16,r16,1
   8a490:	1011883a 	mov	r8,r2
   8a494:	8c3ff61e 	bne	r17,r16,8a470 <__s2b+0x80>
   8a498:	ac45883a 	add	r2,r21,r17
   8a49c:	117ffe04 	addi	r5,r2,-8
   8a4a0:	880d883a 	mov	r6,r17
   8a4a4:	35000c0e 	bge	r6,r20,8a4d8 <__s2b+0xe8>
   8a4a8:	a185c83a 	sub	r2,r20,r6
   8a4ac:	2821883a 	mov	r16,r5
   8a4b0:	28a3883a 	add	r17,r5,r2
   8a4b4:	81c00007 	ldb	r7,0(r16)
   8a4b8:	400b883a 	mov	r5,r8
   8a4bc:	9009883a 	mov	r4,r18
   8a4c0:	39fff404 	addi	r7,r7,-48
   8a4c4:	01800284 	movi	r6,10
   8a4c8:	008a1a40 	call	8a1a4 <__multadd>
   8a4cc:	84000044 	addi	r16,r16,1
   8a4d0:	1011883a 	mov	r8,r2
   8a4d4:	847ff71e 	bne	r16,r17,8a4b4 <__s2b+0xc4>
   8a4d8:	4005883a 	mov	r2,r8
   8a4dc:	dfc00617 	ldw	ra,24(sp)
   8a4e0:	dd400517 	ldw	r21,20(sp)
   8a4e4:	dd000417 	ldw	r20,16(sp)
   8a4e8:	dcc00317 	ldw	r19,12(sp)
   8a4ec:	dc800217 	ldw	r18,8(sp)
   8a4f0:	dc400117 	ldw	r17,4(sp)
   8a4f4:	dc000017 	ldw	r16,0(sp)
   8a4f8:	dec00704 	addi	sp,sp,28
   8a4fc:	f800283a 	ret
   8a500:	99400284 	addi	r5,r19,10
   8a504:	003fe706 	br	8a4a4 <__s2b+0xb4>
   8a508:	000b883a 	mov	r5,zero
   8a50c:	003fcd06 	br	8a444 <__s2b+0x54>

0008a510 <_read_r>:
   8a510:	defffd04 	addi	sp,sp,-12
   8a514:	dc000015 	stw	r16,0(sp)
   8a518:	04000274 	movhi	r16,9
   8a51c:	841fb904 	addi	r16,r16,32484
   8a520:	dc400115 	stw	r17,4(sp)
   8a524:	80000015 	stw	zero,0(r16)
   8a528:	2023883a 	mov	r17,r4
   8a52c:	2809883a 	mov	r4,r5
   8a530:	300b883a 	mov	r5,r6
   8a534:	380d883a 	mov	r6,r7
   8a538:	dfc00215 	stw	ra,8(sp)
   8a53c:	0090c0c0 	call	90c0c <read>
   8a540:	1007883a 	mov	r3,r2
   8a544:	00bfffc4 	movi	r2,-1
   8a548:	18800626 	beq	r3,r2,8a564 <_read_r+0x54>
   8a54c:	1805883a 	mov	r2,r3
   8a550:	dfc00217 	ldw	ra,8(sp)
   8a554:	dc400117 	ldw	r17,4(sp)
   8a558:	dc000017 	ldw	r16,0(sp)
   8a55c:	dec00304 	addi	sp,sp,12
   8a560:	f800283a 	ret
   8a564:	80800017 	ldw	r2,0(r16)
   8a568:	103ff826 	beq	r2,zero,8a54c <_read_r+0x3c>
   8a56c:	88800015 	stw	r2,0(r17)
   8a570:	1805883a 	mov	r2,r3
   8a574:	dfc00217 	ldw	ra,8(sp)
   8a578:	dc400117 	ldw	r17,4(sp)
   8a57c:	dc000017 	ldw	r16,0(sp)
   8a580:	dec00304 	addi	sp,sp,12
   8a584:	f800283a 	ret

0008a588 <__isinfd>:
   8a588:	200d883a 	mov	r6,r4
   8a58c:	0109c83a 	sub	r4,zero,r4
   8a590:	2188b03a 	or	r4,r4,r6
   8a594:	2008d7fa 	srli	r4,r4,31
   8a598:	00a00034 	movhi	r2,32768
   8a59c:	10bfffc4 	addi	r2,r2,-1
   8a5a0:	1144703a 	and	r2,r2,r5
   8a5a4:	2088b03a 	or	r4,r4,r2
   8a5a8:	009ffc34 	movhi	r2,32752
   8a5ac:	1105c83a 	sub	r2,r2,r4
   8a5b0:	0087c83a 	sub	r3,zero,r2
   8a5b4:	10c4b03a 	or	r2,r2,r3
   8a5b8:	1004d7fa 	srli	r2,r2,31
   8a5bc:	00c00044 	movi	r3,1
   8a5c0:	1885c83a 	sub	r2,r3,r2
   8a5c4:	f800283a 	ret

0008a5c8 <__isnand>:
   8a5c8:	200d883a 	mov	r6,r4
   8a5cc:	0109c83a 	sub	r4,zero,r4
   8a5d0:	2188b03a 	or	r4,r4,r6
   8a5d4:	2008d7fa 	srli	r4,r4,31
   8a5d8:	00a00034 	movhi	r2,32768
   8a5dc:	10bfffc4 	addi	r2,r2,-1
   8a5e0:	1144703a 	and	r2,r2,r5
   8a5e4:	2088b03a 	or	r4,r4,r2
   8a5e8:	009ffc34 	movhi	r2,32752
   8a5ec:	1105c83a 	sub	r2,r2,r4
   8a5f0:	1004d7fa 	srli	r2,r2,31
   8a5f4:	f800283a 	ret

0008a5f8 <__sccl>:
   8a5f8:	28c00003 	ldbu	r3,0(r5)
   8a5fc:	00801784 	movi	r2,94
   8a600:	2a000044 	addi	r8,r5,1
   8a604:	18802526 	beq	r3,r2,8a69c <__sccl+0xa4>
   8a608:	180f883a 	mov	r7,r3
   8a60c:	0013883a 	mov	r9,zero
   8a610:	000d883a 	mov	r6,zero
   8a614:	0007883a 	mov	r3,zero
   8a618:	01404004 	movi	r5,256
   8a61c:	1905883a 	add	r2,r3,r4
   8a620:	18c00044 	addi	r3,r3,1
   8a624:	11800005 	stb	r6,0(r2)
   8a628:	197ffc1e 	bne	r3,r5,8a61c <__sccl+0x24>
   8a62c:	38000c26 	beq	r7,zero,8a660 <__sccl+0x68>
   8a630:	00800044 	movi	r2,1
   8a634:	124dc83a 	sub	r6,r2,r9
   8a638:	3905883a 	add	r2,r7,r4
   8a63c:	11800005 	stb	r6,0(r2)
   8a640:	41400044 	addi	r5,r8,1
   8a644:	02400b44 	movi	r9,45
   8a648:	02801744 	movi	r10,93
   8a64c:	28bfffc3 	ldbu	r2,-1(r5)
   8a650:	2811883a 	mov	r8,r5
   8a654:	12400726 	beq	r2,r9,8a674 <__sccl+0x7c>
   8a658:	12800226 	beq	r2,r10,8a664 <__sccl+0x6c>
   8a65c:	1000031e 	bne	r2,zero,8a66c <__sccl+0x74>
   8a660:	423fffc4 	addi	r8,r8,-1
   8a664:	4005883a 	mov	r2,r8
   8a668:	f800283a 	ret
   8a66c:	100f883a 	mov	r7,r2
   8a670:	003ff106 	br	8a638 <__sccl+0x40>
   8a674:	28c00003 	ldbu	r3,0(r5)
   8a678:	1a800d26 	beq	r3,r10,8a6b0 <__sccl+0xb8>
   8a67c:	19c00c16 	blt	r3,r7,8a6b0 <__sccl+0xb8>
   8a680:	21c5883a 	add	r2,r4,r7
   8a684:	39c00044 	addi	r7,r7,1
   8a688:	11800045 	stb	r6,1(r2)
   8a68c:	10800044 	addi	r2,r2,1
   8a690:	38fffc16 	blt	r7,r3,8a684 <__sccl+0x8c>
   8a694:	29400084 	addi	r5,r5,2
   8a698:	003fec06 	br	8a64c <__sccl+0x54>
   8a69c:	29c00043 	ldbu	r7,1(r5)
   8a6a0:	02400044 	movi	r9,1
   8a6a4:	2a000084 	addi	r8,r5,2
   8a6a8:	480d883a 	mov	r6,r9
   8a6ac:	003fd906 	br	8a614 <__sccl+0x1c>
   8a6b0:	01c00b44 	movi	r7,45
   8a6b4:	003fe006 	br	8a638 <__sccl+0x40>

0008a6b8 <nanf>:
   8a6b8:	009ff034 	movhi	r2,32704
   8a6bc:	f800283a 	ret

0008a6c0 <sprintf>:
   8a6c0:	deffe504 	addi	sp,sp,-108
   8a6c4:	2013883a 	mov	r9,r4
   8a6c8:	dfc01815 	stw	ra,96(sp)
   8a6cc:	d9801915 	stw	r6,100(sp)
   8a6d0:	d9c01a15 	stw	r7,104(sp)
   8a6d4:	d8801904 	addi	r2,sp,100
   8a6d8:	d8800015 	stw	r2,0(sp)
   8a6dc:	00800274 	movhi	r2,9
   8a6e0:	1098bc04 	addi	r2,r2,25328
   8a6e4:	11000017 	ldw	r4,0(r2)
   8a6e8:	d9c00017 	ldw	r7,0(sp)
   8a6ec:	00808204 	movi	r2,520
   8a6f0:	00e00034 	movhi	r3,32768
   8a6f4:	18ffffc4 	addi	r3,r3,-1
   8a6f8:	280d883a 	mov	r6,r5
   8a6fc:	d880040d 	sth	r2,16(sp)
   8a700:	d9400104 	addi	r5,sp,4
   8a704:	00bfffc4 	movi	r2,-1
   8a708:	d8c00615 	stw	r3,24(sp)
   8a70c:	d8c00315 	stw	r3,12(sp)
   8a710:	da400515 	stw	r9,20(sp)
   8a714:	d880048d 	sth	r2,18(sp)
   8a718:	da400115 	stw	r9,4(sp)
   8a71c:	00832b80 	call	832b8 <___vfprintf_internal_r>
   8a720:	d8c00117 	ldw	r3,4(sp)
   8a724:	18000005 	stb	zero,0(r3)
   8a728:	dfc01817 	ldw	ra,96(sp)
   8a72c:	dec01b04 	addi	sp,sp,108
   8a730:	f800283a 	ret

0008a734 <_sprintf_r>:
   8a734:	deffe604 	addi	sp,sp,-104
   8a738:	2813883a 	mov	r9,r5
   8a73c:	dfc01815 	stw	ra,96(sp)
   8a740:	d9c01915 	stw	r7,100(sp)
   8a744:	d8801904 	addi	r2,sp,100
   8a748:	d8800015 	stw	r2,0(sp)
   8a74c:	100f883a 	mov	r7,r2
   8a750:	00808204 	movi	r2,520
   8a754:	00e00034 	movhi	r3,32768
   8a758:	18ffffc4 	addi	r3,r3,-1
   8a75c:	d880040d 	sth	r2,16(sp)
   8a760:	d9400104 	addi	r5,sp,4
   8a764:	00bfffc4 	movi	r2,-1
   8a768:	d8c00615 	stw	r3,24(sp)
   8a76c:	d8c00315 	stw	r3,12(sp)
   8a770:	da400515 	stw	r9,20(sp)
   8a774:	d880048d 	sth	r2,18(sp)
   8a778:	da400115 	stw	r9,4(sp)
   8a77c:	00832b80 	call	832b8 <___vfprintf_internal_r>
   8a780:	d8c00117 	ldw	r3,4(sp)
   8a784:	18000005 	stb	zero,0(r3)
   8a788:	dfc01817 	ldw	ra,96(sp)
   8a78c:	dec01a04 	addi	sp,sp,104
   8a790:	f800283a 	ret

0008a794 <match>:
   8a794:	21800017 	ldw	r6,0(r4)
   8a798:	01c01004 	movi	r7,64
   8a79c:	02001684 	movi	r8,90
   8a7a0:	28800007 	ldb	r2,0(r5)
   8a7a4:	29400044 	addi	r5,r5,1
   8a7a8:	10000826 	beq	r2,zero,8a7cc <match+0x38>
   8a7ac:	31800044 	addi	r6,r6,1
   8a7b0:	30c00007 	ldb	r3,0(r6)
   8a7b4:	38c0020e 	bge	r7,r3,8a7c0 <match+0x2c>
   8a7b8:	40c00116 	blt	r8,r3,8a7c0 <match+0x2c>
   8a7bc:	18c00804 	addi	r3,r3,32
   8a7c0:	18bff726 	beq	r3,r2,8a7a0 <match+0xc>
   8a7c4:	0005883a 	mov	r2,zero
   8a7c8:	f800283a 	ret
   8a7cc:	30800044 	addi	r2,r6,1
   8a7d0:	20800015 	stw	r2,0(r4)
   8a7d4:	00800044 	movi	r2,1
   8a7d8:	f800283a 	ret

0008a7dc <_strtod_r>:
   8a7dc:	deffd504 	addi	sp,sp,-172
   8a7e0:	df002915 	stw	fp,164(sp)
   8a7e4:	dd402615 	stw	r21,152(sp)
   8a7e8:	dd002515 	stw	r20,148(sp)
   8a7ec:	dfc02a15 	stw	ra,168(sp)
   8a7f0:	ddc02815 	stw	r23,160(sp)
   8a7f4:	dd802715 	stw	r22,156(sp)
   8a7f8:	dcc02415 	stw	r19,144(sp)
   8a7fc:	dc802315 	stw	r18,140(sp)
   8a800:	dc402215 	stw	r17,136(sp)
   8a804:	dc002115 	stw	r16,132(sp)
   8a808:	2829883a 	mov	r20,r5
   8a80c:	202b883a 	mov	r21,r4
   8a810:	d9801d15 	stw	r6,116(sp)
   8a814:	d8000915 	stw	zero,36(sp)
   8a818:	d8000a15 	stw	zero,40(sp)
   8a81c:	d9400415 	stw	r5,16(sp)
   8a820:	df000904 	addi	fp,sp,36
   8a824:	dc000417 	ldw	r16,16(sp)
   8a828:	00800b44 	movi	r2,45
   8a82c:	80c00003 	ldbu	r3,0(r16)
   8a830:	10c03536 	bltu	r2,r3,8a908 <_strtod_r+0x12c>
   8a834:	18c5883a 	add	r2,r3,r3
   8a838:	1085883a 	add	r2,r2,r2
   8a83c:	00c00274 	movhi	r3,9
   8a840:	18ea1404 	addi	r3,r3,-22448
   8a844:	10c5883a 	add	r2,r2,r3
   8a848:	11000017 	ldw	r4,0(r2)
   8a84c:	2000683a 	jmp	r4
   8a850:	0008aa88 	cmpgei	zero,zero,8874
   8a854:	0008a908 	cmpgei	zero,zero,8868
   8a858:	0008a908 	cmpgei	zero,zero,8868
   8a85c:	0008a908 	cmpgei	zero,zero,8868
   8a860:	0008a908 	cmpgei	zero,zero,8868
   8a864:	0008a908 	cmpgei	zero,zero,8868
   8a868:	0008a908 	cmpgei	zero,zero,8868
   8a86c:	0008a908 	cmpgei	zero,zero,8868
   8a870:	0008a908 	cmpgei	zero,zero,8868
   8a874:	0008add0 	cmplti	zero,zero,8887
   8a878:	0008add0 	cmplti	zero,zero,8887
   8a87c:	0008add0 	cmplti	zero,zero,8887
   8a880:	0008add0 	cmplti	zero,zero,8887
   8a884:	0008add0 	cmplti	zero,zero,8887
   8a888:	0008a908 	cmpgei	zero,zero,8868
   8a88c:	0008a908 	cmpgei	zero,zero,8868
   8a890:	0008a908 	cmpgei	zero,zero,8868
   8a894:	0008a908 	cmpgei	zero,zero,8868
   8a898:	0008a908 	cmpgei	zero,zero,8868
   8a89c:	0008a908 	cmpgei	zero,zero,8868
   8a8a0:	0008a908 	cmpgei	zero,zero,8868
   8a8a4:	0008a908 	cmpgei	zero,zero,8868
   8a8a8:	0008a908 	cmpgei	zero,zero,8868
   8a8ac:	0008a908 	cmpgei	zero,zero,8868
   8a8b0:	0008a908 	cmpgei	zero,zero,8868
   8a8b4:	0008a908 	cmpgei	zero,zero,8868
   8a8b8:	0008a908 	cmpgei	zero,zero,8868
   8a8bc:	0008a908 	cmpgei	zero,zero,8868
   8a8c0:	0008a908 	cmpgei	zero,zero,8868
   8a8c4:	0008a908 	cmpgei	zero,zero,8868
   8a8c8:	0008a908 	cmpgei	zero,zero,8868
   8a8cc:	0008a908 	cmpgei	zero,zero,8868
   8a8d0:	0008add0 	cmplti	zero,zero,8887
   8a8d4:	0008a908 	cmpgei	zero,zero,8868
   8a8d8:	0008a908 	cmpgei	zero,zero,8868
   8a8dc:	0008a908 	cmpgei	zero,zero,8868
   8a8e0:	0008a908 	cmpgei	zero,zero,8868
   8a8e4:	0008a908 	cmpgei	zero,zero,8868
   8a8e8:	0008a908 	cmpgei	zero,zero,8868
   8a8ec:	0008a908 	cmpgei	zero,zero,8868
   8a8f0:	0008a908 	cmpgei	zero,zero,8868
   8a8f4:	0008a908 	cmpgei	zero,zero,8868
   8a8f8:	0008a908 	cmpgei	zero,zero,8868
   8a8fc:	0008adb0 	cmpltui	zero,zero,8886
   8a900:	0008a908 	cmpgei	zero,zero,8868
   8a904:	0008addc 	xori	zero,zero,8887
   8a908:	d8001515 	stw	zero,84(sp)
   8a90c:	80c00007 	ldb	r3,0(r16)
   8a910:	00800c04 	movi	r2,48
   8a914:	1880e926 	beq	r3,r2,8acbc <_strtod_r+0x4e0>
   8a918:	d8001615 	stw	zero,88(sp)
   8a91c:	dc001415 	stw	r16,80(sp)
   8a920:	84400007 	ldb	r17,0(r16)
   8a924:	00800bc4 	movi	r2,47
   8a928:	1443760e 	bge	r2,r17,8b704 <_strtod_r+0xf28>
   8a92c:	00800e44 	movi	r2,57
   8a930:	14437416 	blt	r2,r17,8b704 <_strtod_r+0xf28>
   8a934:	8025883a 	mov	r18,r16
   8a938:	0027883a 	mov	r19,zero
   8a93c:	d8001215 	stw	zero,72(sp)
   8a940:	d8001115 	stw	zero,68(sp)
   8a944:	00000f06 	br	8a984 <_strtod_r+0x1a8>
   8a948:	d9001217 	ldw	r4,72(sp)
   8a94c:	01400284 	movi	r5,10
   8a950:	0080ba00 	call	80ba0 <__mulsi3>
   8a954:	1445883a 	add	r2,r2,r17
   8a958:	10bff404 	addi	r2,r2,-48
   8a95c:	d8801215 	stw	r2,72(sp)
   8a960:	94000044 	addi	r16,r18,1
   8a964:	dc000415 	stw	r16,16(sp)
   8a968:	84400007 	ldb	r17,0(r16)
   8a96c:	00800bc4 	movi	r2,47
   8a970:	9cc00044 	addi	r19,r19,1
   8a974:	8025883a 	mov	r18,r16
   8a978:	1440130e 	bge	r2,r17,8a9c8 <_strtod_r+0x1ec>
   8a97c:	00800e44 	movi	r2,57
   8a980:	14401116 	blt	r2,r17,8a9c8 <_strtod_r+0x1ec>
   8a984:	00800204 	movi	r2,8
   8a988:	14ffef0e 	bge	r2,r19,8a948 <_strtod_r+0x16c>
   8a98c:	008003c4 	movi	r2,15
   8a990:	14fff316 	blt	r2,r19,8a960 <_strtod_r+0x184>
   8a994:	d9001117 	ldw	r4,68(sp)
   8a998:	01400284 	movi	r5,10
   8a99c:	94000044 	addi	r16,r18,1
   8a9a0:	0080ba00 	call	80ba0 <__mulsi3>
   8a9a4:	1445883a 	add	r2,r2,r17
   8a9a8:	10bff404 	addi	r2,r2,-48
   8a9ac:	d8801115 	stw	r2,68(sp)
   8a9b0:	dc000415 	stw	r16,16(sp)
   8a9b4:	84400007 	ldb	r17,0(r16)
   8a9b8:	00800bc4 	movi	r2,47
   8a9bc:	9cc00044 	addi	r19,r19,1
   8a9c0:	8025883a 	mov	r18,r16
   8a9c4:	147fed16 	blt	r2,r17,8a97c <_strtod_r+0x1a0>
   8a9c8:	00800b84 	movi	r2,46
   8a9cc:	8880c926 	beq	r17,r2,8acf4 <_strtod_r+0x518>
   8a9d0:	dcc01815 	stw	r19,96(sp)
   8a9d4:	d8001b15 	stw	zero,108(sp)
   8a9d8:	d8001715 	stw	zero,92(sp)
   8a9dc:	000d883a 	mov	r6,zero
   8a9e0:	00801944 	movi	r2,101
   8a9e4:	88802126 	beq	r17,r2,8aa6c <_strtod_r+0x290>
   8a9e8:	00801144 	movi	r2,69
   8a9ec:	88801f26 	beq	r17,r2,8aa6c <_strtod_r+0x290>
   8a9f0:	d9001817 	ldw	r4,96(sp)
   8a9f4:	2024c03a 	cmpne	r18,r4,zero
   8a9f8:	0009883a 	mov	r4,zero
   8a9fc:	9000651e 	bne	r18,zero,8ab94 <_strtod_r+0x3b8>
   8aa00:	3000c926 	beq	r6,zero,8ad28 <_strtod_r+0x54c>
   8aa04:	d8801d17 	ldw	r2,116(sp)
   8aa08:	10000326 	beq	r2,zero,8aa18 <_strtod_r+0x23c>
   8aa0c:	d8800417 	ldw	r2,16(sp)
   8aa10:	d8c01d17 	ldw	r3,116(sp)
   8aa14:	18800015 	stw	r2,0(r3)
   8aa18:	d9001517 	ldw	r4,84(sp)
   8aa1c:	2005003a 	cmpeq	r2,r4,zero
   8aa20:	10001c1e 	bne	r2,zero,8aa94 <_strtod_r+0x2b8>
   8aa24:	e0800017 	ldw	r2,0(fp)
   8aa28:	e0c00117 	ldw	r3,4(fp)
   8aa2c:	1009883a 	mov	r4,r2
   8aa30:	1960003c 	xorhi	r5,r3,32768
   8aa34:	2005883a 	mov	r2,r4
   8aa38:	2807883a 	mov	r3,r5
   8aa3c:	dfc02a17 	ldw	ra,168(sp)
   8aa40:	df002917 	ldw	fp,164(sp)
   8aa44:	ddc02817 	ldw	r23,160(sp)
   8aa48:	dd802717 	ldw	r22,156(sp)
   8aa4c:	dd402617 	ldw	r21,152(sp)
   8aa50:	dd002517 	ldw	r20,148(sp)
   8aa54:	dcc02417 	ldw	r19,144(sp)
   8aa58:	dc802317 	ldw	r18,140(sp)
   8aa5c:	dc402217 	ldw	r17,136(sp)
   8aa60:	dc002117 	ldw	r16,132(sp)
   8aa64:	dec02b04 	addi	sp,sp,172
   8aa68:	f800283a 	ret
   8aa6c:	d8801817 	ldw	r2,96(sp)
   8aa70:	1024c03a 	cmpne	r18,r2,zero
   8aa74:	90000a1e 	bne	r18,zero,8aaa0 <_strtod_r+0x2c4>
   8aa78:	3000091e 	bne	r6,zero,8aaa0 <_strtod_r+0x2c4>
   8aa7c:	d8c01617 	ldw	r3,88(sp)
   8aa80:	1805003a 	cmpeq	r2,r3,zero
   8aa84:	10000626 	beq	r2,zero,8aaa0 <_strtod_r+0x2c4>
   8aa88:	d8001515 	stw	zero,84(sp)
   8aa8c:	dd000415 	stw	r20,16(sp)
   8aa90:	003fdc06 	br	8aa04 <_strtod_r+0x228>
   8aa94:	e1000017 	ldw	r4,0(fp)
   8aa98:	e1400117 	ldw	r5,4(fp)
   8aa9c:	003fe506 	br	8aa34 <_strtod_r+0x258>
   8aaa0:	dd000417 	ldw	r20,16(sp)
   8aaa4:	00800ac4 	movi	r2,43
   8aaa8:	a4000044 	addi	r16,r20,1
   8aaac:	dc000415 	stw	r16,16(sp)
   8aab0:	a0c00047 	ldb	r3,1(r20)
   8aab4:	8009883a 	mov	r4,r16
   8aab8:	1880cb26 	beq	r3,r2,8ade8 <_strtod_r+0x60c>
   8aabc:	00800b44 	movi	r2,45
   8aac0:	18838326 	beq	r3,r2,8b8d0 <_strtod_r+0x10f4>
   8aac4:	1823883a 	mov	r17,r3
   8aac8:	88fff404 	addi	r3,r17,-48
   8aacc:	00800244 	movi	r2,9
   8aad0:	d8001915 	stw	zero,100(sp)
   8aad4:	10c0cb36 	bltu	r2,r3,8ae04 <_strtod_r+0x628>
   8aad8:	00800c04 	movi	r2,48
   8aadc:	8880061e 	bne	r17,r2,8aaf8 <_strtod_r+0x31c>
   8aae0:	dc000417 	ldw	r16,16(sp)
   8aae4:	8805883a 	mov	r2,r17
   8aae8:	84000044 	addi	r16,r16,1
   8aaec:	dc000415 	stw	r16,16(sp)
   8aaf0:	84400007 	ldb	r17,0(r16)
   8aaf4:	88bffc26 	beq	r17,r2,8aae8 <_strtod_r+0x30c>
   8aaf8:	88fff3c4 	addi	r3,r17,-49
   8aafc:	00800204 	movi	r2,8
   8ab00:	10ffbd36 	bltu	r2,r3,8a9f8 <_strtod_r+0x21c>
   8ab04:	dc000417 	ldw	r16,16(sp)
   8ab08:	893ff404 	addi	r4,r17,-48
   8ab0c:	00c00bc4 	movi	r3,47
   8ab10:	dc001315 	stw	r16,76(sp)
   8ab14:	84000044 	addi	r16,r16,1
   8ab18:	dc000415 	stw	r16,16(sp)
   8ab1c:	84400007 	ldb	r17,0(r16)
   8ab20:	1c40100e 	bge	r3,r17,8ab64 <_strtod_r+0x388>
   8ab24:	00800e44 	movi	r2,57
   8ab28:	14400e16 	blt	r2,r17,8ab64 <_strtod_r+0x388>
   8ab2c:	182f883a 	mov	r23,r3
   8ab30:	102d883a 	mov	r22,r2
   8ab34:	00000106 	br	8ab3c <_strtod_r+0x360>
   8ab38:	b4400a16 	blt	r22,r17,8ab64 <_strtod_r+0x388>
   8ab3c:	84000044 	addi	r16,r16,1
   8ab40:	01400284 	movi	r5,10
   8ab44:	d9802015 	stw	r6,128(sp)
   8ab48:	0080ba00 	call	80ba0 <__mulsi3>
   8ab4c:	dc000415 	stw	r16,16(sp)
   8ab50:	8885883a 	add	r2,r17,r2
   8ab54:	84400007 	ldb	r17,0(r16)
   8ab58:	113ff404 	addi	r4,r2,-48
   8ab5c:	d9802017 	ldw	r6,128(sp)
   8ab60:	bc7ff516 	blt	r23,r17,8ab38 <_strtod_r+0x35c>
   8ab64:	d8801317 	ldw	r2,76(sp)
   8ab68:	8087c83a 	sub	r3,r16,r2
   8ab6c:	00800204 	movi	r2,8
   8ab70:	10c2ff16 	blt	r2,r3,8b770 <_strtod_r+0xf94>
   8ab74:	009387c4 	movi	r2,19999
   8ab78:	1100010e 	bge	r2,r4,8ab80 <_strtod_r+0x3a4>
   8ab7c:	1009883a 	mov	r4,r2
   8ab80:	d8c01917 	ldw	r3,100(sp)
   8ab84:	1805003a 	cmpeq	r2,r3,zero
   8ab88:	103f9c1e 	bne	r2,zero,8a9fc <_strtod_r+0x220>
   8ab8c:	0109c83a 	sub	r4,zero,r4
   8ab90:	903f9b26 	beq	r18,zero,8aa00 <_strtod_r+0x224>
   8ab94:	d8801717 	ldw	r2,92(sp)
   8ab98:	2089c83a 	sub	r4,r4,r2
   8ab9c:	d9000f15 	stw	r4,60(sp)
   8aba0:	9800811e 	bne	r19,zero,8ada8 <_strtod_r+0x5cc>
   8aba4:	dd001817 	ldw	r20,96(sp)
   8aba8:	dc801817 	ldw	r18,96(sp)
   8abac:	00800404 	movi	r2,16
   8abb0:	1480010e 	bge	r2,r18,8abb8 <_strtod_r+0x3dc>
   8abb4:	1025883a 	mov	r18,r2
   8abb8:	d9001217 	ldw	r4,72(sp)
   8abbc:	008f8300 	call	8f830 <__floatunsidf>
   8abc0:	100f883a 	mov	r7,r2
   8abc4:	e0800015 	stw	r2,0(fp)
   8abc8:	00800244 	movi	r2,9
   8abcc:	e0c00115 	stw	r3,4(fp)
   8abd0:	1480160e 	bge	r2,r18,8ac2c <_strtod_r+0x450>
   8abd4:	900c90fa 	slli	r6,r18,3
   8abd8:	01000274 	movhi	r4,9
   8abdc:	21113004 	addi	r4,r4,17600
   8abe0:	180b883a 	mov	r5,r3
   8abe4:	310d883a 	add	r6,r6,r4
   8abe8:	30ffef17 	ldw	r3,-68(r6)
   8abec:	30bfee17 	ldw	r2,-72(r6)
   8abf0:	3809883a 	mov	r4,r7
   8abf4:	180f883a 	mov	r7,r3
   8abf8:	100d883a 	mov	r6,r2
   8abfc:	008eca00 	call	8eca0 <__muldf3>
   8ac00:	d9001117 	ldw	r4,68(sp)
   8ac04:	1021883a 	mov	r16,r2
   8ac08:	1823883a 	mov	r17,r3
   8ac0c:	008f8300 	call	8f830 <__floatunsidf>
   8ac10:	880b883a 	mov	r5,r17
   8ac14:	180f883a 	mov	r7,r3
   8ac18:	8009883a 	mov	r4,r16
   8ac1c:	100d883a 	mov	r6,r2
   8ac20:	008ec2c0 	call	8ec2c <__adddf3>
   8ac24:	e0c00115 	stw	r3,4(fp)
   8ac28:	e0800015 	stw	r2,0(fp)
   8ac2c:	d8c01817 	ldw	r3,96(sp)
   8ac30:	010003c4 	movi	r4,15
   8ac34:	20c09e16 	blt	r4,r3,8aeb0 <_strtod_r+0x6d4>
   8ac38:	d8800f17 	ldw	r2,60(sp)
   8ac3c:	103f7126 	beq	r2,zero,8aa04 <_strtod_r+0x228>
   8ac40:	0083d90e 	bge	zero,r2,8bba8 <_strtod_r+0x13cc>
   8ac44:	d8c00f17 	ldw	r3,60(sp)
   8ac48:	00800584 	movi	r2,22
   8ac4c:	10c2ca0e 	bge	r2,r3,8b778 <_strtod_r+0xf9c>
   8ac50:	d8801817 	ldw	r2,96(sp)
   8ac54:	d8c00f17 	ldw	r3,60(sp)
   8ac58:	20a3c83a 	sub	r17,r4,r2
   8ac5c:	88800584 	addi	r2,r17,22
   8ac60:	10c09316 	blt	r2,r3,8aeb0 <_strtod_r+0x6d4>
   8ac64:	880890fa 	slli	r4,r17,3
   8ac68:	04000274 	movhi	r16,9
   8ac6c:	84113004 	addi	r16,r16,17600
   8ac70:	e0800017 	ldw	r2,0(fp)
   8ac74:	2409883a 	add	r4,r4,r16
   8ac78:	22000017 	ldw	r8,0(r4)
   8ac7c:	22400117 	ldw	r9,4(r4)
   8ac80:	e0c00117 	ldw	r3,4(fp)
   8ac84:	1009883a 	mov	r4,r2
   8ac88:	480f883a 	mov	r7,r9
   8ac8c:	180b883a 	mov	r5,r3
   8ac90:	400d883a 	mov	r6,r8
   8ac94:	008eca00 	call	8eca0 <__muldf3>
   8ac98:	d9000f17 	ldw	r4,60(sp)
   8ac9c:	180b883a 	mov	r5,r3
   8aca0:	2455c83a 	sub	r10,r4,r17
   8aca4:	501490fa 	slli	r10,r10,3
   8aca8:	1009883a 	mov	r4,r2
   8acac:	5415883a 	add	r10,r10,r16
   8acb0:	52000017 	ldw	r8,0(r10)
   8acb4:	52400117 	ldw	r9,4(r10)
   8acb8:	0002b906 	br	8b7a0 <_strtod_r+0xfc4>
   8acbc:	80c00047 	ldb	r3,1(r16)
   8acc0:	00801604 	movi	r2,88
   8acc4:	18805226 	beq	r3,r2,8ae10 <_strtod_r+0x634>
   8acc8:	00801e04 	movi	r2,120
   8accc:	18805026 	beq	r3,r2,8ae10 <_strtod_r+0x634>
   8acd0:	84000044 	addi	r16,r16,1
   8acd4:	dc000415 	stw	r16,16(sp)
   8acd8:	80c00007 	ldb	r3,0(r16)
   8acdc:	00800c04 	movi	r2,48
   8ace0:	18bffb26 	beq	r3,r2,8acd0 <_strtod_r+0x4f4>
   8ace4:	183f4726 	beq	r3,zero,8aa04 <_strtod_r+0x228>
   8ace8:	01000044 	movi	r4,1
   8acec:	d9001615 	stw	r4,88(sp)
   8acf0:	003f0a06 	br	8a91c <_strtod_r+0x140>
   8acf4:	84000044 	addi	r16,r16,1
   8acf8:	dc000415 	stw	r16,16(sp)
   8acfc:	94400047 	ldb	r17,1(r18)
   8ad00:	9800ba26 	beq	r19,zero,8afec <_strtod_r+0x810>
   8ad04:	dcc01815 	stw	r19,96(sp)
   8ad08:	d8001715 	stw	zero,92(sp)
   8ad0c:	000d883a 	mov	r6,zero
   8ad10:	8dbff404 	addi	r22,r17,-48
   8ad14:	00800244 	movi	r2,9
   8ad18:	15826e2e 	bgeu	r2,r22,8b6d4 <_strtod_r+0xef8>
   8ad1c:	01000044 	movi	r4,1
   8ad20:	d9001b15 	stw	r4,108(sp)
   8ad24:	003f2e06 	br	8a9e0 <_strtod_r+0x204>
   8ad28:	d8c01617 	ldw	r3,88(sp)
   8ad2c:	1804c03a 	cmpne	r2,r3,zero
   8ad30:	103f341e 	bne	r2,zero,8aa04 <_strtod_r+0x228>
   8ad34:	d9001b17 	ldw	r4,108(sp)
   8ad38:	2004c03a 	cmpne	r2,r4,zero
   8ad3c:	103f521e 	bne	r2,zero,8aa88 <_strtod_r+0x2ac>
   8ad40:	00801384 	movi	r2,78
   8ad44:	8883b526 	beq	r17,r2,8bc1c <_strtod_r+0x1440>
   8ad48:	1443b016 	blt	r2,r17,8bc0c <_strtod_r+0x1430>
   8ad4c:	00801244 	movi	r2,73
   8ad50:	88bf4d1e 	bne	r17,r2,8aa88 <_strtod_r+0x2ac>
   8ad54:	dc000404 	addi	r16,sp,16
   8ad58:	8009883a 	mov	r4,r16
   8ad5c:	01400274 	movhi	r5,9
   8ad60:	29517904 	addi	r5,r5,17892
   8ad64:	008a7940 	call	8a794 <match>
   8ad68:	103f4726 	beq	r2,zero,8aa88 <_strtod_r+0x2ac>
   8ad6c:	d8800417 	ldw	r2,16(sp)
   8ad70:	8009883a 	mov	r4,r16
   8ad74:	01400274 	movhi	r5,9
   8ad78:	29517a04 	addi	r5,r5,17896
   8ad7c:	143fffc4 	addi	r16,r2,-1
   8ad80:	dc000415 	stw	r16,16(sp)
   8ad84:	008a7940 	call	8a794 <match>
   8ad88:	1000031e 	bne	r2,zero,8ad98 <_strtod_r+0x5bc>
   8ad8c:	d8800417 	ldw	r2,16(sp)
   8ad90:	14000044 	addi	r16,r2,1
   8ad94:	dc000415 	stw	r16,16(sp)
   8ad98:	019ffc34 	movhi	r6,32752
   8ad9c:	e1800115 	stw	r6,4(fp)
   8ada0:	e0000015 	stw	zero,0(fp)
   8ada4:	003f1706 	br	8aa04 <_strtod_r+0x228>
   8ada8:	9829883a 	mov	r20,r19
   8adac:	003f7e06 	br	8aba8 <_strtod_r+0x3cc>
   8adb0:	d8001515 	stw	zero,84(sp)
   8adb4:	84000044 	addi	r16,r16,1
   8adb8:	dc000415 	stw	r16,16(sp)
   8adbc:	80800007 	ldb	r2,0(r16)
   8adc0:	103ed21e 	bne	r2,zero,8a90c <_strtod_r+0x130>
   8adc4:	d8001515 	stw	zero,84(sp)
   8adc8:	dd000415 	stw	r20,16(sp)
   8adcc:	003f0d06 	br	8aa04 <_strtod_r+0x228>
   8add0:	84000044 	addi	r16,r16,1
   8add4:	dc000415 	stw	r16,16(sp)
   8add8:	003e9206 	br	8a824 <_strtod_r+0x48>
   8addc:	00800044 	movi	r2,1
   8ade0:	d8801515 	stw	r2,84(sp)
   8ade4:	003ff306 	br	8adb4 <_strtod_r+0x5d8>
   8ade8:	d8001915 	stw	zero,100(sp)
   8adec:	84000044 	addi	r16,r16,1
   8adf0:	dc000415 	stw	r16,16(sp)
   8adf4:	24400047 	ldb	r17,1(r4)
   8adf8:	00800244 	movi	r2,9
   8adfc:	88fff404 	addi	r3,r17,-48
   8ae00:	10ff352e 	bgeu	r2,r3,8aad8 <_strtod_r+0x2fc>
   8ae04:	0009883a 	mov	r4,zero
   8ae08:	dd000415 	stw	r20,16(sp)
   8ae0c:	003efb06 	br	8a9fc <_strtod_r+0x220>
   8ae10:	d8c01517 	ldw	r3,84(sp)
   8ae14:	04400274 	movhi	r17,9
   8ae18:	8c53ed04 	addi	r17,r17,20404
   8ae1c:	d8800504 	addi	r2,sp,20
   8ae20:	a809883a 	mov	r4,r21
   8ae24:	d9400404 	addi	r5,sp,16
   8ae28:	880d883a 	mov	r6,r17
   8ae2c:	d9c00604 	addi	r7,sp,24
   8ae30:	d8800015 	stw	r2,0(sp)
   8ae34:	d8c00115 	stw	r3,4(sp)
   8ae38:	008cd100 	call	8cd10 <__gethex>
   8ae3c:	140001cc 	andi	r16,r2,7
   8ae40:	1025883a 	mov	r18,r2
   8ae44:	803eef26 	beq	r16,zero,8aa04 <_strtod_r+0x228>
   8ae48:	04c00184 	movi	r19,6
   8ae4c:	84ff0e26 	beq	r16,r19,8aa88 <_strtod_r+0x2ac>
   8ae50:	d9800517 	ldw	r6,20(sp)
   8ae54:	30000626 	beq	r6,zero,8ae70 <_strtod_r+0x694>
   8ae58:	89400017 	ldw	r5,0(r17)
   8ae5c:	d9000d04 	addi	r4,sp,52
   8ae60:	00899240 	call	89924 <__copybits>
   8ae64:	d9400517 	ldw	r5,20(sp)
   8ae68:	a809883a 	mov	r4,r21
   8ae6c:	00894840 	call	89484 <_Bfree>
   8ae70:	d9400617 	ldw	r5,24(sp)
   8ae74:	9c025436 	bltu	r19,r16,8b7c8 <_strtod_r+0xfec>
   8ae78:	8405883a 	add	r2,r16,r16
   8ae7c:	1085883a 	add	r2,r2,r2
   8ae80:	00c00274 	movhi	r3,9
   8ae84:	18eba504 	addi	r3,r3,-20844
   8ae88:	10c5883a 	add	r2,r2,r3
   8ae8c:	11000017 	ldw	r4,0(r2)
   8ae90:	2000683a 	jmp	r4
   8ae94:	0008b808 	cmpgei	zero,zero,8928
   8ae98:	0008b814 	movui	zero,8928
   8ae9c:	0008b7b8 	rdprs	zero,zero,8926
   8aea0:	0008b7e0 	cmpeqi	zero,zero,8927
   8aea4:	0008b7f0 	cmpltui	zero,zero,8927
   8aea8:	0008b814 	movui	zero,8928
   8aeac:	0008b808 	cmpgei	zero,zero,8928
   8aeb0:	d9001817 	ldw	r4,96(sp)
   8aeb4:	d8c00f17 	ldw	r3,60(sp)
   8aeb8:	2485c83a 	sub	r2,r4,r18
   8aebc:	18a1883a 	add	r16,r3,r2
   8aec0:	0402e80e 	bge	zero,r16,8ba64 <_strtod_r+0x1288>
   8aec4:	814003cc 	andi	r5,r16,15
   8aec8:	28000f26 	beq	r5,zero,8af08 <_strtod_r+0x72c>
   8aecc:	280a90fa 	slli	r5,r5,3
   8aed0:	01000274 	movhi	r4,9
   8aed4:	21113004 	addi	r4,r4,17600
   8aed8:	e0800017 	ldw	r2,0(fp)
   8aedc:	290b883a 	add	r5,r5,r4
   8aee0:	2a000017 	ldw	r8,0(r5)
   8aee4:	e0c00117 	ldw	r3,4(fp)
   8aee8:	2a400117 	ldw	r9,4(r5)
   8aeec:	1009883a 	mov	r4,r2
   8aef0:	180b883a 	mov	r5,r3
   8aef4:	480f883a 	mov	r7,r9
   8aef8:	400d883a 	mov	r6,r8
   8aefc:	008eca00 	call	8eca0 <__muldf3>
   8af00:	e0c00115 	stw	r3,4(fp)
   8af04:	e0800015 	stw	r2,0(fp)
   8af08:	00bffc04 	movi	r2,-16
   8af0c:	808c703a 	and	r6,r16,r2
   8af10:	30006726 	beq	r6,zero,8b0b0 <_strtod_r+0x8d4>
   8af14:	00804d04 	movi	r2,308
   8af18:	11820f16 	blt	r2,r6,8b758 <_strtod_r+0xf7c>
   8af1c:	3021d13a 	srai	r16,r6,4
   8af20:	00800044 	movi	r2,1
   8af24:	14037f0e 	bge	r2,r16,8bd24 <_strtod_r+0x1548>
   8af28:	05800274 	movhi	r22,9
   8af2c:	b5916204 	addi	r22,r22,17800
   8af30:	1027883a 	mov	r19,r2
   8af34:	0025883a 	mov	r18,zero
   8af38:	b023883a 	mov	r17,r22
   8af3c:	8080004c 	andi	r2,r16,1
   8af40:	1005003a 	cmpeq	r2,r2,zero
   8af44:	1000091e 	bne	r2,zero,8af6c <_strtod_r+0x790>
   8af48:	e0800017 	ldw	r2,0(fp)
   8af4c:	e0c00117 	ldw	r3,4(fp)
   8af50:	89800017 	ldw	r6,0(r17)
   8af54:	89c00117 	ldw	r7,4(r17)
   8af58:	180b883a 	mov	r5,r3
   8af5c:	1009883a 	mov	r4,r2
   8af60:	008eca00 	call	8eca0 <__muldf3>
   8af64:	e0c00115 	stw	r3,4(fp)
   8af68:	e0800015 	stw	r2,0(fp)
   8af6c:	8021d07a 	srai	r16,r16,1
   8af70:	94800044 	addi	r18,r18,1
   8af74:	8c400204 	addi	r17,r17,8
   8af78:	9c3ff016 	blt	r19,r16,8af3c <_strtod_r+0x760>
   8af7c:	900e90fa 	slli	r7,r18,3
   8af80:	e2000117 	ldw	r8,4(fp)
   8af84:	e1000017 	ldw	r4,0(fp)
   8af88:	3d8f883a 	add	r7,r7,r22
   8af8c:	38800017 	ldw	r2,0(r7)
   8af90:	38c00117 	ldw	r3,4(r7)
   8af94:	01bf2c34 	movhi	r6,64688
   8af98:	418d883a 	add	r6,r8,r6
   8af9c:	300b883a 	mov	r5,r6
   8afa0:	180f883a 	mov	r7,r3
   8afa4:	100d883a 	mov	r6,r2
   8afa8:	008eca00 	call	8eca0 <__muldf3>
   8afac:	1009883a 	mov	r4,r2
   8afb0:	180b883a 	mov	r5,r3
   8afb4:	199ffc2c 	andhi	r6,r3,32752
   8afb8:	009f2834 	movhi	r2,31904
   8afbc:	e1000015 	stw	r4,0(fp)
   8afc0:	e1400115 	stw	r5,4(fp)
   8afc4:	1181e436 	bltu	r2,r6,8b758 <_strtod_r+0xf7c>
   8afc8:	009f2434 	movhi	r2,31888
   8afcc:	11833f2e 	bgeu	r2,r6,8bccc <_strtod_r+0x14f0>
   8afd0:	d8001c15 	stw	zero,112(sp)
   8afd4:	019ffc34 	movhi	r6,32752
   8afd8:	31bfffc4 	addi	r6,r6,-1
   8afdc:	01ffffc4 	movi	r7,-1
   8afe0:	e1800115 	stw	r6,4(fp)
   8afe4:	e1c00015 	stw	r7,0(fp)
   8afe8:	00003206 	br	8b0b4 <_strtod_r+0x8d8>
   8afec:	00800c04 	movi	r2,48
   8aff0:	8883221e 	bne	r17,r2,8bc7c <_strtod_r+0x14a0>
   8aff4:	8805883a 	mov	r2,r17
   8aff8:	000d883a 	mov	r6,zero
   8affc:	84000044 	addi	r16,r16,1
   8b000:	dc000415 	stw	r16,16(sp)
   8b004:	84400007 	ldb	r17,0(r16)
   8b008:	31800044 	addi	r6,r6,1
   8b00c:	88bffb26 	beq	r17,r2,8affc <_strtod_r+0x820>
   8b010:	88fff3c4 	addi	r3,r17,-49
   8b014:	00800204 	movi	r2,8
   8b018:	10c1ca36 	bltu	r2,r3,8b744 <_strtod_r+0xf68>
   8b01c:	d8c00417 	ldw	r3,16(sp)
   8b020:	d9801715 	stw	r6,92(sp)
   8b024:	8dbff404 	addi	r22,r17,-48
   8b028:	d8c01415 	stw	r3,80(sp)
   8b02c:	1821883a 	mov	r16,r3
   8b030:	d8001815 	stw	zero,96(sp)
   8b034:	01800044 	movi	r6,1
   8b038:	b0023526 	beq	r22,zero,8b910 <_strtod_r+0x1134>
   8b03c:	d9001717 	ldw	r4,92(sp)
   8b040:	00800044 	movi	r2,1
   8b044:	2189883a 	add	r4,r4,r6
   8b048:	d9001715 	stw	r4,92(sp)
   8b04c:	1183390e 	bge	r2,r6,8bd34 <_strtod_r+0x1558>
   8b050:	dc401817 	ldw	r17,96(sp)
   8b054:	1025883a 	mov	r18,r2
   8b058:	05c00204 	movi	r23,8
   8b05c:	00000806 	br	8b080 <_strtod_r+0x8a4>
   8b060:	d9001217 	ldw	r4,72(sp)
   8b064:	01400284 	movi	r5,10
   8b068:	d9802015 	stw	r6,128(sp)
   8b06c:	0080ba00 	call	80ba0 <__mulsi3>
   8b070:	d9802017 	ldw	r6,128(sp)
   8b074:	d8801215 	stw	r2,72(sp)
   8b078:	94800044 	addi	r18,r18,1
   8b07c:	91821726 	beq	r18,r6,8b8dc <_strtod_r+0x1100>
   8b080:	8c400044 	addi	r17,r17,1
   8b084:	88bfffc4 	addi	r2,r17,-1
   8b088:	b8bff50e 	bge	r23,r2,8b060 <_strtod_r+0x884>
   8b08c:	00800404 	movi	r2,16
   8b090:	147ff916 	blt	r2,r17,8b078 <_strtod_r+0x89c>
   8b094:	d9001117 	ldw	r4,68(sp)
   8b098:	01400284 	movi	r5,10
   8b09c:	d9802015 	stw	r6,128(sp)
   8b0a0:	0080ba00 	call	80ba0 <__mulsi3>
   8b0a4:	d9802017 	ldw	r6,128(sp)
   8b0a8:	d8801115 	stw	r2,68(sp)
   8b0ac:	003ff206 	br	8b078 <_strtod_r+0x89c>
   8b0b0:	d8001c15 	stw	zero,112(sp)
   8b0b4:	d8c01217 	ldw	r3,72(sp)
   8b0b8:	d9401417 	ldw	r5,80(sp)
   8b0bc:	d9c01817 	ldw	r7,96(sp)
   8b0c0:	a809883a 	mov	r4,r21
   8b0c4:	a00d883a 	mov	r6,r20
   8b0c8:	d8c00015 	stw	r3,0(sp)
   8b0cc:	008a3f00 	call	8a3f0 <__s2b>
   8b0d0:	11000304 	addi	r4,r2,12
   8b0d4:	d8801015 	stw	r2,64(sp)
   8b0d8:	d8800f17 	ldw	r2,60(sp)
   8b0dc:	d9001f15 	stw	r4,124(sp)
   8b0e0:	1004803a 	cmplt	r2,r2,zero
   8b0e4:	d8801e15 	stw	r2,120(sp)
   8b0e8:	d8c01017 	ldw	r3,64(sp)
   8b0ec:	a809883a 	mov	r4,r21
   8b0f0:	19400117 	ldw	r5,4(r3)
   8b0f4:	0089a040 	call	89a04 <_Balloc>
   8b0f8:	d9001017 	ldw	r4,64(sp)
   8b0fc:	d9401f17 	ldw	r5,124(sp)
   8b100:	102f883a 	mov	r23,r2
   8b104:	21800417 	ldw	r6,16(r4)
   8b108:	11000304 	addi	r4,r2,12
   8b10c:	318d883a 	add	r6,r6,r6
   8b110:	318d883a 	add	r6,r6,r6
   8b114:	31800204 	addi	r6,r6,8
   8b118:	008218c0 	call	8218c <memcpy>
   8b11c:	e2000017 	ldw	r8,0(fp)
   8b120:	e2400117 	ldw	r9,4(fp)
   8b124:	a809883a 	mov	r4,r21
   8b128:	400b883a 	mov	r5,r8
   8b12c:	d9c00204 	addi	r7,sp,8
   8b130:	d8800304 	addi	r2,sp,12
   8b134:	480d883a 	mov	r6,r9
   8b138:	d8800015 	stw	r2,0(sp)
   8b13c:	0089ac00 	call	89ac0 <__d2b>
   8b140:	a809883a 	mov	r4,r21
   8b144:	01400044 	movi	r5,1
   8b148:	d8800515 	stw	r2,20(sp)
   8b14c:	008a1680 	call	8a168 <__i2b>
   8b150:	d8c01e17 	ldw	r3,120(sp)
   8b154:	102d883a 	mov	r22,r2
   8b158:	1801091e 	bne	r3,zero,8b580 <_strtod_r+0xda4>
   8b15c:	dd000f17 	ldw	r20,60(sp)
   8b160:	000f883a 	mov	r7,zero
   8b164:	0013883a 	mov	r9,zero
   8b168:	a011883a 	mov	r8,r20
   8b16c:	d8800217 	ldw	r2,8(sp)
   8b170:	10010116 	blt	r2,zero,8b578 <_strtod_r+0xd9c>
   8b174:	388f883a 	add	r7,r7,r2
   8b178:	d8c01c17 	ldw	r3,112(sp)
   8b17c:	d9400317 	ldw	r5,12(sp)
   8b180:	10c9c83a 	sub	r4,r2,r3
   8b184:	2145883a 	add	r2,r4,r5
   8b188:	10bfffc4 	addi	r2,r2,-1
   8b18c:	00ff0084 	movi	r3,-1022
   8b190:	10c09f0e 	bge	r2,r3,8b410 <_strtod_r+0xc34>
   8b194:	21810cc4 	addi	r6,r4,1075
   8b198:	d9001c17 	ldw	r4,112(sp)
   8b19c:	4185883a 	add	r2,r8,r6
   8b1a0:	39a1883a 	add	r16,r7,r6
   8b1a4:	20a5883a 	add	r18,r4,r2
   8b1a8:	3807883a 	mov	r3,r7
   8b1ac:	81c0010e 	bge	r16,r7,8b1b4 <_strtod_r+0x9d8>
   8b1b0:	8007883a 	mov	r3,r16
   8b1b4:	9005883a 	mov	r2,r18
   8b1b8:	1c80010e 	bge	r3,r18,8b1c0 <_strtod_r+0x9e4>
   8b1bc:	1805883a 	mov	r2,r3
   8b1c0:	0080eb0e 	bge	zero,r2,8b570 <_strtod_r+0xd94>
   8b1c4:	38a7c83a 	sub	r19,r7,r2
   8b1c8:	80a1c83a 	sub	r16,r16,r2
   8b1cc:	90a5c83a 	sub	r18,r18,r2
   8b1d0:	02400e0e 	bge	zero,r9,8b20c <_strtod_r+0xa30>
   8b1d4:	480d883a 	mov	r6,r9
   8b1d8:	b00b883a 	mov	r5,r22
   8b1dc:	a809883a 	mov	r4,r21
   8b1e0:	008a2d00 	call	8a2d0 <__pow5mult>
   8b1e4:	d9800517 	ldw	r6,20(sp)
   8b1e8:	a809883a 	mov	r4,r21
   8b1ec:	100b883a 	mov	r5,r2
   8b1f0:	102d883a 	mov	r22,r2
   8b1f4:	0089f140 	call	89f14 <__multiply>
   8b1f8:	d9400517 	ldw	r5,20(sp)
   8b1fc:	1023883a 	mov	r17,r2
   8b200:	a809883a 	mov	r4,r21
   8b204:	00894840 	call	89484 <_Bfree>
   8b208:	dc400515 	stw	r17,20(sp)
   8b20c:	0400050e 	bge	zero,r16,8b224 <_strtod_r+0xa48>
   8b210:	d9400517 	ldw	r5,20(sp)
   8b214:	800d883a 	mov	r6,r16
   8b218:	a809883a 	mov	r4,r21
   8b21c:	0089dc80 	call	89dc8 <__lshift>
   8b220:	d8800515 	stw	r2,20(sp)
   8b224:	a000741e 	bne	r20,zero,8b3f8 <_strtod_r+0xc1c>
   8b228:	0480050e 	bge	zero,r18,8b240 <_strtod_r+0xa64>
   8b22c:	b80b883a 	mov	r5,r23
   8b230:	900d883a 	mov	r6,r18
   8b234:	a809883a 	mov	r4,r21
   8b238:	0089dc80 	call	89dc8 <__lshift>
   8b23c:	102f883a 	mov	r23,r2
   8b240:	04c0050e 	bge	zero,r19,8b258 <_strtod_r+0xa7c>
   8b244:	b00b883a 	mov	r5,r22
   8b248:	980d883a 	mov	r6,r19
   8b24c:	a809883a 	mov	r4,r21
   8b250:	0089dc80 	call	89dc8 <__lshift>
   8b254:	102d883a 	mov	r22,r2
   8b258:	d9400517 	ldw	r5,20(sp)
   8b25c:	a809883a 	mov	r4,r21
   8b260:	b80d883a 	mov	r6,r23
   8b264:	0089c3c0 	call	89c3c <__mdiff>
   8b268:	1029883a 	mov	r20,r2
   8b26c:	10800317 	ldw	r2,12(r2)
   8b270:	a009883a 	mov	r4,r20
   8b274:	a0000315 	stw	zero,12(r20)
   8b278:	b00b883a 	mov	r5,r22
   8b27c:	d8801a15 	stw	r2,104(sp)
   8b280:	00895e00 	call	895e0 <__mcmp>
   8b284:	1001a616 	blt	r2,zero,8b920 <_strtod_r+0x1144>
   8b288:	10016d26 	beq	r2,zero,8b840 <_strtod_r+0x1064>
   8b28c:	a009883a 	mov	r4,r20
   8b290:	b00b883a 	mov	r5,r22
   8b294:	00897e00 	call	897e0 <__ratio>
   8b298:	0011883a 	mov	r8,zero
   8b29c:	02500034 	movhi	r9,16384
   8b2a0:	480f883a 	mov	r7,r9
   8b2a4:	1009883a 	mov	r4,r2
   8b2a8:	180b883a 	mov	r5,r3
   8b2ac:	400d883a 	mov	r6,r8
   8b2b0:	1021883a 	mov	r16,r2
   8b2b4:	1823883a 	mov	r17,r3
   8b2b8:	008f5640 	call	8f564 <__ledf2>
   8b2bc:	00805716 	blt	zero,r2,8b41c <_strtod_r+0xc40>
   8b2c0:	d8801a17 	ldw	r2,104(sp)
   8b2c4:	1025003a 	cmpeq	r18,r2,zero
   8b2c8:	90008c1e 	bne	r18,zero,8b4fc <_strtod_r+0xd20>
   8b2cc:	008ffc34 	movhi	r2,16368
   8b2d0:	0021883a 	mov	r16,zero
   8b2d4:	1023883a 	mov	r17,r2
   8b2d8:	d8000715 	stw	zero,28(sp)
   8b2dc:	d8800815 	stw	r2,32(sp)
   8b2e0:	e1c00117 	ldw	r7,4(fp)
   8b2e4:	009ff834 	movhi	r2,32736
   8b2e8:	3cdffc2c 	andhi	r19,r7,32752
   8b2ec:	98805f26 	beq	r19,r2,8b46c <_strtod_r+0xc90>
   8b2f0:	d8c01c17 	ldw	r3,112(sp)
   8b2f4:	18001b26 	beq	r3,zero,8b364 <_strtod_r+0xb88>
   8b2f8:	0081a834 	movhi	r2,1696
   8b2fc:	14c01936 	bltu	r2,r19,8b364 <_strtod_r+0xb88>
   8b300:	00bff034 	movhi	r2,65472
   8b304:	00d07834 	movhi	r3,16864
   8b308:	18ffffc4 	addi	r3,r3,-1
   8b30c:	180f883a 	mov	r7,r3
   8b310:	8009883a 	mov	r4,r16
   8b314:	880b883a 	mov	r5,r17
   8b318:	100d883a 	mov	r6,r2
   8b31c:	008f5640 	call	8f564 <__ledf2>
   8b320:	00800b16 	blt	zero,r2,8b350 <_strtod_r+0xb74>
   8b324:	880b883a 	mov	r5,r17
   8b328:	8009883a 	mov	r4,r16
   8b32c:	008d8c40 	call	8d8c4 <__fixunsdfsi>
   8b330:	1000e31e 	bne	r2,zero,8b6c0 <_strtod_r+0xee4>
   8b334:	0021883a 	mov	r16,zero
   8b338:	044ffc34 	movhi	r17,16368
   8b33c:	9000dd1e 	bne	r18,zero,8b6b4 <_strtod_r+0xed8>
   8b340:	8005883a 	mov	r2,r16
   8b344:	8807883a 	mov	r3,r17
   8b348:	d8c00815 	stw	r3,32(sp)
   8b34c:	d8800715 	stw	r2,28(sp)
   8b350:	d8800817 	ldw	r2,32(sp)
   8b354:	00c1ac34 	movhi	r3,1712
   8b358:	14c5c83a 	sub	r2,r2,r19
   8b35c:	10c5883a 	add	r2,r2,r3
   8b360:	d8800815 	stw	r2,32(sp)
   8b364:	e0800017 	ldw	r2,0(fp)
   8b368:	e0c00117 	ldw	r3,4(fp)
   8b36c:	1009883a 	mov	r4,r2
   8b370:	180b883a 	mov	r5,r3
   8b374:	00896400 	call	89640 <__ulp>
   8b378:	d9800717 	ldw	r6,28(sp)
   8b37c:	d9c00817 	ldw	r7,32(sp)
   8b380:	180b883a 	mov	r5,r3
   8b384:	1009883a 	mov	r4,r2
   8b388:	008eca00 	call	8eca0 <__muldf3>
   8b38c:	e2000017 	ldw	r8,0(fp)
   8b390:	e2400117 	ldw	r9,4(fp)
   8b394:	180b883a 	mov	r5,r3
   8b398:	1009883a 	mov	r4,r2
   8b39c:	480f883a 	mov	r7,r9
   8b3a0:	400d883a 	mov	r6,r8
   8b3a4:	008ec2c0 	call	8ec2c <__adddf3>
   8b3a8:	e0c00115 	stw	r3,4(fp)
   8b3ac:	e0800015 	stw	r2,0(fp)
   8b3b0:	d9001c17 	ldw	r4,112(sp)
   8b3b4:	e4800117 	ldw	r18,4(fp)
   8b3b8:	2000021e 	bne	r4,zero,8b3c4 <_strtod_r+0xbe8>
   8b3bc:	909ffc2c 	andhi	r2,r18,32752
   8b3c0:	98807f26 	beq	r19,r2,8b5c0 <_strtod_r+0xde4>
   8b3c4:	d9400517 	ldw	r5,20(sp)
   8b3c8:	a809883a 	mov	r4,r21
   8b3cc:	00894840 	call	89484 <_Bfree>
   8b3d0:	a809883a 	mov	r4,r21
   8b3d4:	b80b883a 	mov	r5,r23
   8b3d8:	00894840 	call	89484 <_Bfree>
   8b3dc:	a809883a 	mov	r4,r21
   8b3e0:	b00b883a 	mov	r5,r22
   8b3e4:	00894840 	call	89484 <_Bfree>
   8b3e8:	a809883a 	mov	r4,r21
   8b3ec:	a00b883a 	mov	r5,r20
   8b3f0:	00894840 	call	89484 <_Bfree>
   8b3f4:	003f3c06 	br	8b0e8 <_strtod_r+0x90c>
   8b3f8:	b80b883a 	mov	r5,r23
   8b3fc:	a00d883a 	mov	r6,r20
   8b400:	a809883a 	mov	r4,r21
   8b404:	008a2d00 	call	8a2d0 <__pow5mult>
   8b408:	102f883a 	mov	r23,r2
   8b40c:	003f8606 	br	8b228 <_strtod_r+0xa4c>
   8b410:	00800d84 	movi	r2,54
   8b414:	114dc83a 	sub	r6,r2,r5
   8b418:	003f5f06 	br	8b198 <_strtod_r+0x9bc>
   8b41c:	0005883a 	mov	r2,zero
   8b420:	00cff834 	movhi	r3,16352
   8b424:	8009883a 	mov	r4,r16
   8b428:	880b883a 	mov	r5,r17
   8b42c:	180f883a 	mov	r7,r3
   8b430:	100d883a 	mov	r6,r2
   8b434:	008eca00 	call	8eca0 <__muldf3>
   8b438:	1009883a 	mov	r4,r2
   8b43c:	d8801a17 	ldw	r2,104(sp)
   8b440:	2021883a 	mov	r16,r4
   8b444:	1823883a 	mov	r17,r3
   8b448:	1025003a 	cmpeq	r18,r2,zero
   8b44c:	9000451e 	bne	r18,zero,8b564 <_strtod_r+0xd88>
   8b450:	2005883a 	mov	r2,r4
   8b454:	d8800715 	stw	r2,28(sp)
   8b458:	d8c00815 	stw	r3,32(sp)
   8b45c:	e1c00117 	ldw	r7,4(fp)
   8b460:	009ff834 	movhi	r2,32736
   8b464:	3cdffc2c 	andhi	r19,r7,32752
   8b468:	98bfa11e 	bne	r19,r2,8b2f0 <_strtod_r+0xb14>
   8b46c:	e1000017 	ldw	r4,0(fp)
   8b470:	01bf2c34 	movhi	r6,64688
   8b474:	398d883a 	add	r6,r7,r6
   8b478:	d9000b15 	stw	r4,44(sp)
   8b47c:	d9c00c15 	stw	r7,48(sp)
   8b480:	300b883a 	mov	r5,r6
   8b484:	e1800115 	stw	r6,4(fp)
   8b488:	00896400 	call	89640 <__ulp>
   8b48c:	d9800717 	ldw	r6,28(sp)
   8b490:	d9c00817 	ldw	r7,32(sp)
   8b494:	180b883a 	mov	r5,r3
   8b498:	1009883a 	mov	r4,r2
   8b49c:	008eca00 	call	8eca0 <__muldf3>
   8b4a0:	e2000017 	ldw	r8,0(fp)
   8b4a4:	e2400117 	ldw	r9,4(fp)
   8b4a8:	180b883a 	mov	r5,r3
   8b4ac:	1009883a 	mov	r4,r2
   8b4b0:	480f883a 	mov	r7,r9
   8b4b4:	400d883a 	mov	r6,r8
   8b4b8:	008ec2c0 	call	8ec2c <__adddf3>
   8b4bc:	1009883a 	mov	r4,r2
   8b4c0:	180b883a 	mov	r5,r3
   8b4c4:	009f2834 	movhi	r2,31904
   8b4c8:	10bfffc4 	addi	r2,r2,-1
   8b4cc:	18dffc2c 	andhi	r3,r3,32752
   8b4d0:	e1000015 	stw	r4,0(fp)
   8b4d4:	e1400115 	stw	r5,4(fp)
   8b4d8:	10c0722e 	bgeu	r2,r3,8b6a4 <_strtod_r+0xec8>
   8b4dc:	d8800c17 	ldw	r2,48(sp)
   8b4e0:	011ffc34 	movhi	r4,32752
   8b4e4:	213fffc4 	addi	r4,r4,-1
   8b4e8:	11007d26 	beq	r2,r4,8b6e0 <_strtod_r+0xf04>
   8b4ec:	01ffffc4 	movi	r7,-1
   8b4f0:	e1000115 	stw	r4,4(fp)
   8b4f4:	e1c00015 	stw	r7,0(fp)
   8b4f8:	003fb206 	br	8b3c4 <_strtod_r+0xbe8>
   8b4fc:	e0c00017 	ldw	r3,0(fp)
   8b500:	1800251e 	bne	r3,zero,8b598 <_strtod_r+0xdbc>
   8b504:	e0800117 	ldw	r2,4(fp)
   8b508:	00c00434 	movhi	r3,16
   8b50c:	18ffffc4 	addi	r3,r3,-1
   8b510:	10c4703a 	and	r2,r2,r3
   8b514:	1000241e 	bne	r2,zero,8b5a8 <_strtod_r+0xdcc>
   8b518:	0005883a 	mov	r2,zero
   8b51c:	00cffc34 	movhi	r3,16368
   8b520:	180f883a 	mov	r7,r3
   8b524:	8009883a 	mov	r4,r16
   8b528:	880b883a 	mov	r5,r17
   8b52c:	100d883a 	mov	r6,r2
   8b530:	008f4dc0 	call	8f4dc <__ltdf2>
   8b534:	10014616 	blt	r2,zero,8ba50 <_strtod_r+0x1274>
   8b538:	0005883a 	mov	r2,zero
   8b53c:	00cff834 	movhi	r3,16352
   8b540:	880b883a 	mov	r5,r17
   8b544:	8009883a 	mov	r4,r16
   8b548:	180f883a 	mov	r7,r3
   8b54c:	100d883a 	mov	r6,r2
   8b550:	008eca00 	call	8eca0 <__muldf3>
   8b554:	1823883a 	mov	r17,r3
   8b558:	1021883a 	mov	r16,r2
   8b55c:	18e0003c 	xorhi	r3,r3,32768
   8b560:	003fbc06 	br	8b454 <_strtod_r+0xc78>
   8b564:	2005883a 	mov	r2,r4
   8b568:	18e0003c 	xorhi	r3,r3,32768
   8b56c:	003fb906 	br	8b454 <_strtod_r+0xc78>
   8b570:	3827883a 	mov	r19,r7
   8b574:	003f1606 	br	8b1d0 <_strtod_r+0x9f4>
   8b578:	4091c83a 	sub	r8,r8,r2
   8b57c:	003efe06 	br	8b178 <_strtod_r+0x99c>
   8b580:	d9000f17 	ldw	r4,60(sp)
   8b584:	0011883a 	mov	r8,zero
   8b588:	0029883a 	mov	r20,zero
   8b58c:	0113c83a 	sub	r9,zero,r4
   8b590:	480f883a 	mov	r7,r9
   8b594:	003ef506 	br	8b16c <_strtod_r+0x990>
   8b598:	00800044 	movi	r2,1
   8b59c:	1880021e 	bne	r3,r2,8b5a8 <_strtod_r+0xdcc>
   8b5a0:	e0800117 	ldw	r2,4(fp)
   8b5a4:	1000c526 	beq	r2,zero,8b8bc <_strtod_r+0x10e0>
   8b5a8:	00affc34 	movhi	r2,49136
   8b5ac:	0021883a 	mov	r16,zero
   8b5b0:	044ffc34 	movhi	r17,16368
   8b5b4:	d8800815 	stw	r2,32(sp)
   8b5b8:	d8000715 	stw	zero,28(sp)
   8b5bc:	003f4806 	br	8b2e0 <_strtod_r+0xb04>
   8b5c0:	880b883a 	mov	r5,r17
   8b5c4:	8009883a 	mov	r4,r16
   8b5c8:	008f6e40 	call	8f6e4 <__fixdfsi>
   8b5cc:	1009883a 	mov	r4,r2
   8b5d0:	008f5ec0 	call	8f5ec <__floatsidf>
   8b5d4:	880b883a 	mov	r5,r17
   8b5d8:	8009883a 	mov	r4,r16
   8b5dc:	100d883a 	mov	r6,r2
   8b5e0:	180f883a 	mov	r7,r3
   8b5e4:	008ebac0 	call	8ebac <__subdf3>
   8b5e8:	100b883a 	mov	r5,r2
   8b5ec:	1021883a 	mov	r16,r2
   8b5f0:	d8801a17 	ldw	r2,104(sp)
   8b5f4:	180d883a 	mov	r6,r3
   8b5f8:	1823883a 	mov	r17,r3
   8b5fc:	1000061e 	bne	r2,zero,8b618 <_strtod_r+0xe3c>
   8b600:	e0800017 	ldw	r2,0(fp)
   8b604:	1000041e 	bne	r2,zero,8b618 <_strtod_r+0xe3c>
   8b608:	00c00434 	movhi	r3,16
   8b60c:	18ffffc4 	addi	r3,r3,-1
   8b610:	90c4703a 	and	r2,r18,r3
   8b614:	10004026 	beq	r2,zero,8b718 <_strtod_r+0xf3c>
   8b618:	00a52834 	movhi	r2,38048
   8b61c:	108d6544 	addi	r2,r2,13717
   8b620:	00cff834 	movhi	r3,16352
   8b624:	18ffffc4 	addi	r3,r3,-1
   8b628:	180f883a 	mov	r7,r3
   8b62c:	8009883a 	mov	r4,r16
   8b630:	880b883a 	mov	r5,r17
   8b634:	100d883a 	mov	r6,r2
   8b638:	008f4dc0 	call	8f4dc <__ltdf2>
   8b63c:	10000916 	blt	r2,zero,8b664 <_strtod_r+0xe88>
   8b640:	008d6c34 	movhi	r2,13744
   8b644:	10b94d44 	addi	r2,r2,-6859
   8b648:	00cff834 	movhi	r3,16352
   8b64c:	880b883a 	mov	r5,r17
   8b650:	180f883a 	mov	r7,r3
   8b654:	8009883a 	mov	r4,r16
   8b658:	100d883a 	mov	r6,r2
   8b65c:	008f3cc0 	call	8f3cc <__gtdf2>
   8b660:	00bf580e 	bge	zero,r2,8b3c4 <_strtod_r+0xbe8>
   8b664:	d9400517 	ldw	r5,20(sp)
   8b668:	a809883a 	mov	r4,r21
   8b66c:	00894840 	call	89484 <_Bfree>
   8b670:	a809883a 	mov	r4,r21
   8b674:	b80b883a 	mov	r5,r23
   8b678:	00894840 	call	89484 <_Bfree>
   8b67c:	a809883a 	mov	r4,r21
   8b680:	b00b883a 	mov	r5,r22
   8b684:	00894840 	call	89484 <_Bfree>
   8b688:	d9401017 	ldw	r5,64(sp)
   8b68c:	a809883a 	mov	r4,r21
   8b690:	00894840 	call	89484 <_Bfree>
   8b694:	a809883a 	mov	r4,r21
   8b698:	a00b883a 	mov	r5,r20
   8b69c:	00894840 	call	89484 <_Bfree>
   8b6a0:	003cd806 	br	8aa04 <_strtod_r+0x228>
   8b6a4:	0080d434 	movhi	r2,848
   8b6a8:	288d883a 	add	r6,r5,r2
   8b6ac:	e1800115 	stw	r6,4(fp)
   8b6b0:	003f3f06 	br	8b3b0 <_strtod_r+0xbd4>
   8b6b4:	8005883a 	mov	r2,r16
   8b6b8:	88e0003c 	xorhi	r3,r17,32768
   8b6bc:	003f2206 	br	8b348 <_strtod_r+0xb6c>
   8b6c0:	1009883a 	mov	r4,r2
   8b6c4:	008f8300 	call	8f830 <__floatunsidf>
   8b6c8:	1021883a 	mov	r16,r2
   8b6cc:	1823883a 	mov	r17,r3
   8b6d0:	003f1a06 	br	8b33c <_strtod_r+0xb60>
   8b6d4:	dc000417 	ldw	r16,16(sp)
   8b6d8:	31800044 	addi	r6,r6,1
   8b6dc:	003e5606 	br	8b038 <_strtod_r+0x85c>
   8b6e0:	d8c00b17 	ldw	r3,44(sp)
   8b6e4:	00bfffc4 	movi	r2,-1
   8b6e8:	18bf801e 	bne	r3,r2,8b4ec <_strtod_r+0xd10>
   8b6ec:	00c00884 	movi	r3,34
   8b6f0:	a8c00015 	stw	r3,0(r21)
   8b6f4:	009ffc34 	movhi	r2,32752
   8b6f8:	e0800115 	stw	r2,4(fp)
   8b6fc:	e0000015 	stw	zero,0(fp)
   8b700:	003fd806 	br	8b664 <_strtod_r+0xe88>
   8b704:	8025883a 	mov	r18,r16
   8b708:	0027883a 	mov	r19,zero
   8b70c:	d8001215 	stw	zero,72(sp)
   8b710:	d8001115 	stw	zero,68(sp)
   8b714:	003cac06 	br	8a9c8 <_strtod_r+0x1ec>
   8b718:	00a52834 	movhi	r2,38048
   8b71c:	108d6544 	addi	r2,r2,13717
   8b720:	00cff434 	movhi	r3,16336
   8b724:	18ffffc4 	addi	r3,r3,-1
   8b728:	2809883a 	mov	r4,r5
   8b72c:	180f883a 	mov	r7,r3
   8b730:	300b883a 	mov	r5,r6
   8b734:	100d883a 	mov	r6,r2
   8b738:	008f4dc0 	call	8f4dc <__ltdf2>
   8b73c:	103f210e 	bge	r2,zero,8b3c4 <_strtod_r+0xbe8>
   8b740:	003fc806 	br	8b664 <_strtod_r+0xe88>
   8b744:	00800044 	movi	r2,1
   8b748:	d8001815 	stw	zero,96(sp)
   8b74c:	d8801b15 	stw	r2,108(sp)
   8b750:	d8001715 	stw	zero,92(sp)
   8b754:	003ca206 	br	8a9e0 <_strtod_r+0x204>
   8b758:	00800884 	movi	r2,34
   8b75c:	a8800015 	stw	r2,0(r21)
   8b760:	019ffc34 	movhi	r6,32752
   8b764:	e1800115 	stw	r6,4(fp)
   8b768:	e0000015 	stw	zero,0(fp)
   8b76c:	003ca506 	br	8aa04 <_strtod_r+0x228>
   8b770:	011387c4 	movi	r4,19999
   8b774:	003d0206 	br	8ab80 <_strtod_r+0x3a4>
   8b778:	180a90fa 	slli	r5,r3,3
   8b77c:	e0800017 	ldw	r2,0(fp)
   8b780:	e0c00117 	ldw	r3,4(fp)
   8b784:	01000274 	movhi	r4,9
   8b788:	21113004 	addi	r4,r4,17600
   8b78c:	290b883a 	add	r5,r5,r4
   8b790:	2a000017 	ldw	r8,0(r5)
   8b794:	2a400117 	ldw	r9,4(r5)
   8b798:	1009883a 	mov	r4,r2
   8b79c:	180b883a 	mov	r5,r3
   8b7a0:	480f883a 	mov	r7,r9
   8b7a4:	400d883a 	mov	r6,r8
   8b7a8:	008eca00 	call	8eca0 <__muldf3>
   8b7ac:	e0c00115 	stw	r3,4(fp)
   8b7b0:	e0800015 	stw	r2,0(fp)
   8b7b4:	003c9306 	br	8aa04 <_strtod_r+0x228>
   8b7b8:	d8800d17 	ldw	r2,52(sp)
   8b7bc:	e0800015 	stw	r2,0(fp)
   8b7c0:	d8c00e17 	ldw	r3,56(sp)
   8b7c4:	e0c00115 	stw	r3,4(fp)
   8b7c8:	9080020c 	andi	r2,r18,8
   8b7cc:	103c8d26 	beq	r2,zero,8aa04 <_strtod_r+0x228>
   8b7d0:	e0800117 	ldw	r2,4(fp)
   8b7d4:	10a00034 	orhi	r2,r2,32768
   8b7d8:	e0800115 	stw	r2,4(fp)
   8b7dc:	003c8906 	br	8aa04 <_strtod_r+0x228>
   8b7e0:	009ffc34 	movhi	r2,32752
   8b7e4:	e0800115 	stw	r2,4(fp)
   8b7e8:	e0000015 	stw	zero,0(fp)
   8b7ec:	003ff606 	br	8b7c8 <_strtod_r+0xfec>
   8b7f0:	00a00034 	movhi	r2,32768
   8b7f4:	10bfffc4 	addi	r2,r2,-1
   8b7f8:	00ffffc4 	movi	r3,-1
   8b7fc:	e0800115 	stw	r2,4(fp)
   8b800:	e0c00015 	stw	r3,0(fp)
   8b804:	003ff006 	br	8b7c8 <_strtod_r+0xfec>
   8b808:	e0000115 	stw	zero,4(fp)
   8b80c:	e0000015 	stw	zero,0(fp)
   8b810:	003fed06 	br	8b7c8 <_strtod_r+0xfec>
   8b814:	d8800e17 	ldw	r2,56(sp)
   8b818:	29010cc4 	addi	r4,r5,1075
   8b81c:	00fffc34 	movhi	r3,65520
   8b820:	18ffffc4 	addi	r3,r3,-1
   8b824:	2008953a 	slli	r4,r4,20
   8b828:	10c4703a 	and	r2,r2,r3
   8b82c:	d8c00d17 	ldw	r3,52(sp)
   8b830:	1104b03a 	or	r2,r2,r4
   8b834:	e0800115 	stw	r2,4(fp)
   8b838:	e0c00015 	stw	r3,0(fp)
   8b83c:	003fe206 	br	8b7c8 <_strtod_r+0xfec>
   8b840:	d8c01a17 	ldw	r3,104(sp)
   8b844:	1825003a 	cmpeq	r18,r3,zero
   8b848:	9000cf1e 	bne	r18,zero,8bb88 <_strtod_r+0x13ac>
   8b84c:	e1400117 	ldw	r5,4(fp)
   8b850:	01000434 	movhi	r4,16
   8b854:	213fffc4 	addi	r4,r4,-1
   8b858:	2904703a 	and	r2,r5,r4
   8b85c:	11006826 	beq	r2,r4,8ba00 <_strtod_r+0x1224>
   8b860:	e1c00017 	ldw	r7,0(fp)
   8b864:	3880004c 	andi	r2,r7,1
   8b868:	1005003a 	cmpeq	r2,r2,zero
   8b86c:	1000601e 	bne	r2,zero,8b9f0 <_strtod_r+0x1214>
   8b870:	90010426 	beq	r18,zero,8bc84 <_strtod_r+0x14a8>
   8b874:	e4400117 	ldw	r17,4(fp)
   8b878:	3809883a 	mov	r4,r7
   8b87c:	3821883a 	mov	r16,r7
   8b880:	880b883a 	mov	r5,r17
   8b884:	00896400 	call	89640 <__ulp>
   8b888:	180f883a 	mov	r7,r3
   8b88c:	880b883a 	mov	r5,r17
   8b890:	8009883a 	mov	r4,r16
   8b894:	100d883a 	mov	r6,r2
   8b898:	008ebac0 	call	8ebac <__subdf3>
   8b89c:	1009883a 	mov	r4,r2
   8b8a0:	000d883a 	mov	r6,zero
   8b8a4:	000f883a 	mov	r7,zero
   8b8a8:	180b883a 	mov	r5,r3
   8b8ac:	e0800015 	stw	r2,0(fp)
   8b8b0:	e0c00115 	stw	r3,4(fp)
   8b8b4:	008f3440 	call	8f344 <__nedf2>
   8b8b8:	10004d1e 	bne	r2,zero,8b9f0 <_strtod_r+0x1214>
   8b8bc:	00800884 	movi	r2,34
   8b8c0:	a8800015 	stw	r2,0(r21)
   8b8c4:	e0000015 	stw	zero,0(fp)
   8b8c8:	e0000115 	stw	zero,4(fp)
   8b8cc:	003f6506 	br	8b664 <_strtod_r+0xe88>
   8b8d0:	00800044 	movi	r2,1
   8b8d4:	d8801915 	stw	r2,100(sp)
   8b8d8:	003d4406 	br	8adec <_strtod_r+0x610>
   8b8dc:	d8c01817 	ldw	r3,96(sp)
   8b8e0:	1985883a 	add	r2,r3,r6
   8b8e4:	11ffffc4 	addi	r7,r2,-1
   8b8e8:	39000044 	addi	r4,r7,1
   8b8ec:	00800204 	movi	r2,8
   8b8f0:	d9001815 	stw	r4,96(sp)
   8b8f4:	11c0d716 	blt	r2,r7,8bc54 <_strtod_r+0x1478>
   8b8f8:	d9001217 	ldw	r4,72(sp)
   8b8fc:	01400284 	movi	r5,10
   8b900:	0080ba00 	call	80ba0 <__mulsi3>
   8b904:	1585883a 	add	r2,r2,r22
   8b908:	d8801215 	stw	r2,72(sp)
   8b90c:	000d883a 	mov	r6,zero
   8b910:	84000044 	addi	r16,r16,1
   8b914:	dc000415 	stw	r16,16(sp)
   8b918:	84400007 	ldb	r17,0(r16)
   8b91c:	003cfc06 	br	8ad10 <_strtod_r+0x534>
   8b920:	d8c01a17 	ldw	r3,104(sp)
   8b924:	1800321e 	bne	r3,zero,8b9f0 <_strtod_r+0x1214>
   8b928:	e0800017 	ldw	r2,0(fp)
   8b92c:	1000b31e 	bne	r2,zero,8bbfc <_strtod_r+0x1420>
   8b930:	e0c00117 	ldw	r3,4(fp)
   8b934:	01000434 	movhi	r4,16
   8b938:	213fffc4 	addi	r4,r4,-1
   8b93c:	1904703a 	and	r2,r3,r4
   8b940:	1000e71e 	bne	r2,zero,8bce0 <_strtod_r+0x1504>
   8b944:	18dffc2c 	andhi	r3,r3,32752
   8b948:	0081ac34 	movhi	r2,1712
   8b94c:	10c0282e 	bgeu	r2,r3,8b9f0 <_strtod_r+0x1214>
   8b950:	a0800517 	ldw	r2,20(r20)
   8b954:	1000031e 	bne	r2,zero,8b964 <_strtod_r+0x1188>
   8b958:	a0c00417 	ldw	r3,16(r20)
   8b95c:	00800044 	movi	r2,1
   8b960:	10c0a60e 	bge	r2,r3,8bbfc <_strtod_r+0x1420>
   8b964:	a00b883a 	mov	r5,r20
   8b968:	a809883a 	mov	r4,r21
   8b96c:	01800044 	movi	r6,1
   8b970:	0089dc80 	call	89dc8 <__lshift>
   8b974:	1009883a 	mov	r4,r2
   8b978:	b00b883a 	mov	r5,r22
   8b97c:	1029883a 	mov	r20,r2
   8b980:	00895e00 	call	895e0 <__mcmp>
   8b984:	00809d0e 	bge	zero,r2,8bbfc <_strtod_r+0x1420>
   8b988:	e1800117 	ldw	r6,4(fp)
   8b98c:	d9001c17 	ldw	r4,112(sp)
   8b990:	2013003a 	cmpeq	r9,r4,zero
   8b994:	4800d61e 	bne	r9,zero,8bcf0 <_strtod_r+0x1514>
   8b998:	30dffc2c 	andhi	r3,r6,32752
   8b99c:	0081ac34 	movhi	r2,1712
   8b9a0:	10c0d336 	bltu	r2,r3,8bcf0 <_strtod_r+0x1514>
   8b9a4:	0080dc34 	movhi	r2,880
   8b9a8:	10ffc42e 	bgeu	r2,r3,8b8bc <_strtod_r+0x10e0>
   8b9ac:	e0800017 	ldw	r2,0(fp)
   8b9b0:	e0c00117 	ldw	r3,4(fp)
   8b9b4:	020e5434 	movhi	r8,14672
   8b9b8:	000d883a 	mov	r6,zero
   8b9bc:	400f883a 	mov	r7,r8
   8b9c0:	180b883a 	mov	r5,r3
   8b9c4:	1009883a 	mov	r4,r2
   8b9c8:	da000c15 	stw	r8,48(sp)
   8b9cc:	d8000b15 	stw	zero,44(sp)
   8b9d0:	008eca00 	call	8eca0 <__muldf3>
   8b9d4:	e0800015 	stw	r2,0(fp)
   8b9d8:	e0c00115 	stw	r3,4(fp)
   8b9dc:	183f211e 	bne	r3,zero,8b664 <_strtod_r+0xe88>
   8b9e0:	103f201e 	bne	r2,zero,8b664 <_strtod_r+0xe88>
   8b9e4:	00800884 	movi	r2,34
   8b9e8:	a8800015 	stw	r2,0(r21)
   8b9ec:	003f1d06 	br	8b664 <_strtod_r+0xe88>
   8b9f0:	d9001c17 	ldw	r4,112(sp)
   8b9f4:	2013003a 	cmpeq	r9,r4,zero
   8b9f8:	483f1a1e 	bne	r9,zero,8b664 <_strtod_r+0xe88>
   8b9fc:	003feb06 	br	8b9ac <_strtod_r+0x11d0>
   8ba00:	d8801c17 	ldw	r2,112(sp)
   8ba04:	e1c00017 	ldw	r7,0(fp)
   8ba08:	1013003a 	cmpeq	r9,r2,zero
   8ba0c:	4800c31e 	bne	r9,zero,8bd1c <_strtod_r+0x1540>
   8ba10:	28dffc2c 	andhi	r3,r5,32752
   8ba14:	0081a834 	movhi	r2,1696
   8ba18:	10c0c036 	bltu	r2,r3,8bd1c <_strtod_r+0x1540>
   8ba1c:	1804d53a 	srli	r2,r3,20
   8ba20:	00c01ac4 	movi	r3,107
   8ba24:	013fffc4 	movi	r4,-1
   8ba28:	1887c83a 	sub	r3,r3,r2
   8ba2c:	20c4983a 	sll	r2,r4,r3
   8ba30:	11ff8c1e 	bne	r2,r7,8b864 <_strtod_r+0x1088>
   8ba34:	28dffc2c 	andhi	r3,r5,32752
   8ba38:	00800434 	movhi	r2,16
   8ba3c:	188d883a 	add	r6,r3,r2
   8ba40:	e1800115 	stw	r6,4(fp)
   8ba44:	e0000015 	stw	zero,0(fp)
   8ba48:	483f061e 	bne	r9,zero,8b664 <_strtod_r+0xe88>
   8ba4c:	003fd706 	br	8b9ac <_strtod_r+0x11d0>
   8ba50:	0021883a 	mov	r16,zero
   8ba54:	0005883a 	mov	r2,zero
   8ba58:	044ff834 	movhi	r17,16352
   8ba5c:	00eff834 	movhi	r3,49120
   8ba60:	003e7c06 	br	8b454 <_strtod_r+0xc78>
   8ba64:	803d9226 	beq	r16,zero,8b0b0 <_strtod_r+0x8d4>
   8ba68:	0421c83a 	sub	r16,zero,r16
   8ba6c:	814003cc 	andi	r5,r16,15
   8ba70:	28000f26 	beq	r5,zero,8bab0 <_strtod_r+0x12d4>
   8ba74:	280a90fa 	slli	r5,r5,3
   8ba78:	01000274 	movhi	r4,9
   8ba7c:	21113004 	addi	r4,r4,17600
   8ba80:	e0800017 	ldw	r2,0(fp)
   8ba84:	290b883a 	add	r5,r5,r4
   8ba88:	2a000017 	ldw	r8,0(r5)
   8ba8c:	e0c00117 	ldw	r3,4(fp)
   8ba90:	2a400117 	ldw	r9,4(r5)
   8ba94:	1009883a 	mov	r4,r2
   8ba98:	180b883a 	mov	r5,r3
   8ba9c:	480f883a 	mov	r7,r9
   8baa0:	400d883a 	mov	r6,r8
   8baa4:	008f0640 	call	8f064 <__divdf3>
   8baa8:	e0c00115 	stw	r3,4(fp)
   8baac:	e0800015 	stw	r2,0(fp)
   8bab0:	8021d13a 	srai	r16,r16,4
   8bab4:	803d7e26 	beq	r16,zero,8b0b0 <_strtod_r+0x8d4>
   8bab8:	008007c4 	movi	r2,31
   8babc:	14002d16 	blt	r2,r16,8bb74 <_strtod_r+0x1398>
   8bac0:	8080040c 	andi	r2,r16,16
   8bac4:	10009d26 	beq	r2,zero,8bd3c <_strtod_r+0x1560>
   8bac8:	01001a84 	movi	r4,106
   8bacc:	d9001c15 	stw	r4,112(sp)
   8bad0:	0400110e 	bge	zero,r16,8bb18 <_strtod_r+0x133c>
   8bad4:	04400274 	movhi	r17,9
   8bad8:	8c517d04 	addi	r17,r17,17908
   8badc:	8080004c 	andi	r2,r16,1
   8bae0:	1005003a 	cmpeq	r2,r2,zero
   8bae4:	1000091e 	bne	r2,zero,8bb0c <_strtod_r+0x1330>
   8bae8:	e0800017 	ldw	r2,0(fp)
   8baec:	e0c00117 	ldw	r3,4(fp)
   8baf0:	89800017 	ldw	r6,0(r17)
   8baf4:	89c00117 	ldw	r7,4(r17)
   8baf8:	180b883a 	mov	r5,r3
   8bafc:	1009883a 	mov	r4,r2
   8bb00:	008eca00 	call	8eca0 <__muldf3>
   8bb04:	e0c00115 	stw	r3,4(fp)
   8bb08:	e0800015 	stw	r2,0(fp)
   8bb0c:	8021d07a 	srai	r16,r16,1
   8bb10:	8c400204 	addi	r17,r17,8
   8bb14:	043ff116 	blt	zero,r16,8badc <_strtod_r+0x1300>
   8bb18:	d8801c17 	ldw	r2,112(sp)
   8bb1c:	10000d26 	beq	r2,zero,8bb54 <_strtod_r+0x1378>
   8bb20:	e1000117 	ldw	r4,4(fp)
   8bb24:	00c01ac4 	movi	r3,107
   8bb28:	209ffc2c 	andhi	r2,r4,32752
   8bb2c:	1004d53a 	srli	r2,r2,20
   8bb30:	1887c83a 	sub	r3,r3,r2
   8bb34:	00c0070e 	bge	zero,r3,8bb54 <_strtod_r+0x1378>
   8bb38:	008007c4 	movi	r2,31
   8bb3c:	10c0940e 	bge	r2,r3,8bd90 <_strtod_r+0x15b4>
   8bb40:	00800d04 	movi	r2,52
   8bb44:	e0000015 	stw	zero,0(fp)
   8bb48:	10c08b0e 	bge	r2,r3,8bd78 <_strtod_r+0x159c>
   8bb4c:	0180dc34 	movhi	r6,880
   8bb50:	e1800115 	stw	r6,4(fp)
   8bb54:	e0800017 	ldw	r2,0(fp)
   8bb58:	e0c00117 	ldw	r3,4(fp)
   8bb5c:	000d883a 	mov	r6,zero
   8bb60:	000f883a 	mov	r7,zero
   8bb64:	180b883a 	mov	r5,r3
   8bb68:	1009883a 	mov	r4,r2
   8bb6c:	008f3440 	call	8f344 <__nedf2>
   8bb70:	103d501e 	bne	r2,zero,8b0b4 <_strtod_r+0x8d8>
   8bb74:	00800884 	movi	r2,34
   8bb78:	a8800015 	stw	r2,0(r21)
   8bb7c:	e0000015 	stw	zero,0(fp)
   8bb80:	e0000115 	stw	zero,4(fp)
   8bb84:	003b9f06 	br	8aa04 <_strtod_r+0x228>
   8bb88:	e1800117 	ldw	r6,4(fp)
   8bb8c:	00c00434 	movhi	r3,16
   8bb90:	18ffffc4 	addi	r3,r3,-1
   8bb94:	30c4703a 	and	r2,r6,r3
   8bb98:	103f311e 	bne	r2,zero,8b860 <_strtod_r+0x1084>
   8bb9c:	e1c00017 	ldw	r7,0(fp)
   8bba0:	383f301e 	bne	r7,zero,8b864 <_strtod_r+0x1088>
   8bba4:	003f7906 	br	8b98c <_strtod_r+0x11b0>
   8bba8:	d8c00f17 	ldw	r3,60(sp)
   8bbac:	00bffa84 	movi	r2,-22
   8bbb0:	18bcbf16 	blt	r3,r2,8aeb0 <_strtod_r+0x6d4>
   8bbb4:	1809883a 	mov	r4,r3
   8bbb8:	017ffe04 	movi	r5,-8
   8bbbc:	0080ba00 	call	80ba0 <__mulsi3>
   8bbc0:	00c00274 	movhi	r3,9
   8bbc4:	18d13004 	addi	r3,r3,17600
   8bbc8:	10c5883a 	add	r2,r2,r3
   8bbcc:	e2000017 	ldw	r8,0(fp)
   8bbd0:	e2400117 	ldw	r9,4(fp)
   8bbd4:	12800017 	ldw	r10,0(r2)
   8bbd8:	12c00117 	ldw	r11,4(r2)
   8bbdc:	480b883a 	mov	r5,r9
   8bbe0:	4009883a 	mov	r4,r8
   8bbe4:	580f883a 	mov	r7,r11
   8bbe8:	500d883a 	mov	r6,r10
   8bbec:	008f0640 	call	8f064 <__divdf3>
   8bbf0:	e0c00115 	stw	r3,4(fp)
   8bbf4:	e0800015 	stw	r2,0(fp)
   8bbf8:	003b8206 	br	8aa04 <_strtod_r+0x228>
   8bbfc:	d8801c17 	ldw	r2,112(sp)
   8bc00:	1013003a 	cmpeq	r9,r2,zero
   8bc04:	483e971e 	bne	r9,zero,8b664 <_strtod_r+0xe88>
   8bc08:	003f6806 	br	8b9ac <_strtod_r+0x11d0>
   8bc0c:	00801a44 	movi	r2,105
   8bc10:	88bc5026 	beq	r17,r2,8ad54 <_strtod_r+0x578>
   8bc14:	00801b84 	movi	r2,110
   8bc18:	88bb9b1e 	bne	r17,r2,8aa88 <_strtod_r+0x2ac>
   8bc1c:	dc000404 	addi	r16,sp,16
   8bc20:	8009883a 	mov	r4,r16
   8bc24:	01400274 	movhi	r5,9
   8bc28:	29517c04 	addi	r5,r5,17904
   8bc2c:	008a7940 	call	8a794 <match>
   8bc30:	103b9526 	beq	r2,zero,8aa88 <_strtod_r+0x2ac>
   8bc34:	d8800417 	ldw	r2,16(sp)
   8bc38:	00c00a04 	movi	r3,40
   8bc3c:	11000007 	ldb	r4,0(r2)
   8bc40:	20c04026 	beq	r4,r3,8bd44 <_strtod_r+0x1568>
   8bc44:	01bffe34 	movhi	r6,65528
   8bc48:	e1800115 	stw	r6,4(fp)
   8bc4c:	e0000015 	stw	zero,0(fp)
   8bc50:	003b6c06 	br	8aa04 <_strtod_r+0x228>
   8bc54:	d8c01817 	ldw	r3,96(sp)
   8bc58:	00800404 	movi	r2,16
   8bc5c:	10c00516 	blt	r2,r3,8bc74 <_strtod_r+0x1498>
   8bc60:	d9001117 	ldw	r4,68(sp)
   8bc64:	01400284 	movi	r5,10
   8bc68:	0080ba00 	call	80ba0 <__mulsi3>
   8bc6c:	1585883a 	add	r2,r2,r22
   8bc70:	d8801115 	stw	r2,68(sp)
   8bc74:	000d883a 	mov	r6,zero
   8bc78:	003f2506 	br	8b910 <_strtod_r+0x1134>
   8bc7c:	000d883a 	mov	r6,zero
   8bc80:	003ce306 	br	8b010 <_strtod_r+0x834>
   8bc84:	e4400117 	ldw	r17,4(fp)
   8bc88:	3809883a 	mov	r4,r7
   8bc8c:	3821883a 	mov	r16,r7
   8bc90:	880b883a 	mov	r5,r17
   8bc94:	00896400 	call	89640 <__ulp>
   8bc98:	180f883a 	mov	r7,r3
   8bc9c:	880b883a 	mov	r5,r17
   8bca0:	8009883a 	mov	r4,r16
   8bca4:	100d883a 	mov	r6,r2
   8bca8:	008ec2c0 	call	8ec2c <__adddf3>
   8bcac:	180b883a 	mov	r5,r3
   8bcb0:	d8c01c17 	ldw	r3,112(sp)
   8bcb4:	1009883a 	mov	r4,r2
   8bcb8:	e1400115 	stw	r5,4(fp)
   8bcbc:	1813003a 	cmpeq	r9,r3,zero
   8bcc0:	e1000015 	stw	r4,0(fp)
   8bcc4:	483e671e 	bne	r9,zero,8b664 <_strtod_r+0xe88>
   8bcc8:	003f3806 	br	8b9ac <_strtod_r+0x11d0>
   8bccc:	0080d434 	movhi	r2,848
   8bcd0:	188d883a 	add	r6,r3,r2
   8bcd4:	d8001c15 	stw	zero,112(sp)
   8bcd8:	e1800115 	stw	r6,4(fp)
   8bcdc:	003cf506 	br	8b0b4 <_strtod_r+0x8d8>
   8bce0:	d8c01c17 	ldw	r3,112(sp)
   8bce4:	1813003a 	cmpeq	r9,r3,zero
   8bce8:	483e5e1e 	bne	r9,zero,8b664 <_strtod_r+0xe88>
   8bcec:	003f2f06 	br	8b9ac <_strtod_r+0x11d0>
   8bcf0:	309ffc2c 	andhi	r2,r6,32752
   8bcf4:	00fffc34 	movhi	r3,65520
   8bcf8:	10c5883a 	add	r2,r2,r3
   8bcfc:	00c00434 	movhi	r3,16
   8bd00:	18ffffc4 	addi	r3,r3,-1
   8bd04:	10ccb03a 	or	r6,r2,r3
   8bd08:	01ffffc4 	movi	r7,-1
   8bd0c:	e1800115 	stw	r6,4(fp)
   8bd10:	e1c00015 	stw	r7,0(fp)
   8bd14:	483e531e 	bne	r9,zero,8b664 <_strtod_r+0xe88>
   8bd18:	003f2406 	br	8b9ac <_strtod_r+0x11d0>
   8bd1c:	00bfffc4 	movi	r2,-1
   8bd20:	003f4306 	br	8ba30 <_strtod_r+0x1254>
   8bd24:	0025883a 	mov	r18,zero
   8bd28:	05800274 	movhi	r22,9
   8bd2c:	b5916204 	addi	r22,r22,17800
   8bd30:	003c9206 	br	8af7c <_strtod_r+0x7a0>
   8bd34:	d9c01817 	ldw	r7,96(sp)
   8bd38:	003eeb06 	br	8b8e8 <_strtod_r+0x110c>
   8bd3c:	d8001c15 	stw	zero,112(sp)
   8bd40:	003f6306 	br	8bad0 <_strtod_r+0x12f4>
   8bd44:	8009883a 	mov	r4,r16
   8bd48:	01400274 	movhi	r5,9
   8bd4c:	2953e804 	addi	r5,r5,20384
   8bd50:	d9800d04 	addi	r6,sp,52
   8bd54:	008d5580 	call	8d558 <__hexnan>
   8bd58:	00c00144 	movi	r3,5
   8bd5c:	10ffb91e 	bne	r2,r3,8bc44 <_strtod_r+0x1468>
   8bd60:	d8800e17 	ldw	r2,56(sp)
   8bd64:	d9c00d17 	ldw	r7,52(sp)
   8bd68:	119ffc34 	orhi	r6,r2,32752
   8bd6c:	e1800115 	stw	r6,4(fp)
   8bd70:	e1c00015 	stw	r7,0(fp)
   8bd74:	003b2306 	br	8aa04 <_strtod_r+0x228>
   8bd78:	18fff804 	addi	r3,r3,-32
   8bd7c:	00bfffc4 	movi	r2,-1
   8bd80:	10c4983a 	sll	r2,r2,r3
   8bd84:	208c703a 	and	r6,r4,r2
   8bd88:	e1800115 	stw	r6,4(fp)
   8bd8c:	003f7106 	br	8bb54 <_strtod_r+0x1378>
   8bd90:	00bfffc4 	movi	r2,-1
   8bd94:	10c4983a 	sll	r2,r2,r3
   8bd98:	e0c00017 	ldw	r3,0(fp)
   8bd9c:	188e703a 	and	r7,r3,r2
   8bda0:	e1c00015 	stw	r7,0(fp)
   8bda4:	003f6b06 	br	8bb54 <_strtod_r+0x1378>

0008bda8 <strtof>:
   8bda8:	defffa04 	addi	sp,sp,-24
   8bdac:	dd000415 	stw	r20,16(sp)
   8bdb0:	05000274 	movhi	r20,9
   8bdb4:	a518bc04 	addi	r20,r20,25328
   8bdb8:	2007883a 	mov	r3,r4
   8bdbc:	a1000017 	ldw	r4,0(r20)
   8bdc0:	280d883a 	mov	r6,r5
   8bdc4:	180b883a 	mov	r5,r3
   8bdc8:	dfc00515 	stw	ra,20(sp)
   8bdcc:	dcc00315 	stw	r19,12(sp)
   8bdd0:	dc800215 	stw	r18,8(sp)
   8bdd4:	dc400115 	stw	r17,4(sp)
   8bdd8:	dc000015 	stw	r16,0(sp)
   8bddc:	008a7dc0 	call	8a7dc <_strtod_r>
   8bde0:	180b883a 	mov	r5,r3
   8bde4:	1009883a 	mov	r4,r2
   8bde8:	1823883a 	mov	r17,r3
   8bdec:	1021883a 	mov	r16,r2
   8bdf0:	008f7bc0 	call	8f7bc <__truncdfsf2>
   8bdf4:	1009883a 	mov	r4,r2
   8bdf8:	000b883a 	mov	r5,zero
   8bdfc:	1025883a 	mov	r18,r2
   8be00:	1027883a 	mov	r19,r2
   8be04:	008e6340 	call	8e634 <__nesf2>
   8be08:	000d883a 	mov	r6,zero
   8be0c:	000f883a 	mov	r7,zero
   8be10:	8009883a 	mov	r4,r16
   8be14:	880b883a 	mov	r5,r17
   8be18:	10000e1e 	bne	r2,zero,8be54 <strtof+0xac>
   8be1c:	008f3440 	call	8f344 <__nedf2>
   8be20:	10000c26 	beq	r2,zero,8be54 <strtof+0xac>
   8be24:	a0c00017 	ldw	r3,0(r20)
   8be28:	00800884 	movi	r2,34
   8be2c:	18800015 	stw	r2,0(r3)
   8be30:	9805883a 	mov	r2,r19
   8be34:	dfc00517 	ldw	ra,20(sp)
   8be38:	dd000417 	ldw	r20,16(sp)
   8be3c:	dcc00317 	ldw	r19,12(sp)
   8be40:	dc800217 	ldw	r18,8(sp)
   8be44:	dc400117 	ldw	r17,4(sp)
   8be48:	dc000017 	ldw	r16,0(sp)
   8be4c:	dec00604 	addi	sp,sp,24
   8be50:	f800283a 	ret
   8be54:	9009883a 	mov	r4,r18
   8be58:	015fe034 	movhi	r5,32640
   8be5c:	297fffc4 	addi	r5,r5,-1
   8be60:	008e6ac0 	call	8e6ac <__gtsf2>
   8be64:	00ffffc4 	movi	r3,-1
   8be68:	011ffc34 	movhi	r4,32752
   8be6c:	213fffc4 	addi	r4,r4,-1
   8be70:	200f883a 	mov	r7,r4
   8be74:	180d883a 	mov	r6,r3
   8be78:	8009883a 	mov	r4,r16
   8be7c:	880b883a 	mov	r5,r17
   8be80:	00800f16 	blt	zero,r2,8bec0 <strtof+0x118>
   8be84:	9009883a 	mov	r4,r18
   8be88:	017fe034 	movhi	r5,65408
   8be8c:	297fffc4 	addi	r5,r5,-1
   8be90:	008e7240 	call	8e724 <__ltsf2>
   8be94:	023fffc4 	movi	r8,-1
   8be98:	027ffc34 	movhi	r9,65520
   8be9c:	4a7fffc4 	addi	r9,r9,-1
   8bea0:	880b883a 	mov	r5,r17
   8bea4:	480f883a 	mov	r7,r9
   8bea8:	8009883a 	mov	r4,r16
   8beac:	400d883a 	mov	r6,r8
   8beb0:	103fdf0e 	bge	r2,zero,8be30 <strtof+0x88>
   8beb4:	008f4dc0 	call	8f4dc <__ltdf2>
   8beb8:	103fda0e 	bge	r2,zero,8be24 <strtof+0x7c>
   8bebc:	003fdc06 	br	8be30 <strtof+0x88>
   8bec0:	008f3cc0 	call	8f3cc <__gtdf2>
   8bec4:	00bfd70e 	bge	zero,r2,8be24 <strtof+0x7c>
   8bec8:	003fee06 	br	8be84 <strtof+0xdc>

0008becc <strtod>:
   8becc:	01800274 	movhi	r6,9
   8bed0:	3198bc04 	addi	r6,r6,25328
   8bed4:	2007883a 	mov	r3,r4
   8bed8:	31000017 	ldw	r4,0(r6)
   8bedc:	280d883a 	mov	r6,r5
   8bee0:	180b883a 	mov	r5,r3
   8bee4:	008a7dc1 	jmpi	8a7dc <_strtod_r>

0008bee8 <_strtoll_r>:
   8bee8:	defff004 	addi	sp,sp,-64
   8beec:	00800274 	movhi	r2,9
   8bef0:	1098c004 	addi	r2,r2,25344
   8bef4:	df000e15 	stw	fp,56(sp)
   8bef8:	17000017 	ldw	fp,0(r2)
   8befc:	ddc00d15 	stw	r23,52(sp)
   8bf00:	dd000a15 	stw	r20,40(sp)
   8bf04:	dfc00f15 	stw	ra,60(sp)
   8bf08:	dd800c15 	stw	r22,48(sp)
   8bf0c:	dd400b15 	stw	r21,44(sp)
   8bf10:	dcc00915 	stw	r19,36(sp)
   8bf14:	dc800815 	stw	r18,32(sp)
   8bf18:	dc400715 	stw	r17,28(sp)
   8bf1c:	dc000615 	stw	r16,24(sp)
   8bf20:	d9400315 	stw	r5,12(sp)
   8bf24:	d9000215 	stw	r4,8(sp)
   8bf28:	d9800415 	stw	r6,16(sp)
   8bf2c:	382f883a 	mov	r23,r7
   8bf30:	2829883a 	mov	r20,r5
   8bf34:	a4c00007 	ldb	r19,0(r20)
   8bf38:	a5000044 	addi	r20,r20,1
   8bf3c:	e4c7883a 	add	r3,fp,r19
   8bf40:	18800003 	ldbu	r2,0(r3)
   8bf44:	1080020c 	andi	r2,r2,8
   8bf48:	103ffa1e 	bne	r2,zero,8bf34 <_strtoll_r+0x4c>
   8bf4c:	00800b44 	movi	r2,45
   8bf50:	98808826 	beq	r19,r2,8c174 <_strtoll_r+0x28c>
   8bf54:	00800ac4 	movi	r2,43
   8bf58:	98808326 	beq	r19,r2,8c168 <_strtoll_r+0x280>
   8bf5c:	d8000115 	stw	zero,4(sp)
   8bf60:	b807003a 	cmpeq	r3,r23,zero
   8bf64:	18005f1e 	bne	r3,zero,8c0e4 <_strtoll_r+0x1fc>
   8bf68:	00800404 	movi	r2,16
   8bf6c:	b8805d26 	beq	r23,r2,8c0e4 <_strtoll_r+0x1fc>
   8bf70:	b82dd7fa 	srai	r22,r23,31
   8bf74:	b82b883a 	mov	r21,r23
   8bf78:	d8c00117 	ldw	r3,4(sp)
   8bf7c:	1806c03a 	cmpne	r3,r3,zero
   8bf80:	d8c00515 	stw	r3,20(sp)
   8bf84:	1800631e 	bne	r3,zero,8c114 <_strtoll_r+0x22c>
   8bf88:	043fffc4 	movi	r16,-1
   8bf8c:	04600034 	movhi	r17,32768
   8bf90:	8c7fffc4 	addi	r17,r17,-1
   8bf94:	880b883a 	mov	r5,r17
   8bf98:	8009883a 	mov	r4,r16
   8bf9c:	a80d883a 	mov	r6,r21
   8bfa0:	b00f883a 	mov	r7,r22
   8bfa4:	008dfd40 	call	8dfd4 <__umoddi3>
   8bfa8:	880b883a 	mov	r5,r17
   8bfac:	8009883a 	mov	r4,r16
   8bfb0:	b00f883a 	mov	r7,r22
   8bfb4:	a80d883a 	mov	r6,r21
   8bfb8:	d8800015 	stw	r2,0(sp)
   8bfbc:	008d9680 	call	8d968 <__udivdi3>
   8bfc0:	1023883a 	mov	r17,r2
   8bfc4:	e4c5883a 	add	r2,fp,r19
   8bfc8:	11000003 	ldbu	r4,0(r2)
   8bfcc:	1825883a 	mov	r18,r3
   8bfd0:	0015883a 	mov	r10,zero
   8bfd4:	20c0010c 	andi	r3,r4,4
   8bfd8:	0017883a 	mov	r11,zero
   8bfdc:	000f883a 	mov	r7,zero
   8bfe0:	18001a26 	beq	r3,zero,8c04c <_strtoll_r+0x164>
   8bfe4:	9c3ff404 	addi	r16,r19,-48
   8bfe8:	85c0200e 	bge	r16,r23,8c06c <_strtoll_r+0x184>
   8bfec:	38003b16 	blt	r7,zero,8c0dc <_strtoll_r+0x1f4>
   8bff0:	92c03a36 	bltu	r18,r11,8c0dc <_strtoll_r+0x1f4>
   8bff4:	5c803826 	beq	r11,r18,8c0d8 <_strtoll_r+0x1f0>
   8bff8:	54404c26 	beq	r10,r17,8c12c <_strtoll_r+0x244>
   8bffc:	580b883a 	mov	r5,r11
   8c000:	5009883a 	mov	r4,r10
   8c004:	a80d883a 	mov	r6,r21
   8c008:	b00f883a 	mov	r7,r22
   8c00c:	008d7a00 	call	8d7a0 <__muldi3>
   8c010:	8013d7fa 	srai	r9,r16,31
   8c014:	100d883a 	mov	r6,r2
   8c018:	1405883a 	add	r2,r2,r16
   8c01c:	118d803a 	cmpltu	r6,r2,r6
   8c020:	1a47883a 	add	r3,r3,r9
   8c024:	30cd883a 	add	r6,r6,r3
   8c028:	1015883a 	mov	r10,r2
   8c02c:	3017883a 	mov	r11,r6
   8c030:	01c00044 	movi	r7,1
   8c034:	a4c00007 	ldb	r19,0(r20)
   8c038:	a5000044 	addi	r20,r20,1
   8c03c:	e4c5883a 	add	r2,fp,r19
   8c040:	11000003 	ldbu	r4,0(r2)
   8c044:	20c0010c 	andi	r3,r4,4
   8c048:	183fe61e 	bne	r3,zero,8bfe4 <_strtoll_r+0xfc>
   8c04c:	208000cc 	andi	r2,r4,3
   8c050:	10000626 	beq	r2,zero,8c06c <_strtoll_r+0x184>
   8c054:	2080004c 	andi	r2,r4,1
   8c058:	1005003a 	cmpeq	r2,r2,zero
   8c05c:	1000301e 	bne	r2,zero,8c120 <_strtoll_r+0x238>
   8c060:	02000dc4 	movi	r8,55
   8c064:	9a21c83a 	sub	r16,r19,r8
   8c068:	85ffe016 	blt	r16,r23,8bfec <_strtoll_r+0x104>
   8c06c:	38004616 	blt	r7,zero,8c188 <_strtoll_r+0x2a0>
   8c070:	d8800517 	ldw	r2,20(sp)
   8c074:	1000341e 	bne	r2,zero,8c148 <_strtoll_r+0x260>
   8c078:	500b883a 	mov	r5,r10
   8c07c:	580d883a 	mov	r6,r11
   8c080:	d8c00417 	ldw	r3,16(sp)
   8c084:	18000626 	beq	r3,zero,8c0a0 <_strtoll_r+0x1b8>
   8c088:	38000226 	beq	r7,zero,8c094 <_strtoll_r+0x1ac>
   8c08c:	a53fffc4 	addi	r20,r20,-1
   8c090:	dd000315 	stw	r20,12(sp)
   8c094:	d8c00317 	ldw	r3,12(sp)
   8c098:	d8800417 	ldw	r2,16(sp)
   8c09c:	10c00015 	stw	r3,0(r2)
   8c0a0:	2805883a 	mov	r2,r5
   8c0a4:	3007883a 	mov	r3,r6
   8c0a8:	dfc00f17 	ldw	ra,60(sp)
   8c0ac:	df000e17 	ldw	fp,56(sp)
   8c0b0:	ddc00d17 	ldw	r23,52(sp)
   8c0b4:	dd800c17 	ldw	r22,48(sp)
   8c0b8:	dd400b17 	ldw	r21,44(sp)
   8c0bc:	dd000a17 	ldw	r20,40(sp)
   8c0c0:	dcc00917 	ldw	r19,36(sp)
   8c0c4:	dc800817 	ldw	r18,32(sp)
   8c0c8:	dc400717 	ldw	r17,28(sp)
   8c0cc:	dc000617 	ldw	r16,24(sp)
   8c0d0:	dec01004 	addi	sp,sp,64
   8c0d4:	f800283a 	ret
   8c0d8:	8abfc72e 	bgeu	r17,r10,8bff8 <_strtoll_r+0x110>
   8c0dc:	01ffffc4 	movi	r7,-1
   8c0e0:	003fd406 	br	8c034 <_strtoll_r+0x14c>
   8c0e4:	00800c04 	movi	r2,48
   8c0e8:	98803226 	beq	r19,r2,8c1b4 <_strtoll_r+0x2cc>
   8c0ec:	183fa026 	beq	r3,zero,8bf70 <_strtoll_r+0x88>
   8c0f0:	00800c04 	movi	r2,48
   8c0f4:	98803e26 	beq	r19,r2,8c1f0 <_strtoll_r+0x308>
   8c0f8:	d8c00117 	ldw	r3,4(sp)
   8c0fc:	05c00284 	movi	r23,10
   8c100:	b82b883a 	mov	r21,r23
   8c104:	1806c03a 	cmpne	r3,r3,zero
   8c108:	002d883a 	mov	r22,zero
   8c10c:	d8c00515 	stw	r3,20(sp)
   8c110:	183f9d26 	beq	r3,zero,8bf88 <_strtoll_r+0xa0>
   8c114:	0021883a 	mov	r16,zero
   8c118:	04600034 	movhi	r17,32768
   8c11c:	003f9d06 	br	8bf94 <_strtoll_r+0xac>
   8c120:	020015c4 	movi	r8,87
   8c124:	9a21c83a 	sub	r16,r19,r8
   8c128:	003fcf06 	br	8c068 <_strtoll_r+0x180>
   8c12c:	5cbfb31e 	bne	r11,r18,8bffc <_strtoll_r+0x114>
   8c130:	d8800017 	ldw	r2,0(sp)
   8c134:	143fb10e 	bge	r2,r16,8bffc <_strtoll_r+0x114>
   8c138:	8815883a 	mov	r10,r17
   8c13c:	9017883a 	mov	r11,r18
   8c140:	01ffffc4 	movi	r7,-1
   8c144:	003fbb06 	br	8c034 <_strtoll_r+0x14c>
   8c148:	0009883a 	mov	r4,zero
   8c14c:	2285c83a 	sub	r2,r4,r10
   8c150:	2089803a 	cmpltu	r4,r4,r2
   8c154:	02c7c83a 	sub	r3,zero,r11
   8c158:	1909c83a 	sub	r4,r3,r4
   8c15c:	100b883a 	mov	r5,r2
   8c160:	200d883a 	mov	r6,r4
   8c164:	003fc606 	br	8c080 <_strtoll_r+0x198>
   8c168:	a4c00007 	ldb	r19,0(r20)
   8c16c:	a5000044 	addi	r20,r20,1
   8c170:	003f7a06 	br	8bf5c <_strtoll_r+0x74>
   8c174:	a4c00007 	ldb	r19,0(r20)
   8c178:	00800044 	movi	r2,1
   8c17c:	a5000044 	addi	r20,r20,1
   8c180:	d8800115 	stw	r2,4(sp)
   8c184:	003f7606 	br	8bf60 <_strtoll_r+0x78>
   8c188:	d8c00117 	ldw	r3,4(sp)
   8c18c:	1805003a 	cmpeq	r2,r3,zero
   8c190:	1000131e 	bne	r2,zero,8c1e0 <_strtoll_r+0x2f8>
   8c194:	0005883a 	mov	r2,zero
   8c198:	00e00034 	movhi	r3,32768
   8c19c:	100b883a 	mov	r5,r2
   8c1a0:	180d883a 	mov	r6,r3
   8c1a4:	d8c00217 	ldw	r3,8(sp)
   8c1a8:	00800884 	movi	r2,34
   8c1ac:	18800015 	stw	r2,0(r3)
   8c1b0:	003fb306 	br	8c080 <_strtoll_r+0x198>
   8c1b4:	a1000007 	ldb	r4,0(r20)
   8c1b8:	00801e04 	movi	r2,120
   8c1bc:	20800226 	beq	r4,r2,8c1c8 <_strtoll_r+0x2e0>
   8c1c0:	00801604 	movi	r2,88
   8c1c4:	20bfc91e 	bne	r4,r2,8c0ec <_strtoll_r+0x204>
   8c1c8:	a4c00047 	ldb	r19,1(r20)
   8c1cc:	05c00404 	movi	r23,16
   8c1d0:	b82b883a 	mov	r21,r23
   8c1d4:	a5000084 	addi	r20,r20,2
   8c1d8:	002d883a 	mov	r22,zero
   8c1dc:	003f6606 	br	8bf78 <_strtoll_r+0x90>
   8c1e0:	017fffc4 	movi	r5,-1
   8c1e4:	01a00034 	movhi	r6,32768
   8c1e8:	31bfffc4 	addi	r6,r6,-1
   8c1ec:	003fed06 	br	8c1a4 <_strtoll_r+0x2bc>
   8c1f0:	05c00204 	movi	r23,8
   8c1f4:	b82b883a 	mov	r21,r23
   8c1f8:	002d883a 	mov	r22,zero
   8c1fc:	003f5e06 	br	8bf78 <_strtoll_r+0x90>

0008c200 <_strtoul_r>:
   8c200:	defff404 	addi	sp,sp,-48
   8c204:	00800274 	movhi	r2,9
   8c208:	1098c004 	addi	r2,r2,25344
   8c20c:	dd000615 	stw	r20,24(sp)
   8c210:	15000017 	ldw	r20,0(r2)
   8c214:	df000a15 	stw	fp,40(sp)
   8c218:	ddc00915 	stw	r23,36(sp)
   8c21c:	dc800415 	stw	r18,16(sp)
   8c220:	dc400315 	stw	r17,12(sp)
   8c224:	dfc00b15 	stw	ra,44(sp)
   8c228:	dd800815 	stw	r22,32(sp)
   8c22c:	dd400715 	stw	r21,28(sp)
   8c230:	dcc00515 	stw	r19,20(sp)
   8c234:	dc000215 	stw	r16,8(sp)
   8c238:	282f883a 	mov	r23,r5
   8c23c:	d9000115 	stw	r4,4(sp)
   8c240:	3039883a 	mov	fp,r6
   8c244:	3825883a 	mov	r18,r7
   8c248:	2823883a 	mov	r17,r5
   8c24c:	8c000007 	ldb	r16,0(r17)
   8c250:	8c400044 	addi	r17,r17,1
   8c254:	a407883a 	add	r3,r20,r16
   8c258:	18800003 	ldbu	r2,0(r3)
   8c25c:	1080020c 	andi	r2,r2,8
   8c260:	103ffa1e 	bne	r2,zero,8c24c <_strtoul_r+0x4c>
   8c264:	00800b44 	movi	r2,45
   8c268:	80805826 	beq	r16,r2,8c3cc <_strtoul_r+0x1cc>
   8c26c:	00800ac4 	movi	r2,43
   8c270:	80805326 	beq	r16,r2,8c3c0 <_strtoul_r+0x1c0>
   8c274:	d8000015 	stw	zero,0(sp)
   8c278:	9007003a 	cmpeq	r3,r18,zero
   8c27c:	18003d1e 	bne	r3,zero,8c374 <_strtoul_r+0x174>
   8c280:	00800404 	movi	r2,16
   8c284:	90803b26 	beq	r18,r2,8c374 <_strtoul_r+0x174>
   8c288:	013fffc4 	movi	r4,-1
   8c28c:	900b883a 	mov	r5,r18
   8c290:	0080b900 	call	80b90 <__udivsi3>
   8c294:	013fffc4 	movi	r4,-1
   8c298:	900b883a 	mov	r5,r18
   8c29c:	1027883a 	mov	r19,r2
   8c2a0:	0080b980 	call	80b98 <__umodsi3>
   8c2a4:	102d883a 	mov	r22,r2
   8c2a8:	902b883a 	mov	r21,r18
   8c2ac:	a405883a 	add	r2,r20,r16
   8c2b0:	11400003 	ldbu	r5,0(r2)
   8c2b4:	0009883a 	mov	r4,zero
   8c2b8:	000d883a 	mov	r6,zero
   8c2bc:	28c0010c 	andi	r3,r5,4
   8c2c0:	18000f26 	beq	r3,zero,8c300 <_strtoul_r+0x100>
   8c2c4:	843ff404 	addi	r16,r16,-48
   8c2c8:	8480150e 	bge	r16,r18,8c320 <_strtoul_r+0x120>
   8c2cc:	30003516 	blt	r6,zero,8c3a4 <_strtoul_r+0x1a4>
   8c2d0:	99003436 	bltu	r19,r4,8c3a4 <_strtoul_r+0x1a4>
   8c2d4:	24c03226 	beq	r4,r19,8c3a0 <_strtoul_r+0x1a0>
   8c2d8:	a80b883a 	mov	r5,r21
   8c2dc:	0080ba00 	call	80ba0 <__mulsi3>
   8c2e0:	1409883a 	add	r4,r2,r16
   8c2e4:	01800044 	movi	r6,1
   8c2e8:	8c000007 	ldb	r16,0(r17)
   8c2ec:	8c400044 	addi	r17,r17,1
   8c2f0:	a405883a 	add	r2,r20,r16
   8c2f4:	11400003 	ldbu	r5,0(r2)
   8c2f8:	28c0010c 	andi	r3,r5,4
   8c2fc:	183ff11e 	bne	r3,zero,8c2c4 <_strtoul_r+0xc4>
   8c300:	288000cc 	andi	r2,r5,3
   8c304:	10000626 	beq	r2,zero,8c320 <_strtoul_r+0x120>
   8c308:	2880004c 	andi	r2,r5,1
   8c30c:	1005003a 	cmpeq	r2,r2,zero
   8c310:	1000261e 	bne	r2,zero,8c3ac <_strtoul_r+0x1ac>
   8c314:	00800dc4 	movi	r2,55
   8c318:	80a1c83a 	sub	r16,r16,r2
   8c31c:	84bfeb16 	blt	r16,r18,8c2cc <_strtoul_r+0xcc>
   8c320:	3000420e 	bge	r6,zero,8c42c <_strtoul_r+0x22c>
   8c324:	d8c00117 	ldw	r3,4(sp)
   8c328:	00800884 	movi	r2,34
   8c32c:	013fffc4 	movi	r4,-1
   8c330:	18800015 	stw	r2,0(r3)
   8c334:	e0000226 	beq	fp,zero,8c340 <_strtoul_r+0x140>
   8c338:	30001f1e 	bne	r6,zero,8c3b8 <_strtoul_r+0x1b8>
   8c33c:	e5c00015 	stw	r23,0(fp)
   8c340:	2005883a 	mov	r2,r4
   8c344:	dfc00b17 	ldw	ra,44(sp)
   8c348:	df000a17 	ldw	fp,40(sp)
   8c34c:	ddc00917 	ldw	r23,36(sp)
   8c350:	dd800817 	ldw	r22,32(sp)
   8c354:	dd400717 	ldw	r21,28(sp)
   8c358:	dd000617 	ldw	r20,24(sp)
   8c35c:	dcc00517 	ldw	r19,20(sp)
   8c360:	dc800417 	ldw	r18,16(sp)
   8c364:	dc400317 	ldw	r17,12(sp)
   8c368:	dc000217 	ldw	r16,8(sp)
   8c36c:	dec00c04 	addi	sp,sp,48
   8c370:	f800283a 	ret
   8c374:	00800c04 	movi	r2,48
   8c378:	80801926 	beq	r16,r2,8c3e0 <_strtoul_r+0x1e0>
   8c37c:	183fc226 	beq	r3,zero,8c288 <_strtoul_r+0x88>
   8c380:	00800c04 	movi	r2,48
   8c384:	80802326 	beq	r16,r2,8c414 <_strtoul_r+0x214>
   8c388:	04800284 	movi	r18,10
   8c38c:	902b883a 	mov	r21,r18
   8c390:	04c666b4 	movhi	r19,6554
   8c394:	9ce66644 	addi	r19,r19,-26215
   8c398:	05800144 	movi	r22,5
   8c39c:	003fc306 	br	8c2ac <_strtoul_r+0xac>
   8c3a0:	b43fcd0e 	bge	r22,r16,8c2d8 <_strtoul_r+0xd8>
   8c3a4:	01bfffc4 	movi	r6,-1
   8c3a8:	003fcf06 	br	8c2e8 <_strtoul_r+0xe8>
   8c3ac:	008015c4 	movi	r2,87
   8c3b0:	80a1c83a 	sub	r16,r16,r2
   8c3b4:	003fd906 	br	8c31c <_strtoul_r+0x11c>
   8c3b8:	8dffffc4 	addi	r23,r17,-1
   8c3bc:	003fdf06 	br	8c33c <_strtoul_r+0x13c>
   8c3c0:	8c000007 	ldb	r16,0(r17)
   8c3c4:	8c400044 	addi	r17,r17,1
   8c3c8:	003faa06 	br	8c274 <_strtoul_r+0x74>
   8c3cc:	8c000007 	ldb	r16,0(r17)
   8c3d0:	00800044 	movi	r2,1
   8c3d4:	8c400044 	addi	r17,r17,1
   8c3d8:	d8800015 	stw	r2,0(sp)
   8c3dc:	003fa606 	br	8c278 <_strtoul_r+0x78>
   8c3e0:	89000007 	ldb	r4,0(r17)
   8c3e4:	00801e04 	movi	r2,120
   8c3e8:	20800226 	beq	r4,r2,8c3f4 <_strtoul_r+0x1f4>
   8c3ec:	00801604 	movi	r2,88
   8c3f0:	20bfe21e 	bne	r4,r2,8c37c <_strtoul_r+0x17c>
   8c3f4:	8c000047 	ldb	r16,1(r17)
   8c3f8:	04800404 	movi	r18,16
   8c3fc:	8c400084 	addi	r17,r17,2
   8c400:	902b883a 	mov	r21,r18
   8c404:	04c40034 	movhi	r19,4096
   8c408:	9cffffc4 	addi	r19,r19,-1
   8c40c:	058003c4 	movi	r22,15
   8c410:	003fa606 	br	8c2ac <_strtoul_r+0xac>
   8c414:	04800204 	movi	r18,8
   8c418:	902b883a 	mov	r21,r18
   8c41c:	04c80034 	movhi	r19,8192
   8c420:	9cffffc4 	addi	r19,r19,-1
   8c424:	058001c4 	movi	r22,7
   8c428:	003fa006 	br	8c2ac <_strtoul_r+0xac>
   8c42c:	d8c00017 	ldw	r3,0(sp)
   8c430:	1805003a 	cmpeq	r2,r3,zero
   8c434:	103fbf1e 	bne	r2,zero,8c334 <_strtoul_r+0x134>
   8c438:	0109c83a 	sub	r4,zero,r4
   8c43c:	003fbd06 	br	8c334 <_strtoul_r+0x134>

0008c440 <strtoul>:
   8c440:	00800274 	movhi	r2,9
   8c444:	1098bc04 	addi	r2,r2,25328
   8c448:	2013883a 	mov	r9,r4
   8c44c:	11000017 	ldw	r4,0(r2)
   8c450:	2805883a 	mov	r2,r5
   8c454:	300f883a 	mov	r7,r6
   8c458:	480b883a 	mov	r5,r9
   8c45c:	100d883a 	mov	r6,r2
   8c460:	008c2001 	jmpi	8c200 <_strtoul_r>

0008c464 <_strtoull_r>:
   8c464:	defff104 	addi	sp,sp,-60
   8c468:	00800274 	movhi	r2,9
   8c46c:	1098c004 	addi	r2,r2,25344
   8c470:	df000d15 	stw	fp,52(sp)
   8c474:	17000017 	ldw	fp,0(r2)
   8c478:	ddc00c15 	stw	r23,48(sp)
   8c47c:	dcc00815 	stw	r19,32(sp)
   8c480:	dfc00e15 	stw	ra,56(sp)
   8c484:	dd800b15 	stw	r22,44(sp)
   8c488:	dd400a15 	stw	r21,40(sp)
   8c48c:	dd000915 	stw	r20,36(sp)
   8c490:	dc800715 	stw	r18,28(sp)
   8c494:	dc400615 	stw	r17,24(sp)
   8c498:	dc000515 	stw	r16,20(sp)
   8c49c:	d9400215 	stw	r5,8(sp)
   8c4a0:	d9000115 	stw	r4,4(sp)
   8c4a4:	d9800315 	stw	r6,12(sp)
   8c4a8:	382f883a 	mov	r23,r7
   8c4ac:	2827883a 	mov	r19,r5
   8c4b0:	9d000007 	ldb	r20,0(r19)
   8c4b4:	9cc00044 	addi	r19,r19,1
   8c4b8:	e507883a 	add	r3,fp,r20
   8c4bc:	18800003 	ldbu	r2,0(r3)
   8c4c0:	1080020c 	andi	r2,r2,8
   8c4c4:	103ffa1e 	bne	r2,zero,8c4b0 <_strtoull_r+0x4c>
   8c4c8:	00800b44 	movi	r2,45
   8c4cc:	a0807a26 	beq	r20,r2,8c6b8 <_strtoull_r+0x254>
   8c4d0:	00800ac4 	movi	r2,43
   8c4d4:	a0807526 	beq	r20,r2,8c6ac <_strtoull_r+0x248>
   8c4d8:	d8000015 	stw	zero,0(sp)
   8c4dc:	b807003a 	cmpeq	r3,r23,zero
   8c4e0:	18005a1e 	bne	r3,zero,8c64c <_strtoull_r+0x1e8>
   8c4e4:	00800404 	movi	r2,16
   8c4e8:	b8805826 	beq	r23,r2,8c64c <_strtoull_r+0x1e8>
   8c4ec:	b82dd7fa 	srai	r22,r23,31
   8c4f0:	043fffc4 	movi	r16,-1
   8c4f4:	8009883a 	mov	r4,r16
   8c4f8:	800b883a 	mov	r5,r16
   8c4fc:	b80d883a 	mov	r6,r23
   8c500:	b00f883a 	mov	r7,r22
   8c504:	008d9680 	call	8d968 <__udivdi3>
   8c508:	8009883a 	mov	r4,r16
   8c50c:	800b883a 	mov	r5,r16
   8c510:	b80d883a 	mov	r6,r23
   8c514:	b00f883a 	mov	r7,r22
   8c518:	1023883a 	mov	r17,r2
   8c51c:	1825883a 	mov	r18,r3
   8c520:	008dfd40 	call	8dfd4 <__umoddi3>
   8c524:	b82b883a 	mov	r21,r23
   8c528:	1019883a 	mov	r12,r2
   8c52c:	e505883a 	add	r2,fp,r20
   8c530:	11000003 	ldbu	r4,0(r2)
   8c534:	0015883a 	mov	r10,zero
   8c538:	0017883a 	mov	r11,zero
   8c53c:	20c0010c 	andi	r3,r4,4
   8c540:	000d883a 	mov	r6,zero
   8c544:	18001c26 	beq	r3,zero,8c5b8 <_strtoull_r+0x154>
   8c548:	a43ff404 	addi	r16,r20,-48
   8c54c:	85c0220e 	bge	r16,r23,8c5d8 <_strtoull_r+0x174>
   8c550:	30003c16 	blt	r6,zero,8c644 <_strtoull_r+0x1e0>
   8c554:	92c03b36 	bltu	r18,r11,8c644 <_strtoull_r+0x1e0>
   8c558:	5c803926 	beq	r11,r18,8c640 <_strtoull_r+0x1dc>
   8c55c:	54404c26 	beq	r10,r17,8c690 <_strtoull_r+0x22c>
   8c560:	580b883a 	mov	r5,r11
   8c564:	5009883a 	mov	r4,r10
   8c568:	a80d883a 	mov	r6,r21
   8c56c:	b00f883a 	mov	r7,r22
   8c570:	db000415 	stw	r12,16(sp)
   8c574:	008d7a00 	call	8d7a0 <__muldi3>
   8c578:	8013d7fa 	srai	r9,r16,31
   8c57c:	100d883a 	mov	r6,r2
   8c580:	1405883a 	add	r2,r2,r16
   8c584:	118d803a 	cmpltu	r6,r2,r6
   8c588:	1a47883a 	add	r3,r3,r9
   8c58c:	db000417 	ldw	r12,16(sp)
   8c590:	30cd883a 	add	r6,r6,r3
   8c594:	3017883a 	mov	r11,r6
   8c598:	1015883a 	mov	r10,r2
   8c59c:	01800044 	movi	r6,1
   8c5a0:	9d000007 	ldb	r20,0(r19)
   8c5a4:	9cc00044 	addi	r19,r19,1
   8c5a8:	e505883a 	add	r2,fp,r20
   8c5ac:	11000003 	ldbu	r4,0(r2)
   8c5b0:	20c0010c 	andi	r3,r4,4
   8c5b4:	183fe41e 	bne	r3,zero,8c548 <_strtoull_r+0xe4>
   8c5b8:	208000cc 	andi	r2,r4,3
   8c5bc:	10000626 	beq	r2,zero,8c5d8 <_strtoull_r+0x174>
   8c5c0:	2080004c 	andi	r2,r4,1
   8c5c4:	1005003a 	cmpeq	r2,r2,zero
   8c5c8:	10002e1e 	bne	r2,zero,8c684 <_strtoull_r+0x220>
   8c5cc:	02000dc4 	movi	r8,55
   8c5d0:	a221c83a 	sub	r16,r20,r8
   8c5d4:	85ffde16 	blt	r16,r23,8c550 <_strtoull_r+0xec>
   8c5d8:	3000530e 	bge	r6,zero,8c728 <_strtoull_r+0x2c4>
   8c5dc:	d8c00117 	ldw	r3,4(sp)
   8c5e0:	02bfffc4 	movi	r10,-1
   8c5e4:	00800884 	movi	r2,34
   8c5e8:	5017883a 	mov	r11,r10
   8c5ec:	18800015 	stw	r2,0(r3)
   8c5f0:	d8800317 	ldw	r2,12(sp)
   8c5f4:	10000426 	beq	r2,zero,8c608 <_strtoull_r+0x1a4>
   8c5f8:	3000291e 	bne	r6,zero,8c6a0 <_strtoull_r+0x23c>
   8c5fc:	d8800217 	ldw	r2,8(sp)
   8c600:	d8c00317 	ldw	r3,12(sp)
   8c604:	18800015 	stw	r2,0(r3)
   8c608:	5005883a 	mov	r2,r10
   8c60c:	5807883a 	mov	r3,r11
   8c610:	dfc00e17 	ldw	ra,56(sp)
   8c614:	df000d17 	ldw	fp,52(sp)
   8c618:	ddc00c17 	ldw	r23,48(sp)
   8c61c:	dd800b17 	ldw	r22,44(sp)
   8c620:	dd400a17 	ldw	r21,40(sp)
   8c624:	dd000917 	ldw	r20,36(sp)
   8c628:	dcc00817 	ldw	r19,32(sp)
   8c62c:	dc800717 	ldw	r18,28(sp)
   8c630:	dc400617 	ldw	r17,24(sp)
   8c634:	dc000517 	ldw	r16,20(sp)
   8c638:	dec00f04 	addi	sp,sp,60
   8c63c:	f800283a 	ret
   8c640:	8abfc62e 	bgeu	r17,r10,8c55c <_strtoull_r+0xf8>
   8c644:	01bfffc4 	movi	r6,-1
   8c648:	003fd506 	br	8c5a0 <_strtoull_r+0x13c>
   8c64c:	00800c04 	movi	r2,48
   8c650:	a0801e26 	beq	r20,r2,8c6cc <_strtoull_r+0x268>
   8c654:	183fa526 	beq	r3,zero,8c4ec <_strtoull_r+0x88>
   8c658:	00800c04 	movi	r2,48
   8c65c:	a0802a26 	beq	r20,r2,8c708 <_strtoull_r+0x2a4>
   8c660:	05c00284 	movi	r23,10
   8c664:	b82b883a 	mov	r21,r23
   8c668:	046666b4 	movhi	r17,39322
   8c66c:	8c666644 	addi	r17,r17,-26215
   8c670:	002d883a 	mov	r22,zero
   8c674:	048666b4 	movhi	r18,6554
   8c678:	94a66644 	addi	r18,r18,-26215
   8c67c:	03000144 	movi	r12,5
   8c680:	003faa06 	br	8c52c <_strtoull_r+0xc8>
   8c684:	020015c4 	movi	r8,87
   8c688:	a221c83a 	sub	r16,r20,r8
   8c68c:	003fd106 	br	8c5d4 <_strtoull_r+0x170>
   8c690:	5cbfb31e 	bne	r11,r18,8c560 <_strtoull_r+0xfc>
   8c694:	643fb20e 	bge	r12,r16,8c560 <_strtoull_r+0xfc>
   8c698:	01bfffc4 	movi	r6,-1
   8c69c:	003fc006 	br	8c5a0 <_strtoull_r+0x13c>
   8c6a0:	9cffffc4 	addi	r19,r19,-1
   8c6a4:	dcc00215 	stw	r19,8(sp)
   8c6a8:	003fd406 	br	8c5fc <_strtoull_r+0x198>
   8c6ac:	9d000007 	ldb	r20,0(r19)
   8c6b0:	9cc00044 	addi	r19,r19,1
   8c6b4:	003f8806 	br	8c4d8 <_strtoull_r+0x74>
   8c6b8:	9d000007 	ldb	r20,0(r19)
   8c6bc:	00800044 	movi	r2,1
   8c6c0:	9cc00044 	addi	r19,r19,1
   8c6c4:	d8800015 	stw	r2,0(sp)
   8c6c8:	003f8406 	br	8c4dc <_strtoull_r+0x78>
   8c6cc:	99000007 	ldb	r4,0(r19)
   8c6d0:	00801e04 	movi	r2,120
   8c6d4:	20800226 	beq	r4,r2,8c6e0 <_strtoull_r+0x27c>
   8c6d8:	00801604 	movi	r2,88
   8c6dc:	20bfdd1e 	bne	r4,r2,8c654 <_strtoull_r+0x1f0>
   8c6e0:	9d000047 	ldb	r20,1(r19)
   8c6e4:	05c00404 	movi	r23,16
   8c6e8:	b82b883a 	mov	r21,r23
   8c6ec:	047fffc4 	movi	r17,-1
   8c6f0:	9cc00084 	addi	r19,r19,2
   8c6f4:	002d883a 	mov	r22,zero
   8c6f8:	04840034 	movhi	r18,4096
   8c6fc:	94bfffc4 	addi	r18,r18,-1
   8c700:	030003c4 	movi	r12,15
   8c704:	003f8906 	br	8c52c <_strtoull_r+0xc8>
   8c708:	05c00204 	movi	r23,8
   8c70c:	b82b883a 	mov	r21,r23
   8c710:	047fffc4 	movi	r17,-1
   8c714:	002d883a 	mov	r22,zero
   8c718:	04880034 	movhi	r18,8192
   8c71c:	94bfffc4 	addi	r18,r18,-1
   8c720:	030001c4 	movi	r12,7
   8c724:	003f8106 	br	8c52c <_strtoull_r+0xc8>
   8c728:	d8c00017 	ldw	r3,0(sp)
   8c72c:	1805003a 	cmpeq	r2,r3,zero
   8c730:	103faf1e 	bne	r2,zero,8c5f0 <_strtoull_r+0x18c>
   8c734:	0009883a 	mov	r4,zero
   8c738:	2285c83a 	sub	r2,r4,r10
   8c73c:	02c7c83a 	sub	r3,zero,r11
   8c740:	2089803a 	cmpltu	r4,r4,r2
   8c744:	1909c83a 	sub	r4,r3,r4
   8c748:	1015883a 	mov	r10,r2
   8c74c:	2017883a 	mov	r11,r4
   8c750:	003fa706 	br	8c5f0 <_strtoull_r+0x18c>

0008c754 <__submore>:
   8c754:	defffa04 	addi	sp,sp,-24
   8c758:	28c00c17 	ldw	r3,48(r5)
   8c75c:	dc800215 	stw	r18,8(sp)
   8c760:	2825883a 	mov	r18,r5
   8c764:	dc000015 	stw	r16,0(sp)
   8c768:	90801004 	addi	r2,r18,64
   8c76c:	04010004 	movi	r16,1024
   8c770:	dfc00515 	stw	ra,20(sp)
   8c774:	dd000415 	stw	r20,16(sp)
   8c778:	dcc00315 	stw	r19,12(sp)
   8c77c:	dc400115 	stw	r17,4(sp)
   8c780:	800b883a 	mov	r5,r16
   8c784:	18801b26 	beq	r3,r2,8c7f4 <__submore+0xa0>
   8c788:	94400d17 	ldw	r17,52(r18)
   8c78c:	180b883a 	mov	r5,r3
   8c790:	8c69883a 	add	r20,r17,r17
   8c794:	a00d883a 	mov	r6,r20
   8c798:	00824b00 	call	824b0 <_realloc_r>
   8c79c:	1467883a 	add	r19,r2,r17
   8c7a0:	1021883a 	mov	r16,r2
   8c7a4:	880d883a 	mov	r6,r17
   8c7a8:	9809883a 	mov	r4,r19
   8c7ac:	100b883a 	mov	r5,r2
   8c7b0:	10000e26 	beq	r2,zero,8c7ec <__submore+0x98>
   8c7b4:	008218c0 	call	8218c <memcpy>
   8c7b8:	000d883a 	mov	r6,zero
   8c7bc:	95000d15 	stw	r20,52(r18)
   8c7c0:	94c00015 	stw	r19,0(r18)
   8c7c4:	94000c15 	stw	r16,48(r18)
   8c7c8:	3005883a 	mov	r2,r6
   8c7cc:	dfc00517 	ldw	ra,20(sp)
   8c7d0:	dd000417 	ldw	r20,16(sp)
   8c7d4:	dcc00317 	ldw	r19,12(sp)
   8c7d8:	dc800217 	ldw	r18,8(sp)
   8c7dc:	dc400117 	ldw	r17,4(sp)
   8c7e0:	dc000017 	ldw	r16,0(sp)
   8c7e4:	dec00604 	addi	sp,sp,24
   8c7e8:	f800283a 	ret
   8c7ec:	01bfffc4 	movi	r6,-1
   8c7f0:	003ff506 	br	8c7c8 <__submore+0x74>
   8c7f4:	00819680 	call	81968 <_malloc_r>
   8c7f8:	1009883a 	mov	r4,r2
   8c7fc:	1140ff44 	addi	r5,r2,1021
   8c800:	000d883a 	mov	r6,zero
   8c804:	103ff926 	beq	r2,zero,8c7ec <__submore+0x98>
   8c808:	90801083 	ldbu	r2,66(r18)
   8c80c:	94000d15 	stw	r16,52(r18)
   8c810:	91000c15 	stw	r4,48(r18)
   8c814:	28800085 	stb	r2,2(r5)
   8c818:	90c01043 	ldbu	r3,65(r18)
   8c81c:	28c00045 	stb	r3,1(r5)
   8c820:	90801003 	ldbu	r2,64(r18)
   8c824:	2080ff45 	stb	r2,1021(r4)
   8c828:	91400015 	stw	r5,0(r18)
   8c82c:	003fe606 	br	8c7c8 <__submore+0x74>

0008c830 <_ungetc_r>:
   8c830:	defffc04 	addi	sp,sp,-16
   8c834:	00bfffc4 	movi	r2,-1
   8c838:	dc400215 	stw	r17,8(sp)
   8c83c:	dc000115 	stw	r16,4(sp)
   8c840:	dfc00315 	stw	ra,12(sp)
   8c844:	2821883a 	mov	r16,r5
   8c848:	2023883a 	mov	r17,r4
   8c84c:	28801826 	beq	r5,r2,8c8b0 <_ungetc_r+0x80>
   8c850:	20000226 	beq	r4,zero,8c85c <_ungetc_r+0x2c>
   8c854:	20800e17 	ldw	r2,56(r4)
   8c858:	10001b26 	beq	r2,zero,8c8c8 <_ungetc_r+0x98>
   8c85c:	3100030b 	ldhu	r4,12(r6)
   8c860:	00bff7c4 	movi	r2,-33
   8c864:	2084703a 	and	r2,r4,r2
   8c868:	117fffcc 	andi	r5,r2,65535
   8c86c:	28c0010c 	andi	r3,r5,4
   8c870:	1009883a 	mov	r4,r2
   8c874:	3080030d 	sth	r2,12(r6)
   8c878:	18003526 	beq	r3,zero,8c950 <_ungetc_r+0x120>
   8c87c:	30800c17 	ldw	r2,48(r6)
   8c880:	84003fcc 	andi	r16,r16,255
   8c884:	10001426 	beq	r2,zero,8c8d8 <_ungetc_r+0xa8>
   8c888:	30c00117 	ldw	r3,4(r6)
   8c88c:	30800d17 	ldw	r2,52(r6)
   8c890:	1880380e 	bge	r3,r2,8c974 <_ungetc_r+0x144>
   8c894:	30c00017 	ldw	r3,0(r6)
   8c898:	19ffffc4 	addi	r7,r3,-1
   8c89c:	31c00015 	stw	r7,0(r6)
   8c8a0:	1c3fffc5 	stb	r16,-1(r3)
   8c8a4:	30800117 	ldw	r2,4(r6)
   8c8a8:	10800044 	addi	r2,r2,1
   8c8ac:	30800115 	stw	r2,4(r6)
   8c8b0:	8005883a 	mov	r2,r16
   8c8b4:	dfc00317 	ldw	ra,12(sp)
   8c8b8:	dc400217 	ldw	r17,8(sp)
   8c8bc:	dc000117 	ldw	r16,4(sp)
   8c8c0:	dec00404 	addi	sp,sp,16
   8c8c4:	f800283a 	ret
   8c8c8:	d9800015 	stw	r6,0(sp)
   8c8cc:	00885dc0 	call	885dc <__sinit>
   8c8d0:	d9800017 	ldw	r6,0(sp)
   8c8d4:	003fe106 	br	8c85c <_ungetc_r+0x2c>
   8c8d8:	30800417 	ldw	r2,16(r6)
   8c8dc:	10002326 	beq	r2,zero,8c96c <_ungetc_r+0x13c>
   8c8e0:	31c00017 	ldw	r7,0(r6)
   8c8e4:	11c0022e 	bgeu	r2,r7,8c8f0 <_ungetc_r+0xc0>
   8c8e8:	38bfffc3 	ldbu	r2,-1(r7)
   8c8ec:	80801226 	beq	r16,r2,8c938 <_ungetc_r+0x108>
   8c8f0:	30c00117 	ldw	r3,4(r6)
   8c8f4:	00800044 	movi	r2,1
   8c8f8:	30800115 	stw	r2,4(r6)
   8c8fc:	008000c4 	movi	r2,3
   8c900:	31001004 	addi	r4,r6,64
   8c904:	31401084 	addi	r5,r6,66
   8c908:	30800d15 	stw	r2,52(r6)
   8c90c:	8005883a 	mov	r2,r16
   8c910:	30c00f15 	stw	r3,60(r6)
   8c914:	31c00e15 	stw	r7,56(r6)
   8c918:	31000c15 	stw	r4,48(r6)
   8c91c:	31400015 	stw	r5,0(r6)
   8c920:	34001085 	stb	r16,66(r6)
   8c924:	dfc00317 	ldw	ra,12(sp)
   8c928:	dc400217 	ldw	r17,8(sp)
   8c92c:	dc000117 	ldw	r16,4(sp)
   8c930:	dec00404 	addi	sp,sp,16
   8c934:	f800283a 	ret
   8c938:	30800117 	ldw	r2,4(r6)
   8c93c:	39ffffc4 	addi	r7,r7,-1
   8c940:	31c00015 	stw	r7,0(r6)
   8c944:	10800044 	addi	r2,r2,1
   8c948:	30800115 	stw	r2,4(r6)
   8c94c:	003fd806 	br	8c8b0 <_ungetc_r+0x80>
   8c950:	2880040c 	andi	r2,r5,16
   8c954:	10000d26 	beq	r2,zero,8c98c <_ungetc_r+0x15c>
   8c958:	2880020c 	andi	r2,r5,8
   8c95c:	10000d1e 	bne	r2,zero,8c994 <_ungetc_r+0x164>
   8c960:	20800114 	ori	r2,r4,4
   8c964:	3080030d 	sth	r2,12(r6)
   8c968:	003fc406 	br	8c87c <_ungetc_r+0x4c>
   8c96c:	31c00017 	ldw	r7,0(r6)
   8c970:	003fdf06 	br	8c8f0 <_ungetc_r+0xc0>
   8c974:	300b883a 	mov	r5,r6
   8c978:	8809883a 	mov	r4,r17
   8c97c:	d9800015 	stw	r6,0(sp)
   8c980:	008c7540 	call	8c754 <__submore>
   8c984:	d9800017 	ldw	r6,0(sp)
   8c988:	103fc226 	beq	r2,zero,8c894 <_ungetc_r+0x64>
   8c98c:	043fffc4 	movi	r16,-1
   8c990:	003fc706 	br	8c8b0 <_ungetc_r+0x80>
   8c994:	300b883a 	mov	r5,r6
   8c998:	8809883a 	mov	r4,r17
   8c99c:	d9800015 	stw	r6,0(sp)
   8c9a0:	00883440 	call	88344 <_fflush_r>
   8c9a4:	d9800017 	ldw	r6,0(sp)
   8c9a8:	103ff81e 	bne	r2,zero,8c98c <_ungetc_r+0x15c>
   8c9ac:	3100030b 	ldhu	r4,12(r6)
   8c9b0:	00bffdc4 	movi	r2,-9
   8c9b4:	30000215 	stw	zero,8(r6)
   8c9b8:	2084703a 	and	r2,r4,r2
   8c9bc:	1009883a 	mov	r4,r2
   8c9c0:	3080030d 	sth	r2,12(r6)
   8c9c4:	30000615 	stw	zero,24(r6)
   8c9c8:	003fe506 	br	8c960 <_ungetc_r+0x130>

0008c9cc <ungetc>:
   8c9cc:	01800274 	movhi	r6,9
   8c9d0:	3198bc04 	addi	r6,r6,25328
   8c9d4:	2007883a 	mov	r3,r4
   8c9d8:	31000017 	ldw	r4,0(r6)
   8c9dc:	280d883a 	mov	r6,r5
   8c9e0:	180b883a 	mov	r5,r3
   8c9e4:	008c8301 	jmpi	8c830 <_ungetc_r>

0008c9e8 <_calloc_r>:
   8c9e8:	defffe04 	addi	sp,sp,-8
   8c9ec:	dc400015 	stw	r17,0(sp)
   8c9f0:	2023883a 	mov	r17,r4
   8c9f4:	2809883a 	mov	r4,r5
   8c9f8:	300b883a 	mov	r5,r6
   8c9fc:	dfc00115 	stw	ra,4(sp)
   8ca00:	0080ba00 	call	80ba0 <__mulsi3>
   8ca04:	100b883a 	mov	r5,r2
   8ca08:	8809883a 	mov	r4,r17
   8ca0c:	00819680 	call	81968 <_malloc_r>
   8ca10:	1023883a 	mov	r17,r2
   8ca14:	01c00904 	movi	r7,36
   8ca18:	10000d26 	beq	r2,zero,8ca50 <_calloc_r+0x68>
   8ca1c:	10ffff17 	ldw	r3,-4(r2)
   8ca20:	1009883a 	mov	r4,r2
   8ca24:	00bfff04 	movi	r2,-4
   8ca28:	1886703a 	and	r3,r3,r2
   8ca2c:	1887883a 	add	r3,r3,r2
   8ca30:	180d883a 	mov	r6,r3
   8ca34:	000b883a 	mov	r5,zero
   8ca38:	38c01736 	bltu	r7,r3,8ca98 <_calloc_r+0xb0>
   8ca3c:	008004c4 	movi	r2,19
   8ca40:	10c00836 	bltu	r2,r3,8ca64 <_calloc_r+0x7c>
   8ca44:	20000215 	stw	zero,8(r4)
   8ca48:	20000015 	stw	zero,0(r4)
   8ca4c:	20000115 	stw	zero,4(r4)
   8ca50:	8805883a 	mov	r2,r17
   8ca54:	dfc00117 	ldw	ra,4(sp)
   8ca58:	dc400017 	ldw	r17,0(sp)
   8ca5c:	dec00204 	addi	sp,sp,8
   8ca60:	f800283a 	ret
   8ca64:	008006c4 	movi	r2,27
   8ca68:	88000015 	stw	zero,0(r17)
   8ca6c:	88000115 	stw	zero,4(r17)
   8ca70:	89000204 	addi	r4,r17,8
   8ca74:	10fff32e 	bgeu	r2,r3,8ca44 <_calloc_r+0x5c>
   8ca78:	88000215 	stw	zero,8(r17)
   8ca7c:	88000315 	stw	zero,12(r17)
   8ca80:	89000404 	addi	r4,r17,16
   8ca84:	19ffef1e 	bne	r3,r7,8ca44 <_calloc_r+0x5c>
   8ca88:	89000604 	addi	r4,r17,24
   8ca8c:	88000415 	stw	zero,16(r17)
   8ca90:	88000515 	stw	zero,20(r17)
   8ca94:	003feb06 	br	8ca44 <_calloc_r+0x5c>
   8ca98:	00893ec0 	call	893ec <memset>
   8ca9c:	8805883a 	mov	r2,r17
   8caa0:	dfc00117 	ldw	ra,4(sp)
   8caa4:	dc400017 	ldw	r17,0(sp)
   8caa8:	dec00204 	addi	sp,sp,8
   8caac:	f800283a 	ret

0008cab0 <_fclose_r>:
   8cab0:	defffc04 	addi	sp,sp,-16
   8cab4:	dc400115 	stw	r17,4(sp)
   8cab8:	dc000015 	stw	r16,0(sp)
   8cabc:	dfc00315 	stw	ra,12(sp)
   8cac0:	dc800215 	stw	r18,8(sp)
   8cac4:	2821883a 	mov	r16,r5
   8cac8:	2023883a 	mov	r17,r4
   8cacc:	28002926 	beq	r5,zero,8cb74 <_fclose_r+0xc4>
   8cad0:	00885cc0 	call	885cc <__sfp_lock_acquire>
   8cad4:	88000226 	beq	r17,zero,8cae0 <_fclose_r+0x30>
   8cad8:	88800e17 	ldw	r2,56(r17)
   8cadc:	10002d26 	beq	r2,zero,8cb94 <_fclose_r+0xe4>
   8cae0:	8080030f 	ldh	r2,12(r16)
   8cae4:	10002226 	beq	r2,zero,8cb70 <_fclose_r+0xc0>
   8cae8:	8809883a 	mov	r4,r17
   8caec:	800b883a 	mov	r5,r16
   8caf0:	00883440 	call	88344 <_fflush_r>
   8caf4:	1025883a 	mov	r18,r2
   8caf8:	80800b17 	ldw	r2,44(r16)
   8cafc:	10000426 	beq	r2,zero,8cb10 <_fclose_r+0x60>
   8cb00:	81400717 	ldw	r5,28(r16)
   8cb04:	8809883a 	mov	r4,r17
   8cb08:	103ee83a 	callr	r2
   8cb0c:	10002a16 	blt	r2,zero,8cbb8 <_fclose_r+0x108>
   8cb10:	8080030b 	ldhu	r2,12(r16)
   8cb14:	1080200c 	andi	r2,r2,128
   8cb18:	1000231e 	bne	r2,zero,8cba8 <_fclose_r+0xf8>
   8cb1c:	81400c17 	ldw	r5,48(r16)
   8cb20:	28000526 	beq	r5,zero,8cb38 <_fclose_r+0x88>
   8cb24:	80801004 	addi	r2,r16,64
   8cb28:	28800226 	beq	r5,r2,8cb34 <_fclose_r+0x84>
   8cb2c:	8809883a 	mov	r4,r17
   8cb30:	0088c800 	call	88c80 <_free_r>
   8cb34:	80000c15 	stw	zero,48(r16)
   8cb38:	81401117 	ldw	r5,68(r16)
   8cb3c:	28000326 	beq	r5,zero,8cb4c <_fclose_r+0x9c>
   8cb40:	8809883a 	mov	r4,r17
   8cb44:	0088c800 	call	88c80 <_free_r>
   8cb48:	80001115 	stw	zero,68(r16)
   8cb4c:	8000030d 	sth	zero,12(r16)
   8cb50:	00885d00 	call	885d0 <__sfp_lock_release>
   8cb54:	9005883a 	mov	r2,r18
   8cb58:	dfc00317 	ldw	ra,12(sp)
   8cb5c:	dc800217 	ldw	r18,8(sp)
   8cb60:	dc400117 	ldw	r17,4(sp)
   8cb64:	dc000017 	ldw	r16,0(sp)
   8cb68:	dec00404 	addi	sp,sp,16
   8cb6c:	f800283a 	ret
   8cb70:	00885d00 	call	885d0 <__sfp_lock_release>
   8cb74:	0025883a 	mov	r18,zero
   8cb78:	9005883a 	mov	r2,r18
   8cb7c:	dfc00317 	ldw	ra,12(sp)
   8cb80:	dc800217 	ldw	r18,8(sp)
   8cb84:	dc400117 	ldw	r17,4(sp)
   8cb88:	dc000017 	ldw	r16,0(sp)
   8cb8c:	dec00404 	addi	sp,sp,16
   8cb90:	f800283a 	ret
   8cb94:	8809883a 	mov	r4,r17
   8cb98:	00885dc0 	call	885dc <__sinit>
   8cb9c:	8080030f 	ldh	r2,12(r16)
   8cba0:	103fd11e 	bne	r2,zero,8cae8 <_fclose_r+0x38>
   8cba4:	003ff206 	br	8cb70 <_fclose_r+0xc0>
   8cba8:	81400417 	ldw	r5,16(r16)
   8cbac:	8809883a 	mov	r4,r17
   8cbb0:	0088c800 	call	88c80 <_free_r>
   8cbb4:	003fd906 	br	8cb1c <_fclose_r+0x6c>
   8cbb8:	04bfffc4 	movi	r18,-1
   8cbbc:	003fd406 	br	8cb10 <_fclose_r+0x60>

0008cbc0 <fclose>:
   8cbc0:	00800274 	movhi	r2,9
   8cbc4:	1098bc04 	addi	r2,r2,25328
   8cbc8:	200b883a 	mov	r5,r4
   8cbcc:	11000017 	ldw	r4,0(r2)
   8cbd0:	008cab01 	jmpi	8cab0 <_fclose_r>

0008cbd4 <htinit>:
   8cbd4:	28800003 	ldbu	r2,0(r5)
   8cbd8:	10000626 	beq	r2,zero,8cbf4 <htinit+0x20>
   8cbdc:	1105883a 	add	r2,r2,r4
   8cbe0:	11800005 	stb	r6,0(r2)
   8cbe4:	28800043 	ldbu	r2,1(r5)
   8cbe8:	31800044 	addi	r6,r6,1
   8cbec:	29400044 	addi	r5,r5,1
   8cbf0:	103ffa1e 	bne	r2,zero,8cbdc <htinit+0x8>
   8cbf4:	f800283a 	ret

0008cbf8 <__hexdig_init>:
   8cbf8:	defffd04 	addi	sp,sp,-12
   8cbfc:	dc400015 	stw	r17,0(sp)
   8cc00:	04400274 	movhi	r17,9
   8cc04:	8c5fd204 	addi	r17,r17,32584
   8cc08:	dcc00115 	stw	r19,4(sp)
   8cc0c:	8809883a 	mov	r4,r17
   8cc10:	04c00684 	movi	r19,26
   8cc14:	01400274 	movhi	r5,9
   8cc18:	29518704 	addi	r5,r5,17948
   8cc1c:	01800404 	movi	r6,16
   8cc20:	dfc00215 	stw	ra,8(sp)
   8cc24:	008cbd40 	call	8cbd4 <htinit>
   8cc28:	980d883a 	mov	r6,r19
   8cc2c:	8809883a 	mov	r4,r17
   8cc30:	01400274 	movhi	r5,9
   8cc34:	29518a04 	addi	r5,r5,17960
   8cc38:	008cbd40 	call	8cbd4 <htinit>
   8cc3c:	8809883a 	mov	r4,r17
   8cc40:	980d883a 	mov	r6,r19
   8cc44:	01400274 	movhi	r5,9
   8cc48:	29518c04 	addi	r5,r5,17968
   8cc4c:	dfc00217 	ldw	ra,8(sp)
   8cc50:	dcc00117 	ldw	r19,4(sp)
   8cc54:	dc400017 	ldw	r17,0(sp)
   8cc58:	dec00304 	addi	sp,sp,12
   8cc5c:	008cbd41 	jmpi	8cbd4 <htinit>

0008cc60 <rshift>:
   8cc60:	2807d17a 	srai	r3,r5,5
   8cc64:	20800417 	ldw	r2,16(r4)
   8cc68:	22400504 	addi	r9,r4,20
   8cc6c:	480f883a 	mov	r7,r9
   8cc70:	1880190e 	bge	r3,r2,8ccd8 <rshift+0x78>
   8cc74:	1085883a 	add	r2,r2,r2
   8cc78:	18c7883a 	add	r3,r3,r3
   8cc7c:	1085883a 	add	r2,r2,r2
   8cc80:	18c7883a 	add	r3,r3,r3
   8cc84:	294007cc 	andi	r5,r5,31
   8cc88:	4891883a 	add	r8,r9,r2
   8cc8c:	48cd883a 	add	r6,r9,r3
   8cc90:	28001726 	beq	r5,zero,8ccf0 <rshift+0x90>
   8cc94:	30c00017 	ldw	r3,0(r6)
   8cc98:	00800804 	movi	r2,32
   8cc9c:	31800104 	addi	r6,r6,4
   8cca0:	1155c83a 	sub	r10,r2,r5
   8cca4:	1946d83a 	srl	r3,r3,r5
   8cca8:	3200092e 	bgeu	r6,r8,8ccd0 <rshift+0x70>
   8ccac:	30800017 	ldw	r2,0(r6)
   8ccb0:	1284983a 	sll	r2,r2,r10
   8ccb4:	10c4b03a 	or	r2,r2,r3
   8ccb8:	38800015 	stw	r2,0(r7)
   8ccbc:	30c00017 	ldw	r3,0(r6)
   8ccc0:	31800104 	addi	r6,r6,4
   8ccc4:	39c00104 	addi	r7,r7,4
   8ccc8:	1946d83a 	srl	r3,r3,r5
   8cccc:	323ff736 	bltu	r6,r8,8ccac <rshift+0x4c>
   8ccd0:	38c00015 	stw	r3,0(r7)
   8ccd4:	18000c1e 	bne	r3,zero,8cd08 <rshift+0xa8>
   8ccd8:	3a45c83a 	sub	r2,r7,r9
   8ccdc:	1005d0ba 	srai	r2,r2,2
   8cce0:	20800415 	stw	r2,16(r4)
   8cce4:	1000011e 	bne	r2,zero,8ccec <rshift+0x8c>
   8cce8:	20000515 	stw	zero,20(r4)
   8ccec:	f800283a 	ret
   8ccf0:	323ff92e 	bgeu	r6,r8,8ccd8 <rshift+0x78>
   8ccf4:	30800017 	ldw	r2,0(r6)
   8ccf8:	31800104 	addi	r6,r6,4
   8ccfc:	38800015 	stw	r2,0(r7)
   8cd00:	39c00104 	addi	r7,r7,4
   8cd04:	003ffa06 	br	8ccf0 <rshift+0x90>
   8cd08:	39c00104 	addi	r7,r7,4
   8cd0c:	003ff206 	br	8ccd8 <rshift+0x78>

0008cd10 <__gethex>:
   8cd10:	defff104 	addi	sp,sp,-60
   8cd14:	df000d15 	stw	fp,52(sp)
   8cd18:	dcc00815 	stw	r19,32(sp)
   8cd1c:	dfc00e15 	stw	ra,56(sp)
   8cd20:	ddc00c15 	stw	r23,48(sp)
   8cd24:	dd800b15 	stw	r22,44(sp)
   8cd28:	dd400a15 	stw	r21,40(sp)
   8cd2c:	dd000915 	stw	r20,36(sp)
   8cd30:	dc800715 	stw	r18,28(sp)
   8cd34:	dc400615 	stw	r17,24(sp)
   8cd38:	dc000515 	stw	r16,20(sp)
   8cd3c:	04c00274 	movhi	r19,9
   8cd40:	9cdfd204 	addi	r19,r19,32584
   8cd44:	98800c03 	ldbu	r2,48(r19)
   8cd48:	d9000115 	stw	r4,4(sp)
   8cd4c:	2839883a 	mov	fp,r5
   8cd50:	d9800215 	stw	r6,8(sp)
   8cd54:	d9c00315 	stw	r7,12(sp)
   8cd58:	10007526 	beq	r2,zero,8cf30 <__gethex+0x220>
   8cd5c:	e1800017 	ldw	r6,0(fp)
   8cd60:	00800c04 	movi	r2,48
   8cd64:	31000083 	ldbu	r4,2(r6)
   8cd68:	30c00084 	addi	r3,r6,2
   8cd6c:	2080761e 	bne	r4,r2,8cf48 <__gethex+0x238>
   8cd70:	200b883a 	mov	r5,r4
   8cd74:	3007883a 	mov	r3,r6
   8cd78:	188000c3 	ldbu	r2,3(r3)
   8cd7c:	18c00044 	addi	r3,r3,1
   8cd80:	1009883a 	mov	r4,r2
   8cd84:	117ffc26 	beq	r2,r5,8cd78 <__gethex+0x68>
   8cd88:	198fc83a 	sub	r7,r3,r6
   8cd8c:	19400084 	addi	r5,r3,2
   8cd90:	24c5883a 	add	r2,r4,r19
   8cd94:	10c00003 	ldbu	r3,0(r2)
   8cd98:	18002e26 	beq	r3,zero,8ce54 <__gethex+0x144>
   8cd9c:	29000003 	ldbu	r4,0(r5)
   8cda0:	282b883a 	mov	r21,r5
   8cda4:	000d883a 	mov	r6,zero
   8cda8:	002d883a 	mov	r22,zero
   8cdac:	21003fcc 	andi	r4,r4,255
   8cdb0:	24c5883a 	add	r2,r4,r19
   8cdb4:	10c00003 	ldbu	r3,0(r2)
   8cdb8:	18000526 	beq	r3,zero,8cdd0 <__gethex+0xc0>
   8cdbc:	29400044 	addi	r5,r5,1
   8cdc0:	29000003 	ldbu	r4,0(r5)
   8cdc4:	24c5883a 	add	r2,r4,r19
   8cdc8:	10c00003 	ldbu	r3,0(r2)
   8cdcc:	183ffb1e 	bne	r3,zero,8cdbc <__gethex+0xac>
   8cdd0:	00800b84 	movi	r2,46
   8cdd4:	20805f26 	beq	r4,r2,8cf54 <__gethex+0x244>
   8cdd8:	30008226 	beq	r6,zero,8cfe4 <__gethex+0x2d4>
   8cddc:	2985c83a 	sub	r2,r5,r6
   8cde0:	1085883a 	add	r2,r2,r2
   8cde4:	1085883a 	add	r2,r2,r2
   8cde8:	0085c83a 	sub	r2,zero,r2
   8cdec:	d8800015 	stw	r2,0(sp)
   8cdf0:	2825883a 	mov	r18,r5
   8cdf4:	90c00003 	ldbu	r3,0(r18)
   8cdf8:	00801404 	movi	r2,80
   8cdfc:	18801e26 	beq	r3,r2,8ce78 <__gethex+0x168>
   8ce00:	00801c04 	movi	r2,112
   8ce04:	18801c26 	beq	r3,r2,8ce78 <__gethex+0x168>
   8ce08:	9023883a 	mov	r17,r18
   8ce0c:	b005003a 	cmpeq	r2,r22,zero
   8ce10:	e4400015 	stw	r17,0(fp)
   8ce14:	10008d1e 	bne	r2,zero,8d04c <__gethex+0x33c>
   8ce18:	38004326 	beq	r7,zero,8cf28 <__gethex+0x218>
   8ce1c:	0025883a 	mov	r18,zero
   8ce20:	9005883a 	mov	r2,r18
   8ce24:	dfc00e17 	ldw	ra,56(sp)
   8ce28:	df000d17 	ldw	fp,52(sp)
   8ce2c:	ddc00c17 	ldw	r23,48(sp)
   8ce30:	dd800b17 	ldw	r22,44(sp)
   8ce34:	dd400a17 	ldw	r21,40(sp)
   8ce38:	dd000917 	ldw	r20,36(sp)
   8ce3c:	dcc00817 	ldw	r19,32(sp)
   8ce40:	dc800717 	ldw	r18,28(sp)
   8ce44:	dc400617 	ldw	r17,24(sp)
   8ce48:	dc000517 	ldw	r16,20(sp)
   8ce4c:	dec00f04 	addi	sp,sp,60
   8ce50:	f800283a 	ret
   8ce54:	00800b84 	movi	r2,46
   8ce58:	20805126 	beq	r4,r2,8cfa0 <__gethex+0x290>
   8ce5c:	2825883a 	mov	r18,r5
   8ce60:	d8000015 	stw	zero,0(sp)
   8ce64:	90c00003 	ldbu	r3,0(r18)
   8ce68:	00801404 	movi	r2,80
   8ce6c:	282b883a 	mov	r21,r5
   8ce70:	05800044 	movi	r22,1
   8ce74:	18bfe21e 	bne	r3,r2,8ce00 <__gethex+0xf0>
   8ce78:	90c00043 	ldbu	r3,1(r18)
   8ce7c:	00800ac4 	movi	r2,43
   8ce80:	91400044 	addi	r5,r18,1
   8ce84:	18805126 	beq	r3,r2,8cfcc <__gethex+0x2bc>
   8ce88:	00800b44 	movi	r2,45
   8ce8c:	18805326 	beq	r3,r2,8cfdc <__gethex+0x2cc>
   8ce90:	002f883a 	mov	r23,zero
   8ce94:	1cc5883a 	add	r2,r3,r19
   8ce98:	10800003 	ldbu	r2,0(r2)
   8ce9c:	103fda26 	beq	r2,zero,8ce08 <__gethex+0xf8>
   8cea0:	01800644 	movi	r6,25
   8cea4:	30bfd816 	blt	r6,r2,8ce08 <__gethex+0xf8>
   8cea8:	28c00043 	ldbu	r3,1(r5)
   8ceac:	113ffc04 	addi	r4,r2,-16
   8ceb0:	00800274 	movhi	r2,9
   8ceb4:	109fd204 	addi	r2,r2,32584
   8ceb8:	1887883a 	add	r3,r3,r2
   8cebc:	18800003 	ldbu	r2,0(r3)
   8cec0:	2c400044 	addi	r17,r5,1
   8cec4:	10001126 	beq	r2,zero,8cf0c <__gethex+0x1fc>
   8cec8:	1021883a 	mov	r16,r2
   8cecc:	30800f16 	blt	r6,r2,8cf0c <__gethex+0x1fc>
   8ced0:	3029883a 	mov	r20,r6
   8ced4:	00000106 	br	8cedc <__gethex+0x1cc>
   8ced8:	a0800c16 	blt	r20,r2,8cf0c <__gethex+0x1fc>
   8cedc:	8c400044 	addi	r17,r17,1
   8cee0:	01400284 	movi	r5,10
   8cee4:	d9c00415 	stw	r7,16(sp)
   8cee8:	0080ba00 	call	80ba0 <__mulsi3>
   8ceec:	88c00003 	ldbu	r3,0(r17)
   8cef0:	1405883a 	add	r2,r2,r16
   8cef4:	113ffc04 	addi	r4,r2,-16
   8cef8:	1cc7883a 	add	r3,r3,r19
   8cefc:	18800003 	ldbu	r2,0(r3)
   8cf00:	d9c00417 	ldw	r7,16(sp)
   8cf04:	1021883a 	mov	r16,r2
   8cf08:	103ff31e 	bne	r2,zero,8ced8 <__gethex+0x1c8>
   8cf0c:	b805003a 	cmpeq	r2,r23,zero
   8cf10:	1000011e 	bne	r2,zero,8cf18 <__gethex+0x208>
   8cf14:	0109c83a 	sub	r4,zero,r4
   8cf18:	d8800017 	ldw	r2,0(sp)
   8cf1c:	1105883a 	add	r2,r2,r4
   8cf20:	d8800015 	stw	r2,0(sp)
   8cf24:	003fb906 	br	8ce0c <__gethex+0xfc>
   8cf28:	04800184 	movi	r18,6
   8cf2c:	003fbc06 	br	8ce20 <__gethex+0x110>
   8cf30:	008cbf80 	call	8cbf8 <__hexdig_init>
   8cf34:	e1800017 	ldw	r6,0(fp)
   8cf38:	00800c04 	movi	r2,48
   8cf3c:	31000083 	ldbu	r4,2(r6)
   8cf40:	30c00084 	addi	r3,r6,2
   8cf44:	20bf8a26 	beq	r4,r2,8cd70 <__gethex+0x60>
   8cf48:	180b883a 	mov	r5,r3
   8cf4c:	000f883a 	mov	r7,zero
   8cf50:	003f8f06 	br	8cd90 <__gethex+0x80>
   8cf54:	303fa11e 	bne	r6,zero,8cddc <__gethex+0xcc>
   8cf58:	29400044 	addi	r5,r5,1
   8cf5c:	28800003 	ldbu	r2,0(r5)
   8cf60:	14c5883a 	add	r2,r2,r19
   8cf64:	10c00003 	ldbu	r3,0(r2)
   8cf68:	1800b526 	beq	r3,zero,8d240 <__gethex+0x530>
   8cf6c:	2809883a 	mov	r4,r5
   8cf70:	21000044 	addi	r4,r4,1
   8cf74:	20800003 	ldbu	r2,0(r4)
   8cf78:	14c5883a 	add	r2,r2,r19
   8cf7c:	10c00003 	ldbu	r3,0(r2)
   8cf80:	183ffb1e 	bne	r3,zero,8cf70 <__gethex+0x260>
   8cf84:	2145c83a 	sub	r2,r4,r5
   8cf88:	1085883a 	add	r2,r2,r2
   8cf8c:	1085883a 	add	r2,r2,r2
   8cf90:	0085c83a 	sub	r2,zero,r2
   8cf94:	200b883a 	mov	r5,r4
   8cf98:	d8800015 	stw	r2,0(sp)
   8cf9c:	003f9406 	br	8cdf0 <__gethex+0xe0>
   8cfa0:	29000043 	ldbu	r4,1(r5)
   8cfa4:	00800274 	movhi	r2,9
   8cfa8:	109fd204 	addi	r2,r2,32584
   8cfac:	2c800044 	addi	r18,r5,1
   8cfb0:	2085883a 	add	r2,r4,r2
   8cfb4:	10c00003 	ldbu	r3,0(r2)
   8cfb8:	18000d1e 	bne	r3,zero,8cff0 <__gethex+0x2e0>
   8cfbc:	282b883a 	mov	r21,r5
   8cfc0:	05800044 	movi	r22,1
   8cfc4:	d8000015 	stw	zero,0(sp)
   8cfc8:	003f8a06 	br	8cdf4 <__gethex+0xe4>
   8cfcc:	002f883a 	mov	r23,zero
   8cfd0:	29400044 	addi	r5,r5,1
   8cfd4:	28c00003 	ldbu	r3,0(r5)
   8cfd8:	003fae06 	br	8ce94 <__gethex+0x184>
   8cfdc:	05c00044 	movi	r23,1
   8cfe0:	003ffb06 	br	8cfd0 <__gethex+0x2c0>
   8cfe4:	2825883a 	mov	r18,r5
   8cfe8:	d8000015 	stw	zero,0(sp)
   8cfec:	003f8106 	br	8cdf4 <__gethex+0xe4>
   8cff0:	00800c04 	movi	r2,48
   8cff4:	20800e1e 	bne	r4,r2,8d030 <__gethex+0x320>
   8cff8:	2007883a 	mov	r3,r4
   8cffc:	900b883a 	mov	r5,r18
   8d000:	29400044 	addi	r5,r5,1
   8d004:	29000003 	ldbu	r4,0(r5)
   8d008:	20803fcc 	andi	r2,r4,255
   8d00c:	10fffc26 	beq	r2,r3,8d000 <__gethex+0x2f0>
   8d010:	14c5883a 	add	r2,r2,r19
   8d014:	10c00003 	ldbu	r3,0(r2)
   8d018:	1800071e 	bne	r3,zero,8d038 <__gethex+0x328>
   8d01c:	01c00044 	movi	r7,1
   8d020:	900d883a 	mov	r6,r18
   8d024:	282b883a 	mov	r21,r5
   8d028:	382d883a 	mov	r22,r7
   8d02c:	003f5f06 	br	8cdac <__gethex+0x9c>
   8d030:	91000003 	ldbu	r4,0(r18)
   8d034:	900b883a 	mov	r5,r18
   8d038:	900d883a 	mov	r6,r18
   8d03c:	282b883a 	mov	r21,r5
   8d040:	01c00044 	movi	r7,1
   8d044:	002d883a 	mov	r22,zero
   8d048:	003f5806 	br	8cdac <__gethex+0x9c>
   8d04c:	9545c83a 	sub	r2,r18,r21
   8d050:	10bfffc4 	addi	r2,r2,-1
   8d054:	00c001c4 	movi	r3,7
   8d058:	1880770e 	bge	r3,r2,8d238 <__gethex+0x528>
   8d05c:	000b883a 	mov	r5,zero
   8d060:	1005d07a 	srai	r2,r2,1
   8d064:	29400044 	addi	r5,r5,1
   8d068:	18bffd16 	blt	r3,r2,8d060 <__gethex+0x350>
   8d06c:	d9000117 	ldw	r4,4(sp)
   8d070:	0089a040 	call	89a04 <_Balloc>
   8d074:	1029883a 	mov	r20,r2
   8d078:	15800504 	addi	r22,r2,20
   8d07c:	ac80562e 	bgeu	r21,r18,8d1d8 <__gethex+0x4c8>
   8d080:	900b883a 	mov	r5,r18
   8d084:	b011883a 	mov	r8,r22
   8d088:	000f883a 	mov	r7,zero
   8d08c:	0009883a 	mov	r4,zero
   8d090:	02400b84 	movi	r9,46
   8d094:	02800804 	movi	r10,32
   8d098:	297fffc4 	addi	r5,r5,-1
   8d09c:	28c00003 	ldbu	r3,0(r5)
   8d0a0:	1a400826 	beq	r3,r9,8d0c4 <__gethex+0x3b4>
   8d0a4:	380d883a 	mov	r6,r7
   8d0a8:	3a802a26 	beq	r7,r10,8d154 <__gethex+0x444>
   8d0ac:	39c00104 	addi	r7,r7,4
   8d0b0:	1cc7883a 	add	r3,r3,r19
   8d0b4:	18800003 	ldbu	r2,0(r3)
   8d0b8:	108003cc 	andi	r2,r2,15
   8d0bc:	1184983a 	sll	r2,r2,r6
   8d0c0:	2088b03a 	or	r4,r4,r2
   8d0c4:	a97ff436 	bltu	r21,r5,8d098 <__gethex+0x388>
   8d0c8:	40800104 	addi	r2,r8,4
   8d0cc:	1585c83a 	sub	r2,r2,r22
   8d0d0:	1021d0ba 	srai	r16,r2,2
   8d0d4:	41000015 	stw	r4,0(r8)
   8d0d8:	a4000415 	stw	r16,16(r20)
   8d0dc:	00894ac0 	call	894ac <__hi0bits>
   8d0e0:	d9000217 	ldw	r4,8(sp)
   8d0e4:	8006917a 	slli	r3,r16,5
   8d0e8:	24c00017 	ldw	r19,0(r4)
   8d0ec:	1885c83a 	sub	r2,r3,r2
   8d0f0:	98801f16 	blt	r19,r2,8d170 <__gethex+0x460>
   8d0f4:	14c00c16 	blt	r2,r19,8d128 <__gethex+0x418>
   8d0f8:	002b883a 	mov	r21,zero
   8d0fc:	d9000217 	ldw	r4,8(sp)
   8d100:	d8c00017 	ldw	r3,0(sp)
   8d104:	20800217 	ldw	r2,8(r4)
   8d108:	10c0360e 	bge	r2,r3,8d1e4 <__gethex+0x4d4>
   8d10c:	d9000117 	ldw	r4,4(sp)
   8d110:	a00b883a 	mov	r5,r20
   8d114:	048028c4 	movi	r18,163
   8d118:	00894840 	call	89484 <_Bfree>
   8d11c:	d9000f17 	ldw	r4,60(sp)
   8d120:	20000015 	stw	zero,0(r4)
   8d124:	003f3e06 	br	8ce20 <__gethex+0x110>
   8d128:	d9000117 	ldw	r4,4(sp)
   8d12c:	98a1c83a 	sub	r16,r19,r2
   8d130:	a00b883a 	mov	r5,r20
   8d134:	800d883a 	mov	r6,r16
   8d138:	0089dc80 	call	89dc8 <__lshift>
   8d13c:	d8c00017 	ldw	r3,0(sp)
   8d140:	1029883a 	mov	r20,r2
   8d144:	15800504 	addi	r22,r2,20
   8d148:	1c07c83a 	sub	r3,r3,r16
   8d14c:	d8c00015 	stw	r3,0(sp)
   8d150:	003fe906 	br	8d0f8 <__gethex+0x3e8>
   8d154:	41000015 	stw	r4,0(r8)
   8d158:	28c00003 	ldbu	r3,0(r5)
   8d15c:	01c00104 	movi	r7,4
   8d160:	000d883a 	mov	r6,zero
   8d164:	41d1883a 	add	r8,r8,r7
   8d168:	0009883a 	mov	r4,zero
   8d16c:	003fd006 	br	8d0b0 <__gethex+0x3a0>
   8d170:	14e1c83a 	sub	r16,r2,r19
   8d174:	a009883a 	mov	r4,r20
   8d178:	800b883a 	mov	r5,r16
   8d17c:	008997c0 	call	8997c <__any_on>
   8d180:	1000081e 	bne	r2,zero,8d1a4 <__gethex+0x494>
   8d184:	002b883a 	mov	r21,zero
   8d188:	a009883a 	mov	r4,r20
   8d18c:	800b883a 	mov	r5,r16
   8d190:	008cc600 	call	8cc60 <rshift>
   8d194:	d8800017 	ldw	r2,0(sp)
   8d198:	1405883a 	add	r2,r2,r16
   8d19c:	d8800015 	stw	r2,0(sp)
   8d1a0:	003fd606 	br	8d0fc <__gethex+0x3ec>
   8d1a4:	817fffc4 	addi	r5,r16,-1
   8d1a8:	2805d17a 	srai	r2,r5,5
   8d1ac:	290007cc 	andi	r4,r5,31
   8d1b0:	01800044 	movi	r6,1
   8d1b4:	1085883a 	add	r2,r2,r2
   8d1b8:	1085883a 	add	r2,r2,r2
   8d1bc:	1585883a 	add	r2,r2,r22
   8d1c0:	3108983a 	sll	r4,r6,r4
   8d1c4:	10c00017 	ldw	r3,0(r2)
   8d1c8:	20c8703a 	and	r4,r4,r3
   8d1cc:	20001e1e 	bne	r4,zero,8d248 <__gethex+0x538>
   8d1d0:	302b883a 	mov	r21,r6
   8d1d4:	003fec06 	br	8d188 <__gethex+0x478>
   8d1d8:	b011883a 	mov	r8,r22
   8d1dc:	0009883a 	mov	r4,zero
   8d1e0:	003fb906 	br	8d0c8 <__gethex+0x3b8>
   8d1e4:	d8800217 	ldw	r2,8(sp)
   8d1e8:	d8c00017 	ldw	r3,0(sp)
   8d1ec:	11000117 	ldw	r4,4(r2)
   8d1f0:	19001c16 	blt	r3,r4,8d264 <__gethex+0x554>
   8d1f4:	04800044 	movi	r18,1
   8d1f8:	a8000926 	beq	r21,zero,8d220 <__gethex+0x510>
   8d1fc:	d8c00217 	ldw	r3,8(sp)
   8d200:	00800084 	movi	r2,2
   8d204:	19000317 	ldw	r4,12(r3)
   8d208:	20809826 	beq	r4,r2,8d46c <__gethex+0x75c>
   8d20c:	008000c4 	movi	r2,3
   8d210:	20805b26 	beq	r4,r2,8d380 <__gethex+0x670>
   8d214:	00800044 	movi	r2,1
   8d218:	20804326 	beq	r4,r2,8d328 <__gethex+0x618>
   8d21c:	94800414 	ori	r18,r18,16
   8d220:	d9000f17 	ldw	r4,60(sp)
   8d224:	d8800017 	ldw	r2,0(sp)
   8d228:	d8c00317 	ldw	r3,12(sp)
   8d22c:	25000015 	stw	r20,0(r4)
   8d230:	18800015 	stw	r2,0(r3)
   8d234:	003efa06 	br	8ce20 <__gethex+0x110>
   8d238:	000b883a 	mov	r5,zero
   8d23c:	003f8b06 	br	8d06c <__gethex+0x35c>
   8d240:	d8000015 	stw	zero,0(sp)
   8d244:	003eea06 	br	8cdf0 <__gethex+0xe0>
   8d248:	3140180e 	bge	r6,r5,8d2ac <__gethex+0x59c>
   8d24c:	a009883a 	mov	r4,r20
   8d250:	817fff84 	addi	r5,r16,-2
   8d254:	008997c0 	call	8997c <__any_on>
   8d258:	10001426 	beq	r2,zero,8d2ac <__gethex+0x59c>
   8d25c:	054000c4 	movi	r21,3
   8d260:	003fc906 	br	8d188 <__gethex+0x478>
   8d264:	d8800017 	ldw	r2,0(sp)
   8d268:	20a3c83a 	sub	r17,r4,r2
   8d26c:	8cc01116 	blt	r17,r19,8d2b4 <__gethex+0x5a4>
   8d270:	d8800217 	ldw	r2,8(sp)
   8d274:	10c00317 	ldw	r3,12(r2)
   8d278:	00800084 	movi	r2,2
   8d27c:	18809426 	beq	r3,r2,8d4d0 <__gethex+0x7c0>
   8d280:	008000c4 	movi	r2,3
   8d284:	18808f26 	beq	r3,r2,8d4c4 <__gethex+0x7b4>
   8d288:	00800044 	movi	r2,1
   8d28c:	18807c26 	beq	r3,r2,8d480 <__gethex+0x770>
   8d290:	d9000117 	ldw	r4,4(sp)
   8d294:	a00b883a 	mov	r5,r20
   8d298:	04801404 	movi	r18,80
   8d29c:	00894840 	call	89484 <_Bfree>
   8d2a0:	d9000f17 	ldw	r4,60(sp)
   8d2a4:	20000015 	stw	zero,0(r4)
   8d2a8:	003edd06 	br	8ce20 <__gethex+0x110>
   8d2ac:	05400084 	movi	r21,2
   8d2b0:	003fb506 	br	8d188 <__gethex+0x478>
   8d2b4:	8c3fffc4 	addi	r16,r17,-1
   8d2b8:	a8001526 	beq	r21,zero,8d310 <__gethex+0x600>
   8d2bc:	05400044 	movi	r21,1
   8d2c0:	8005d17a 	srai	r2,r16,5
   8d2c4:	814007cc 	andi	r5,r16,31
   8d2c8:	00c00044 	movi	r3,1
   8d2cc:	1085883a 	add	r2,r2,r2
   8d2d0:	1085883a 	add	r2,r2,r2
   8d2d4:	1585883a 	add	r2,r2,r22
   8d2d8:	1946983a 	sll	r3,r3,r5
   8d2dc:	11000017 	ldw	r4,0(r2)
   8d2e0:	1906703a 	and	r3,r3,r4
   8d2e4:	18000126 	beq	r3,zero,8d2ec <__gethex+0x5dc>
   8d2e8:	ad400094 	ori	r21,r21,2
   8d2ec:	880b883a 	mov	r5,r17
   8d2f0:	a009883a 	mov	r4,r20
   8d2f4:	008cc600 	call	8cc60 <rshift>
   8d2f8:	d8800217 	ldw	r2,8(sp)
   8d2fc:	9c67c83a 	sub	r19,r19,r17
   8d300:	04800084 	movi	r18,2
   8d304:	10800117 	ldw	r2,4(r2)
   8d308:	d8800015 	stw	r2,0(sp)
   8d30c:	003fba06 	br	8d1f8 <__gethex+0x4e8>
   8d310:	043feb0e 	bge	zero,r16,8d2c0 <__gethex+0x5b0>
   8d314:	a009883a 	mov	r4,r20
   8d318:	800b883a 	mov	r5,r16
   8d31c:	008997c0 	call	8997c <__any_on>
   8d320:	102b883a 	mov	r21,r2
   8d324:	003fe606 	br	8d2c0 <__gethex+0x5b0>
   8d328:	a880008c 	andi	r2,r21,2
   8d32c:	103fbb26 	beq	r2,zero,8d21c <__gethex+0x50c>
   8d330:	b0800017 	ldw	r2,0(r22)
   8d334:	a884b03a 	or	r2,r21,r2
   8d338:	1104703a 	and	r2,r2,r4
   8d33c:	103fb726 	beq	r2,zero,8d21c <__gethex+0x50c>
   8d340:	a4000417 	ldw	r16,16(r20)
   8d344:	b007883a 	mov	r3,r22
   8d348:	017fffc4 	movi	r5,-1
   8d34c:	8405883a 	add	r2,r16,r16
   8d350:	10ab883a 	add	r21,r2,r2
   8d354:	802f883a 	mov	r23,r16
   8d358:	b549883a 	add	r4,r22,r21
   8d35c:	00000306 	br	8d36c <__gethex+0x65c>
   8d360:	18000015 	stw	zero,0(r3)
   8d364:	18c00104 	addi	r3,r3,4
   8d368:	1900082e 	bgeu	r3,r4,8d38c <__gethex+0x67c>
   8d36c:	18800017 	ldw	r2,0(r3)
   8d370:	117ffb26 	beq	r2,r5,8d360 <__gethex+0x650>
   8d374:	10800044 	addi	r2,r2,1
   8d378:	18800015 	stw	r2,0(r3)
   8d37c:	00001e06 	br	8d3f8 <__gethex+0x6e8>
   8d380:	d8801017 	ldw	r2,64(sp)
   8d384:	103fa526 	beq	r2,zero,8d21c <__gethex+0x50c>
   8d388:	003fed06 	br	8d340 <__gethex+0x630>
   8d38c:	a0800217 	ldw	r2,8(r20)
   8d390:	80801216 	blt	r16,r2,8d3dc <__gethex+0x6cc>
   8d394:	a1400117 	ldw	r5,4(r20)
   8d398:	d9000117 	ldw	r4,4(sp)
   8d39c:	29400044 	addi	r5,r5,1
   8d3a0:	0089a040 	call	89a04 <_Balloc>
   8d3a4:	a1800417 	ldw	r6,16(r20)
   8d3a8:	a1400304 	addi	r5,r20,12
   8d3ac:	11000304 	addi	r4,r2,12
   8d3b0:	318d883a 	add	r6,r6,r6
   8d3b4:	318d883a 	add	r6,r6,r6
   8d3b8:	31800204 	addi	r6,r6,8
   8d3bc:	1023883a 	mov	r17,r2
   8d3c0:	008218c0 	call	8218c <memcpy>
   8d3c4:	d9000117 	ldw	r4,4(sp)
   8d3c8:	a00b883a 	mov	r5,r20
   8d3cc:	8d800504 	addi	r22,r17,20
   8d3d0:	00894840 	call	89484 <_Bfree>
   8d3d4:	8c000417 	ldw	r16,16(r17)
   8d3d8:	8829883a 	mov	r20,r17
   8d3dc:	8405883a 	add	r2,r16,r16
   8d3e0:	1085883a 	add	r2,r2,r2
   8d3e4:	1505883a 	add	r2,r2,r20
   8d3e8:	84000044 	addi	r16,r16,1
   8d3ec:	00c00044 	movi	r3,1
   8d3f0:	10c00515 	stw	r3,20(r2)
   8d3f4:	a4000415 	stw	r16,16(r20)
   8d3f8:	00800084 	movi	r2,2
   8d3fc:	90801526 	beq	r18,r2,8d454 <__gethex+0x744>
   8d400:	bc000a16 	blt	r23,r16,8d42c <__gethex+0x71c>
   8d404:	9c0007cc 	andi	r16,r19,31
   8d408:	8000021e 	bne	r16,zero,8d414 <__gethex+0x704>
   8d40c:	94800814 	ori	r18,r18,32
   8d410:	003f8306 	br	8d220 <__gethex+0x510>
   8d414:	b545883a 	add	r2,r22,r21
   8d418:	113fff17 	ldw	r4,-4(r2)
   8d41c:	00894ac0 	call	894ac <__hi0bits>
   8d420:	00c00804 	movi	r3,32
   8d424:	1c07c83a 	sub	r3,r3,r16
   8d428:	10fff80e 	bge	r2,r3,8d40c <__gethex+0x6fc>
   8d42c:	a009883a 	mov	r4,r20
   8d430:	01400044 	movi	r5,1
   8d434:	008cc600 	call	8cc60 <rshift>
   8d438:	d9000217 	ldw	r4,8(sp)
   8d43c:	d8c00017 	ldw	r3,0(sp)
   8d440:	20800217 	ldw	r2,8(r4)
   8d444:	18c00044 	addi	r3,r3,1
   8d448:	d8c00015 	stw	r3,0(sp)
   8d44c:	10ff2f16 	blt	r2,r3,8d10c <__gethex+0x3fc>
   8d450:	003fee06 	br	8d40c <__gethex+0x6fc>
   8d454:	d8c00217 	ldw	r3,8(sp)
   8d458:	18800017 	ldw	r2,0(r3)
   8d45c:	10bfffc4 	addi	r2,r2,-1
   8d460:	98801e26 	beq	r19,r2,8d4dc <__gethex+0x7cc>
   8d464:	04800884 	movi	r18,34
   8d468:	003f6d06 	br	8d220 <__gethex+0x510>
   8d46c:	d9001017 	ldw	r4,64(sp)
   8d470:	00800044 	movi	r2,1
   8d474:	1105c83a 	sub	r2,r2,r4
   8d478:	103f6826 	beq	r2,zero,8d21c <__gethex+0x50c>
   8d47c:	003fb006 	br	8d340 <__gethex+0x630>
   8d480:	9c7f831e 	bne	r19,r17,8d290 <__gethex+0x580>
   8d484:	1cc0060e 	bge	r3,r19,8d4a0 <__gethex+0x790>
   8d488:	98cbc83a 	sub	r5,r19,r3
   8d48c:	a009883a 	mov	r4,r20
   8d490:	008997c0 	call	8997c <__any_on>
   8d494:	103f7e26 	beq	r2,zero,8d290 <__gethex+0x580>
   8d498:	d8c00217 	ldw	r3,8(sp)
   8d49c:	19000117 	ldw	r4,4(r3)
   8d4a0:	d8800317 	ldw	r2,12(sp)
   8d4a4:	d8c00f17 	ldw	r3,60(sp)
   8d4a8:	04000044 	movi	r16,1
   8d4ac:	11000015 	stw	r4,0(r2)
   8d4b0:	04801884 	movi	r18,98
   8d4b4:	b4000015 	stw	r16,0(r22)
   8d4b8:	1d000015 	stw	r20,0(r3)
   8d4bc:	a4000415 	stw	r16,16(r20)
   8d4c0:	003e5706 	br	8ce20 <__gethex+0x110>
   8d4c4:	d8801017 	ldw	r2,64(sp)
   8d4c8:	103f7126 	beq	r2,zero,8d290 <__gethex+0x580>
   8d4cc:	003ff406 	br	8d4a0 <__gethex+0x790>
   8d4d0:	d8c01017 	ldw	r3,64(sp)
   8d4d4:	183ff226 	beq	r3,zero,8d4a0 <__gethex+0x790>
   8d4d8:	003f6d06 	br	8d290 <__gethex+0x580>
   8d4dc:	9805d17a 	srai	r2,r19,5
   8d4e0:	994007cc 	andi	r5,r19,31
   8d4e4:	00c00044 	movi	r3,1
   8d4e8:	1085883a 	add	r2,r2,r2
   8d4ec:	1085883a 	add	r2,r2,r2
   8d4f0:	1585883a 	add	r2,r2,r22
   8d4f4:	1946983a 	sll	r3,r3,r5
   8d4f8:	11000017 	ldw	r4,0(r2)
   8d4fc:	1906703a 	and	r3,r3,r4
   8d500:	183fd826 	beq	r3,zero,8d464 <__gethex+0x754>
   8d504:	04800844 	movi	r18,33
   8d508:	003f4506 	br	8d220 <__gethex+0x510>

0008d50c <L_shift>:
   8d50c:	00800204 	movi	r2,8
   8d510:	1185c83a 	sub	r2,r2,r6
   8d514:	1085883a 	add	r2,r2,r2
   8d518:	21c00017 	ldw	r7,0(r4)
   8d51c:	1093883a 	add	r9,r2,r2
   8d520:	00800804 	movi	r2,32
   8d524:	200d883a 	mov	r6,r4
   8d528:	1251c83a 	sub	r8,r2,r9
   8d52c:	31800104 	addi	r6,r6,4
   8d530:	3805883a 	mov	r2,r7
   8d534:	31c00017 	ldw	r7,0(r6)
   8d538:	3a08983a 	sll	r4,r7,r8
   8d53c:	3a46d83a 	srl	r3,r7,r9
   8d540:	1104b03a 	or	r2,r2,r4
   8d544:	180f883a 	mov	r7,r3
   8d548:	30bfff15 	stw	r2,-4(r6)
   8d54c:	30c00015 	stw	r3,0(r6)
   8d550:	317ff636 	bltu	r6,r5,8d52c <L_shift+0x20>
   8d554:	f800283a 	ret

0008d558 <__hexnan>:
   8d558:	defff404 	addi	sp,sp,-48
   8d55c:	dd800815 	stw	r22,32(sp)
   8d560:	05800274 	movhi	r22,9
   8d564:	b59fd204 	addi	r22,r22,32584
   8d568:	b0800c03 	ldbu	r2,48(r22)
   8d56c:	dcc00515 	stw	r19,20(sp)
   8d570:	dc000215 	stw	r16,8(sp)
   8d574:	dfc00b15 	stw	ra,44(sp)
   8d578:	df000a15 	stw	fp,40(sp)
   8d57c:	ddc00915 	stw	r23,36(sp)
   8d580:	dd400715 	stw	r21,28(sp)
   8d584:	dd000615 	stw	r20,24(sp)
   8d588:	dc800415 	stw	r18,16(sp)
   8d58c:	dc400315 	stw	r17,12(sp)
   8d590:	d9000115 	stw	r4,4(sp)
   8d594:	2821883a 	mov	r16,r5
   8d598:	3027883a 	mov	r19,r6
   8d59c:	10007426 	beq	r2,zero,8d770 <__hexnan+0x218>
   8d5a0:	80c00017 	ldw	r3,0(r16)
   8d5a4:	1805d17a 	srai	r2,r3,5
   8d5a8:	18c007cc 	andi	r3,r3,31
   8d5ac:	1839003a 	cmpeq	fp,r3,zero
   8d5b0:	1085883a 	add	r2,r2,r2
   8d5b4:	1085883a 	add	r2,r2,r2
   8d5b8:	d8c00015 	stw	r3,0(sp)
   8d5bc:	14c5883a 	add	r2,r2,r19
   8d5c0:	e000011e 	bne	fp,zero,8d5c8 <__hexnan+0x70>
   8d5c4:	10800104 	addi	r2,r2,4
   8d5c8:	d8c00117 	ldw	r3,4(sp)
   8d5cc:	153fff04 	addi	r20,r2,-4
   8d5d0:	a021883a 	mov	r16,r20
   8d5d4:	1c400017 	ldw	r17,0(r3)
   8d5d8:	a02b883a 	mov	r21,r20
   8d5dc:	0025883a 	mov	r18,zero
   8d5e0:	002f883a 	mov	r23,zero
   8d5e4:	000d883a 	mov	r6,zero
   8d5e8:	103fff15 	stw	zero,-4(r2)
   8d5ec:	8c400044 	addi	r17,r17,1
   8d5f0:	89000003 	ldbu	r4,0(r17)
   8d5f4:	20000e26 	beq	r4,zero,8d630 <__hexnan+0xd8>
   8d5f8:	2585883a 	add	r2,r4,r22
   8d5fc:	10c00003 	ldbu	r3,0(r2)
   8d600:	18002e1e 	bne	r3,zero,8d6bc <__hexnan+0x164>
   8d604:	00800804 	movi	r2,32
   8d608:	11005536 	bltu	r2,r4,8d760 <__hexnan+0x208>
   8d60c:	bcbff70e 	bge	r23,r18,8d5ec <__hexnan+0x94>
   8d610:	8540022e 	bgeu	r16,r21,8d61c <__hexnan+0xc4>
   8d614:	008001c4 	movi	r2,7
   8d618:	11803c0e 	bge	r2,r6,8d70c <__hexnan+0x1b4>
   8d61c:	9c003536 	bltu	r19,r16,8d6f4 <__hexnan+0x19c>
   8d620:	8c400044 	addi	r17,r17,1
   8d624:	89000003 	ldbu	r4,0(r17)
   8d628:	01800204 	movi	r6,8
   8d62c:	203ff21e 	bne	r4,zero,8d5f8 <__hexnan+0xa0>
   8d630:	90004d26 	beq	r18,zero,8d768 <__hexnan+0x210>
   8d634:	85404336 	bltu	r16,r21,8d744 <__hexnan+0x1ec>
   8d638:	9c00382e 	bgeu	r19,r16,8d71c <__hexnan+0x1c4>
   8d63c:	9807883a 	mov	r3,r19
   8d640:	80800017 	ldw	r2,0(r16)
   8d644:	84000104 	addi	r16,r16,4
   8d648:	18800015 	stw	r2,0(r3)
   8d64c:	18c00104 	addi	r3,r3,4
   8d650:	a43ffb2e 	bgeu	r20,r16,8d640 <__hexnan+0xe8>
   8d654:	18000015 	stw	zero,0(r3)
   8d658:	18c00104 	addi	r3,r3,4
   8d65c:	a0fffd2e 	bgeu	r20,r3,8d654 <__hexnan+0xfc>
   8d660:	a0800017 	ldw	r2,0(r20)
   8d664:	1000071e 	bne	r2,zero,8d684 <__hexnan+0x12c>
   8d668:	9d004326 	beq	r19,r20,8d778 <__hexnan+0x220>
   8d66c:	a007883a 	mov	r3,r20
   8d670:	00000106 	br	8d678 <__hexnan+0x120>
   8d674:	98c04026 	beq	r19,r3,8d778 <__hexnan+0x220>
   8d678:	18ffff04 	addi	r3,r3,-4
   8d67c:	18800017 	ldw	r2,0(r3)
   8d680:	103ffc26 	beq	r2,zero,8d674 <__hexnan+0x11c>
   8d684:	00c00144 	movi	r3,5
   8d688:	1805883a 	mov	r2,r3
   8d68c:	dfc00b17 	ldw	ra,44(sp)
   8d690:	df000a17 	ldw	fp,40(sp)
   8d694:	ddc00917 	ldw	r23,36(sp)
   8d698:	dd800817 	ldw	r22,32(sp)
   8d69c:	dd400717 	ldw	r21,28(sp)
   8d6a0:	dd000617 	ldw	r20,24(sp)
   8d6a4:	dcc00517 	ldw	r19,20(sp)
   8d6a8:	dc800417 	ldw	r18,16(sp)
   8d6ac:	dc400317 	ldw	r17,12(sp)
   8d6b0:	dc000217 	ldw	r16,8(sp)
   8d6b4:	dec00c04 	addi	sp,sp,48
   8d6b8:	f800283a 	ret
   8d6bc:	31800044 	addi	r6,r6,1
   8d6c0:	00800204 	movi	r2,8
   8d6c4:	94800044 	addi	r18,r18,1
   8d6c8:	1180040e 	bge	r2,r6,8d6dc <__hexnan+0x184>
   8d6cc:	9c3fc72e 	bgeu	r19,r16,8d5ec <__hexnan+0x94>
   8d6d0:	843fff04 	addi	r16,r16,-4
   8d6d4:	80000015 	stw	zero,0(r16)
   8d6d8:	01800044 	movi	r6,1
   8d6dc:	80800017 	ldw	r2,0(r16)
   8d6e0:	18c003cc 	andi	r3,r3,15
   8d6e4:	1004913a 	slli	r2,r2,4
   8d6e8:	10c4b03a 	or	r2,r2,r3
   8d6ec:	80800015 	stw	r2,0(r16)
   8d6f0:	003fbe06 	br	8d5ec <__hexnan+0x94>
   8d6f4:	843fff04 	addi	r16,r16,-4
   8d6f8:	802b883a 	mov	r21,r16
   8d6fc:	902f883a 	mov	r23,r18
   8d700:	000d883a 	mov	r6,zero
   8d704:	80000015 	stw	zero,0(r16)
   8d708:	003fb806 	br	8d5ec <__hexnan+0x94>
   8d70c:	8009883a 	mov	r4,r16
   8d710:	a80b883a 	mov	r5,r21
   8d714:	008d50c0 	call	8d50c <L_shift>
   8d718:	003fc006 	br	8d61c <__hexnan+0xc4>
   8d71c:	e03fd01e 	bne	fp,zero,8d660 <__hexnan+0x108>
   8d720:	d8c00017 	ldw	r3,0(sp)
   8d724:	00800804 	movi	r2,32
   8d728:	10c5c83a 	sub	r2,r2,r3
   8d72c:	00ffffc4 	movi	r3,-1
   8d730:	1886d83a 	srl	r3,r3,r2
   8d734:	a0800017 	ldw	r2,0(r20)
   8d738:	10c4703a 	and	r2,r2,r3
   8d73c:	a0800015 	stw	r2,0(r20)
   8d740:	003fc806 	br	8d664 <__hexnan+0x10c>
   8d744:	008001c4 	movi	r2,7
   8d748:	11bfbb16 	blt	r2,r6,8d638 <__hexnan+0xe0>
   8d74c:	a80b883a 	mov	r5,r21
   8d750:	8009883a 	mov	r4,r16
   8d754:	008d50c0 	call	8d50c <L_shift>
   8d758:	9c3ff02e 	bgeu	r19,r16,8d71c <__hexnan+0x1c4>
   8d75c:	003fb706 	br	8d63c <__hexnan+0xe4>
   8d760:	00800a44 	movi	r2,41
   8d764:	20800826 	beq	r4,r2,8d788 <__hexnan+0x230>
   8d768:	00c00104 	movi	r3,4
   8d76c:	003fc606 	br	8d688 <__hexnan+0x130>
   8d770:	008cbf80 	call	8cbf8 <__hexdig_init>
   8d774:	003f8a06 	br	8d5a0 <__hexnan+0x48>
   8d778:	00800044 	movi	r2,1
   8d77c:	00c00144 	movi	r3,5
   8d780:	98800015 	stw	r2,0(r19)
   8d784:	003fc006 	br	8d688 <__hexnan+0x130>
   8d788:	903ff726 	beq	r18,zero,8d768 <__hexnan+0x210>
   8d78c:	d8c00117 	ldw	r3,4(sp)
   8d790:	88800044 	addi	r2,r17,1
   8d794:	18800015 	stw	r2,0(r3)
   8d798:	857fa72e 	bgeu	r16,r21,8d638 <__hexnan+0xe0>
   8d79c:	003fe906 	br	8d744 <__hexnan+0x1ec>

0008d7a0 <__muldi3>:
   8d7a0:	defff204 	addi	sp,sp,-56
   8d7a4:	df000c15 	stw	fp,48(sp)
   8d7a8:	3038d43a 	srli	fp,r6,16
   8d7ac:	dd000815 	stw	r20,32(sp)
   8d7b0:	dc400515 	stw	r17,20(sp)
   8d7b4:	2028d43a 	srli	r20,r4,16
   8d7b8:	247fffcc 	andi	r17,r4,65535
   8d7bc:	dc000415 	stw	r16,16(sp)
   8d7c0:	343fffcc 	andi	r16,r6,65535
   8d7c4:	dcc00715 	stw	r19,28(sp)
   8d7c8:	d9000015 	stw	r4,0(sp)
   8d7cc:	2827883a 	mov	r19,r5
   8d7d0:	8809883a 	mov	r4,r17
   8d7d4:	d9400115 	stw	r5,4(sp)
   8d7d8:	800b883a 	mov	r5,r16
   8d7dc:	d9800215 	stw	r6,8(sp)
   8d7e0:	dfc00d15 	stw	ra,52(sp)
   8d7e4:	d9c00315 	stw	r7,12(sp)
   8d7e8:	dd800a15 	stw	r22,40(sp)
   8d7ec:	dd400915 	stw	r21,36(sp)
   8d7f0:	302d883a 	mov	r22,r6
   8d7f4:	ddc00b15 	stw	r23,44(sp)
   8d7f8:	dc800615 	stw	r18,24(sp)
   8d7fc:	0080ba00 	call	80ba0 <__mulsi3>
   8d800:	8809883a 	mov	r4,r17
   8d804:	e00b883a 	mov	r5,fp
   8d808:	102b883a 	mov	r21,r2
   8d80c:	0080ba00 	call	80ba0 <__mulsi3>
   8d810:	800b883a 	mov	r5,r16
   8d814:	a009883a 	mov	r4,r20
   8d818:	1023883a 	mov	r17,r2
   8d81c:	0080ba00 	call	80ba0 <__mulsi3>
   8d820:	a009883a 	mov	r4,r20
   8d824:	e00b883a 	mov	r5,fp
   8d828:	1021883a 	mov	r16,r2
   8d82c:	0080ba00 	call	80ba0 <__mulsi3>
   8d830:	a8ffffcc 	andi	r3,r21,65535
   8d834:	a82ad43a 	srli	r21,r21,16
   8d838:	8c23883a 	add	r17,r17,r16
   8d83c:	1011883a 	mov	r8,r2
   8d840:	ac6b883a 	add	r21,r21,r17
   8d844:	a804943a 	slli	r2,r21,16
   8d848:	b009883a 	mov	r4,r22
   8d84c:	980b883a 	mov	r5,r19
   8d850:	10c7883a 	add	r3,r2,r3
   8d854:	a812d43a 	srli	r9,r21,16
   8d858:	180d883a 	mov	r6,r3
   8d85c:	ac00022e 	bgeu	r21,r16,8d868 <__muldi3+0xc8>
   8d860:	00800074 	movhi	r2,1
   8d864:	4091883a 	add	r8,r8,r2
   8d868:	4267883a 	add	r19,r8,r9
   8d86c:	302d883a 	mov	r22,r6
   8d870:	0080ba00 	call	80ba0 <__mulsi3>
   8d874:	d9400317 	ldw	r5,12(sp)
   8d878:	d9000017 	ldw	r4,0(sp)
   8d87c:	1023883a 	mov	r17,r2
   8d880:	0080ba00 	call	80ba0 <__mulsi3>
   8d884:	14cb883a 	add	r5,r2,r19
   8d888:	894b883a 	add	r5,r17,r5
   8d88c:	b005883a 	mov	r2,r22
   8d890:	2807883a 	mov	r3,r5
   8d894:	dfc00d17 	ldw	ra,52(sp)
   8d898:	df000c17 	ldw	fp,48(sp)
   8d89c:	ddc00b17 	ldw	r23,44(sp)
   8d8a0:	dd800a17 	ldw	r22,40(sp)
   8d8a4:	dd400917 	ldw	r21,36(sp)
   8d8a8:	dd000817 	ldw	r20,32(sp)
   8d8ac:	dcc00717 	ldw	r19,28(sp)
   8d8b0:	dc800617 	ldw	r18,24(sp)
   8d8b4:	dc400517 	ldw	r17,20(sp)
   8d8b8:	dc000417 	ldw	r16,16(sp)
   8d8bc:	dec00e04 	addi	sp,sp,56
   8d8c0:	f800283a 	ret

0008d8c4 <__fixunsdfsi>:
   8d8c4:	defffb04 	addi	sp,sp,-20
   8d8c8:	dc400115 	stw	r17,4(sp)
   8d8cc:	dc000015 	stw	r16,0(sp)
   8d8d0:	04507834 	movhi	r17,16864
   8d8d4:	0021883a 	mov	r16,zero
   8d8d8:	800d883a 	mov	r6,r16
   8d8dc:	880f883a 	mov	r7,r17
   8d8e0:	dcc00315 	stw	r19,12(sp)
   8d8e4:	dc800215 	stw	r18,8(sp)
   8d8e8:	2827883a 	mov	r19,r5
   8d8ec:	2025883a 	mov	r18,r4
   8d8f0:	dfc00415 	stw	ra,16(sp)
   8d8f4:	008f4540 	call	8f454 <__gedf2>
   8d8f8:	000d883a 	mov	r6,zero
   8d8fc:	880f883a 	mov	r7,r17
   8d900:	980b883a 	mov	r5,r19
   8d904:	9009883a 	mov	r4,r18
   8d908:	10000d16 	blt	r2,zero,8d940 <__fixunsdfsi+0x7c>
   8d90c:	008ebac0 	call	8ebac <__subdf3>
   8d910:	180b883a 	mov	r5,r3
   8d914:	1009883a 	mov	r4,r2
   8d918:	008f6e40 	call	8f6e4 <__fixdfsi>
   8d91c:	00e00034 	movhi	r3,32768
   8d920:	10c5883a 	add	r2,r2,r3
   8d924:	dfc00417 	ldw	ra,16(sp)
   8d928:	dcc00317 	ldw	r19,12(sp)
   8d92c:	dc800217 	ldw	r18,8(sp)
   8d930:	dc400117 	ldw	r17,4(sp)
   8d934:	dc000017 	ldw	r16,0(sp)
   8d938:	dec00504 	addi	sp,sp,20
   8d93c:	f800283a 	ret
   8d940:	980b883a 	mov	r5,r19
   8d944:	9009883a 	mov	r4,r18
   8d948:	008f6e40 	call	8f6e4 <__fixdfsi>
   8d94c:	dfc00417 	ldw	ra,16(sp)
   8d950:	dcc00317 	ldw	r19,12(sp)
   8d954:	dc800217 	ldw	r18,8(sp)
   8d958:	dc400117 	ldw	r17,4(sp)
   8d95c:	dc000017 	ldw	r16,0(sp)
   8d960:	dec00504 	addi	sp,sp,20
   8d964:	f800283a 	ret

0008d968 <__udivdi3>:
   8d968:	defff104 	addi	sp,sp,-60
   8d96c:	0015883a 	mov	r10,zero
   8d970:	2005883a 	mov	r2,r4
   8d974:	3011883a 	mov	r8,r6
   8d978:	df000d15 	stw	fp,52(sp)
   8d97c:	dd400a15 	stw	r21,40(sp)
   8d980:	dcc00815 	stw	r19,32(sp)
   8d984:	dfc00e15 	stw	ra,56(sp)
   8d988:	ddc00c15 	stw	r23,48(sp)
   8d98c:	dd800b15 	stw	r22,44(sp)
   8d990:	dd000915 	stw	r20,36(sp)
   8d994:	dc800715 	stw	r18,28(sp)
   8d998:	dc400615 	stw	r17,24(sp)
   8d99c:	dc000515 	stw	r16,20(sp)
   8d9a0:	da800315 	stw	r10,12(sp)
   8d9a4:	4027883a 	mov	r19,r8
   8d9a8:	1039883a 	mov	fp,r2
   8d9ac:	282b883a 	mov	r21,r5
   8d9b0:	da800415 	stw	r10,16(sp)
   8d9b4:	3800401e 	bne	r7,zero,8dab8 <__udivdi3+0x150>
   8d9b8:	2a006536 	bltu	r5,r8,8db50 <__udivdi3+0x1e8>
   8d9bc:	4000b526 	beq	r8,zero,8dc94 <__udivdi3+0x32c>
   8d9c0:	00bfffd4 	movui	r2,65535
   8d9c4:	14c0ad36 	bltu	r2,r19,8dc7c <__udivdi3+0x314>
   8d9c8:	00803fc4 	movi	r2,255
   8d9cc:	14c15e36 	bltu	r2,r19,8df48 <__udivdi3+0x5e0>
   8d9d0:	000b883a 	mov	r5,zero
   8d9d4:	0005883a 	mov	r2,zero
   8d9d8:	9884d83a 	srl	r2,r19,r2
   8d9dc:	01000274 	movhi	r4,9
   8d9e0:	21119304 	addi	r4,r4,17996
   8d9e4:	01800804 	movi	r6,32
   8d9e8:	1105883a 	add	r2,r2,r4
   8d9ec:	10c00003 	ldbu	r3,0(r2)
   8d9f0:	28c7883a 	add	r3,r5,r3
   8d9f4:	30e9c83a 	sub	r20,r6,r3
   8d9f8:	a0010a1e 	bne	r20,zero,8de24 <__udivdi3+0x4bc>
   8d9fc:	982ed43a 	srli	r23,r19,16
   8da00:	acebc83a 	sub	r21,r21,r19
   8da04:	9dbfffcc 	andi	r22,r19,65535
   8da08:	05000044 	movi	r20,1
   8da0c:	a809883a 	mov	r4,r21
   8da10:	b80b883a 	mov	r5,r23
   8da14:	0080b900 	call	80b90 <__udivsi3>
   8da18:	100b883a 	mov	r5,r2
   8da1c:	b009883a 	mov	r4,r22
   8da20:	1021883a 	mov	r16,r2
   8da24:	0080ba00 	call	80ba0 <__mulsi3>
   8da28:	a809883a 	mov	r4,r21
   8da2c:	b80b883a 	mov	r5,r23
   8da30:	1023883a 	mov	r17,r2
   8da34:	0080b980 	call	80b98 <__umodsi3>
   8da38:	1004943a 	slli	r2,r2,16
   8da3c:	e006d43a 	srli	r3,fp,16
   8da40:	10c4b03a 	or	r2,r2,r3
   8da44:	1440042e 	bgeu	r2,r17,8da58 <__udivdi3+0xf0>
   8da48:	14c5883a 	add	r2,r2,r19
   8da4c:	843fffc4 	addi	r16,r16,-1
   8da50:	14c00136 	bltu	r2,r19,8da58 <__udivdi3+0xf0>
   8da54:	14415c36 	bltu	r2,r17,8dfc8 <__udivdi3+0x660>
   8da58:	1463c83a 	sub	r17,r2,r17
   8da5c:	8809883a 	mov	r4,r17
   8da60:	b80b883a 	mov	r5,r23
   8da64:	0080b900 	call	80b90 <__udivsi3>
   8da68:	100b883a 	mov	r5,r2
   8da6c:	b009883a 	mov	r4,r22
   8da70:	102b883a 	mov	r21,r2
   8da74:	0080ba00 	call	80ba0 <__mulsi3>
   8da78:	8809883a 	mov	r4,r17
   8da7c:	b80b883a 	mov	r5,r23
   8da80:	1025883a 	mov	r18,r2
   8da84:	0080b980 	call	80b98 <__umodsi3>
   8da88:	1004943a 	slli	r2,r2,16
   8da8c:	e0ffffcc 	andi	r3,fp,65535
   8da90:	10c4b03a 	or	r2,r2,r3
   8da94:	1480042e 	bgeu	r2,r18,8daa8 <__udivdi3+0x140>
   8da98:	9885883a 	add	r2,r19,r2
   8da9c:	ad7fffc4 	addi	r21,r21,-1
   8daa0:	14c00136 	bltu	r2,r19,8daa8 <__udivdi3+0x140>
   8daa4:	14813c36 	bltu	r2,r18,8df98 <__udivdi3+0x630>
   8daa8:	8004943a 	slli	r2,r16,16
   8daac:	a009883a 	mov	r4,r20
   8dab0:	a884b03a 	or	r2,r21,r2
   8dab4:	00001506 	br	8db0c <__udivdi3+0x1a4>
   8dab8:	380d883a 	mov	r6,r7
   8dabc:	29c06c36 	bltu	r5,r7,8dc70 <__udivdi3+0x308>
   8dac0:	00bfffd4 	movui	r2,65535
   8dac4:	11c06436 	bltu	r2,r7,8dc58 <__udivdi3+0x2f0>
   8dac8:	00803fc4 	movi	r2,255
   8dacc:	11c11836 	bltu	r2,r7,8df30 <__udivdi3+0x5c8>
   8dad0:	000b883a 	mov	r5,zero
   8dad4:	0005883a 	mov	r2,zero
   8dad8:	3084d83a 	srl	r2,r6,r2
   8dadc:	01000274 	movhi	r4,9
   8dae0:	21119304 	addi	r4,r4,17996
   8dae4:	01c00804 	movi	r7,32
   8dae8:	1105883a 	add	r2,r2,r4
   8daec:	10c00003 	ldbu	r3,0(r2)
   8daf0:	28c7883a 	add	r3,r5,r3
   8daf4:	38edc83a 	sub	r22,r7,r3
   8daf8:	b000731e 	bne	r22,zero,8dcc8 <__udivdi3+0x360>
   8dafc:	35400136 	bltu	r6,r21,8db04 <__udivdi3+0x19c>
   8db00:	e4c05b36 	bltu	fp,r19,8dc70 <__udivdi3+0x308>
   8db04:	00800044 	movi	r2,1
   8db08:	0009883a 	mov	r4,zero
   8db0c:	d8800315 	stw	r2,12(sp)
   8db10:	d9400317 	ldw	r5,12(sp)
   8db14:	2007883a 	mov	r3,r4
   8db18:	d9000415 	stw	r4,16(sp)
   8db1c:	2805883a 	mov	r2,r5
   8db20:	dfc00e17 	ldw	ra,56(sp)
   8db24:	df000d17 	ldw	fp,52(sp)
   8db28:	ddc00c17 	ldw	r23,48(sp)
   8db2c:	dd800b17 	ldw	r22,44(sp)
   8db30:	dd400a17 	ldw	r21,40(sp)
   8db34:	dd000917 	ldw	r20,36(sp)
   8db38:	dcc00817 	ldw	r19,32(sp)
   8db3c:	dc800717 	ldw	r18,28(sp)
   8db40:	dc400617 	ldw	r17,24(sp)
   8db44:	dc000517 	ldw	r16,20(sp)
   8db48:	dec00f04 	addi	sp,sp,60
   8db4c:	f800283a 	ret
   8db50:	00bfffd4 	movui	r2,65535
   8db54:	12005636 	bltu	r2,r8,8dcb0 <__udivdi3+0x348>
   8db58:	00803fc4 	movi	r2,255
   8db5c:	12010036 	bltu	r2,r8,8df60 <__udivdi3+0x5f8>
   8db60:	000b883a 	mov	r5,zero
   8db64:	0005883a 	mov	r2,zero
   8db68:	9884d83a 	srl	r2,r19,r2
   8db6c:	01000274 	movhi	r4,9
   8db70:	21119304 	addi	r4,r4,17996
   8db74:	01800804 	movi	r6,32
   8db78:	1105883a 	add	r2,r2,r4
   8db7c:	10c00003 	ldbu	r3,0(r2)
   8db80:	28c7883a 	add	r3,r5,r3
   8db84:	30cbc83a 	sub	r5,r6,r3
   8db88:	28000626 	beq	r5,zero,8dba4 <__udivdi3+0x23c>
   8db8c:	3145c83a 	sub	r2,r6,r5
   8db90:	e084d83a 	srl	r2,fp,r2
   8db94:	a946983a 	sll	r3,r21,r5
   8db98:	e178983a 	sll	fp,fp,r5
   8db9c:	9966983a 	sll	r19,r19,r5
   8dba0:	18aab03a 	or	r21,r3,r2
   8dba4:	982ed43a 	srli	r23,r19,16
   8dba8:	a809883a 	mov	r4,r21
   8dbac:	9cbfffcc 	andi	r18,r19,65535
   8dbb0:	b80b883a 	mov	r5,r23
   8dbb4:	0080b900 	call	80b90 <__udivsi3>
   8dbb8:	100b883a 	mov	r5,r2
   8dbbc:	9009883a 	mov	r4,r18
   8dbc0:	1021883a 	mov	r16,r2
   8dbc4:	0080ba00 	call	80ba0 <__mulsi3>
   8dbc8:	a809883a 	mov	r4,r21
   8dbcc:	b80b883a 	mov	r5,r23
   8dbd0:	1023883a 	mov	r17,r2
   8dbd4:	0080b980 	call	80b98 <__umodsi3>
   8dbd8:	1004943a 	slli	r2,r2,16
   8dbdc:	e006d43a 	srli	r3,fp,16
   8dbe0:	10c4b03a 	or	r2,r2,r3
   8dbe4:	1440042e 	bgeu	r2,r17,8dbf8 <__udivdi3+0x290>
   8dbe8:	14c5883a 	add	r2,r2,r19
   8dbec:	843fffc4 	addi	r16,r16,-1
   8dbf0:	14c00136 	bltu	r2,r19,8dbf8 <__udivdi3+0x290>
   8dbf4:	1440ea36 	bltu	r2,r17,8dfa0 <__udivdi3+0x638>
   8dbf8:	1463c83a 	sub	r17,r2,r17
   8dbfc:	8809883a 	mov	r4,r17
   8dc00:	b80b883a 	mov	r5,r23
   8dc04:	0080b900 	call	80b90 <__udivsi3>
   8dc08:	100b883a 	mov	r5,r2
   8dc0c:	9009883a 	mov	r4,r18
   8dc10:	102b883a 	mov	r21,r2
   8dc14:	0080ba00 	call	80ba0 <__mulsi3>
   8dc18:	8809883a 	mov	r4,r17
   8dc1c:	b80b883a 	mov	r5,r23
   8dc20:	1025883a 	mov	r18,r2
   8dc24:	0080b980 	call	80b98 <__umodsi3>
   8dc28:	1004943a 	slli	r2,r2,16
   8dc2c:	e0ffffcc 	andi	r3,fp,65535
   8dc30:	10c4b03a 	or	r2,r2,r3
   8dc34:	1480042e 	bgeu	r2,r18,8dc48 <__udivdi3+0x2e0>
   8dc38:	9885883a 	add	r2,r19,r2
   8dc3c:	ad7fffc4 	addi	r21,r21,-1
   8dc40:	14c00136 	bltu	r2,r19,8dc48 <__udivdi3+0x2e0>
   8dc44:	1480d936 	bltu	r2,r18,8dfac <__udivdi3+0x644>
   8dc48:	8004943a 	slli	r2,r16,16
   8dc4c:	0009883a 	mov	r4,zero
   8dc50:	a884b03a 	or	r2,r21,r2
   8dc54:	003fad06 	br	8db0c <__udivdi3+0x1a4>
   8dc58:	00804034 	movhi	r2,256
   8dc5c:	10bfffc4 	addi	r2,r2,-1
   8dc60:	11c0b636 	bltu	r2,r7,8df3c <__udivdi3+0x5d4>
   8dc64:	01400404 	movi	r5,16
   8dc68:	2805883a 	mov	r2,r5
   8dc6c:	003f9a06 	br	8dad8 <__udivdi3+0x170>
   8dc70:	0005883a 	mov	r2,zero
   8dc74:	0009883a 	mov	r4,zero
   8dc78:	003fa406 	br	8db0c <__udivdi3+0x1a4>
   8dc7c:	00804034 	movhi	r2,256
   8dc80:	10bfffc4 	addi	r2,r2,-1
   8dc84:	14c0b336 	bltu	r2,r19,8df54 <__udivdi3+0x5ec>
   8dc88:	01400404 	movi	r5,16
   8dc8c:	2805883a 	mov	r2,r5
   8dc90:	003f5106 	br	8d9d8 <__udivdi3+0x70>
   8dc94:	01000044 	movi	r4,1
   8dc98:	000b883a 	mov	r5,zero
   8dc9c:	0080b900 	call	80b90 <__udivsi3>
   8dca0:	1027883a 	mov	r19,r2
   8dca4:	00bfffd4 	movui	r2,65535
   8dca8:	14fff436 	bltu	r2,r19,8dc7c <__udivdi3+0x314>
   8dcac:	003f4606 	br	8d9c8 <__udivdi3+0x60>
   8dcb0:	00804034 	movhi	r2,256
   8dcb4:	10bfffc4 	addi	r2,r2,-1
   8dcb8:	1200ac36 	bltu	r2,r8,8df6c <__udivdi3+0x604>
   8dcbc:	01400404 	movi	r5,16
   8dcc0:	2805883a 	mov	r2,r5
   8dcc4:	003fa806 	br	8db68 <__udivdi3+0x200>
   8dcc8:	3d85c83a 	sub	r2,r7,r22
   8dccc:	3588983a 	sll	r4,r6,r22
   8dcd0:	9886d83a 	srl	r3,r19,r2
   8dcd4:	a8a2d83a 	srl	r17,r21,r2
   8dcd8:	e084d83a 	srl	r2,fp,r2
   8dcdc:	20eeb03a 	or	r23,r4,r3
   8dce0:	b824d43a 	srli	r18,r23,16
   8dce4:	ad86983a 	sll	r3,r21,r22
   8dce8:	8809883a 	mov	r4,r17
   8dcec:	900b883a 	mov	r5,r18
   8dcf0:	1886b03a 	or	r3,r3,r2
   8dcf4:	d8c00115 	stw	r3,4(sp)
   8dcf8:	bc3fffcc 	andi	r16,r23,65535
   8dcfc:	0080b900 	call	80b90 <__udivsi3>
   8dd00:	100b883a 	mov	r5,r2
   8dd04:	8009883a 	mov	r4,r16
   8dd08:	1029883a 	mov	r20,r2
   8dd0c:	0080ba00 	call	80ba0 <__mulsi3>
   8dd10:	900b883a 	mov	r5,r18
   8dd14:	8809883a 	mov	r4,r17
   8dd18:	102b883a 	mov	r21,r2
   8dd1c:	0080b980 	call	80b98 <__umodsi3>
   8dd20:	d9400117 	ldw	r5,4(sp)
   8dd24:	1004943a 	slli	r2,r2,16
   8dd28:	9da6983a 	sll	r19,r19,r22
   8dd2c:	2806d43a 	srli	r3,r5,16
   8dd30:	10c4b03a 	or	r2,r2,r3
   8dd34:	1540032e 	bgeu	r2,r21,8dd44 <__udivdi3+0x3dc>
   8dd38:	15c5883a 	add	r2,r2,r23
   8dd3c:	a53fffc4 	addi	r20,r20,-1
   8dd40:	15c0912e 	bgeu	r2,r23,8df88 <__udivdi3+0x620>
   8dd44:	1563c83a 	sub	r17,r2,r21
   8dd48:	8809883a 	mov	r4,r17
   8dd4c:	900b883a 	mov	r5,r18
   8dd50:	0080b900 	call	80b90 <__udivsi3>
   8dd54:	100b883a 	mov	r5,r2
   8dd58:	8009883a 	mov	r4,r16
   8dd5c:	102b883a 	mov	r21,r2
   8dd60:	0080ba00 	call	80ba0 <__mulsi3>
   8dd64:	8809883a 	mov	r4,r17
   8dd68:	900b883a 	mov	r5,r18
   8dd6c:	1021883a 	mov	r16,r2
   8dd70:	0080b980 	call	80b98 <__umodsi3>
   8dd74:	da800117 	ldw	r10,4(sp)
   8dd78:	1004943a 	slli	r2,r2,16
   8dd7c:	50ffffcc 	andi	r3,r10,65535
   8dd80:	10c6b03a 	or	r3,r2,r3
   8dd84:	1c00032e 	bgeu	r3,r16,8dd94 <__udivdi3+0x42c>
   8dd88:	1dc7883a 	add	r3,r3,r23
   8dd8c:	ad7fffc4 	addi	r21,r21,-1
   8dd90:	1dc0792e 	bgeu	r3,r23,8df78 <__udivdi3+0x610>
   8dd94:	a004943a 	slli	r2,r20,16
   8dd98:	982ed43a 	srli	r23,r19,16
   8dd9c:	9cffffcc 	andi	r19,r19,65535
   8dda0:	a8a4b03a 	or	r18,r21,r2
   8dda4:	947fffcc 	andi	r17,r18,65535
   8dda8:	902ad43a 	srli	r21,r18,16
   8ddac:	8809883a 	mov	r4,r17
   8ddb0:	980b883a 	mov	r5,r19
   8ddb4:	1c21c83a 	sub	r16,r3,r16
   8ddb8:	0080ba00 	call	80ba0 <__mulsi3>
   8ddbc:	8809883a 	mov	r4,r17
   8ddc0:	b80b883a 	mov	r5,r23
   8ddc4:	1029883a 	mov	r20,r2
   8ddc8:	0080ba00 	call	80ba0 <__mulsi3>
   8ddcc:	980b883a 	mov	r5,r19
   8ddd0:	a809883a 	mov	r4,r21
   8ddd4:	1023883a 	mov	r17,r2
   8ddd8:	0080ba00 	call	80ba0 <__mulsi3>
   8dddc:	a809883a 	mov	r4,r21
   8dde0:	b80b883a 	mov	r5,r23
   8dde4:	1027883a 	mov	r19,r2
   8dde8:	0080ba00 	call	80ba0 <__mulsi3>
   8ddec:	1009883a 	mov	r4,r2
   8ddf0:	a004d43a 	srli	r2,r20,16
   8ddf4:	8ce3883a 	add	r17,r17,r19
   8ddf8:	1447883a 	add	r3,r2,r17
   8ddfc:	1cc0022e 	bgeu	r3,r19,8de08 <__udivdi3+0x4a0>
   8de00:	00800074 	movhi	r2,1
   8de04:	2089883a 	add	r4,r4,r2
   8de08:	1804d43a 	srli	r2,r3,16
   8de0c:	2085883a 	add	r2,r4,r2
   8de10:	80804436 	bltu	r16,r2,8df24 <__udivdi3+0x5bc>
   8de14:	80803e26 	beq	r16,r2,8df10 <__udivdi3+0x5a8>
   8de18:	9005883a 	mov	r2,r18
   8de1c:	0009883a 	mov	r4,zero
   8de20:	003f3a06 	br	8db0c <__udivdi3+0x1a4>
   8de24:	9d26983a 	sll	r19,r19,r20
   8de28:	3505c83a 	sub	r2,r6,r20
   8de2c:	a8a2d83a 	srl	r17,r21,r2
   8de30:	982ed43a 	srli	r23,r19,16
   8de34:	e084d83a 	srl	r2,fp,r2
   8de38:	ad06983a 	sll	r3,r21,r20
   8de3c:	8809883a 	mov	r4,r17
   8de40:	b80b883a 	mov	r5,r23
   8de44:	1886b03a 	or	r3,r3,r2
   8de48:	d8c00015 	stw	r3,0(sp)
   8de4c:	9dbfffcc 	andi	r22,r19,65535
   8de50:	0080b900 	call	80b90 <__udivsi3>
   8de54:	100b883a 	mov	r5,r2
   8de58:	b009883a 	mov	r4,r22
   8de5c:	d8800215 	stw	r2,8(sp)
   8de60:	0080ba00 	call	80ba0 <__mulsi3>
   8de64:	8809883a 	mov	r4,r17
   8de68:	b80b883a 	mov	r5,r23
   8de6c:	102b883a 	mov	r21,r2
   8de70:	0080b980 	call	80b98 <__umodsi3>
   8de74:	d9000017 	ldw	r4,0(sp)
   8de78:	1004943a 	slli	r2,r2,16
   8de7c:	2006d43a 	srli	r3,r4,16
   8de80:	10c4b03a 	or	r2,r2,r3
   8de84:	1540052e 	bgeu	r2,r21,8de9c <__udivdi3+0x534>
   8de88:	d9400217 	ldw	r5,8(sp)
   8de8c:	14c5883a 	add	r2,r2,r19
   8de90:	297fffc4 	addi	r5,r5,-1
   8de94:	d9400215 	stw	r5,8(sp)
   8de98:	14c0462e 	bgeu	r2,r19,8dfb4 <__udivdi3+0x64c>
   8de9c:	1563c83a 	sub	r17,r2,r21
   8dea0:	8809883a 	mov	r4,r17
   8dea4:	b80b883a 	mov	r5,r23
   8dea8:	0080b900 	call	80b90 <__udivsi3>
   8deac:	100b883a 	mov	r5,r2
   8deb0:	b009883a 	mov	r4,r22
   8deb4:	1025883a 	mov	r18,r2
   8deb8:	0080ba00 	call	80ba0 <__mulsi3>
   8debc:	8809883a 	mov	r4,r17
   8dec0:	b80b883a 	mov	r5,r23
   8dec4:	1021883a 	mov	r16,r2
   8dec8:	0080b980 	call	80b98 <__umodsi3>
   8decc:	da800017 	ldw	r10,0(sp)
   8ded0:	1004943a 	slli	r2,r2,16
   8ded4:	50ffffcc 	andi	r3,r10,65535
   8ded8:	10c6b03a 	or	r3,r2,r3
   8dedc:	1c00062e 	bgeu	r3,r16,8def8 <__udivdi3+0x590>
   8dee0:	1cc7883a 	add	r3,r3,r19
   8dee4:	94bfffc4 	addi	r18,r18,-1
   8dee8:	1cc00336 	bltu	r3,r19,8def8 <__udivdi3+0x590>
   8deec:	1c00022e 	bgeu	r3,r16,8def8 <__udivdi3+0x590>
   8def0:	94bfffc4 	addi	r18,r18,-1
   8def4:	1cc7883a 	add	r3,r3,r19
   8def8:	d9000217 	ldw	r4,8(sp)
   8defc:	e538983a 	sll	fp,fp,r20
   8df00:	1c2bc83a 	sub	r21,r3,r16
   8df04:	2004943a 	slli	r2,r4,16
   8df08:	90a8b03a 	or	r20,r18,r2
   8df0c:	003ebf06 	br	8da0c <__udivdi3+0xa4>
   8df10:	1804943a 	slli	r2,r3,16
   8df14:	e588983a 	sll	r4,fp,r22
   8df18:	a0ffffcc 	andi	r3,r20,65535
   8df1c:	10c5883a 	add	r2,r2,r3
   8df20:	20bfbd2e 	bgeu	r4,r2,8de18 <__udivdi3+0x4b0>
   8df24:	90bfffc4 	addi	r2,r18,-1
   8df28:	0009883a 	mov	r4,zero
   8df2c:	003ef706 	br	8db0c <__udivdi3+0x1a4>
   8df30:	01400204 	movi	r5,8
   8df34:	2805883a 	mov	r2,r5
   8df38:	003ee706 	br	8dad8 <__udivdi3+0x170>
   8df3c:	01400604 	movi	r5,24
   8df40:	2805883a 	mov	r2,r5
   8df44:	003ee406 	br	8dad8 <__udivdi3+0x170>
   8df48:	01400204 	movi	r5,8
   8df4c:	2805883a 	mov	r2,r5
   8df50:	003ea106 	br	8d9d8 <__udivdi3+0x70>
   8df54:	01400604 	movi	r5,24
   8df58:	2805883a 	mov	r2,r5
   8df5c:	003e9e06 	br	8d9d8 <__udivdi3+0x70>
   8df60:	01400204 	movi	r5,8
   8df64:	2805883a 	mov	r2,r5
   8df68:	003eff06 	br	8db68 <__udivdi3+0x200>
   8df6c:	01400604 	movi	r5,24
   8df70:	2805883a 	mov	r2,r5
   8df74:	003efc06 	br	8db68 <__udivdi3+0x200>
   8df78:	1c3f862e 	bgeu	r3,r16,8dd94 <__udivdi3+0x42c>
   8df7c:	1dc7883a 	add	r3,r3,r23
   8df80:	ad7fffc4 	addi	r21,r21,-1
   8df84:	003f8306 	br	8dd94 <__udivdi3+0x42c>
   8df88:	157f6e2e 	bgeu	r2,r21,8dd44 <__udivdi3+0x3dc>
   8df8c:	a53fffc4 	addi	r20,r20,-1
   8df90:	15c5883a 	add	r2,r2,r23
   8df94:	003f6b06 	br	8dd44 <__udivdi3+0x3dc>
   8df98:	ad7fffc4 	addi	r21,r21,-1
   8df9c:	003ec206 	br	8daa8 <__udivdi3+0x140>
   8dfa0:	843fffc4 	addi	r16,r16,-1
   8dfa4:	14c5883a 	add	r2,r2,r19
   8dfa8:	003f1306 	br	8dbf8 <__udivdi3+0x290>
   8dfac:	ad7fffc4 	addi	r21,r21,-1
   8dfb0:	003f2506 	br	8dc48 <__udivdi3+0x2e0>
   8dfb4:	157fb92e 	bgeu	r2,r21,8de9c <__udivdi3+0x534>
   8dfb8:	297fffc4 	addi	r5,r5,-1
   8dfbc:	14c5883a 	add	r2,r2,r19
   8dfc0:	d9400215 	stw	r5,8(sp)
   8dfc4:	003fb506 	br	8de9c <__udivdi3+0x534>
   8dfc8:	843fffc4 	addi	r16,r16,-1
   8dfcc:	14c5883a 	add	r2,r2,r19
   8dfd0:	003ea106 	br	8da58 <__udivdi3+0xf0>

0008dfd4 <__umoddi3>:
   8dfd4:	defff004 	addi	sp,sp,-64
   8dfd8:	3011883a 	mov	r8,r6
   8dfdc:	000d883a 	mov	r6,zero
   8dfe0:	dd400b15 	stw	r21,44(sp)
   8dfe4:	dcc00915 	stw	r19,36(sp)
   8dfe8:	dc000615 	stw	r16,24(sp)
   8dfec:	dfc00f15 	stw	ra,60(sp)
   8dff0:	df000e15 	stw	fp,56(sp)
   8dff4:	ddc00d15 	stw	r23,52(sp)
   8dff8:	dd800c15 	stw	r22,48(sp)
   8dffc:	dd000a15 	stw	r20,40(sp)
   8e000:	dc800815 	stw	r18,32(sp)
   8e004:	dc400715 	stw	r17,28(sp)
   8e008:	2817883a 	mov	r11,r5
   8e00c:	d9800415 	stw	r6,16(sp)
   8e010:	4027883a 	mov	r19,r8
   8e014:	d9800515 	stw	r6,20(sp)
   8e018:	2021883a 	mov	r16,r4
   8e01c:	282b883a 	mov	r21,r5
   8e020:	38002c1e 	bne	r7,zero,8e0d4 <__umoddi3+0x100>
   8e024:	2a005636 	bltu	r5,r8,8e180 <__umoddi3+0x1ac>
   8e028:	40009a26 	beq	r8,zero,8e294 <__umoddi3+0x2c0>
   8e02c:	00bfffd4 	movui	r2,65535
   8e030:	14c09236 	bltu	r2,r19,8e27c <__umoddi3+0x2a8>
   8e034:	00803fc4 	movi	r2,255
   8e038:	14c15c36 	bltu	r2,r19,8e5ac <__umoddi3+0x5d8>
   8e03c:	000b883a 	mov	r5,zero
   8e040:	0005883a 	mov	r2,zero
   8e044:	9884d83a 	srl	r2,r19,r2
   8e048:	01000274 	movhi	r4,9
   8e04c:	21119304 	addi	r4,r4,17996
   8e050:	01800804 	movi	r6,32
   8e054:	1105883a 	add	r2,r2,r4
   8e058:	10c00003 	ldbu	r3,0(r2)
   8e05c:	28c7883a 	add	r3,r5,r3
   8e060:	30e5c83a 	sub	r18,r6,r3
   8e064:	9000a41e 	bne	r18,zero,8e2f8 <__umoddi3+0x324>
   8e068:	982ed43a 	srli	r23,r19,16
   8e06c:	acebc83a 	sub	r21,r21,r19
   8e070:	9d3fffcc 	andi	r20,r19,65535
   8e074:	002d883a 	mov	r22,zero
   8e078:	a809883a 	mov	r4,r21
   8e07c:	b80b883a 	mov	r5,r23
   8e080:	0080b900 	call	80b90 <__udivsi3>
   8e084:	100b883a 	mov	r5,r2
   8e088:	a009883a 	mov	r4,r20
   8e08c:	0080ba00 	call	80ba0 <__mulsi3>
   8e090:	a809883a 	mov	r4,r21
   8e094:	b80b883a 	mov	r5,r23
   8e098:	1023883a 	mov	r17,r2
   8e09c:	0080b980 	call	80b98 <__umodsi3>
   8e0a0:	1004943a 	slli	r2,r2,16
   8e0a4:	8006d43a 	srli	r3,r16,16
   8e0a8:	10c4b03a 	or	r2,r2,r3
   8e0ac:	1440032e 	bgeu	r2,r17,8e0bc <__umoddi3+0xe8>
   8e0b0:	14c5883a 	add	r2,r2,r19
   8e0b4:	14c00136 	bltu	r2,r19,8e0bc <__umoddi3+0xe8>
   8e0b8:	14415836 	bltu	r2,r17,8e61c <__umoddi3+0x648>
   8e0bc:	1463c83a 	sub	r17,r2,r17
   8e0c0:	8809883a 	mov	r4,r17
   8e0c4:	b80b883a 	mov	r5,r23
   8e0c8:	0080b900 	call	80b90 <__udivsi3>
   8e0cc:	a009883a 	mov	r4,r20
   8e0d0:	00005306 	br	8e220 <__umoddi3+0x24c>
   8e0d4:	380d883a 	mov	r6,r7
   8e0d8:	29c0132e 	bgeu	r5,r7,8e128 <__umoddi3+0x154>
   8e0dc:	d9000415 	stw	r4,16(sp)
   8e0e0:	d9400515 	stw	r5,20(sp)
   8e0e4:	d9400417 	ldw	r5,16(sp)
   8e0e8:	5813883a 	mov	r9,r11
   8e0ec:	2811883a 	mov	r8,r5
   8e0f0:	4005883a 	mov	r2,r8
   8e0f4:	4807883a 	mov	r3,r9
   8e0f8:	dfc00f17 	ldw	ra,60(sp)
   8e0fc:	df000e17 	ldw	fp,56(sp)
   8e100:	ddc00d17 	ldw	r23,52(sp)
   8e104:	dd800c17 	ldw	r22,48(sp)
   8e108:	dd400b17 	ldw	r21,44(sp)
   8e10c:	dd000a17 	ldw	r20,40(sp)
   8e110:	dcc00917 	ldw	r19,36(sp)
   8e114:	dc800817 	ldw	r18,32(sp)
   8e118:	dc400717 	ldw	r17,28(sp)
   8e11c:	dc000617 	ldw	r16,24(sp)
   8e120:	dec01004 	addi	sp,sp,64
   8e124:	f800283a 	ret
   8e128:	00bfffd4 	movui	r2,65535
   8e12c:	11c06636 	bltu	r2,r7,8e2c8 <__umoddi3+0x2f4>
   8e130:	00803fc4 	movi	r2,255
   8e134:	11c12036 	bltu	r2,r7,8e5b8 <__umoddi3+0x5e4>
   8e138:	000b883a 	mov	r5,zero
   8e13c:	0005883a 	mov	r2,zero
   8e140:	3084d83a 	srl	r2,r6,r2
   8e144:	01000274 	movhi	r4,9
   8e148:	21119304 	addi	r4,r4,17996
   8e14c:	01c00804 	movi	r7,32
   8e150:	1105883a 	add	r2,r2,r4
   8e154:	10c00003 	ldbu	r3,0(r2)
   8e158:	28c7883a 	add	r3,r5,r3
   8e15c:	38e5c83a 	sub	r18,r7,r3
   8e160:	9000941e 	bne	r18,zero,8e3b4 <__umoddi3+0x3e0>
   8e164:	35405e36 	bltu	r6,r21,8e2e0 <__umoddi3+0x30c>
   8e168:	84c05d2e 	bgeu	r16,r19,8e2e0 <__umoddi3+0x30c>
   8e16c:	8011883a 	mov	r8,r16
   8e170:	a813883a 	mov	r9,r21
   8e174:	dc000415 	stw	r16,16(sp)
   8e178:	dd400515 	stw	r21,20(sp)
   8e17c:	003fdc06 	br	8e0f0 <__umoddi3+0x11c>
   8e180:	00bfffd4 	movui	r2,65535
   8e184:	12004a36 	bltu	r2,r8,8e2b0 <__umoddi3+0x2dc>
   8e188:	00803fc4 	movi	r2,255
   8e18c:	12010d36 	bltu	r2,r8,8e5c4 <__umoddi3+0x5f0>
   8e190:	000b883a 	mov	r5,zero
   8e194:	0005883a 	mov	r2,zero
   8e198:	9884d83a 	srl	r2,r19,r2
   8e19c:	01000274 	movhi	r4,9
   8e1a0:	21119304 	addi	r4,r4,17996
   8e1a4:	01800804 	movi	r6,32
   8e1a8:	1105883a 	add	r2,r2,r4
   8e1ac:	10c00003 	ldbu	r3,0(r2)
   8e1b0:	28c7883a 	add	r3,r5,r3
   8e1b4:	30c7c83a 	sub	r3,r6,r3
   8e1b8:	1800dc1e 	bne	r3,zero,8e52c <__umoddi3+0x558>
   8e1bc:	002d883a 	mov	r22,zero
   8e1c0:	982ed43a 	srli	r23,r19,16
   8e1c4:	a809883a 	mov	r4,r21
   8e1c8:	9cbfffcc 	andi	r18,r19,65535
   8e1cc:	b80b883a 	mov	r5,r23
   8e1d0:	0080b900 	call	80b90 <__udivsi3>
   8e1d4:	100b883a 	mov	r5,r2
   8e1d8:	9009883a 	mov	r4,r18
   8e1dc:	0080ba00 	call	80ba0 <__mulsi3>
   8e1e0:	a809883a 	mov	r4,r21
   8e1e4:	b80b883a 	mov	r5,r23
   8e1e8:	1023883a 	mov	r17,r2
   8e1ec:	0080b980 	call	80b98 <__umodsi3>
   8e1f0:	1004943a 	slli	r2,r2,16
   8e1f4:	8006d43a 	srli	r3,r16,16
   8e1f8:	10c4b03a 	or	r2,r2,r3
   8e1fc:	1440032e 	bgeu	r2,r17,8e20c <__umoddi3+0x238>
   8e200:	14c5883a 	add	r2,r2,r19
   8e204:	14c00136 	bltu	r2,r19,8e20c <__umoddi3+0x238>
   8e208:	14410236 	bltu	r2,r17,8e614 <__umoddi3+0x640>
   8e20c:	1463c83a 	sub	r17,r2,r17
   8e210:	8809883a 	mov	r4,r17
   8e214:	b80b883a 	mov	r5,r23
   8e218:	0080b900 	call	80b90 <__udivsi3>
   8e21c:	9009883a 	mov	r4,r18
   8e220:	100b883a 	mov	r5,r2
   8e224:	0080ba00 	call	80ba0 <__mulsi3>
   8e228:	8809883a 	mov	r4,r17
   8e22c:	b80b883a 	mov	r5,r23
   8e230:	102b883a 	mov	r21,r2
   8e234:	0080b980 	call	80b98 <__umodsi3>
   8e238:	1004943a 	slli	r2,r2,16
   8e23c:	80ffffcc 	andi	r3,r16,65535
   8e240:	10c4b03a 	or	r2,r2,r3
   8e244:	1540042e 	bgeu	r2,r21,8e258 <__umoddi3+0x284>
   8e248:	14c5883a 	add	r2,r2,r19
   8e24c:	14c00236 	bltu	r2,r19,8e258 <__umoddi3+0x284>
   8e250:	1540012e 	bgeu	r2,r21,8e258 <__umoddi3+0x284>
   8e254:	14c5883a 	add	r2,r2,r19
   8e258:	1545c83a 	sub	r2,r2,r21
   8e25c:	1584d83a 	srl	r2,r2,r22
   8e260:	0013883a 	mov	r9,zero
   8e264:	d8800415 	stw	r2,16(sp)
   8e268:	d8c00417 	ldw	r3,16(sp)
   8e26c:	0005883a 	mov	r2,zero
   8e270:	d8800515 	stw	r2,20(sp)
   8e274:	1811883a 	mov	r8,r3
   8e278:	003f9d06 	br	8e0f0 <__umoddi3+0x11c>
   8e27c:	00804034 	movhi	r2,256
   8e280:	10bfffc4 	addi	r2,r2,-1
   8e284:	14c0c636 	bltu	r2,r19,8e5a0 <__umoddi3+0x5cc>
   8e288:	01400404 	movi	r5,16
   8e28c:	2805883a 	mov	r2,r5
   8e290:	003f6c06 	br	8e044 <__umoddi3+0x70>
   8e294:	01000044 	movi	r4,1
   8e298:	000b883a 	mov	r5,zero
   8e29c:	0080b900 	call	80b90 <__udivsi3>
   8e2a0:	1027883a 	mov	r19,r2
   8e2a4:	00bfffd4 	movui	r2,65535
   8e2a8:	14fff436 	bltu	r2,r19,8e27c <__umoddi3+0x2a8>
   8e2ac:	003f6106 	br	8e034 <__umoddi3+0x60>
   8e2b0:	00804034 	movhi	r2,256
   8e2b4:	10bfffc4 	addi	r2,r2,-1
   8e2b8:	1200c536 	bltu	r2,r8,8e5d0 <__umoddi3+0x5fc>
   8e2bc:	01400404 	movi	r5,16
   8e2c0:	2805883a 	mov	r2,r5
   8e2c4:	003fb406 	br	8e198 <__umoddi3+0x1c4>
   8e2c8:	00804034 	movhi	r2,256
   8e2cc:	10bfffc4 	addi	r2,r2,-1
   8e2d0:	11c0c236 	bltu	r2,r7,8e5dc <__umoddi3+0x608>
   8e2d4:	01400404 	movi	r5,16
   8e2d8:	2805883a 	mov	r2,r5
   8e2dc:	003f9806 	br	8e140 <__umoddi3+0x16c>
   8e2e0:	84c9c83a 	sub	r4,r16,r19
   8e2e4:	8105803a 	cmpltu	r2,r16,r4
   8e2e8:	a987c83a 	sub	r3,r21,r6
   8e2ec:	18abc83a 	sub	r21,r3,r2
   8e2f0:	2021883a 	mov	r16,r4
   8e2f4:	003f9d06 	br	8e16c <__umoddi3+0x198>
   8e2f8:	9ca6983a 	sll	r19,r19,r18
   8e2fc:	3485c83a 	sub	r2,r6,r18
   8e300:	a8a2d83a 	srl	r17,r21,r2
   8e304:	982ed43a 	srli	r23,r19,16
   8e308:	ac86983a 	sll	r3,r21,r18
   8e30c:	8084d83a 	srl	r2,r16,r2
   8e310:	8809883a 	mov	r4,r17
   8e314:	b80b883a 	mov	r5,r23
   8e318:	18b8b03a 	or	fp,r3,r2
   8e31c:	9d3fffcc 	andi	r20,r19,65535
   8e320:	0080b900 	call	80b90 <__udivsi3>
   8e324:	100b883a 	mov	r5,r2
   8e328:	a009883a 	mov	r4,r20
   8e32c:	0080ba00 	call	80ba0 <__mulsi3>
   8e330:	8809883a 	mov	r4,r17
   8e334:	b80b883a 	mov	r5,r23
   8e338:	102b883a 	mov	r21,r2
   8e33c:	0080b980 	call	80b98 <__umodsi3>
   8e340:	1004943a 	slli	r2,r2,16
   8e344:	e006d43a 	srli	r3,fp,16
   8e348:	902d883a 	mov	r22,r18
   8e34c:	10c4b03a 	or	r2,r2,r3
   8e350:	1540022e 	bgeu	r2,r21,8e35c <__umoddi3+0x388>
   8e354:	14c5883a 	add	r2,r2,r19
   8e358:	14c0ab2e 	bgeu	r2,r19,8e608 <__umoddi3+0x634>
   8e35c:	1563c83a 	sub	r17,r2,r21
   8e360:	8809883a 	mov	r4,r17
   8e364:	b80b883a 	mov	r5,r23
   8e368:	0080b900 	call	80b90 <__udivsi3>
   8e36c:	100b883a 	mov	r5,r2
   8e370:	a009883a 	mov	r4,r20
   8e374:	0080ba00 	call	80ba0 <__mulsi3>
   8e378:	8809883a 	mov	r4,r17
   8e37c:	b80b883a 	mov	r5,r23
   8e380:	102b883a 	mov	r21,r2
   8e384:	0080b980 	call	80b98 <__umodsi3>
   8e388:	1004943a 	slli	r2,r2,16
   8e38c:	e0ffffcc 	andi	r3,fp,65535
   8e390:	10c4b03a 	or	r2,r2,r3
   8e394:	1540042e 	bgeu	r2,r21,8e3a8 <__umoddi3+0x3d4>
   8e398:	14c5883a 	add	r2,r2,r19
   8e39c:	14c00236 	bltu	r2,r19,8e3a8 <__umoddi3+0x3d4>
   8e3a0:	1540012e 	bgeu	r2,r21,8e3a8 <__umoddi3+0x3d4>
   8e3a4:	14c5883a 	add	r2,r2,r19
   8e3a8:	84a0983a 	sll	r16,r16,r18
   8e3ac:	156bc83a 	sub	r21,r2,r21
   8e3b0:	003f3106 	br	8e078 <__umoddi3+0xa4>
   8e3b4:	3c8fc83a 	sub	r7,r7,r18
   8e3b8:	3486983a 	sll	r3,r6,r18
   8e3bc:	99c4d83a 	srl	r2,r19,r7
   8e3c0:	a9e2d83a 	srl	r17,r21,r7
   8e3c4:	ac8c983a 	sll	r6,r21,r18
   8e3c8:	18acb03a 	or	r22,r3,r2
   8e3cc:	b02ed43a 	srli	r23,r22,16
   8e3d0:	81c4d83a 	srl	r2,r16,r7
   8e3d4:	8809883a 	mov	r4,r17
   8e3d8:	b80b883a 	mov	r5,r23
   8e3dc:	308cb03a 	or	r6,r6,r2
   8e3e0:	d9c00315 	stw	r7,12(sp)
   8e3e4:	d9800215 	stw	r6,8(sp)
   8e3e8:	b53fffcc 	andi	r20,r22,65535
   8e3ec:	0080b900 	call	80b90 <__udivsi3>
   8e3f0:	100b883a 	mov	r5,r2
   8e3f4:	a009883a 	mov	r4,r20
   8e3f8:	1039883a 	mov	fp,r2
   8e3fc:	0080ba00 	call	80ba0 <__mulsi3>
   8e400:	8809883a 	mov	r4,r17
   8e404:	b80b883a 	mov	r5,r23
   8e408:	102b883a 	mov	r21,r2
   8e40c:	0080b980 	call	80b98 <__umodsi3>
   8e410:	d9000217 	ldw	r4,8(sp)
   8e414:	1004943a 	slli	r2,r2,16
   8e418:	9ca6983a 	sll	r19,r19,r18
   8e41c:	2006d43a 	srli	r3,r4,16
   8e420:	84a0983a 	sll	r16,r16,r18
   8e424:	dcc00015 	stw	r19,0(sp)
   8e428:	10c4b03a 	or	r2,r2,r3
   8e42c:	dc000115 	stw	r16,4(sp)
   8e430:	1540032e 	bgeu	r2,r21,8e440 <__umoddi3+0x46c>
   8e434:	1585883a 	add	r2,r2,r22
   8e438:	e73fffc4 	addi	fp,fp,-1
   8e43c:	15806e2e 	bgeu	r2,r22,8e5f8 <__umoddi3+0x624>
   8e440:	1563c83a 	sub	r17,r2,r21
   8e444:	8809883a 	mov	r4,r17
   8e448:	b80b883a 	mov	r5,r23
   8e44c:	0080b900 	call	80b90 <__udivsi3>
   8e450:	100b883a 	mov	r5,r2
   8e454:	a009883a 	mov	r4,r20
   8e458:	1021883a 	mov	r16,r2
   8e45c:	0080ba00 	call	80ba0 <__mulsi3>
   8e460:	b80b883a 	mov	r5,r23
   8e464:	8809883a 	mov	r4,r17
   8e468:	1029883a 	mov	r20,r2
   8e46c:	0080b980 	call	80b98 <__umodsi3>
   8e470:	d9400217 	ldw	r5,8(sp)
   8e474:	1004943a 	slli	r2,r2,16
   8e478:	28ffffcc 	andi	r3,r5,65535
   8e47c:	10c4b03a 	or	r2,r2,r3
   8e480:	1500032e 	bgeu	r2,r20,8e490 <__umoddi3+0x4bc>
   8e484:	1585883a 	add	r2,r2,r22
   8e488:	843fffc4 	addi	r16,r16,-1
   8e48c:	1580562e 	bgeu	r2,r22,8e5e8 <__umoddi3+0x614>
   8e490:	d9800017 	ldw	r6,0(sp)
   8e494:	e022943a 	slli	r17,fp,16
   8e498:	302ed43a 	srli	r23,r6,16
   8e49c:	8462b03a 	or	r17,r16,r17
   8e4a0:	34ffffcc 	andi	r19,r6,65535
   8e4a4:	882ad43a 	srli	r21,r17,16
   8e4a8:	8c7fffcc 	andi	r17,r17,65535
   8e4ac:	8809883a 	mov	r4,r17
   8e4b0:	980b883a 	mov	r5,r19
   8e4b4:	1521c83a 	sub	r16,r2,r20
   8e4b8:	0080ba00 	call	80ba0 <__mulsi3>
   8e4bc:	8809883a 	mov	r4,r17
   8e4c0:	b80b883a 	mov	r5,r23
   8e4c4:	1029883a 	mov	r20,r2
   8e4c8:	0080ba00 	call	80ba0 <__mulsi3>
   8e4cc:	980b883a 	mov	r5,r19
   8e4d0:	a809883a 	mov	r4,r21
   8e4d4:	1023883a 	mov	r17,r2
   8e4d8:	0080ba00 	call	80ba0 <__mulsi3>
   8e4dc:	a809883a 	mov	r4,r21
   8e4e0:	b80b883a 	mov	r5,r23
   8e4e4:	1027883a 	mov	r19,r2
   8e4e8:	0080ba00 	call	80ba0 <__mulsi3>
   8e4ec:	100b883a 	mov	r5,r2
   8e4f0:	a004d43a 	srli	r2,r20,16
   8e4f4:	8ce3883a 	add	r17,r17,r19
   8e4f8:	1449883a 	add	r4,r2,r17
   8e4fc:	24c0022e 	bgeu	r4,r19,8e508 <__umoddi3+0x534>
   8e500:	00800074 	movhi	r2,1
   8e504:	288b883a 	add	r5,r5,r2
   8e508:	2004d43a 	srli	r2,r4,16
   8e50c:	2008943a 	slli	r4,r4,16
   8e510:	a0ffffcc 	andi	r3,r20,65535
   8e514:	288d883a 	add	r6,r5,r2
   8e518:	20c9883a 	add	r4,r4,r3
   8e51c:	81800b36 	bltu	r16,r6,8e54c <__umoddi3+0x578>
   8e520:	81804026 	beq	r16,r6,8e624 <__umoddi3+0x650>
   8e524:	818dc83a 	sub	r6,r16,r6
   8e528:	00000f06 	br	8e568 <__umoddi3+0x594>
   8e52c:	30c5c83a 	sub	r2,r6,r3
   8e530:	182d883a 	mov	r22,r3
   8e534:	8084d83a 	srl	r2,r16,r2
   8e538:	a8c6983a 	sll	r3,r21,r3
   8e53c:	9da6983a 	sll	r19,r19,r22
   8e540:	85a0983a 	sll	r16,r16,r22
   8e544:	18aab03a 	or	r21,r3,r2
   8e548:	003f1d06 	br	8e1c0 <__umoddi3+0x1ec>
   8e54c:	d8c00017 	ldw	r3,0(sp)
   8e550:	20c5c83a 	sub	r2,r4,r3
   8e554:	2089803a 	cmpltu	r4,r4,r2
   8e558:	3587c83a 	sub	r3,r6,r22
   8e55c:	1907c83a 	sub	r3,r3,r4
   8e560:	80cdc83a 	sub	r6,r16,r3
   8e564:	1009883a 	mov	r4,r2
   8e568:	d9400117 	ldw	r5,4(sp)
   8e56c:	2905c83a 	sub	r2,r5,r4
   8e570:	2887803a 	cmpltu	r3,r5,r2
   8e574:	30c7c83a 	sub	r3,r6,r3
   8e578:	d9800317 	ldw	r6,12(sp)
   8e57c:	1484d83a 	srl	r2,r2,r18
   8e580:	1988983a 	sll	r4,r3,r6
   8e584:	1c86d83a 	srl	r3,r3,r18
   8e588:	2088b03a 	or	r4,r4,r2
   8e58c:	2011883a 	mov	r8,r4
   8e590:	1813883a 	mov	r9,r3
   8e594:	d9000415 	stw	r4,16(sp)
   8e598:	d8c00515 	stw	r3,20(sp)
   8e59c:	003ed406 	br	8e0f0 <__umoddi3+0x11c>
   8e5a0:	01400604 	movi	r5,24
   8e5a4:	2805883a 	mov	r2,r5
   8e5a8:	003ea606 	br	8e044 <__umoddi3+0x70>
   8e5ac:	01400204 	movi	r5,8
   8e5b0:	2805883a 	mov	r2,r5
   8e5b4:	003ea306 	br	8e044 <__umoddi3+0x70>
   8e5b8:	01400204 	movi	r5,8
   8e5bc:	2805883a 	mov	r2,r5
   8e5c0:	003edf06 	br	8e140 <__umoddi3+0x16c>
   8e5c4:	01400204 	movi	r5,8
   8e5c8:	2805883a 	mov	r2,r5
   8e5cc:	003ef206 	br	8e198 <__umoddi3+0x1c4>
   8e5d0:	01400604 	movi	r5,24
   8e5d4:	2805883a 	mov	r2,r5
   8e5d8:	003eef06 	br	8e198 <__umoddi3+0x1c4>
   8e5dc:	01400604 	movi	r5,24
   8e5e0:	2805883a 	mov	r2,r5
   8e5e4:	003ed606 	br	8e140 <__umoddi3+0x16c>
   8e5e8:	153fa92e 	bgeu	r2,r20,8e490 <__umoddi3+0x4bc>
   8e5ec:	843fffc4 	addi	r16,r16,-1
   8e5f0:	1585883a 	add	r2,r2,r22
   8e5f4:	003fa606 	br	8e490 <__umoddi3+0x4bc>
   8e5f8:	157f912e 	bgeu	r2,r21,8e440 <__umoddi3+0x46c>
   8e5fc:	e73fffc4 	addi	fp,fp,-1
   8e600:	1585883a 	add	r2,r2,r22
   8e604:	003f8e06 	br	8e440 <__umoddi3+0x46c>
   8e608:	157f542e 	bgeu	r2,r21,8e35c <__umoddi3+0x388>
   8e60c:	14c5883a 	add	r2,r2,r19
   8e610:	003f5206 	br	8e35c <__umoddi3+0x388>
   8e614:	14c5883a 	add	r2,r2,r19
   8e618:	003efc06 	br	8e20c <__umoddi3+0x238>
   8e61c:	14c5883a 	add	r2,r2,r19
   8e620:	003ea606 	br	8e0bc <__umoddi3+0xe8>
   8e624:	d8800117 	ldw	r2,4(sp)
   8e628:	113fc836 	bltu	r2,r4,8e54c <__umoddi3+0x578>
   8e62c:	000d883a 	mov	r6,zero
   8e630:	003fcd06 	br	8e568 <__umoddi3+0x594>

0008e634 <__nesf2>:
   8e634:	defff304 	addi	sp,sp,-52
   8e638:	dc400b15 	stw	r17,44(sp)
   8e63c:	dc400204 	addi	r17,sp,8
   8e640:	dc000a15 	stw	r16,40(sp)
   8e644:	d9000015 	stw	r4,0(sp)
   8e648:	d9400115 	stw	r5,4(sp)
   8e64c:	d809883a 	mov	r4,sp
   8e650:	880b883a 	mov	r5,r17
   8e654:	dc000604 	addi	r16,sp,24
   8e658:	dfc00c15 	stw	ra,48(sp)
   8e65c:	008fa440 	call	8fa44 <__unpack_f>
   8e660:	d9000104 	addi	r4,sp,4
   8e664:	800b883a 	mov	r5,r16
   8e668:	008fa440 	call	8fa44 <__unpack_f>
   8e66c:	d8800217 	ldw	r2,8(sp)
   8e670:	00c00044 	movi	r3,1
   8e674:	180d883a 	mov	r6,r3
   8e678:	1880062e 	bgeu	r3,r2,8e694 <__nesf2+0x60>
   8e67c:	d8800617 	ldw	r2,24(sp)
   8e680:	8809883a 	mov	r4,r17
   8e684:	800b883a 	mov	r5,r16
   8e688:	1880022e 	bgeu	r3,r2,8e694 <__nesf2+0x60>
   8e68c:	008fb0c0 	call	8fb0c <__fpcmp_parts_f>
   8e690:	100d883a 	mov	r6,r2
   8e694:	3005883a 	mov	r2,r6
   8e698:	dfc00c17 	ldw	ra,48(sp)
   8e69c:	dc400b17 	ldw	r17,44(sp)
   8e6a0:	dc000a17 	ldw	r16,40(sp)
   8e6a4:	dec00d04 	addi	sp,sp,52
   8e6a8:	f800283a 	ret

0008e6ac <__gtsf2>:
   8e6ac:	defff304 	addi	sp,sp,-52
   8e6b0:	dc400b15 	stw	r17,44(sp)
   8e6b4:	dc400204 	addi	r17,sp,8
   8e6b8:	dc000a15 	stw	r16,40(sp)
   8e6bc:	d9000015 	stw	r4,0(sp)
   8e6c0:	d9400115 	stw	r5,4(sp)
   8e6c4:	d809883a 	mov	r4,sp
   8e6c8:	880b883a 	mov	r5,r17
   8e6cc:	dc000604 	addi	r16,sp,24
   8e6d0:	dfc00c15 	stw	ra,48(sp)
   8e6d4:	008fa440 	call	8fa44 <__unpack_f>
   8e6d8:	d9000104 	addi	r4,sp,4
   8e6dc:	800b883a 	mov	r5,r16
   8e6e0:	008fa440 	call	8fa44 <__unpack_f>
   8e6e4:	d8800217 	ldw	r2,8(sp)
   8e6e8:	00c00044 	movi	r3,1
   8e6ec:	01bfffc4 	movi	r6,-1
   8e6f0:	1880062e 	bgeu	r3,r2,8e70c <__gtsf2+0x60>
   8e6f4:	d8800617 	ldw	r2,24(sp)
   8e6f8:	8809883a 	mov	r4,r17
   8e6fc:	800b883a 	mov	r5,r16
   8e700:	1880022e 	bgeu	r3,r2,8e70c <__gtsf2+0x60>
   8e704:	008fb0c0 	call	8fb0c <__fpcmp_parts_f>
   8e708:	100d883a 	mov	r6,r2
   8e70c:	3005883a 	mov	r2,r6
   8e710:	dfc00c17 	ldw	ra,48(sp)
   8e714:	dc400b17 	ldw	r17,44(sp)
   8e718:	dc000a17 	ldw	r16,40(sp)
   8e71c:	dec00d04 	addi	sp,sp,52
   8e720:	f800283a 	ret

0008e724 <__ltsf2>:
   8e724:	defff304 	addi	sp,sp,-52
   8e728:	dc400b15 	stw	r17,44(sp)
   8e72c:	dc400204 	addi	r17,sp,8
   8e730:	dc000a15 	stw	r16,40(sp)
   8e734:	d9000015 	stw	r4,0(sp)
   8e738:	d9400115 	stw	r5,4(sp)
   8e73c:	d809883a 	mov	r4,sp
   8e740:	880b883a 	mov	r5,r17
   8e744:	dc000604 	addi	r16,sp,24
   8e748:	dfc00c15 	stw	ra,48(sp)
   8e74c:	008fa440 	call	8fa44 <__unpack_f>
   8e750:	d9000104 	addi	r4,sp,4
   8e754:	800b883a 	mov	r5,r16
   8e758:	008fa440 	call	8fa44 <__unpack_f>
   8e75c:	d8800217 	ldw	r2,8(sp)
   8e760:	00c00044 	movi	r3,1
   8e764:	180d883a 	mov	r6,r3
   8e768:	1880062e 	bgeu	r3,r2,8e784 <__ltsf2+0x60>
   8e76c:	d8800617 	ldw	r2,24(sp)
   8e770:	8809883a 	mov	r4,r17
   8e774:	800b883a 	mov	r5,r16
   8e778:	1880022e 	bgeu	r3,r2,8e784 <__ltsf2+0x60>
   8e77c:	008fb0c0 	call	8fb0c <__fpcmp_parts_f>
   8e780:	100d883a 	mov	r6,r2
   8e784:	3005883a 	mov	r2,r6
   8e788:	dfc00c17 	ldw	ra,48(sp)
   8e78c:	dc400b17 	ldw	r17,44(sp)
   8e790:	dc000a17 	ldw	r16,40(sp)
   8e794:	dec00d04 	addi	sp,sp,52
   8e798:	f800283a 	ret

0008e79c <_fpadd_parts>:
   8e79c:	defff804 	addi	sp,sp,-32
   8e7a0:	dcc00315 	stw	r19,12(sp)
   8e7a4:	2027883a 	mov	r19,r4
   8e7a8:	21000017 	ldw	r4,0(r4)
   8e7ac:	00c00044 	movi	r3,1
   8e7b0:	dd400515 	stw	r21,20(sp)
   8e7b4:	dd000415 	stw	r20,16(sp)
   8e7b8:	ddc00715 	stw	r23,28(sp)
   8e7bc:	dd800615 	stw	r22,24(sp)
   8e7c0:	dc800215 	stw	r18,8(sp)
   8e7c4:	dc400115 	stw	r17,4(sp)
   8e7c8:	dc000015 	stw	r16,0(sp)
   8e7cc:	282b883a 	mov	r21,r5
   8e7d0:	3029883a 	mov	r20,r6
   8e7d4:	1900632e 	bgeu	r3,r4,8e964 <_fpadd_parts+0x1c8>
   8e7d8:	28800017 	ldw	r2,0(r5)
   8e7dc:	1880812e 	bgeu	r3,r2,8e9e4 <_fpadd_parts+0x248>
   8e7e0:	00c00104 	movi	r3,4
   8e7e4:	20c0dc26 	beq	r4,r3,8eb58 <_fpadd_parts+0x3bc>
   8e7e8:	10c07e26 	beq	r2,r3,8e9e4 <_fpadd_parts+0x248>
   8e7ec:	00c00084 	movi	r3,2
   8e7f0:	10c06726 	beq	r2,r3,8e990 <_fpadd_parts+0x1f4>
   8e7f4:	20c07b26 	beq	r4,r3,8e9e4 <_fpadd_parts+0x248>
   8e7f8:	9dc00217 	ldw	r23,8(r19)
   8e7fc:	28c00217 	ldw	r3,8(r5)
   8e800:	9c400317 	ldw	r17,12(r19)
   8e804:	2bc00317 	ldw	r15,12(r5)
   8e808:	b8cdc83a 	sub	r6,r23,r3
   8e80c:	9c800417 	ldw	r18,16(r19)
   8e810:	2c000417 	ldw	r16,16(r5)
   8e814:	3009883a 	mov	r4,r6
   8e818:	30009716 	blt	r6,zero,8ea78 <_fpadd_parts+0x2dc>
   8e81c:	00800fc4 	movi	r2,63
   8e820:	11806b16 	blt	r2,r6,8e9d0 <_fpadd_parts+0x234>
   8e824:	0100a40e 	bge	zero,r4,8eab8 <_fpadd_parts+0x31c>
   8e828:	35bff804 	addi	r22,r6,-32
   8e82c:	b000bc16 	blt	r22,zero,8eb20 <_fpadd_parts+0x384>
   8e830:	8596d83a 	srl	r11,r16,r22
   8e834:	0019883a 	mov	r12,zero
   8e838:	0013883a 	mov	r9,zero
   8e83c:	01000044 	movi	r4,1
   8e840:	0015883a 	mov	r10,zero
   8e844:	b000be16 	blt	r22,zero,8eb40 <_fpadd_parts+0x3a4>
   8e848:	2590983a 	sll	r8,r4,r22
   8e84c:	000f883a 	mov	r7,zero
   8e850:	00bfffc4 	movi	r2,-1
   8e854:	3889883a 	add	r4,r7,r2
   8e858:	408b883a 	add	r5,r8,r2
   8e85c:	21cd803a 	cmpltu	r6,r4,r7
   8e860:	314b883a 	add	r5,r6,r5
   8e864:	7904703a 	and	r2,r15,r4
   8e868:	8146703a 	and	r3,r16,r5
   8e86c:	10c4b03a 	or	r2,r2,r3
   8e870:	10000226 	beq	r2,zero,8e87c <_fpadd_parts+0xe0>
   8e874:	02400044 	movi	r9,1
   8e878:	0015883a 	mov	r10,zero
   8e87c:	5a5eb03a 	or	r15,r11,r9
   8e880:	62a0b03a 	or	r16,r12,r10
   8e884:	99400117 	ldw	r5,4(r19)
   8e888:	a8800117 	ldw	r2,4(r21)
   8e88c:	28806e26 	beq	r5,r2,8ea48 <_fpadd_parts+0x2ac>
   8e890:	28006626 	beq	r5,zero,8ea2c <_fpadd_parts+0x290>
   8e894:	7c45c83a 	sub	r2,r15,r17
   8e898:	7889803a 	cmpltu	r4,r15,r2
   8e89c:	8487c83a 	sub	r3,r16,r18
   8e8a0:	1909c83a 	sub	r4,r3,r4
   8e8a4:	100d883a 	mov	r6,r2
   8e8a8:	200f883a 	mov	r7,r4
   8e8ac:	38007716 	blt	r7,zero,8ea8c <_fpadd_parts+0x2f0>
   8e8b0:	a5c00215 	stw	r23,8(r20)
   8e8b4:	a1c00415 	stw	r7,16(r20)
   8e8b8:	a0000115 	stw	zero,4(r20)
   8e8bc:	a1800315 	stw	r6,12(r20)
   8e8c0:	a2000317 	ldw	r8,12(r20)
   8e8c4:	a2400417 	ldw	r9,16(r20)
   8e8c8:	00bfffc4 	movi	r2,-1
   8e8cc:	408b883a 	add	r5,r8,r2
   8e8d0:	2a09803a 	cmpltu	r4,r5,r8
   8e8d4:	488d883a 	add	r6,r9,r2
   8e8d8:	01c40034 	movhi	r7,4096
   8e8dc:	39ffffc4 	addi	r7,r7,-1
   8e8e0:	218d883a 	add	r6,r4,r6
   8e8e4:	39801736 	bltu	r7,r6,8e944 <_fpadd_parts+0x1a8>
   8e8e8:	31c06526 	beq	r6,r7,8ea80 <_fpadd_parts+0x2e4>
   8e8ec:	a3000217 	ldw	r12,8(r20)
   8e8f0:	4209883a 	add	r4,r8,r8
   8e8f4:	00bfffc4 	movi	r2,-1
   8e8f8:	220f803a 	cmpltu	r7,r4,r8
   8e8fc:	4a4b883a 	add	r5,r9,r9
   8e900:	394f883a 	add	r7,r7,r5
   8e904:	2095883a 	add	r10,r4,r2
   8e908:	3897883a 	add	r11,r7,r2
   8e90c:	510d803a 	cmpltu	r6,r10,r4
   8e910:	6099883a 	add	r12,r12,r2
   8e914:	32d7883a 	add	r11,r6,r11
   8e918:	00840034 	movhi	r2,4096
   8e91c:	10bfffc4 	addi	r2,r2,-1
   8e920:	2011883a 	mov	r8,r4
   8e924:	3813883a 	mov	r9,r7
   8e928:	a1000315 	stw	r4,12(r20)
   8e92c:	a1c00415 	stw	r7,16(r20)
   8e930:	a3000215 	stw	r12,8(r20)
   8e934:	12c00336 	bltu	r2,r11,8e944 <_fpadd_parts+0x1a8>
   8e938:	58bfed1e 	bne	r11,r2,8e8f0 <_fpadd_parts+0x154>
   8e93c:	00bfff84 	movi	r2,-2
   8e940:	12bfeb2e 	bgeu	r2,r10,8e8f0 <_fpadd_parts+0x154>
   8e944:	a2800417 	ldw	r10,16(r20)
   8e948:	008000c4 	movi	r2,3
   8e94c:	00c80034 	movhi	r3,8192
   8e950:	18ffffc4 	addi	r3,r3,-1
   8e954:	a2400317 	ldw	r9,12(r20)
   8e958:	a0800015 	stw	r2,0(r20)
   8e95c:	1a802336 	bltu	r3,r10,8e9ec <_fpadd_parts+0x250>
   8e960:	a027883a 	mov	r19,r20
   8e964:	9805883a 	mov	r2,r19
   8e968:	ddc00717 	ldw	r23,28(sp)
   8e96c:	dd800617 	ldw	r22,24(sp)
   8e970:	dd400517 	ldw	r21,20(sp)
   8e974:	dd000417 	ldw	r20,16(sp)
   8e978:	dcc00317 	ldw	r19,12(sp)
   8e97c:	dc800217 	ldw	r18,8(sp)
   8e980:	dc400117 	ldw	r17,4(sp)
   8e984:	dc000017 	ldw	r16,0(sp)
   8e988:	dec00804 	addi	sp,sp,32
   8e98c:	f800283a 	ret
   8e990:	20fff41e 	bne	r4,r3,8e964 <_fpadd_parts+0x1c8>
   8e994:	31000015 	stw	r4,0(r6)
   8e998:	98800117 	ldw	r2,4(r19)
   8e99c:	30800115 	stw	r2,4(r6)
   8e9a0:	98c00217 	ldw	r3,8(r19)
   8e9a4:	30c00215 	stw	r3,8(r6)
   8e9a8:	98800317 	ldw	r2,12(r19)
   8e9ac:	30800315 	stw	r2,12(r6)
   8e9b0:	98c00417 	ldw	r3,16(r19)
   8e9b4:	30c00415 	stw	r3,16(r6)
   8e9b8:	98800117 	ldw	r2,4(r19)
   8e9bc:	28c00117 	ldw	r3,4(r5)
   8e9c0:	3027883a 	mov	r19,r6
   8e9c4:	10c4703a 	and	r2,r2,r3
   8e9c8:	30800115 	stw	r2,4(r6)
   8e9cc:	003fe506 	br	8e964 <_fpadd_parts+0x1c8>
   8e9d0:	1dc02616 	blt	r3,r23,8ea6c <_fpadd_parts+0x2d0>
   8e9d4:	0023883a 	mov	r17,zero
   8e9d8:	182f883a 	mov	r23,r3
   8e9dc:	0025883a 	mov	r18,zero
   8e9e0:	003fa806 	br	8e884 <_fpadd_parts+0xe8>
   8e9e4:	a827883a 	mov	r19,r21
   8e9e8:	003fde06 	br	8e964 <_fpadd_parts+0x1c8>
   8e9ec:	01800044 	movi	r6,1
   8e9f0:	500497fa 	slli	r2,r10,31
   8e9f4:	4808d07a 	srli	r4,r9,1
   8e9f8:	518ad83a 	srl	r5,r10,r6
   8e9fc:	a2000217 	ldw	r8,8(r20)
   8ea00:	1108b03a 	or	r4,r2,r4
   8ea04:	0007883a 	mov	r3,zero
   8ea08:	4984703a 	and	r2,r9,r6
   8ea0c:	208cb03a 	or	r6,r4,r2
   8ea10:	28ceb03a 	or	r7,r5,r3
   8ea14:	42000044 	addi	r8,r8,1
   8ea18:	a027883a 	mov	r19,r20
   8ea1c:	a1c00415 	stw	r7,16(r20)
   8ea20:	a2000215 	stw	r8,8(r20)
   8ea24:	a1800315 	stw	r6,12(r20)
   8ea28:	003fce06 	br	8e964 <_fpadd_parts+0x1c8>
   8ea2c:	8bc5c83a 	sub	r2,r17,r15
   8ea30:	8889803a 	cmpltu	r4,r17,r2
   8ea34:	9407c83a 	sub	r3,r18,r16
   8ea38:	1909c83a 	sub	r4,r3,r4
   8ea3c:	100d883a 	mov	r6,r2
   8ea40:	200f883a 	mov	r7,r4
   8ea44:	003f9906 	br	8e8ac <_fpadd_parts+0x110>
   8ea48:	7c45883a 	add	r2,r15,r17
   8ea4c:	13c9803a 	cmpltu	r4,r2,r15
   8ea50:	8487883a 	add	r3,r16,r18
   8ea54:	20c9883a 	add	r4,r4,r3
   8ea58:	a1400115 	stw	r5,4(r20)
   8ea5c:	a5c00215 	stw	r23,8(r20)
   8ea60:	a0800315 	stw	r2,12(r20)
   8ea64:	a1000415 	stw	r4,16(r20)
   8ea68:	003fb606 	br	8e944 <_fpadd_parts+0x1a8>
   8ea6c:	001f883a 	mov	r15,zero
   8ea70:	0021883a 	mov	r16,zero
   8ea74:	003f8306 	br	8e884 <_fpadd_parts+0xe8>
   8ea78:	018dc83a 	sub	r6,zero,r6
   8ea7c:	003f6706 	br	8e81c <_fpadd_parts+0x80>
   8ea80:	00bfff84 	movi	r2,-2
   8ea84:	117faf36 	bltu	r2,r5,8e944 <_fpadd_parts+0x1a8>
   8ea88:	003f9806 	br	8e8ec <_fpadd_parts+0x150>
   8ea8c:	0005883a 	mov	r2,zero
   8ea90:	1189c83a 	sub	r4,r2,r6
   8ea94:	1105803a 	cmpltu	r2,r2,r4
   8ea98:	01cbc83a 	sub	r5,zero,r7
   8ea9c:	2885c83a 	sub	r2,r5,r2
   8eaa0:	01800044 	movi	r6,1
   8eaa4:	a1800115 	stw	r6,4(r20)
   8eaa8:	a5c00215 	stw	r23,8(r20)
   8eaac:	a1000315 	stw	r4,12(r20)
   8eab0:	a0800415 	stw	r2,16(r20)
   8eab4:	003f8206 	br	8e8c0 <_fpadd_parts+0x124>
   8eab8:	203f7226 	beq	r4,zero,8e884 <_fpadd_parts+0xe8>
   8eabc:	35bff804 	addi	r22,r6,-32
   8eac0:	b9af883a 	add	r23,r23,r6
   8eac4:	b0003116 	blt	r22,zero,8eb8c <_fpadd_parts+0x3f0>
   8eac8:	959ad83a 	srl	r13,r18,r22
   8eacc:	001d883a 	mov	r14,zero
   8ead0:	000f883a 	mov	r7,zero
   8ead4:	01000044 	movi	r4,1
   8ead8:	0011883a 	mov	r8,zero
   8eadc:	b0002516 	blt	r22,zero,8eb74 <_fpadd_parts+0x3d8>
   8eae0:	2594983a 	sll	r10,r4,r22
   8eae4:	0013883a 	mov	r9,zero
   8eae8:	00bfffc4 	movi	r2,-1
   8eaec:	4889883a 	add	r4,r9,r2
   8eaf0:	508b883a 	add	r5,r10,r2
   8eaf4:	224d803a 	cmpltu	r6,r4,r9
   8eaf8:	314b883a 	add	r5,r6,r5
   8eafc:	8904703a 	and	r2,r17,r4
   8eb00:	9146703a 	and	r3,r18,r5
   8eb04:	10c4b03a 	or	r2,r2,r3
   8eb08:	10000226 	beq	r2,zero,8eb14 <_fpadd_parts+0x378>
   8eb0c:	01c00044 	movi	r7,1
   8eb10:	0011883a 	mov	r8,zero
   8eb14:	69e2b03a 	or	r17,r13,r7
   8eb18:	7224b03a 	or	r18,r14,r8
   8eb1c:	003f5906 	br	8e884 <_fpadd_parts+0xe8>
   8eb20:	8407883a 	add	r3,r16,r16
   8eb24:	008007c4 	movi	r2,31
   8eb28:	1185c83a 	sub	r2,r2,r6
   8eb2c:	1886983a 	sll	r3,r3,r2
   8eb30:	7996d83a 	srl	r11,r15,r6
   8eb34:	8198d83a 	srl	r12,r16,r6
   8eb38:	1ad6b03a 	or	r11,r3,r11
   8eb3c:	003f3e06 	br	8e838 <_fpadd_parts+0x9c>
   8eb40:	2006d07a 	srli	r3,r4,1
   8eb44:	008007c4 	movi	r2,31
   8eb48:	1185c83a 	sub	r2,r2,r6
   8eb4c:	1890d83a 	srl	r8,r3,r2
   8eb50:	218e983a 	sll	r7,r4,r6
   8eb54:	003f3e06 	br	8e850 <_fpadd_parts+0xb4>
   8eb58:	113f821e 	bne	r2,r4,8e964 <_fpadd_parts+0x1c8>
   8eb5c:	28c00117 	ldw	r3,4(r5)
   8eb60:	98800117 	ldw	r2,4(r19)
   8eb64:	10ff7f26 	beq	r2,r3,8e964 <_fpadd_parts+0x1c8>
   8eb68:	04c00274 	movhi	r19,9
   8eb6c:	9cd18e04 	addi	r19,r19,17976
   8eb70:	003f7c06 	br	8e964 <_fpadd_parts+0x1c8>
   8eb74:	2006d07a 	srli	r3,r4,1
   8eb78:	008007c4 	movi	r2,31
   8eb7c:	1185c83a 	sub	r2,r2,r6
   8eb80:	1894d83a 	srl	r10,r3,r2
   8eb84:	2192983a 	sll	r9,r4,r6
   8eb88:	003fd706 	br	8eae8 <_fpadd_parts+0x34c>
   8eb8c:	9487883a 	add	r3,r18,r18
   8eb90:	008007c4 	movi	r2,31
   8eb94:	1185c83a 	sub	r2,r2,r6
   8eb98:	1886983a 	sll	r3,r3,r2
   8eb9c:	899ad83a 	srl	r13,r17,r6
   8eba0:	919cd83a 	srl	r14,r18,r6
   8eba4:	1b5ab03a 	or	r13,r3,r13
   8eba8:	003fc906 	br	8ead0 <_fpadd_parts+0x334>

0008ebac <__subdf3>:
   8ebac:	deffea04 	addi	sp,sp,-88
   8ebb0:	dcc01415 	stw	r19,80(sp)
   8ebb4:	dcc00404 	addi	r19,sp,16
   8ebb8:	2011883a 	mov	r8,r4
   8ebbc:	2813883a 	mov	r9,r5
   8ebc0:	dc401315 	stw	r17,76(sp)
   8ebc4:	d809883a 	mov	r4,sp
   8ebc8:	980b883a 	mov	r5,r19
   8ebcc:	dc400904 	addi	r17,sp,36
   8ebd0:	dfc01515 	stw	ra,84(sp)
   8ebd4:	da400115 	stw	r9,4(sp)
   8ebd8:	d9c00315 	stw	r7,12(sp)
   8ebdc:	da000015 	stw	r8,0(sp)
   8ebe0:	d9800215 	stw	r6,8(sp)
   8ebe4:	008fef40 	call	8fef4 <__unpack_d>
   8ebe8:	d9000204 	addi	r4,sp,8
   8ebec:	880b883a 	mov	r5,r17
   8ebf0:	008fef40 	call	8fef4 <__unpack_d>
   8ebf4:	d8800a17 	ldw	r2,40(sp)
   8ebf8:	880b883a 	mov	r5,r17
   8ebfc:	9809883a 	mov	r4,r19
   8ec00:	d9800e04 	addi	r6,sp,56
   8ec04:	1080005c 	xori	r2,r2,1
   8ec08:	d8800a15 	stw	r2,40(sp)
   8ec0c:	008e79c0 	call	8e79c <_fpadd_parts>
   8ec10:	1009883a 	mov	r4,r2
   8ec14:	008fbe00 	call	8fbe0 <__pack_d>
   8ec18:	dfc01517 	ldw	ra,84(sp)
   8ec1c:	dcc01417 	ldw	r19,80(sp)
   8ec20:	dc401317 	ldw	r17,76(sp)
   8ec24:	dec01604 	addi	sp,sp,88
   8ec28:	f800283a 	ret

0008ec2c <__adddf3>:
   8ec2c:	deffea04 	addi	sp,sp,-88
   8ec30:	dcc01415 	stw	r19,80(sp)
   8ec34:	dcc00404 	addi	r19,sp,16
   8ec38:	2011883a 	mov	r8,r4
   8ec3c:	2813883a 	mov	r9,r5
   8ec40:	dc401315 	stw	r17,76(sp)
   8ec44:	d809883a 	mov	r4,sp
   8ec48:	980b883a 	mov	r5,r19
   8ec4c:	dc400904 	addi	r17,sp,36
   8ec50:	dfc01515 	stw	ra,84(sp)
   8ec54:	da400115 	stw	r9,4(sp)
   8ec58:	d9c00315 	stw	r7,12(sp)
   8ec5c:	da000015 	stw	r8,0(sp)
   8ec60:	d9800215 	stw	r6,8(sp)
   8ec64:	008fef40 	call	8fef4 <__unpack_d>
   8ec68:	d9000204 	addi	r4,sp,8
   8ec6c:	880b883a 	mov	r5,r17
   8ec70:	008fef40 	call	8fef4 <__unpack_d>
   8ec74:	d9800e04 	addi	r6,sp,56
   8ec78:	9809883a 	mov	r4,r19
   8ec7c:	880b883a 	mov	r5,r17
   8ec80:	008e79c0 	call	8e79c <_fpadd_parts>
   8ec84:	1009883a 	mov	r4,r2
   8ec88:	008fbe00 	call	8fbe0 <__pack_d>
   8ec8c:	dfc01517 	ldw	ra,84(sp)
   8ec90:	dcc01417 	ldw	r19,80(sp)
   8ec94:	dc401317 	ldw	r17,76(sp)
   8ec98:	dec01604 	addi	sp,sp,88
   8ec9c:	f800283a 	ret

0008eca0 <__muldf3>:
   8eca0:	deffe004 	addi	sp,sp,-128
   8eca4:	dc401815 	stw	r17,96(sp)
   8eca8:	dc400404 	addi	r17,sp,16
   8ecac:	2011883a 	mov	r8,r4
   8ecb0:	2813883a 	mov	r9,r5
   8ecb4:	dc001715 	stw	r16,92(sp)
   8ecb8:	d809883a 	mov	r4,sp
   8ecbc:	880b883a 	mov	r5,r17
   8ecc0:	dc000904 	addi	r16,sp,36
   8ecc4:	dfc01f15 	stw	ra,124(sp)
   8ecc8:	da400115 	stw	r9,4(sp)
   8eccc:	d9c00315 	stw	r7,12(sp)
   8ecd0:	da000015 	stw	r8,0(sp)
   8ecd4:	d9800215 	stw	r6,8(sp)
   8ecd8:	ddc01e15 	stw	r23,120(sp)
   8ecdc:	dd801d15 	stw	r22,116(sp)
   8ece0:	dd401c15 	stw	r21,112(sp)
   8ece4:	dd001b15 	stw	r20,108(sp)
   8ece8:	dcc01a15 	stw	r19,104(sp)
   8ecec:	dc801915 	stw	r18,100(sp)
   8ecf0:	008fef40 	call	8fef4 <__unpack_d>
   8ecf4:	d9000204 	addi	r4,sp,8
   8ecf8:	800b883a 	mov	r5,r16
   8ecfc:	008fef40 	call	8fef4 <__unpack_d>
   8ed00:	d9000417 	ldw	r4,16(sp)
   8ed04:	00800044 	movi	r2,1
   8ed08:	1100102e 	bgeu	r2,r4,8ed4c <__muldf3+0xac>
   8ed0c:	d8c00917 	ldw	r3,36(sp)
   8ed10:	10c0062e 	bgeu	r2,r3,8ed2c <__muldf3+0x8c>
   8ed14:	00800104 	movi	r2,4
   8ed18:	20800a26 	beq	r4,r2,8ed44 <__muldf3+0xa4>
   8ed1c:	1880cc26 	beq	r3,r2,8f050 <__muldf3+0x3b0>
   8ed20:	00800084 	movi	r2,2
   8ed24:	20800926 	beq	r4,r2,8ed4c <__muldf3+0xac>
   8ed28:	1880191e 	bne	r3,r2,8ed90 <__muldf3+0xf0>
   8ed2c:	d8c00a17 	ldw	r3,40(sp)
   8ed30:	d8800517 	ldw	r2,20(sp)
   8ed34:	8009883a 	mov	r4,r16
   8ed38:	10c4c03a 	cmpne	r2,r2,r3
   8ed3c:	d8800a15 	stw	r2,40(sp)
   8ed40:	00000706 	br	8ed60 <__muldf3+0xc0>
   8ed44:	00800084 	movi	r2,2
   8ed48:	1880c326 	beq	r3,r2,8f058 <__muldf3+0x3b8>
   8ed4c:	d8800517 	ldw	r2,20(sp)
   8ed50:	d8c00a17 	ldw	r3,40(sp)
   8ed54:	8809883a 	mov	r4,r17
   8ed58:	10c4c03a 	cmpne	r2,r2,r3
   8ed5c:	d8800515 	stw	r2,20(sp)
   8ed60:	008fbe00 	call	8fbe0 <__pack_d>
   8ed64:	dfc01f17 	ldw	ra,124(sp)
   8ed68:	ddc01e17 	ldw	r23,120(sp)
   8ed6c:	dd801d17 	ldw	r22,116(sp)
   8ed70:	dd401c17 	ldw	r21,112(sp)
   8ed74:	dd001b17 	ldw	r20,108(sp)
   8ed78:	dcc01a17 	ldw	r19,104(sp)
   8ed7c:	dc801917 	ldw	r18,100(sp)
   8ed80:	dc401817 	ldw	r17,96(sp)
   8ed84:	dc001717 	ldw	r16,92(sp)
   8ed88:	dec02004 	addi	sp,sp,128
   8ed8c:	f800283a 	ret
   8ed90:	dd800717 	ldw	r22,28(sp)
   8ed94:	dc800c17 	ldw	r18,48(sp)
   8ed98:	002b883a 	mov	r21,zero
   8ed9c:	0023883a 	mov	r17,zero
   8eda0:	a80b883a 	mov	r5,r21
   8eda4:	b00d883a 	mov	r6,r22
   8eda8:	880f883a 	mov	r7,r17
   8edac:	ddc00817 	ldw	r23,32(sp)
   8edb0:	dcc00d17 	ldw	r19,52(sp)
   8edb4:	9009883a 	mov	r4,r18
   8edb8:	008d7a00 	call	8d7a0 <__muldi3>
   8edbc:	001b883a 	mov	r13,zero
   8edc0:	680f883a 	mov	r7,r13
   8edc4:	b009883a 	mov	r4,r22
   8edc8:	000b883a 	mov	r5,zero
   8edcc:	980d883a 	mov	r6,r19
   8edd0:	b82d883a 	mov	r22,r23
   8edd4:	002f883a 	mov	r23,zero
   8edd8:	db401615 	stw	r13,88(sp)
   8eddc:	d8801315 	stw	r2,76(sp)
   8ede0:	d8c01415 	stw	r3,80(sp)
   8ede4:	dcc01515 	stw	r19,84(sp)
   8ede8:	008d7a00 	call	8d7a0 <__muldi3>
   8edec:	b00d883a 	mov	r6,r22
   8edf0:	000b883a 	mov	r5,zero
   8edf4:	9009883a 	mov	r4,r18
   8edf8:	b80f883a 	mov	r7,r23
   8edfc:	1021883a 	mov	r16,r2
   8ee00:	1823883a 	mov	r17,r3
   8ee04:	008d7a00 	call	8d7a0 <__muldi3>
   8ee08:	8085883a 	add	r2,r16,r2
   8ee0c:	140d803a 	cmpltu	r6,r2,r16
   8ee10:	88c7883a 	add	r3,r17,r3
   8ee14:	30cd883a 	add	r6,r6,r3
   8ee18:	1029883a 	mov	r20,r2
   8ee1c:	302b883a 	mov	r21,r6
   8ee20:	da801317 	ldw	r10,76(sp)
   8ee24:	dac01417 	ldw	r11,80(sp)
   8ee28:	db001517 	ldw	r12,84(sp)
   8ee2c:	db401617 	ldw	r13,88(sp)
   8ee30:	3440612e 	bgeu	r6,r17,8efb8 <__muldf3+0x318>
   8ee34:	0009883a 	mov	r4,zero
   8ee38:	5105883a 	add	r2,r10,r4
   8ee3c:	128d803a 	cmpltu	r6,r2,r10
   8ee40:	5d07883a 	add	r3,r11,r20
   8ee44:	30cd883a 	add	r6,r6,r3
   8ee48:	0021883a 	mov	r16,zero
   8ee4c:	04400044 	movi	r17,1
   8ee50:	1025883a 	mov	r18,r2
   8ee54:	3027883a 	mov	r19,r6
   8ee58:	32c06236 	bltu	r6,r11,8efe4 <__muldf3+0x344>
   8ee5c:	59807a26 	beq	r11,r6,8f048 <__muldf3+0x3a8>
   8ee60:	680b883a 	mov	r5,r13
   8ee64:	b80f883a 	mov	r7,r23
   8ee68:	6009883a 	mov	r4,r12
   8ee6c:	b00d883a 	mov	r6,r22
   8ee70:	008d7a00 	call	8d7a0 <__muldi3>
   8ee74:	1009883a 	mov	r4,r2
   8ee78:	000f883a 	mov	r7,zero
   8ee7c:	1545883a 	add	r2,r2,r21
   8ee80:	1111803a 	cmpltu	r8,r2,r4
   8ee84:	19c7883a 	add	r3,r3,r7
   8ee88:	40c7883a 	add	r3,r8,r3
   8ee8c:	88cb883a 	add	r5,r17,r3
   8ee90:	d8c00617 	ldw	r3,24(sp)
   8ee94:	8089883a 	add	r4,r16,r2
   8ee98:	d8800b17 	ldw	r2,44(sp)
   8ee9c:	18c00104 	addi	r3,r3,4
   8eea0:	240d803a 	cmpltu	r6,r4,r16
   8eea4:	10c7883a 	add	r3,r2,r3
   8eea8:	2013883a 	mov	r9,r4
   8eeac:	d8800a17 	ldw	r2,40(sp)
   8eeb0:	d9000517 	ldw	r4,20(sp)
   8eeb4:	314d883a 	add	r6,r6,r5
   8eeb8:	3015883a 	mov	r10,r6
   8eebc:	2088c03a 	cmpne	r4,r4,r2
   8eec0:	00880034 	movhi	r2,8192
   8eec4:	10bfffc4 	addi	r2,r2,-1
   8eec8:	d9000f15 	stw	r4,60(sp)
   8eecc:	d8c01015 	stw	r3,64(sp)
   8eed0:	1180162e 	bgeu	r2,r6,8ef2c <__muldf3+0x28c>
   8eed4:	1811883a 	mov	r8,r3
   8eed8:	101f883a 	mov	r15,r2
   8eedc:	980497fa 	slli	r2,r19,31
   8eee0:	9016d07a 	srli	r11,r18,1
   8eee4:	500697fa 	slli	r3,r10,31
   8eee8:	480cd07a 	srli	r6,r9,1
   8eeec:	500ed07a 	srli	r7,r10,1
   8eef0:	12d6b03a 	or	r11,r2,r11
   8eef4:	00800044 	movi	r2,1
   8eef8:	198cb03a 	or	r6,r3,r6
   8eefc:	4888703a 	and	r4,r9,r2
   8ef00:	9818d07a 	srli	r12,r19,1
   8ef04:	001b883a 	mov	r13,zero
   8ef08:	03a00034 	movhi	r14,32768
   8ef0c:	3013883a 	mov	r9,r6
   8ef10:	3815883a 	mov	r10,r7
   8ef14:	4091883a 	add	r8,r8,r2
   8ef18:	20000226 	beq	r4,zero,8ef24 <__muldf3+0x284>
   8ef1c:	5b64b03a 	or	r18,r11,r13
   8ef20:	63a6b03a 	or	r19,r12,r14
   8ef24:	7abfed36 	bltu	r15,r10,8eedc <__muldf3+0x23c>
   8ef28:	da001015 	stw	r8,64(sp)
   8ef2c:	00840034 	movhi	r2,4096
   8ef30:	10bfffc4 	addi	r2,r2,-1
   8ef34:	12801436 	bltu	r2,r10,8ef88 <__muldf3+0x2e8>
   8ef38:	da001017 	ldw	r8,64(sp)
   8ef3c:	101f883a 	mov	r15,r2
   8ef40:	4a45883a 	add	r2,r9,r9
   8ef44:	124d803a 	cmpltu	r6,r2,r9
   8ef48:	5287883a 	add	r3,r10,r10
   8ef4c:	9497883a 	add	r11,r18,r18
   8ef50:	5c8f803a 	cmpltu	r7,r11,r18
   8ef54:	9cd9883a 	add	r12,r19,r19
   8ef58:	01000044 	movi	r4,1
   8ef5c:	30cd883a 	add	r6,r6,r3
   8ef60:	3b0f883a 	add	r7,r7,r12
   8ef64:	423fffc4 	addi	r8,r8,-1
   8ef68:	1013883a 	mov	r9,r2
   8ef6c:	3015883a 	mov	r10,r6
   8ef70:	111ab03a 	or	r13,r2,r4
   8ef74:	98003016 	blt	r19,zero,8f038 <__muldf3+0x398>
   8ef78:	5825883a 	mov	r18,r11
   8ef7c:	3827883a 	mov	r19,r7
   8ef80:	7abfef2e 	bgeu	r15,r10,8ef40 <__muldf3+0x2a0>
   8ef84:	da001015 	stw	r8,64(sp)
   8ef88:	00803fc4 	movi	r2,255
   8ef8c:	488e703a 	and	r7,r9,r2
   8ef90:	00802004 	movi	r2,128
   8ef94:	0007883a 	mov	r3,zero
   8ef98:	0011883a 	mov	r8,zero
   8ef9c:	38801826 	beq	r7,r2,8f000 <__muldf3+0x360>
   8efa0:	008000c4 	movi	r2,3
   8efa4:	d9000e04 	addi	r4,sp,56
   8efa8:	da801215 	stw	r10,72(sp)
   8efac:	d8800e15 	stw	r2,56(sp)
   8efb0:	da401115 	stw	r9,68(sp)
   8efb4:	003f6a06 	br	8ed60 <__muldf3+0xc0>
   8efb8:	89802126 	beq	r17,r6,8f040 <__muldf3+0x3a0>
   8efbc:	0009883a 	mov	r4,zero
   8efc0:	5105883a 	add	r2,r10,r4
   8efc4:	128d803a 	cmpltu	r6,r2,r10
   8efc8:	5d07883a 	add	r3,r11,r20
   8efcc:	30cd883a 	add	r6,r6,r3
   8efd0:	0021883a 	mov	r16,zero
   8efd4:	0023883a 	mov	r17,zero
   8efd8:	1025883a 	mov	r18,r2
   8efdc:	3027883a 	mov	r19,r6
   8efe0:	32ff9e2e 	bgeu	r6,r11,8ee5c <__muldf3+0x1bc>
   8efe4:	00800044 	movi	r2,1
   8efe8:	8089883a 	add	r4,r16,r2
   8efec:	240d803a 	cmpltu	r6,r4,r16
   8eff0:	344d883a 	add	r6,r6,r17
   8eff4:	2021883a 	mov	r16,r4
   8eff8:	3023883a 	mov	r17,r6
   8effc:	003f9806 	br	8ee60 <__muldf3+0x1c0>
   8f000:	403fe71e 	bne	r8,zero,8efa0 <__muldf3+0x300>
   8f004:	01004004 	movi	r4,256
   8f008:	4904703a 	and	r2,r9,r4
   8f00c:	10c4b03a 	or	r2,r2,r3
   8f010:	103fe31e 	bne	r2,zero,8efa0 <__muldf3+0x300>
   8f014:	94c4b03a 	or	r2,r18,r19
   8f018:	103fe126 	beq	r2,zero,8efa0 <__muldf3+0x300>
   8f01c:	49c5883a 	add	r2,r9,r7
   8f020:	1251803a 	cmpltu	r8,r2,r9
   8f024:	4291883a 	add	r8,r8,r10
   8f028:	013fc004 	movi	r4,-256
   8f02c:	1112703a 	and	r9,r2,r4
   8f030:	4015883a 	mov	r10,r8
   8f034:	003fda06 	br	8efa0 <__muldf3+0x300>
   8f038:	6813883a 	mov	r9,r13
   8f03c:	003fce06 	br	8ef78 <__muldf3+0x2d8>
   8f040:	143f7c36 	bltu	r2,r16,8ee34 <__muldf3+0x194>
   8f044:	003fdd06 	br	8efbc <__muldf3+0x31c>
   8f048:	12bf852e 	bgeu	r2,r10,8ee60 <__muldf3+0x1c0>
   8f04c:	003fe506 	br	8efe4 <__muldf3+0x344>
   8f050:	00800084 	movi	r2,2
   8f054:	20bf351e 	bne	r4,r2,8ed2c <__muldf3+0x8c>
   8f058:	01000274 	movhi	r4,9
   8f05c:	21118e04 	addi	r4,r4,17976
   8f060:	003f3f06 	br	8ed60 <__muldf3+0xc0>

0008f064 <__divdf3>:
   8f064:	deffed04 	addi	sp,sp,-76
   8f068:	dcc01115 	stw	r19,68(sp)
   8f06c:	dcc00404 	addi	r19,sp,16
   8f070:	2011883a 	mov	r8,r4
   8f074:	2813883a 	mov	r9,r5
   8f078:	dc000e15 	stw	r16,56(sp)
   8f07c:	d809883a 	mov	r4,sp
   8f080:	980b883a 	mov	r5,r19
   8f084:	dc000904 	addi	r16,sp,36
   8f088:	dfc01215 	stw	ra,72(sp)
   8f08c:	da400115 	stw	r9,4(sp)
   8f090:	d9c00315 	stw	r7,12(sp)
   8f094:	da000015 	stw	r8,0(sp)
   8f098:	d9800215 	stw	r6,8(sp)
   8f09c:	dc801015 	stw	r18,64(sp)
   8f0a0:	dc400f15 	stw	r17,60(sp)
   8f0a4:	008fef40 	call	8fef4 <__unpack_d>
   8f0a8:	d9000204 	addi	r4,sp,8
   8f0ac:	800b883a 	mov	r5,r16
   8f0b0:	008fef40 	call	8fef4 <__unpack_d>
   8f0b4:	d9000417 	ldw	r4,16(sp)
   8f0b8:	00800044 	movi	r2,1
   8f0bc:	11000b2e 	bgeu	r2,r4,8f0ec <__divdf3+0x88>
   8f0c0:	d9400917 	ldw	r5,36(sp)
   8f0c4:	1140762e 	bgeu	r2,r5,8f2a0 <__divdf3+0x23c>
   8f0c8:	d8800517 	ldw	r2,20(sp)
   8f0cc:	d8c00a17 	ldw	r3,40(sp)
   8f0d0:	01800104 	movi	r6,4
   8f0d4:	10c4f03a 	xor	r2,r2,r3
   8f0d8:	d8800515 	stw	r2,20(sp)
   8f0dc:	21800226 	beq	r4,r6,8f0e8 <__divdf3+0x84>
   8f0e0:	00800084 	movi	r2,2
   8f0e4:	2080141e 	bne	r4,r2,8f138 <__divdf3+0xd4>
   8f0e8:	29000926 	beq	r5,r4,8f110 <__divdf3+0xac>
   8f0ec:	9809883a 	mov	r4,r19
   8f0f0:	008fbe00 	call	8fbe0 <__pack_d>
   8f0f4:	dfc01217 	ldw	ra,72(sp)
   8f0f8:	dcc01117 	ldw	r19,68(sp)
   8f0fc:	dc801017 	ldw	r18,64(sp)
   8f100:	dc400f17 	ldw	r17,60(sp)
   8f104:	dc000e17 	ldw	r16,56(sp)
   8f108:	dec01304 	addi	sp,sp,76
   8f10c:	f800283a 	ret
   8f110:	01000274 	movhi	r4,9
   8f114:	21118e04 	addi	r4,r4,17976
   8f118:	008fbe00 	call	8fbe0 <__pack_d>
   8f11c:	dfc01217 	ldw	ra,72(sp)
   8f120:	dcc01117 	ldw	r19,68(sp)
   8f124:	dc801017 	ldw	r18,64(sp)
   8f128:	dc400f17 	ldw	r17,60(sp)
   8f12c:	dc000e17 	ldw	r16,56(sp)
   8f130:	dec01304 	addi	sp,sp,76
   8f134:	f800283a 	ret
   8f138:	29805b26 	beq	r5,r6,8f2a8 <__divdf3+0x244>
   8f13c:	28802d26 	beq	r5,r2,8f1f4 <__divdf3+0x190>
   8f140:	d8c00617 	ldw	r3,24(sp)
   8f144:	d8800b17 	ldw	r2,44(sp)
   8f148:	d9c00817 	ldw	r7,32(sp)
   8f14c:	dc400d17 	ldw	r17,52(sp)
   8f150:	188bc83a 	sub	r5,r3,r2
   8f154:	d9800717 	ldw	r6,28(sp)
   8f158:	dc000c17 	ldw	r16,48(sp)
   8f15c:	d9400615 	stw	r5,24(sp)
   8f160:	3c403836 	bltu	r7,r17,8f244 <__divdf3+0x1e0>
   8f164:	89c03626 	beq	r17,r7,8f240 <__divdf3+0x1dc>
   8f168:	0015883a 	mov	r10,zero
   8f16c:	001d883a 	mov	r14,zero
   8f170:	02c40034 	movhi	r11,4096
   8f174:	001f883a 	mov	r15,zero
   8f178:	003f883a 	mov	ra,zero
   8f17c:	04800f44 	movi	r18,61
   8f180:	00000f06 	br	8f1c0 <__divdf3+0x15c>
   8f184:	601d883a 	mov	r14,r12
   8f188:	681f883a 	mov	r15,r13
   8f18c:	400d883a 	mov	r6,r8
   8f190:	100f883a 	mov	r7,r2
   8f194:	3191883a 	add	r8,r6,r6
   8f198:	5808d07a 	srli	r4,r11,1
   8f19c:	4185803a 	cmpltu	r2,r8,r6
   8f1a0:	39d3883a 	add	r9,r7,r7
   8f1a4:	28c6b03a 	or	r3,r5,r3
   8f1a8:	1245883a 	add	r2,r2,r9
   8f1ac:	1815883a 	mov	r10,r3
   8f1b0:	2017883a 	mov	r11,r4
   8f1b4:	400d883a 	mov	r6,r8
   8f1b8:	100f883a 	mov	r7,r2
   8f1bc:	fc801726 	beq	ra,r18,8f21c <__divdf3+0x1b8>
   8f1c0:	580a97fa 	slli	r5,r11,31
   8f1c4:	5006d07a 	srli	r3,r10,1
   8f1c8:	ffc00044 	addi	ra,ra,1
   8f1cc:	3c7ff136 	bltu	r7,r17,8f194 <__divdf3+0x130>
   8f1d0:	3411c83a 	sub	r8,r6,r16
   8f1d4:	3205803a 	cmpltu	r2,r6,r8
   8f1d8:	3c53c83a 	sub	r9,r7,r17
   8f1dc:	7298b03a 	or	r12,r14,r10
   8f1e0:	7adab03a 	or	r13,r15,r11
   8f1e4:	4885c83a 	sub	r2,r9,r2
   8f1e8:	89ffe61e 	bne	r17,r7,8f184 <__divdf3+0x120>
   8f1ec:	343fe936 	bltu	r6,r16,8f194 <__divdf3+0x130>
   8f1f0:	003fe406 	br	8f184 <__divdf3+0x120>
   8f1f4:	9809883a 	mov	r4,r19
   8f1f8:	d9800415 	stw	r6,16(sp)
   8f1fc:	008fbe00 	call	8fbe0 <__pack_d>
   8f200:	dfc01217 	ldw	ra,72(sp)
   8f204:	dcc01117 	ldw	r19,68(sp)
   8f208:	dc801017 	ldw	r18,64(sp)
   8f20c:	dc400f17 	ldw	r17,60(sp)
   8f210:	dc000e17 	ldw	r16,56(sp)
   8f214:	dec01304 	addi	sp,sp,76
   8f218:	f800283a 	ret
   8f21c:	00803fc4 	movi	r2,255
   8f220:	7090703a 	and	r8,r14,r2
   8f224:	00802004 	movi	r2,128
   8f228:	0007883a 	mov	r3,zero
   8f22c:	0013883a 	mov	r9,zero
   8f230:	40800d26 	beq	r8,r2,8f268 <__divdf3+0x204>
   8f234:	dbc00815 	stw	r15,32(sp)
   8f238:	db800715 	stw	r14,28(sp)
   8f23c:	003fab06 	br	8f0ec <__divdf3+0x88>
   8f240:	343fc92e 	bgeu	r6,r16,8f168 <__divdf3+0x104>
   8f244:	3185883a 	add	r2,r6,r6
   8f248:	1189803a 	cmpltu	r4,r2,r6
   8f24c:	39c7883a 	add	r3,r7,r7
   8f250:	20c9883a 	add	r4,r4,r3
   8f254:	297fffc4 	addi	r5,r5,-1
   8f258:	100d883a 	mov	r6,r2
   8f25c:	200f883a 	mov	r7,r4
   8f260:	d9400615 	stw	r5,24(sp)
   8f264:	003fc006 	br	8f168 <__divdf3+0x104>
   8f268:	483ff21e 	bne	r9,zero,8f234 <__divdf3+0x1d0>
   8f26c:	01004004 	movi	r4,256
   8f270:	7104703a 	and	r2,r14,r4
   8f274:	10c4b03a 	or	r2,r2,r3
   8f278:	103fee1e 	bne	r2,zero,8f234 <__divdf3+0x1d0>
   8f27c:	31c4b03a 	or	r2,r6,r7
   8f280:	103fec26 	beq	r2,zero,8f234 <__divdf3+0x1d0>
   8f284:	7205883a 	add	r2,r14,r8
   8f288:	1391803a 	cmpltu	r8,r2,r14
   8f28c:	43d1883a 	add	r8,r8,r15
   8f290:	013fc004 	movi	r4,-256
   8f294:	111c703a 	and	r14,r2,r4
   8f298:	401f883a 	mov	r15,r8
   8f29c:	003fe506 	br	8f234 <__divdf3+0x1d0>
   8f2a0:	8009883a 	mov	r4,r16
   8f2a4:	003f9206 	br	8f0f0 <__divdf3+0x8c>
   8f2a8:	9809883a 	mov	r4,r19
   8f2ac:	d8000715 	stw	zero,28(sp)
   8f2b0:	d8000815 	stw	zero,32(sp)
   8f2b4:	d8000615 	stw	zero,24(sp)
   8f2b8:	003f8d06 	br	8f0f0 <__divdf3+0x8c>

0008f2bc <__eqdf2>:
   8f2bc:	deffef04 	addi	sp,sp,-68
   8f2c0:	dc400f15 	stw	r17,60(sp)
   8f2c4:	dc400404 	addi	r17,sp,16
   8f2c8:	2005883a 	mov	r2,r4
   8f2cc:	2807883a 	mov	r3,r5
   8f2d0:	dc000e15 	stw	r16,56(sp)
   8f2d4:	d809883a 	mov	r4,sp
   8f2d8:	880b883a 	mov	r5,r17
   8f2dc:	dc000904 	addi	r16,sp,36
   8f2e0:	d8c00115 	stw	r3,4(sp)
   8f2e4:	d8800015 	stw	r2,0(sp)
   8f2e8:	d9800215 	stw	r6,8(sp)
   8f2ec:	dfc01015 	stw	ra,64(sp)
   8f2f0:	d9c00315 	stw	r7,12(sp)
   8f2f4:	008fef40 	call	8fef4 <__unpack_d>
   8f2f8:	d9000204 	addi	r4,sp,8
   8f2fc:	800b883a 	mov	r5,r16
   8f300:	008fef40 	call	8fef4 <__unpack_d>
   8f304:	d8800417 	ldw	r2,16(sp)
   8f308:	00c00044 	movi	r3,1
   8f30c:	180d883a 	mov	r6,r3
   8f310:	1880062e 	bgeu	r3,r2,8f32c <__eqdf2+0x70>
   8f314:	d8800917 	ldw	r2,36(sp)
   8f318:	8809883a 	mov	r4,r17
   8f31c:	800b883a 	mov	r5,r16
   8f320:	1880022e 	bgeu	r3,r2,8f32c <__eqdf2+0x70>
   8f324:	009002c0 	call	9002c <__fpcmp_parts_d>
   8f328:	100d883a 	mov	r6,r2
   8f32c:	3005883a 	mov	r2,r6
   8f330:	dfc01017 	ldw	ra,64(sp)
   8f334:	dc400f17 	ldw	r17,60(sp)
   8f338:	dc000e17 	ldw	r16,56(sp)
   8f33c:	dec01104 	addi	sp,sp,68
   8f340:	f800283a 	ret

0008f344 <__nedf2>:
   8f344:	deffef04 	addi	sp,sp,-68
   8f348:	dc400f15 	stw	r17,60(sp)
   8f34c:	dc400404 	addi	r17,sp,16
   8f350:	2005883a 	mov	r2,r4
   8f354:	2807883a 	mov	r3,r5
   8f358:	dc000e15 	stw	r16,56(sp)
   8f35c:	d809883a 	mov	r4,sp
   8f360:	880b883a 	mov	r5,r17
   8f364:	dc000904 	addi	r16,sp,36
   8f368:	d8c00115 	stw	r3,4(sp)
   8f36c:	d8800015 	stw	r2,0(sp)
   8f370:	d9800215 	stw	r6,8(sp)
   8f374:	dfc01015 	stw	ra,64(sp)
   8f378:	d9c00315 	stw	r7,12(sp)
   8f37c:	008fef40 	call	8fef4 <__unpack_d>
   8f380:	d9000204 	addi	r4,sp,8
   8f384:	800b883a 	mov	r5,r16
   8f388:	008fef40 	call	8fef4 <__unpack_d>
   8f38c:	d8800417 	ldw	r2,16(sp)
   8f390:	00c00044 	movi	r3,1
   8f394:	180d883a 	mov	r6,r3
   8f398:	1880062e 	bgeu	r3,r2,8f3b4 <__nedf2+0x70>
   8f39c:	d8800917 	ldw	r2,36(sp)
   8f3a0:	8809883a 	mov	r4,r17
   8f3a4:	800b883a 	mov	r5,r16
   8f3a8:	1880022e 	bgeu	r3,r2,8f3b4 <__nedf2+0x70>
   8f3ac:	009002c0 	call	9002c <__fpcmp_parts_d>
   8f3b0:	100d883a 	mov	r6,r2
   8f3b4:	3005883a 	mov	r2,r6
   8f3b8:	dfc01017 	ldw	ra,64(sp)
   8f3bc:	dc400f17 	ldw	r17,60(sp)
   8f3c0:	dc000e17 	ldw	r16,56(sp)
   8f3c4:	dec01104 	addi	sp,sp,68
   8f3c8:	f800283a 	ret

0008f3cc <__gtdf2>:
   8f3cc:	deffef04 	addi	sp,sp,-68
   8f3d0:	dc400f15 	stw	r17,60(sp)
   8f3d4:	dc400404 	addi	r17,sp,16
   8f3d8:	2005883a 	mov	r2,r4
   8f3dc:	2807883a 	mov	r3,r5
   8f3e0:	dc000e15 	stw	r16,56(sp)
   8f3e4:	d809883a 	mov	r4,sp
   8f3e8:	880b883a 	mov	r5,r17
   8f3ec:	dc000904 	addi	r16,sp,36
   8f3f0:	d8c00115 	stw	r3,4(sp)
   8f3f4:	d8800015 	stw	r2,0(sp)
   8f3f8:	d9800215 	stw	r6,8(sp)
   8f3fc:	dfc01015 	stw	ra,64(sp)
   8f400:	d9c00315 	stw	r7,12(sp)
   8f404:	008fef40 	call	8fef4 <__unpack_d>
   8f408:	d9000204 	addi	r4,sp,8
   8f40c:	800b883a 	mov	r5,r16
   8f410:	008fef40 	call	8fef4 <__unpack_d>
   8f414:	d8800417 	ldw	r2,16(sp)
   8f418:	00c00044 	movi	r3,1
   8f41c:	01bfffc4 	movi	r6,-1
   8f420:	1880062e 	bgeu	r3,r2,8f43c <__gtdf2+0x70>
   8f424:	d8800917 	ldw	r2,36(sp)
   8f428:	8809883a 	mov	r4,r17
   8f42c:	800b883a 	mov	r5,r16
   8f430:	1880022e 	bgeu	r3,r2,8f43c <__gtdf2+0x70>
   8f434:	009002c0 	call	9002c <__fpcmp_parts_d>
   8f438:	100d883a 	mov	r6,r2
   8f43c:	3005883a 	mov	r2,r6
   8f440:	dfc01017 	ldw	ra,64(sp)
   8f444:	dc400f17 	ldw	r17,60(sp)
   8f448:	dc000e17 	ldw	r16,56(sp)
   8f44c:	dec01104 	addi	sp,sp,68
   8f450:	f800283a 	ret

0008f454 <__gedf2>:
   8f454:	deffef04 	addi	sp,sp,-68
   8f458:	dc400f15 	stw	r17,60(sp)
   8f45c:	dc400404 	addi	r17,sp,16
   8f460:	2005883a 	mov	r2,r4
   8f464:	2807883a 	mov	r3,r5
   8f468:	dc000e15 	stw	r16,56(sp)
   8f46c:	d809883a 	mov	r4,sp
   8f470:	880b883a 	mov	r5,r17
   8f474:	dc000904 	addi	r16,sp,36
   8f478:	d8c00115 	stw	r3,4(sp)
   8f47c:	d8800015 	stw	r2,0(sp)
   8f480:	d9800215 	stw	r6,8(sp)
   8f484:	dfc01015 	stw	ra,64(sp)
   8f488:	d9c00315 	stw	r7,12(sp)
   8f48c:	008fef40 	call	8fef4 <__unpack_d>
   8f490:	d9000204 	addi	r4,sp,8
   8f494:	800b883a 	mov	r5,r16
   8f498:	008fef40 	call	8fef4 <__unpack_d>
   8f49c:	d8800417 	ldw	r2,16(sp)
   8f4a0:	00c00044 	movi	r3,1
   8f4a4:	01bfffc4 	movi	r6,-1
   8f4a8:	1880062e 	bgeu	r3,r2,8f4c4 <__gedf2+0x70>
   8f4ac:	d8800917 	ldw	r2,36(sp)
   8f4b0:	8809883a 	mov	r4,r17
   8f4b4:	800b883a 	mov	r5,r16
   8f4b8:	1880022e 	bgeu	r3,r2,8f4c4 <__gedf2+0x70>
   8f4bc:	009002c0 	call	9002c <__fpcmp_parts_d>
   8f4c0:	100d883a 	mov	r6,r2
   8f4c4:	3005883a 	mov	r2,r6
   8f4c8:	dfc01017 	ldw	ra,64(sp)
   8f4cc:	dc400f17 	ldw	r17,60(sp)
   8f4d0:	dc000e17 	ldw	r16,56(sp)
   8f4d4:	dec01104 	addi	sp,sp,68
   8f4d8:	f800283a 	ret

0008f4dc <__ltdf2>:
   8f4dc:	deffef04 	addi	sp,sp,-68
   8f4e0:	dc400f15 	stw	r17,60(sp)
   8f4e4:	dc400404 	addi	r17,sp,16
   8f4e8:	2005883a 	mov	r2,r4
   8f4ec:	2807883a 	mov	r3,r5
   8f4f0:	dc000e15 	stw	r16,56(sp)
   8f4f4:	d809883a 	mov	r4,sp
   8f4f8:	880b883a 	mov	r5,r17
   8f4fc:	dc000904 	addi	r16,sp,36
   8f500:	d8c00115 	stw	r3,4(sp)
   8f504:	d8800015 	stw	r2,0(sp)
   8f508:	d9800215 	stw	r6,8(sp)
   8f50c:	dfc01015 	stw	ra,64(sp)
   8f510:	d9c00315 	stw	r7,12(sp)
   8f514:	008fef40 	call	8fef4 <__unpack_d>
   8f518:	d9000204 	addi	r4,sp,8
   8f51c:	800b883a 	mov	r5,r16
   8f520:	008fef40 	call	8fef4 <__unpack_d>
   8f524:	d8800417 	ldw	r2,16(sp)
   8f528:	00c00044 	movi	r3,1
   8f52c:	180d883a 	mov	r6,r3
   8f530:	1880062e 	bgeu	r3,r2,8f54c <__ltdf2+0x70>
   8f534:	d8800917 	ldw	r2,36(sp)
   8f538:	8809883a 	mov	r4,r17
   8f53c:	800b883a 	mov	r5,r16
   8f540:	1880022e 	bgeu	r3,r2,8f54c <__ltdf2+0x70>
   8f544:	009002c0 	call	9002c <__fpcmp_parts_d>
   8f548:	100d883a 	mov	r6,r2
   8f54c:	3005883a 	mov	r2,r6
   8f550:	dfc01017 	ldw	ra,64(sp)
   8f554:	dc400f17 	ldw	r17,60(sp)
   8f558:	dc000e17 	ldw	r16,56(sp)
   8f55c:	dec01104 	addi	sp,sp,68
   8f560:	f800283a 	ret

0008f564 <__ledf2>:
   8f564:	deffef04 	addi	sp,sp,-68
   8f568:	dc400f15 	stw	r17,60(sp)
   8f56c:	dc400404 	addi	r17,sp,16
   8f570:	2005883a 	mov	r2,r4
   8f574:	2807883a 	mov	r3,r5
   8f578:	dc000e15 	stw	r16,56(sp)
   8f57c:	d809883a 	mov	r4,sp
   8f580:	880b883a 	mov	r5,r17
   8f584:	dc000904 	addi	r16,sp,36
   8f588:	d8c00115 	stw	r3,4(sp)
   8f58c:	d8800015 	stw	r2,0(sp)
   8f590:	d9800215 	stw	r6,8(sp)
   8f594:	dfc01015 	stw	ra,64(sp)
   8f598:	d9c00315 	stw	r7,12(sp)
   8f59c:	008fef40 	call	8fef4 <__unpack_d>
   8f5a0:	d9000204 	addi	r4,sp,8
   8f5a4:	800b883a 	mov	r5,r16
   8f5a8:	008fef40 	call	8fef4 <__unpack_d>
   8f5ac:	d8800417 	ldw	r2,16(sp)
   8f5b0:	00c00044 	movi	r3,1
   8f5b4:	180d883a 	mov	r6,r3
   8f5b8:	1880062e 	bgeu	r3,r2,8f5d4 <__ledf2+0x70>
   8f5bc:	d8800917 	ldw	r2,36(sp)
   8f5c0:	8809883a 	mov	r4,r17
   8f5c4:	800b883a 	mov	r5,r16
   8f5c8:	1880022e 	bgeu	r3,r2,8f5d4 <__ledf2+0x70>
   8f5cc:	009002c0 	call	9002c <__fpcmp_parts_d>
   8f5d0:	100d883a 	mov	r6,r2
   8f5d4:	3005883a 	mov	r2,r6
   8f5d8:	dfc01017 	ldw	ra,64(sp)
   8f5dc:	dc400f17 	ldw	r17,60(sp)
   8f5e0:	dc000e17 	ldw	r16,56(sp)
   8f5e4:	dec01104 	addi	sp,sp,68
   8f5e8:	f800283a 	ret

0008f5ec <__floatsidf>:
   8f5ec:	2006d7fa 	srli	r3,r4,31
   8f5f0:	defff604 	addi	sp,sp,-40
   8f5f4:	008000c4 	movi	r2,3
   8f5f8:	dfc00915 	stw	ra,36(sp)
   8f5fc:	dcc00815 	stw	r19,32(sp)
   8f600:	dc800715 	stw	r18,28(sp)
   8f604:	dc400615 	stw	r17,24(sp)
   8f608:	dc000515 	stw	r16,20(sp)
   8f60c:	d8800015 	stw	r2,0(sp)
   8f610:	d8c00115 	stw	r3,4(sp)
   8f614:	20000f1e 	bne	r4,zero,8f654 <__floatsidf+0x68>
   8f618:	00800084 	movi	r2,2
   8f61c:	d8800015 	stw	r2,0(sp)
   8f620:	d809883a 	mov	r4,sp
   8f624:	008fbe00 	call	8fbe0 <__pack_d>
   8f628:	1009883a 	mov	r4,r2
   8f62c:	180b883a 	mov	r5,r3
   8f630:	2005883a 	mov	r2,r4
   8f634:	2807883a 	mov	r3,r5
   8f638:	dfc00917 	ldw	ra,36(sp)
   8f63c:	dcc00817 	ldw	r19,32(sp)
   8f640:	dc800717 	ldw	r18,28(sp)
   8f644:	dc400617 	ldw	r17,24(sp)
   8f648:	dc000517 	ldw	r16,20(sp)
   8f64c:	dec00a04 	addi	sp,sp,40
   8f650:	f800283a 	ret
   8f654:	00800f04 	movi	r2,60
   8f658:	1807003a 	cmpeq	r3,r3,zero
   8f65c:	d8800215 	stw	r2,8(sp)
   8f660:	18001126 	beq	r3,zero,8f6a8 <__floatsidf+0xbc>
   8f664:	0027883a 	mov	r19,zero
   8f668:	2025883a 	mov	r18,r4
   8f66c:	d9000315 	stw	r4,12(sp)
   8f670:	dcc00415 	stw	r19,16(sp)
   8f674:	008f9c40 	call	8f9c4 <__clzsi2>
   8f678:	11000744 	addi	r4,r2,29
   8f67c:	013fe80e 	bge	zero,r4,8f620 <__floatsidf+0x34>
   8f680:	10bfff44 	addi	r2,r2,-3
   8f684:	10000c16 	blt	r2,zero,8f6b8 <__floatsidf+0xcc>
   8f688:	90a2983a 	sll	r17,r18,r2
   8f68c:	0021883a 	mov	r16,zero
   8f690:	d8800217 	ldw	r2,8(sp)
   8f694:	dc400415 	stw	r17,16(sp)
   8f698:	dc000315 	stw	r16,12(sp)
   8f69c:	1105c83a 	sub	r2,r2,r4
   8f6a0:	d8800215 	stw	r2,8(sp)
   8f6a4:	003fde06 	br	8f620 <__floatsidf+0x34>
   8f6a8:	00a00034 	movhi	r2,32768
   8f6ac:	20800a26 	beq	r4,r2,8f6d8 <__floatsidf+0xec>
   8f6b0:	0109c83a 	sub	r4,zero,r4
   8f6b4:	003feb06 	br	8f664 <__floatsidf+0x78>
   8f6b8:	9006d07a 	srli	r3,r18,1
   8f6bc:	008007c4 	movi	r2,31
   8f6c0:	1105c83a 	sub	r2,r2,r4
   8f6c4:	1886d83a 	srl	r3,r3,r2
   8f6c8:	9922983a 	sll	r17,r19,r4
   8f6cc:	9120983a 	sll	r16,r18,r4
   8f6d0:	1c62b03a 	or	r17,r3,r17
   8f6d4:	003fee06 	br	8f690 <__floatsidf+0xa4>
   8f6d8:	0009883a 	mov	r4,zero
   8f6dc:	01707834 	movhi	r5,49632
   8f6e0:	003fd306 	br	8f630 <__floatsidf+0x44>

0008f6e4 <__fixdfsi>:
   8f6e4:	defff804 	addi	sp,sp,-32
   8f6e8:	2005883a 	mov	r2,r4
   8f6ec:	2807883a 	mov	r3,r5
   8f6f0:	d809883a 	mov	r4,sp
   8f6f4:	d9400204 	addi	r5,sp,8
   8f6f8:	d8c00115 	stw	r3,4(sp)
   8f6fc:	d8800015 	stw	r2,0(sp)
   8f700:	dfc00715 	stw	ra,28(sp)
   8f704:	008fef40 	call	8fef4 <__unpack_d>
   8f708:	d8c00217 	ldw	r3,8(sp)
   8f70c:	00800084 	movi	r2,2
   8f710:	1880051e 	bne	r3,r2,8f728 <__fixdfsi+0x44>
   8f714:	0007883a 	mov	r3,zero
   8f718:	1805883a 	mov	r2,r3
   8f71c:	dfc00717 	ldw	ra,28(sp)
   8f720:	dec00804 	addi	sp,sp,32
   8f724:	f800283a 	ret
   8f728:	00800044 	movi	r2,1
   8f72c:	10fff92e 	bgeu	r2,r3,8f714 <__fixdfsi+0x30>
   8f730:	00800104 	movi	r2,4
   8f734:	18800426 	beq	r3,r2,8f748 <__fixdfsi+0x64>
   8f738:	d8c00417 	ldw	r3,16(sp)
   8f73c:	183ff516 	blt	r3,zero,8f714 <__fixdfsi+0x30>
   8f740:	00800784 	movi	r2,30
   8f744:	10c0080e 	bge	r2,r3,8f768 <__fixdfsi+0x84>
   8f748:	d8800317 	ldw	r2,12(sp)
   8f74c:	1000121e 	bne	r2,zero,8f798 <__fixdfsi+0xb4>
   8f750:	00e00034 	movhi	r3,32768
   8f754:	18ffffc4 	addi	r3,r3,-1
   8f758:	1805883a 	mov	r2,r3
   8f75c:	dfc00717 	ldw	ra,28(sp)
   8f760:	dec00804 	addi	sp,sp,32
   8f764:	f800283a 	ret
   8f768:	00800f04 	movi	r2,60
   8f76c:	10d1c83a 	sub	r8,r2,r3
   8f770:	40bff804 	addi	r2,r8,-32
   8f774:	d9800517 	ldw	r6,20(sp)
   8f778:	d9c00617 	ldw	r7,24(sp)
   8f77c:	10000816 	blt	r2,zero,8f7a0 <__fixdfsi+0xbc>
   8f780:	3888d83a 	srl	r4,r7,r2
   8f784:	d8800317 	ldw	r2,12(sp)
   8f788:	2007883a 	mov	r3,r4
   8f78c:	103fe226 	beq	r2,zero,8f718 <__fixdfsi+0x34>
   8f790:	0107c83a 	sub	r3,zero,r4
   8f794:	003fe006 	br	8f718 <__fixdfsi+0x34>
   8f798:	00e00034 	movhi	r3,32768
   8f79c:	003fde06 	br	8f718 <__fixdfsi+0x34>
   8f7a0:	39c7883a 	add	r3,r7,r7
   8f7a4:	008007c4 	movi	r2,31
   8f7a8:	1205c83a 	sub	r2,r2,r8
   8f7ac:	1886983a 	sll	r3,r3,r2
   8f7b0:	3208d83a 	srl	r4,r6,r8
   8f7b4:	1908b03a 	or	r4,r3,r4
   8f7b8:	003ff206 	br	8f784 <__fixdfsi+0xa0>

0008f7bc <__truncdfsf2>:
   8f7bc:	defff804 	addi	sp,sp,-32
   8f7c0:	2005883a 	mov	r2,r4
   8f7c4:	2807883a 	mov	r3,r5
   8f7c8:	d809883a 	mov	r4,sp
   8f7cc:	d9400204 	addi	r5,sp,8
   8f7d0:	d8c00115 	stw	r3,4(sp)
   8f7d4:	d8800015 	stw	r2,0(sp)
   8f7d8:	dfc00715 	stw	ra,28(sp)
   8f7dc:	008fef40 	call	8fef4 <__unpack_d>
   8f7e0:	d9c00517 	ldw	r7,20(sp)
   8f7e4:	da000617 	ldw	r8,24(sp)
   8f7e8:	02d00034 	movhi	r11,16384
   8f7ec:	5affffc4 	addi	r11,r11,-1
   8f7f0:	3812d7ba 	srli	r9,r7,30
   8f7f4:	401a90ba 	slli	r13,r8,2
   8f7f8:	3ac4703a 	and	r2,r7,r11
   8f7fc:	0007883a 	mov	r3,zero
   8f800:	6a52b03a 	or	r9,r13,r9
   8f804:	10c4b03a 	or	r2,r2,r3
   8f808:	d9000217 	ldw	r4,8(sp)
   8f80c:	d9400317 	ldw	r5,12(sp)
   8f810:	d9800417 	ldw	r6,16(sp)
   8f814:	480f883a 	mov	r7,r9
   8f818:	10000126 	beq	r2,zero,8f820 <__truncdfsf2+0x64>
   8f81c:	49c00054 	ori	r7,r9,1
   8f820:	008fbb40 	call	8fbb4 <__make_fp>
   8f824:	dfc00717 	ldw	ra,28(sp)
   8f828:	dec00804 	addi	sp,sp,32
   8f82c:	f800283a 	ret

0008f830 <__floatunsidf>:
   8f830:	defff204 	addi	sp,sp,-56
   8f834:	dfc00d15 	stw	ra,52(sp)
   8f838:	ddc00c15 	stw	r23,48(sp)
   8f83c:	dd800b15 	stw	r22,44(sp)
   8f840:	dd400a15 	stw	r21,40(sp)
   8f844:	dd000915 	stw	r20,36(sp)
   8f848:	dcc00815 	stw	r19,32(sp)
   8f84c:	dc800715 	stw	r18,28(sp)
   8f850:	dc400615 	stw	r17,24(sp)
   8f854:	dc000515 	stw	r16,20(sp)
   8f858:	d8000115 	stw	zero,4(sp)
   8f85c:	20000f1e 	bne	r4,zero,8f89c <__floatunsidf+0x6c>
   8f860:	00800084 	movi	r2,2
   8f864:	d8800015 	stw	r2,0(sp)
   8f868:	d809883a 	mov	r4,sp
   8f86c:	008fbe00 	call	8fbe0 <__pack_d>
   8f870:	dfc00d17 	ldw	ra,52(sp)
   8f874:	ddc00c17 	ldw	r23,48(sp)
   8f878:	dd800b17 	ldw	r22,44(sp)
   8f87c:	dd400a17 	ldw	r21,40(sp)
   8f880:	dd000917 	ldw	r20,36(sp)
   8f884:	dcc00817 	ldw	r19,32(sp)
   8f888:	dc800717 	ldw	r18,28(sp)
   8f88c:	dc400617 	ldw	r17,24(sp)
   8f890:	dc000517 	ldw	r16,20(sp)
   8f894:	dec00e04 	addi	sp,sp,56
   8f898:	f800283a 	ret
   8f89c:	008000c4 	movi	r2,3
   8f8a0:	00c00f04 	movi	r3,60
   8f8a4:	002f883a 	mov	r23,zero
   8f8a8:	202d883a 	mov	r22,r4
   8f8ac:	d8800015 	stw	r2,0(sp)
   8f8b0:	d8c00215 	stw	r3,8(sp)
   8f8b4:	d9000315 	stw	r4,12(sp)
   8f8b8:	ddc00415 	stw	r23,16(sp)
   8f8bc:	008f9c40 	call	8f9c4 <__clzsi2>
   8f8c0:	12400744 	addi	r9,r2,29
   8f8c4:	48000b16 	blt	r9,zero,8f8f4 <__floatunsidf+0xc4>
   8f8c8:	483fe726 	beq	r9,zero,8f868 <__floatunsidf+0x38>
   8f8cc:	10bfff44 	addi	r2,r2,-3
   8f8d0:	10002e16 	blt	r2,zero,8f98c <__floatunsidf+0x15c>
   8f8d4:	b0a2983a 	sll	r17,r22,r2
   8f8d8:	0021883a 	mov	r16,zero
   8f8dc:	d8800217 	ldw	r2,8(sp)
   8f8e0:	dc400415 	stw	r17,16(sp)
   8f8e4:	dc000315 	stw	r16,12(sp)
   8f8e8:	1245c83a 	sub	r2,r2,r9
   8f8ec:	d8800215 	stw	r2,8(sp)
   8f8f0:	003fdd06 	br	8f868 <__floatunsidf+0x38>
   8f8f4:	0255c83a 	sub	r10,zero,r9
   8f8f8:	51bff804 	addi	r6,r10,-32
   8f8fc:	30001b16 	blt	r6,zero,8f96c <__floatunsidf+0x13c>
   8f900:	b9a8d83a 	srl	r20,r23,r6
   8f904:	002b883a 	mov	r21,zero
   8f908:	000f883a 	mov	r7,zero
   8f90c:	01000044 	movi	r4,1
   8f910:	0011883a 	mov	r8,zero
   8f914:	30002516 	blt	r6,zero,8f9ac <__floatunsidf+0x17c>
   8f918:	21a6983a 	sll	r19,r4,r6
   8f91c:	0025883a 	mov	r18,zero
   8f920:	00bfffc4 	movi	r2,-1
   8f924:	9089883a 	add	r4,r18,r2
   8f928:	988b883a 	add	r5,r19,r2
   8f92c:	248d803a 	cmpltu	r6,r4,r18
   8f930:	314b883a 	add	r5,r6,r5
   8f934:	b104703a 	and	r2,r22,r4
   8f938:	b946703a 	and	r3,r23,r5
   8f93c:	10c4b03a 	or	r2,r2,r3
   8f940:	10000226 	beq	r2,zero,8f94c <__floatunsidf+0x11c>
   8f944:	01c00044 	movi	r7,1
   8f948:	0011883a 	mov	r8,zero
   8f94c:	d9000217 	ldw	r4,8(sp)
   8f950:	a1c4b03a 	or	r2,r20,r7
   8f954:	aa06b03a 	or	r3,r21,r8
   8f958:	2249c83a 	sub	r4,r4,r9
   8f95c:	d8c00415 	stw	r3,16(sp)
   8f960:	d9000215 	stw	r4,8(sp)
   8f964:	d8800315 	stw	r2,12(sp)
   8f968:	003fbf06 	br	8f868 <__floatunsidf+0x38>
   8f96c:	bdc7883a 	add	r3,r23,r23
   8f970:	008007c4 	movi	r2,31
   8f974:	1285c83a 	sub	r2,r2,r10
   8f978:	1886983a 	sll	r3,r3,r2
   8f97c:	b2a8d83a 	srl	r20,r22,r10
   8f980:	baaad83a 	srl	r21,r23,r10
   8f984:	1d28b03a 	or	r20,r3,r20
   8f988:	003fdf06 	br	8f908 <__floatunsidf+0xd8>
   8f98c:	b006d07a 	srli	r3,r22,1
   8f990:	008007c4 	movi	r2,31
   8f994:	1245c83a 	sub	r2,r2,r9
   8f998:	1886d83a 	srl	r3,r3,r2
   8f99c:	ba62983a 	sll	r17,r23,r9
   8f9a0:	b260983a 	sll	r16,r22,r9
   8f9a4:	1c62b03a 	or	r17,r3,r17
   8f9a8:	003fcc06 	br	8f8dc <__floatunsidf+0xac>
   8f9ac:	2006d07a 	srli	r3,r4,1
   8f9b0:	008007c4 	movi	r2,31
   8f9b4:	1285c83a 	sub	r2,r2,r10
   8f9b8:	18a6d83a 	srl	r19,r3,r2
   8f9bc:	22a4983a 	sll	r18,r4,r10
   8f9c0:	003fd706 	br	8f920 <__floatunsidf+0xf0>

0008f9c4 <__clzsi2>:
   8f9c4:	00bfffd4 	movui	r2,65535
   8f9c8:	11000e36 	bltu	r2,r4,8fa04 <__clzsi2+0x40>
   8f9cc:	00803fc4 	movi	r2,255
   8f9d0:	01400204 	movi	r5,8
   8f9d4:	0007883a 	mov	r3,zero
   8f9d8:	11001036 	bltu	r2,r4,8fa1c <__clzsi2+0x58>
   8f9dc:	000b883a 	mov	r5,zero
   8f9e0:	20c6d83a 	srl	r3,r4,r3
   8f9e4:	00800274 	movhi	r2,9
   8f9e8:	10919304 	addi	r2,r2,17996
   8f9ec:	1887883a 	add	r3,r3,r2
   8f9f0:	18800003 	ldbu	r2,0(r3)
   8f9f4:	00c00804 	movi	r3,32
   8f9f8:	2885883a 	add	r2,r5,r2
   8f9fc:	1885c83a 	sub	r2,r3,r2
   8fa00:	f800283a 	ret
   8fa04:	01400404 	movi	r5,16
   8fa08:	00804034 	movhi	r2,256
   8fa0c:	10bfffc4 	addi	r2,r2,-1
   8fa10:	2807883a 	mov	r3,r5
   8fa14:	113ff22e 	bgeu	r2,r4,8f9e0 <__clzsi2+0x1c>
   8fa18:	01400604 	movi	r5,24
   8fa1c:	2807883a 	mov	r3,r5
   8fa20:	20c6d83a 	srl	r3,r4,r3
   8fa24:	00800274 	movhi	r2,9
   8fa28:	10919304 	addi	r2,r2,17996
   8fa2c:	1887883a 	add	r3,r3,r2
   8fa30:	18800003 	ldbu	r2,0(r3)
   8fa34:	00c00804 	movi	r3,32
   8fa38:	2885883a 	add	r2,r5,r2
   8fa3c:	1885c83a 	sub	r2,r3,r2
   8fa40:	f800283a 	ret

0008fa44 <__unpack_f>:
   8fa44:	21800017 	ldw	r6,0(r4)
   8fa48:	00c02034 	movhi	r3,128
   8fa4c:	18ffffc4 	addi	r3,r3,-1
   8fa50:	3004d5fa 	srli	r2,r6,23
   8fa54:	3008d7fa 	srli	r4,r6,31
   8fa58:	30ce703a 	and	r7,r6,r3
   8fa5c:	10c03fcc 	andi	r3,r2,255
   8fa60:	29000115 	stw	r4,4(r5)
   8fa64:	1800131e 	bne	r3,zero,8fab4 <__unpack_f+0x70>
   8fa68:	38000f26 	beq	r7,zero,8faa8 <__unpack_f+0x64>
   8fa6c:	380691fa 	slli	r3,r7,7
   8fa70:	01bfe084 	movi	r6,-126
   8fa74:	008000c4 	movi	r2,3
   8fa78:	01100034 	movhi	r4,16384
   8fa7c:	213fffc4 	addi	r4,r4,-1
   8fa80:	28800015 	stw	r2,0(r5)
   8fa84:	29800215 	stw	r6,8(r5)
   8fa88:	20c00536 	bltu	r4,r3,8faa0 <__unpack_f+0x5c>
   8fa8c:	3005883a 	mov	r2,r6
   8fa90:	18c7883a 	add	r3,r3,r3
   8fa94:	10bfffc4 	addi	r2,r2,-1
   8fa98:	20fffd2e 	bgeu	r4,r3,8fa90 <__unpack_f+0x4c>
   8fa9c:	28800215 	stw	r2,8(r5)
   8faa0:	28c00315 	stw	r3,12(r5)
   8faa4:	f800283a 	ret
   8faa8:	00800084 	movi	r2,2
   8faac:	28800015 	stw	r2,0(r5)
   8fab0:	f800283a 	ret
   8fab4:	00803fc4 	movi	r2,255
   8fab8:	18800826 	beq	r3,r2,8fadc <__unpack_f+0x98>
   8fabc:	380491fa 	slli	r2,r7,7
   8fac0:	18ffe044 	addi	r3,r3,-127
   8fac4:	28c00215 	stw	r3,8(r5)
   8fac8:	10900034 	orhi	r2,r2,16384
   8facc:	28800315 	stw	r2,12(r5)
   8fad0:	008000c4 	movi	r2,3
   8fad4:	28800015 	stw	r2,0(r5)
   8fad8:	f800283a 	ret
   8fadc:	3800031e 	bne	r7,zero,8faec <__unpack_f+0xa8>
   8fae0:	00800104 	movi	r2,4
   8fae4:	28800015 	stw	r2,0(r5)
   8fae8:	f800283a 	ret
   8faec:	3080042c 	andhi	r2,r6,16
   8faf0:	10000426 	beq	r2,zero,8fb04 <__unpack_f+0xc0>
   8faf4:	00800044 	movi	r2,1
   8faf8:	28800015 	stw	r2,0(r5)
   8fafc:	29c00315 	stw	r7,12(r5)
   8fb00:	f800283a 	ret
   8fb04:	28000015 	stw	zero,0(r5)
   8fb08:	003ffc06 	br	8fafc <__unpack_f+0xb8>

0008fb0c <__fpcmp_parts_f>:
   8fb0c:	21800017 	ldw	r6,0(r4)
   8fb10:	00c00044 	movi	r3,1
   8fb14:	19800a2e 	bgeu	r3,r6,8fb40 <__fpcmp_parts_f+0x34>
   8fb18:	28800017 	ldw	r2,0(r5)
   8fb1c:	1880082e 	bgeu	r3,r2,8fb40 <__fpcmp_parts_f+0x34>
   8fb20:	00c00104 	movi	r3,4
   8fb24:	30c01e26 	beq	r6,r3,8fba0 <__fpcmp_parts_f+0x94>
   8fb28:	10c01a26 	beq	r2,r3,8fb94 <__fpcmp_parts_f+0x88>
   8fb2c:	00c00084 	movi	r3,2
   8fb30:	30c00526 	beq	r6,r3,8fb48 <__fpcmp_parts_f+0x3c>
   8fb34:	10c0071e 	bne	r2,r3,8fb54 <__fpcmp_parts_f+0x48>
   8fb38:	20800117 	ldw	r2,4(r4)
   8fb3c:	1000091e 	bne	r2,zero,8fb64 <__fpcmp_parts_f+0x58>
   8fb40:	00800044 	movi	r2,1
   8fb44:	f800283a 	ret
   8fb48:	10c0121e 	bne	r2,r3,8fb94 <__fpcmp_parts_f+0x88>
   8fb4c:	0005883a 	mov	r2,zero
   8fb50:	f800283a 	ret
   8fb54:	20c00117 	ldw	r3,4(r4)
   8fb58:	28800117 	ldw	r2,4(r5)
   8fb5c:	18800326 	beq	r3,r2,8fb6c <__fpcmp_parts_f+0x60>
   8fb60:	183ff726 	beq	r3,zero,8fb40 <__fpcmp_parts_f+0x34>
   8fb64:	00bfffc4 	movi	r2,-1
   8fb68:	f800283a 	ret
   8fb6c:	21800217 	ldw	r6,8(r4)
   8fb70:	28800217 	ldw	r2,8(r5)
   8fb74:	11bffa16 	blt	r2,r6,8fb60 <__fpcmp_parts_f+0x54>
   8fb78:	30800416 	blt	r6,r2,8fb8c <__fpcmp_parts_f+0x80>
   8fb7c:	21000317 	ldw	r4,12(r4)
   8fb80:	29400317 	ldw	r5,12(r5)
   8fb84:	293ff636 	bltu	r5,r4,8fb60 <__fpcmp_parts_f+0x54>
   8fb88:	217ff02e 	bgeu	r4,r5,8fb4c <__fpcmp_parts_f+0x40>
   8fb8c:	183fec1e 	bne	r3,zero,8fb40 <__fpcmp_parts_f+0x34>
   8fb90:	003ff406 	br	8fb64 <__fpcmp_parts_f+0x58>
   8fb94:	28800117 	ldw	r2,4(r5)
   8fb98:	103fe91e 	bne	r2,zero,8fb40 <__fpcmp_parts_f+0x34>
   8fb9c:	003ff106 	br	8fb64 <__fpcmp_parts_f+0x58>
   8fba0:	11bfe51e 	bne	r2,r6,8fb38 <__fpcmp_parts_f+0x2c>
   8fba4:	28c00117 	ldw	r3,4(r5)
   8fba8:	20800117 	ldw	r2,4(r4)
   8fbac:	1885c83a 	sub	r2,r3,r2
   8fbb0:	f800283a 	ret

0008fbb4 <__make_fp>:
   8fbb4:	defffb04 	addi	sp,sp,-20
   8fbb8:	d9000015 	stw	r4,0(sp)
   8fbbc:	d809883a 	mov	r4,sp
   8fbc0:	dfc00415 	stw	ra,16(sp)
   8fbc4:	d9400115 	stw	r5,4(sp)
   8fbc8:	d9800215 	stw	r6,8(sp)
   8fbcc:	d9c00315 	stw	r7,12(sp)
   8fbd0:	00900f40 	call	900f4 <__pack_f>
   8fbd4:	dfc00417 	ldw	ra,16(sp)
   8fbd8:	dec00504 	addi	sp,sp,20
   8fbdc:	f800283a 	ret

0008fbe0 <__pack_d>:
   8fbe0:	20c00017 	ldw	r3,0(r4)
   8fbe4:	defffd04 	addi	sp,sp,-12
   8fbe8:	dc000015 	stw	r16,0(sp)
   8fbec:	dc800215 	stw	r18,8(sp)
   8fbf0:	dc400115 	stw	r17,4(sp)
   8fbf4:	00800044 	movi	r2,1
   8fbf8:	22000317 	ldw	r8,12(r4)
   8fbfc:	001f883a 	mov	r15,zero
   8fc00:	22400417 	ldw	r9,16(r4)
   8fc04:	24000117 	ldw	r16,4(r4)
   8fc08:	10c0552e 	bgeu	r2,r3,8fd60 <__pack_d+0x180>
   8fc0c:	00800104 	movi	r2,4
   8fc10:	18804f26 	beq	r3,r2,8fd50 <__pack_d+0x170>
   8fc14:	00800084 	movi	r2,2
   8fc18:	18800226 	beq	r3,r2,8fc24 <__pack_d+0x44>
   8fc1c:	4244b03a 	or	r2,r8,r9
   8fc20:	10001a1e 	bne	r2,zero,8fc8c <__pack_d+0xac>
   8fc24:	000d883a 	mov	r6,zero
   8fc28:	000f883a 	mov	r7,zero
   8fc2c:	0011883a 	mov	r8,zero
   8fc30:	00800434 	movhi	r2,16
   8fc34:	10bfffc4 	addi	r2,r2,-1
   8fc38:	301d883a 	mov	r14,r6
   8fc3c:	3884703a 	and	r2,r7,r2
   8fc40:	400a953a 	slli	r5,r8,20
   8fc44:	79bffc2c 	andhi	r6,r15,65520
   8fc48:	308cb03a 	or	r6,r6,r2
   8fc4c:	00e00434 	movhi	r3,32784
   8fc50:	18ffffc4 	addi	r3,r3,-1
   8fc54:	800497fa 	slli	r2,r16,31
   8fc58:	30c6703a 	and	r3,r6,r3
   8fc5c:	1946b03a 	or	r3,r3,r5
   8fc60:	01600034 	movhi	r5,32768
   8fc64:	297fffc4 	addi	r5,r5,-1
   8fc68:	194a703a 	and	r5,r3,r5
   8fc6c:	288ab03a 	or	r5,r5,r2
   8fc70:	2807883a 	mov	r3,r5
   8fc74:	7005883a 	mov	r2,r14
   8fc78:	dc800217 	ldw	r18,8(sp)
   8fc7c:	dc400117 	ldw	r17,4(sp)
   8fc80:	dc000017 	ldw	r16,0(sp)
   8fc84:	dec00304 	addi	sp,sp,12
   8fc88:	f800283a 	ret
   8fc8c:	21000217 	ldw	r4,8(r4)
   8fc90:	00bf0084 	movi	r2,-1022
   8fc94:	20803f16 	blt	r4,r2,8fd94 <__pack_d+0x1b4>
   8fc98:	0080ffc4 	movi	r2,1023
   8fc9c:	11002c16 	blt	r2,r4,8fd50 <__pack_d+0x170>
   8fca0:	00803fc4 	movi	r2,255
   8fca4:	408c703a 	and	r6,r8,r2
   8fca8:	00802004 	movi	r2,128
   8fcac:	0007883a 	mov	r3,zero
   8fcb0:	000f883a 	mov	r7,zero
   8fcb4:	2280ffc4 	addi	r10,r4,1023
   8fcb8:	30801e26 	beq	r6,r2,8fd34 <__pack_d+0x154>
   8fcbc:	00801fc4 	movi	r2,127
   8fcc0:	4089883a 	add	r4,r8,r2
   8fcc4:	220d803a 	cmpltu	r6,r4,r8
   8fcc8:	324d883a 	add	r6,r6,r9
   8fccc:	2011883a 	mov	r8,r4
   8fcd0:	3013883a 	mov	r9,r6
   8fcd4:	00880034 	movhi	r2,8192
   8fcd8:	10bfffc4 	addi	r2,r2,-1
   8fcdc:	12400d36 	bltu	r2,r9,8fd14 <__pack_d+0x134>
   8fce0:	4804963a 	slli	r2,r9,24
   8fce4:	400cd23a 	srli	r6,r8,8
   8fce8:	480ed23a 	srli	r7,r9,8
   8fcec:	013fffc4 	movi	r4,-1
   8fcf0:	118cb03a 	or	r6,r2,r6
   8fcf4:	01400434 	movhi	r5,16
   8fcf8:	297fffc4 	addi	r5,r5,-1
   8fcfc:	3104703a 	and	r2,r6,r4
   8fd00:	3946703a 	and	r3,r7,r5
   8fd04:	5201ffcc 	andi	r8,r10,2047
   8fd08:	100d883a 	mov	r6,r2
   8fd0c:	180f883a 	mov	r7,r3
   8fd10:	003fc706 	br	8fc30 <__pack_d+0x50>
   8fd14:	480897fa 	slli	r4,r9,31
   8fd18:	4004d07a 	srli	r2,r8,1
   8fd1c:	4806d07a 	srli	r3,r9,1
   8fd20:	52800044 	addi	r10,r10,1
   8fd24:	2084b03a 	or	r2,r4,r2
   8fd28:	1011883a 	mov	r8,r2
   8fd2c:	1813883a 	mov	r9,r3
   8fd30:	003feb06 	br	8fce0 <__pack_d+0x100>
   8fd34:	383fe11e 	bne	r7,zero,8fcbc <__pack_d+0xdc>
   8fd38:	01004004 	movi	r4,256
   8fd3c:	4104703a 	and	r2,r8,r4
   8fd40:	10c4b03a 	or	r2,r2,r3
   8fd44:	103fe326 	beq	r2,zero,8fcd4 <__pack_d+0xf4>
   8fd48:	3005883a 	mov	r2,r6
   8fd4c:	003fdc06 	br	8fcc0 <__pack_d+0xe0>
   8fd50:	000d883a 	mov	r6,zero
   8fd54:	000f883a 	mov	r7,zero
   8fd58:	0201ffc4 	movi	r8,2047
   8fd5c:	003fb406 	br	8fc30 <__pack_d+0x50>
   8fd60:	0005883a 	mov	r2,zero
   8fd64:	00c00234 	movhi	r3,8
   8fd68:	408cb03a 	or	r6,r8,r2
   8fd6c:	48ceb03a 	or	r7,r9,r3
   8fd70:	013fffc4 	movi	r4,-1
   8fd74:	01400434 	movhi	r5,16
   8fd78:	297fffc4 	addi	r5,r5,-1
   8fd7c:	3104703a 	and	r2,r6,r4
   8fd80:	3946703a 	and	r3,r7,r5
   8fd84:	100d883a 	mov	r6,r2
   8fd88:	180f883a 	mov	r7,r3
   8fd8c:	0201ffc4 	movi	r8,2047
   8fd90:	003fa706 	br	8fc30 <__pack_d+0x50>
   8fd94:	1109c83a 	sub	r4,r2,r4
   8fd98:	00800e04 	movi	r2,56
   8fd9c:	11004316 	blt	r2,r4,8feac <__pack_d+0x2cc>
   8fda0:	21fff804 	addi	r7,r4,-32
   8fda4:	38004516 	blt	r7,zero,8febc <__pack_d+0x2dc>
   8fda8:	49d8d83a 	srl	r12,r9,r7
   8fdac:	001b883a 	mov	r13,zero
   8fdb0:	0023883a 	mov	r17,zero
   8fdb4:	01400044 	movi	r5,1
   8fdb8:	0025883a 	mov	r18,zero
   8fdbc:	38004716 	blt	r7,zero,8fedc <__pack_d+0x2fc>
   8fdc0:	29d6983a 	sll	r11,r5,r7
   8fdc4:	0015883a 	mov	r10,zero
   8fdc8:	00bfffc4 	movi	r2,-1
   8fdcc:	5089883a 	add	r4,r10,r2
   8fdd0:	588b883a 	add	r5,r11,r2
   8fdd4:	228d803a 	cmpltu	r6,r4,r10
   8fdd8:	314b883a 	add	r5,r6,r5
   8fddc:	4104703a 	and	r2,r8,r4
   8fde0:	4946703a 	and	r3,r9,r5
   8fde4:	10c4b03a 	or	r2,r2,r3
   8fde8:	10000226 	beq	r2,zero,8fdf4 <__pack_d+0x214>
   8fdec:	04400044 	movi	r17,1
   8fdf0:	0025883a 	mov	r18,zero
   8fdf4:	00803fc4 	movi	r2,255
   8fdf8:	644eb03a 	or	r7,r12,r17
   8fdfc:	3892703a 	and	r9,r7,r2
   8fe00:	00802004 	movi	r2,128
   8fe04:	6c90b03a 	or	r8,r13,r18
   8fe08:	0015883a 	mov	r10,zero
   8fe0c:	48801626 	beq	r9,r2,8fe68 <__pack_d+0x288>
   8fe10:	01001fc4 	movi	r4,127
   8fe14:	3905883a 	add	r2,r7,r4
   8fe18:	11cd803a 	cmpltu	r6,r2,r7
   8fe1c:	320d883a 	add	r6,r6,r8
   8fe20:	100f883a 	mov	r7,r2
   8fe24:	00840034 	movhi	r2,4096
   8fe28:	10bfffc4 	addi	r2,r2,-1
   8fe2c:	3011883a 	mov	r8,r6
   8fe30:	0007883a 	mov	r3,zero
   8fe34:	11801b36 	bltu	r2,r6,8fea4 <__pack_d+0x2c4>
   8fe38:	4004963a 	slli	r2,r8,24
   8fe3c:	3808d23a 	srli	r4,r7,8
   8fe40:	400ad23a 	srli	r5,r8,8
   8fe44:	1813883a 	mov	r9,r3
   8fe48:	1108b03a 	or	r4,r2,r4
   8fe4c:	00bfffc4 	movi	r2,-1
   8fe50:	00c00434 	movhi	r3,16
   8fe54:	18ffffc4 	addi	r3,r3,-1
   8fe58:	208c703a 	and	r6,r4,r2
   8fe5c:	28ce703a 	and	r7,r5,r3
   8fe60:	4a01ffcc 	andi	r8,r9,2047
   8fe64:	003f7206 	br	8fc30 <__pack_d+0x50>
   8fe68:	503fe91e 	bne	r10,zero,8fe10 <__pack_d+0x230>
   8fe6c:	01004004 	movi	r4,256
   8fe70:	3904703a 	and	r2,r7,r4
   8fe74:	0007883a 	mov	r3,zero
   8fe78:	10c4b03a 	or	r2,r2,r3
   8fe7c:	10000626 	beq	r2,zero,8fe98 <__pack_d+0x2b8>
   8fe80:	3a45883a 	add	r2,r7,r9
   8fe84:	11cd803a 	cmpltu	r6,r2,r7
   8fe88:	320d883a 	add	r6,r6,r8
   8fe8c:	100f883a 	mov	r7,r2
   8fe90:	3011883a 	mov	r8,r6
   8fe94:	0007883a 	mov	r3,zero
   8fe98:	00840034 	movhi	r2,4096
   8fe9c:	10bfffc4 	addi	r2,r2,-1
   8fea0:	123fe52e 	bgeu	r2,r8,8fe38 <__pack_d+0x258>
   8fea4:	00c00044 	movi	r3,1
   8fea8:	003fe306 	br	8fe38 <__pack_d+0x258>
   8feac:	0009883a 	mov	r4,zero
   8feb0:	0013883a 	mov	r9,zero
   8feb4:	000b883a 	mov	r5,zero
   8feb8:	003fe406 	br	8fe4c <__pack_d+0x26c>
   8febc:	4a47883a 	add	r3,r9,r9
   8fec0:	008007c4 	movi	r2,31
   8fec4:	1105c83a 	sub	r2,r2,r4
   8fec8:	1886983a 	sll	r3,r3,r2
   8fecc:	4118d83a 	srl	r12,r8,r4
   8fed0:	491ad83a 	srl	r13,r9,r4
   8fed4:	1b18b03a 	or	r12,r3,r12
   8fed8:	003fb506 	br	8fdb0 <__pack_d+0x1d0>
   8fedc:	2806d07a 	srli	r3,r5,1
   8fee0:	008007c4 	movi	r2,31
   8fee4:	1105c83a 	sub	r2,r2,r4
   8fee8:	1896d83a 	srl	r11,r3,r2
   8feec:	2914983a 	sll	r10,r5,r4
   8fef0:	003fb506 	br	8fdc8 <__pack_d+0x1e8>

0008fef4 <__unpack_d>:
   8fef4:	20c00117 	ldw	r3,4(r4)
   8fef8:	22400017 	ldw	r9,0(r4)
   8fefc:	00800434 	movhi	r2,16
   8ff00:	10bfffc4 	addi	r2,r2,-1
   8ff04:	1808d53a 	srli	r4,r3,20
   8ff08:	180cd7fa 	srli	r6,r3,31
   8ff0c:	1894703a 	and	r10,r3,r2
   8ff10:	2201ffcc 	andi	r8,r4,2047
   8ff14:	281b883a 	mov	r13,r5
   8ff18:	4817883a 	mov	r11,r9
   8ff1c:	29800115 	stw	r6,4(r5)
   8ff20:	5019883a 	mov	r12,r10
   8ff24:	40001e1e 	bne	r8,zero,8ffa0 <__unpack_d+0xac>
   8ff28:	4a84b03a 	or	r2,r9,r10
   8ff2c:	10001926 	beq	r2,zero,8ff94 <__unpack_d+0xa0>
   8ff30:	4804d63a 	srli	r2,r9,24
   8ff34:	500c923a 	slli	r6,r10,8
   8ff38:	013f0084 	movi	r4,-1022
   8ff3c:	00c40034 	movhi	r3,4096
   8ff40:	18ffffc4 	addi	r3,r3,-1
   8ff44:	118cb03a 	or	r6,r2,r6
   8ff48:	008000c4 	movi	r2,3
   8ff4c:	480a923a 	slli	r5,r9,8
   8ff50:	68800015 	stw	r2,0(r13)
   8ff54:	69000215 	stw	r4,8(r13)
   8ff58:	19800b36 	bltu	r3,r6,8ff88 <__unpack_d+0x94>
   8ff5c:	200f883a 	mov	r7,r4
   8ff60:	1811883a 	mov	r8,r3
   8ff64:	2945883a 	add	r2,r5,r5
   8ff68:	1149803a 	cmpltu	r4,r2,r5
   8ff6c:	3187883a 	add	r3,r6,r6
   8ff70:	20c9883a 	add	r4,r4,r3
   8ff74:	100b883a 	mov	r5,r2
   8ff78:	200d883a 	mov	r6,r4
   8ff7c:	39ffffc4 	addi	r7,r7,-1
   8ff80:	413ff82e 	bgeu	r8,r4,8ff64 <__unpack_d+0x70>
   8ff84:	69c00215 	stw	r7,8(r13)
   8ff88:	69800415 	stw	r6,16(r13)
   8ff8c:	69400315 	stw	r5,12(r13)
   8ff90:	f800283a 	ret
   8ff94:	00800084 	movi	r2,2
   8ff98:	28800015 	stw	r2,0(r5)
   8ff9c:	f800283a 	ret
   8ffa0:	0081ffc4 	movi	r2,2047
   8ffa4:	40800f26 	beq	r8,r2,8ffe4 <__unpack_d+0xf0>
   8ffa8:	480cd63a 	srli	r6,r9,24
   8ffac:	5006923a 	slli	r3,r10,8
   8ffb0:	4804923a 	slli	r2,r9,8
   8ffb4:	0009883a 	mov	r4,zero
   8ffb8:	30c6b03a 	or	r3,r6,r3
   8ffbc:	01440034 	movhi	r5,4096
   8ffc0:	110cb03a 	or	r6,r2,r4
   8ffc4:	423f0044 	addi	r8,r8,-1023
   8ffc8:	194eb03a 	or	r7,r3,r5
   8ffcc:	008000c4 	movi	r2,3
   8ffd0:	69c00415 	stw	r7,16(r13)
   8ffd4:	6a000215 	stw	r8,8(r13)
   8ffd8:	68800015 	stw	r2,0(r13)
   8ffdc:	69800315 	stw	r6,12(r13)
   8ffe0:	f800283a 	ret
   8ffe4:	4a84b03a 	or	r2,r9,r10
   8ffe8:	1000031e 	bne	r2,zero,8fff8 <__unpack_d+0x104>
   8ffec:	00800104 	movi	r2,4
   8fff0:	28800015 	stw	r2,0(r5)
   8fff4:	f800283a 	ret
   8fff8:	0009883a 	mov	r4,zero
   8fffc:	01400234 	movhi	r5,8
   90000:	4904703a 	and	r2,r9,r4
   90004:	5146703a 	and	r3,r10,r5
   90008:	10c4b03a 	or	r2,r2,r3
   9000c:	10000526 	beq	r2,zero,90024 <__unpack_d+0x130>
   90010:	00800044 	movi	r2,1
   90014:	68800015 	stw	r2,0(r13)
   90018:	6b000415 	stw	r12,16(r13)
   9001c:	6ac00315 	stw	r11,12(r13)
   90020:	f800283a 	ret
   90024:	68000015 	stw	zero,0(r13)
   90028:	003ffb06 	br	90018 <__unpack_d+0x124>

0009002c <__fpcmp_parts_d>:
   9002c:	21800017 	ldw	r6,0(r4)
   90030:	00c00044 	movi	r3,1
   90034:	19800a2e 	bgeu	r3,r6,90060 <__fpcmp_parts_d+0x34>
   90038:	28800017 	ldw	r2,0(r5)
   9003c:	1880082e 	bgeu	r3,r2,90060 <__fpcmp_parts_d+0x34>
   90040:	00c00104 	movi	r3,4
   90044:	30c02626 	beq	r6,r3,900e0 <__fpcmp_parts_d+0xb4>
   90048:	10c02226 	beq	r2,r3,900d4 <__fpcmp_parts_d+0xa8>
   9004c:	00c00084 	movi	r3,2
   90050:	30c00526 	beq	r6,r3,90068 <__fpcmp_parts_d+0x3c>
   90054:	10c0071e 	bne	r2,r3,90074 <__fpcmp_parts_d+0x48>
   90058:	20800117 	ldw	r2,4(r4)
   9005c:	1000091e 	bne	r2,zero,90084 <__fpcmp_parts_d+0x58>
   90060:	00800044 	movi	r2,1
   90064:	f800283a 	ret
   90068:	10c01a1e 	bne	r2,r3,900d4 <__fpcmp_parts_d+0xa8>
   9006c:	0005883a 	mov	r2,zero
   90070:	f800283a 	ret
   90074:	22000117 	ldw	r8,4(r4)
   90078:	28800117 	ldw	r2,4(r5)
   9007c:	40800326 	beq	r8,r2,9008c <__fpcmp_parts_d+0x60>
   90080:	403ff726 	beq	r8,zero,90060 <__fpcmp_parts_d+0x34>
   90084:	00bfffc4 	movi	r2,-1
   90088:	f800283a 	ret
   9008c:	20c00217 	ldw	r3,8(r4)
   90090:	28800217 	ldw	r2,8(r5)
   90094:	10fffa16 	blt	r2,r3,90080 <__fpcmp_parts_d+0x54>
   90098:	18800916 	blt	r3,r2,900c0 <__fpcmp_parts_d+0x94>
   9009c:	21c00417 	ldw	r7,16(r4)
   900a0:	28c00417 	ldw	r3,16(r5)
   900a4:	21800317 	ldw	r6,12(r4)
   900a8:	28800317 	ldw	r2,12(r5)
   900ac:	19fff436 	bltu	r3,r7,90080 <__fpcmp_parts_d+0x54>
   900b0:	38c00526 	beq	r7,r3,900c8 <__fpcmp_parts_d+0x9c>
   900b4:	38c00236 	bltu	r7,r3,900c0 <__fpcmp_parts_d+0x94>
   900b8:	19ffec1e 	bne	r3,r7,9006c <__fpcmp_parts_d+0x40>
   900bc:	30bfeb2e 	bgeu	r6,r2,9006c <__fpcmp_parts_d+0x40>
   900c0:	403fe71e 	bne	r8,zero,90060 <__fpcmp_parts_d+0x34>
   900c4:	003fef06 	br	90084 <__fpcmp_parts_d+0x58>
   900c8:	11bffa2e 	bgeu	r2,r6,900b4 <__fpcmp_parts_d+0x88>
   900cc:	403fe426 	beq	r8,zero,90060 <__fpcmp_parts_d+0x34>
   900d0:	003fec06 	br	90084 <__fpcmp_parts_d+0x58>
   900d4:	28800117 	ldw	r2,4(r5)
   900d8:	103fe11e 	bne	r2,zero,90060 <__fpcmp_parts_d+0x34>
   900dc:	003fe906 	br	90084 <__fpcmp_parts_d+0x58>
   900e0:	11bfdd1e 	bne	r2,r6,90058 <__fpcmp_parts_d+0x2c>
   900e4:	28c00117 	ldw	r3,4(r5)
   900e8:	20800117 	ldw	r2,4(r4)
   900ec:	1885c83a 	sub	r2,r3,r2
   900f0:	f800283a 	ret

000900f4 <__pack_f>:
   900f4:	20c00017 	ldw	r3,0(r4)
   900f8:	01c00044 	movi	r7,1
   900fc:	21800317 	ldw	r6,12(r4)
   90100:	21400117 	ldw	r5,4(r4)
   90104:	38c02d2e 	bgeu	r7,r3,901bc <__pack_f+0xc8>
   90108:	00800104 	movi	r2,4
   9010c:	18802826 	beq	r3,r2,901b0 <__pack_f+0xbc>
   90110:	00800084 	movi	r2,2
   90114:	18800126 	beq	r3,r2,9011c <__pack_f+0x28>
   90118:	3000101e 	bne	r6,zero,9015c <__pack_f+0x68>
   9011c:	000d883a 	mov	r6,zero
   90120:	0007883a 	mov	r3,zero
   90124:	19003fcc 	andi	r4,r3,255
   90128:	200895fa 	slli	r4,r4,23
   9012c:	00c02034 	movhi	r3,128
   90130:	18ffffc4 	addi	r3,r3,-1
   90134:	30c6703a 	and	r3,r6,r3
   90138:	10a0002c 	andhi	r2,r2,32768
   9013c:	10c4b03a 	or	r2,r2,r3
   90140:	280a97fa 	slli	r5,r5,31
   90144:	1104b03a 	or	r2,r2,r4
   90148:	00e00034 	movhi	r3,32768
   9014c:	18ffffc4 	addi	r3,r3,-1
   90150:	10c4703a 	and	r2,r2,r3
   90154:	1144b03a 	or	r2,r2,r5
   90158:	f800283a 	ret
   9015c:	21000217 	ldw	r4,8(r4)
   90160:	00bfe084 	movi	r2,-126
   90164:	20801b16 	blt	r4,r2,901d4 <__pack_f+0xe0>
   90168:	00801fc4 	movi	r2,127
   9016c:	11001016 	blt	r2,r4,901b0 <__pack_f+0xbc>
   90170:	308e703a 	and	r7,r6,r2
   90174:	2087883a 	add	r3,r4,r2
   90178:	00801004 	movi	r2,64
   9017c:	38800526 	beq	r7,r2,90194 <__pack_f+0xa0>
   90180:	31800fc4 	addi	r6,r6,63
   90184:	30000716 	blt	r6,zero,901a4 <__pack_f+0xb0>
   90188:	300490ba 	slli	r2,r6,2
   9018c:	100cd27a 	srli	r6,r2,9
   90190:	003fe406 	br	90124 <__pack_f+0x30>
   90194:	3080200c 	andi	r2,r6,128
   90198:	103ffa26 	beq	r2,zero,90184 <__pack_f+0x90>
   9019c:	31cd883a 	add	r6,r6,r7
   901a0:	003ff806 	br	90184 <__pack_f+0x90>
   901a4:	300cd07a 	srli	r6,r6,1
   901a8:	18c00044 	addi	r3,r3,1
   901ac:	003ff606 	br	90188 <__pack_f+0x94>
   901b0:	000d883a 	mov	r6,zero
   901b4:	00ffffc4 	movi	r3,-1
   901b8:	003fda06 	br	90124 <__pack_f+0x30>
   901bc:	31800434 	orhi	r6,r6,16
   901c0:	00802034 	movhi	r2,128
   901c4:	10bfffc4 	addi	r2,r2,-1
   901c8:	308c703a 	and	r6,r6,r2
   901cc:	00ffffc4 	movi	r3,-1
   901d0:	003fd406 	br	90124 <__pack_f+0x30>
   901d4:	1109c83a 	sub	r4,r2,r4
   901d8:	00800644 	movi	r2,25
   901dc:	11001216 	blt	r2,r4,90228 <__pack_f+0x134>
   901e0:	3904983a 	sll	r2,r7,r4
   901e4:	3106d83a 	srl	r3,r6,r4
   901e8:	10bfffc4 	addi	r2,r2,-1
   901ec:	3084703a 	and	r2,r6,r2
   901f0:	1004c03a 	cmpne	r2,r2,zero
   901f4:	1886b03a 	or	r3,r3,r2
   901f8:	19001fcc 	andi	r4,r3,127
   901fc:	00801004 	movi	r2,64
   90200:	20800c26 	beq	r4,r2,90234 <__pack_f+0x140>
   90204:	18c00fc4 	addi	r3,r3,63
   90208:	00900034 	movhi	r2,16384
   9020c:	10bfffc4 	addi	r2,r2,-1
   90210:	180cd1fa 	srli	r6,r3,7
   90214:	10c7803a 	cmpltu	r3,r2,r3
   90218:	00802034 	movhi	r2,128
   9021c:	10bfffc4 	addi	r2,r2,-1
   90220:	308c703a 	and	r6,r6,r2
   90224:	003fbf06 	br	90124 <__pack_f+0x30>
   90228:	0007883a 	mov	r3,zero
   9022c:	000d883a 	mov	r6,zero
   90230:	003ff906 	br	90218 <__pack_f+0x124>
   90234:	1880200c 	andi	r2,r3,128
   90238:	10000126 	beq	r2,zero,90240 <__pack_f+0x14c>
   9023c:	1907883a 	add	r3,r3,r4
   90240:	180cd1fa 	srli	r6,r3,7
   90244:	00900034 	movhi	r2,16384
   90248:	10bfffc4 	addi	r2,r2,-1
   9024c:	10c7803a 	cmpltu	r3,r2,r3
   90250:	003ff106 	br	90218 <__pack_f+0x124>

00090254 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   90254:	defff804 	addi	sp,sp,-32
   90258:	dfc00715 	stw	ra,28(sp)
   9025c:	df000615 	stw	fp,24(sp)
   90260:	df000604 	addi	fp,sp,24
   90264:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   90268:	e0bffc17 	ldw	r2,-16(fp)
   9026c:	1004803a 	cmplt	r2,r2,zero
   90270:	1000091e 	bne	r2,zero,90298 <close+0x44>
   90274:	e13ffc17 	ldw	r4,-16(fp)
   90278:	01400304 	movi	r5,12
   9027c:	0080ba00 	call	80ba0 <__mulsi3>
   90280:	1007883a 	mov	r3,r2
   90284:	00800274 	movhi	r2,9
   90288:	1093fc04 	addi	r2,r2,20464
   9028c:	1887883a 	add	r3,r3,r2
   90290:	e0ffff15 	stw	r3,-4(fp)
   90294:	00000106 	br	9029c <close+0x48>
   90298:	e03fff15 	stw	zero,-4(fp)
   9029c:	e0bfff17 	ldw	r2,-4(fp)
   902a0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   902a4:	e0bffb17 	ldw	r2,-20(fp)
   902a8:	1005003a 	cmpeq	r2,r2,zero
   902ac:	10001d1e 	bne	r2,zero,90324 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   902b0:	e0bffb17 	ldw	r2,-20(fp)
   902b4:	10800017 	ldw	r2,0(r2)
   902b8:	10800417 	ldw	r2,16(r2)
   902bc:	1005003a 	cmpeq	r2,r2,zero
   902c0:	1000071e 	bne	r2,zero,902e0 <close+0x8c>
   902c4:	e0bffb17 	ldw	r2,-20(fp)
   902c8:	10800017 	ldw	r2,0(r2)
   902cc:	10800417 	ldw	r2,16(r2)
   902d0:	e13ffb17 	ldw	r4,-20(fp)
   902d4:	103ee83a 	callr	r2
   902d8:	e0bffe15 	stw	r2,-8(fp)
   902dc:	00000106 	br	902e4 <close+0x90>
   902e0:	e03ffe15 	stw	zero,-8(fp)
   902e4:	e0bffe17 	ldw	r2,-8(fp)
   902e8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   902ec:	e13ffc17 	ldw	r4,-16(fp)
   902f0:	0090d900 	call	90d90 <alt_release_fd>
    if (rval < 0)
   902f4:	e0bffa17 	ldw	r2,-24(fp)
   902f8:	1004403a 	cmpge	r2,r2,zero
   902fc:	1000071e 	bne	r2,zero,9031c <close+0xc8>
    {
      ALT_ERRNO = -rval;
   90300:	00903540 	call	90354 <alt_get_errno>
   90304:	e0fffa17 	ldw	r3,-24(fp)
   90308:	00c7c83a 	sub	r3,zero,r3
   9030c:	10c00015 	stw	r3,0(r2)
      return -1;
   90310:	00bfffc4 	movi	r2,-1
   90314:	e0bffd15 	stw	r2,-12(fp)
   90318:	00000806 	br	9033c <close+0xe8>
    }
    return 0;
   9031c:	e03ffd15 	stw	zero,-12(fp)
   90320:	00000606 	br	9033c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   90324:	00903540 	call	90354 <alt_get_errno>
   90328:	1007883a 	mov	r3,r2
   9032c:	00801444 	movi	r2,81
   90330:	18800015 	stw	r2,0(r3)
    return -1;
   90334:	00bfffc4 	movi	r2,-1
   90338:	e0bffd15 	stw	r2,-12(fp)
   9033c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   90340:	e037883a 	mov	sp,fp
   90344:	dfc00117 	ldw	ra,4(sp)
   90348:	df000017 	ldw	fp,0(sp)
   9034c:	dec00204 	addi	sp,sp,8
   90350:	f800283a 	ret

00090354 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   90354:	defffd04 	addi	sp,sp,-12
   90358:	dfc00215 	stw	ra,8(sp)
   9035c:	df000115 	stw	fp,4(sp)
   90360:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   90364:	00800274 	movhi	r2,9
   90368:	1098c804 	addi	r2,r2,25376
   9036c:	10800017 	ldw	r2,0(r2)
   90370:	1005003a 	cmpeq	r2,r2,zero
   90374:	1000061e 	bne	r2,zero,90390 <alt_get_errno+0x3c>
   90378:	00800274 	movhi	r2,9
   9037c:	1098c804 	addi	r2,r2,25376
   90380:	10800017 	ldw	r2,0(r2)
   90384:	103ee83a 	callr	r2
   90388:	e0bfff15 	stw	r2,-4(fp)
   9038c:	00000306 	br	9039c <alt_get_errno+0x48>
   90390:	00800274 	movhi	r2,9
   90394:	109fb904 	addi	r2,r2,32484
   90398:	e0bfff15 	stw	r2,-4(fp)
   9039c:	e0bfff17 	ldw	r2,-4(fp)
}
   903a0:	e037883a 	mov	sp,fp
   903a4:	dfc00117 	ldw	ra,4(sp)
   903a8:	df000017 	ldw	fp,0(sp)
   903ac:	dec00204 	addi	sp,sp,8
   903b0:	f800283a 	ret

000903b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   903b4:	defffc04 	addi	sp,sp,-16
   903b8:	df000315 	stw	fp,12(sp)
   903bc:	df000304 	addi	fp,sp,12
   903c0:	e13ffd15 	stw	r4,-12(fp)
   903c4:	e17ffe15 	stw	r5,-8(fp)
   903c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   903cc:	e0bfff17 	ldw	r2,-4(fp)
}
   903d0:	e037883a 	mov	sp,fp
   903d4:	df000017 	ldw	fp,0(sp)
   903d8:	dec00104 	addi	sp,sp,4
   903dc:	f800283a 	ret

000903e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   903e0:	defff904 	addi	sp,sp,-28
   903e4:	dfc00615 	stw	ra,24(sp)
   903e8:	df000515 	stw	fp,20(sp)
   903ec:	df000504 	addi	fp,sp,20
   903f0:	e13ffc15 	stw	r4,-16(fp)
   903f4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   903f8:	e0bffc17 	ldw	r2,-16(fp)
   903fc:	1004803a 	cmplt	r2,r2,zero
   90400:	1000091e 	bne	r2,zero,90428 <fstat+0x48>
   90404:	e13ffc17 	ldw	r4,-16(fp)
   90408:	01400304 	movi	r5,12
   9040c:	0080ba00 	call	80ba0 <__mulsi3>
   90410:	1007883a 	mov	r3,r2
   90414:	00800274 	movhi	r2,9
   90418:	1093fc04 	addi	r2,r2,20464
   9041c:	1887883a 	add	r3,r3,r2
   90420:	e0ffff15 	stw	r3,-4(fp)
   90424:	00000106 	br	9042c <fstat+0x4c>
   90428:	e03fff15 	stw	zero,-4(fp)
   9042c:	e0bfff17 	ldw	r2,-4(fp)
   90430:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   90434:	e0bffb17 	ldw	r2,-20(fp)
   90438:	1005003a 	cmpeq	r2,r2,zero
   9043c:	1000121e 	bne	r2,zero,90488 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   90440:	e0bffb17 	ldw	r2,-20(fp)
   90444:	10800017 	ldw	r2,0(r2)
   90448:	10800817 	ldw	r2,32(r2)
   9044c:	1005003a 	cmpeq	r2,r2,zero
   90450:	1000081e 	bne	r2,zero,90474 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   90454:	e0bffb17 	ldw	r2,-20(fp)
   90458:	10800017 	ldw	r2,0(r2)
   9045c:	10800817 	ldw	r2,32(r2)
   90460:	e13ffb17 	ldw	r4,-20(fp)
   90464:	e17ffd17 	ldw	r5,-12(fp)
   90468:	103ee83a 	callr	r2
   9046c:	e0bffe15 	stw	r2,-8(fp)
   90470:	00000b06 	br	904a0 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   90474:	e0fffd17 	ldw	r3,-12(fp)
   90478:	00880004 	movi	r2,8192
   9047c:	18800115 	stw	r2,4(r3)
      return 0;
   90480:	e03ffe15 	stw	zero,-8(fp)
   90484:	00000606 	br	904a0 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   90488:	00904b80 	call	904b8 <alt_get_errno>
   9048c:	1007883a 	mov	r3,r2
   90490:	00801444 	movi	r2,81
   90494:	18800015 	stw	r2,0(r3)
    return -1;
   90498:	00bfffc4 	movi	r2,-1
   9049c:	e0bffe15 	stw	r2,-8(fp)
   904a0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   904a4:	e037883a 	mov	sp,fp
   904a8:	dfc00117 	ldw	ra,4(sp)
   904ac:	df000017 	ldw	fp,0(sp)
   904b0:	dec00204 	addi	sp,sp,8
   904b4:	f800283a 	ret

000904b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   904b8:	defffd04 	addi	sp,sp,-12
   904bc:	dfc00215 	stw	ra,8(sp)
   904c0:	df000115 	stw	fp,4(sp)
   904c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   904c8:	00800274 	movhi	r2,9
   904cc:	1098c804 	addi	r2,r2,25376
   904d0:	10800017 	ldw	r2,0(r2)
   904d4:	1005003a 	cmpeq	r2,r2,zero
   904d8:	1000061e 	bne	r2,zero,904f4 <alt_get_errno+0x3c>
   904dc:	00800274 	movhi	r2,9
   904e0:	1098c804 	addi	r2,r2,25376
   904e4:	10800017 	ldw	r2,0(r2)
   904e8:	103ee83a 	callr	r2
   904ec:	e0bfff15 	stw	r2,-4(fp)
   904f0:	00000306 	br	90500 <alt_get_errno+0x48>
   904f4:	00800274 	movhi	r2,9
   904f8:	109fb904 	addi	r2,r2,32484
   904fc:	e0bfff15 	stw	r2,-4(fp)
   90500:	e0bfff17 	ldw	r2,-4(fp)
}
   90504:	e037883a 	mov	sp,fp
   90508:	dfc00117 	ldw	ra,4(sp)
   9050c:	df000017 	ldw	fp,0(sp)
   90510:	dec00204 	addi	sp,sp,8
   90514:	f800283a 	ret

00090518 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   90518:	deffeb04 	addi	sp,sp,-84
   9051c:	dfc01415 	stw	ra,80(sp)
   90520:	df001315 	stw	fp,76(sp)
   90524:	df001304 	addi	fp,sp,76
   90528:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   9052c:	e0bffd17 	ldw	r2,-12(fp)
   90530:	1004803a 	cmplt	r2,r2,zero
   90534:	1000091e 	bne	r2,zero,9055c <isatty+0x44>
   90538:	e13ffd17 	ldw	r4,-12(fp)
   9053c:	01400304 	movi	r5,12
   90540:	0080ba00 	call	80ba0 <__mulsi3>
   90544:	1007883a 	mov	r3,r2
   90548:	00800274 	movhi	r2,9
   9054c:	1093fc04 	addi	r2,r2,20464
   90550:	1887883a 	add	r3,r3,r2
   90554:	e0ffff15 	stw	r3,-4(fp)
   90558:	00000106 	br	90560 <isatty+0x48>
   9055c:	e03fff15 	stw	zero,-4(fp)
   90560:	e0bfff17 	ldw	r2,-4(fp)
   90564:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   90568:	e0bfed17 	ldw	r2,-76(fp)
   9056c:	1005003a 	cmpeq	r2,r2,zero
   90570:	10000f1e 	bne	r2,zero,905b0 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   90574:	e0bfed17 	ldw	r2,-76(fp)
   90578:	10800017 	ldw	r2,0(r2)
   9057c:	10800817 	ldw	r2,32(r2)
   90580:	1004c03a 	cmpne	r2,r2,zero
   90584:	1000031e 	bne	r2,zero,90594 <isatty+0x7c>
    {
      return 1;
   90588:	00800044 	movi	r2,1
   9058c:	e0bffe15 	stw	r2,-8(fp)
   90590:	00000c06 	br	905c4 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   90594:	e17fee04 	addi	r5,fp,-72
   90598:	e13ffd17 	ldw	r4,-12(fp)
   9059c:	00903e00 	call	903e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   905a0:	e0bfef17 	ldw	r2,-68(fp)
   905a4:	10880020 	cmpeqi	r2,r2,8192
   905a8:	e0bffe15 	stw	r2,-8(fp)
   905ac:	00000506 	br	905c4 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   905b0:	00905dc0 	call	905dc <alt_get_errno>
   905b4:	1007883a 	mov	r3,r2
   905b8:	00801444 	movi	r2,81
   905bc:	18800015 	stw	r2,0(r3)
    return 0;
   905c0:	e03ffe15 	stw	zero,-8(fp)
   905c4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   905c8:	e037883a 	mov	sp,fp
   905cc:	dfc00117 	ldw	ra,4(sp)
   905d0:	df000017 	ldw	fp,0(sp)
   905d4:	dec00204 	addi	sp,sp,8
   905d8:	f800283a 	ret

000905dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   905dc:	defffd04 	addi	sp,sp,-12
   905e0:	dfc00215 	stw	ra,8(sp)
   905e4:	df000115 	stw	fp,4(sp)
   905e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   905ec:	00800274 	movhi	r2,9
   905f0:	1098c804 	addi	r2,r2,25376
   905f4:	10800017 	ldw	r2,0(r2)
   905f8:	1005003a 	cmpeq	r2,r2,zero
   905fc:	1000061e 	bne	r2,zero,90618 <alt_get_errno+0x3c>
   90600:	00800274 	movhi	r2,9
   90604:	1098c804 	addi	r2,r2,25376
   90608:	10800017 	ldw	r2,0(r2)
   9060c:	103ee83a 	callr	r2
   90610:	e0bfff15 	stw	r2,-4(fp)
   90614:	00000306 	br	90624 <alt_get_errno+0x48>
   90618:	00800274 	movhi	r2,9
   9061c:	109fb904 	addi	r2,r2,32484
   90620:	e0bfff15 	stw	r2,-4(fp)
   90624:	e0bfff17 	ldw	r2,-4(fp)
}
   90628:	e037883a 	mov	sp,fp
   9062c:	dfc00117 	ldw	ra,4(sp)
   90630:	df000017 	ldw	fp,0(sp)
   90634:	dec00204 	addi	sp,sp,8
   90638:	f800283a 	ret

0009063c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   9063c:	defffe04 	addi	sp,sp,-8
   90640:	dfc00115 	stw	ra,4(sp)
   90644:	df000015 	stw	fp,0(sp)
   90648:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   9064c:	01000274 	movhi	r4,9
   90650:	2118ce04 	addi	r4,r4,25400
   90654:	01400274 	movhi	r5,9
   90658:	2951e304 	addi	r5,r5,18316
   9065c:	01800274 	movhi	r6,9
   90660:	3198ce04 	addi	r6,r6,25400
   90664:	00906bc0 	call	906bc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   90668:	01000234 	movhi	r4,8
   9066c:	21000804 	addi	r4,r4,32
   90670:	01400234 	movhi	r5,8
   90674:	29400804 	addi	r5,r5,32
   90678:	01800234 	movhi	r6,8
   9067c:	31806d04 	addi	r6,r6,436
   90680:	00906bc0 	call	906bc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   90684:	01000274 	movhi	r4,9
   90688:	210fe804 	addi	r4,r4,16288
   9068c:	01400274 	movhi	r5,9
   90690:	294fe804 	addi	r5,r5,16288
   90694:	01800274 	movhi	r6,9
   90698:	3191e304 	addi	r6,r6,18316
   9069c:	00906bc0 	call	906bc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   906a0:	009311c0 	call	9311c <alt_dcache_flush_all>
  alt_icache_flush_all();
   906a4:	00935980 	call	93598 <alt_icache_flush_all>
}
   906a8:	e037883a 	mov	sp,fp
   906ac:	dfc00117 	ldw	ra,4(sp)
   906b0:	df000017 	ldw	fp,0(sp)
   906b4:	dec00204 	addi	sp,sp,8
   906b8:	f800283a 	ret

000906bc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   906bc:	defffc04 	addi	sp,sp,-16
   906c0:	df000315 	stw	fp,12(sp)
   906c4:	df000304 	addi	fp,sp,12
   906c8:	e13ffd15 	stw	r4,-12(fp)
   906cc:	e17ffe15 	stw	r5,-8(fp)
   906d0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   906d4:	e0fffe17 	ldw	r3,-8(fp)
   906d8:	e0bffd17 	ldw	r2,-12(fp)
   906dc:	18800e26 	beq	r3,r2,90718 <alt_load_section+0x5c>
  {
    while( to != end )
   906e0:	00000a06 	br	9070c <alt_load_section+0x50>
    {
      *to++ = *from++;
   906e4:	e0bffd17 	ldw	r2,-12(fp)
   906e8:	10c00017 	ldw	r3,0(r2)
   906ec:	e0bffe17 	ldw	r2,-8(fp)
   906f0:	10c00015 	stw	r3,0(r2)
   906f4:	e0bffe17 	ldw	r2,-8(fp)
   906f8:	10800104 	addi	r2,r2,4
   906fc:	e0bffe15 	stw	r2,-8(fp)
   90700:	e0bffd17 	ldw	r2,-12(fp)
   90704:	10800104 	addi	r2,r2,4
   90708:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   9070c:	e0fffe17 	ldw	r3,-8(fp)
   90710:	e0bfff17 	ldw	r2,-4(fp)
   90714:	18bff31e 	bne	r3,r2,906e4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   90718:	e037883a 	mov	sp,fp
   9071c:	df000017 	ldw	fp,0(sp)
   90720:	dec00104 	addi	sp,sp,4
   90724:	f800283a 	ret

00090728 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   90728:	defff804 	addi	sp,sp,-32
   9072c:	dfc00715 	stw	ra,28(sp)
   90730:	df000615 	stw	fp,24(sp)
   90734:	df000604 	addi	fp,sp,24
   90738:	e13ffc15 	stw	r4,-16(fp)
   9073c:	e17ffd15 	stw	r5,-12(fp)
   90740:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   90744:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   90748:	e0bffc17 	ldw	r2,-16(fp)
   9074c:	1004803a 	cmplt	r2,r2,zero
   90750:	1000091e 	bne	r2,zero,90778 <lseek+0x50>
   90754:	e13ffc17 	ldw	r4,-16(fp)
   90758:	01400304 	movi	r5,12
   9075c:	0080ba00 	call	80ba0 <__mulsi3>
   90760:	1007883a 	mov	r3,r2
   90764:	00800274 	movhi	r2,9
   90768:	1093fc04 	addi	r2,r2,20464
   9076c:	1887883a 	add	r3,r3,r2
   90770:	e0ffff15 	stw	r3,-4(fp)
   90774:	00000106 	br	9077c <lseek+0x54>
   90778:	e03fff15 	stw	zero,-4(fp)
   9077c:	e0bfff17 	ldw	r2,-4(fp)
   90780:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   90784:	e0bffb17 	ldw	r2,-20(fp)
   90788:	1005003a 	cmpeq	r2,r2,zero
   9078c:	1000111e 	bne	r2,zero,907d4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   90790:	e0bffb17 	ldw	r2,-20(fp)
   90794:	10800017 	ldw	r2,0(r2)
   90798:	10800717 	ldw	r2,28(r2)
   9079c:	1005003a 	cmpeq	r2,r2,zero
   907a0:	1000091e 	bne	r2,zero,907c8 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   907a4:	e0bffb17 	ldw	r2,-20(fp)
   907a8:	10800017 	ldw	r2,0(r2)
   907ac:	10800717 	ldw	r2,28(r2)
   907b0:	e13ffb17 	ldw	r4,-20(fp)
   907b4:	e17ffd17 	ldw	r5,-12(fp)
   907b8:	e1bffe17 	ldw	r6,-8(fp)
   907bc:	103ee83a 	callr	r2
   907c0:	e0bffa15 	stw	r2,-24(fp)
   907c4:	00000506 	br	907dc <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   907c8:	00bfde84 	movi	r2,-134
   907cc:	e0bffa15 	stw	r2,-24(fp)
   907d0:	00000206 	br	907dc <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   907d4:	00bfebc4 	movi	r2,-81
   907d8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   907dc:	e0bffa17 	ldw	r2,-24(fp)
   907e0:	1004403a 	cmpge	r2,r2,zero
   907e4:	1000071e 	bne	r2,zero,90804 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   907e8:	009081c0 	call	9081c <alt_get_errno>
   907ec:	1007883a 	mov	r3,r2
   907f0:	e0bffa17 	ldw	r2,-24(fp)
   907f4:	0085c83a 	sub	r2,zero,r2
   907f8:	18800015 	stw	r2,0(r3)
    rc = -1;
   907fc:	00bfffc4 	movi	r2,-1
   90800:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   90804:	e0bffa17 	ldw	r2,-24(fp)
}
   90808:	e037883a 	mov	sp,fp
   9080c:	dfc00117 	ldw	ra,4(sp)
   90810:	df000017 	ldw	fp,0(sp)
   90814:	dec00204 	addi	sp,sp,8
   90818:	f800283a 	ret

0009081c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9081c:	defffd04 	addi	sp,sp,-12
   90820:	dfc00215 	stw	ra,8(sp)
   90824:	df000115 	stw	fp,4(sp)
   90828:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   9082c:	00800274 	movhi	r2,9
   90830:	1098c804 	addi	r2,r2,25376
   90834:	10800017 	ldw	r2,0(r2)
   90838:	1005003a 	cmpeq	r2,r2,zero
   9083c:	1000061e 	bne	r2,zero,90858 <alt_get_errno+0x3c>
   90840:	00800274 	movhi	r2,9
   90844:	1098c804 	addi	r2,r2,25376
   90848:	10800017 	ldw	r2,0(r2)
   9084c:	103ee83a 	callr	r2
   90850:	e0bfff15 	stw	r2,-4(fp)
   90854:	00000306 	br	90864 <alt_get_errno+0x48>
   90858:	00800274 	movhi	r2,9
   9085c:	109fb904 	addi	r2,r2,32484
   90860:	e0bfff15 	stw	r2,-4(fp)
   90864:	e0bfff17 	ldw	r2,-4(fp)
}
   90868:	e037883a 	mov	sp,fp
   9086c:	dfc00117 	ldw	ra,4(sp)
   90870:	df000017 	ldw	fp,0(sp)
   90874:	dec00204 	addi	sp,sp,8
   90878:	f800283a 	ret

0009087c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   9087c:	defffd04 	addi	sp,sp,-12
   90880:	dfc00215 	stw	ra,8(sp)
   90884:	df000115 	stw	fp,4(sp)
   90888:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   9088c:	0009883a 	mov	r4,zero
   90890:	00910780 	call	91078 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   90894:	00910ac0 	call	910ac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   90898:	01000274 	movhi	r4,9
   9089c:	2111d604 	addi	r4,r4,18264
   908a0:	01400274 	movhi	r5,9
   908a4:	2951d604 	addi	r5,r5,18264
   908a8:	01800274 	movhi	r6,9
   908ac:	3191d604 	addi	r6,r6,18264
   908b0:	00939580 	call	93958 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   908b4:	009324c0 	call	9324c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   908b8:	01000274 	movhi	r4,9
   908bc:	210cac04 	addi	r4,r4,12976
   908c0:	0093b940 	call	93b94 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   908c4:	d1270417 	ldw	r4,-25584(gp)
   908c8:	d1670517 	ldw	r5,-25580(gp)
   908cc:	d1a70617 	ldw	r6,-25576(gp)
   908d0:	008064c0 	call	8064c <main>
   908d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   908d8:	01000044 	movi	r4,1
   908dc:	00902540 	call	90254 <close>
  exit (result);
   908e0:	e13fff17 	ldw	r4,-4(fp)
   908e4:	0093ba80 	call	93ba8 <exit>

000908e8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   908e8:	defffe04 	addi	sp,sp,-8
   908ec:	df000115 	stw	fp,4(sp)
   908f0:	df000104 	addi	fp,sp,4
   908f4:	e13fff15 	stw	r4,-4(fp)
}
   908f8:	e037883a 	mov	sp,fp
   908fc:	df000017 	ldw	fp,0(sp)
   90900:	dec00104 	addi	sp,sp,4
   90904:	f800283a 	ret

00090908 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   90908:	defffe04 	addi	sp,sp,-8
   9090c:	df000115 	stw	fp,4(sp)
   90910:	df000104 	addi	fp,sp,4
   90914:	e13fff15 	stw	r4,-4(fp)
}
   90918:	e037883a 	mov	sp,fp
   9091c:	df000017 	ldw	fp,0(sp)
   90920:	dec00104 	addi	sp,sp,4
   90924:	f800283a 	ret

00090928 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   90928:	defffa04 	addi	sp,sp,-24
   9092c:	dfc00515 	stw	ra,20(sp)
   90930:	df000415 	stw	fp,16(sp)
   90934:	dc000315 	stw	r16,12(sp)
   90938:	df000304 	addi	fp,sp,12
   9093c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   90940:	e0bffe17 	ldw	r2,-8(fp)
   90944:	10800217 	ldw	r2,8(r2)
   90948:	10d00034 	orhi	r3,r2,16384
   9094c:	e0bffe17 	ldw	r2,-8(fp)
   90950:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   90954:	e03ffd15 	stw	zero,-12(fp)
   90958:	00002306 	br	909e8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   9095c:	e13ffd17 	ldw	r4,-12(fp)
   90960:	04000274 	movhi	r16,9
   90964:	8413fc04 	addi	r16,r16,20464
   90968:	01400304 	movi	r5,12
   9096c:	0080ba00 	call	80ba0 <__mulsi3>
   90970:	1405883a 	add	r2,r2,r16
   90974:	10c00017 	ldw	r3,0(r2)
   90978:	e0bffe17 	ldw	r2,-8(fp)
   9097c:	10800017 	ldw	r2,0(r2)
   90980:	1880161e 	bne	r3,r2,909dc <alt_file_locked+0xb4>
   90984:	e13ffd17 	ldw	r4,-12(fp)
   90988:	04000274 	movhi	r16,9
   9098c:	8413fc04 	addi	r16,r16,20464
   90990:	01400304 	movi	r5,12
   90994:	0080ba00 	call	80ba0 <__mulsi3>
   90998:	1405883a 	add	r2,r2,r16
   9099c:	10800204 	addi	r2,r2,8
   909a0:	10800017 	ldw	r2,0(r2)
   909a4:	1004403a 	cmpge	r2,r2,zero
   909a8:	10000c1e 	bne	r2,zero,909dc <alt_file_locked+0xb4>
   909ac:	e13ffd17 	ldw	r4,-12(fp)
   909b0:	01400304 	movi	r5,12
   909b4:	0080ba00 	call	80ba0 <__mulsi3>
   909b8:	1007883a 	mov	r3,r2
   909bc:	00800274 	movhi	r2,9
   909c0:	1093fc04 	addi	r2,r2,20464
   909c4:	1887883a 	add	r3,r3,r2
   909c8:	e0bffe17 	ldw	r2,-8(fp)
   909cc:	18800326 	beq	r3,r2,909dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   909d0:	00bffcc4 	movi	r2,-13
   909d4:	e0bfff15 	stw	r2,-4(fp)
   909d8:	00000a06 	br	90a04 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   909dc:	e0bffd17 	ldw	r2,-12(fp)
   909e0:	10800044 	addi	r2,r2,1
   909e4:	e0bffd15 	stw	r2,-12(fp)
   909e8:	00800274 	movhi	r2,9
   909ec:	1098c704 	addi	r2,r2,25372
   909f0:	10800017 	ldw	r2,0(r2)
   909f4:	1007883a 	mov	r3,r2
   909f8:	e0bffd17 	ldw	r2,-12(fp)
   909fc:	18bfd72e 	bgeu	r3,r2,9095c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   90a00:	e03fff15 	stw	zero,-4(fp)
   90a04:	e0bfff17 	ldw	r2,-4(fp)
}
   90a08:	e037883a 	mov	sp,fp
   90a0c:	dfc00217 	ldw	ra,8(sp)
   90a10:	df000117 	ldw	fp,4(sp)
   90a14:	dc000017 	ldw	r16,0(sp)
   90a18:	dec00304 	addi	sp,sp,12
   90a1c:	f800283a 	ret

00090a20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   90a20:	defff404 	addi	sp,sp,-48
   90a24:	dfc00b15 	stw	ra,44(sp)
   90a28:	df000a15 	stw	fp,40(sp)
   90a2c:	df000a04 	addi	fp,sp,40
   90a30:	e13ffb15 	stw	r4,-20(fp)
   90a34:	e17ffc15 	stw	r5,-16(fp)
   90a38:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   90a3c:	00bfffc4 	movi	r2,-1
   90a40:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   90a44:	00bffb44 	movi	r2,-19
   90a48:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   90a4c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   90a50:	e13ffb17 	ldw	r4,-20(fp)
   90a54:	01400274 	movhi	r5,9
   90a58:	2958c504 	addi	r5,r5,25364
   90a5c:	00933140 	call	93314 <alt_find_dev>
   90a60:	e0bffa15 	stw	r2,-24(fp)
   90a64:	e0bffa17 	ldw	r2,-24(fp)
   90a68:	1004c03a 	cmpne	r2,r2,zero
   90a6c:	1000051e 	bne	r2,zero,90a84 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   90a70:	e13ffb17 	ldw	r4,-20(fp)
   90a74:	00933a80 	call	933a8 <alt_find_file>
   90a78:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   90a7c:	00800044 	movi	r2,1
   90a80:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   90a84:	e0bffa17 	ldw	r2,-24(fp)
   90a88:	1005003a 	cmpeq	r2,r2,zero
   90a8c:	1000311e 	bne	r2,zero,90b54 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   90a90:	e13ffa17 	ldw	r4,-24(fp)
   90a94:	00934c80 	call	934c8 <alt_get_fd>
   90a98:	e0bff815 	stw	r2,-32(fp)
   90a9c:	e0bff817 	ldw	r2,-32(fp)
   90aa0:	1004403a 	cmpge	r2,r2,zero
   90aa4:	1000031e 	bne	r2,zero,90ab4 <open+0x94>
    {
      status = index;
   90aa8:	e0bff817 	ldw	r2,-32(fp)
   90aac:	e0bff715 	stw	r2,-36(fp)
   90ab0:	00002a06 	br	90b5c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   90ab4:	e13ff817 	ldw	r4,-32(fp)
   90ab8:	01400304 	movi	r5,12
   90abc:	0080ba00 	call	80ba0 <__mulsi3>
   90ac0:	1007883a 	mov	r3,r2
   90ac4:	00800274 	movhi	r2,9
   90ac8:	1093fc04 	addi	r2,r2,20464
   90acc:	1885883a 	add	r2,r3,r2
   90ad0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   90ad4:	e0fffc17 	ldw	r3,-16(fp)
   90ad8:	00900034 	movhi	r2,16384
   90adc:	10bfffc4 	addi	r2,r2,-1
   90ae0:	1886703a 	and	r3,r3,r2
   90ae4:	e0bff917 	ldw	r2,-28(fp)
   90ae8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   90aec:	e0bff617 	ldw	r2,-40(fp)
   90af0:	1004c03a 	cmpne	r2,r2,zero
   90af4:	1000061e 	bne	r2,zero,90b10 <open+0xf0>
   90af8:	e13ff917 	ldw	r4,-28(fp)
   90afc:	00909280 	call	90928 <alt_file_locked>
   90b00:	e0bff715 	stw	r2,-36(fp)
   90b04:	e0bff717 	ldw	r2,-36(fp)
   90b08:	1004803a 	cmplt	r2,r2,zero
   90b0c:	1000131e 	bne	r2,zero,90b5c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   90b10:	e0bffa17 	ldw	r2,-24(fp)
   90b14:	10800317 	ldw	r2,12(r2)
   90b18:	1005003a 	cmpeq	r2,r2,zero
   90b1c:	1000091e 	bne	r2,zero,90b44 <open+0x124>
   90b20:	e0bffa17 	ldw	r2,-24(fp)
   90b24:	10800317 	ldw	r2,12(r2)
   90b28:	e13ff917 	ldw	r4,-28(fp)
   90b2c:	e17ffb17 	ldw	r5,-20(fp)
   90b30:	e1bffc17 	ldw	r6,-16(fp)
   90b34:	e1fffd17 	ldw	r7,-12(fp)
   90b38:	103ee83a 	callr	r2
   90b3c:	e0bfff15 	stw	r2,-4(fp)
   90b40:	00000106 	br	90b48 <open+0x128>
   90b44:	e03fff15 	stw	zero,-4(fp)
   90b48:	e0bfff17 	ldw	r2,-4(fp)
   90b4c:	e0bff715 	stw	r2,-36(fp)
   90b50:	00000206 	br	90b5c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   90b54:	00bffb44 	movi	r2,-19
   90b58:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   90b5c:	e0bff717 	ldw	r2,-36(fp)
   90b60:	1004403a 	cmpge	r2,r2,zero
   90b64:	1000091e 	bne	r2,zero,90b8c <open+0x16c>
  {
    alt_release_fd (index);  
   90b68:	e13ff817 	ldw	r4,-32(fp)
   90b6c:	0090d900 	call	90d90 <alt_release_fd>
    ALT_ERRNO = -status;
   90b70:	0090bac0 	call	90bac <alt_get_errno>
   90b74:	e0fff717 	ldw	r3,-36(fp)
   90b78:	00c7c83a 	sub	r3,zero,r3
   90b7c:	10c00015 	stw	r3,0(r2)
    return -1;
   90b80:	00bfffc4 	movi	r2,-1
   90b84:	e0bffe15 	stw	r2,-8(fp)
   90b88:	00000206 	br	90b94 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   90b8c:	e0bff817 	ldw	r2,-32(fp)
   90b90:	e0bffe15 	stw	r2,-8(fp)
   90b94:	e0bffe17 	ldw	r2,-8(fp)
}
   90b98:	e037883a 	mov	sp,fp
   90b9c:	dfc00117 	ldw	ra,4(sp)
   90ba0:	df000017 	ldw	fp,0(sp)
   90ba4:	dec00204 	addi	sp,sp,8
   90ba8:	f800283a 	ret

00090bac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   90bac:	defffd04 	addi	sp,sp,-12
   90bb0:	dfc00215 	stw	ra,8(sp)
   90bb4:	df000115 	stw	fp,4(sp)
   90bb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   90bbc:	00800274 	movhi	r2,9
   90bc0:	1098c804 	addi	r2,r2,25376
   90bc4:	10800017 	ldw	r2,0(r2)
   90bc8:	1005003a 	cmpeq	r2,r2,zero
   90bcc:	1000061e 	bne	r2,zero,90be8 <alt_get_errno+0x3c>
   90bd0:	00800274 	movhi	r2,9
   90bd4:	1098c804 	addi	r2,r2,25376
   90bd8:	10800017 	ldw	r2,0(r2)
   90bdc:	103ee83a 	callr	r2
   90be0:	e0bfff15 	stw	r2,-4(fp)
   90be4:	00000306 	br	90bf4 <alt_get_errno+0x48>
   90be8:	00800274 	movhi	r2,9
   90bec:	109fb904 	addi	r2,r2,32484
   90bf0:	e0bfff15 	stw	r2,-4(fp)
   90bf4:	e0bfff17 	ldw	r2,-4(fp)
}
   90bf8:	e037883a 	mov	sp,fp
   90bfc:	dfc00117 	ldw	ra,4(sp)
   90c00:	df000017 	ldw	fp,0(sp)
   90c04:	dec00204 	addi	sp,sp,8
   90c08:	f800283a 	ret

00090c0c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   90c0c:	defff704 	addi	sp,sp,-36
   90c10:	dfc00815 	stw	ra,32(sp)
   90c14:	df000715 	stw	fp,28(sp)
   90c18:	df000704 	addi	fp,sp,28
   90c1c:	e13ffb15 	stw	r4,-20(fp)
   90c20:	e17ffc15 	stw	r5,-16(fp)
   90c24:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   90c28:	e0bffb17 	ldw	r2,-20(fp)
   90c2c:	1004803a 	cmplt	r2,r2,zero
   90c30:	1000091e 	bne	r2,zero,90c58 <read+0x4c>
   90c34:	e13ffb17 	ldw	r4,-20(fp)
   90c38:	01400304 	movi	r5,12
   90c3c:	0080ba00 	call	80ba0 <__mulsi3>
   90c40:	1007883a 	mov	r3,r2
   90c44:	00800274 	movhi	r2,9
   90c48:	1093fc04 	addi	r2,r2,20464
   90c4c:	1887883a 	add	r3,r3,r2
   90c50:	e0ffff15 	stw	r3,-4(fp)
   90c54:	00000106 	br	90c5c <read+0x50>
   90c58:	e03fff15 	stw	zero,-4(fp)
   90c5c:	e0bfff17 	ldw	r2,-4(fp)
   90c60:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   90c64:	e0bffa17 	ldw	r2,-24(fp)
   90c68:	1005003a 	cmpeq	r2,r2,zero
   90c6c:	1000241e 	bne	r2,zero,90d00 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   90c70:	e0bffa17 	ldw	r2,-24(fp)
   90c74:	10800217 	ldw	r2,8(r2)
   90c78:	108000cc 	andi	r2,r2,3
   90c7c:	10800060 	cmpeqi	r2,r2,1
   90c80:	10001a1e 	bne	r2,zero,90cec <read+0xe0>
   90c84:	e0bffa17 	ldw	r2,-24(fp)
   90c88:	10800017 	ldw	r2,0(r2)
   90c8c:	10800517 	ldw	r2,20(r2)
   90c90:	1005003a 	cmpeq	r2,r2,zero
   90c94:	1000151e 	bne	r2,zero,90cec <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   90c98:	e0bffa17 	ldw	r2,-24(fp)
   90c9c:	10800017 	ldw	r2,0(r2)
   90ca0:	10800517 	ldw	r2,20(r2)
   90ca4:	e17ffc17 	ldw	r5,-16(fp)
   90ca8:	e1bffd17 	ldw	r6,-12(fp)
   90cac:	e13ffa17 	ldw	r4,-24(fp)
   90cb0:	103ee83a 	callr	r2
   90cb4:	e0bff915 	stw	r2,-28(fp)
   90cb8:	e0bff917 	ldw	r2,-28(fp)
   90cbc:	1004403a 	cmpge	r2,r2,zero
   90cc0:	1000071e 	bne	r2,zero,90ce0 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   90cc4:	0090d300 	call	90d30 <alt_get_errno>
   90cc8:	e0fff917 	ldw	r3,-28(fp)
   90ccc:	00c7c83a 	sub	r3,zero,r3
   90cd0:	10c00015 	stw	r3,0(r2)
          return -1;
   90cd4:	00bfffc4 	movi	r2,-1
   90cd8:	e0bffe15 	stw	r2,-8(fp)
   90cdc:	00000e06 	br	90d18 <read+0x10c>
        }
        return rval;
   90ce0:	e0bff917 	ldw	r2,-28(fp)
   90ce4:	e0bffe15 	stw	r2,-8(fp)
   90ce8:	00000b06 	br	90d18 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   90cec:	0090d300 	call	90d30 <alt_get_errno>
   90cf0:	1007883a 	mov	r3,r2
   90cf4:	00800344 	movi	r2,13
   90cf8:	18800015 	stw	r2,0(r3)
   90cfc:	00000406 	br	90d10 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   90d00:	0090d300 	call	90d30 <alt_get_errno>
   90d04:	1007883a 	mov	r3,r2
   90d08:	00801444 	movi	r2,81
   90d0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   90d10:	00bfffc4 	movi	r2,-1
   90d14:	e0bffe15 	stw	r2,-8(fp)
   90d18:	e0bffe17 	ldw	r2,-8(fp)
}
   90d1c:	e037883a 	mov	sp,fp
   90d20:	dfc00117 	ldw	ra,4(sp)
   90d24:	df000017 	ldw	fp,0(sp)
   90d28:	dec00204 	addi	sp,sp,8
   90d2c:	f800283a 	ret

00090d30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   90d30:	defffd04 	addi	sp,sp,-12
   90d34:	dfc00215 	stw	ra,8(sp)
   90d38:	df000115 	stw	fp,4(sp)
   90d3c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   90d40:	00800274 	movhi	r2,9
   90d44:	1098c804 	addi	r2,r2,25376
   90d48:	10800017 	ldw	r2,0(r2)
   90d4c:	1005003a 	cmpeq	r2,r2,zero
   90d50:	1000061e 	bne	r2,zero,90d6c <alt_get_errno+0x3c>
   90d54:	00800274 	movhi	r2,9
   90d58:	1098c804 	addi	r2,r2,25376
   90d5c:	10800017 	ldw	r2,0(r2)
   90d60:	103ee83a 	callr	r2
   90d64:	e0bfff15 	stw	r2,-4(fp)
   90d68:	00000306 	br	90d78 <alt_get_errno+0x48>
   90d6c:	00800274 	movhi	r2,9
   90d70:	109fb904 	addi	r2,r2,32484
   90d74:	e0bfff15 	stw	r2,-4(fp)
   90d78:	e0bfff17 	ldw	r2,-4(fp)
}
   90d7c:	e037883a 	mov	sp,fp
   90d80:	dfc00117 	ldw	ra,4(sp)
   90d84:	df000017 	ldw	fp,0(sp)
   90d88:	dec00204 	addi	sp,sp,8
   90d8c:	f800283a 	ret

00090d90 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   90d90:	defffc04 	addi	sp,sp,-16
   90d94:	dfc00315 	stw	ra,12(sp)
   90d98:	df000215 	stw	fp,8(sp)
   90d9c:	dc000115 	stw	r16,4(sp)
   90da0:	df000104 	addi	fp,sp,4
   90da4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   90da8:	e0bfff17 	ldw	r2,-4(fp)
   90dac:	108000d0 	cmplti	r2,r2,3
   90db0:	10000f1e 	bne	r2,zero,90df0 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   90db4:	e13fff17 	ldw	r4,-4(fp)
   90db8:	04000274 	movhi	r16,9
   90dbc:	8413fc04 	addi	r16,r16,20464
   90dc0:	01400304 	movi	r5,12
   90dc4:	0080ba00 	call	80ba0 <__mulsi3>
   90dc8:	1405883a 	add	r2,r2,r16
   90dcc:	10800204 	addi	r2,r2,8
   90dd0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   90dd4:	e13fff17 	ldw	r4,-4(fp)
   90dd8:	04000274 	movhi	r16,9
   90ddc:	8413fc04 	addi	r16,r16,20464
   90de0:	01400304 	movi	r5,12
   90de4:	0080ba00 	call	80ba0 <__mulsi3>
   90de8:	1405883a 	add	r2,r2,r16
   90dec:	10000015 	stw	zero,0(r2)
  }
}
   90df0:	e037883a 	mov	sp,fp
   90df4:	dfc00217 	ldw	ra,8(sp)
   90df8:	df000117 	ldw	fp,4(sp)
   90dfc:	dc000017 	ldw	r16,0(sp)
   90e00:	dec00304 	addi	sp,sp,12
   90e04:	f800283a 	ret

00090e08 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   90e08:	defff804 	addi	sp,sp,-32
   90e0c:	df000715 	stw	fp,28(sp)
   90e10:	df000704 	addi	fp,sp,28
   90e14:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90e18:	0005303a 	rdctl	r2,status
   90e1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90e20:	e0fffb17 	ldw	r3,-20(fp)
   90e24:	00bfff84 	movi	r2,-2
   90e28:	1884703a 	and	r2,r3,r2
   90e2c:	1001703a 	wrctl	status,r2
  
  return context;
   90e30:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   90e34:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   90e38:	d0a00d17 	ldw	r2,-32716(gp)
   90e3c:	10c000c4 	addi	r3,r2,3
   90e40:	00bfff04 	movi	r2,-4
   90e44:	1884703a 	and	r2,r3,r2
   90e48:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   90e4c:	d0e00d17 	ldw	r3,-32716(gp)
   90e50:	e0bffe17 	ldw	r2,-8(fp)
   90e54:	1887883a 	add	r3,r3,r2
   90e58:	00800434 	movhi	r2,16
   90e5c:	10800004 	addi	r2,r2,0
   90e60:	10c0072e 	bgeu	r2,r3,90e80 <sbrk+0x78>
   90e64:	e0bffd17 	ldw	r2,-12(fp)
   90e68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90e6c:	e0bffa17 	ldw	r2,-24(fp)
   90e70:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   90e74:	00bfffc4 	movi	r2,-1
   90e78:	e0bfff15 	stw	r2,-4(fp)
   90e7c:	00000c06 	br	90eb0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   90e80:	d0a00d17 	ldw	r2,-32716(gp)
   90e84:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   90e88:	d0e00d17 	ldw	r3,-32716(gp)
   90e8c:	e0bffe17 	ldw	r2,-8(fp)
   90e90:	1885883a 	add	r2,r3,r2
   90e94:	d0a00d15 	stw	r2,-32716(gp)
   90e98:	e0bffd17 	ldw	r2,-12(fp)
   90e9c:	e0bff915 	stw	r2,-28(fp)
   90ea0:	e0bff917 	ldw	r2,-28(fp)
   90ea4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   90ea8:	e0bffc17 	ldw	r2,-16(fp)
   90eac:	e0bfff15 	stw	r2,-4(fp)
   90eb0:	e0bfff17 	ldw	r2,-4(fp)
} 
   90eb4:	e037883a 	mov	sp,fp
   90eb8:	df000017 	ldw	fp,0(sp)
   90ebc:	dec00104 	addi	sp,sp,4
   90ec0:	f800283a 	ret

00090ec4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   90ec4:	defffd04 	addi	sp,sp,-12
   90ec8:	dfc00215 	stw	ra,8(sp)
   90ecc:	df000115 	stw	fp,4(sp)
   90ed0:	df000104 	addi	fp,sp,4
   90ed4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   90ed8:	e13fff17 	ldw	r4,-4(fp)
   90edc:	0092fc00 	call	92fc0 <alt_busy_sleep>
}
   90ee0:	e037883a 	mov	sp,fp
   90ee4:	dfc00117 	ldw	ra,4(sp)
   90ee8:	df000017 	ldw	fp,0(sp)
   90eec:	dec00204 	addi	sp,sp,8
   90ef0:	f800283a 	ret

00090ef4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   90ef4:	defff704 	addi	sp,sp,-36
   90ef8:	dfc00815 	stw	ra,32(sp)
   90efc:	df000715 	stw	fp,28(sp)
   90f00:	df000704 	addi	fp,sp,28
   90f04:	e13ffb15 	stw	r4,-20(fp)
   90f08:	e17ffc15 	stw	r5,-16(fp)
   90f0c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   90f10:	e0bffb17 	ldw	r2,-20(fp)
   90f14:	1004803a 	cmplt	r2,r2,zero
   90f18:	1000091e 	bne	r2,zero,90f40 <write+0x4c>
   90f1c:	e13ffb17 	ldw	r4,-20(fp)
   90f20:	01400304 	movi	r5,12
   90f24:	0080ba00 	call	80ba0 <__mulsi3>
   90f28:	1007883a 	mov	r3,r2
   90f2c:	00800274 	movhi	r2,9
   90f30:	1093fc04 	addi	r2,r2,20464
   90f34:	1887883a 	add	r3,r3,r2
   90f38:	e0ffff15 	stw	r3,-4(fp)
   90f3c:	00000106 	br	90f44 <write+0x50>
   90f40:	e03fff15 	stw	zero,-4(fp)
   90f44:	e0bfff17 	ldw	r2,-4(fp)
   90f48:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   90f4c:	e0bffa17 	ldw	r2,-24(fp)
   90f50:	1005003a 	cmpeq	r2,r2,zero
   90f54:	1000241e 	bne	r2,zero,90fe8 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   90f58:	e0bffa17 	ldw	r2,-24(fp)
   90f5c:	10800217 	ldw	r2,8(r2)
   90f60:	108000cc 	andi	r2,r2,3
   90f64:	1005003a 	cmpeq	r2,r2,zero
   90f68:	10001a1e 	bne	r2,zero,90fd4 <write+0xe0>
   90f6c:	e0bffa17 	ldw	r2,-24(fp)
   90f70:	10800017 	ldw	r2,0(r2)
   90f74:	10800617 	ldw	r2,24(r2)
   90f78:	1005003a 	cmpeq	r2,r2,zero
   90f7c:	1000151e 	bne	r2,zero,90fd4 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   90f80:	e0bffa17 	ldw	r2,-24(fp)
   90f84:	10800017 	ldw	r2,0(r2)
   90f88:	10800617 	ldw	r2,24(r2)
   90f8c:	e17ffc17 	ldw	r5,-16(fp)
   90f90:	e1bffd17 	ldw	r6,-12(fp)
   90f94:	e13ffa17 	ldw	r4,-24(fp)
   90f98:	103ee83a 	callr	r2
   90f9c:	e0bff915 	stw	r2,-28(fp)
   90fa0:	e0bff917 	ldw	r2,-28(fp)
   90fa4:	1004403a 	cmpge	r2,r2,zero
   90fa8:	1000071e 	bne	r2,zero,90fc8 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   90fac:	00910180 	call	91018 <alt_get_errno>
   90fb0:	e0fff917 	ldw	r3,-28(fp)
   90fb4:	00c7c83a 	sub	r3,zero,r3
   90fb8:	10c00015 	stw	r3,0(r2)
        return -1;
   90fbc:	00bfffc4 	movi	r2,-1
   90fc0:	e0bffe15 	stw	r2,-8(fp)
   90fc4:	00000e06 	br	91000 <write+0x10c>
      }
      return rval;
   90fc8:	e0bff917 	ldw	r2,-28(fp)
   90fcc:	e0bffe15 	stw	r2,-8(fp)
   90fd0:	00000b06 	br	91000 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   90fd4:	00910180 	call	91018 <alt_get_errno>
   90fd8:	1007883a 	mov	r3,r2
   90fdc:	00800344 	movi	r2,13
   90fe0:	18800015 	stw	r2,0(r3)
   90fe4:	00000406 	br	90ff8 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   90fe8:	00910180 	call	91018 <alt_get_errno>
   90fec:	1007883a 	mov	r3,r2
   90ff0:	00801444 	movi	r2,81
   90ff4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   90ff8:	00bfffc4 	movi	r2,-1
   90ffc:	e0bffe15 	stw	r2,-8(fp)
   91000:	e0bffe17 	ldw	r2,-8(fp)
}
   91004:	e037883a 	mov	sp,fp
   91008:	dfc00117 	ldw	ra,4(sp)
   9100c:	df000017 	ldw	fp,0(sp)
   91010:	dec00204 	addi	sp,sp,8
   91014:	f800283a 	ret

00091018 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   91018:	defffd04 	addi	sp,sp,-12
   9101c:	dfc00215 	stw	ra,8(sp)
   91020:	df000115 	stw	fp,4(sp)
   91024:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   91028:	00800274 	movhi	r2,9
   9102c:	1098c804 	addi	r2,r2,25376
   91030:	10800017 	ldw	r2,0(r2)
   91034:	1005003a 	cmpeq	r2,r2,zero
   91038:	1000061e 	bne	r2,zero,91054 <alt_get_errno+0x3c>
   9103c:	00800274 	movhi	r2,9
   91040:	1098c804 	addi	r2,r2,25376
   91044:	10800017 	ldw	r2,0(r2)
   91048:	103ee83a 	callr	r2
   9104c:	e0bfff15 	stw	r2,-4(fp)
   91050:	00000306 	br	91060 <alt_get_errno+0x48>
   91054:	00800274 	movhi	r2,9
   91058:	109fb904 	addi	r2,r2,32484
   9105c:	e0bfff15 	stw	r2,-4(fp)
   91060:	e0bfff17 	ldw	r2,-4(fp)
}
   91064:	e037883a 	mov	sp,fp
   91068:	dfc00117 	ldw	ra,4(sp)
   9106c:	df000017 	ldw	fp,0(sp)
   91070:	dec00204 	addi	sp,sp,8
   91074:	f800283a 	ret

00091078 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   91078:	defffd04 	addi	sp,sp,-12
   9107c:	dfc00215 	stw	ra,8(sp)
   91080:	df000115 	stw	fp,4(sp)
   91084:	df000104 	addi	fp,sp,4
   91088:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
   9108c:	0093b740 	call	93b74 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   91090:	00800044 	movi	r2,1
   91094:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   91098:	e037883a 	mov	sp,fp
   9109c:	dfc00117 	ldw	ra,4(sp)
   910a0:	df000017 	ldw	fp,0(sp)
   910a4:	dec00204 	addi	sp,sp,8
   910a8:	f800283a 	ret

000910ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   910ac:	defffe04 	addi	sp,sp,-8
   910b0:	dfc00115 	stw	ra,4(sp)
   910b4:	df000015 	stw	fp,0(sp)
   910b8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
   910bc:	01000434 	movhi	r4,16
   910c0:	21048804 	addi	r4,r4,4640
   910c4:	000b883a 	mov	r5,zero
   910c8:	01800044 	movi	r6,1
   910cc:	01c0fa04 	movi	r7,1000
   910d0:	0092c740 	call	92c74 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
   910d4:	00c00274 	movhi	r3,9
   910d8:	18dfc304 	addi	r3,r3,32524
   910dc:	00800434 	movhi	r2,16
   910e0:	10848004 	addi	r2,r2,4608
   910e4:	18800015 	stw	r2,0(r3)
   910e8:	00c00274 	movhi	r3,9
   910ec:	18dfc404 	addi	r3,r3,32528
   910f0:	0080bef4 	movhi	r2,763
   910f4:	10bc2004 	addi	r2,r2,-3968
   910f8:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   910fc:	01000274 	movhi	r4,9
   91100:	21146604 	addi	r4,r4,20888
   91104:	000b883a 	mov	r5,zero
   91108:	000d883a 	mov	r6,zero
   9110c:	00912c80 	call	912c8 <altera_avalon_jtag_uart_init>
   91110:	01000274 	movhi	r4,9
   91114:	21145c04 	addi	r4,r4,20848
   91118:	00911480 	call	91148 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_0, lcd_0);
   9111c:	01000274 	movhi	r4,9
   91120:	21187e04 	addi	r4,r4,25080
   91124:	0092a700 	call	92a70 <altera_avalon_lcd_16207_init>
   91128:	01000274 	movhi	r4,9
   9112c:	21187404 	addi	r4,r4,25040
   91130:	00911480 	call	91148 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
   91134:	e037883a 	mov	sp,fp
   91138:	dfc00117 	ldw	ra,4(sp)
   9113c:	df000017 	ldw	fp,0(sp)
   91140:	dec00204 	addi	sp,sp,8
   91144:	f800283a 	ret

00091148 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   91148:	defffd04 	addi	sp,sp,-12
   9114c:	dfc00215 	stw	ra,8(sp)
   91150:	df000115 	stw	fp,4(sp)
   91154:	df000104 	addi	fp,sp,4
   91158:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   9115c:	e13fff17 	ldw	r4,-4(fp)
   91160:	01400274 	movhi	r5,9
   91164:	2958c504 	addi	r5,r5,25364
   91168:	00931380 	call	93138 <alt_dev_llist_insert>
}
   9116c:	e037883a 	mov	sp,fp
   91170:	dfc00117 	ldw	ra,4(sp)
   91174:	df000017 	ldw	fp,0(sp)
   91178:	dec00204 	addi	sp,sp,8
   9117c:	f800283a 	ret

00091180 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   91180:	defffa04 	addi	sp,sp,-24
   91184:	dfc00515 	stw	ra,20(sp)
   91188:	df000415 	stw	fp,16(sp)
   9118c:	df000404 	addi	fp,sp,16
   91190:	e13ffd15 	stw	r4,-12(fp)
   91194:	e17ffe15 	stw	r5,-8(fp)
   91198:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   9119c:	e0bffd17 	ldw	r2,-12(fp)
   911a0:	10800017 	ldw	r2,0(r2)
   911a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   911a8:	e0bffc17 	ldw	r2,-16(fp)
   911ac:	11000a04 	addi	r4,r2,40
   911b0:	e0bffd17 	ldw	r2,-12(fp)
   911b4:	11c00217 	ldw	r7,8(r2)
   911b8:	e17ffe17 	ldw	r5,-8(fp)
   911bc:	e1bfff17 	ldw	r6,-4(fp)
   911c0:	00917c80 	call	917c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   911c4:	e037883a 	mov	sp,fp
   911c8:	dfc00117 	ldw	ra,4(sp)
   911cc:	df000017 	ldw	fp,0(sp)
   911d0:	dec00204 	addi	sp,sp,8
   911d4:	f800283a 	ret

000911d8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   911d8:	defffa04 	addi	sp,sp,-24
   911dc:	dfc00515 	stw	ra,20(sp)
   911e0:	df000415 	stw	fp,16(sp)
   911e4:	df000404 	addi	fp,sp,16
   911e8:	e13ffd15 	stw	r4,-12(fp)
   911ec:	e17ffe15 	stw	r5,-8(fp)
   911f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   911f4:	e0bffd17 	ldw	r2,-12(fp)
   911f8:	10800017 	ldw	r2,0(r2)
   911fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   91200:	e0bffc17 	ldw	r2,-16(fp)
   91204:	11000a04 	addi	r4,r2,40
   91208:	e0bffd17 	ldw	r2,-12(fp)
   9120c:	11c00217 	ldw	r7,8(r2)
   91210:	e17ffe17 	ldw	r5,-8(fp)
   91214:	e1bfff17 	ldw	r6,-4(fp)
   91218:	00919ec0 	call	919ec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   9121c:	e037883a 	mov	sp,fp
   91220:	dfc00117 	ldw	ra,4(sp)
   91224:	df000017 	ldw	fp,0(sp)
   91228:	dec00204 	addi	sp,sp,8
   9122c:	f800283a 	ret

00091230 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   91230:	defffc04 	addi	sp,sp,-16
   91234:	dfc00315 	stw	ra,12(sp)
   91238:	df000215 	stw	fp,8(sp)
   9123c:	df000204 	addi	fp,sp,8
   91240:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   91244:	e0bfff17 	ldw	r2,-4(fp)
   91248:	10800017 	ldw	r2,0(r2)
   9124c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   91250:	e0bffe17 	ldw	r2,-8(fp)
   91254:	11000a04 	addi	r4,r2,40
   91258:	e0bfff17 	ldw	r2,-4(fp)
   9125c:	11400217 	ldw	r5,8(r2)
   91260:	00916600 	call	91660 <altera_avalon_jtag_uart_close>
}
   91264:	e037883a 	mov	sp,fp
   91268:	dfc00117 	ldw	ra,4(sp)
   9126c:	df000017 	ldw	fp,0(sp)
   91270:	dec00204 	addi	sp,sp,8
   91274:	f800283a 	ret

00091278 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   91278:	defffa04 	addi	sp,sp,-24
   9127c:	dfc00515 	stw	ra,20(sp)
   91280:	df000415 	stw	fp,16(sp)
   91284:	df000404 	addi	fp,sp,16
   91288:	e13ffd15 	stw	r4,-12(fp)
   9128c:	e17ffe15 	stw	r5,-8(fp)
   91290:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   91294:	e0bffd17 	ldw	r2,-12(fp)
   91298:	10800017 	ldw	r2,0(r2)
   9129c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   912a0:	e0bffc17 	ldw	r2,-16(fp)
   912a4:	11000a04 	addi	r4,r2,40
   912a8:	e17ffe17 	ldw	r5,-8(fp)
   912ac:	e1bfff17 	ldw	r6,-4(fp)
   912b0:	00916d40 	call	916d4 <altera_avalon_jtag_uart_ioctl>
}
   912b4:	e037883a 	mov	sp,fp
   912b8:	dfc00117 	ldw	ra,4(sp)
   912bc:	df000017 	ldw	fp,0(sp)
   912c0:	dec00204 	addi	sp,sp,8
   912c4:	f800283a 	ret

000912c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   912c8:	defffa04 	addi	sp,sp,-24
   912cc:	dfc00515 	stw	ra,20(sp)
   912d0:	df000415 	stw	fp,16(sp)
   912d4:	df000404 	addi	fp,sp,16
   912d8:	e13ffd15 	stw	r4,-12(fp)
   912dc:	e17ffe15 	stw	r5,-8(fp)
   912e0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   912e4:	e0fffd17 	ldw	r3,-12(fp)
   912e8:	00800044 	movi	r2,1
   912ec:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   912f0:	e0bffd17 	ldw	r2,-12(fp)
   912f4:	10800017 	ldw	r2,0(r2)
   912f8:	11000104 	addi	r4,r2,4
   912fc:	e0bffd17 	ldw	r2,-12(fp)
   91300:	10800817 	ldw	r2,32(r2)
   91304:	1007883a 	mov	r3,r2
   91308:	2005883a 	mov	r2,r4
   9130c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   91310:	e13ffe17 	ldw	r4,-8(fp)
   91314:	e17fff17 	ldw	r5,-4(fp)
   91318:	d8000015 	stw	zero,0(sp)
   9131c:	01800274 	movhi	r6,9
   91320:	3184e204 	addi	r6,r6,5000
   91324:	e1fffd17 	ldw	r7,-12(fp)
   91328:	00935b40 	call	935b4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   9132c:	e0bffd17 	ldw	r2,-12(fp)
   91330:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   91334:	e0bffd17 	ldw	r2,-12(fp)
   91338:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   9133c:	00800274 	movhi	r2,9
   91340:	109fc604 	addi	r2,r2,32536
   91344:	10800017 	ldw	r2,0(r2)
   91348:	100b883a 	mov	r5,r2
   9134c:	01800274 	movhi	r6,9
   91350:	31856c04 	addi	r6,r6,5552
   91354:	e1fffd17 	ldw	r7,-12(fp)
   91358:	0092e6c0 	call	92e6c <alt_alarm_start>
   9135c:	1004403a 	cmpge	r2,r2,zero
   91360:	1000041e 	bne	r2,zero,91374 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   91364:	e0fffd17 	ldw	r3,-12(fp)
   91368:	00a00034 	movhi	r2,32768
   9136c:	10bfffc4 	addi	r2,r2,-1
   91370:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   91374:	e037883a 	mov	sp,fp
   91378:	dfc00117 	ldw	ra,4(sp)
   9137c:	df000017 	ldw	fp,0(sp)
   91380:	dec00204 	addi	sp,sp,8
   91384:	f800283a 	ret

00091388 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   91388:	defff804 	addi	sp,sp,-32
   9138c:	df000715 	stw	fp,28(sp)
   91390:	df000704 	addi	fp,sp,28
   91394:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   91398:	e0bfff17 	ldw	r2,-4(fp)
   9139c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   913a0:	e0bffe17 	ldw	r2,-8(fp)
   913a4:	10800017 	ldw	r2,0(r2)
   913a8:	e0bffd15 	stw	r2,-12(fp)
   913ac:	00000006 	br	913b0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   913b0:	e0bffd17 	ldw	r2,-12(fp)
   913b4:	10800104 	addi	r2,r2,4
   913b8:	10800037 	ldwio	r2,0(r2)
   913bc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   913c0:	e0bffc17 	ldw	r2,-16(fp)
   913c4:	1080c00c 	andi	r2,r2,768
   913c8:	1005003a 	cmpeq	r2,r2,zero
   913cc:	1000741e 	bne	r2,zero,915a0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   913d0:	e0bffc17 	ldw	r2,-16(fp)
   913d4:	1080400c 	andi	r2,r2,256
   913d8:	1005003a 	cmpeq	r2,r2,zero
   913dc:	1000351e 	bne	r2,zero,914b4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   913e0:	00800074 	movhi	r2,1
   913e4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   913e8:	e0bffe17 	ldw	r2,-8(fp)
   913ec:	10800a17 	ldw	r2,40(r2)
   913f0:	10800044 	addi	r2,r2,1
   913f4:	1081ffcc 	andi	r2,r2,2047
   913f8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   913fc:	e0bffe17 	ldw	r2,-8(fp)
   91400:	10c00b17 	ldw	r3,44(r2)
   91404:	e0bffa17 	ldw	r2,-24(fp)
   91408:	18801626 	beq	r3,r2,91464 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   9140c:	e0bffd17 	ldw	r2,-12(fp)
   91410:	10800037 	ldwio	r2,0(r2)
   91414:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   91418:	e0bffb17 	ldw	r2,-20(fp)
   9141c:	10a0000c 	andi	r2,r2,32768
   91420:	1005003a 	cmpeq	r2,r2,zero
   91424:	10000f1e 	bne	r2,zero,91464 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   91428:	e0bffe17 	ldw	r2,-8(fp)
   9142c:	10c00a17 	ldw	r3,40(r2)
   91430:	e0bffb17 	ldw	r2,-20(fp)
   91434:	1009883a 	mov	r4,r2
   91438:	e0bffe17 	ldw	r2,-8(fp)
   9143c:	1885883a 	add	r2,r3,r2
   91440:	10800e04 	addi	r2,r2,56
   91444:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   91448:	e0bffe17 	ldw	r2,-8(fp)
   9144c:	10800a17 	ldw	r2,40(r2)
   91450:	10800044 	addi	r2,r2,1
   91454:	10c1ffcc 	andi	r3,r2,2047
   91458:	e0bffe17 	ldw	r2,-8(fp)
   9145c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   91460:	003fe106 	br	913e8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   91464:	e0bffb17 	ldw	r2,-20(fp)
   91468:	10bfffec 	andhi	r2,r2,65535
   9146c:	1005003a 	cmpeq	r2,r2,zero
   91470:	1000101e 	bne	r2,zero,914b4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   91474:	e0bffe17 	ldw	r2,-8(fp)
   91478:	10c00817 	ldw	r3,32(r2)
   9147c:	00bfff84 	movi	r2,-2
   91480:	1886703a 	and	r3,r3,r2
   91484:	e0bffe17 	ldw	r2,-8(fp)
   91488:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   9148c:	e0bffd17 	ldw	r2,-12(fp)
   91490:	11000104 	addi	r4,r2,4
   91494:	e0bffe17 	ldw	r2,-8(fp)
   91498:	10800817 	ldw	r2,32(r2)
   9149c:	1007883a 	mov	r3,r2
   914a0:	2005883a 	mov	r2,r4
   914a4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   914a8:	e0bffd17 	ldw	r2,-12(fp)
   914ac:	10800104 	addi	r2,r2,4
   914b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   914b4:	e0bffc17 	ldw	r2,-16(fp)
   914b8:	1080800c 	andi	r2,r2,512
   914bc:	1005003a 	cmpeq	r2,r2,zero
   914c0:	103fbb1e 	bne	r2,zero,913b0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   914c4:	e0bffc17 	ldw	r2,-16(fp)
   914c8:	10bfffec 	andhi	r2,r2,65535
   914cc:	1004d43a 	srli	r2,r2,16
   914d0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   914d4:	00001506 	br	9152c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   914d8:	e13ffd17 	ldw	r4,-12(fp)
   914dc:	e0bffe17 	ldw	r2,-8(fp)
   914e0:	10c00d17 	ldw	r3,52(r2)
   914e4:	e0bffe17 	ldw	r2,-8(fp)
   914e8:	1885883a 	add	r2,r3,r2
   914ec:	10820e04 	addi	r2,r2,2104
   914f0:	10800003 	ldbu	r2,0(r2)
   914f4:	10c03fcc 	andi	r3,r2,255
   914f8:	18c0201c 	xori	r3,r3,128
   914fc:	18ffe004 	addi	r3,r3,-128
   91500:	2005883a 	mov	r2,r4
   91504:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   91508:	e0bffe17 	ldw	r2,-8(fp)
   9150c:	10800d17 	ldw	r2,52(r2)
   91510:	10800044 	addi	r2,r2,1
   91514:	10c1ffcc 	andi	r3,r2,2047
   91518:	e0bffe17 	ldw	r2,-8(fp)
   9151c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   91520:	e0bff917 	ldw	r2,-28(fp)
   91524:	10bfffc4 	addi	r2,r2,-1
   91528:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   9152c:	e0bff917 	ldw	r2,-28(fp)
   91530:	1005003a 	cmpeq	r2,r2,zero
   91534:	1000051e 	bne	r2,zero,9154c <altera_avalon_jtag_uart_irq+0x1c4>
   91538:	e0bffe17 	ldw	r2,-8(fp)
   9153c:	10c00d17 	ldw	r3,52(r2)
   91540:	e0bffe17 	ldw	r2,-8(fp)
   91544:	10800c17 	ldw	r2,48(r2)
   91548:	18bfe31e 	bne	r3,r2,914d8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   9154c:	e0bff917 	ldw	r2,-28(fp)
   91550:	1005003a 	cmpeq	r2,r2,zero
   91554:	103f961e 	bne	r2,zero,913b0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   91558:	e0bffe17 	ldw	r2,-8(fp)
   9155c:	10c00817 	ldw	r3,32(r2)
   91560:	00bfff44 	movi	r2,-3
   91564:	1886703a 	and	r3,r3,r2
   91568:	e0bffe17 	ldw	r2,-8(fp)
   9156c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   91570:	e0bffe17 	ldw	r2,-8(fp)
   91574:	10800017 	ldw	r2,0(r2)
   91578:	11000104 	addi	r4,r2,4
   9157c:	e0bffe17 	ldw	r2,-8(fp)
   91580:	10800817 	ldw	r2,32(r2)
   91584:	1007883a 	mov	r3,r2
   91588:	2005883a 	mov	r2,r4
   9158c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   91590:	e0bffd17 	ldw	r2,-12(fp)
   91594:	10800104 	addi	r2,r2,4
   91598:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   9159c:	003f8406 	br	913b0 <altera_avalon_jtag_uart_irq+0x28>
}
   915a0:	e037883a 	mov	sp,fp
   915a4:	df000017 	ldw	fp,0(sp)
   915a8:	dec00104 	addi	sp,sp,4
   915ac:	f800283a 	ret

000915b0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   915b0:	defffc04 	addi	sp,sp,-16
   915b4:	df000315 	stw	fp,12(sp)
   915b8:	df000304 	addi	fp,sp,12
   915bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   915c0:	e0bfff17 	ldw	r2,-4(fp)
   915c4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   915c8:	e0bffe17 	ldw	r2,-8(fp)
   915cc:	10800017 	ldw	r2,0(r2)
   915d0:	10800104 	addi	r2,r2,4
   915d4:	10800037 	ldwio	r2,0(r2)
   915d8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   915dc:	e0bffd17 	ldw	r2,-12(fp)
   915e0:	1081000c 	andi	r2,r2,1024
   915e4:	1005003a 	cmpeq	r2,r2,zero
   915e8:	10000c1e 	bne	r2,zero,9161c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   915ec:	e0bffe17 	ldw	r2,-8(fp)
   915f0:	10800017 	ldw	r2,0(r2)
   915f4:	11000104 	addi	r4,r2,4
   915f8:	e0bffe17 	ldw	r2,-8(fp)
   915fc:	10800817 	ldw	r2,32(r2)
   91600:	10810014 	ori	r2,r2,1024
   91604:	1007883a 	mov	r3,r2
   91608:	2005883a 	mov	r2,r4
   9160c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   91610:	e0bffe17 	ldw	r2,-8(fp)
   91614:	10000915 	stw	zero,36(r2)
   91618:	00000a06 	br	91644 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   9161c:	e0bffe17 	ldw	r2,-8(fp)
   91620:	10c00917 	ldw	r3,36(r2)
   91624:	00a00034 	movhi	r2,32768
   91628:	10bfff04 	addi	r2,r2,-4
   9162c:	10c00536 	bltu	r2,r3,91644 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   91630:	e0bffe17 	ldw	r2,-8(fp)
   91634:	10800917 	ldw	r2,36(r2)
   91638:	10c00044 	addi	r3,r2,1
   9163c:	e0bffe17 	ldw	r2,-8(fp)
   91640:	10c00915 	stw	r3,36(r2)
   91644:	00800274 	movhi	r2,9
   91648:	109fc604 	addi	r2,r2,32536
   9164c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   91650:	e037883a 	mov	sp,fp
   91654:	df000017 	ldw	fp,0(sp)
   91658:	dec00104 	addi	sp,sp,4
   9165c:	f800283a 	ret

00091660 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   91660:	defffc04 	addi	sp,sp,-16
   91664:	df000315 	stw	fp,12(sp)
   91668:	df000304 	addi	fp,sp,12
   9166c:	e13ffd15 	stw	r4,-12(fp)
   91670:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   91674:	00000706 	br	91694 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   91678:	e0bffe17 	ldw	r2,-8(fp)
   9167c:	1090000c 	andi	r2,r2,16384
   91680:	1005003a 	cmpeq	r2,r2,zero
   91684:	1000031e 	bne	r2,zero,91694 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   91688:	00bffd44 	movi	r2,-11
   9168c:	e0bfff15 	stw	r2,-4(fp)
   91690:	00000b06 	br	916c0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   91694:	e0bffd17 	ldw	r2,-12(fp)
   91698:	10c00d17 	ldw	r3,52(r2)
   9169c:	e0bffd17 	ldw	r2,-12(fp)
   916a0:	10800c17 	ldw	r2,48(r2)
   916a4:	18800526 	beq	r3,r2,916bc <altera_avalon_jtag_uart_close+0x5c>
   916a8:	e0bffd17 	ldw	r2,-12(fp)
   916ac:	10c00917 	ldw	r3,36(r2)
   916b0:	e0bffd17 	ldw	r2,-12(fp)
   916b4:	10800117 	ldw	r2,4(r2)
   916b8:	18bfef36 	bltu	r3,r2,91678 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   916bc:	e03fff15 	stw	zero,-4(fp)
   916c0:	e0bfff17 	ldw	r2,-4(fp)
}
   916c4:	e037883a 	mov	sp,fp
   916c8:	df000017 	ldw	fp,0(sp)
   916cc:	dec00104 	addi	sp,sp,4
   916d0:	f800283a 	ret

000916d4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   916d4:	defff804 	addi	sp,sp,-32
   916d8:	df000715 	stw	fp,28(sp)
   916dc:	df000704 	addi	fp,sp,28
   916e0:	e13ffb15 	stw	r4,-20(fp)
   916e4:	e17ffc15 	stw	r5,-16(fp)
   916e8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   916ec:	00bff9c4 	movi	r2,-25
   916f0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   916f4:	e0bffc17 	ldw	r2,-16(fp)
   916f8:	e0bfff15 	stw	r2,-4(fp)
   916fc:	e0ffff17 	ldw	r3,-4(fp)
   91700:	189a8060 	cmpeqi	r2,r3,27137
   91704:	1000041e 	bne	r2,zero,91718 <altera_avalon_jtag_uart_ioctl+0x44>
   91708:	e0ffff17 	ldw	r3,-4(fp)
   9170c:	189a80a0 	cmpeqi	r2,r3,27138
   91710:	10001b1e 	bne	r2,zero,91780 <altera_avalon_jtag_uart_ioctl+0xac>
   91714:	00002706 	br	917b4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   91718:	e0bffb17 	ldw	r2,-20(fp)
   9171c:	10c00117 	ldw	r3,4(r2)
   91720:	00a00034 	movhi	r2,32768
   91724:	10bfffc4 	addi	r2,r2,-1
   91728:	18802226 	beq	r3,r2,917b4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   9172c:	e0bffd17 	ldw	r2,-12(fp)
   91730:	10800017 	ldw	r2,0(r2)
   91734:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   91738:	e0bff917 	ldw	r2,-28(fp)
   9173c:	10800090 	cmplti	r2,r2,2
   91740:	1000071e 	bne	r2,zero,91760 <altera_avalon_jtag_uart_ioctl+0x8c>
   91744:	e0fff917 	ldw	r3,-28(fp)
   91748:	00a00034 	movhi	r2,32768
   9174c:	10bfffc4 	addi	r2,r2,-1
   91750:	18800326 	beq	r3,r2,91760 <altera_avalon_jtag_uart_ioctl+0x8c>
   91754:	e0bff917 	ldw	r2,-28(fp)
   91758:	e0bffe15 	stw	r2,-8(fp)
   9175c:	00000306 	br	9176c <altera_avalon_jtag_uart_ioctl+0x98>
   91760:	00e00034 	movhi	r3,32768
   91764:	18ffff84 	addi	r3,r3,-2
   91768:	e0fffe15 	stw	r3,-8(fp)
   9176c:	e0bffb17 	ldw	r2,-20(fp)
   91770:	e0fffe17 	ldw	r3,-8(fp)
   91774:	10c00115 	stw	r3,4(r2)
      rc = 0;
   91778:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   9177c:	00000d06 	br	917b4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   91780:	e0bffb17 	ldw	r2,-20(fp)
   91784:	10c00117 	ldw	r3,4(r2)
   91788:	00a00034 	movhi	r2,32768
   9178c:	10bfffc4 	addi	r2,r2,-1
   91790:	18800826 	beq	r3,r2,917b4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   91794:	e13ffd17 	ldw	r4,-12(fp)
   91798:	e0bffb17 	ldw	r2,-20(fp)
   9179c:	10c00917 	ldw	r3,36(r2)
   917a0:	e0bffb17 	ldw	r2,-20(fp)
   917a4:	10800117 	ldw	r2,4(r2)
   917a8:	1885803a 	cmpltu	r2,r3,r2
   917ac:	20800015 	stw	r2,0(r4)
      rc = 0;
   917b0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   917b4:	e0bffa17 	ldw	r2,-24(fp)
}
   917b8:	e037883a 	mov	sp,fp
   917bc:	df000017 	ldw	fp,0(sp)
   917c0:	dec00104 	addi	sp,sp,4
   917c4:	f800283a 	ret

000917c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   917c8:	defff204 	addi	sp,sp,-56
   917cc:	dfc00d15 	stw	ra,52(sp)
   917d0:	df000c15 	stw	fp,48(sp)
   917d4:	df000c04 	addi	fp,sp,48
   917d8:	e13ffb15 	stw	r4,-20(fp)
   917dc:	e17ffc15 	stw	r5,-16(fp)
   917e0:	e1bffd15 	stw	r6,-12(fp)
   917e4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   917e8:	e0bffc17 	ldw	r2,-16(fp)
   917ec:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   917f0:	00004806 	br	91914 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   917f4:	e0bffb17 	ldw	r2,-20(fp)
   917f8:	10800a17 	ldw	r2,40(r2)
   917fc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   91800:	e0bffb17 	ldw	r2,-20(fp)
   91804:	10800b17 	ldw	r2,44(r2)
   91808:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   9180c:	e0fff717 	ldw	r3,-36(fp)
   91810:	e0bff617 	ldw	r2,-40(fp)
   91814:	18800536 	bltu	r3,r2,9182c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   91818:	e0bff717 	ldw	r2,-36(fp)
   9181c:	e0fff617 	ldw	r3,-40(fp)
   91820:	10c5c83a 	sub	r2,r2,r3
   91824:	e0bff815 	stw	r2,-32(fp)
   91828:	00000406 	br	9183c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   9182c:	00820004 	movi	r2,2048
   91830:	e0fff617 	ldw	r3,-40(fp)
   91834:	10c5c83a 	sub	r2,r2,r3
   91838:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   9183c:	e0bff817 	ldw	r2,-32(fp)
   91840:	1005003a 	cmpeq	r2,r2,zero
   91844:	10001f1e 	bne	r2,zero,918c4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   91848:	e0fffd17 	ldw	r3,-12(fp)
   9184c:	e0bff817 	ldw	r2,-32(fp)
   91850:	1880022e 	bgeu	r3,r2,9185c <altera_avalon_jtag_uart_read+0x94>
        n = space;
   91854:	e0bffd17 	ldw	r2,-12(fp)
   91858:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   9185c:	e0bffb17 	ldw	r2,-20(fp)
   91860:	10c00e04 	addi	r3,r2,56
   91864:	e0bff617 	ldw	r2,-40(fp)
   91868:	1887883a 	add	r3,r3,r2
   9186c:	e0bffa17 	ldw	r2,-24(fp)
   91870:	1009883a 	mov	r4,r2
   91874:	180b883a 	mov	r5,r3
   91878:	e1bff817 	ldw	r6,-32(fp)
   9187c:	008218c0 	call	8218c <memcpy>
      ptr   += n;
   91880:	e0fff817 	ldw	r3,-32(fp)
   91884:	e0bffa17 	ldw	r2,-24(fp)
   91888:	10c5883a 	add	r2,r2,r3
   9188c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   91890:	e0fffd17 	ldw	r3,-12(fp)
   91894:	e0bff817 	ldw	r2,-32(fp)
   91898:	1885c83a 	sub	r2,r3,r2
   9189c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   918a0:	e0fff617 	ldw	r3,-40(fp)
   918a4:	e0bff817 	ldw	r2,-32(fp)
   918a8:	1885883a 	add	r2,r3,r2
   918ac:	10c1ffcc 	andi	r3,r2,2047
   918b0:	e0bffb17 	ldw	r2,-20(fp)
   918b4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   918b8:	e0bffd17 	ldw	r2,-12(fp)
   918bc:	10800048 	cmpgei	r2,r2,1
   918c0:	103fcc1e 	bne	r2,zero,917f4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   918c4:	e0fffa17 	ldw	r3,-24(fp)
   918c8:	e0bffc17 	ldw	r2,-16(fp)
   918cc:	1880141e 	bne	r3,r2,91920 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   918d0:	e0bffe17 	ldw	r2,-8(fp)
   918d4:	1090000c 	andi	r2,r2,16384
   918d8:	1004c03a 	cmpne	r2,r2,zero
   918dc:	1000101e 	bne	r2,zero,91920 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   918e0:	e0bffb17 	ldw	r2,-20(fp)
   918e4:	10c00a17 	ldw	r3,40(r2)
   918e8:	e0bff717 	ldw	r2,-36(fp)
   918ec:	1880051e 	bne	r3,r2,91904 <altera_avalon_jtag_uart_read+0x13c>
   918f0:	e0bffb17 	ldw	r2,-20(fp)
   918f4:	10c00917 	ldw	r3,36(r2)
   918f8:	e0bffb17 	ldw	r2,-20(fp)
   918fc:	10800117 	ldw	r2,4(r2)
   91900:	18bff736 	bltu	r3,r2,918e0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   91904:	e0bffb17 	ldw	r2,-20(fp)
   91908:	10c00a17 	ldw	r3,40(r2)
   9190c:	e0bff717 	ldw	r2,-36(fp)
   91910:	18800326 	beq	r3,r2,91920 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   91914:	e0bffd17 	ldw	r2,-12(fp)
   91918:	10800048 	cmpgei	r2,r2,1
   9191c:	103fb51e 	bne	r2,zero,917f4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   91920:	e0fffa17 	ldw	r3,-24(fp)
   91924:	e0bffc17 	ldw	r2,-16(fp)
   91928:	18801926 	beq	r3,r2,91990 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9192c:	0005303a 	rdctl	r2,status
   91930:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91934:	e0fff517 	ldw	r3,-44(fp)
   91938:	00bfff84 	movi	r2,-2
   9193c:	1884703a 	and	r2,r3,r2
   91940:	1001703a 	wrctl	status,r2
  
  return context;
   91944:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   91948:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   9194c:	e0bffb17 	ldw	r2,-20(fp)
   91950:	10800817 	ldw	r2,32(r2)
   91954:	10c00054 	ori	r3,r2,1
   91958:	e0bffb17 	ldw	r2,-20(fp)
   9195c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   91960:	e0bffb17 	ldw	r2,-20(fp)
   91964:	10800017 	ldw	r2,0(r2)
   91968:	11000104 	addi	r4,r2,4
   9196c:	e0bffb17 	ldw	r2,-20(fp)
   91970:	10800817 	ldw	r2,32(r2)
   91974:	1007883a 	mov	r3,r2
   91978:	2005883a 	mov	r2,r4
   9197c:	10c00035 	stwio	r3,0(r2)
   91980:	e0bff917 	ldw	r2,-28(fp)
   91984:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91988:	e0bff417 	ldw	r2,-48(fp)
   9198c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   91990:	e0fffa17 	ldw	r3,-24(fp)
   91994:	e0bffc17 	ldw	r2,-16(fp)
   91998:	18800526 	beq	r3,r2,919b0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   9199c:	e0fffa17 	ldw	r3,-24(fp)
   919a0:	e0bffc17 	ldw	r2,-16(fp)
   919a4:	1887c83a 	sub	r3,r3,r2
   919a8:	e0ffff15 	stw	r3,-4(fp)
   919ac:	00000906 	br	919d4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   919b0:	e0bffe17 	ldw	r2,-8(fp)
   919b4:	1090000c 	andi	r2,r2,16384
   919b8:	1005003a 	cmpeq	r2,r2,zero
   919bc:	1000031e 	bne	r2,zero,919cc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   919c0:	00bffd44 	movi	r2,-11
   919c4:	e0bfff15 	stw	r2,-4(fp)
   919c8:	00000206 	br	919d4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   919cc:	00bffec4 	movi	r2,-5
   919d0:	e0bfff15 	stw	r2,-4(fp)
   919d4:	e0bfff17 	ldw	r2,-4(fp)
}
   919d8:	e037883a 	mov	sp,fp
   919dc:	dfc00117 	ldw	ra,4(sp)
   919e0:	df000017 	ldw	fp,0(sp)
   919e4:	dec00204 	addi	sp,sp,8
   919e8:	f800283a 	ret

000919ec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   919ec:	defff204 	addi	sp,sp,-56
   919f0:	dfc00d15 	stw	ra,52(sp)
   919f4:	df000c15 	stw	fp,48(sp)
   919f8:	df000c04 	addi	fp,sp,48
   919fc:	e13ffb15 	stw	r4,-20(fp)
   91a00:	e17ffc15 	stw	r5,-16(fp)
   91a04:	e1bffd15 	stw	r6,-12(fp)
   91a08:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   91a0c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   91a10:	e0bffc17 	ldw	r2,-16(fp)
   91a14:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   91a18:	00003a06 	br	91b04 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   91a1c:	e0bffb17 	ldw	r2,-20(fp)
   91a20:	10800c17 	ldw	r2,48(r2)
   91a24:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   91a28:	e0bffb17 	ldw	r2,-20(fp)
   91a2c:	10800d17 	ldw	r2,52(r2)
   91a30:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   91a34:	e0fffa17 	ldw	r3,-24(fp)
   91a38:	e0bff917 	ldw	r2,-28(fp)
   91a3c:	1880062e 	bgeu	r3,r2,91a58 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   91a40:	e0fff917 	ldw	r3,-28(fp)
   91a44:	e0bffa17 	ldw	r2,-24(fp)
   91a48:	1885c83a 	sub	r2,r3,r2
   91a4c:	10bfffc4 	addi	r2,r2,-1
   91a50:	e0bff815 	stw	r2,-32(fp)
   91a54:	00000c06 	br	91a88 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   91a58:	e0bff917 	ldw	r2,-28(fp)
   91a5c:	1005003a 	cmpeq	r2,r2,zero
   91a60:	1000051e 	bne	r2,zero,91a78 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   91a64:	00820004 	movi	r2,2048
   91a68:	e0fffa17 	ldw	r3,-24(fp)
   91a6c:	10c5c83a 	sub	r2,r2,r3
   91a70:	e0bff815 	stw	r2,-32(fp)
   91a74:	00000406 	br	91a88 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   91a78:	0081ffc4 	movi	r2,2047
   91a7c:	e0fffa17 	ldw	r3,-24(fp)
   91a80:	10c5c83a 	sub	r2,r2,r3
   91a84:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   91a88:	e0bff817 	ldw	r2,-32(fp)
   91a8c:	1005003a 	cmpeq	r2,r2,zero
   91a90:	10001f1e 	bne	r2,zero,91b10 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   91a94:	e0fffd17 	ldw	r3,-12(fp)
   91a98:	e0bff817 	ldw	r2,-32(fp)
   91a9c:	1880022e 	bgeu	r3,r2,91aa8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   91aa0:	e0bffd17 	ldw	r2,-12(fp)
   91aa4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   91aa8:	e0bffb17 	ldw	r2,-20(fp)
   91aac:	10c20e04 	addi	r3,r2,2104
   91ab0:	e0bffa17 	ldw	r2,-24(fp)
   91ab4:	1885883a 	add	r2,r3,r2
   91ab8:	e0fffc17 	ldw	r3,-16(fp)
   91abc:	1009883a 	mov	r4,r2
   91ac0:	180b883a 	mov	r5,r3
   91ac4:	e1bff817 	ldw	r6,-32(fp)
   91ac8:	008218c0 	call	8218c <memcpy>
      ptr   += n;
   91acc:	e0fff817 	ldw	r3,-32(fp)
   91ad0:	e0bffc17 	ldw	r2,-16(fp)
   91ad4:	10c5883a 	add	r2,r2,r3
   91ad8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   91adc:	e0fffd17 	ldw	r3,-12(fp)
   91ae0:	e0bff817 	ldw	r2,-32(fp)
   91ae4:	1885c83a 	sub	r2,r3,r2
   91ae8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   91aec:	e0fffa17 	ldw	r3,-24(fp)
   91af0:	e0bff817 	ldw	r2,-32(fp)
   91af4:	1885883a 	add	r2,r3,r2
   91af8:	10c1ffcc 	andi	r3,r2,2047
   91afc:	e0bffb17 	ldw	r2,-20(fp)
   91b00:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   91b04:	e0bffd17 	ldw	r2,-12(fp)
   91b08:	10800048 	cmpgei	r2,r2,1
   91b0c:	103fc31e 	bne	r2,zero,91a1c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91b10:	0005303a 	rdctl	r2,status
   91b14:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91b18:	e0fff517 	ldw	r3,-44(fp)
   91b1c:	00bfff84 	movi	r2,-2
   91b20:	1884703a 	and	r2,r3,r2
   91b24:	1001703a 	wrctl	status,r2
  
  return context;
   91b28:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   91b2c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   91b30:	e0bffb17 	ldw	r2,-20(fp)
   91b34:	10800817 	ldw	r2,32(r2)
   91b38:	10c00094 	ori	r3,r2,2
   91b3c:	e0bffb17 	ldw	r2,-20(fp)
   91b40:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   91b44:	e0bffb17 	ldw	r2,-20(fp)
   91b48:	10800017 	ldw	r2,0(r2)
   91b4c:	11000104 	addi	r4,r2,4
   91b50:	e0bffb17 	ldw	r2,-20(fp)
   91b54:	10800817 	ldw	r2,32(r2)
   91b58:	1007883a 	mov	r3,r2
   91b5c:	2005883a 	mov	r2,r4
   91b60:	10c00035 	stwio	r3,0(r2)
   91b64:	e0bff717 	ldw	r2,-36(fp)
   91b68:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91b6c:	e0bff417 	ldw	r2,-48(fp)
   91b70:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   91b74:	e0bffd17 	ldw	r2,-12(fp)
   91b78:	10800050 	cmplti	r2,r2,1
   91b7c:	1000111e 	bne	r2,zero,91bc4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   91b80:	e0bffe17 	ldw	r2,-8(fp)
   91b84:	1090000c 	andi	r2,r2,16384
   91b88:	1004c03a 	cmpne	r2,r2,zero
   91b8c:	1000101e 	bne	r2,zero,91bd0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   91b90:	e0bffb17 	ldw	r2,-20(fp)
   91b94:	10c00d17 	ldw	r3,52(r2)
   91b98:	e0bff917 	ldw	r2,-28(fp)
   91b9c:	1880051e 	bne	r3,r2,91bb4 <altera_avalon_jtag_uart_write+0x1c8>
   91ba0:	e0bffb17 	ldw	r2,-20(fp)
   91ba4:	10c00917 	ldw	r3,36(r2)
   91ba8:	e0bffb17 	ldw	r2,-20(fp)
   91bac:	10800117 	ldw	r2,4(r2)
   91bb0:	18bff736 	bltu	r3,r2,91b90 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   91bb4:	e0bffb17 	ldw	r2,-20(fp)
   91bb8:	10c00d17 	ldw	r3,52(r2)
   91bbc:	e0bff917 	ldw	r2,-28(fp)
   91bc0:	18800326 	beq	r3,r2,91bd0 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   91bc4:	e0bffd17 	ldw	r2,-12(fp)
   91bc8:	10800048 	cmpgei	r2,r2,1
   91bcc:	103fcd1e 	bne	r2,zero,91b04 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   91bd0:	e0fffc17 	ldw	r3,-16(fp)
   91bd4:	e0bff617 	ldw	r2,-40(fp)
   91bd8:	18800526 	beq	r3,r2,91bf0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   91bdc:	e0fffc17 	ldw	r3,-16(fp)
   91be0:	e0bff617 	ldw	r2,-40(fp)
   91be4:	1887c83a 	sub	r3,r3,r2
   91be8:	e0ffff15 	stw	r3,-4(fp)
   91bec:	00000906 	br	91c14 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   91bf0:	e0bffe17 	ldw	r2,-8(fp)
   91bf4:	1090000c 	andi	r2,r2,16384
   91bf8:	1005003a 	cmpeq	r2,r2,zero
   91bfc:	1000031e 	bne	r2,zero,91c0c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   91c00:	00bffd44 	movi	r2,-11
   91c04:	e0bfff15 	stw	r2,-4(fp)
   91c08:	00000206 	br	91c14 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   91c0c:	00bffec4 	movi	r2,-5
   91c10:	e0bfff15 	stw	r2,-4(fp)
   91c14:	e0bfff17 	ldw	r2,-4(fp)
}
   91c18:	e037883a 	mov	sp,fp
   91c1c:	dfc00117 	ldw	ra,4(sp)
   91c20:	df000017 	ldw	fp,0(sp)
   91c24:	dec00204 	addi	sp,sp,8
   91c28:	f800283a 	ret

00091c2c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   91c2c:	defffa04 	addi	sp,sp,-24
   91c30:	dfc00515 	stw	ra,20(sp)
   91c34:	df000415 	stw	fp,16(sp)
   91c38:	df000404 	addi	fp,sp,16
   91c3c:	e13ffe15 	stw	r4,-8(fp)
   91c40:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
   91c44:	e0bffe17 	ldw	r2,-8(fp)
   91c48:	10800017 	ldw	r2,0(r2)
   91c4c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   91c50:	008003f4 	movhi	r2,15
   91c54:	10909004 	addi	r2,r2,16960
   91c58:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   91c5c:	e0bffe17 	ldw	r2,-8(fp)
   91c60:	10800803 	ldbu	r2,32(r2)
   91c64:	10803fcc 	andi	r2,r2,255
   91c68:	1080201c 	xori	r2,r2,128
   91c6c:	10bfe004 	addi	r2,r2,-128
   91c70:	1004c03a 	cmpne	r2,r2,zero
   91c74:	1000161e 	bne	r2,zero,91cd0 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   91c78:	00000a06 	br	91ca4 <lcd_write_command+0x78>
    if (--i == 0)
   91c7c:	e0bffc17 	ldw	r2,-16(fp)
   91c80:	10bfffc4 	addi	r2,r2,-1
   91c84:	e0bffc15 	stw	r2,-16(fp)
   91c88:	e0bffc17 	ldw	r2,-16(fp)
   91c8c:	1004c03a 	cmpne	r2,r2,zero
   91c90:	1000041e 	bne	r2,zero,91ca4 <lcd_write_command+0x78>
    {
      sp->broken = 1;
   91c94:	e0fffe17 	ldw	r3,-8(fp)
   91c98:	00800044 	movi	r2,1
   91c9c:	18800805 	stb	r2,32(r3)
      return;
   91ca0:	00000b06 	br	91cd0 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   91ca4:	e0bffd17 	ldw	r2,-12(fp)
   91ca8:	10800104 	addi	r2,r2,4
   91cac:	10800037 	ldwio	r2,0(r2)
   91cb0:	1080200c 	andi	r2,r2,128
   91cb4:	1004c03a 	cmpne	r2,r2,zero
   91cb8:	103ff01e 	bne	r2,zero,91c7c <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   91cbc:	01001904 	movi	r4,100
   91cc0:	0090ec40 	call	90ec4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   91cc4:	e0bffd17 	ldw	r2,-12(fp)
   91cc8:	e0ffff03 	ldbu	r3,-4(fp)
   91ccc:	10c00035 	stwio	r3,0(r2)
}
   91cd0:	e037883a 	mov	sp,fp
   91cd4:	dfc00117 	ldw	ra,4(sp)
   91cd8:	df000017 	ldw	fp,0(sp)
   91cdc:	dec00204 	addi	sp,sp,8
   91ce0:	f800283a 	ret

00091ce4 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   91ce4:	defffa04 	addi	sp,sp,-24
   91ce8:	dfc00515 	stw	ra,20(sp)
   91cec:	df000415 	stw	fp,16(sp)
   91cf0:	df000404 	addi	fp,sp,16
   91cf4:	e13ffe15 	stw	r4,-8(fp)
   91cf8:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
   91cfc:	e0bffe17 	ldw	r2,-8(fp)
   91d00:	10800017 	ldw	r2,0(r2)
   91d04:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   91d08:	008003f4 	movhi	r2,15
   91d0c:	10909004 	addi	r2,r2,16960
   91d10:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   91d14:	e0bffe17 	ldw	r2,-8(fp)
   91d18:	10800803 	ldbu	r2,32(r2)
   91d1c:	10803fcc 	andi	r2,r2,255
   91d20:	1080201c 	xori	r2,r2,128
   91d24:	10bfe004 	addi	r2,r2,-128
   91d28:	1004c03a 	cmpne	r2,r2,zero
   91d2c:	10001d1e 	bne	r2,zero,91da4 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   91d30:	00000a06 	br	91d5c <lcd_write_data+0x78>
    if (--i == 0)
   91d34:	e0bffc17 	ldw	r2,-16(fp)
   91d38:	10bfffc4 	addi	r2,r2,-1
   91d3c:	e0bffc15 	stw	r2,-16(fp)
   91d40:	e0bffc17 	ldw	r2,-16(fp)
   91d44:	1004c03a 	cmpne	r2,r2,zero
   91d48:	1000041e 	bne	r2,zero,91d5c <lcd_write_data+0x78>
    {
      sp->broken = 1;
   91d4c:	e0fffe17 	ldw	r3,-8(fp)
   91d50:	00800044 	movi	r2,1
   91d54:	18800805 	stb	r2,32(r3)
      return;
   91d58:	00001206 	br	91da4 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   91d5c:	e0bffd17 	ldw	r2,-12(fp)
   91d60:	10800104 	addi	r2,r2,4
   91d64:	10800037 	ldwio	r2,0(r2)
   91d68:	1080200c 	andi	r2,r2,128
   91d6c:	1004c03a 	cmpne	r2,r2,zero
   91d70:	103ff01e 	bne	r2,zero,91d34 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   91d74:	01001904 	movi	r4,100
   91d78:	0090ec40 	call	90ec4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   91d7c:	e0bffd17 	ldw	r2,-12(fp)
   91d80:	10800204 	addi	r2,r2,8
   91d84:	e0ffff03 	ldbu	r3,-4(fp)
   91d88:	10c00035 	stwio	r3,0(r2)

  sp->address++;
   91d8c:	e0bffe17 	ldw	r2,-8(fp)
   91d90:	108008c3 	ldbu	r2,35(r2)
   91d94:	10800044 	addi	r2,r2,1
   91d98:	1007883a 	mov	r3,r2
   91d9c:	e0bffe17 	ldw	r2,-8(fp)
   91da0:	10c008c5 	stb	r3,35(r2)
}
   91da4:	e037883a 	mov	sp,fp
   91da8:	dfc00117 	ldw	ra,4(sp)
   91dac:	df000017 	ldw	fp,0(sp)
   91db0:	dec00204 	addi	sp,sp,8
   91db4:	f800283a 	ret

00091db8 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   91db8:	defffb04 	addi	sp,sp,-20
   91dbc:	dfc00415 	stw	ra,16(sp)
   91dc0:	df000315 	stw	fp,12(sp)
   91dc4:	dc000215 	stw	r16,8(sp)
   91dc8:	df000204 	addi	fp,sp,8
   91dcc:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   91dd0:	e13fff17 	ldw	r4,-4(fp)
   91dd4:	01400044 	movi	r5,1
   91dd8:	0091c2c0 	call	91c2c <lcd_write_command>

  sp->x = 0;
   91ddc:	e0bfff17 	ldw	r2,-4(fp)
   91de0:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   91de4:	e0bfff17 	ldw	r2,-4(fp)
   91de8:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   91dec:	e0bfff17 	ldw	r2,-4(fp)
   91df0:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   91df4:	e03ffe15 	stw	zero,-8(fp)
   91df8:	00001c06 	br	91e6c <lcd_clear_screen+0xb4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   91dfc:	e13ffe17 	ldw	r4,-8(fp)
   91e00:	014018c4 	movi	r5,99
   91e04:	0080ba00 	call	80ba0 <__mulsi3>
   91e08:	10c01004 	addi	r3,r2,64
   91e0c:	e0bfff17 	ldw	r2,-4(fp)
   91e10:	1889883a 	add	r4,r3,r2
   91e14:	01400804 	movi	r5,32
   91e18:	01801444 	movi	r6,81
   91e1c:	00893ec0 	call	893ec <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   91e20:	e13ffe17 	ldw	r4,-8(fp)
   91e24:	014018c4 	movi	r5,99
   91e28:	0080ba00 	call	80ba0 <__mulsi3>
   91e2c:	10c00c04 	addi	r3,r2,48
   91e30:	e0bfff17 	ldw	r2,-4(fp)
   91e34:	1889883a 	add	r4,r3,r2
   91e38:	01400804 	movi	r5,32
   91e3c:	01800404 	movi	r6,16
   91e40:	00893ec0 	call	893ec <memset>
    sp->line[y].width = 0;
   91e44:	e13ffe17 	ldw	r4,-8(fp)
   91e48:	e43fff17 	ldw	r16,-4(fp)
   91e4c:	014018c4 	movi	r5,99
   91e50:	0080ba00 	call	80ba0 <__mulsi3>
   91e54:	1405883a 	add	r2,r2,r16
   91e58:	10802404 	addi	r2,r2,144
   91e5c:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   91e60:	e0bffe17 	ldw	r2,-8(fp)
   91e64:	10800044 	addi	r2,r2,1
   91e68:	e0bffe15 	stw	r2,-8(fp)
   91e6c:	e0bffe17 	ldw	r2,-8(fp)
   91e70:	10800090 	cmplti	r2,r2,2
   91e74:	103fe11e 	bne	r2,zero,91dfc <lcd_clear_screen+0x44>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   91e78:	e037883a 	mov	sp,fp
   91e7c:	dfc00217 	ldw	ra,8(sp)
   91e80:	df000117 	ldw	fp,4(sp)
   91e84:	dc000017 	ldw	r16,0(sp)
   91e88:	dec00304 	addi	sp,sp,12
   91e8c:	f800283a 	ret

00091e90 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   91e90:	defff404 	addi	sp,sp,-48
   91e94:	dfc00b15 	stw	ra,44(sp)
   91e98:	df000a15 	stw	fp,40(sp)
   91e9c:	dc800915 	stw	r18,36(sp)
   91ea0:	dc400815 	stw	r17,32(sp)
   91ea4:	dc000715 	stw	r16,28(sp)
   91ea8:	df000704 	addi	fp,sp,28
   91eac:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   91eb0:	e0bfff17 	ldw	r2,-4(fp)
   91eb4:	10800943 	ldbu	r2,37(r2)
   91eb8:	10803fcc 	andi	r2,r2,255
   91ebc:	1080201c 	xori	r2,r2,128
   91ec0:	10bfe004 	addi	r2,r2,-128
   91ec4:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   91ec8:	e03ffe15 	stw	zero,-8(fp)
   91ecc:	00006a06 	br	92078 <lcd_repaint_screen+0x1e8>
  {
    int width  = sp->line[y].width;
   91ed0:	e13ffe17 	ldw	r4,-8(fp)
   91ed4:	e43fff17 	ldw	r16,-4(fp)
   91ed8:	014018c4 	movi	r5,99
   91edc:	0080ba00 	call	80ba0 <__mulsi3>
   91ee0:	1405883a 	add	r2,r2,r16
   91ee4:	10802404 	addi	r2,r2,144
   91ee8:	10800043 	ldbu	r2,1(r2)
   91eec:	10803fcc 	andi	r2,r2,255
   91ef0:	1080201c 	xori	r2,r2,128
   91ef4:	10bfe004 	addi	r2,r2,-128
   91ef8:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   91efc:	e13ffe17 	ldw	r4,-8(fp)
   91f00:	e43fff17 	ldw	r16,-4(fp)
   91f04:	014018c4 	movi	r5,99
   91f08:	0080ba00 	call	80ba0 <__mulsi3>
   91f0c:	1405883a 	add	r2,r2,r16
   91f10:	10802404 	addi	r2,r2,144
   91f14:	10800083 	ldbu	r2,2(r2)
   91f18:	11003fcc 	andi	r4,r2,255
   91f1c:	e17ffc17 	ldw	r5,-16(fp)
   91f20:	0080ba00 	call	80ba0 <__mulsi3>
   91f24:	1005d23a 	srai	r2,r2,8
   91f28:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
   91f2c:	e0fffa17 	ldw	r3,-24(fp)
   91f30:	e0bffb17 	ldw	r2,-20(fp)
   91f34:	18800116 	blt	r3,r2,91f3c <lcd_repaint_screen+0xac>
      offset = 0;
   91f38:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   91f3c:	e03ffd15 	stw	zero,-12(fp)
   91f40:	00004706 	br	92060 <lcd_repaint_screen+0x1d0>
    {
      char c = sp->line[y].data[(x + offset) % width];
   91f44:	e47ffe17 	ldw	r17,-8(fp)
   91f48:	e0fffd17 	ldw	r3,-12(fp)
   91f4c:	e0bffa17 	ldw	r2,-24(fp)
   91f50:	1889883a 	add	r4,r3,r2
   91f54:	e17ffb17 	ldw	r5,-20(fp)
   91f58:	0080b300 	call	80b30 <__modsi3>
   91f5c:	1025883a 	mov	r18,r2
   91f60:	e43fff17 	ldw	r16,-4(fp)
   91f64:	8809883a 	mov	r4,r17
   91f68:	014018c4 	movi	r5,99
   91f6c:	0080ba00 	call	80ba0 <__mulsi3>
   91f70:	1405883a 	add	r2,r2,r16
   91f74:	1485883a 	add	r2,r2,r18
   91f78:	10801004 	addi	r2,r2,64
   91f7c:	10800003 	ldbu	r2,0(r2)
   91f80:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   91f84:	e13ffe17 	ldw	r4,-8(fp)
   91f88:	e47ffd17 	ldw	r17,-12(fp)
   91f8c:	e43fff17 	ldw	r16,-4(fp)
   91f90:	014018c4 	movi	r5,99
   91f94:	0080ba00 	call	80ba0 <__mulsi3>
   91f98:	1405883a 	add	r2,r2,r16
   91f9c:	1445883a 	add	r2,r2,r17
   91fa0:	10800c04 	addi	r2,r2,48
   91fa4:	10800003 	ldbu	r2,0(r2)
   91fa8:	10c03fcc 	andi	r3,r2,255
   91fac:	18c0201c 	xori	r3,r3,128
   91fb0:	18ffe004 	addi	r3,r3,-128
   91fb4:	e0bff947 	ldb	r2,-27(fp)
   91fb8:	18802626 	beq	r3,r2,92054 <lcd_repaint_screen+0x1c4>
      {
        unsigned char address = x + colstart[y];
   91fbc:	e0fffe17 	ldw	r3,-8(fp)
   91fc0:	d0a00e04 	addi	r2,gp,-32712
   91fc4:	1885883a 	add	r2,r3,r2
   91fc8:	10800003 	ldbu	r2,0(r2)
   91fcc:	1007883a 	mov	r3,r2
   91fd0:	e0bffd17 	ldw	r2,-12(fp)
   91fd4:	1885883a 	add	r2,r3,r2
   91fd8:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
   91fdc:	e0fff903 	ldbu	r3,-28(fp)
   91fe0:	e0bfff17 	ldw	r2,-4(fp)
   91fe4:	108008c3 	ldbu	r2,35(r2)
   91fe8:	10803fcc 	andi	r2,r2,255
   91fec:	1080201c 	xori	r2,r2,128
   91ff0:	10bfe004 	addi	r2,r2,-128
   91ff4:	18800926 	beq	r3,r2,9201c <lcd_repaint_screen+0x18c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   91ff8:	e0fff903 	ldbu	r3,-28(fp)
   91ffc:	00bfe004 	movi	r2,-128
   92000:	1884b03a 	or	r2,r3,r2
   92004:	11403fcc 	andi	r5,r2,255
   92008:	e13fff17 	ldw	r4,-4(fp)
   9200c:	0091c2c0 	call	91c2c <lcd_write_command>
          sp->address = address;
   92010:	e0fff903 	ldbu	r3,-28(fp)
   92014:	e0bfff17 	ldw	r2,-4(fp)
   92018:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   9201c:	e0bff943 	ldbu	r2,-27(fp)
   92020:	11403fcc 	andi	r5,r2,255
   92024:	e13fff17 	ldw	r4,-4(fp)
   92028:	0091ce40 	call	91ce4 <lcd_write_data>
        sp->line[y].visible[x] = c;
   9202c:	e13ffe17 	ldw	r4,-8(fp)
   92030:	e47ffd17 	ldw	r17,-12(fp)
   92034:	e43fff17 	ldw	r16,-4(fp)
   92038:	014018c4 	movi	r5,99
   9203c:	0080ba00 	call	80ba0 <__mulsi3>
   92040:	1405883a 	add	r2,r2,r16
   92044:	1445883a 	add	r2,r2,r17
   92048:	10c00c04 	addi	r3,r2,48
   9204c:	e0bff943 	ldbu	r2,-27(fp)
   92050:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   92054:	e0bffd17 	ldw	r2,-12(fp)
   92058:	10800044 	addi	r2,r2,1
   9205c:	e0bffd15 	stw	r2,-12(fp)
   92060:	e0bffd17 	ldw	r2,-12(fp)
   92064:	10800410 	cmplti	r2,r2,16
   92068:	103fb61e 	bne	r2,zero,91f44 <lcd_repaint_screen+0xb4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   9206c:	e0bffe17 	ldw	r2,-8(fp)
   92070:	10800044 	addi	r2,r2,1
   92074:	e0bffe15 	stw	r2,-8(fp)
   92078:	e0bffe17 	ldw	r2,-8(fp)
   9207c:	10800090 	cmplti	r2,r2,2
   92080:	103f931e 	bne	r2,zero,91ed0 <lcd_repaint_screen+0x40>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   92084:	e037883a 	mov	sp,fp
   92088:	dfc00417 	ldw	ra,16(sp)
   9208c:	df000317 	ldw	fp,12(sp)
   92090:	dc800217 	ldw	r18,8(sp)
   92094:	dc400117 	ldw	r17,4(sp)
   92098:	dc000017 	ldw	r16,0(sp)
   9209c:	dec00504 	addi	sp,sp,20
   920a0:	f800283a 	ret

000920a4 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   920a4:	defffb04 	addi	sp,sp,-20
   920a8:	dfc00415 	stw	ra,16(sp)
   920ac:	df000315 	stw	fp,12(sp)
   920b0:	dc000215 	stw	r16,8(sp)
   920b4:	df000204 	addi	fp,sp,8
   920b8:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   920bc:	e03ffe15 	stw	zero,-8(fp)
   920c0:	00002106 	br	92148 <lcd_scroll_up+0xa4>
  {
    if (y < ALT_LCD_HEIGHT-1)
   920c4:	e0bffe17 	ldw	r2,-8(fp)
   920c8:	10800048 	cmpgei	r2,r2,1
   920cc:	1000121e 	bne	r2,zero,92118 <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   920d0:	e13ffe17 	ldw	r4,-8(fp)
   920d4:	014018c4 	movi	r5,99
   920d8:	0080ba00 	call	80ba0 <__mulsi3>
   920dc:	10c01004 	addi	r3,r2,64
   920e0:	e0bfff17 	ldw	r2,-4(fp)
   920e4:	18a1883a 	add	r16,r3,r2
   920e8:	e0bffe17 	ldw	r2,-8(fp)
   920ec:	11000044 	addi	r4,r2,1
   920f0:	014018c4 	movi	r5,99
   920f4:	0080ba00 	call	80ba0 <__mulsi3>
   920f8:	10c01004 	addi	r3,r2,64
   920fc:	e0bfff17 	ldw	r2,-4(fp)
   92100:	1885883a 	add	r2,r3,r2
   92104:	8009883a 	mov	r4,r16
   92108:	100b883a 	mov	r5,r2
   9210c:	01801404 	movi	r6,80
   92110:	008218c0 	call	8218c <memcpy>
   92114:	00000906 	br	9213c <lcd_scroll_up+0x98>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   92118:	e13ffe17 	ldw	r4,-8(fp)
   9211c:	014018c4 	movi	r5,99
   92120:	0080ba00 	call	80ba0 <__mulsi3>
   92124:	10c01004 	addi	r3,r2,64
   92128:	e0bfff17 	ldw	r2,-4(fp)
   9212c:	1889883a 	add	r4,r3,r2
   92130:	01400804 	movi	r5,32
   92134:	01801404 	movi	r6,80
   92138:	00893ec0 	call	893ec <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   9213c:	e0bffe17 	ldw	r2,-8(fp)
   92140:	10800044 	addi	r2,r2,1
   92144:	e0bffe15 	stw	r2,-8(fp)
   92148:	e0bffe17 	ldw	r2,-8(fp)
   9214c:	10800090 	cmplti	r2,r2,2
   92150:	103fdc1e 	bne	r2,zero,920c4 <lcd_scroll_up+0x20>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   92154:	e0bfff17 	ldw	r2,-4(fp)
   92158:	10800883 	ldbu	r2,34(r2)
   9215c:	10bfffc4 	addi	r2,r2,-1
   92160:	1007883a 	mov	r3,r2
   92164:	e0bfff17 	ldw	r2,-4(fp)
   92168:	10c00885 	stb	r3,34(r2)
}
   9216c:	e037883a 	mov	sp,fp
   92170:	dfc00217 	ldw	ra,8(sp)
   92174:	df000117 	ldw	fp,4(sp)
   92178:	dc000017 	ldw	r16,0(sp)
   9217c:	dec00304 	addi	sp,sp,12
   92180:	f800283a 	ret

00092184 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   92184:	defff804 	addi	sp,sp,-32
   92188:	dfc00715 	stw	ra,28(sp)
   9218c:	df000615 	stw	fp,24(sp)
   92190:	df000604 	addi	fp,sp,24
   92194:	e13ffd15 	stw	r4,-12(fp)
   92198:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
   9219c:	e03ffc15 	stw	zero,-16(fp)
   921a0:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
   921a4:	e0bffd17 	ldw	r2,-12(fp)
   921a8:	10800a03 	ldbu	r2,40(r2)
   921ac:	10803fcc 	andi	r2,r2,255
   921b0:	1080201c 	xori	r2,r2,128
   921b4:	10bfe004 	addi	r2,r2,-128
   921b8:	108016d8 	cmpnei	r2,r2,91
   921bc:	10004d1e 	bne	r2,zero,922f4 <lcd_handle_escape+0x170>
  {
    char * ptr = sp->escape+1;
   921c0:	e0bffd17 	ldw	r2,-12(fp)
   921c4:	10800a04 	addi	r2,r2,40
   921c8:	10800044 	addi	r2,r2,1
   921cc:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
   921d0:	00000f06 	br	92210 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   921d4:	e13ffc17 	ldw	r4,-16(fp)
   921d8:	01400284 	movi	r5,10
   921dc:	0080ba00 	call	80ba0 <__mulsi3>
   921e0:	1007883a 	mov	r3,r2
   921e4:	e0bffa17 	ldw	r2,-24(fp)
   921e8:	10800003 	ldbu	r2,0(r2)
   921ec:	10803fcc 	andi	r2,r2,255
   921f0:	1080201c 	xori	r2,r2,128
   921f4:	10bfe004 	addi	r2,r2,-128
   921f8:	1885883a 	add	r2,r3,r2
   921fc:	10bff404 	addi	r2,r2,-48
   92200:	e0bffc15 	stw	r2,-16(fp)
   92204:	e0bffa17 	ldw	r2,-24(fp)
   92208:	10800044 	addi	r2,r2,1
   9220c:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   92210:	e0bffa17 	ldw	r2,-24(fp)
   92214:	10800003 	ldbu	r2,0(r2)
   92218:	10803fcc 	andi	r2,r2,255
   9221c:	1080201c 	xori	r2,r2,128
   92220:	10bfe004 	addi	r2,r2,-128
   92224:	1007883a 	mov	r3,r2
   92228:	00800274 	movhi	r2,9
   9222c:	1098c004 	addi	r2,r2,25344
   92230:	10800017 	ldw	r2,0(r2)
   92234:	1885883a 	add	r2,r3,r2
   92238:	10800003 	ldbu	r2,0(r2)
   9223c:	10803fcc 	andi	r2,r2,255
   92240:	1080010c 	andi	r2,r2,4
   92244:	1004c03a 	cmpne	r2,r2,zero
   92248:	103fe21e 	bne	r2,zero,921d4 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   9224c:	e0bffa17 	ldw	r2,-24(fp)
   92250:	10800003 	ldbu	r2,0(r2)
   92254:	10803fcc 	andi	r2,r2,255
   92258:	1080201c 	xori	r2,r2,128
   9225c:	10bfe004 	addi	r2,r2,-128
   92260:	10800ed8 	cmpnei	r2,r2,59
   92264:	1000251e 	bne	r2,zero,922fc <lcd_handle_escape+0x178>
    {
      ptr++;
   92268:	e0bffa17 	ldw	r2,-24(fp)
   9226c:	10800044 	addi	r2,r2,1
   92270:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
   92274:	00000f06 	br	922b4 <lcd_handle_escape+0x130>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   92278:	e13ffb17 	ldw	r4,-20(fp)
   9227c:	01400284 	movi	r5,10
   92280:	0080ba00 	call	80ba0 <__mulsi3>
   92284:	1007883a 	mov	r3,r2
   92288:	e0bffa17 	ldw	r2,-24(fp)
   9228c:	10800003 	ldbu	r2,0(r2)
   92290:	10803fcc 	andi	r2,r2,255
   92294:	1080201c 	xori	r2,r2,128
   92298:	10bfe004 	addi	r2,r2,-128
   9229c:	1885883a 	add	r2,r3,r2
   922a0:	10bff404 	addi	r2,r2,-48
   922a4:	e0bffb15 	stw	r2,-20(fp)
   922a8:	e0bffa17 	ldw	r2,-24(fp)
   922ac:	10800044 	addi	r2,r2,1
   922b0:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   922b4:	e0bffa17 	ldw	r2,-24(fp)
   922b8:	10800003 	ldbu	r2,0(r2)
   922bc:	10803fcc 	andi	r2,r2,255
   922c0:	1080201c 	xori	r2,r2,128
   922c4:	10bfe004 	addi	r2,r2,-128
   922c8:	1007883a 	mov	r3,r2
   922cc:	00800274 	movhi	r2,9
   922d0:	1098c004 	addi	r2,r2,25344
   922d4:	10800017 	ldw	r2,0(r2)
   922d8:	1885883a 	add	r2,r3,r2
   922dc:	10800003 	ldbu	r2,0(r2)
   922e0:	10803fcc 	andi	r2,r2,255
   922e4:	1080010c 	andi	r2,r2,4
   922e8:	1004c03a 	cmpne	r2,r2,zero
   922ec:	103fe21e 	bne	r2,zero,92278 <lcd_handle_escape+0xf4>
   922f0:	00000206 	br	922fc <lcd_handle_escape+0x178>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   922f4:	00bfffc4 	movi	r2,-1
   922f8:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
   922fc:	e0bffe07 	ldb	r2,-8(fp)
   92300:	e0bfff15 	stw	r2,-4(fp)
   92304:	e0ffff17 	ldw	r3,-4(fp)
   92308:	188012a0 	cmpeqi	r2,r3,74
   9230c:	10002f1e 	bne	r2,zero,923cc <lcd_handle_escape+0x248>
   92310:	e0ffff17 	ldw	r3,-4(fp)
   92314:	188012c8 	cmpgei	r2,r3,75
   92318:	1000041e 	bne	r2,zero,9232c <lcd_handle_escape+0x1a8>
   9231c:	e0ffff17 	ldw	r3,-4(fp)
   92320:	18801220 	cmpeqi	r2,r3,72
   92324:	1000081e 	bne	r2,zero,92348 <lcd_handle_escape+0x1c4>
   92328:	00004a06 	br	92454 <lcd_handle_escape+0x2d0>
   9232c:	e0ffff17 	ldw	r3,-4(fp)
   92330:	188012e0 	cmpeqi	r2,r3,75
   92334:	10002b1e 	bne	r2,zero,923e4 <lcd_handle_escape+0x260>
   92338:	e0ffff17 	ldw	r3,-4(fp)
   9233c:	188019a0 	cmpeqi	r2,r3,102
   92340:	1000011e 	bne	r2,zero,92348 <lcd_handle_escape+0x1c4>
   92344:	00004306 	br	92454 <lcd_handle_escape+0x2d0>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   92348:	e0bffb17 	ldw	r2,-20(fp)
   9234c:	10800050 	cmplti	r2,r2,1
   92350:	1000051e 	bne	r2,zero,92368 <lcd_handle_escape+0x1e4>
      sp->x = parm2 - 1;
   92354:	e0bffb17 	ldw	r2,-20(fp)
   92358:	10bfffc4 	addi	r2,r2,-1
   9235c:	1007883a 	mov	r3,r2
   92360:	e0bffd17 	ldw	r2,-12(fp)
   92364:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   92368:	e0bffc17 	ldw	r2,-16(fp)
   9236c:	10800050 	cmplti	r2,r2,1
   92370:	1000381e 	bne	r2,zero,92454 <lcd_handle_escape+0x2d0>
    {
      sp->y = parm1 - 1;
   92374:	e0bffc17 	ldw	r2,-16(fp)
   92378:	10bfffc4 	addi	r2,r2,-1
   9237c:	1007883a 	mov	r3,r2
   92380:	e0bffd17 	ldw	r2,-12(fp)
   92384:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   92388:	e0bffd17 	ldw	r2,-12(fp)
   9238c:	10800883 	ldbu	r2,34(r2)
   92390:	10803fcc 	andi	r2,r2,255
   92394:	10800170 	cmpltui	r2,r2,5
   92398:	1000061e 	bne	r2,zero,923b4 <lcd_handle_escape+0x230>
        sp->y = ALT_LCD_HEIGHT * 2;
   9239c:	e0fffd17 	ldw	r3,-12(fp)
   923a0:	00800104 	movi	r2,4
   923a4:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
   923a8:	00000206 	br	923b4 <lcd_handle_escape+0x230>
        lcd_scroll_up(sp);
   923ac:	e13ffd17 	ldw	r4,-12(fp)
   923b0:	00920a40 	call	920a4 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   923b4:	e0bffd17 	ldw	r2,-12(fp)
   923b8:	10800883 	ldbu	r2,34(r2)
   923bc:	10803fcc 	andi	r2,r2,255
   923c0:	108000e8 	cmpgeui	r2,r2,3
   923c4:	103ff91e 	bne	r2,zero,923ac <lcd_handle_escape+0x228>
        lcd_scroll_up(sp);
    }
    break;
   923c8:	00002206 	br	92454 <lcd_handle_escape+0x2d0>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   923cc:	e0bffc17 	ldw	r2,-16(fp)
   923d0:	10800098 	cmpnei	r2,r2,2
   923d4:	10001f1e 	bne	r2,zero,92454 <lcd_handle_escape+0x2d0>
      lcd_clear_screen(sp);
   923d8:	e13ffd17 	ldw	r4,-12(fp)
   923dc:	0091db80 	call	91db8 <lcd_clear_screen>
    break;
   923e0:	00001c06 	br	92454 <lcd_handle_escape+0x2d0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   923e4:	e0bffc17 	ldw	r2,-16(fp)
   923e8:	10800048 	cmpgei	r2,r2,1
   923ec:	1000191e 	bne	r2,zero,92454 <lcd_handle_escape+0x2d0>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   923f0:	e0bffd17 	ldw	r2,-12(fp)
   923f4:	10800843 	ldbu	r2,33(r2)
   923f8:	10803fcc 	andi	r2,r2,255
   923fc:	10801428 	cmpgeui	r2,r2,80
   92400:	1000141e 	bne	r2,zero,92454 <lcd_handle_escape+0x2d0>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   92404:	e0bffd17 	ldw	r2,-12(fp)
   92408:	10800883 	ldbu	r2,34(r2)
   9240c:	11003fcc 	andi	r4,r2,255
   92410:	014018c4 	movi	r5,99
   92414:	0080ba00 	call	80ba0 <__mulsi3>
   92418:	10c01004 	addi	r3,r2,64
   9241c:	e0bffd17 	ldw	r2,-12(fp)
   92420:	1887883a 	add	r3,r3,r2
   92424:	e0bffd17 	ldw	r2,-12(fp)
   92428:	10800843 	ldbu	r2,33(r2)
   9242c:	10803fcc 	andi	r2,r2,255
   92430:	1889883a 	add	r4,r3,r2
   92434:	e0bffd17 	ldw	r2,-12(fp)
   92438:	10800843 	ldbu	r2,33(r2)
   9243c:	10c03fcc 	andi	r3,r2,255
   92440:	00801404 	movi	r2,80
   92444:	10c5c83a 	sub	r2,r2,r3
   92448:	100d883a 	mov	r6,r2
   9244c:	01400804 	movi	r5,32
   92450:	00893ec0 	call	893ec <memset>
    }
    break;
  }
}
   92454:	e037883a 	mov	sp,fp
   92458:	dfc00117 	ldw	ra,4(sp)
   9245c:	df000017 	ldw	fp,0(sp)
   92460:	dec00204 	addi	sp,sp,8
   92464:	f800283a 	ret

00092468 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   92468:	defff004 	addi	sp,sp,-64
   9246c:	dfc00f15 	stw	ra,60(sp)
   92470:	df000e15 	stw	fp,56(sp)
   92474:	dc800d15 	stw	r18,52(sp)
   92478:	dc400c15 	stw	r17,48(sp)
   9247c:	dc000b15 	stw	r16,44(sp)
   92480:	df000b04 	addi	fp,sp,44
   92484:	e13ffc15 	stw	r4,-16(fp)
   92488:	e17ffd15 	stw	r5,-12(fp)
   9248c:	e1bffe15 	stw	r6,-8(fp)
   92490:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
   92494:	e0bffe17 	ldw	r2,-8(fp)
   92498:	1007883a 	mov	r3,r2
   9249c:	e0bffd17 	ldw	r2,-12(fp)
   924a0:	10c5883a 	add	r2,r2,r3
   924a4:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   924a8:	e0fffc17 	ldw	r3,-16(fp)
   924ac:	00800044 	movi	r2,1
   924b0:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
   924b4:	0000a306 	br	92744 <altera_avalon_lcd_16207_write+0x2dc>
  {
    char c = *ptr;
   924b8:	e0bffd17 	ldw	r2,-12(fp)
   924bc:	10800003 	ldbu	r2,0(r2)
   924c0:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
   924c4:	e0bffc17 	ldw	r2,-16(fp)
   924c8:	10800903 	ldbu	r2,36(r2)
   924cc:	10803fcc 	andi	r2,r2,255
   924d0:	1080201c 	xori	r2,r2,128
   924d4:	10bfe004 	addi	r2,r2,-128
   924d8:	1004803a 	cmplt	r2,r2,zero
   924dc:	10003b1e 	bne	r2,zero,925cc <altera_avalon_lcd_16207_write+0x164>
    {
      unsigned int esccount = sp->esccount;
   924e0:	e0bffc17 	ldw	r2,-16(fp)
   924e4:	10800903 	ldbu	r2,36(r2)
   924e8:	10803fcc 	andi	r2,r2,255
   924ec:	1080201c 	xori	r2,r2,128
   924f0:	10bfe004 	addi	r2,r2,-128
   924f4:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   924f8:	e0bff717 	ldw	r2,-36(fp)
   924fc:	1004c03a 	cmpne	r2,r2,zero
   92500:	1000031e 	bne	r2,zero,92510 <altera_avalon_lcd_16207_write+0xa8>
   92504:	e0bff807 	ldb	r2,-32(fp)
   92508:	108016d8 	cmpnei	r2,r2,91
   9250c:	1000111e 	bne	r2,zero,92554 <altera_avalon_lcd_16207_write+0xec>
   92510:	e0bff717 	ldw	r2,-36(fp)
   92514:	1005003a 	cmpeq	r2,r2,zero
   92518:	10001a1e 	bne	r2,zero,92584 <altera_avalon_lcd_16207_write+0x11c>
   9251c:	e0bff807 	ldb	r2,-32(fp)
   92520:	1007883a 	mov	r3,r2
   92524:	00800274 	movhi	r2,9
   92528:	1098c004 	addi	r2,r2,25344
   9252c:	10800017 	ldw	r2,0(r2)
   92530:	1885883a 	add	r2,r3,r2
   92534:	10800003 	ldbu	r2,0(r2)
   92538:	10803fcc 	andi	r2,r2,255
   9253c:	1080010c 	andi	r2,r2,4
   92540:	1004c03a 	cmpne	r2,r2,zero
   92544:	10000f1e 	bne	r2,zero,92584 <altera_avalon_lcd_16207_write+0x11c>
   92548:	e0bff807 	ldb	r2,-32(fp)
   9254c:	10800ee0 	cmpeqi	r2,r2,59
   92550:	10000c1e 	bne	r2,zero,92584 <altera_avalon_lcd_16207_write+0x11c>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
   92554:	e0fff717 	ldw	r3,-36(fp)
   92558:	e0bffc17 	ldw	r2,-16(fp)
   9255c:	1885883a 	add	r2,r3,r2
   92560:	10800a04 	addi	r2,r2,40
   92564:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   92568:	e17ff807 	ldb	r5,-32(fp)
   9256c:	e13ffc17 	ldw	r4,-16(fp)
   92570:	00921840 	call	92184 <lcd_handle_escape>

        sp->esccount = -1;
   92574:	e0fffc17 	ldw	r3,-16(fp)
   92578:	00bfffc4 	movi	r2,-1
   9257c:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   92580:	00006d06 	br	92738 <altera_avalon_lcd_16207_write+0x2d0>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   92584:	e0bffc17 	ldw	r2,-16(fp)
   92588:	10800903 	ldbu	r2,36(r2)
   9258c:	10803fcc 	andi	r2,r2,255
   92590:	108001e8 	cmpgeui	r2,r2,7
   92594:	1000681e 	bne	r2,zero,92738 <altera_avalon_lcd_16207_write+0x2d0>
      {
        sp->escape[esccount] = c;
   92598:	e0fff717 	ldw	r3,-36(fp)
   9259c:	e0bffc17 	ldw	r2,-16(fp)
   925a0:	1885883a 	add	r2,r3,r2
   925a4:	10c00a04 	addi	r3,r2,40
   925a8:	e0bff803 	ldbu	r2,-32(fp)
   925ac:	18800005 	stb	r2,0(r3)
        sp->esccount++;
   925b0:	e0bffc17 	ldw	r2,-16(fp)
   925b4:	10800903 	ldbu	r2,36(r2)
   925b8:	10800044 	addi	r2,r2,1
   925bc:	1007883a 	mov	r3,r2
   925c0:	e0bffc17 	ldw	r2,-16(fp)
   925c4:	10c00905 	stb	r3,36(r2)
   925c8:	00005b06 	br	92738 <altera_avalon_lcd_16207_write+0x2d0>
      }
    }
    else if (c == 27) /* ESC */
   925cc:	e0bff807 	ldb	r2,-32(fp)
   925d0:	108006d8 	cmpnei	r2,r2,27
   925d4:	1000031e 	bne	r2,zero,925e4 <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->esccount = 0;
   925d8:	e0bffc17 	ldw	r2,-16(fp)
   925dc:	10000905 	stb	zero,36(r2)
   925e0:	00005506 	br	92738 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\r')
   925e4:	e0bff807 	ldb	r2,-32(fp)
   925e8:	10800358 	cmpnei	r2,r2,13
   925ec:	1000031e 	bne	r2,zero,925fc <altera_avalon_lcd_16207_write+0x194>
    {
      sp->x = 0;
   925f0:	e0bffc17 	ldw	r2,-16(fp)
   925f4:	10000845 	stb	zero,33(r2)
   925f8:	00004f06 	br	92738 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\n')
   925fc:	e0bff807 	ldb	r2,-32(fp)
   92600:	10800298 	cmpnei	r2,r2,10
   92604:	1000101e 	bne	r2,zero,92648 <altera_avalon_lcd_16207_write+0x1e0>
    {
      sp->x = 0;
   92608:	e0bffc17 	ldw	r2,-16(fp)
   9260c:	10000845 	stb	zero,33(r2)
      sp->y++;
   92610:	e0bffc17 	ldw	r2,-16(fp)
   92614:	10800883 	ldbu	r2,34(r2)
   92618:	10800044 	addi	r2,r2,1
   9261c:	1007883a 	mov	r3,r2
   92620:	e0bffc17 	ldw	r2,-16(fp)
   92624:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   92628:	e0bffc17 	ldw	r2,-16(fp)
   9262c:	10800883 	ldbu	r2,34(r2)
   92630:	10803fcc 	andi	r2,r2,255
   92634:	108000f0 	cmpltui	r2,r2,3
   92638:	10003f1e 	bne	r2,zero,92738 <altera_avalon_lcd_16207_write+0x2d0>
        lcd_scroll_up(sp);
   9263c:	e13ffc17 	ldw	r4,-16(fp)
   92640:	00920a40 	call	920a4 <lcd_scroll_up>
   92644:	00003c06 	br	92738 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\b')
   92648:	e0bff807 	ldb	r2,-32(fp)
   9264c:	10800218 	cmpnei	r2,r2,8
   92650:	10000c1e 	bne	r2,zero,92684 <altera_avalon_lcd_16207_write+0x21c>
    {
      if (sp->x > 0)
   92654:	e0bffc17 	ldw	r2,-16(fp)
   92658:	10800843 	ldbu	r2,33(r2)
   9265c:	10803fcc 	andi	r2,r2,255
   92660:	1005003a 	cmpeq	r2,r2,zero
   92664:	1000341e 	bne	r2,zero,92738 <altera_avalon_lcd_16207_write+0x2d0>
        sp->x--;
   92668:	e0bffc17 	ldw	r2,-16(fp)
   9266c:	10800843 	ldbu	r2,33(r2)
   92670:	10bfffc4 	addi	r2,r2,-1
   92674:	1007883a 	mov	r3,r2
   92678:	e0bffc17 	ldw	r2,-16(fp)
   9267c:	10c00845 	stb	r3,33(r2)
   92680:	00002d06 	br	92738 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (isprint(c))
   92684:	e0bff807 	ldb	r2,-32(fp)
   92688:	1007883a 	mov	r3,r2
   9268c:	00800274 	movhi	r2,9
   92690:	1098c004 	addi	r2,r2,25344
   92694:	10800017 	ldw	r2,0(r2)
   92698:	1885883a 	add	r2,r3,r2
   9269c:	10800003 	ldbu	r2,0(r2)
   926a0:	10803fcc 	andi	r2,r2,255
   926a4:	1080201c 	xori	r2,r2,128
   926a8:	10bfe004 	addi	r2,r2,-128
   926ac:	108025cc 	andi	r2,r2,151
   926b0:	1005003a 	cmpeq	r2,r2,zero
   926b4:	1000201e 	bne	r2,zero,92738 <altera_avalon_lcd_16207_write+0x2d0>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   926b8:	e0bffc17 	ldw	r2,-16(fp)
   926bc:	10800883 	ldbu	r2,34(r2)
   926c0:	10803fcc 	andi	r2,r2,255
   926c4:	108000b0 	cmpltui	r2,r2,2
   926c8:	1000021e 	bne	r2,zero,926d4 <altera_avalon_lcd_16207_write+0x26c>
        lcd_scroll_up(sp);
   926cc:	e13ffc17 	ldw	r4,-16(fp)
   926d0:	00920a40 	call	920a4 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   926d4:	e0bffc17 	ldw	r2,-16(fp)
   926d8:	10800843 	ldbu	r2,33(r2)
   926dc:	10803fcc 	andi	r2,r2,255
   926e0:	10801428 	cmpgeui	r2,r2,80
   926e4:	10000e1e 	bne	r2,zero,92720 <altera_avalon_lcd_16207_write+0x2b8>
        sp->line[sp->y].data[sp->x] = c;
   926e8:	e0bffc17 	ldw	r2,-16(fp)
   926ec:	10800883 	ldbu	r2,34(r2)
   926f0:	11003fcc 	andi	r4,r2,255
   926f4:	e0bffc17 	ldw	r2,-16(fp)
   926f8:	10800843 	ldbu	r2,33(r2)
   926fc:	14403fcc 	andi	r17,r2,255
   92700:	e43ffc17 	ldw	r16,-16(fp)
   92704:	014018c4 	movi	r5,99
   92708:	0080ba00 	call	80ba0 <__mulsi3>
   9270c:	1405883a 	add	r2,r2,r16
   92710:	1445883a 	add	r2,r2,r17
   92714:	10c01004 	addi	r3,r2,64
   92718:	e0bff803 	ldbu	r2,-32(fp)
   9271c:	18800005 	stb	r2,0(r3)

      sp->x++;
   92720:	e0bffc17 	ldw	r2,-16(fp)
   92724:	10800843 	ldbu	r2,33(r2)
   92728:	10800044 	addi	r2,r2,1
   9272c:	1007883a 	mov	r3,r2
   92730:	e0bffc17 	ldw	r2,-16(fp)
   92734:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   92738:	e0bffd17 	ldw	r2,-12(fp)
   9273c:	10800044 	addi	r2,r2,1
   92740:	e0bffd15 	stw	r2,-12(fp)
   92744:	e0fffd17 	ldw	r3,-12(fp)
   92748:	e0bffb17 	ldw	r2,-20(fp)
   9274c:	18bf5a36 	bltu	r3,r2,924b8 <altera_avalon_lcd_16207_write+0x50>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   92750:	00800404 	movi	r2,16
   92754:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   92758:	e03ffa15 	stw	zero,-24(fp)
   9275c:	00003906 	br	92844 <altera_avalon_lcd_16207_write+0x3dc>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   92760:	00801404 	movi	r2,80
   92764:	e0bff615 	stw	r2,-40(fp)
   92768:	00001206 	br	927b4 <altera_avalon_lcd_16207_write+0x34c>
      if (sp->line[y].data[width-1] != ' ')
   9276c:	e13ffa17 	ldw	r4,-24(fp)
   92770:	e0bff617 	ldw	r2,-40(fp)
   92774:	147fffc4 	addi	r17,r2,-1
   92778:	e43ffc17 	ldw	r16,-16(fp)
   9277c:	014018c4 	movi	r5,99
   92780:	0080ba00 	call	80ba0 <__mulsi3>
   92784:	1405883a 	add	r2,r2,r16
   92788:	1445883a 	add	r2,r2,r17
   9278c:	10801004 	addi	r2,r2,64
   92790:	10800003 	ldbu	r2,0(r2)
   92794:	10803fcc 	andi	r2,r2,255
   92798:	1080201c 	xori	r2,r2,128
   9279c:	10bfe004 	addi	r2,r2,-128
   927a0:	10800818 	cmpnei	r2,r2,32
   927a4:	1000061e 	bne	r2,zero,927c0 <altera_avalon_lcd_16207_write+0x358>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   927a8:	e0bff617 	ldw	r2,-40(fp)
   927ac:	10bfffc4 	addi	r2,r2,-1
   927b0:	e0bff615 	stw	r2,-40(fp)
   927b4:	e0bff617 	ldw	r2,-40(fp)
   927b8:	10800048 	cmpgei	r2,r2,1
   927bc:	103feb1e 	bne	r2,zero,9276c <altera_avalon_lcd_16207_write+0x304>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   927c0:	e0bff617 	ldw	r2,-40(fp)
   927c4:	10800448 	cmpgei	r2,r2,17
   927c8:	1000031e 	bne	r2,zero,927d8 <altera_avalon_lcd_16207_write+0x370>
      width = ALT_LCD_WIDTH;
   927cc:	00800404 	movi	r2,16
   927d0:	e0bff615 	stw	r2,-40(fp)
   927d4:	00000306 	br	927e4 <altera_avalon_lcd_16207_write+0x37c>
    else
      width++;
   927d8:	e0bff617 	ldw	r2,-40(fp)
   927dc:	10800044 	addi	r2,r2,1
   927e0:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
   927e4:	e13ffa17 	ldw	r4,-24(fp)
   927e8:	e0bff617 	ldw	r2,-40(fp)
   927ec:	1023883a 	mov	r17,r2
   927f0:	e43ffc17 	ldw	r16,-16(fp)
   927f4:	014018c4 	movi	r5,99
   927f8:	0080ba00 	call	80ba0 <__mulsi3>
   927fc:	1405883a 	add	r2,r2,r16
   92800:	10802404 	addi	r2,r2,144
   92804:	14400045 	stb	r17,1(r2)
    if (widthmax < width)
   92808:	e0fff917 	ldw	r3,-28(fp)
   9280c:	e0bff617 	ldw	r2,-40(fp)
   92810:	1880020e 	bge	r3,r2,9281c <altera_avalon_lcd_16207_write+0x3b4>
      widthmax = width;
   92814:	e0bff617 	ldw	r2,-40(fp)
   92818:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   9281c:	e13ffa17 	ldw	r4,-24(fp)
   92820:	e43ffc17 	ldw	r16,-16(fp)
   92824:	014018c4 	movi	r5,99
   92828:	0080ba00 	call	80ba0 <__mulsi3>
   9282c:	1405883a 	add	r2,r2,r16
   92830:	10802404 	addi	r2,r2,144
   92834:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   92838:	e0bffa17 	ldw	r2,-24(fp)
   9283c:	10800044 	addi	r2,r2,1
   92840:	e0bffa15 	stw	r2,-24(fp)
   92844:	e0bffa17 	ldw	r2,-24(fp)
   92848:	10800090 	cmplti	r2,r2,2
   9284c:	103fc41e 	bne	r2,zero,92760 <altera_avalon_lcd_16207_write+0x2f8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   92850:	e0bff917 	ldw	r2,-28(fp)
   92854:	10800448 	cmpgei	r2,r2,17
   92858:	1000031e 	bne	r2,zero,92868 <altera_avalon_lcd_16207_write+0x400>
    sp->scrollmax = 0;
   9285c:	e0bffc17 	ldw	r2,-16(fp)
   92860:	10000985 	stb	zero,38(r2)
   92864:	00003106 	br	9292c <altera_avalon_lcd_16207_write+0x4c4>
  else
  {
    widthmax *= 2;
   92868:	e0bff917 	ldw	r2,-28(fp)
   9286c:	1085883a 	add	r2,r2,r2
   92870:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
   92874:	e0bff917 	ldw	r2,-28(fp)
   92878:	1007883a 	mov	r3,r2
   9287c:	e0bffc17 	ldw	r2,-16(fp)
   92880:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   92884:	e03ffa15 	stw	zero,-24(fp)
   92888:	00002506 	br	92920 <altera_avalon_lcd_16207_write+0x4b8>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   9288c:	e13ffa17 	ldw	r4,-24(fp)
   92890:	e43ffc17 	ldw	r16,-16(fp)
   92894:	014018c4 	movi	r5,99
   92898:	0080ba00 	call	80ba0 <__mulsi3>
   9289c:	1405883a 	add	r2,r2,r16
   928a0:	10802404 	addi	r2,r2,144
   928a4:	10800043 	ldbu	r2,1(r2)
   928a8:	10803fcc 	andi	r2,r2,255
   928ac:	1080201c 	xori	r2,r2,128
   928b0:	10bfe004 	addi	r2,r2,-128
   928b4:	10800450 	cmplti	r2,r2,17
   928b8:	1000161e 	bne	r2,zero,92914 <altera_avalon_lcd_16207_write+0x4ac>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   928bc:	e4bffa17 	ldw	r18,-24(fp)
   928c0:	e13ffa17 	ldw	r4,-24(fp)
   928c4:	e43ffc17 	ldw	r16,-16(fp)
   928c8:	014018c4 	movi	r5,99
   928cc:	0080ba00 	call	80ba0 <__mulsi3>
   928d0:	1405883a 	add	r2,r2,r16
   928d4:	10802404 	addi	r2,r2,144
   928d8:	10800043 	ldbu	r2,1(r2)
   928dc:	10803fcc 	andi	r2,r2,255
   928e0:	1080201c 	xori	r2,r2,128
   928e4:	10bfe004 	addi	r2,r2,-128
   928e8:	1008923a 	slli	r4,r2,8
   928ec:	e17ff917 	ldw	r5,-28(fp)
   928f0:	0080ad00 	call	80ad0 <__divsi3>
   928f4:	1023883a 	mov	r17,r2
   928f8:	e43ffc17 	ldw	r16,-16(fp)
   928fc:	9009883a 	mov	r4,r18
   92900:	014018c4 	movi	r5,99
   92904:	0080ba00 	call	80ba0 <__mulsi3>
   92908:	1405883a 	add	r2,r2,r16
   9290c:	10802404 	addi	r2,r2,144
   92910:	14400085 	stb	r17,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   92914:	e0bffa17 	ldw	r2,-24(fp)
   92918:	10800044 	addi	r2,r2,1
   9291c:	e0bffa15 	stw	r2,-24(fp)
   92920:	e0bffa17 	ldw	r2,-24(fp)
   92924:	10800090 	cmplti	r2,r2,2
   92928:	103fd81e 	bne	r2,zero,9288c <altera_avalon_lcd_16207_write+0x424>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   9292c:	e0bffc17 	ldw	r2,-16(fp)
   92930:	10800943 	ldbu	r2,37(r2)
   92934:	10803fcc 	andi	r2,r2,255
   92938:	1080201c 	xori	r2,r2,128
   9293c:	10bfe004 	addi	r2,r2,-128
   92940:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
   92944:	e13ffc17 	ldw	r4,-16(fp)
   92948:	0091e900 	call	91e90 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   9294c:	e0bffc17 	ldw	r2,-16(fp)
   92950:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   92954:	e0bffc17 	ldw	r2,-16(fp)
   92958:	10800943 	ldbu	r2,37(r2)
   9295c:	10c03fcc 	andi	r3,r2,255
   92960:	18c0201c 	xori	r3,r3,128
   92964:	18ffe004 	addi	r3,r3,-128
   92968:	e0bff517 	ldw	r2,-44(fp)
   9296c:	18800426 	beq	r3,r2,92980 <altera_avalon_lcd_16207_write+0x518>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   92970:	e0fffc17 	ldw	r3,-16(fp)
   92974:	00800044 	movi	r2,1
   92978:	188009c5 	stb	r2,39(r3)
  }
   9297c:	003feb06 	br	9292c <altera_avalon_lcd_16207_write+0x4c4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   92980:	e0bffe17 	ldw	r2,-8(fp)
}
   92984:	e037883a 	mov	sp,fp
   92988:	dfc00417 	ldw	ra,16(sp)
   9298c:	df000317 	ldw	fp,12(sp)
   92990:	dc800217 	ldw	r18,8(sp)
   92994:	dc400117 	ldw	r17,4(sp)
   92998:	dc000017 	ldw	r16,0(sp)
   9299c:	dec00504 	addi	sp,sp,20
   929a0:	f800283a 	ret

000929a4 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   929a4:	defffc04 	addi	sp,sp,-16
   929a8:	dfc00315 	stw	ra,12(sp)
   929ac:	df000215 	stw	fp,8(sp)
   929b0:	df000204 	addi	fp,sp,8
   929b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   929b8:	e0bfff17 	ldw	r2,-4(fp)
   929bc:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   929c0:	e0bffe17 	ldw	r2,-8(fp)
   929c4:	10800943 	ldbu	r2,37(r2)
   929c8:	10803fcc 	andi	r2,r2,255
   929cc:	1080201c 	xori	r2,r2,128
   929d0:	10bfe004 	addi	r2,r2,-128
   929d4:	10c00044 	addi	r3,r2,1
   929d8:	e0bffe17 	ldw	r2,-8(fp)
   929dc:	10800983 	ldbu	r2,38(r2)
   929e0:	10803fcc 	andi	r2,r2,255
   929e4:	1080201c 	xori	r2,r2,128
   929e8:	10bfe004 	addi	r2,r2,-128
   929ec:	18800316 	blt	r3,r2,929fc <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
   929f0:	e0bffe17 	ldw	r2,-8(fp)
   929f4:	10000945 	stb	zero,37(r2)
   929f8:	00000606 	br	92a14 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
   929fc:	e0bffe17 	ldw	r2,-8(fp)
   92a00:	10800943 	ldbu	r2,37(r2)
   92a04:	10800044 	addi	r2,r2,1
   92a08:	1007883a 	mov	r3,r2
   92a0c:	e0bffe17 	ldw	r2,-8(fp)
   92a10:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   92a14:	e0bffe17 	ldw	r2,-8(fp)
   92a18:	10800983 	ldbu	r2,38(r2)
   92a1c:	10803fcc 	andi	r2,r2,255
   92a20:	1080201c 	xori	r2,r2,128
   92a24:	10bfe004 	addi	r2,r2,-128
   92a28:	10800050 	cmplti	r2,r2,1
   92a2c:	1000091e 	bne	r2,zero,92a54 <alt_lcd_16207_timeout+0xb0>
   92a30:	e0bffe17 	ldw	r2,-8(fp)
   92a34:	108009c3 	ldbu	r2,39(r2)
   92a38:	10803fcc 	andi	r2,r2,255
   92a3c:	1080201c 	xori	r2,r2,128
   92a40:	10bfe004 	addi	r2,r2,-128
   92a44:	1004c03a 	cmpne	r2,r2,zero
   92a48:	1000021e 	bne	r2,zero,92a54 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
   92a4c:	e13ffe17 	ldw	r4,-8(fp)
   92a50:	0091e900 	call	91e90 <lcd_repaint_screen>

  return sp->period;
   92a54:	e0bffe17 	ldw	r2,-8(fp)
   92a58:	10800717 	ldw	r2,28(r2)
}
   92a5c:	e037883a 	mov	sp,fp
   92a60:	dfc00117 	ldw	ra,4(sp)
   92a64:	df000017 	ldw	fp,0(sp)
   92a68:	dec00204 	addi	sp,sp,8
   92a6c:	f800283a 	ret

00092a70 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   92a70:	defffc04 	addi	sp,sp,-16
   92a74:	dfc00315 	stw	ra,12(sp)
   92a78:	df000215 	stw	fp,8(sp)
   92a7c:	df000204 	addi	fp,sp,8
   92a80:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   92a84:	e0bfff17 	ldw	r2,-4(fp)
   92a88:	10800017 	ldw	r2,0(r2)
   92a8c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   92a90:	e0bfff17 	ldw	r2,-4(fp)
   92a94:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   92a98:	010ea604 	movi	r4,15000
   92a9c:	0090ec40 	call	90ec4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   92aa0:	e0bffe17 	ldw	r2,-8(fp)
   92aa4:	1007883a 	mov	r3,r2
   92aa8:	00800c04 	movi	r2,48
   92aac:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   92ab0:	01040104 	movi	r4,4100
   92ab4:	0090ec40 	call	90ec4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   92ab8:	e0bffe17 	ldw	r2,-8(fp)
   92abc:	1007883a 	mov	r3,r2
   92ac0:	00800c04 	movi	r2,48
   92ac4:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   92ac8:	0100fa04 	movi	r4,1000
   92acc:	0090ec40 	call	90ec4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   92ad0:	e0bffe17 	ldw	r2,-8(fp)
   92ad4:	1007883a 	mov	r3,r2
   92ad8:	00800c04 	movi	r2,48
   92adc:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   92ae0:	e13fff17 	ldw	r4,-4(fp)
   92ae4:	01400e04 	movi	r5,56
   92ae8:	0091c2c0 	call	91c2c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   92aec:	e13fff17 	ldw	r4,-4(fp)
   92af0:	01400204 	movi	r5,8
   92af4:	0091c2c0 	call	91c2c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   92af8:	e13fff17 	ldw	r4,-4(fp)
   92afc:	0091db80 	call	91db8 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   92b00:	e13fff17 	ldw	r4,-4(fp)
   92b04:	01400184 	movi	r5,6
   92b08:	0091c2c0 	call	91c2c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   92b0c:	e13fff17 	ldw	r4,-4(fp)
   92b10:	01400304 	movi	r5,12
   92b14:	0091c2c0 	call	91c2c <lcd_write_command>

  sp->esccount = -1;
   92b18:	e0ffff17 	ldw	r3,-4(fp)
   92b1c:	00bfffc4 	movi	r2,-1
   92b20:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
   92b24:	e0bfff17 	ldw	r2,-4(fp)
   92b28:	11000a04 	addi	r4,r2,40
   92b2c:	000b883a 	mov	r5,zero
   92b30:	01800204 	movi	r6,8
   92b34:	00893ec0 	call	893ec <memset>

  sp->scrollpos = 0;
   92b38:	e0bfff17 	ldw	r2,-4(fp)
   92b3c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   92b40:	e0bfff17 	ldw	r2,-4(fp)
   92b44:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   92b48:	e0bfff17 	ldw	r2,-4(fp)
   92b4c:	100009c5 	stb	zero,39(r2)
   92b50:	00800274 	movhi	r2,9
   92b54:	109fc604 	addi	r2,r2,32536
   92b58:	10800017 	ldw	r2,0(r2)
   92b5c:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   92b60:	01400284 	movi	r5,10
   92b64:	0080b900 	call	80b90 <__udivsi3>
   92b68:	1007883a 	mov	r3,r2
   92b6c:	e0bfff17 	ldw	r2,-4(fp)
   92b70:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   92b74:	e0bfff17 	ldw	r2,-4(fp)
   92b78:	11000104 	addi	r4,r2,4
   92b7c:	e0bfff17 	ldw	r2,-4(fp)
   92b80:	10800717 	ldw	r2,28(r2)
   92b84:	100b883a 	mov	r5,r2
   92b88:	01800274 	movhi	r6,9
   92b8c:	318a6904 	addi	r6,r6,10660
   92b90:	e1ffff17 	ldw	r7,-4(fp)
   92b94:	0092e6c0 	call	92e6c <alt_alarm_start>
}
   92b98:	e037883a 	mov	sp,fp
   92b9c:	dfc00117 	ldw	ra,4(sp)
   92ba0:	df000017 	ldw	fp,0(sp)
   92ba4:	dec00204 	addi	sp,sp,8
   92ba8:	f800283a 	ret

00092bac <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   92bac:	defffa04 	addi	sp,sp,-24
   92bb0:	dfc00515 	stw	ra,20(sp)
   92bb4:	df000415 	stw	fp,16(sp)
   92bb8:	df000404 	addi	fp,sp,16
   92bbc:	e13ffd15 	stw	r4,-12(fp)
   92bc0:	e17ffe15 	stw	r5,-8(fp)
   92bc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   92bc8:	e0bffd17 	ldw	r2,-12(fp)
   92bcc:	10800017 	ldw	r2,0(r2)
   92bd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   92bd4:	e0bffc17 	ldw	r2,-16(fp)
   92bd8:	11000a04 	addi	r4,r2,40
   92bdc:	e0bffd17 	ldw	r2,-12(fp)
   92be0:	11c00217 	ldw	r7,8(r2)
   92be4:	e17ffe17 	ldw	r5,-8(fp)
   92be8:	e1bfff17 	ldw	r6,-4(fp)
   92bec:	00924680 	call	92468 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   92bf0:	e037883a 	mov	sp,fp
   92bf4:	dfc00117 	ldw	ra,4(sp)
   92bf8:	df000017 	ldw	fp,0(sp)
   92bfc:	dec00204 	addi	sp,sp,8
   92c00:	f800283a 	ret

00092c04 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   92c04:	defffa04 	addi	sp,sp,-24
   92c08:	dfc00515 	stw	ra,20(sp)
   92c0c:	df000415 	stw	fp,16(sp)
   92c10:	df000404 	addi	fp,sp,16
   92c14:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   92c18:	e0bfff17 	ldw	r2,-4(fp)
   92c1c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   92c20:	e0bfff17 	ldw	r2,-4(fp)
   92c24:	10800104 	addi	r2,r2,4
   92c28:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92c2c:	0005303a 	rdctl	r2,status
   92c30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92c34:	e0fffd17 	ldw	r3,-12(fp)
   92c38:	00bfff84 	movi	r2,-2
   92c3c:	1884703a 	and	r2,r3,r2
   92c40:	1001703a 	wrctl	status,r2
  
  return context;
   92c44:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   92c48:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   92c4c:	0093a680 	call	93a68 <alt_tick>
   92c50:	e0bffe17 	ldw	r2,-8(fp)
   92c54:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92c58:	e0bffc17 	ldw	r2,-16(fp)
   92c5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   92c60:	e037883a 	mov	sp,fp
   92c64:	dfc00117 	ldw	ra,4(sp)
   92c68:	df000017 	ldw	fp,0(sp)
   92c6c:	dec00204 	addi	sp,sp,8
   92c70:	f800283a 	ret

00092c74 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   92c74:	defff804 	addi	sp,sp,-32
   92c78:	dfc00715 	stw	ra,28(sp)
   92c7c:	df000615 	stw	fp,24(sp)
   92c80:	df000604 	addi	fp,sp,24
   92c84:	e13ffc15 	stw	r4,-16(fp)
   92c88:	e17ffd15 	stw	r5,-12(fp)
   92c8c:	e1bffe15 	stw	r6,-8(fp)
   92c90:	e1ffff15 	stw	r7,-4(fp)
   92c94:	e0bfff17 	ldw	r2,-4(fp)
   92c98:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   92c9c:	00800274 	movhi	r2,9
   92ca0:	109fc604 	addi	r2,r2,32536
   92ca4:	10800017 	ldw	r2,0(r2)
   92ca8:	1004c03a 	cmpne	r2,r2,zero
   92cac:	1000041e 	bne	r2,zero,92cc0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   92cb0:	00c00274 	movhi	r3,9
   92cb4:	18dfc604 	addi	r3,r3,32536
   92cb8:	e0bffb17 	ldw	r2,-20(fp)
   92cbc:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   92cc0:	e0bffc17 	ldw	r2,-16(fp)
   92cc4:	10800104 	addi	r2,r2,4
   92cc8:	1007883a 	mov	r3,r2
   92ccc:	008001c4 	movi	r2,7
   92cd0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   92cd4:	d8000015 	stw	zero,0(sp)
   92cd8:	e13ffd17 	ldw	r4,-12(fp)
   92cdc:	e17ffe17 	ldw	r5,-8(fp)
   92ce0:	01800274 	movhi	r6,9
   92ce4:	318b0104 	addi	r6,r6,11268
   92ce8:	e1fffc17 	ldw	r7,-16(fp)
   92cec:	00935b40 	call	935b4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   92cf0:	e037883a 	mov	sp,fp
   92cf4:	dfc00117 	ldw	ra,4(sp)
   92cf8:	df000017 	ldw	fp,0(sp)
   92cfc:	dec00204 	addi	sp,sp,8
   92d00:	f800283a 	ret

00092d04 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   92d04:	defffd04 	addi	sp,sp,-12
   92d08:	df000215 	stw	fp,8(sp)
   92d0c:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
   92d10:	00800274 	movhi	r2,9
   92d14:	109fc304 	addi	r2,r2,32524
   92d18:	10800017 	ldw	r2,0(r2)
   92d1c:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
   92d20:	00800274 	movhi	r2,9
   92d24:	109fc404 	addi	r2,r2,32528
   92d28:	10800017 	ldw	r2,0(r2)
   92d2c:	1004c03a 	cmpne	r2,r2,zero
   92d30:	1000031e 	bne	r2,zero,92d40 <alt_timestamp_start+0x3c>
  {
    return -1;
   92d34:	00bfffc4 	movi	r2,-1
   92d38:	e0bfff15 	stw	r2,-4(fp)
   92d3c:	00001506 	br	92d94 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   92d40:	e0bffe17 	ldw	r2,-8(fp)
   92d44:	10800104 	addi	r2,r2,4
   92d48:	1007883a 	mov	r3,r2
   92d4c:	00800204 	movi	r2,8
   92d50:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   92d54:	e0bffe17 	ldw	r2,-8(fp)
   92d58:	10800204 	addi	r2,r2,8
   92d5c:	1007883a 	mov	r3,r2
   92d60:	00bfffd4 	movui	r2,65535
   92d64:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   92d68:	e0bffe17 	ldw	r2,-8(fp)
   92d6c:	10800304 	addi	r2,r2,12
   92d70:	1007883a 	mov	r3,r2
   92d74:	00bfffd4 	movui	r2,65535
   92d78:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   92d7c:	e0bffe17 	ldw	r2,-8(fp)
   92d80:	10800104 	addi	r2,r2,4
   92d84:	1007883a 	mov	r3,r2
   92d88:	00800104 	movi	r2,4
   92d8c:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
   92d90:	e03fff15 	stw	zero,-4(fp)
   92d94:	e0bfff17 	ldw	r2,-4(fp)
}
   92d98:	e037883a 	mov	sp,fp
   92d9c:	df000017 	ldw	fp,0(sp)
   92da0:	dec00104 	addi	sp,sp,4
   92da4:	f800283a 	ret

00092da8 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   92da8:	defffb04 	addi	sp,sp,-20
   92dac:	df000415 	stw	fp,16(sp)
   92db0:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
   92db4:	00800274 	movhi	r2,9
   92db8:	109fc304 	addi	r2,r2,32524
   92dbc:	10800017 	ldw	r2,0(r2)
   92dc0:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
   92dc4:	00800274 	movhi	r2,9
   92dc8:	109fc404 	addi	r2,r2,32528
   92dcc:	10800017 	ldw	r2,0(r2)
   92dd0:	1004c03a 	cmpne	r2,r2,zero
   92dd4:	1000031e 	bne	r2,zero,92de4 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
   92dd8:	00bfffc4 	movi	r2,-1
   92ddc:	e0bfff15 	stw	r2,-4(fp)
   92de0:	00001306 	br	92e30 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   92de4:	e0bffe17 	ldw	r2,-8(fp)
   92de8:	10800404 	addi	r2,r2,16
   92dec:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   92df0:	e0bffe17 	ldw	r2,-8(fp)
   92df4:	10800404 	addi	r2,r2,16
   92df8:	10800037 	ldwio	r2,0(r2)
   92dfc:	10bfffcc 	andi	r2,r2,65535
   92e00:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   92e04:	e0bffe17 	ldw	r2,-8(fp)
   92e08:	10800504 	addi	r2,r2,20
   92e0c:	10800037 	ldwio	r2,0(r2)
   92e10:	10bfffcc 	andi	r2,r2,65535
   92e14:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   92e18:	e0bffc17 	ldw	r2,-16(fp)
   92e1c:	1006943a 	slli	r3,r2,16
   92e20:	e0bffd17 	ldw	r2,-12(fp)
   92e24:	1884b03a 	or	r2,r3,r2
   92e28:	0084303a 	nor	r2,zero,r2
   92e2c:	e0bfff15 	stw	r2,-4(fp)
   92e30:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
   92e34:	e037883a 	mov	sp,fp
   92e38:	df000017 	ldw	fp,0(sp)
   92e3c:	dec00104 	addi	sp,sp,4
   92e40:	f800283a 	ret

00092e44 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   92e44:	deffff04 	addi	sp,sp,-4
   92e48:	df000015 	stw	fp,0(sp)
   92e4c:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   92e50:	00800274 	movhi	r2,9
   92e54:	109fc404 	addi	r2,r2,32528
   92e58:	10800017 	ldw	r2,0(r2)
}
   92e5c:	e037883a 	mov	sp,fp
   92e60:	df000017 	ldw	fp,0(sp)
   92e64:	dec00104 	addi	sp,sp,4
   92e68:	f800283a 	ret

00092e6c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   92e6c:	defff404 	addi	sp,sp,-48
   92e70:	df000b15 	stw	fp,44(sp)
   92e74:	df000b04 	addi	fp,sp,44
   92e78:	e13ffb15 	stw	r4,-20(fp)
   92e7c:	e17ffc15 	stw	r5,-16(fp)
   92e80:	e1bffd15 	stw	r6,-12(fp)
   92e84:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   92e88:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   92e8c:	00800274 	movhi	r2,9
   92e90:	109fc604 	addi	r2,r2,32536
   92e94:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   92e98:	1005003a 	cmpeq	r2,r2,zero
   92e9c:	1000411e 	bne	r2,zero,92fa4 <alt_alarm_start+0x138>
  {
    if (alarm)
   92ea0:	e0bffb17 	ldw	r2,-20(fp)
   92ea4:	1005003a 	cmpeq	r2,r2,zero
   92ea8:	10003b1e 	bne	r2,zero,92f98 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   92eac:	e0fffb17 	ldw	r3,-20(fp)
   92eb0:	e0bffd17 	ldw	r2,-12(fp)
   92eb4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   92eb8:	e0fffb17 	ldw	r3,-20(fp)
   92ebc:	e0bffe17 	ldw	r2,-8(fp)
   92ec0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92ec4:	0005303a 	rdctl	r2,status
   92ec8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92ecc:	e0fff817 	ldw	r3,-32(fp)
   92ed0:	00bfff84 	movi	r2,-2
   92ed4:	1884703a 	and	r2,r3,r2
   92ed8:	1001703a 	wrctl	status,r2
  
  return context;
   92edc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   92ee0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   92ee4:	00800274 	movhi	r2,9
   92ee8:	109fc704 	addi	r2,r2,32540
   92eec:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   92ef0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   92ef4:	e0fffc17 	ldw	r3,-16(fp)
   92ef8:	e0bff917 	ldw	r2,-28(fp)
   92efc:	1885883a 	add	r2,r3,r2
   92f00:	10c00044 	addi	r3,r2,1
   92f04:	e0bffb17 	ldw	r2,-20(fp)
   92f08:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   92f0c:	e0bffb17 	ldw	r2,-20(fp)
   92f10:	10c00217 	ldw	r3,8(r2)
   92f14:	e0bff917 	ldw	r2,-28(fp)
   92f18:	1880042e 	bgeu	r3,r2,92f2c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   92f1c:	e0fffb17 	ldw	r3,-20(fp)
   92f20:	00800044 	movi	r2,1
   92f24:	18800405 	stb	r2,16(r3)
   92f28:	00000206 	br	92f34 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   92f2c:	e0bffb17 	ldw	r2,-20(fp)
   92f30:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   92f34:	e0fffb17 	ldw	r3,-20(fp)
   92f38:	00800274 	movhi	r2,9
   92f3c:	1098cc04 	addi	r2,r2,25392
   92f40:	e0bff615 	stw	r2,-40(fp)
   92f44:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   92f48:	e0fff717 	ldw	r3,-36(fp)
   92f4c:	e0bff617 	ldw	r2,-40(fp)
   92f50:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   92f54:	e0bff617 	ldw	r2,-40(fp)
   92f58:	10c00017 	ldw	r3,0(r2)
   92f5c:	e0bff717 	ldw	r2,-36(fp)
   92f60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   92f64:	e0bff617 	ldw	r2,-40(fp)
   92f68:	10c00017 	ldw	r3,0(r2)
   92f6c:	e0bff717 	ldw	r2,-36(fp)
   92f70:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   92f74:	e0fff617 	ldw	r3,-40(fp)
   92f78:	e0bff717 	ldw	r2,-36(fp)
   92f7c:	18800015 	stw	r2,0(r3)
   92f80:	e0bffa17 	ldw	r2,-24(fp)
   92f84:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92f88:	e0bff517 	ldw	r2,-44(fp)
   92f8c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   92f90:	e03fff15 	stw	zero,-4(fp)
   92f94:	00000506 	br	92fac <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   92f98:	00bffa84 	movi	r2,-22
   92f9c:	e0bfff15 	stw	r2,-4(fp)
   92fa0:	00000206 	br	92fac <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   92fa4:	00bfde84 	movi	r2,-134
   92fa8:	e0bfff15 	stw	r2,-4(fp)
   92fac:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   92fb0:	e037883a 	mov	sp,fp
   92fb4:	df000017 	ldw	fp,0(sp)
   92fb8:	dec00104 	addi	sp,sp,4
   92fbc:	f800283a 	ret

00092fc0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   92fc0:	defffa04 	addi	sp,sp,-24
   92fc4:	dfc00515 	stw	ra,20(sp)
   92fc8:	df000415 	stw	fp,16(sp)
   92fcc:	df000404 	addi	fp,sp,16
   92fd0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   92fd4:	00800244 	movi	r2,9
   92fd8:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   92fdc:	e13ffc17 	ldw	r4,-16(fp)
   92fe0:	014003f4 	movhi	r5,15
   92fe4:	29509004 	addi	r5,r5,16960
   92fe8:	0080ba00 	call	80ba0 <__mulsi3>
   92fec:	100b883a 	mov	r5,r2
   92ff0:	0100bef4 	movhi	r4,763
   92ff4:	213c2004 	addi	r4,r4,-3968
   92ff8:	0080b900 	call	80b90 <__udivsi3>
   92ffc:	100b883a 	mov	r5,r2
   93000:	01200034 	movhi	r4,32768
   93004:	213fffc4 	addi	r4,r4,-1
   93008:	0080b900 	call	80b90 <__udivsi3>
   9300c:	100b883a 	mov	r5,r2
   93010:	e13fff17 	ldw	r4,-4(fp)
   93014:	0080b900 	call	80b90 <__udivsi3>
   93018:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   9301c:	e0bffd17 	ldw	r2,-12(fp)
   93020:	1005003a 	cmpeq	r2,r2,zero
   93024:	10002a1e 	bne	r2,zero,930d0 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
   93028:	e03ffe15 	stw	zero,-8(fp)
   9302c:	00001706 	br	9308c <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   93030:	00a00034 	movhi	r2,32768
   93034:	10bfffc4 	addi	r2,r2,-1
   93038:	10bfffc4 	addi	r2,r2,-1
   9303c:	103ffe1e 	bne	r2,zero,93038 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   93040:	e13ffc17 	ldw	r4,-16(fp)
   93044:	014003f4 	movhi	r5,15
   93048:	29509004 	addi	r5,r5,16960
   9304c:	0080ba00 	call	80ba0 <__mulsi3>
   93050:	100b883a 	mov	r5,r2
   93054:	0100bef4 	movhi	r4,763
   93058:	213c2004 	addi	r4,r4,-3968
   9305c:	0080b900 	call	80b90 <__udivsi3>
   93060:	100b883a 	mov	r5,r2
   93064:	01200034 	movhi	r4,32768
   93068:	213fffc4 	addi	r4,r4,-1
   9306c:	0080b900 	call	80b90 <__udivsi3>
   93070:	1007883a 	mov	r3,r2
   93074:	e0bfff17 	ldw	r2,-4(fp)
   93078:	10c5c83a 	sub	r2,r2,r3
   9307c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   93080:	e0bffe17 	ldw	r2,-8(fp)
   93084:	10800044 	addi	r2,r2,1
   93088:	e0bffe15 	stw	r2,-8(fp)
   9308c:	e0fffe17 	ldw	r3,-8(fp)
   93090:	e0bffd17 	ldw	r2,-12(fp)
   93094:	18bfe616 	blt	r3,r2,93030 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   93098:	e13ffc17 	ldw	r4,-16(fp)
   9309c:	014003f4 	movhi	r5,15
   930a0:	29509004 	addi	r5,r5,16960
   930a4:	0080ba00 	call	80ba0 <__mulsi3>
   930a8:	100b883a 	mov	r5,r2
   930ac:	0100bef4 	movhi	r4,763
   930b0:	213c2004 	addi	r4,r4,-3968
   930b4:	0080b900 	call	80b90 <__udivsi3>
   930b8:	1009883a 	mov	r4,r2
   930bc:	e17fff17 	ldw	r5,-4(fp)
   930c0:	0080ba00 	call	80ba0 <__mulsi3>
   930c4:	10bfffc4 	addi	r2,r2,-1
   930c8:	103ffe1e 	bne	r2,zero,930c4 <alt_busy_sleep+0x104>
   930cc:	00000d06 	br	93104 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   930d0:	e13ffc17 	ldw	r4,-16(fp)
   930d4:	014003f4 	movhi	r5,15
   930d8:	29509004 	addi	r5,r5,16960
   930dc:	0080ba00 	call	80ba0 <__mulsi3>
   930e0:	100b883a 	mov	r5,r2
   930e4:	0100bef4 	movhi	r4,763
   930e8:	213c2004 	addi	r4,r4,-3968
   930ec:	0080b900 	call	80b90 <__udivsi3>
   930f0:	1009883a 	mov	r4,r2
   930f4:	e17fff17 	ldw	r5,-4(fp)
   930f8:	0080ba00 	call	80ba0 <__mulsi3>
   930fc:	10bfffc4 	addi	r2,r2,-1
   93100:	00bffe16 	blt	zero,r2,930fc <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   93104:	0005883a 	mov	r2,zero
}
   93108:	e037883a 	mov	sp,fp
   9310c:	dfc00117 	ldw	ra,4(sp)
   93110:	df000017 	ldw	fp,0(sp)
   93114:	dec00204 	addi	sp,sp,8
   93118:	f800283a 	ret

0009311c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   9311c:	deffff04 	addi	sp,sp,-4
   93120:	df000015 	stw	fp,0(sp)
   93124:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   93128:	e037883a 	mov	sp,fp
   9312c:	df000017 	ldw	fp,0(sp)
   93130:	dec00104 	addi	sp,sp,4
   93134:	f800283a 	ret

00093138 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   93138:	defff904 	addi	sp,sp,-28
   9313c:	dfc00615 	stw	ra,24(sp)
   93140:	df000515 	stw	fp,20(sp)
   93144:	df000504 	addi	fp,sp,20
   93148:	e13ffd15 	stw	r4,-12(fp)
   9314c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   93150:	e0bffd17 	ldw	r2,-12(fp)
   93154:	1005003a 	cmpeq	r2,r2,zero
   93158:	1000041e 	bne	r2,zero,9316c <alt_dev_llist_insert+0x34>
   9315c:	e0bffd17 	ldw	r2,-12(fp)
   93160:	10800217 	ldw	r2,8(r2)
   93164:	1004c03a 	cmpne	r2,r2,zero
   93168:	1000071e 	bne	r2,zero,93188 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   9316c:	00931ec0 	call	931ec <alt_get_errno>
   93170:	1007883a 	mov	r3,r2
   93174:	00800584 	movi	r2,22
   93178:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   9317c:	00bffa84 	movi	r2,-22
   93180:	e0bfff15 	stw	r2,-4(fp)
   93184:	00001306 	br	931d4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   93188:	e0fffd17 	ldw	r3,-12(fp)
   9318c:	e0bffe17 	ldw	r2,-8(fp)
   93190:	e0bffb15 	stw	r2,-20(fp)
   93194:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   93198:	e0fffc17 	ldw	r3,-16(fp)
   9319c:	e0bffb17 	ldw	r2,-20(fp)
   931a0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   931a4:	e0bffb17 	ldw	r2,-20(fp)
   931a8:	10c00017 	ldw	r3,0(r2)
   931ac:	e0bffc17 	ldw	r2,-16(fp)
   931b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   931b4:	e0bffb17 	ldw	r2,-20(fp)
   931b8:	10c00017 	ldw	r3,0(r2)
   931bc:	e0bffc17 	ldw	r2,-16(fp)
   931c0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   931c4:	e0fffb17 	ldw	r3,-20(fp)
   931c8:	e0bffc17 	ldw	r2,-16(fp)
   931cc:	18800015 	stw	r2,0(r3)

  return 0;  
   931d0:	e03fff15 	stw	zero,-4(fp)
   931d4:	e0bfff17 	ldw	r2,-4(fp)
}
   931d8:	e037883a 	mov	sp,fp
   931dc:	dfc00117 	ldw	ra,4(sp)
   931e0:	df000017 	ldw	fp,0(sp)
   931e4:	dec00204 	addi	sp,sp,8
   931e8:	f800283a 	ret

000931ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   931ec:	defffd04 	addi	sp,sp,-12
   931f0:	dfc00215 	stw	ra,8(sp)
   931f4:	df000115 	stw	fp,4(sp)
   931f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   931fc:	00800274 	movhi	r2,9
   93200:	1098c804 	addi	r2,r2,25376
   93204:	10800017 	ldw	r2,0(r2)
   93208:	1005003a 	cmpeq	r2,r2,zero
   9320c:	1000061e 	bne	r2,zero,93228 <alt_get_errno+0x3c>
   93210:	00800274 	movhi	r2,9
   93214:	1098c804 	addi	r2,r2,25376
   93218:	10800017 	ldw	r2,0(r2)
   9321c:	103ee83a 	callr	r2
   93220:	e0bfff15 	stw	r2,-4(fp)
   93224:	00000306 	br	93234 <alt_get_errno+0x48>
   93228:	00800274 	movhi	r2,9
   9322c:	109fb904 	addi	r2,r2,32484
   93230:	e0bfff15 	stw	r2,-4(fp)
   93234:	e0bfff17 	ldw	r2,-4(fp)
}
   93238:	e037883a 	mov	sp,fp
   9323c:	dfc00117 	ldw	ra,4(sp)
   93240:	df000017 	ldw	fp,0(sp)
   93244:	dec00204 	addi	sp,sp,8
   93248:	f800283a 	ret

0009324c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   9324c:	defffd04 	addi	sp,sp,-12
   93250:	dfc00215 	stw	ra,8(sp)
   93254:	df000115 	stw	fp,4(sp)
   93258:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   9325c:	00bfff04 	movi	r2,-4
   93260:	00c00274 	movhi	r3,9
   93264:	18cfe804 	addi	r3,r3,16288
   93268:	1885883a 	add	r2,r3,r2
   9326c:	e0bfff15 	stw	r2,-4(fp)
   93270:	00000606 	br	9328c <_do_ctors+0x40>
        (*ctor) (); 
   93274:	e0bfff17 	ldw	r2,-4(fp)
   93278:	10800017 	ldw	r2,0(r2)
   9327c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   93280:	e0bfff17 	ldw	r2,-4(fp)
   93284:	10bfff04 	addi	r2,r2,-4
   93288:	e0bfff15 	stw	r2,-4(fp)
   9328c:	e0ffff17 	ldw	r3,-4(fp)
   93290:	00800274 	movhi	r2,9
   93294:	108fe704 	addi	r2,r2,16284
   93298:	18bff62e 	bgeu	r3,r2,93274 <_do_ctors+0x28>
        (*ctor) (); 
}
   9329c:	e037883a 	mov	sp,fp
   932a0:	dfc00117 	ldw	ra,4(sp)
   932a4:	df000017 	ldw	fp,0(sp)
   932a8:	dec00204 	addi	sp,sp,8
   932ac:	f800283a 	ret

000932b0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   932b0:	defffd04 	addi	sp,sp,-12
   932b4:	dfc00215 	stw	ra,8(sp)
   932b8:	df000115 	stw	fp,4(sp)
   932bc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   932c0:	00bfff04 	movi	r2,-4
   932c4:	00c00274 	movhi	r3,9
   932c8:	18cfe804 	addi	r3,r3,16288
   932cc:	1885883a 	add	r2,r3,r2
   932d0:	e0bfff15 	stw	r2,-4(fp)
   932d4:	00000606 	br	932f0 <_do_dtors+0x40>
        (*dtor) (); 
   932d8:	e0bfff17 	ldw	r2,-4(fp)
   932dc:	10800017 	ldw	r2,0(r2)
   932e0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   932e4:	e0bfff17 	ldw	r2,-4(fp)
   932e8:	10bfff04 	addi	r2,r2,-4
   932ec:	e0bfff15 	stw	r2,-4(fp)
   932f0:	e0ffff17 	ldw	r3,-4(fp)
   932f4:	00800274 	movhi	r2,9
   932f8:	108fe804 	addi	r2,r2,16288
   932fc:	18bff62e 	bgeu	r3,r2,932d8 <_do_dtors+0x28>
        (*dtor) (); 
}
   93300:	e037883a 	mov	sp,fp
   93304:	dfc00117 	ldw	ra,4(sp)
   93308:	df000017 	ldw	fp,0(sp)
   9330c:	dec00204 	addi	sp,sp,8
   93310:	f800283a 	ret

00093314 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   93314:	defff904 	addi	sp,sp,-28
   93318:	dfc00615 	stw	ra,24(sp)
   9331c:	df000515 	stw	fp,20(sp)
   93320:	df000504 	addi	fp,sp,20
   93324:	e13ffd15 	stw	r4,-12(fp)
   93328:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   9332c:	e0bffe17 	ldw	r2,-8(fp)
   93330:	10800017 	ldw	r2,0(r2)
   93334:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   93338:	e13ffd17 	ldw	r4,-12(fp)
   9333c:	0082f780 	call	82f78 <strlen>
   93340:	10800044 	addi	r2,r2,1
   93344:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   93348:	00000d06 	br	93380 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   9334c:	e0bffc17 	ldw	r2,-16(fp)
   93350:	11000217 	ldw	r4,8(r2)
   93354:	e1bffb17 	ldw	r6,-20(fp)
   93358:	e17ffd17 	ldw	r5,-12(fp)
   9335c:	0093be00 	call	93be0 <memcmp>
   93360:	1004c03a 	cmpne	r2,r2,zero
   93364:	1000031e 	bne	r2,zero,93374 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   93368:	e0bffc17 	ldw	r2,-16(fp)
   9336c:	e0bfff15 	stw	r2,-4(fp)
   93370:	00000706 	br	93390 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   93374:	e0bffc17 	ldw	r2,-16(fp)
   93378:	10800017 	ldw	r2,0(r2)
   9337c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   93380:	e0fffe17 	ldw	r3,-8(fp)
   93384:	e0bffc17 	ldw	r2,-16(fp)
   93388:	10fff01e 	bne	r2,r3,9334c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   9338c:	e03fff15 	stw	zero,-4(fp)
   93390:	e0bfff17 	ldw	r2,-4(fp)
}
   93394:	e037883a 	mov	sp,fp
   93398:	dfc00117 	ldw	ra,4(sp)
   9339c:	df000017 	ldw	fp,0(sp)
   933a0:	dec00204 	addi	sp,sp,8
   933a4:	f800283a 	ret

000933a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   933a8:	defffa04 	addi	sp,sp,-24
   933ac:	dfc00515 	stw	ra,20(sp)
   933b0:	df000415 	stw	fp,16(sp)
   933b4:	df000404 	addi	fp,sp,16
   933b8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   933bc:	00800274 	movhi	r2,9
   933c0:	1098c304 	addi	r2,r2,25356
   933c4:	10800017 	ldw	r2,0(r2)
   933c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   933cc:	00003306 	br	9349c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   933d0:	e0bffd17 	ldw	r2,-12(fp)
   933d4:	11000217 	ldw	r4,8(r2)
   933d8:	0082f780 	call	82f78 <strlen>
   933dc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   933e0:	e0bffd17 	ldw	r2,-12(fp)
   933e4:	10c00217 	ldw	r3,8(r2)
   933e8:	e0bffc17 	ldw	r2,-16(fp)
   933ec:	1885883a 	add	r2,r3,r2
   933f0:	10bfffc4 	addi	r2,r2,-1
   933f4:	10800003 	ldbu	r2,0(r2)
   933f8:	10803fcc 	andi	r2,r2,255
   933fc:	1080201c 	xori	r2,r2,128
   93400:	10bfe004 	addi	r2,r2,-128
   93404:	10800bd8 	cmpnei	r2,r2,47
   93408:	1000031e 	bne	r2,zero,93418 <alt_find_file+0x70>
    {
      len -= 1;
   9340c:	e0bffc17 	ldw	r2,-16(fp)
   93410:	10bfffc4 	addi	r2,r2,-1
   93414:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   93418:	e0bffc17 	ldw	r2,-16(fp)
   9341c:	1007883a 	mov	r3,r2
   93420:	e0bffe17 	ldw	r2,-8(fp)
   93424:	1885883a 	add	r2,r3,r2
   93428:	10800003 	ldbu	r2,0(r2)
   9342c:	10803fcc 	andi	r2,r2,255
   93430:	1080201c 	xori	r2,r2,128
   93434:	10bfe004 	addi	r2,r2,-128
   93438:	10800be0 	cmpeqi	r2,r2,47
   9343c:	10000a1e 	bne	r2,zero,93468 <alt_find_file+0xc0>
   93440:	e0bffc17 	ldw	r2,-16(fp)
   93444:	1007883a 	mov	r3,r2
   93448:	e0bffe17 	ldw	r2,-8(fp)
   9344c:	1885883a 	add	r2,r3,r2
   93450:	10800003 	ldbu	r2,0(r2)
   93454:	10803fcc 	andi	r2,r2,255
   93458:	1080201c 	xori	r2,r2,128
   9345c:	10bfe004 	addi	r2,r2,-128
   93460:	1004c03a 	cmpne	r2,r2,zero
   93464:	10000a1e 	bne	r2,zero,93490 <alt_find_file+0xe8>
   93468:	e0bffd17 	ldw	r2,-12(fp)
   9346c:	11000217 	ldw	r4,8(r2)
   93470:	e1bffc17 	ldw	r6,-16(fp)
   93474:	e17ffe17 	ldw	r5,-8(fp)
   93478:	0093be00 	call	93be0 <memcmp>
   9347c:	1004c03a 	cmpne	r2,r2,zero
   93480:	1000031e 	bne	r2,zero,93490 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   93484:	e0bffd17 	ldw	r2,-12(fp)
   93488:	e0bfff15 	stw	r2,-4(fp)
   9348c:	00000806 	br	934b0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   93490:	e0bffd17 	ldw	r2,-12(fp)
   93494:	10800017 	ldw	r2,0(r2)
   93498:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   9349c:	00c00274 	movhi	r3,9
   934a0:	18d8c304 	addi	r3,r3,25356
   934a4:	e0bffd17 	ldw	r2,-12(fp)
   934a8:	10ffc91e 	bne	r2,r3,933d0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   934ac:	e03fff15 	stw	zero,-4(fp)
   934b0:	e0bfff17 	ldw	r2,-4(fp)
}
   934b4:	e037883a 	mov	sp,fp
   934b8:	dfc00117 	ldw	ra,4(sp)
   934bc:	df000017 	ldw	fp,0(sp)
   934c0:	dec00204 	addi	sp,sp,8
   934c4:	f800283a 	ret

000934c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   934c8:	defffa04 	addi	sp,sp,-24
   934cc:	dfc00515 	stw	ra,20(sp)
   934d0:	df000415 	stw	fp,16(sp)
   934d4:	dc000315 	stw	r16,12(sp)
   934d8:	df000304 	addi	fp,sp,12
   934dc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   934e0:	00bffa04 	movi	r2,-24
   934e4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   934e8:	e03ffe15 	stw	zero,-8(fp)
   934ec:	00002006 	br	93570 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   934f0:	e13ffe17 	ldw	r4,-8(fp)
   934f4:	04000274 	movhi	r16,9
   934f8:	8413fc04 	addi	r16,r16,20464
   934fc:	01400304 	movi	r5,12
   93500:	0080ba00 	call	80ba0 <__mulsi3>
   93504:	1405883a 	add	r2,r2,r16
   93508:	10800017 	ldw	r2,0(r2)
   9350c:	1004c03a 	cmpne	r2,r2,zero
   93510:	1000141e 	bne	r2,zero,93564 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   93514:	e13ffe17 	ldw	r4,-8(fp)
   93518:	04000274 	movhi	r16,9
   9351c:	8413fc04 	addi	r16,r16,20464
   93520:	01400304 	movi	r5,12
   93524:	0080ba00 	call	80ba0 <__mulsi3>
   93528:	1407883a 	add	r3,r2,r16
   9352c:	e0bfff17 	ldw	r2,-4(fp)
   93530:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   93534:	00800274 	movhi	r2,9
   93538:	1098c704 	addi	r2,r2,25372
   9353c:	10c00017 	ldw	r3,0(r2)
   93540:	e0bffe17 	ldw	r2,-8(fp)
   93544:	1880040e 	bge	r3,r2,93558 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   93548:	00c00274 	movhi	r3,9
   9354c:	18d8c704 	addi	r3,r3,25372
   93550:	e0bffe17 	ldw	r2,-8(fp)
   93554:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   93558:	e0bffe17 	ldw	r2,-8(fp)
   9355c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   93560:	00000606 	br	9357c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   93564:	e0bffe17 	ldw	r2,-8(fp)
   93568:	10800044 	addi	r2,r2,1
   9356c:	e0bffe15 	stw	r2,-8(fp)
   93570:	e0bffe17 	ldw	r2,-8(fp)
   93574:	10800810 	cmplti	r2,r2,32
   93578:	103fdd1e 	bne	r2,zero,934f0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   9357c:	e0bffd17 	ldw	r2,-12(fp)
}
   93580:	e037883a 	mov	sp,fp
   93584:	dfc00217 	ldw	ra,8(sp)
   93588:	df000117 	ldw	fp,4(sp)
   9358c:	dc000017 	ldw	r16,0(sp)
   93590:	dec00304 	addi	sp,sp,12
   93594:	f800283a 	ret

00093598 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   93598:	deffff04 	addi	sp,sp,-4
   9359c:	df000015 	stw	fp,0(sp)
   935a0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   935a4:	e037883a 	mov	sp,fp
   935a8:	df000017 	ldw	fp,0(sp)
   935ac:	dec00104 	addi	sp,sp,4
   935b0:	f800283a 	ret

000935b4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   935b4:	defff904 	addi	sp,sp,-28
   935b8:	dfc00615 	stw	ra,24(sp)
   935bc:	df000515 	stw	fp,20(sp)
   935c0:	df000504 	addi	fp,sp,20
   935c4:	e13ffc15 	stw	r4,-16(fp)
   935c8:	e17ffd15 	stw	r5,-12(fp)
   935cc:	e1bffe15 	stw	r6,-8(fp)
   935d0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   935d4:	e0800217 	ldw	r2,8(fp)
   935d8:	d8800015 	stw	r2,0(sp)
   935dc:	e13ffc17 	ldw	r4,-16(fp)
   935e0:	e17ffd17 	ldw	r5,-12(fp)
   935e4:	e1bffe17 	ldw	r6,-8(fp)
   935e8:	e1ffff17 	ldw	r7,-4(fp)
   935ec:	00937880 	call	93788 <alt_iic_isr_register>
}  
   935f0:	e037883a 	mov	sp,fp
   935f4:	dfc00117 	ldw	ra,4(sp)
   935f8:	df000017 	ldw	fp,0(sp)
   935fc:	dec00204 	addi	sp,sp,8
   93600:	f800283a 	ret

00093604 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   93604:	defff904 	addi	sp,sp,-28
   93608:	df000615 	stw	fp,24(sp)
   9360c:	df000604 	addi	fp,sp,24
   93610:	e13ffe15 	stw	r4,-8(fp)
   93614:	e17fff15 	stw	r5,-4(fp)
   93618:	e0bfff17 	ldw	r2,-4(fp)
   9361c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93620:	0005303a 	rdctl	r2,status
   93624:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93628:	e0fffb17 	ldw	r3,-20(fp)
   9362c:	00bfff84 	movi	r2,-2
   93630:	1884703a 	and	r2,r3,r2
   93634:	1001703a 	wrctl	status,r2
  
  return context;
   93638:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   9363c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   93640:	e0fffc17 	ldw	r3,-16(fp)
   93644:	00800044 	movi	r2,1
   93648:	10c4983a 	sll	r2,r2,r3
   9364c:	1007883a 	mov	r3,r2
   93650:	00800274 	movhi	r2,9
   93654:	109fc504 	addi	r2,r2,32532
   93658:	10800017 	ldw	r2,0(r2)
   9365c:	1886b03a 	or	r3,r3,r2
   93660:	00800274 	movhi	r2,9
   93664:	109fc504 	addi	r2,r2,32532
   93668:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   9366c:	00800274 	movhi	r2,9
   93670:	109fc504 	addi	r2,r2,32532
   93674:	10800017 	ldw	r2,0(r2)
   93678:	100170fa 	wrctl	ienable,r2
   9367c:	e0bffd17 	ldw	r2,-12(fp)
   93680:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93684:	e0bffa17 	ldw	r2,-24(fp)
   93688:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   9368c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   93690:	e037883a 	mov	sp,fp
   93694:	df000017 	ldw	fp,0(sp)
   93698:	dec00104 	addi	sp,sp,4
   9369c:	f800283a 	ret

000936a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   936a0:	defff904 	addi	sp,sp,-28
   936a4:	df000615 	stw	fp,24(sp)
   936a8:	df000604 	addi	fp,sp,24
   936ac:	e13ffe15 	stw	r4,-8(fp)
   936b0:	e17fff15 	stw	r5,-4(fp)
   936b4:	e0bfff17 	ldw	r2,-4(fp)
   936b8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   936bc:	0005303a 	rdctl	r2,status
   936c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   936c4:	e0fffb17 	ldw	r3,-20(fp)
   936c8:	00bfff84 	movi	r2,-2
   936cc:	1884703a 	and	r2,r3,r2
   936d0:	1001703a 	wrctl	status,r2
  
  return context;
   936d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   936d8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   936dc:	e0fffc17 	ldw	r3,-16(fp)
   936e0:	00800044 	movi	r2,1
   936e4:	10c4983a 	sll	r2,r2,r3
   936e8:	0084303a 	nor	r2,zero,r2
   936ec:	1007883a 	mov	r3,r2
   936f0:	00800274 	movhi	r2,9
   936f4:	109fc504 	addi	r2,r2,32532
   936f8:	10800017 	ldw	r2,0(r2)
   936fc:	1886703a 	and	r3,r3,r2
   93700:	00800274 	movhi	r2,9
   93704:	109fc504 	addi	r2,r2,32532
   93708:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   9370c:	00800274 	movhi	r2,9
   93710:	109fc504 	addi	r2,r2,32532
   93714:	10800017 	ldw	r2,0(r2)
   93718:	100170fa 	wrctl	ienable,r2
   9371c:	e0bffd17 	ldw	r2,-12(fp)
   93720:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93724:	e0bffa17 	ldw	r2,-24(fp)
   93728:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   9372c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   93730:	e037883a 	mov	sp,fp
   93734:	df000017 	ldw	fp,0(sp)
   93738:	dec00104 	addi	sp,sp,4
   9373c:	f800283a 	ret

00093740 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   93740:	defffc04 	addi	sp,sp,-16
   93744:	df000315 	stw	fp,12(sp)
   93748:	df000304 	addi	fp,sp,12
   9374c:	e13ffe15 	stw	r4,-8(fp)
   93750:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   93754:	000530fa 	rdctl	r2,ienable
   93758:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   9375c:	e0ffff17 	ldw	r3,-4(fp)
   93760:	00800044 	movi	r2,1
   93764:	10c4983a 	sll	r2,r2,r3
   93768:	1007883a 	mov	r3,r2
   9376c:	e0bffd17 	ldw	r2,-12(fp)
   93770:	1884703a 	and	r2,r3,r2
   93774:	1004c03a 	cmpne	r2,r2,zero
}
   93778:	e037883a 	mov	sp,fp
   9377c:	df000017 	ldw	fp,0(sp)
   93780:	dec00104 	addi	sp,sp,4
   93784:	f800283a 	ret

00093788 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   93788:	defff404 	addi	sp,sp,-48
   9378c:	dfc00b15 	stw	ra,44(sp)
   93790:	df000a15 	stw	fp,40(sp)
   93794:	df000a04 	addi	fp,sp,40
   93798:	e13ffb15 	stw	r4,-20(fp)
   9379c:	e17ffc15 	stw	r5,-16(fp)
   937a0:	e1bffd15 	stw	r6,-12(fp)
   937a4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   937a8:	00bffa84 	movi	r2,-22
   937ac:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   937b0:	e0bffc17 	ldw	r2,-16(fp)
   937b4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   937b8:	e0bff917 	ldw	r2,-28(fp)
   937bc:	10800808 	cmpgei	r2,r2,32
   937c0:	1000291e 	bne	r2,zero,93868 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   937c4:	0005303a 	rdctl	r2,status
   937c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   937cc:	e0fff717 	ldw	r3,-36(fp)
   937d0:	00bfff84 	movi	r2,-2
   937d4:	1884703a 	and	r2,r3,r2
   937d8:	1001703a 	wrctl	status,r2
  
  return context;
   937dc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   937e0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   937e4:	e0bff917 	ldw	r2,-28(fp)
   937e8:	00c002b4 	movhi	r3,10
   937ec:	18e01204 	addi	r3,r3,-32696
   937f0:	100490fa 	slli	r2,r2,3
   937f4:	10c7883a 	add	r3,r2,r3
   937f8:	e0bffd17 	ldw	r2,-12(fp)
   937fc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   93800:	e0bff917 	ldw	r2,-28(fp)
   93804:	00c002b4 	movhi	r3,10
   93808:	18e01204 	addi	r3,r3,-32696
   9380c:	100490fa 	slli	r2,r2,3
   93810:	10c5883a 	add	r2,r2,r3
   93814:	10c00104 	addi	r3,r2,4
   93818:	e0bffe17 	ldw	r2,-8(fp)
   9381c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   93820:	e0bffd17 	ldw	r2,-12(fp)
   93824:	1005003a 	cmpeq	r2,r2,zero
   93828:	1000051e 	bne	r2,zero,93840 <alt_iic_isr_register+0xb8>
   9382c:	e17ff917 	ldw	r5,-28(fp)
   93830:	e13ffb17 	ldw	r4,-20(fp)
   93834:	00936040 	call	93604 <alt_ic_irq_enable>
   93838:	e0bfff15 	stw	r2,-4(fp)
   9383c:	00000406 	br	93850 <alt_iic_isr_register+0xc8>
   93840:	e17ff917 	ldw	r5,-28(fp)
   93844:	e13ffb17 	ldw	r4,-20(fp)
   93848:	00936a00 	call	936a0 <alt_ic_irq_disable>
   9384c:	e0bfff15 	stw	r2,-4(fp)
   93850:	e0bfff17 	ldw	r2,-4(fp)
   93854:	e0bffa15 	stw	r2,-24(fp)
   93858:	e0bff817 	ldw	r2,-32(fp)
   9385c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93860:	e0bff617 	ldw	r2,-40(fp)
   93864:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   93868:	e0bffa17 	ldw	r2,-24(fp)
}
   9386c:	e037883a 	mov	sp,fp
   93870:	dfc00117 	ldw	ra,4(sp)
   93874:	df000017 	ldw	fp,0(sp)
   93878:	dec00204 	addi	sp,sp,8
   9387c:	f800283a 	ret

00093880 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   93880:	defff804 	addi	sp,sp,-32
   93884:	dfc00715 	stw	ra,28(sp)
   93888:	df000615 	stw	fp,24(sp)
   9388c:	dc000515 	stw	r16,20(sp)
   93890:	df000504 	addi	fp,sp,20
   93894:	e13ffc15 	stw	r4,-16(fp)
   93898:	e17ffd15 	stw	r5,-12(fp)
   9389c:	e1bffe15 	stw	r6,-8(fp)
   938a0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   938a4:	e13ffd17 	ldw	r4,-12(fp)
   938a8:	e17ffe17 	ldw	r5,-8(fp)
   938ac:	e1bfff17 	ldw	r6,-4(fp)
   938b0:	0090a200 	call	90a20 <open>
   938b4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   938b8:	e0bffb17 	ldw	r2,-20(fp)
   938bc:	1004803a 	cmplt	r2,r2,zero
   938c0:	10001f1e 	bne	r2,zero,93940 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   938c4:	e13ffb17 	ldw	r4,-20(fp)
   938c8:	04000274 	movhi	r16,9
   938cc:	8413fc04 	addi	r16,r16,20464
   938d0:	01400304 	movi	r5,12
   938d4:	0080ba00 	call	80ba0 <__mulsi3>
   938d8:	1405883a 	add	r2,r2,r16
   938dc:	10c00017 	ldw	r3,0(r2)
   938e0:	e0bffc17 	ldw	r2,-16(fp)
   938e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   938e8:	e13ffb17 	ldw	r4,-20(fp)
   938ec:	04000274 	movhi	r16,9
   938f0:	8413fc04 	addi	r16,r16,20464
   938f4:	01400304 	movi	r5,12
   938f8:	0080ba00 	call	80ba0 <__mulsi3>
   938fc:	1405883a 	add	r2,r2,r16
   93900:	10800104 	addi	r2,r2,4
   93904:	10c00017 	ldw	r3,0(r2)
   93908:	e0bffc17 	ldw	r2,-16(fp)
   9390c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   93910:	e13ffb17 	ldw	r4,-20(fp)
   93914:	04000274 	movhi	r16,9
   93918:	8413fc04 	addi	r16,r16,20464
   9391c:	01400304 	movi	r5,12
   93920:	0080ba00 	call	80ba0 <__mulsi3>
   93924:	1405883a 	add	r2,r2,r16
   93928:	10800204 	addi	r2,r2,8
   9392c:	10c00017 	ldw	r3,0(r2)
   93930:	e0bffc17 	ldw	r2,-16(fp)
   93934:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   93938:	e13ffb17 	ldw	r4,-20(fp)
   9393c:	0090d900 	call	90d90 <alt_release_fd>
  }
} 
   93940:	e037883a 	mov	sp,fp
   93944:	dfc00217 	ldw	ra,8(sp)
   93948:	df000117 	ldw	fp,4(sp)
   9394c:	dc000017 	ldw	r16,0(sp)
   93950:	dec00304 	addi	sp,sp,12
   93954:	f800283a 	ret

00093958 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   93958:	defffb04 	addi	sp,sp,-20
   9395c:	dfc00415 	stw	ra,16(sp)
   93960:	df000315 	stw	fp,12(sp)
   93964:	df000304 	addi	fp,sp,12
   93968:	e13ffd15 	stw	r4,-12(fp)
   9396c:	e17ffe15 	stw	r5,-8(fp)
   93970:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   93974:	01000274 	movhi	r4,9
   93978:	2113ff04 	addi	r4,r4,20476
   9397c:	e17ffd17 	ldw	r5,-12(fp)
   93980:	01800044 	movi	r6,1
   93984:	01c07fc4 	movi	r7,511
   93988:	00938800 	call	93880 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   9398c:	01000274 	movhi	r4,9
   93990:	2113fc04 	addi	r4,r4,20464
   93994:	e17ffe17 	ldw	r5,-8(fp)
   93998:	000d883a 	mov	r6,zero
   9399c:	01c07fc4 	movi	r7,511
   939a0:	00938800 	call	93880 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   939a4:	01000274 	movhi	r4,9
   939a8:	21140204 	addi	r4,r4,20488
   939ac:	e17fff17 	ldw	r5,-4(fp)
   939b0:	01800044 	movi	r6,1
   939b4:	01c07fc4 	movi	r7,511
   939b8:	00938800 	call	93880 <alt_open_fd>
}  
   939bc:	e037883a 	mov	sp,fp
   939c0:	dfc00117 	ldw	ra,4(sp)
   939c4:	df000017 	ldw	fp,0(sp)
   939c8:	dec00204 	addi	sp,sp,8
   939cc:	f800283a 	ret

000939d0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   939d0:	defffa04 	addi	sp,sp,-24
   939d4:	df000515 	stw	fp,20(sp)
   939d8:	df000504 	addi	fp,sp,20
   939dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   939e0:	0005303a 	rdctl	r2,status
   939e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   939e8:	e0fffd17 	ldw	r3,-12(fp)
   939ec:	00bfff84 	movi	r2,-2
   939f0:	1884703a 	and	r2,r3,r2
   939f4:	1001703a 	wrctl	status,r2
  
  return context;
   939f8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   939fc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   93a00:	e0bfff17 	ldw	r2,-4(fp)
   93a04:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   93a08:	e0bffc17 	ldw	r2,-16(fp)
   93a0c:	10c00017 	ldw	r3,0(r2)
   93a10:	e0bffc17 	ldw	r2,-16(fp)
   93a14:	10800117 	ldw	r2,4(r2)
   93a18:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   93a1c:	e0bffc17 	ldw	r2,-16(fp)
   93a20:	10c00117 	ldw	r3,4(r2)
   93a24:	e0bffc17 	ldw	r2,-16(fp)
   93a28:	10800017 	ldw	r2,0(r2)
   93a2c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   93a30:	e0fffc17 	ldw	r3,-16(fp)
   93a34:	e0bffc17 	ldw	r2,-16(fp)
   93a38:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   93a3c:	e0fffc17 	ldw	r3,-16(fp)
   93a40:	e0bffc17 	ldw	r2,-16(fp)
   93a44:	18800015 	stw	r2,0(r3)
   93a48:	e0bffe17 	ldw	r2,-8(fp)
   93a4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93a50:	e0bffb17 	ldw	r2,-20(fp)
   93a54:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   93a58:	e037883a 	mov	sp,fp
   93a5c:	df000017 	ldw	fp,0(sp)
   93a60:	dec00104 	addi	sp,sp,4
   93a64:	f800283a 	ret

00093a68 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   93a68:	defffb04 	addi	sp,sp,-20
   93a6c:	dfc00415 	stw	ra,16(sp)
   93a70:	df000315 	stw	fp,12(sp)
   93a74:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   93a78:	d0a01017 	ldw	r2,-32704(gp)
   93a7c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   93a80:	d0a70b17 	ldw	r2,-25556(gp)
   93a84:	10800044 	addi	r2,r2,1
   93a88:	d0a70b15 	stw	r2,-25556(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   93a8c:	00003106 	br	93b54 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   93a90:	e0bffe17 	ldw	r2,-8(fp)
   93a94:	10800017 	ldw	r2,0(r2)
   93a98:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   93a9c:	e0bffe17 	ldw	r2,-8(fp)
   93aa0:	10800403 	ldbu	r2,16(r2)
   93aa4:	10803fcc 	andi	r2,r2,255
   93aa8:	1005003a 	cmpeq	r2,r2,zero
   93aac:	1000051e 	bne	r2,zero,93ac4 <alt_tick+0x5c>
   93ab0:	d0a70b17 	ldw	r2,-25556(gp)
   93ab4:	1004c03a 	cmpne	r2,r2,zero
   93ab8:	1000021e 	bne	r2,zero,93ac4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   93abc:	e0bffe17 	ldw	r2,-8(fp)
   93ac0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   93ac4:	e0bffe17 	ldw	r2,-8(fp)
   93ac8:	10c00217 	ldw	r3,8(r2)
   93acc:	d0a70b17 	ldw	r2,-25556(gp)
   93ad0:	10c01e36 	bltu	r2,r3,93b4c <alt_tick+0xe4>
   93ad4:	e0bffe17 	ldw	r2,-8(fp)
   93ad8:	10800403 	ldbu	r2,16(r2)
   93adc:	10803fcc 	andi	r2,r2,255
   93ae0:	1004c03a 	cmpne	r2,r2,zero
   93ae4:	1000191e 	bne	r2,zero,93b4c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   93ae8:	e0bffe17 	ldw	r2,-8(fp)
   93aec:	10c00317 	ldw	r3,12(r2)
   93af0:	e0bffe17 	ldw	r2,-8(fp)
   93af4:	11000517 	ldw	r4,20(r2)
   93af8:	183ee83a 	callr	r3
   93afc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   93b00:	e0bffd17 	ldw	r2,-12(fp)
   93b04:	1004c03a 	cmpne	r2,r2,zero
   93b08:	1000031e 	bne	r2,zero,93b18 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   93b0c:	e13ffe17 	ldw	r4,-8(fp)
   93b10:	00939d00 	call	939d0 <alt_alarm_stop>
   93b14:	00000d06 	br	93b4c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   93b18:	e0bffe17 	ldw	r2,-8(fp)
   93b1c:	10c00217 	ldw	r3,8(r2)
   93b20:	e0bffd17 	ldw	r2,-12(fp)
   93b24:	1887883a 	add	r3,r3,r2
   93b28:	e0bffe17 	ldw	r2,-8(fp)
   93b2c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   93b30:	e0bffe17 	ldw	r2,-8(fp)
   93b34:	10c00217 	ldw	r3,8(r2)
   93b38:	d0a70b17 	ldw	r2,-25556(gp)
   93b3c:	1880032e 	bgeu	r3,r2,93b4c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   93b40:	e0fffe17 	ldw	r3,-8(fp)
   93b44:	00800044 	movi	r2,1
   93b48:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   93b4c:	e0bfff17 	ldw	r2,-4(fp)
   93b50:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   93b54:	d0e01004 	addi	r3,gp,-32704
   93b58:	e0bffe17 	ldw	r2,-8(fp)
   93b5c:	10ffcc1e 	bne	r2,r3,93a90 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   93b60:	e037883a 	mov	sp,fp
   93b64:	dfc00117 	ldw	ra,4(sp)
   93b68:	df000017 	ldw	fp,0(sp)
   93b6c:	dec00204 	addi	sp,sp,8
   93b70:	f800283a 	ret

00093b74 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
   93b74:	deffff04 	addi	sp,sp,-4
   93b78:	df000015 	stw	fp,0(sp)
   93b7c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   93b80:	000170fa 	wrctl	ienable,zero
}
   93b84:	e037883a 	mov	sp,fp
   93b88:	df000017 	ldw	fp,0(sp)
   93b8c:	dec00104 	addi	sp,sp,4
   93b90:	f800283a 	ret

00093b94 <atexit>:
   93b94:	200b883a 	mov	r5,r4
   93b98:	000d883a 	mov	r6,zero
   93b9c:	0009883a 	mov	r4,zero
   93ba0:	000f883a 	mov	r7,zero
   93ba4:	0093c541 	jmpi	93c54 <__register_exitproc>

00093ba8 <exit>:
   93ba8:	defffe04 	addi	sp,sp,-8
   93bac:	000b883a 	mov	r5,zero
   93bb0:	dc000015 	stw	r16,0(sp)
   93bb4:	dfc00115 	stw	ra,4(sp)
   93bb8:	2021883a 	mov	r16,r4
   93bbc:	0093d8c0 	call	93d8c <__call_exitprocs>
   93bc0:	00800274 	movhi	r2,9
   93bc4:	1098bd04 	addi	r2,r2,25332
   93bc8:	11000017 	ldw	r4,0(r2)
   93bcc:	20800f17 	ldw	r2,60(r4)
   93bd0:	10000126 	beq	r2,zero,93bd8 <exit+0x30>
   93bd4:	103ee83a 	callr	r2
   93bd8:	8009883a 	mov	r4,r16
   93bdc:	0093f7c0 	call	93f7c <_exit>

00093be0 <memcmp>:
   93be0:	00c000c4 	movi	r3,3
   93be4:	1980032e 	bgeu	r3,r6,93bf4 <memcmp+0x14>
   93be8:	2144b03a 	or	r2,r4,r5
   93bec:	10c4703a 	and	r2,r2,r3
   93bf0:	10000f26 	beq	r2,zero,93c30 <memcmp+0x50>
   93bf4:	31ffffc4 	addi	r7,r6,-1
   93bf8:	3000061e 	bne	r6,zero,93c14 <memcmp+0x34>
   93bfc:	00000a06 	br	93c28 <memcmp+0x48>
   93c00:	39ffffc4 	addi	r7,r7,-1
   93c04:	00bfffc4 	movi	r2,-1
   93c08:	21000044 	addi	r4,r4,1
   93c0c:	29400044 	addi	r5,r5,1
   93c10:	38800526 	beq	r7,r2,93c28 <memcmp+0x48>
   93c14:	20c00003 	ldbu	r3,0(r4)
   93c18:	28800003 	ldbu	r2,0(r5)
   93c1c:	18bff826 	beq	r3,r2,93c00 <memcmp+0x20>
   93c20:	1885c83a 	sub	r2,r3,r2
   93c24:	f800283a 	ret
   93c28:	0005883a 	mov	r2,zero
   93c2c:	f800283a 	ret
   93c30:	180f883a 	mov	r7,r3
   93c34:	20c00017 	ldw	r3,0(r4)
   93c38:	28800017 	ldw	r2,0(r5)
   93c3c:	18bfed1e 	bne	r3,r2,93bf4 <memcmp+0x14>
   93c40:	31bfff04 	addi	r6,r6,-4
   93c44:	21000104 	addi	r4,r4,4
   93c48:	29400104 	addi	r5,r5,4
   93c4c:	39bff936 	bltu	r7,r6,93c34 <memcmp+0x54>
   93c50:	003fe806 	br	93bf4 <memcmp+0x14>

00093c54 <__register_exitproc>:
   93c54:	defffa04 	addi	sp,sp,-24
   93c58:	00800274 	movhi	r2,9
   93c5c:	1098bd04 	addi	r2,r2,25332
   93c60:	dc000015 	stw	r16,0(sp)
   93c64:	14000017 	ldw	r16,0(r2)
   93c68:	dd000415 	stw	r20,16(sp)
   93c6c:	2829883a 	mov	r20,r5
   93c70:	81405217 	ldw	r5,328(r16)
   93c74:	dcc00315 	stw	r19,12(sp)
   93c78:	dc800215 	stw	r18,8(sp)
   93c7c:	dc400115 	stw	r17,4(sp)
   93c80:	dfc00515 	stw	ra,20(sp)
   93c84:	2023883a 	mov	r17,r4
   93c88:	3027883a 	mov	r19,r6
   93c8c:	3825883a 	mov	r18,r7
   93c90:	28002526 	beq	r5,zero,93d28 <__register_exitproc+0xd4>
   93c94:	29000117 	ldw	r4,4(r5)
   93c98:	008007c4 	movi	r2,31
   93c9c:	11002716 	blt	r2,r4,93d3c <__register_exitproc+0xe8>
   93ca0:	8800101e 	bne	r17,zero,93ce4 <__register_exitproc+0x90>
   93ca4:	2105883a 	add	r2,r4,r4
   93ca8:	1085883a 	add	r2,r2,r2
   93cac:	20c00044 	addi	r3,r4,1
   93cb0:	1145883a 	add	r2,r2,r5
   93cb4:	0009883a 	mov	r4,zero
   93cb8:	15000215 	stw	r20,8(r2)
   93cbc:	28c00115 	stw	r3,4(r5)
   93cc0:	2005883a 	mov	r2,r4
   93cc4:	dfc00517 	ldw	ra,20(sp)
   93cc8:	dd000417 	ldw	r20,16(sp)
   93ccc:	dcc00317 	ldw	r19,12(sp)
   93cd0:	dc800217 	ldw	r18,8(sp)
   93cd4:	dc400117 	ldw	r17,4(sp)
   93cd8:	dc000017 	ldw	r16,0(sp)
   93cdc:	dec00604 	addi	sp,sp,24
   93ce0:	f800283a 	ret
   93ce4:	29802204 	addi	r6,r5,136
   93ce8:	00800044 	movi	r2,1
   93cec:	110e983a 	sll	r7,r2,r4
   93cf0:	30c04017 	ldw	r3,256(r6)
   93cf4:	2105883a 	add	r2,r4,r4
   93cf8:	1085883a 	add	r2,r2,r2
   93cfc:	1185883a 	add	r2,r2,r6
   93d00:	19c6b03a 	or	r3,r3,r7
   93d04:	14802015 	stw	r18,128(r2)
   93d08:	14c00015 	stw	r19,0(r2)
   93d0c:	00800084 	movi	r2,2
   93d10:	30c04015 	stw	r3,256(r6)
   93d14:	88bfe31e 	bne	r17,r2,93ca4 <__register_exitproc+0x50>
   93d18:	30804117 	ldw	r2,260(r6)
   93d1c:	11c4b03a 	or	r2,r2,r7
   93d20:	30804115 	stw	r2,260(r6)
   93d24:	003fdf06 	br	93ca4 <__register_exitproc+0x50>
   93d28:	008002b4 	movhi	r2,10
   93d2c:	10a05204 	addi	r2,r2,-32440
   93d30:	100b883a 	mov	r5,r2
   93d34:	80805215 	stw	r2,328(r16)
   93d38:	003fd606 	br	93c94 <__register_exitproc+0x40>
   93d3c:	00800034 	movhi	r2,0
   93d40:	10800004 	addi	r2,r2,0
   93d44:	1000021e 	bne	r2,zero,93d50 <__register_exitproc+0xfc>
   93d48:	013fffc4 	movi	r4,-1
   93d4c:	003fdc06 	br	93cc0 <__register_exitproc+0x6c>
   93d50:	01006404 	movi	r4,400
   93d54:	103ee83a 	callr	r2
   93d58:	1007883a 	mov	r3,r2
   93d5c:	103ffa26 	beq	r2,zero,93d48 <__register_exitproc+0xf4>
   93d60:	80805217 	ldw	r2,328(r16)
   93d64:	180b883a 	mov	r5,r3
   93d68:	18000115 	stw	zero,4(r3)
   93d6c:	18800015 	stw	r2,0(r3)
   93d70:	80c05215 	stw	r3,328(r16)
   93d74:	18006215 	stw	zero,392(r3)
   93d78:	18006315 	stw	zero,396(r3)
   93d7c:	0009883a 	mov	r4,zero
   93d80:	883fc826 	beq	r17,zero,93ca4 <__register_exitproc+0x50>
   93d84:	003fd706 	br	93ce4 <__register_exitproc+0x90>

00093d88 <register_fini>:
   93d88:	f800283a 	ret

00093d8c <__call_exitprocs>:
   93d8c:	00800274 	movhi	r2,9
   93d90:	1098bd04 	addi	r2,r2,25332
   93d94:	10800017 	ldw	r2,0(r2)
   93d98:	defff304 	addi	sp,sp,-52
   93d9c:	df000b15 	stw	fp,44(sp)
   93da0:	d8800115 	stw	r2,4(sp)
   93da4:	00800034 	movhi	r2,0
   93da8:	10800004 	addi	r2,r2,0
   93dac:	1005003a 	cmpeq	r2,r2,zero
   93db0:	d8800215 	stw	r2,8(sp)
   93db4:	d8800117 	ldw	r2,4(sp)
   93db8:	dd400815 	stw	r21,32(sp)
   93dbc:	dd000715 	stw	r20,28(sp)
   93dc0:	10805204 	addi	r2,r2,328
   93dc4:	dfc00c15 	stw	ra,48(sp)
   93dc8:	ddc00a15 	stw	r23,40(sp)
   93dcc:	dd800915 	stw	r22,36(sp)
   93dd0:	dcc00615 	stw	r19,24(sp)
   93dd4:	dc800515 	stw	r18,20(sp)
   93dd8:	dc400415 	stw	r17,16(sp)
   93ddc:	dc000315 	stw	r16,12(sp)
   93de0:	282b883a 	mov	r21,r5
   93de4:	2039883a 	mov	fp,r4
   93de8:	d8800015 	stw	r2,0(sp)
   93dec:	2829003a 	cmpeq	r20,r5,zero
   93df0:	d8800117 	ldw	r2,4(sp)
   93df4:	14405217 	ldw	r17,328(r2)
   93df8:	88001026 	beq	r17,zero,93e3c <__call_exitprocs+0xb0>
   93dfc:	ddc00017 	ldw	r23,0(sp)
   93e00:	88800117 	ldw	r2,4(r17)
   93e04:	8c802204 	addi	r18,r17,136
   93e08:	143fffc4 	addi	r16,r2,-1
   93e0c:	80000916 	blt	r16,zero,93e34 <__call_exitprocs+0xa8>
   93e10:	05bfffc4 	movi	r22,-1
   93e14:	a000151e 	bne	r20,zero,93e6c <__call_exitprocs+0xe0>
   93e18:	8409883a 	add	r4,r16,r16
   93e1c:	2105883a 	add	r2,r4,r4
   93e20:	1485883a 	add	r2,r2,r18
   93e24:	10c02017 	ldw	r3,128(r2)
   93e28:	a8c01126 	beq	r21,r3,93e70 <__call_exitprocs+0xe4>
   93e2c:	843fffc4 	addi	r16,r16,-1
   93e30:	85bff81e 	bne	r16,r22,93e14 <__call_exitprocs+0x88>
   93e34:	d8800217 	ldw	r2,8(sp)
   93e38:	10003126 	beq	r2,zero,93f00 <__call_exitprocs+0x174>
   93e3c:	dfc00c17 	ldw	ra,48(sp)
   93e40:	df000b17 	ldw	fp,44(sp)
   93e44:	ddc00a17 	ldw	r23,40(sp)
   93e48:	dd800917 	ldw	r22,36(sp)
   93e4c:	dd400817 	ldw	r21,32(sp)
   93e50:	dd000717 	ldw	r20,28(sp)
   93e54:	dcc00617 	ldw	r19,24(sp)
   93e58:	dc800517 	ldw	r18,20(sp)
   93e5c:	dc400417 	ldw	r17,16(sp)
   93e60:	dc000317 	ldw	r16,12(sp)
   93e64:	dec00d04 	addi	sp,sp,52
   93e68:	f800283a 	ret
   93e6c:	8409883a 	add	r4,r16,r16
   93e70:	88c00117 	ldw	r3,4(r17)
   93e74:	2105883a 	add	r2,r4,r4
   93e78:	1445883a 	add	r2,r2,r17
   93e7c:	18ffffc4 	addi	r3,r3,-1
   93e80:	11800217 	ldw	r6,8(r2)
   93e84:	1c001526 	beq	r3,r16,93edc <__call_exitprocs+0x150>
   93e88:	10000215 	stw	zero,8(r2)
   93e8c:	303fe726 	beq	r6,zero,93e2c <__call_exitprocs+0xa0>
   93e90:	00c00044 	movi	r3,1
   93e94:	1c06983a 	sll	r3,r3,r16
   93e98:	90804017 	ldw	r2,256(r18)
   93e9c:	8cc00117 	ldw	r19,4(r17)
   93ea0:	1884703a 	and	r2,r3,r2
   93ea4:	10001426 	beq	r2,zero,93ef8 <__call_exitprocs+0x16c>
   93ea8:	90804117 	ldw	r2,260(r18)
   93eac:	1884703a 	and	r2,r3,r2
   93eb0:	10000c1e 	bne	r2,zero,93ee4 <__call_exitprocs+0x158>
   93eb4:	2105883a 	add	r2,r4,r4
   93eb8:	1485883a 	add	r2,r2,r18
   93ebc:	11400017 	ldw	r5,0(r2)
   93ec0:	e009883a 	mov	r4,fp
   93ec4:	303ee83a 	callr	r6
   93ec8:	88800117 	ldw	r2,4(r17)
   93ecc:	98bfc81e 	bne	r19,r2,93df0 <__call_exitprocs+0x64>
   93ed0:	b8800017 	ldw	r2,0(r23)
   93ed4:	147fd526 	beq	r2,r17,93e2c <__call_exitprocs+0xa0>
   93ed8:	003fc506 	br	93df0 <__call_exitprocs+0x64>
   93edc:	8c000115 	stw	r16,4(r17)
   93ee0:	003fea06 	br	93e8c <__call_exitprocs+0x100>
   93ee4:	2105883a 	add	r2,r4,r4
   93ee8:	1485883a 	add	r2,r2,r18
   93eec:	11000017 	ldw	r4,0(r2)
   93ef0:	303ee83a 	callr	r6
   93ef4:	003ff406 	br	93ec8 <__call_exitprocs+0x13c>
   93ef8:	303ee83a 	callr	r6
   93efc:	003ff206 	br	93ec8 <__call_exitprocs+0x13c>
   93f00:	88800117 	ldw	r2,4(r17)
   93f04:	1000081e 	bne	r2,zero,93f28 <__call_exitprocs+0x19c>
   93f08:	89000017 	ldw	r4,0(r17)
   93f0c:	20000726 	beq	r4,zero,93f2c <__call_exitprocs+0x1a0>
   93f10:	b9000015 	stw	r4,0(r23)
   93f14:	8809883a 	mov	r4,r17
   93f18:	00000000 	call	0 <__alt_mem_sram_0-0x80000>
   93f1c:	bc400017 	ldw	r17,0(r23)
   93f20:	883fb71e 	bne	r17,zero,93e00 <__call_exitprocs+0x74>
   93f24:	003fc506 	br	93e3c <__call_exitprocs+0xb0>
   93f28:	89000017 	ldw	r4,0(r17)
   93f2c:	882f883a 	mov	r23,r17
   93f30:	2023883a 	mov	r17,r4
   93f34:	883fb21e 	bne	r17,zero,93e00 <__call_exitprocs+0x74>
   93f38:	003fc006 	br	93e3c <__call_exitprocs+0xb0>

00093f3c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   93f3c:	defffd04 	addi	sp,sp,-12
   93f40:	df000215 	stw	fp,8(sp)
   93f44:	df000204 	addi	fp,sp,8
   93f48:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   93f4c:	e0bfff17 	ldw	r2,-4(fp)
   93f50:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   93f54:	e0bffe17 	ldw	r2,-8(fp)
   93f58:	1005003a 	cmpeq	r2,r2,zero
   93f5c:	1000021e 	bne	r2,zero,93f68 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   93f60:	002af070 	cmpltui	zero,zero,43969
   93f64:	00000106 	br	93f6c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   93f68:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   93f6c:	e037883a 	mov	sp,fp
   93f70:	df000017 	ldw	fp,0(sp)
   93f74:	dec00104 	addi	sp,sp,4
   93f78:	f800283a 	ret

00093f7c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   93f7c:	defffd04 	addi	sp,sp,-12
   93f80:	dfc00215 	stw	ra,8(sp)
   93f84:	df000115 	stw	fp,4(sp)
   93f88:	df000104 	addi	fp,sp,4
   93f8c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   93f90:	e13fff17 	ldw	r4,-4(fp)
   93f94:	0093f3c0 	call	93f3c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   93f98:	003fff06 	br	93f98 <_exit+0x1c>
   93f9c:	00093d88 	cmpgei	zero,zero,9462
