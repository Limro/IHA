
Ello_World.elf:     file format elf32-littlenios2
Ello_World.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00006b90 memsz 0x00006b90 flags r-x
    LOAD off    0x00007bb0 vaddr 0x00086bb0 paddr 0x00088720 align 2**12
         filesz 0x00001b70 memsz 0x00001b70 flags rw-
    LOAD off    0x0000a290 vaddr 0x0008a290 paddr 0x0008a290 align 2**12
         filesz 0x00000000 memsz 0x000002e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000671c  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002e0  000868d0  000868d0  000078d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b70  00086bb0  00088720  00007bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e8  0008a290  0008a290  0000a290  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00009720  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000998  00000000  00000000  00009748  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000eda  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001b13f  00000000  00000000  0000afba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005471  00000000  00000000  000260f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d9c8  00000000  00000000  0002b56a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000122c  00000000  00000000  00038f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000018e5  00000000  00000000  0003a160  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004245  00000000  00000000  0003ba45  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0003fc8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00042821  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00042824  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00042829  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0004282a  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0004282e  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00042832  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00042836  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00042841  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0004284c  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000a  00000000  00000000  00042857  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002c  00000000  00000000  00042861  2**0
                  CONTENTS, READONLY
 28 .jdi          0000423d  00000000  00000000  0004288d  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00046c0f  00000000  00000000  00046aca  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
000868d0 l    d  .rodata	00000000 .rodata
00086bb0 l    d  .rwdata	00000000 .rwdata
0008a290 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00086bb0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00081b5c l     F .text	00000058 std
00081c68 l     F .text	00000008 __fp_lock
00081c70 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00082ca0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00082d00 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00082e04 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00082f28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00083008 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00083168 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00083398 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00088708 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00083650 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00087560 l     O .rwdata	00001060 jtag_uart_0
000885c0 l     O .rwdata	00000120 lcd_0
00083780 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000839c0 l     F .text	00000228 altera_avalon_jtag_uart_irq
00083be8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0008870c l     O .rwdata	00000004 colstart
00084264 l     F .text	000000b8 lcd_write_command
0008431c l     F .text	000000d4 lcd_write_data
000843f0 l     F .text	000000d8 lcd_clear_screen
000844c8 l     F .text	00000214 lcd_repaint_screen
000846dc l     F .text	000000e0 lcd_scroll_up
000847bc l     F .text	000002e4 lcd_handle_escape
00084fdc l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0008523c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00085560 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00085970 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00085ac0 l     F .text	000000f8 alt_file_locked
00085d44 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00086a2d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0008656c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
00086720 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
0008686c l     F .text	00000040 alt_sim_halt
00082a08 g     F .text	00000070 _isatty_r
000831c8 g     F .text	0000006c alt_main
00080224 g     F .text	000000a0 _puts_r
0008a2e8 g     O .bss	00000100 alt_irq
00082a78 g     F .text	00000078 _lseek_r
00088720 g       *ABS*	00000000 __flash_rwdata_start
0008a578 g       *ABS*	00000000 __alt_heap_start
00082644 g     F .text	00000068 __sseek
00081bc4 g     F .text	000000a4 __sinit
00081cc4 g     F .text	0000009c __sfmoreglue
00083254 g     F .text	00000020 __malloc_unlock
0008a2b0 g     O .bss	00000004 altera_avalon_timer_ts_freq
000810ac g     F .text	000000e0 memmove
00081cb4 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00082994 g     F .text	00000074 _fstat_r
0008a29c g     O .bss	00000004 errno
0008a2a4 g     O .bss	00000004 alt_argv
000906e0 g       *ABS*	00000000 _gp
00085f48 g     F .text	00000030 usleep
000873e0 g     O .rwdata	00000180 alt_fd_list
000860f4 g     F .text	00000094 alt_find_dev
0008100c g     F .text	000000a0 memcpy
00081ca8 g     F .text	0000000c _cleanup_r
00085a48 g     F .text	00000078 alt_io_redirect
000868d0 g       *ABS*	00000000 __DTOR_END__
000802c4 g     F .text	00000014 puts
00085f78 g     F .text	00000020 altera_nios2_irq_init
00083e00 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0008685c g     F .text	00000008 __udivsi3
00082e64 g     F .text	000000c4 isatty
0008a290 g     O .bss	00000004 __malloc_top_pad
0008034c g     F .text	0000049c __sfvwrite_r
00081780 g     F .text	00000070 _sbrk_r
00082af0 g     F .text	00000078 _read_r
00088700 g     O .rwdata	00000004 alt_max_fd
00082870 g     F .text	00000110 _fclose_r
00081b28 g     F .text	00000034 fflush
0008a294 g     O .bss	00000004 __malloc_max_sbrked_mem
00083074 g     F .text	000000f4 lseek
000886e4 g     O .rwdata	00000004 _global_impure_ptr
0008118c g     F .text	000005f4 _realloc_r
0008a578 g       *ABS*	00000000 __bss_end
00085878 g     F .text	000000f8 alt_iic_isr_register
00085e3c g     F .text	0000010c alt_tick
0008871c g     O .rwdata	00000004 __ctype_ptr
00081c90 g     F .text	00000018 __fp_lock_all
00085830 g     F .text	00000048 alt_ic_irq_enabled
00085da4 g     F .text	00000098 alt_alarm_stop
0008a2b4 g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000c8 alt_irq_handler
000873b8 g     O .rwdata	00000028 alt_dev_null
00085490 g     F .text	0000001c alt_dcache_flush_all
00088720 g       *ABS*	00000000 __ram_rwdata_end
000886f8 g     O .rwdata	00000008 alt_dev_list
0008352c g     F .text	00000124 write
00086bb0 g       *ABS*	00000000 __ram_rodata_end
00082d2c g     F .text	000000d8 fstat
00086864 g     F .text	00000008 __umodsi3
0008a578 g       *ABS*	00000000 end
00084aa0 g     F .text	0000053c altera_avalon_lcd_16207_write
00083900 g     F .text	000000c0 altera_avalon_jtag_uart_init
000868cc g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
000852ac g     F .text	00000090 alt_avalon_timer_sc_init
00084024 g     F .text	00000240 altera_avalon_jtag_uart_write
00081bb4 g     F .text	00000004 __sfp_lock_acquire
00080f28 g     F .text	000000e4 memchr
00081f7c g     F .text	00000314 _free_r
00086570 g     F .text	000001b0 __call_exitprocs
000886ec g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000003c _start
0008a2b8 g     O .bss	00000004 _alt_tick_rate
0008a2bc g     O .bss	00000004 _alt_nticks
00083274 g     F .text	00000124 read
000836e4 g     F .text	0000009c alt_sys_init
00086438 g     F .text	00000134 __register_exitproc
00083c98 g     F .text	00000074 altera_avalon_jtag_uart_close
00082b68 g     F .text	00000038 __mulsi3
00086bb0 g       *ABS*	00000000 __ram_rwdata_start
000868d0 g       *ABS*	00000000 __ram_rodata_start
0008a2c0 g     O .bss	00000028 __malloc_current_mallinfo
000837b8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
000862a8 g     F .text	000000d0 alt_get_fd
00085f98 g     F .text	0000015c alt_busy_sleep
00082800 g     F .text	00000070 _close_r
000863c4 g     F .text	00000074 memcmp
00083868 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0008a578 g       *ABS*	00000000 __alt_stack_base
000838b0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000817f0 g     F .text	0000013c __swsetup_r
00081d60 g     F .text	000000f0 __sfp
00086fb0 g     O .rwdata	00000408 __malloc_av_
00081bc0 g     F .text	00000004 __sinit_lock_release
00082728 g     F .text	00000060 __sread
00086188 g     F .text	00000120 alt_find_file
000854ac g     F .text	000000b4 alt_dev_llist_insert
00083234 g     F .text	00000020 __malloc_lock
00083470 g     F .text	000000bc sbrk
0008192c g     F .text	000001fc _fflush_r
0008a290 g       *ABS*	00000000 __bss_start
000825a4 g     F .text	00000098 memset
000801f0 g     F .text	00000034 main
0008a2a8 g     O .bss	00000004 alt_envp
0008a298 g     O .bss	00000004 __malloc_max_total_mem
00083810 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000850a8 g     F .text	0000013c altera_avalon_lcd_16207_init
0008263c g     F .text	00000008 __sclose
00100000 g       *ABS*	00000000 __alt_heap_limit
00082980 g     F .text	00000014 fclose
0008a3e8 g     O .bss	00000190 _atexit0
000807e8 g     F .text	00000740 _malloc_r
00088704 g     O .rwdata	00000004 alt_errno
00082358 g     F .text	000000b8 _fwalk
0008679c g     F .text	00000060 __divsi3
00081e50 g     F .text	0000012c _malloc_trim_r
000868d0 g       *ABS*	00000000 __CTOR_END__
000868d0 g       *ABS*	00000000 __flash_rodata_start
000868d0 g       *ABS*	00000000 __DTOR_LIST__
00080000 g       *ABS*	00000000 __alt_mem_sram_0
000836b0 g     F .text	00000034 alt_irq_init
000833f8 g     F .text	00000078 alt_release_fd
00086378 g     F .text	00000014 atexit
00082788 g     F .text	00000078 _write_r
000886e0 g     O .rwdata	00000004 _impure_ptr
0008a2a0 g     O .bss	00000004 alt_argc
0008a2ac g     O .bss	00000004 altera_avalon_timer_ts_base
00085624 g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00081c78 g     F .text	00000018 __fp_unlock_all
000851e4 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
000886f0 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
000856a4 g     F .text	00000050 alt_ic_isr_register
00088720 g       *ABS*	00000000 _edata
0008a578 g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
00083d0c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00085790 g     F .text	000000a0 alt_ic_irq_disable
000826ac g     F .text	0000007c __swrite
000886e8 g     O .rwdata	00000004 __malloc_trim_threshold
0008638c g     F .text	00000038 exit
00082290 g     F .text	000000c8 _fwalk_reent
000867fc g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00081bb8 g     F .text	00000004 __sfp_lock_release
0008692c g     O .rodata	00000101 _ctype_
000868ac g     F .text	00000020 _exit
0008533c g     F .text	00000154 alt_alarm_start
00082410 g     F .text	00000194 __smakebuf_r
000802d8 g     F .text	00000074 strlen
00085bb8 g     F .text	0000018c open
00085688 g     F .text	0000001c alt_icache_flush_all
00088710 g     O .rwdata	00000004 alt_priority_mask
000856f4 g     F .text	0000009c alt_ic_irq_enable
00088714 g     O .rwdata	00000008 alt_alarm_list
000855c0 g     F .text	00000064 _do_ctors
00082ba0 g     F .text	00000100 close
00082f88 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00081bbc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406d14 	ori	at,at,436
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00274 	movhi	r3,9
   80134:	18e8ba04 	addi	r3,r3,-23832
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00274 	movhi	r3,9
   8014c:	18e8ba04 	addi	r3,r3,-23832
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801c0:	d681b814 	ori	gp,gp,1760
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   801c8:	10a8a414 	ori	r2,r2,41616

    movhi r3, %hi(__bss_end)
   801cc:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   801d0:	18e95e14 	ori	r3,r3,42360

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	0082f880 	call	82f88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	00831c80 	call	831c8 <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <main>:
 */

#include <stdio.h>

int main()
{
   801f0:	defffe04 	addi	sp,sp,-8
   801f4:	dfc00115 	stw	ra,4(sp)
   801f8:	df000015 	stw	fp,0(sp)
   801fc:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   80200:	01000234 	movhi	r4,8
   80204:	211a3404 	addi	r4,r4,26832
   80208:	00802c40 	call	802c4 <puts>

  return 0;
   8020c:	0005883a 	mov	r2,zero
}
   80210:	e037883a 	mov	sp,fp
   80214:	dfc00117 	ldw	ra,4(sp)
   80218:	df000017 	ldw	fp,0(sp)
   8021c:	dec00204 	addi	sp,sp,8
   80220:	f800283a 	ret

00080224 <_puts_r>:
   80224:	defff604 	addi	sp,sp,-40
   80228:	dc400715 	stw	r17,28(sp)
   8022c:	2023883a 	mov	r17,r4
   80230:	2809883a 	mov	r4,r5
   80234:	dfc00915 	stw	ra,36(sp)
   80238:	dcc00815 	stw	r19,32(sp)
   8023c:	2827883a 	mov	r19,r5
   80240:	00802d80 	call	802d8 <strlen>
   80244:	89400217 	ldw	r5,8(r17)
   80248:	00c00234 	movhi	r3,8
   8024c:	18da3904 	addi	r3,r3,26852
   80250:	01c00044 	movi	r7,1
   80254:	12000044 	addi	r8,r2,1
   80258:	d8c00515 	stw	r3,20(sp)
   8025c:	d9c00615 	stw	r7,24(sp)
   80260:	d8c00304 	addi	r3,sp,12
   80264:	01c00084 	movi	r7,2
   80268:	8809883a 	mov	r4,r17
   8026c:	d80d883a 	mov	r6,sp
   80270:	d8c00015 	stw	r3,0(sp)
   80274:	dcc00315 	stw	r19,12(sp)
   80278:	da000215 	stw	r8,8(sp)
   8027c:	d9c00115 	stw	r7,4(sp)
   80280:	d8800415 	stw	r2,16(sp)
   80284:	008034c0 	call	8034c <__sfvwrite_r>
   80288:	00ffffc4 	movi	r3,-1
   8028c:	10000626 	beq	r2,zero,802a8 <_puts_r+0x84>
   80290:	1805883a 	mov	r2,r3
   80294:	dfc00917 	ldw	ra,36(sp)
   80298:	dcc00817 	ldw	r19,32(sp)
   8029c:	dc400717 	ldw	r17,28(sp)
   802a0:	dec00a04 	addi	sp,sp,40
   802a4:	f800283a 	ret
   802a8:	00c00284 	movi	r3,10
   802ac:	1805883a 	mov	r2,r3
   802b0:	dfc00917 	ldw	ra,36(sp)
   802b4:	dcc00817 	ldw	r19,32(sp)
   802b8:	dc400717 	ldw	r17,28(sp)
   802bc:	dec00a04 	addi	sp,sp,40
   802c0:	f800283a 	ret

000802c4 <puts>:
   802c4:	00800274 	movhi	r2,9
   802c8:	10a1b804 	addi	r2,r2,-31008
   802cc:	200b883a 	mov	r5,r4
   802d0:	11000017 	ldw	r4,0(r2)
   802d4:	00802241 	jmpi	80224 <_puts_r>

000802d8 <strlen>:
   802d8:	208000cc 	andi	r2,r4,3
   802dc:	2011883a 	mov	r8,r4
   802e0:	1000161e 	bne	r2,zero,8033c <strlen+0x64>
   802e4:	20c00017 	ldw	r3,0(r4)
   802e8:	017fbff4 	movhi	r5,65279
   802ec:	297fbfc4 	addi	r5,r5,-257
   802f0:	01e02074 	movhi	r7,32897
   802f4:	39e02004 	addi	r7,r7,-32640
   802f8:	1945883a 	add	r2,r3,r5
   802fc:	11c4703a 	and	r2,r2,r7
   80300:	00c6303a 	nor	r3,zero,r3
   80304:	1886703a 	and	r3,r3,r2
   80308:	18000c1e 	bne	r3,zero,8033c <strlen+0x64>
   8030c:	280d883a 	mov	r6,r5
   80310:	380b883a 	mov	r5,r7
   80314:	21000104 	addi	r4,r4,4
   80318:	20800017 	ldw	r2,0(r4)
   8031c:	1187883a 	add	r3,r2,r6
   80320:	1946703a 	and	r3,r3,r5
   80324:	0084303a 	nor	r2,zero,r2
   80328:	10c4703a 	and	r2,r2,r3
   8032c:	103ff926 	beq	r2,zero,80314 <strlen+0x3c>
   80330:	20800007 	ldb	r2,0(r4)
   80334:	10000326 	beq	r2,zero,80344 <strlen+0x6c>
   80338:	21000044 	addi	r4,r4,1
   8033c:	20800007 	ldb	r2,0(r4)
   80340:	103ffd1e 	bne	r2,zero,80338 <strlen+0x60>
   80344:	2205c83a 	sub	r2,r4,r8
   80348:	f800283a 	ret

0008034c <__sfvwrite_r>:
   8034c:	30800217 	ldw	r2,8(r6)
   80350:	defff504 	addi	sp,sp,-44
   80354:	df000915 	stw	fp,36(sp)
   80358:	dd800715 	stw	r22,28(sp)
   8035c:	dc800315 	stw	r18,12(sp)
   80360:	dfc00a15 	stw	ra,40(sp)
   80364:	ddc00815 	stw	r23,32(sp)
   80368:	dd400615 	stw	r21,24(sp)
   8036c:	dd000515 	stw	r20,20(sp)
   80370:	dcc00415 	stw	r19,16(sp)
   80374:	dc400215 	stw	r17,8(sp)
   80378:	dc000115 	stw	r16,4(sp)
   8037c:	302d883a 	mov	r22,r6
   80380:	2039883a 	mov	fp,r4
   80384:	2825883a 	mov	r18,r5
   80388:	10001c26 	beq	r2,zero,803fc <__sfvwrite_r+0xb0>
   8038c:	29c0030b 	ldhu	r7,12(r5)
   80390:	3880020c 	andi	r2,r7,8
   80394:	10002726 	beq	r2,zero,80434 <__sfvwrite_r+0xe8>
   80398:	28800417 	ldw	r2,16(r5)
   8039c:	10002526 	beq	r2,zero,80434 <__sfvwrite_r+0xe8>
   803a0:	3880008c 	andi	r2,r7,2
   803a4:	b5400017 	ldw	r21,0(r22)
   803a8:	10002826 	beq	r2,zero,8044c <__sfvwrite_r+0x100>
   803ac:	0021883a 	mov	r16,zero
   803b0:	0023883a 	mov	r17,zero
   803b4:	880d883a 	mov	r6,r17
   803b8:	e009883a 	mov	r4,fp
   803bc:	00810004 	movi	r2,1024
   803c0:	80006e26 	beq	r16,zero,8057c <__sfvwrite_r+0x230>
   803c4:	800f883a 	mov	r7,r16
   803c8:	91400717 	ldw	r5,28(r18)
   803cc:	1400012e 	bgeu	r2,r16,803d4 <__sfvwrite_r+0x88>
   803d0:	100f883a 	mov	r7,r2
   803d4:	90c00917 	ldw	r3,36(r18)
   803d8:	183ee83a 	callr	r3
   803dc:	1007883a 	mov	r3,r2
   803e0:	80a1c83a 	sub	r16,r16,r2
   803e4:	88a3883a 	add	r17,r17,r2
   803e8:	00806d0e 	bge	zero,r2,805a0 <__sfvwrite_r+0x254>
   803ec:	b0800217 	ldw	r2,8(r22)
   803f0:	10c5c83a 	sub	r2,r2,r3
   803f4:	b0800215 	stw	r2,8(r22)
   803f8:	103fee1e 	bne	r2,zero,803b4 <__sfvwrite_r+0x68>
   803fc:	0009883a 	mov	r4,zero
   80400:	2005883a 	mov	r2,r4
   80404:	dfc00a17 	ldw	ra,40(sp)
   80408:	df000917 	ldw	fp,36(sp)
   8040c:	ddc00817 	ldw	r23,32(sp)
   80410:	dd800717 	ldw	r22,28(sp)
   80414:	dd400617 	ldw	r21,24(sp)
   80418:	dd000517 	ldw	r20,20(sp)
   8041c:	dcc00417 	ldw	r19,16(sp)
   80420:	dc800317 	ldw	r18,12(sp)
   80424:	dc400217 	ldw	r17,8(sp)
   80428:	dc000117 	ldw	r16,4(sp)
   8042c:	dec00b04 	addi	sp,sp,44
   80430:	f800283a 	ret
   80434:	00817f00 	call	817f0 <__swsetup_r>
   80438:	1000e41e 	bne	r2,zero,807cc <__sfvwrite_r+0x480>
   8043c:	91c0030b 	ldhu	r7,12(r18)
   80440:	b5400017 	ldw	r21,0(r22)
   80444:	3880008c 	andi	r2,r7,2
   80448:	103fd81e 	bne	r2,zero,803ac <__sfvwrite_r+0x60>
   8044c:	3880004c 	andi	r2,r7,1
   80450:	1005003a 	cmpeq	r2,r2,zero
   80454:	10005726 	beq	r2,zero,805b4 <__sfvwrite_r+0x268>
   80458:	0029883a 	mov	r20,zero
   8045c:	002f883a 	mov	r23,zero
   80460:	a0004226 	beq	r20,zero,8056c <__sfvwrite_r+0x220>
   80464:	3880800c 	andi	r2,r7,512
   80468:	94000217 	ldw	r16,8(r18)
   8046c:	10008b26 	beq	r2,zero,8069c <__sfvwrite_r+0x350>
   80470:	800d883a 	mov	r6,r16
   80474:	a400a536 	bltu	r20,r16,8070c <__sfvwrite_r+0x3c0>
   80478:	3881200c 	andi	r2,r7,1152
   8047c:	10002726 	beq	r2,zero,8051c <__sfvwrite_r+0x1d0>
   80480:	90800517 	ldw	r2,20(r18)
   80484:	92000417 	ldw	r8,16(r18)
   80488:	91400017 	ldw	r5,0(r18)
   8048c:	1087883a 	add	r3,r2,r2
   80490:	1887883a 	add	r3,r3,r2
   80494:	1808d7fa 	srli	r4,r3,31
   80498:	2a21c83a 	sub	r16,r5,r8
   8049c:	80800044 	addi	r2,r16,1
   804a0:	20c9883a 	add	r4,r4,r3
   804a4:	2027d07a 	srai	r19,r4,1
   804a8:	a085883a 	add	r2,r20,r2
   804ac:	980d883a 	mov	r6,r19
   804b0:	9880022e 	bgeu	r19,r2,804bc <__sfvwrite_r+0x170>
   804b4:	1027883a 	mov	r19,r2
   804b8:	100d883a 	mov	r6,r2
   804bc:	3881000c 	andi	r2,r7,1024
   804c0:	1000b826 	beq	r2,zero,807a4 <__sfvwrite_r+0x458>
   804c4:	300b883a 	mov	r5,r6
   804c8:	e009883a 	mov	r4,fp
   804cc:	00807e80 	call	807e8 <_malloc_r>
   804d0:	10003126 	beq	r2,zero,80598 <__sfvwrite_r+0x24c>
   804d4:	91400417 	ldw	r5,16(r18)
   804d8:	1009883a 	mov	r4,r2
   804dc:	800d883a 	mov	r6,r16
   804e0:	1023883a 	mov	r17,r2
   804e4:	008100c0 	call	8100c <memcpy>
   804e8:	90c0030b 	ldhu	r3,12(r18)
   804ec:	00beffc4 	movi	r2,-1025
   804f0:	1886703a 	and	r3,r3,r2
   804f4:	18c02014 	ori	r3,r3,128
   804f8:	90c0030d 	sth	r3,12(r18)
   804fc:	9c07c83a 	sub	r3,r19,r16
   80500:	8c05883a 	add	r2,r17,r16
   80504:	a00d883a 	mov	r6,r20
   80508:	a021883a 	mov	r16,r20
   8050c:	90800015 	stw	r2,0(r18)
   80510:	90c00215 	stw	r3,8(r18)
   80514:	94400415 	stw	r17,16(r18)
   80518:	94c00515 	stw	r19,20(r18)
   8051c:	91000017 	ldw	r4,0(r18)
   80520:	b80b883a 	mov	r5,r23
   80524:	a023883a 	mov	r17,r20
   80528:	00810ac0 	call	810ac <memmove>
   8052c:	90c00217 	ldw	r3,8(r18)
   80530:	90800017 	ldw	r2,0(r18)
   80534:	a027883a 	mov	r19,r20
   80538:	1c07c83a 	sub	r3,r3,r16
   8053c:	1405883a 	add	r2,r2,r16
   80540:	90c00215 	stw	r3,8(r18)
   80544:	a021883a 	mov	r16,r20
   80548:	90800015 	stw	r2,0(r18)
   8054c:	b0800217 	ldw	r2,8(r22)
   80550:	1405c83a 	sub	r2,r2,r16
   80554:	b0800215 	stw	r2,8(r22)
   80558:	103fa826 	beq	r2,zero,803fc <__sfvwrite_r+0xb0>
   8055c:	a469c83a 	sub	r20,r20,r17
   80560:	91c0030b 	ldhu	r7,12(r18)
   80564:	bcef883a 	add	r23,r23,r19
   80568:	a03fbe1e 	bne	r20,zero,80464 <__sfvwrite_r+0x118>
   8056c:	adc00017 	ldw	r23,0(r21)
   80570:	ad000117 	ldw	r20,4(r21)
   80574:	ad400204 	addi	r21,r21,8
   80578:	003fb906 	br	80460 <__sfvwrite_r+0x114>
   8057c:	ac400017 	ldw	r17,0(r21)
   80580:	ac000117 	ldw	r16,4(r21)
   80584:	ad400204 	addi	r21,r21,8
   80588:	003f8a06 	br	803b4 <__sfvwrite_r+0x68>
   8058c:	91400417 	ldw	r5,16(r18)
   80590:	e009883a 	mov	r4,fp
   80594:	0081f7c0 	call	81f7c <_free_r>
   80598:	00800304 	movi	r2,12
   8059c:	e0800015 	stw	r2,0(fp)
   805a0:	9080030b 	ldhu	r2,12(r18)
   805a4:	013fffc4 	movi	r4,-1
   805a8:	10801014 	ori	r2,r2,64
   805ac:	9080030d 	sth	r2,12(r18)
   805b0:	003f9306 	br	80400 <__sfvwrite_r+0xb4>
   805b4:	0027883a 	mov	r19,zero
   805b8:	002f883a 	mov	r23,zero
   805bc:	d8000015 	stw	zero,0(sp)
   805c0:	0029883a 	mov	r20,zero
   805c4:	98001e26 	beq	r19,zero,80640 <__sfvwrite_r+0x2f4>
   805c8:	d8c00017 	ldw	r3,0(sp)
   805cc:	1804c03a 	cmpne	r2,r3,zero
   805d0:	10005e26 	beq	r2,zero,8074c <__sfvwrite_r+0x400>
   805d4:	9821883a 	mov	r16,r19
   805d8:	a4c0012e 	bgeu	r20,r19,805e0 <__sfvwrite_r+0x294>
   805dc:	a021883a 	mov	r16,r20
   805e0:	91000017 	ldw	r4,0(r18)
   805e4:	90800417 	ldw	r2,16(r18)
   805e8:	91800217 	ldw	r6,8(r18)
   805ec:	91c00517 	ldw	r7,20(r18)
   805f0:	1100022e 	bgeu	r2,r4,805fc <__sfvwrite_r+0x2b0>
   805f4:	31e3883a 	add	r17,r6,r7
   805f8:	8c001616 	blt	r17,r16,80654 <__sfvwrite_r+0x308>
   805fc:	81c03816 	blt	r16,r7,806e0 <__sfvwrite_r+0x394>
   80600:	90c00917 	ldw	r3,36(r18)
   80604:	91400717 	ldw	r5,28(r18)
   80608:	e009883a 	mov	r4,fp
   8060c:	b80d883a 	mov	r6,r23
   80610:	183ee83a 	callr	r3
   80614:	1023883a 	mov	r17,r2
   80618:	00bfe10e 	bge	zero,r2,805a0 <__sfvwrite_r+0x254>
   8061c:	a469c83a 	sub	r20,r20,r17
   80620:	a0001826 	beq	r20,zero,80684 <__sfvwrite_r+0x338>
   80624:	b0800217 	ldw	r2,8(r22)
   80628:	1445c83a 	sub	r2,r2,r17
   8062c:	b0800215 	stw	r2,8(r22)
   80630:	103f7226 	beq	r2,zero,803fc <__sfvwrite_r+0xb0>
   80634:	9c67c83a 	sub	r19,r19,r17
   80638:	bc6f883a 	add	r23,r23,r17
   8063c:	983fe21e 	bne	r19,zero,805c8 <__sfvwrite_r+0x27c>
   80640:	adc00017 	ldw	r23,0(r21)
   80644:	acc00117 	ldw	r19,4(r21)
   80648:	ad400204 	addi	r21,r21,8
   8064c:	d8000015 	stw	zero,0(sp)
   80650:	003fdc06 	br	805c4 <__sfvwrite_r+0x278>
   80654:	b80b883a 	mov	r5,r23
   80658:	880d883a 	mov	r6,r17
   8065c:	00810ac0 	call	810ac <memmove>
   80660:	90c00017 	ldw	r3,0(r18)
   80664:	e009883a 	mov	r4,fp
   80668:	900b883a 	mov	r5,r18
   8066c:	1c47883a 	add	r3,r3,r17
   80670:	90c00015 	stw	r3,0(r18)
   80674:	008192c0 	call	8192c <_fflush_r>
   80678:	103fc91e 	bne	r2,zero,805a0 <__sfvwrite_r+0x254>
   8067c:	a469c83a 	sub	r20,r20,r17
   80680:	a03fe81e 	bne	r20,zero,80624 <__sfvwrite_r+0x2d8>
   80684:	e009883a 	mov	r4,fp
   80688:	900b883a 	mov	r5,r18
   8068c:	008192c0 	call	8192c <_fflush_r>
   80690:	103fc31e 	bne	r2,zero,805a0 <__sfvwrite_r+0x254>
   80694:	d8000015 	stw	zero,0(sp)
   80698:	003fe206 	br	80624 <__sfvwrite_r+0x2d8>
   8069c:	91000017 	ldw	r4,0(r18)
   806a0:	90800417 	ldw	r2,16(r18)
   806a4:	1100022e 	bgeu	r2,r4,806b0 <__sfvwrite_r+0x364>
   806a8:	8023883a 	mov	r17,r16
   806ac:	85003136 	bltu	r16,r20,80774 <__sfvwrite_r+0x428>
   806b0:	91c00517 	ldw	r7,20(r18)
   806b4:	a1c01836 	bltu	r20,r7,80718 <__sfvwrite_r+0x3cc>
   806b8:	90c00917 	ldw	r3,36(r18)
   806bc:	91400717 	ldw	r5,28(r18)
   806c0:	e009883a 	mov	r4,fp
   806c4:	b80d883a 	mov	r6,r23
   806c8:	183ee83a 	callr	r3
   806cc:	1021883a 	mov	r16,r2
   806d0:	00bfb30e 	bge	zero,r2,805a0 <__sfvwrite_r+0x254>
   806d4:	1023883a 	mov	r17,r2
   806d8:	1027883a 	mov	r19,r2
   806dc:	003f9b06 	br	8054c <__sfvwrite_r+0x200>
   806e0:	b80b883a 	mov	r5,r23
   806e4:	800d883a 	mov	r6,r16
   806e8:	00810ac0 	call	810ac <memmove>
   806ec:	90c00217 	ldw	r3,8(r18)
   806f0:	90800017 	ldw	r2,0(r18)
   806f4:	8023883a 	mov	r17,r16
   806f8:	1c07c83a 	sub	r3,r3,r16
   806fc:	1405883a 	add	r2,r2,r16
   80700:	90c00215 	stw	r3,8(r18)
   80704:	90800015 	stw	r2,0(r18)
   80708:	003fc406 	br	8061c <__sfvwrite_r+0x2d0>
   8070c:	a00d883a 	mov	r6,r20
   80710:	a021883a 	mov	r16,r20
   80714:	003f8106 	br	8051c <__sfvwrite_r+0x1d0>
   80718:	b80b883a 	mov	r5,r23
   8071c:	a00d883a 	mov	r6,r20
   80720:	00810ac0 	call	810ac <memmove>
   80724:	90c00217 	ldw	r3,8(r18)
   80728:	90800017 	ldw	r2,0(r18)
   8072c:	a021883a 	mov	r16,r20
   80730:	1d07c83a 	sub	r3,r3,r20
   80734:	1505883a 	add	r2,r2,r20
   80738:	a023883a 	mov	r17,r20
   8073c:	a027883a 	mov	r19,r20
   80740:	90c00215 	stw	r3,8(r18)
   80744:	90800015 	stw	r2,0(r18)
   80748:	003f8006 	br	8054c <__sfvwrite_r+0x200>
   8074c:	b809883a 	mov	r4,r23
   80750:	01400284 	movi	r5,10
   80754:	980d883a 	mov	r6,r19
   80758:	0080f280 	call	80f28 <memchr>
   8075c:	10001726 	beq	r2,zero,807bc <__sfvwrite_r+0x470>
   80760:	15c5c83a 	sub	r2,r2,r23
   80764:	15000044 	addi	r20,r2,1
   80768:	00800044 	movi	r2,1
   8076c:	d8800015 	stw	r2,0(sp)
   80770:	003f9806 	br	805d4 <__sfvwrite_r+0x288>
   80774:	b80b883a 	mov	r5,r23
   80778:	800d883a 	mov	r6,r16
   8077c:	00810ac0 	call	810ac <memmove>
   80780:	90c00017 	ldw	r3,0(r18)
   80784:	e009883a 	mov	r4,fp
   80788:	900b883a 	mov	r5,r18
   8078c:	1c07883a 	add	r3,r3,r16
   80790:	90c00015 	stw	r3,0(r18)
   80794:	8027883a 	mov	r19,r16
   80798:	008192c0 	call	8192c <_fflush_r>
   8079c:	103f6b26 	beq	r2,zero,8054c <__sfvwrite_r+0x200>
   807a0:	003f7f06 	br	805a0 <__sfvwrite_r+0x254>
   807a4:	400b883a 	mov	r5,r8
   807a8:	e009883a 	mov	r4,fp
   807ac:	008118c0 	call	8118c <_realloc_r>
   807b0:	103f7626 	beq	r2,zero,8058c <__sfvwrite_r+0x240>
   807b4:	1023883a 	mov	r17,r2
   807b8:	003f5006 	br	804fc <__sfvwrite_r+0x1b0>
   807bc:	00c00044 	movi	r3,1
   807c0:	9d000044 	addi	r20,r19,1
   807c4:	d8c00015 	stw	r3,0(sp)
   807c8:	003f8206 	br	805d4 <__sfvwrite_r+0x288>
   807cc:	9080030b 	ldhu	r2,12(r18)
   807d0:	00c00244 	movi	r3,9
   807d4:	013fffc4 	movi	r4,-1
   807d8:	10801014 	ori	r2,r2,64
   807dc:	9080030d 	sth	r2,12(r18)
   807e0:	e0c00015 	stw	r3,0(fp)
   807e4:	003f0606 	br	80400 <__sfvwrite_r+0xb4>

000807e8 <_malloc_r>:
   807e8:	defff604 	addi	sp,sp,-40
   807ec:	28c002c4 	addi	r3,r5,11
   807f0:	00800584 	movi	r2,22
   807f4:	dc800215 	stw	r18,8(sp)
   807f8:	dfc00915 	stw	ra,36(sp)
   807fc:	df000815 	stw	fp,32(sp)
   80800:	ddc00715 	stw	r23,28(sp)
   80804:	dd800615 	stw	r22,24(sp)
   80808:	dd400515 	stw	r21,20(sp)
   8080c:	dd000415 	stw	r20,16(sp)
   80810:	dcc00315 	stw	r19,12(sp)
   80814:	dc400115 	stw	r17,4(sp)
   80818:	dc000015 	stw	r16,0(sp)
   8081c:	2025883a 	mov	r18,r4
   80820:	10c01236 	bltu	r2,r3,8086c <_malloc_r+0x84>
   80824:	04400404 	movi	r17,16
   80828:	8940142e 	bgeu	r17,r5,8087c <_malloc_r+0x94>
   8082c:	00800304 	movi	r2,12
   80830:	0007883a 	mov	r3,zero
   80834:	90800015 	stw	r2,0(r18)
   80838:	1805883a 	mov	r2,r3
   8083c:	dfc00917 	ldw	ra,36(sp)
   80840:	df000817 	ldw	fp,32(sp)
   80844:	ddc00717 	ldw	r23,28(sp)
   80848:	dd800617 	ldw	r22,24(sp)
   8084c:	dd400517 	ldw	r21,20(sp)
   80850:	dd000417 	ldw	r20,16(sp)
   80854:	dcc00317 	ldw	r19,12(sp)
   80858:	dc800217 	ldw	r18,8(sp)
   8085c:	dc400117 	ldw	r17,4(sp)
   80860:	dc000017 	ldw	r16,0(sp)
   80864:	dec00a04 	addi	sp,sp,40
   80868:	f800283a 	ret
   8086c:	00bffe04 	movi	r2,-8
   80870:	18a2703a 	and	r17,r3,r2
   80874:	883fed16 	blt	r17,zero,8082c <_malloc_r+0x44>
   80878:	897fec36 	bltu	r17,r5,8082c <_malloc_r+0x44>
   8087c:	9009883a 	mov	r4,r18
   80880:	00832340 	call	83234 <__malloc_lock>
   80884:	00807dc4 	movi	r2,503
   80888:	14402b2e 	bgeu	r2,r17,80938 <_malloc_r+0x150>
   8088c:	8806d27a 	srli	r3,r17,9
   80890:	18003f1e 	bne	r3,zero,80990 <_malloc_r+0x1a8>
   80894:	880cd0fa 	srli	r6,r17,3
   80898:	300490fa 	slli	r2,r6,3
   8089c:	02c00234 	movhi	r11,8
   808a0:	5adbec04 	addi	r11,r11,28592
   808a4:	12cb883a 	add	r5,r2,r11
   808a8:	2c000317 	ldw	r16,12(r5)
   808ac:	580f883a 	mov	r7,r11
   808b0:	2c00041e 	bne	r5,r16,808c4 <_malloc_r+0xdc>
   808b4:	00000a06 	br	808e0 <_malloc_r+0xf8>
   808b8:	1800860e 	bge	r3,zero,80ad4 <_malloc_r+0x2ec>
   808bc:	84000317 	ldw	r16,12(r16)
   808c0:	2c000726 	beq	r5,r16,808e0 <_malloc_r+0xf8>
   808c4:	80800117 	ldw	r2,4(r16)
   808c8:	00ffff04 	movi	r3,-4
   808cc:	10c8703a 	and	r4,r2,r3
   808d0:	2447c83a 	sub	r3,r4,r17
   808d4:	008003c4 	movi	r2,15
   808d8:	10fff70e 	bge	r2,r3,808b8 <_malloc_r+0xd0>
   808dc:	31bfffc4 	addi	r6,r6,-1
   808e0:	32400044 	addi	r9,r6,1
   808e4:	02800234 	movhi	r10,8
   808e8:	529bee04 	addi	r10,r10,28600
   808ec:	54000217 	ldw	r16,8(r10)
   808f0:	8280a026 	beq	r16,r10,80b74 <_malloc_r+0x38c>
   808f4:	80800117 	ldw	r2,4(r16)
   808f8:	00ffff04 	movi	r3,-4
   808fc:	10ca703a 	and	r5,r2,r3
   80900:	2c4dc83a 	sub	r6,r5,r17
   80904:	008003c4 	movi	r2,15
   80908:	11808316 	blt	r2,r6,80b18 <_malloc_r+0x330>
   8090c:	52800315 	stw	r10,12(r10)
   80910:	52800215 	stw	r10,8(r10)
   80914:	30002916 	blt	r6,zero,809bc <_malloc_r+0x1d4>
   80918:	8147883a 	add	r3,r16,r5
   8091c:	18800117 	ldw	r2,4(r3)
   80920:	9009883a 	mov	r4,r18
   80924:	10800054 	ori	r2,r2,1
   80928:	18800115 	stw	r2,4(r3)
   8092c:	00832540 	call	83254 <__malloc_unlock>
   80930:	80c00204 	addi	r3,r16,8
   80934:	003fc006 	br	80838 <_malloc_r+0x50>
   80938:	02c00234 	movhi	r11,8
   8093c:	5adbec04 	addi	r11,r11,28592
   80940:	8ac5883a 	add	r2,r17,r11
   80944:	14000317 	ldw	r16,12(r2)
   80948:	580f883a 	mov	r7,r11
   8094c:	8806d0fa 	srli	r3,r17,3
   80950:	14006c26 	beq	r2,r16,80b04 <_malloc_r+0x31c>
   80954:	80c00117 	ldw	r3,4(r16)
   80958:	00bfff04 	movi	r2,-4
   8095c:	81800317 	ldw	r6,12(r16)
   80960:	1886703a 	and	r3,r3,r2
   80964:	80c7883a 	add	r3,r16,r3
   80968:	18800117 	ldw	r2,4(r3)
   8096c:	81400217 	ldw	r5,8(r16)
   80970:	9009883a 	mov	r4,r18
   80974:	10800054 	ori	r2,r2,1
   80978:	18800115 	stw	r2,4(r3)
   8097c:	31400215 	stw	r5,8(r6)
   80980:	29800315 	stw	r6,12(r5)
   80984:	00832540 	call	83254 <__malloc_unlock>
   80988:	80c00204 	addi	r3,r16,8
   8098c:	003faa06 	br	80838 <_malloc_r+0x50>
   80990:	00800104 	movi	r2,4
   80994:	10c0052e 	bgeu	r2,r3,809ac <_malloc_r+0x1c4>
   80998:	00800504 	movi	r2,20
   8099c:	10c07836 	bltu	r2,r3,80b80 <_malloc_r+0x398>
   809a0:	198016c4 	addi	r6,r3,91
   809a4:	300490fa 	slli	r2,r6,3
   809a8:	003fbc06 	br	8089c <_malloc_r+0xb4>
   809ac:	8804d1ba 	srli	r2,r17,6
   809b0:	11800e04 	addi	r6,r2,56
   809b4:	300490fa 	slli	r2,r6,3
   809b8:	003fb806 	br	8089c <_malloc_r+0xb4>
   809bc:	00807fc4 	movi	r2,511
   809c0:	1140bb36 	bltu	r2,r5,80cb0 <_malloc_r+0x4c8>
   809c4:	2806d0fa 	srli	r3,r5,3
   809c8:	573ffe04 	addi	fp,r10,-8
   809cc:	00800044 	movi	r2,1
   809d0:	180890fa 	slli	r4,r3,3
   809d4:	1807d0ba 	srai	r3,r3,2
   809d8:	e1c00117 	ldw	r7,4(fp)
   809dc:	5909883a 	add	r4,r11,r4
   809e0:	21400217 	ldw	r5,8(r4)
   809e4:	10c4983a 	sll	r2,r2,r3
   809e8:	81000315 	stw	r4,12(r16)
   809ec:	81400215 	stw	r5,8(r16)
   809f0:	388eb03a 	or	r7,r7,r2
   809f4:	2c000315 	stw	r16,12(r5)
   809f8:	24000215 	stw	r16,8(r4)
   809fc:	e1c00115 	stw	r7,4(fp)
   80a00:	4807883a 	mov	r3,r9
   80a04:	4800cd16 	blt	r9,zero,80d3c <_malloc_r+0x554>
   80a08:	1807d0ba 	srai	r3,r3,2
   80a0c:	00800044 	movi	r2,1
   80a10:	10c8983a 	sll	r4,r2,r3
   80a14:	39004436 	bltu	r7,r4,80b28 <_malloc_r+0x340>
   80a18:	21c4703a 	and	r2,r4,r7
   80a1c:	10000a1e 	bne	r2,zero,80a48 <_malloc_r+0x260>
   80a20:	2109883a 	add	r4,r4,r4
   80a24:	00bfff04 	movi	r2,-4
   80a28:	4884703a 	and	r2,r9,r2
   80a2c:	3906703a 	and	r3,r7,r4
   80a30:	12400104 	addi	r9,r2,4
   80a34:	1800041e 	bne	r3,zero,80a48 <_malloc_r+0x260>
   80a38:	2109883a 	add	r4,r4,r4
   80a3c:	3904703a 	and	r2,r7,r4
   80a40:	4a400104 	addi	r9,r9,4
   80a44:	103ffc26 	beq	r2,zero,80a38 <_malloc_r+0x250>
   80a48:	480490fa 	slli	r2,r9,3
   80a4c:	4819883a 	mov	r12,r9
   80a50:	023fff04 	movi	r8,-4
   80a54:	589b883a 	add	r13,r11,r2
   80a58:	6807883a 	mov	r3,r13
   80a5c:	014003c4 	movi	r5,15
   80a60:	1c000317 	ldw	r16,12(r3)
   80a64:	1c00041e 	bne	r3,r16,80a78 <_malloc_r+0x290>
   80a68:	0000a706 	br	80d08 <_malloc_r+0x520>
   80a6c:	3000ab0e 	bge	r6,zero,80d1c <_malloc_r+0x534>
   80a70:	84000317 	ldw	r16,12(r16)
   80a74:	1c00a426 	beq	r3,r16,80d08 <_malloc_r+0x520>
   80a78:	80800117 	ldw	r2,4(r16)
   80a7c:	1204703a 	and	r2,r2,r8
   80a80:	144dc83a 	sub	r6,r2,r17
   80a84:	29bff90e 	bge	r5,r6,80a6c <_malloc_r+0x284>
   80a88:	81000317 	ldw	r4,12(r16)
   80a8c:	80c00217 	ldw	r3,8(r16)
   80a90:	89400054 	ori	r5,r17,1
   80a94:	8445883a 	add	r2,r16,r17
   80a98:	20c00215 	stw	r3,8(r4)
   80a9c:	19000315 	stw	r4,12(r3)
   80aa0:	81400115 	stw	r5,4(r16)
   80aa4:	1187883a 	add	r3,r2,r6
   80aa8:	31000054 	ori	r4,r6,1
   80aac:	50800315 	stw	r2,12(r10)
   80ab0:	50800215 	stw	r2,8(r10)
   80ab4:	19800015 	stw	r6,0(r3)
   80ab8:	11000115 	stw	r4,4(r2)
   80abc:	12800215 	stw	r10,8(r2)
   80ac0:	12800315 	stw	r10,12(r2)
   80ac4:	9009883a 	mov	r4,r18
   80ac8:	00832540 	call	83254 <__malloc_unlock>
   80acc:	80c00204 	addi	r3,r16,8
   80ad0:	003f5906 	br	80838 <_malloc_r+0x50>
   80ad4:	8109883a 	add	r4,r16,r4
   80ad8:	20800117 	ldw	r2,4(r4)
   80adc:	80c00217 	ldw	r3,8(r16)
   80ae0:	81400317 	ldw	r5,12(r16)
   80ae4:	10800054 	ori	r2,r2,1
   80ae8:	20800115 	stw	r2,4(r4)
   80aec:	28c00215 	stw	r3,8(r5)
   80af0:	19400315 	stw	r5,12(r3)
   80af4:	9009883a 	mov	r4,r18
   80af8:	00832540 	call	83254 <__malloc_unlock>
   80afc:	80c00204 	addi	r3,r16,8
   80b00:	003f4d06 	br	80838 <_malloc_r+0x50>
   80b04:	80800204 	addi	r2,r16,8
   80b08:	14000317 	ldw	r16,12(r2)
   80b0c:	143f911e 	bne	r2,r16,80954 <_malloc_r+0x16c>
   80b10:	1a400084 	addi	r9,r3,2
   80b14:	003f7306 	br	808e4 <_malloc_r+0xfc>
   80b18:	88c00054 	ori	r3,r17,1
   80b1c:	8445883a 	add	r2,r16,r17
   80b20:	80c00115 	stw	r3,4(r16)
   80b24:	003fdf06 	br	80aa4 <_malloc_r+0x2bc>
   80b28:	e4000217 	ldw	r16,8(fp)
   80b2c:	00bfff04 	movi	r2,-4
   80b30:	80c00117 	ldw	r3,4(r16)
   80b34:	802d883a 	mov	r22,r16
   80b38:	18aa703a 	and	r21,r3,r2
   80b3c:	ac401636 	bltu	r21,r17,80b98 <_malloc_r+0x3b0>
   80b40:	ac49c83a 	sub	r4,r21,r17
   80b44:	008003c4 	movi	r2,15
   80b48:	1100130e 	bge	r2,r4,80b98 <_malloc_r+0x3b0>
   80b4c:	88800054 	ori	r2,r17,1
   80b50:	8447883a 	add	r3,r16,r17
   80b54:	80800115 	stw	r2,4(r16)
   80b58:	20800054 	ori	r2,r4,1
   80b5c:	18800115 	stw	r2,4(r3)
   80b60:	e0c00215 	stw	r3,8(fp)
   80b64:	9009883a 	mov	r4,r18
   80b68:	00832540 	call	83254 <__malloc_unlock>
   80b6c:	80c00204 	addi	r3,r16,8
   80b70:	003f3106 	br	80838 <_malloc_r+0x50>
   80b74:	39c00117 	ldw	r7,4(r7)
   80b78:	573ffe04 	addi	fp,r10,-8
   80b7c:	003fa006 	br	80a00 <_malloc_r+0x218>
   80b80:	00801504 	movi	r2,84
   80b84:	10c06736 	bltu	r2,r3,80d24 <_malloc_r+0x53c>
   80b88:	8804d33a 	srli	r2,r17,12
   80b8c:	11801b84 	addi	r6,r2,110
   80b90:	300490fa 	slli	r2,r6,3
   80b94:	003f4106 	br	8089c <_malloc_r+0xb4>
   80b98:	d0a6ec17 	ldw	r2,-25680(gp)
   80b9c:	d0e00317 	ldw	r3,-32756(gp)
   80ba0:	053fffc4 	movi	r20,-1
   80ba4:	10800404 	addi	r2,r2,16
   80ba8:	88a7883a 	add	r19,r17,r2
   80bac:	1d000326 	beq	r3,r20,80bbc <_malloc_r+0x3d4>
   80bb0:	98c3ffc4 	addi	r3,r19,4095
   80bb4:	00bc0004 	movi	r2,-4096
   80bb8:	18a6703a 	and	r19,r3,r2
   80bbc:	9009883a 	mov	r4,r18
   80bc0:	980b883a 	mov	r5,r19
   80bc4:	00817800 	call	81780 <_sbrk_r>
   80bc8:	1009883a 	mov	r4,r2
   80bcc:	15000426 	beq	r2,r20,80be0 <_malloc_r+0x3f8>
   80bd0:	854b883a 	add	r5,r16,r21
   80bd4:	1029883a 	mov	r20,r2
   80bd8:	11405a2e 	bgeu	r2,r5,80d44 <_malloc_r+0x55c>
   80bdc:	87000c26 	beq	r16,fp,80c10 <_malloc_r+0x428>
   80be0:	e4000217 	ldw	r16,8(fp)
   80be4:	80c00117 	ldw	r3,4(r16)
   80be8:	00bfff04 	movi	r2,-4
   80bec:	1884703a 	and	r2,r3,r2
   80bf0:	14400336 	bltu	r2,r17,80c00 <_malloc_r+0x418>
   80bf4:	1449c83a 	sub	r4,r2,r17
   80bf8:	008003c4 	movi	r2,15
   80bfc:	113fd316 	blt	r2,r4,80b4c <_malloc_r+0x364>
   80c00:	9009883a 	mov	r4,r18
   80c04:	00832540 	call	83254 <__malloc_unlock>
   80c08:	0007883a 	mov	r3,zero
   80c0c:	003f0a06 	br	80838 <_malloc_r+0x50>
   80c10:	05c00274 	movhi	r23,9
   80c14:	bde8b004 	addi	r23,r23,-23872
   80c18:	b8800017 	ldw	r2,0(r23)
   80c1c:	988d883a 	add	r6,r19,r2
   80c20:	b9800015 	stw	r6,0(r23)
   80c24:	d0e00317 	ldw	r3,-32756(gp)
   80c28:	00bfffc4 	movi	r2,-1
   80c2c:	18808e26 	beq	r3,r2,80e68 <_malloc_r+0x680>
   80c30:	2145c83a 	sub	r2,r4,r5
   80c34:	3085883a 	add	r2,r6,r2
   80c38:	b8800015 	stw	r2,0(r23)
   80c3c:	20c001cc 	andi	r3,r4,7
   80c40:	18005f1e 	bne	r3,zero,80dc0 <_malloc_r+0x5d8>
   80c44:	000b883a 	mov	r5,zero
   80c48:	a4c5883a 	add	r2,r20,r19
   80c4c:	1083ffcc 	andi	r2,r2,4095
   80c50:	00c40004 	movi	r3,4096
   80c54:	1887c83a 	sub	r3,r3,r2
   80c58:	28e7883a 	add	r19,r5,r3
   80c5c:	9009883a 	mov	r4,r18
   80c60:	980b883a 	mov	r5,r19
   80c64:	00817800 	call	81780 <_sbrk_r>
   80c68:	1007883a 	mov	r3,r2
   80c6c:	00bfffc4 	movi	r2,-1
   80c70:	18807a26 	beq	r3,r2,80e5c <_malloc_r+0x674>
   80c74:	1d05c83a 	sub	r2,r3,r20
   80c78:	9885883a 	add	r2,r19,r2
   80c7c:	10c00054 	ori	r3,r2,1
   80c80:	b8800017 	ldw	r2,0(r23)
   80c84:	a021883a 	mov	r16,r20
   80c88:	a0c00115 	stw	r3,4(r20)
   80c8c:	9885883a 	add	r2,r19,r2
   80c90:	b8800015 	stw	r2,0(r23)
   80c94:	e5000215 	stw	r20,8(fp)
   80c98:	b7003626 	beq	r22,fp,80d74 <_malloc_r+0x58c>
   80c9c:	018003c4 	movi	r6,15
   80ca0:	35404b36 	bltu	r6,r21,80dd0 <_malloc_r+0x5e8>
   80ca4:	00800044 	movi	r2,1
   80ca8:	a0800115 	stw	r2,4(r20)
   80cac:	003fcd06 	br	80be4 <_malloc_r+0x3fc>
   80cb0:	2808d27a 	srli	r4,r5,9
   80cb4:	2000371e 	bne	r4,zero,80d94 <_malloc_r+0x5ac>
   80cb8:	2808d0fa 	srli	r4,r5,3
   80cbc:	200690fa 	slli	r3,r4,3
   80cc0:	1ad1883a 	add	r8,r3,r11
   80cc4:	41800217 	ldw	r6,8(r8)
   80cc8:	41805b26 	beq	r8,r6,80e38 <_malloc_r+0x650>
   80ccc:	30800117 	ldw	r2,4(r6)
   80cd0:	00ffff04 	movi	r3,-4
   80cd4:	10c4703a 	and	r2,r2,r3
   80cd8:	2880022e 	bgeu	r5,r2,80ce4 <_malloc_r+0x4fc>
   80cdc:	31800217 	ldw	r6,8(r6)
   80ce0:	41bffa1e 	bne	r8,r6,80ccc <_malloc_r+0x4e4>
   80ce4:	32000317 	ldw	r8,12(r6)
   80ce8:	39c00117 	ldw	r7,4(r7)
   80cec:	82000315 	stw	r8,12(r16)
   80cf0:	81800215 	stw	r6,8(r16)
   80cf4:	07000234 	movhi	fp,8
   80cf8:	e71bec04 	addi	fp,fp,28592
   80cfc:	34000315 	stw	r16,12(r6)
   80d00:	44000215 	stw	r16,8(r8)
   80d04:	003f3e06 	br	80a00 <_malloc_r+0x218>
   80d08:	63000044 	addi	r12,r12,1
   80d0c:	608000cc 	andi	r2,r12,3
   80d10:	10005d26 	beq	r2,zero,80e88 <_malloc_r+0x6a0>
   80d14:	18c00204 	addi	r3,r3,8
   80d18:	003f5106 	br	80a60 <_malloc_r+0x278>
   80d1c:	8089883a 	add	r4,r16,r2
   80d20:	003f6d06 	br	80ad8 <_malloc_r+0x2f0>
   80d24:	00805504 	movi	r2,340
   80d28:	10c02036 	bltu	r2,r3,80dac <_malloc_r+0x5c4>
   80d2c:	8804d3fa 	srli	r2,r17,15
   80d30:	11801dc4 	addi	r6,r2,119
   80d34:	300490fa 	slli	r2,r6,3
   80d38:	003ed806 	br	8089c <_malloc_r+0xb4>
   80d3c:	48c000c4 	addi	r3,r9,3
   80d40:	003f3106 	br	80a08 <_malloc_r+0x220>
   80d44:	05c00274 	movhi	r23,9
   80d48:	bde8b004 	addi	r23,r23,-23872
   80d4c:	b8800017 	ldw	r2,0(r23)
   80d50:	988d883a 	add	r6,r19,r2
   80d54:	b9800015 	stw	r6,0(r23)
   80d58:	293fb21e 	bne	r5,r4,80c24 <_malloc_r+0x43c>
   80d5c:	2083ffcc 	andi	r2,r4,4095
   80d60:	103fb01e 	bne	r2,zero,80c24 <_malloc_r+0x43c>
   80d64:	e4000217 	ldw	r16,8(fp)
   80d68:	9d45883a 	add	r2,r19,r21
   80d6c:	10800054 	ori	r2,r2,1
   80d70:	80800115 	stw	r2,4(r16)
   80d74:	b8c00017 	ldw	r3,0(r23)
   80d78:	d0a6ed17 	ldw	r2,-25676(gp)
   80d7c:	10c0012e 	bgeu	r2,r3,80d84 <_malloc_r+0x59c>
   80d80:	d0e6ed15 	stw	r3,-25676(gp)
   80d84:	d0a6ee17 	ldw	r2,-25672(gp)
   80d88:	10ff962e 	bgeu	r2,r3,80be4 <_malloc_r+0x3fc>
   80d8c:	d0e6ee15 	stw	r3,-25672(gp)
   80d90:	003f9406 	br	80be4 <_malloc_r+0x3fc>
   80d94:	00800104 	movi	r2,4
   80d98:	11001e36 	bltu	r2,r4,80e14 <_malloc_r+0x62c>
   80d9c:	2804d1ba 	srli	r2,r5,6
   80da0:	11000e04 	addi	r4,r2,56
   80da4:	200690fa 	slli	r3,r4,3
   80da8:	003fc506 	br	80cc0 <_malloc_r+0x4d8>
   80dac:	00815504 	movi	r2,1364
   80db0:	10c01d2e 	bgeu	r2,r3,80e28 <_malloc_r+0x640>
   80db4:	01801f84 	movi	r6,126
   80db8:	0080fc04 	movi	r2,1008
   80dbc:	003eb706 	br	8089c <_malloc_r+0xb4>
   80dc0:	00800204 	movi	r2,8
   80dc4:	10cbc83a 	sub	r5,r2,r3
   80dc8:	2169883a 	add	r20,r4,r5
   80dcc:	003f9e06 	br	80c48 <_malloc_r+0x460>
   80dd0:	00bffe04 	movi	r2,-8
   80dd4:	a93ffd04 	addi	r4,r21,-12
   80dd8:	2088703a 	and	r4,r4,r2
   80ddc:	b10b883a 	add	r5,r22,r4
   80de0:	00c00144 	movi	r3,5
   80de4:	28c00215 	stw	r3,8(r5)
   80de8:	28c00115 	stw	r3,4(r5)
   80dec:	b0800117 	ldw	r2,4(r22)
   80df0:	1080004c 	andi	r2,r2,1
   80df4:	2084b03a 	or	r2,r4,r2
   80df8:	b0800115 	stw	r2,4(r22)
   80dfc:	313fdd2e 	bgeu	r6,r4,80d74 <_malloc_r+0x58c>
   80e00:	b1400204 	addi	r5,r22,8
   80e04:	9009883a 	mov	r4,r18
   80e08:	0081f7c0 	call	81f7c <_free_r>
   80e0c:	e4000217 	ldw	r16,8(fp)
   80e10:	003fd806 	br	80d74 <_malloc_r+0x58c>
   80e14:	00800504 	movi	r2,20
   80e18:	11001536 	bltu	r2,r4,80e70 <_malloc_r+0x688>
   80e1c:	210016c4 	addi	r4,r4,91
   80e20:	200690fa 	slli	r3,r4,3
   80e24:	003fa606 	br	80cc0 <_malloc_r+0x4d8>
   80e28:	8804d4ba 	srli	r2,r17,18
   80e2c:	11801f04 	addi	r6,r2,124
   80e30:	300490fa 	slli	r2,r6,3
   80e34:	003e9906 	br	8089c <_malloc_r+0xb4>
   80e38:	2009d0ba 	srai	r4,r4,2
   80e3c:	01400234 	movhi	r5,8
   80e40:	295bec04 	addi	r5,r5,28592
   80e44:	00c00044 	movi	r3,1
   80e48:	28800117 	ldw	r2,4(r5)
   80e4c:	1906983a 	sll	r3,r3,r4
   80e50:	10c4b03a 	or	r2,r2,r3
   80e54:	28800115 	stw	r2,4(r5)
   80e58:	003fa306 	br	80ce8 <_malloc_r+0x500>
   80e5c:	0027883a 	mov	r19,zero
   80e60:	00c00044 	movi	r3,1
   80e64:	003f8606 	br	80c80 <_malloc_r+0x498>
   80e68:	d1200315 	stw	r4,-32756(gp)
   80e6c:	003f7306 	br	80c3c <_malloc_r+0x454>
   80e70:	00801504 	movi	r2,84
   80e74:	11001936 	bltu	r2,r4,80edc <_malloc_r+0x6f4>
   80e78:	2804d33a 	srli	r2,r5,12
   80e7c:	11001b84 	addi	r4,r2,110
   80e80:	200690fa 	slli	r3,r4,3
   80e84:	003f8e06 	br	80cc0 <_malloc_r+0x4d8>
   80e88:	480b883a 	mov	r5,r9
   80e8c:	6807883a 	mov	r3,r13
   80e90:	288000cc 	andi	r2,r5,3
   80e94:	18fffe04 	addi	r3,r3,-8
   80e98:	297fffc4 	addi	r5,r5,-1
   80e9c:	10001526 	beq	r2,zero,80ef4 <_malloc_r+0x70c>
   80ea0:	18800217 	ldw	r2,8(r3)
   80ea4:	10fffa26 	beq	r2,r3,80e90 <_malloc_r+0x6a8>
   80ea8:	2109883a 	add	r4,r4,r4
   80eac:	393f1e36 	bltu	r7,r4,80b28 <_malloc_r+0x340>
   80eb0:	203f1d26 	beq	r4,zero,80b28 <_malloc_r+0x340>
   80eb4:	21c4703a 	and	r2,r4,r7
   80eb8:	10000226 	beq	r2,zero,80ec4 <_malloc_r+0x6dc>
   80ebc:	6013883a 	mov	r9,r12
   80ec0:	003ee106 	br	80a48 <_malloc_r+0x260>
   80ec4:	2109883a 	add	r4,r4,r4
   80ec8:	3904703a 	and	r2,r7,r4
   80ecc:	63000104 	addi	r12,r12,4
   80ed0:	103ffc26 	beq	r2,zero,80ec4 <_malloc_r+0x6dc>
   80ed4:	6013883a 	mov	r9,r12
   80ed8:	003edb06 	br	80a48 <_malloc_r+0x260>
   80edc:	00805504 	movi	r2,340
   80ee0:	11000836 	bltu	r2,r4,80f04 <_malloc_r+0x71c>
   80ee4:	2804d3fa 	srli	r2,r5,15
   80ee8:	11001dc4 	addi	r4,r2,119
   80eec:	200690fa 	slli	r3,r4,3
   80ef0:	003f7306 	br	80cc0 <_malloc_r+0x4d8>
   80ef4:	0104303a 	nor	r2,zero,r4
   80ef8:	388e703a 	and	r7,r7,r2
   80efc:	e1c00115 	stw	r7,4(fp)
   80f00:	003fe906 	br	80ea8 <_malloc_r+0x6c0>
   80f04:	00815504 	movi	r2,1364
   80f08:	1100032e 	bgeu	r2,r4,80f18 <_malloc_r+0x730>
   80f0c:	01001f84 	movi	r4,126
   80f10:	00c0fc04 	movi	r3,1008
   80f14:	003f6a06 	br	80cc0 <_malloc_r+0x4d8>
   80f18:	2804d4ba 	srli	r2,r5,18
   80f1c:	11001f04 	addi	r4,r2,124
   80f20:	200690fa 	slli	r3,r4,3
   80f24:	003f6606 	br	80cc0 <_malloc_r+0x4d8>

00080f28 <memchr>:
   80f28:	008000c4 	movi	r2,3
   80f2c:	29403fcc 	andi	r5,r5,255
   80f30:	2007883a 	mov	r3,r4
   80f34:	1180022e 	bgeu	r2,r6,80f40 <memchr+0x18>
   80f38:	2084703a 	and	r2,r4,r2
   80f3c:	10000b26 	beq	r2,zero,80f6c <memchr+0x44>
   80f40:	313fffc4 	addi	r4,r6,-1
   80f44:	3000051e 	bne	r6,zero,80f5c <memchr+0x34>
   80f48:	00002c06 	br	80ffc <memchr+0xd4>
   80f4c:	213fffc4 	addi	r4,r4,-1
   80f50:	00bfffc4 	movi	r2,-1
   80f54:	18c00044 	addi	r3,r3,1
   80f58:	20802826 	beq	r4,r2,80ffc <memchr+0xd4>
   80f5c:	18800003 	ldbu	r2,0(r3)
   80f60:	28bffa1e 	bne	r5,r2,80f4c <memchr+0x24>
   80f64:	1805883a 	mov	r2,r3
   80f68:	f800283a 	ret
   80f6c:	0011883a 	mov	r8,zero
   80f70:	0007883a 	mov	r3,zero
   80f74:	01c00104 	movi	r7,4
   80f78:	4004923a 	slli	r2,r8,8
   80f7c:	18c00044 	addi	r3,r3,1
   80f80:	1151883a 	add	r8,r2,r5
   80f84:	19fffc1e 	bne	r3,r7,80f78 <memchr+0x50>
   80f88:	02bfbff4 	movhi	r10,65279
   80f8c:	52bfbfc4 	addi	r10,r10,-257
   80f90:	02602074 	movhi	r9,32897
   80f94:	4a602004 	addi	r9,r9,-32640
   80f98:	02c000c4 	movi	r11,3
   80f9c:	20800017 	ldw	r2,0(r4)
   80fa0:	31bfff04 	addi	r6,r6,-4
   80fa4:	200f883a 	mov	r7,r4
   80fa8:	1204f03a 	xor	r2,r2,r8
   80fac:	1287883a 	add	r3,r2,r10
   80fb0:	1a46703a 	and	r3,r3,r9
   80fb4:	0084303a 	nor	r2,zero,r2
   80fb8:	10c4703a 	and	r2,r2,r3
   80fbc:	10000b26 	beq	r2,zero,80fec <memchr+0xc4>
   80fc0:	20800003 	ldbu	r2,0(r4)
   80fc4:	28800f26 	beq	r5,r2,81004 <memchr+0xdc>
   80fc8:	20800043 	ldbu	r2,1(r4)
   80fcc:	21c00044 	addi	r7,r4,1
   80fd0:	28800c26 	beq	r5,r2,81004 <memchr+0xdc>
   80fd4:	20800083 	ldbu	r2,2(r4)
   80fd8:	21c00084 	addi	r7,r4,2
   80fdc:	28800926 	beq	r5,r2,81004 <memchr+0xdc>
   80fe0:	208000c3 	ldbu	r2,3(r4)
   80fe4:	21c000c4 	addi	r7,r4,3
   80fe8:	28800626 	beq	r5,r2,81004 <memchr+0xdc>
   80fec:	21000104 	addi	r4,r4,4
   80ff0:	59bfea36 	bltu	r11,r6,80f9c <memchr+0x74>
   80ff4:	2007883a 	mov	r3,r4
   80ff8:	003fd106 	br	80f40 <memchr+0x18>
   80ffc:	0005883a 	mov	r2,zero
   81000:	f800283a 	ret
   81004:	3805883a 	mov	r2,r7
   81008:	f800283a 	ret

0008100c <memcpy>:
   8100c:	01c003c4 	movi	r7,15
   81010:	2007883a 	mov	r3,r4
   81014:	3980032e 	bgeu	r7,r6,81024 <memcpy+0x18>
   81018:	2904b03a 	or	r2,r5,r4
   8101c:	108000cc 	andi	r2,r2,3
   81020:	10000926 	beq	r2,zero,81048 <memcpy+0x3c>
   81024:	30000626 	beq	r6,zero,81040 <memcpy+0x34>
   81028:	30cd883a 	add	r6,r6,r3
   8102c:	28800003 	ldbu	r2,0(r5)
   81030:	29400044 	addi	r5,r5,1
   81034:	18800005 	stb	r2,0(r3)
   81038:	18c00044 	addi	r3,r3,1
   8103c:	30fffb1e 	bne	r6,r3,8102c <memcpy+0x20>
   81040:	2005883a 	mov	r2,r4
   81044:	f800283a 	ret
   81048:	3811883a 	mov	r8,r7
   8104c:	200f883a 	mov	r7,r4
   81050:	28c00017 	ldw	r3,0(r5)
   81054:	31bffc04 	addi	r6,r6,-16
   81058:	38c00015 	stw	r3,0(r7)
   8105c:	28800117 	ldw	r2,4(r5)
   81060:	38800115 	stw	r2,4(r7)
   81064:	28c00217 	ldw	r3,8(r5)
   81068:	38c00215 	stw	r3,8(r7)
   8106c:	28800317 	ldw	r2,12(r5)
   81070:	29400404 	addi	r5,r5,16
   81074:	38800315 	stw	r2,12(r7)
   81078:	39c00404 	addi	r7,r7,16
   8107c:	41bff436 	bltu	r8,r6,81050 <memcpy+0x44>
   81080:	008000c4 	movi	r2,3
   81084:	1180072e 	bgeu	r2,r6,810a4 <memcpy+0x98>
   81088:	1007883a 	mov	r3,r2
   8108c:	28800017 	ldw	r2,0(r5)
   81090:	31bfff04 	addi	r6,r6,-4
   81094:	29400104 	addi	r5,r5,4
   81098:	38800015 	stw	r2,0(r7)
   8109c:	39c00104 	addi	r7,r7,4
   810a0:	19bffa36 	bltu	r3,r6,8108c <memcpy+0x80>
   810a4:	3807883a 	mov	r3,r7
   810a8:	003fde06 	br	81024 <memcpy+0x18>

000810ac <memmove>:
   810ac:	2807883a 	mov	r3,r5
   810b0:	2011883a 	mov	r8,r4
   810b4:	29000c2e 	bgeu	r5,r4,810e8 <memmove+0x3c>
   810b8:	298f883a 	add	r7,r5,r6
   810bc:	21c00a2e 	bgeu	r4,r7,810e8 <memmove+0x3c>
   810c0:	30000726 	beq	r6,zero,810e0 <memmove+0x34>
   810c4:	2187883a 	add	r3,r4,r6
   810c8:	198dc83a 	sub	r6,r3,r6
   810cc:	39ffffc4 	addi	r7,r7,-1
   810d0:	38800003 	ldbu	r2,0(r7)
   810d4:	18ffffc4 	addi	r3,r3,-1
   810d8:	18800005 	stb	r2,0(r3)
   810dc:	19bffb1e 	bne	r3,r6,810cc <memmove+0x20>
   810e0:	2005883a 	mov	r2,r4
   810e4:	f800283a 	ret
   810e8:	01c003c4 	movi	r7,15
   810ec:	39800a36 	bltu	r7,r6,81118 <memmove+0x6c>
   810f0:	303ffb26 	beq	r6,zero,810e0 <memmove+0x34>
   810f4:	400f883a 	mov	r7,r8
   810f8:	320d883a 	add	r6,r6,r8
   810fc:	28800003 	ldbu	r2,0(r5)
   81100:	29400044 	addi	r5,r5,1
   81104:	38800005 	stb	r2,0(r7)
   81108:	39c00044 	addi	r7,r7,1
   8110c:	39bffb1e 	bne	r7,r6,810fc <memmove+0x50>
   81110:	2005883a 	mov	r2,r4
   81114:	f800283a 	ret
   81118:	1904b03a 	or	r2,r3,r4
   8111c:	108000cc 	andi	r2,r2,3
   81120:	103ff31e 	bne	r2,zero,810f0 <memmove+0x44>
   81124:	3811883a 	mov	r8,r7
   81128:	180b883a 	mov	r5,r3
   8112c:	200f883a 	mov	r7,r4
   81130:	28c00017 	ldw	r3,0(r5)
   81134:	31bffc04 	addi	r6,r6,-16
   81138:	38c00015 	stw	r3,0(r7)
   8113c:	28800117 	ldw	r2,4(r5)
   81140:	38800115 	stw	r2,4(r7)
   81144:	28c00217 	ldw	r3,8(r5)
   81148:	38c00215 	stw	r3,8(r7)
   8114c:	28800317 	ldw	r2,12(r5)
   81150:	29400404 	addi	r5,r5,16
   81154:	38800315 	stw	r2,12(r7)
   81158:	39c00404 	addi	r7,r7,16
   8115c:	41bff436 	bltu	r8,r6,81130 <memmove+0x84>
   81160:	008000c4 	movi	r2,3
   81164:	1180072e 	bgeu	r2,r6,81184 <memmove+0xd8>
   81168:	1007883a 	mov	r3,r2
   8116c:	28800017 	ldw	r2,0(r5)
   81170:	31bfff04 	addi	r6,r6,-4
   81174:	29400104 	addi	r5,r5,4
   81178:	38800015 	stw	r2,0(r7)
   8117c:	39c00104 	addi	r7,r7,4
   81180:	19bffa36 	bltu	r3,r6,8116c <memmove+0xc0>
   81184:	3811883a 	mov	r8,r7
   81188:	003fd906 	br	810f0 <memmove+0x44>

0008118c <_realloc_r>:
   8118c:	defff404 	addi	sp,sp,-48
   81190:	dd800815 	stw	r22,32(sp)
   81194:	dc800415 	stw	r18,16(sp)
   81198:	dc400315 	stw	r17,12(sp)
   8119c:	dfc00b15 	stw	ra,44(sp)
   811a0:	df000a15 	stw	fp,40(sp)
   811a4:	ddc00915 	stw	r23,36(sp)
   811a8:	dd400715 	stw	r21,28(sp)
   811ac:	dd000615 	stw	r20,24(sp)
   811b0:	dcc00515 	stw	r19,20(sp)
   811b4:	dc000215 	stw	r16,8(sp)
   811b8:	2825883a 	mov	r18,r5
   811bc:	3023883a 	mov	r17,r6
   811c0:	202d883a 	mov	r22,r4
   811c4:	2800c926 	beq	r5,zero,814ec <_realloc_r+0x360>
   811c8:	00832340 	call	83234 <__malloc_lock>
   811cc:	943ffe04 	addi	r16,r18,-8
   811d0:	88c002c4 	addi	r3,r17,11
   811d4:	00800584 	movi	r2,22
   811d8:	82000117 	ldw	r8,4(r16)
   811dc:	10c01b2e 	bgeu	r2,r3,8124c <_realloc_r+0xc0>
   811e0:	00bffe04 	movi	r2,-8
   811e4:	188e703a 	and	r7,r3,r2
   811e8:	3839883a 	mov	fp,r7
   811ec:	38001a16 	blt	r7,zero,81258 <_realloc_r+0xcc>
   811f0:	e4401936 	bltu	fp,r17,81258 <_realloc_r+0xcc>
   811f4:	013fff04 	movi	r4,-4
   811f8:	4126703a 	and	r19,r8,r4
   811fc:	99c02616 	blt	r19,r7,81298 <_realloc_r+0x10c>
   81200:	802b883a 	mov	r21,r16
   81204:	9829883a 	mov	r20,r19
   81208:	84000204 	addi	r16,r16,8
   8120c:	a80f883a 	mov	r7,r21
   81210:	a70dc83a 	sub	r6,r20,fp
   81214:	008003c4 	movi	r2,15
   81218:	1180c136 	bltu	r2,r6,81520 <_realloc_r+0x394>
   8121c:	38800117 	ldw	r2,4(r7)
   81220:	a549883a 	add	r4,r20,r21
   81224:	1080004c 	andi	r2,r2,1
   81228:	a084b03a 	or	r2,r20,r2
   8122c:	38800115 	stw	r2,4(r7)
   81230:	20c00117 	ldw	r3,4(r4)
   81234:	18c00054 	ori	r3,r3,1
   81238:	20c00115 	stw	r3,4(r4)
   8123c:	b009883a 	mov	r4,r22
   81240:	00832540 	call	83254 <__malloc_unlock>
   81244:	8023883a 	mov	r17,r16
   81248:	00000606 	br	81264 <_realloc_r+0xd8>
   8124c:	01c00404 	movi	r7,16
   81250:	3839883a 	mov	fp,r7
   81254:	e47fe72e 	bgeu	fp,r17,811f4 <_realloc_r+0x68>
   81258:	00800304 	movi	r2,12
   8125c:	0023883a 	mov	r17,zero
   81260:	b0800015 	stw	r2,0(r22)
   81264:	8805883a 	mov	r2,r17
   81268:	dfc00b17 	ldw	ra,44(sp)
   8126c:	df000a17 	ldw	fp,40(sp)
   81270:	ddc00917 	ldw	r23,36(sp)
   81274:	dd800817 	ldw	r22,32(sp)
   81278:	dd400717 	ldw	r21,28(sp)
   8127c:	dd000617 	ldw	r20,24(sp)
   81280:	dcc00517 	ldw	r19,20(sp)
   81284:	dc800417 	ldw	r18,16(sp)
   81288:	dc400317 	ldw	r17,12(sp)
   8128c:	dc000217 	ldw	r16,8(sp)
   81290:	dec00c04 	addi	sp,sp,48
   81294:	f800283a 	ret
   81298:	00800234 	movhi	r2,8
   8129c:	109bec04 	addi	r2,r2,28592
   812a0:	12400217 	ldw	r9,8(r2)
   812a4:	84cd883a 	add	r6,r16,r19
   812a8:	802b883a 	mov	r21,r16
   812ac:	3240b926 	beq	r6,r9,81594 <_realloc_r+0x408>
   812b0:	31400117 	ldw	r5,4(r6)
   812b4:	00bfff84 	movi	r2,-2
   812b8:	2884703a 	and	r2,r5,r2
   812bc:	1185883a 	add	r2,r2,r6
   812c0:	10c00117 	ldw	r3,4(r2)
   812c4:	18c0004c 	andi	r3,r3,1
   812c8:	1807003a 	cmpeq	r3,r3,zero
   812cc:	1800a326 	beq	r3,zero,8155c <_realloc_r+0x3d0>
   812d0:	2908703a 	and	r4,r5,r4
   812d4:	9929883a 	add	r20,r19,r4
   812d8:	a1c0a30e 	bge	r20,r7,81568 <_realloc_r+0x3dc>
   812dc:	4080004c 	andi	r2,r8,1
   812e0:	1000551e 	bne	r2,zero,81438 <_realloc_r+0x2ac>
   812e4:	80800017 	ldw	r2,0(r16)
   812e8:	80afc83a 	sub	r23,r16,r2
   812ec:	b8c00117 	ldw	r3,4(r23)
   812f0:	00bfff04 	movi	r2,-4
   812f4:	1884703a 	and	r2,r3,r2
   812f8:	30002e26 	beq	r6,zero,813b4 <_realloc_r+0x228>
   812fc:	3240b926 	beq	r6,r9,815e4 <_realloc_r+0x458>
   81300:	98a9883a 	add	r20,r19,r2
   81304:	2509883a 	add	r4,r4,r20
   81308:	d9000015 	stw	r4,0(sp)
   8130c:	21c02a16 	blt	r4,r7,813b8 <_realloc_r+0x22c>
   81310:	30800317 	ldw	r2,12(r6)
   81314:	30c00217 	ldw	r3,8(r6)
   81318:	01400904 	movi	r5,36
   8131c:	99bfff04 	addi	r6,r19,-4
   81320:	18800315 	stw	r2,12(r3)
   81324:	10c00215 	stw	r3,8(r2)
   81328:	b9000317 	ldw	r4,12(r23)
   8132c:	b8800217 	ldw	r2,8(r23)
   81330:	b82b883a 	mov	r21,r23
   81334:	bc000204 	addi	r16,r23,8
   81338:	20800215 	stw	r2,8(r4)
   8133c:	11000315 	stw	r4,12(r2)
   81340:	2980e436 	bltu	r5,r6,816d4 <_realloc_r+0x548>
   81344:	008004c4 	movi	r2,19
   81348:	9009883a 	mov	r4,r18
   8134c:	8011883a 	mov	r8,r16
   81350:	11800f2e 	bgeu	r2,r6,81390 <_realloc_r+0x204>
   81354:	90800017 	ldw	r2,0(r18)
   81358:	ba000404 	addi	r8,r23,16
   8135c:	91000204 	addi	r4,r18,8
   81360:	b8800215 	stw	r2,8(r23)
   81364:	90c00117 	ldw	r3,4(r18)
   81368:	008006c4 	movi	r2,27
   8136c:	b8c00315 	stw	r3,12(r23)
   81370:	1180072e 	bgeu	r2,r6,81390 <_realloc_r+0x204>
   81374:	90c00217 	ldw	r3,8(r18)
   81378:	ba000604 	addi	r8,r23,24
   8137c:	91000404 	addi	r4,r18,16
   81380:	b8c00415 	stw	r3,16(r23)
   81384:	90800317 	ldw	r2,12(r18)
   81388:	b8800515 	stw	r2,20(r23)
   8138c:	3140e726 	beq	r6,r5,8172c <_realloc_r+0x5a0>
   81390:	20800017 	ldw	r2,0(r4)
   81394:	dd000017 	ldw	r20,0(sp)
   81398:	b80f883a 	mov	r7,r23
   8139c:	40800015 	stw	r2,0(r8)
   813a0:	20c00117 	ldw	r3,4(r4)
   813a4:	40c00115 	stw	r3,4(r8)
   813a8:	20800217 	ldw	r2,8(r4)
   813ac:	40800215 	stw	r2,8(r8)
   813b0:	003f9706 	br	81210 <_realloc_r+0x84>
   813b4:	98a9883a 	add	r20,r19,r2
   813b8:	a1c01f16 	blt	r20,r7,81438 <_realloc_r+0x2ac>
   813bc:	b8c00317 	ldw	r3,12(r23)
   813c0:	b8800217 	ldw	r2,8(r23)
   813c4:	99bfff04 	addi	r6,r19,-4
   813c8:	01400904 	movi	r5,36
   813cc:	b82b883a 	mov	r21,r23
   813d0:	18800215 	stw	r2,8(r3)
   813d4:	10c00315 	stw	r3,12(r2)
   813d8:	bc000204 	addi	r16,r23,8
   813dc:	2980c336 	bltu	r5,r6,816ec <_realloc_r+0x560>
   813e0:	008004c4 	movi	r2,19
   813e4:	9009883a 	mov	r4,r18
   813e8:	8011883a 	mov	r8,r16
   813ec:	11800f2e 	bgeu	r2,r6,8142c <_realloc_r+0x2a0>
   813f0:	90800017 	ldw	r2,0(r18)
   813f4:	ba000404 	addi	r8,r23,16
   813f8:	91000204 	addi	r4,r18,8
   813fc:	b8800215 	stw	r2,8(r23)
   81400:	90c00117 	ldw	r3,4(r18)
   81404:	008006c4 	movi	r2,27
   81408:	b8c00315 	stw	r3,12(r23)
   8140c:	1180072e 	bgeu	r2,r6,8142c <_realloc_r+0x2a0>
   81410:	90c00217 	ldw	r3,8(r18)
   81414:	ba000604 	addi	r8,r23,24
   81418:	91000404 	addi	r4,r18,16
   8141c:	b8c00415 	stw	r3,16(r23)
   81420:	90800317 	ldw	r2,12(r18)
   81424:	b8800515 	stw	r2,20(r23)
   81428:	3140c726 	beq	r6,r5,81748 <_realloc_r+0x5bc>
   8142c:	20800017 	ldw	r2,0(r4)
   81430:	b80f883a 	mov	r7,r23
   81434:	003fd906 	br	8139c <_realloc_r+0x210>
   81438:	880b883a 	mov	r5,r17
   8143c:	b009883a 	mov	r4,r22
   81440:	00807e80 	call	807e8 <_malloc_r>
   81444:	1023883a 	mov	r17,r2
   81448:	10002526 	beq	r2,zero,814e0 <_realloc_r+0x354>
   8144c:	80800117 	ldw	r2,4(r16)
   81450:	00ffff84 	movi	r3,-2
   81454:	893ffe04 	addi	r4,r17,-8
   81458:	10c4703a 	and	r2,r2,r3
   8145c:	8085883a 	add	r2,r16,r2
   81460:	20809526 	beq	r4,r2,816b8 <_realloc_r+0x52c>
   81464:	99bfff04 	addi	r6,r19,-4
   81468:	01c00904 	movi	r7,36
   8146c:	39804536 	bltu	r7,r6,81584 <_realloc_r+0x3f8>
   81470:	008004c4 	movi	r2,19
   81474:	9009883a 	mov	r4,r18
   81478:	880b883a 	mov	r5,r17
   8147c:	11800f2e 	bgeu	r2,r6,814bc <_realloc_r+0x330>
   81480:	90800017 	ldw	r2,0(r18)
   81484:	89400204 	addi	r5,r17,8
   81488:	91000204 	addi	r4,r18,8
   8148c:	88800015 	stw	r2,0(r17)
   81490:	90c00117 	ldw	r3,4(r18)
   81494:	008006c4 	movi	r2,27
   81498:	88c00115 	stw	r3,4(r17)
   8149c:	1180072e 	bgeu	r2,r6,814bc <_realloc_r+0x330>
   814a0:	90c00217 	ldw	r3,8(r18)
   814a4:	89400404 	addi	r5,r17,16
   814a8:	91000404 	addi	r4,r18,16
   814ac:	88c00215 	stw	r3,8(r17)
   814b0:	90800317 	ldw	r2,12(r18)
   814b4:	88800315 	stw	r2,12(r17)
   814b8:	31c09126 	beq	r6,r7,81700 <_realloc_r+0x574>
   814bc:	20800017 	ldw	r2,0(r4)
   814c0:	28800015 	stw	r2,0(r5)
   814c4:	20c00117 	ldw	r3,4(r4)
   814c8:	28c00115 	stw	r3,4(r5)
   814cc:	20800217 	ldw	r2,8(r4)
   814d0:	28800215 	stw	r2,8(r5)
   814d4:	900b883a 	mov	r5,r18
   814d8:	b009883a 	mov	r4,r22
   814dc:	0081f7c0 	call	81f7c <_free_r>
   814e0:	b009883a 	mov	r4,r22
   814e4:	00832540 	call	83254 <__malloc_unlock>
   814e8:	003f5e06 	br	81264 <_realloc_r+0xd8>
   814ec:	300b883a 	mov	r5,r6
   814f0:	dfc00b17 	ldw	ra,44(sp)
   814f4:	df000a17 	ldw	fp,40(sp)
   814f8:	ddc00917 	ldw	r23,36(sp)
   814fc:	dd800817 	ldw	r22,32(sp)
   81500:	dd400717 	ldw	r21,28(sp)
   81504:	dd000617 	ldw	r20,24(sp)
   81508:	dcc00517 	ldw	r19,20(sp)
   8150c:	dc800417 	ldw	r18,16(sp)
   81510:	dc400317 	ldw	r17,12(sp)
   81514:	dc000217 	ldw	r16,8(sp)
   81518:	dec00c04 	addi	sp,sp,48
   8151c:	00807e81 	jmpi	807e8 <_malloc_r>
   81520:	38800117 	ldw	r2,4(r7)
   81524:	e54b883a 	add	r5,fp,r21
   81528:	31000054 	ori	r4,r6,1
   8152c:	1080004c 	andi	r2,r2,1
   81530:	1704b03a 	or	r2,r2,fp
   81534:	38800115 	stw	r2,4(r7)
   81538:	29000115 	stw	r4,4(r5)
   8153c:	2987883a 	add	r3,r5,r6
   81540:	18800117 	ldw	r2,4(r3)
   81544:	29400204 	addi	r5,r5,8
   81548:	b009883a 	mov	r4,r22
   8154c:	10800054 	ori	r2,r2,1
   81550:	18800115 	stw	r2,4(r3)
   81554:	0081f7c0 	call	81f7c <_free_r>
   81558:	003f3806 	br	8123c <_realloc_r+0xb0>
   8155c:	000d883a 	mov	r6,zero
   81560:	0009883a 	mov	r4,zero
   81564:	003f5d06 	br	812dc <_realloc_r+0x150>
   81568:	30c00217 	ldw	r3,8(r6)
   8156c:	30800317 	ldw	r2,12(r6)
   81570:	800f883a 	mov	r7,r16
   81574:	84000204 	addi	r16,r16,8
   81578:	10c00215 	stw	r3,8(r2)
   8157c:	18800315 	stw	r2,12(r3)
   81580:	003f2306 	br	81210 <_realloc_r+0x84>
   81584:	8809883a 	mov	r4,r17
   81588:	900b883a 	mov	r5,r18
   8158c:	00810ac0 	call	810ac <memmove>
   81590:	003fd006 	br	814d4 <_realloc_r+0x348>
   81594:	30800117 	ldw	r2,4(r6)
   81598:	e0c00404 	addi	r3,fp,16
   8159c:	1108703a 	and	r4,r2,r4
   815a0:	9905883a 	add	r2,r19,r4
   815a4:	10ff4d16 	blt	r2,r3,812dc <_realloc_r+0x150>
   815a8:	1705c83a 	sub	r2,r2,fp
   815ac:	870b883a 	add	r5,r16,fp
   815b0:	10800054 	ori	r2,r2,1
   815b4:	28800115 	stw	r2,4(r5)
   815b8:	80c00117 	ldw	r3,4(r16)
   815bc:	00800234 	movhi	r2,8
   815c0:	109bec04 	addi	r2,r2,28592
   815c4:	b009883a 	mov	r4,r22
   815c8:	18c0004c 	andi	r3,r3,1
   815cc:	e0c6b03a 	or	r3,fp,r3
   815d0:	11400215 	stw	r5,8(r2)
   815d4:	80c00115 	stw	r3,4(r16)
   815d8:	00832540 	call	83254 <__malloc_unlock>
   815dc:	84400204 	addi	r17,r16,8
   815e0:	003f2006 	br	81264 <_realloc_r+0xd8>
   815e4:	98a9883a 	add	r20,r19,r2
   815e8:	2509883a 	add	r4,r4,r20
   815ec:	e0800404 	addi	r2,fp,16
   815f0:	d9000115 	stw	r4,4(sp)
   815f4:	20bf7016 	blt	r4,r2,813b8 <_realloc_r+0x22c>
   815f8:	b8c00317 	ldw	r3,12(r23)
   815fc:	b8800217 	ldw	r2,8(r23)
   81600:	99bfff04 	addi	r6,r19,-4
   81604:	01400904 	movi	r5,36
   81608:	18800215 	stw	r2,8(r3)
   8160c:	10c00315 	stw	r3,12(r2)
   81610:	bc400204 	addi	r17,r23,8
   81614:	29804136 	bltu	r5,r6,8171c <_realloc_r+0x590>
   81618:	008004c4 	movi	r2,19
   8161c:	9009883a 	mov	r4,r18
   81620:	880f883a 	mov	r7,r17
   81624:	11800f2e 	bgeu	r2,r6,81664 <_realloc_r+0x4d8>
   81628:	90800017 	ldw	r2,0(r18)
   8162c:	b9c00404 	addi	r7,r23,16
   81630:	91000204 	addi	r4,r18,8
   81634:	b8800215 	stw	r2,8(r23)
   81638:	90c00117 	ldw	r3,4(r18)
   8163c:	008006c4 	movi	r2,27
   81640:	b8c00315 	stw	r3,12(r23)
   81644:	1180072e 	bgeu	r2,r6,81664 <_realloc_r+0x4d8>
   81648:	90c00217 	ldw	r3,8(r18)
   8164c:	b9c00604 	addi	r7,r23,24
   81650:	91000404 	addi	r4,r18,16
   81654:	b8c00415 	stw	r3,16(r23)
   81658:	90800317 	ldw	r2,12(r18)
   8165c:	b8800515 	stw	r2,20(r23)
   81660:	31404026 	beq	r6,r5,81764 <_realloc_r+0x5d8>
   81664:	20800017 	ldw	r2,0(r4)
   81668:	38800015 	stw	r2,0(r7)
   8166c:	20c00117 	ldw	r3,4(r4)
   81670:	38c00115 	stw	r3,4(r7)
   81674:	20800217 	ldw	r2,8(r4)
   81678:	38800215 	stw	r2,8(r7)
   8167c:	d8c00117 	ldw	r3,4(sp)
   81680:	bf0b883a 	add	r5,r23,fp
   81684:	b009883a 	mov	r4,r22
   81688:	1f05c83a 	sub	r2,r3,fp
   8168c:	10800054 	ori	r2,r2,1
   81690:	28800115 	stw	r2,4(r5)
   81694:	b8c00117 	ldw	r3,4(r23)
   81698:	00800234 	movhi	r2,8
   8169c:	109bec04 	addi	r2,r2,28592
   816a0:	11400215 	stw	r5,8(r2)
   816a4:	18c0004c 	andi	r3,r3,1
   816a8:	e0c6b03a 	or	r3,fp,r3
   816ac:	b8c00115 	stw	r3,4(r23)
   816b0:	00832540 	call	83254 <__malloc_unlock>
   816b4:	003eeb06 	br	81264 <_realloc_r+0xd8>
   816b8:	20800117 	ldw	r2,4(r4)
   816bc:	00ffff04 	movi	r3,-4
   816c0:	800f883a 	mov	r7,r16
   816c4:	10c4703a 	and	r2,r2,r3
   816c8:	98a9883a 	add	r20,r19,r2
   816cc:	84000204 	addi	r16,r16,8
   816d0:	003ecf06 	br	81210 <_realloc_r+0x84>
   816d4:	900b883a 	mov	r5,r18
   816d8:	8009883a 	mov	r4,r16
   816dc:	00810ac0 	call	810ac <memmove>
   816e0:	dd000017 	ldw	r20,0(sp)
   816e4:	b80f883a 	mov	r7,r23
   816e8:	003ec906 	br	81210 <_realloc_r+0x84>
   816ec:	900b883a 	mov	r5,r18
   816f0:	8009883a 	mov	r4,r16
   816f4:	00810ac0 	call	810ac <memmove>
   816f8:	b80f883a 	mov	r7,r23
   816fc:	003ec406 	br	81210 <_realloc_r+0x84>
   81700:	90c00417 	ldw	r3,16(r18)
   81704:	89400604 	addi	r5,r17,24
   81708:	91000604 	addi	r4,r18,24
   8170c:	88c00415 	stw	r3,16(r17)
   81710:	90800517 	ldw	r2,20(r18)
   81714:	88800515 	stw	r2,20(r17)
   81718:	003f6806 	br	814bc <_realloc_r+0x330>
   8171c:	900b883a 	mov	r5,r18
   81720:	8809883a 	mov	r4,r17
   81724:	00810ac0 	call	810ac <memmove>
   81728:	003fd406 	br	8167c <_realloc_r+0x4f0>
   8172c:	90c00417 	ldw	r3,16(r18)
   81730:	91000604 	addi	r4,r18,24
   81734:	ba000804 	addi	r8,r23,32
   81738:	b8c00615 	stw	r3,24(r23)
   8173c:	90800517 	ldw	r2,20(r18)
   81740:	b8800715 	stw	r2,28(r23)
   81744:	003f1206 	br	81390 <_realloc_r+0x204>
   81748:	90c00417 	ldw	r3,16(r18)
   8174c:	91000604 	addi	r4,r18,24
   81750:	ba000804 	addi	r8,r23,32
   81754:	b8c00615 	stw	r3,24(r23)
   81758:	90800517 	ldw	r2,20(r18)
   8175c:	b8800715 	stw	r2,28(r23)
   81760:	003f3206 	br	8142c <_realloc_r+0x2a0>
   81764:	90c00417 	ldw	r3,16(r18)
   81768:	91000604 	addi	r4,r18,24
   8176c:	b9c00804 	addi	r7,r23,32
   81770:	b8c00615 	stw	r3,24(r23)
   81774:	90800517 	ldw	r2,20(r18)
   81778:	b8800715 	stw	r2,28(r23)
   8177c:	003fb906 	br	81664 <_realloc_r+0x4d8>

00081780 <_sbrk_r>:
   81780:	defffd04 	addi	sp,sp,-12
   81784:	dc000015 	stw	r16,0(sp)
   81788:	04000274 	movhi	r16,9
   8178c:	8428a704 	addi	r16,r16,-23908
   81790:	dc400115 	stw	r17,4(sp)
   81794:	80000015 	stw	zero,0(r16)
   81798:	2023883a 	mov	r17,r4
   8179c:	2809883a 	mov	r4,r5
   817a0:	dfc00215 	stw	ra,8(sp)
   817a4:	00834700 	call	83470 <sbrk>
   817a8:	1007883a 	mov	r3,r2
   817ac:	00bfffc4 	movi	r2,-1
   817b0:	18800626 	beq	r3,r2,817cc <_sbrk_r+0x4c>
   817b4:	1805883a 	mov	r2,r3
   817b8:	dfc00217 	ldw	ra,8(sp)
   817bc:	dc400117 	ldw	r17,4(sp)
   817c0:	dc000017 	ldw	r16,0(sp)
   817c4:	dec00304 	addi	sp,sp,12
   817c8:	f800283a 	ret
   817cc:	80800017 	ldw	r2,0(r16)
   817d0:	103ff826 	beq	r2,zero,817b4 <_sbrk_r+0x34>
   817d4:	88800015 	stw	r2,0(r17)
   817d8:	1805883a 	mov	r2,r3
   817dc:	dfc00217 	ldw	ra,8(sp)
   817e0:	dc400117 	ldw	r17,4(sp)
   817e4:	dc000017 	ldw	r16,0(sp)
   817e8:	dec00304 	addi	sp,sp,12
   817ec:	f800283a 	ret

000817f0 <__swsetup_r>:
   817f0:	00800274 	movhi	r2,9
   817f4:	10a1b804 	addi	r2,r2,-31008
   817f8:	10c00017 	ldw	r3,0(r2)
   817fc:	defffd04 	addi	sp,sp,-12
   81800:	dc400115 	stw	r17,4(sp)
   81804:	dc000015 	stw	r16,0(sp)
   81808:	dfc00215 	stw	ra,8(sp)
   8180c:	2023883a 	mov	r17,r4
   81810:	2821883a 	mov	r16,r5
   81814:	18000226 	beq	r3,zero,81820 <__swsetup_r+0x30>
   81818:	18800e17 	ldw	r2,56(r3)
   8181c:	10001f26 	beq	r2,zero,8189c <__swsetup_r+0xac>
   81820:	8100030b 	ldhu	r4,12(r16)
   81824:	2080020c 	andi	r2,r4,8
   81828:	10002826 	beq	r2,zero,818cc <__swsetup_r+0xdc>
   8182c:	81400417 	ldw	r5,16(r16)
   81830:	28001d26 	beq	r5,zero,818a8 <__swsetup_r+0xb8>
   81834:	2080004c 	andi	r2,r4,1
   81838:	1005003a 	cmpeq	r2,r2,zero
   8183c:	10000b26 	beq	r2,zero,8186c <__swsetup_r+0x7c>
   81840:	2080008c 	andi	r2,r4,2
   81844:	10001226 	beq	r2,zero,81890 <__swsetup_r+0xa0>
   81848:	0005883a 	mov	r2,zero
   8184c:	80800215 	stw	r2,8(r16)
   81850:	28000b26 	beq	r5,zero,81880 <__swsetup_r+0x90>
   81854:	0005883a 	mov	r2,zero
   81858:	dfc00217 	ldw	ra,8(sp)
   8185c:	dc400117 	ldw	r17,4(sp)
   81860:	dc000017 	ldw	r16,0(sp)
   81864:	dec00304 	addi	sp,sp,12
   81868:	f800283a 	ret
   8186c:	80800517 	ldw	r2,20(r16)
   81870:	80000215 	stw	zero,8(r16)
   81874:	0085c83a 	sub	r2,zero,r2
   81878:	80800615 	stw	r2,24(r16)
   8187c:	283ff51e 	bne	r5,zero,81854 <__swsetup_r+0x64>
   81880:	2080200c 	andi	r2,r4,128
   81884:	103ff326 	beq	r2,zero,81854 <__swsetup_r+0x64>
   81888:	00bfffc4 	movi	r2,-1
   8188c:	003ff206 	br	81858 <__swsetup_r+0x68>
   81890:	80800517 	ldw	r2,20(r16)
   81894:	80800215 	stw	r2,8(r16)
   81898:	003fed06 	br	81850 <__swsetup_r+0x60>
   8189c:	1809883a 	mov	r4,r3
   818a0:	0081bc40 	call	81bc4 <__sinit>
   818a4:	003fde06 	br	81820 <__swsetup_r+0x30>
   818a8:	20c0a00c 	andi	r3,r4,640
   818ac:	00808004 	movi	r2,512
   818b0:	18bfe026 	beq	r3,r2,81834 <__swsetup_r+0x44>
   818b4:	8809883a 	mov	r4,r17
   818b8:	800b883a 	mov	r5,r16
   818bc:	00824100 	call	82410 <__smakebuf_r>
   818c0:	8100030b 	ldhu	r4,12(r16)
   818c4:	81400417 	ldw	r5,16(r16)
   818c8:	003fda06 	br	81834 <__swsetup_r+0x44>
   818cc:	2080040c 	andi	r2,r4,16
   818d0:	103fed26 	beq	r2,zero,81888 <__swsetup_r+0x98>
   818d4:	2080010c 	andi	r2,r4,4
   818d8:	10001226 	beq	r2,zero,81924 <__swsetup_r+0x134>
   818dc:	81400c17 	ldw	r5,48(r16)
   818e0:	28000526 	beq	r5,zero,818f8 <__swsetup_r+0x108>
   818e4:	80801004 	addi	r2,r16,64
   818e8:	28800226 	beq	r5,r2,818f4 <__swsetup_r+0x104>
   818ec:	8809883a 	mov	r4,r17
   818f0:	0081f7c0 	call	81f7c <_free_r>
   818f4:	80000c15 	stw	zero,48(r16)
   818f8:	8080030b 	ldhu	r2,12(r16)
   818fc:	81400417 	ldw	r5,16(r16)
   81900:	80000115 	stw	zero,4(r16)
   81904:	10bff6cc 	andi	r2,r2,65499
   81908:	8080030d 	sth	r2,12(r16)
   8190c:	81400015 	stw	r5,0(r16)
   81910:	8080030b 	ldhu	r2,12(r16)
   81914:	10800214 	ori	r2,r2,8
   81918:	113fffcc 	andi	r4,r2,65535
   8191c:	8080030d 	sth	r2,12(r16)
   81920:	003fc306 	br	81830 <__swsetup_r+0x40>
   81924:	81400417 	ldw	r5,16(r16)
   81928:	003ff906 	br	81910 <__swsetup_r+0x120>

0008192c <_fflush_r>:
   8192c:	defffb04 	addi	sp,sp,-20
   81930:	dcc00315 	stw	r19,12(sp)
   81934:	dc800215 	stw	r18,8(sp)
   81938:	dfc00415 	stw	ra,16(sp)
   8193c:	dc400115 	stw	r17,4(sp)
   81940:	dc000015 	stw	r16,0(sp)
   81944:	2027883a 	mov	r19,r4
   81948:	2825883a 	mov	r18,r5
   8194c:	20000226 	beq	r4,zero,81958 <_fflush_r+0x2c>
   81950:	20800e17 	ldw	r2,56(r4)
   81954:	10005626 	beq	r2,zero,81ab0 <_fflush_r+0x184>
   81958:	9100030b 	ldhu	r4,12(r18)
   8195c:	20ffffcc 	andi	r3,r4,65535
   81960:	18e0001c 	xori	r3,r3,32768
   81964:	18e00004 	addi	r3,r3,-32768
   81968:	1880020c 	andi	r2,r3,8
   8196c:	1000261e 	bne	r2,zero,81a08 <_fflush_r+0xdc>
   81970:	90c00117 	ldw	r3,4(r18)
   81974:	20820014 	ori	r2,r4,2048
   81978:	9080030d 	sth	r2,12(r18)
   8197c:	1009883a 	mov	r4,r2
   81980:	00c0400e 	bge	zero,r3,81a84 <_fflush_r+0x158>
   81984:	92000a17 	ldw	r8,40(r18)
   81988:	40004026 	beq	r8,zero,81a8c <_fflush_r+0x160>
   8198c:	2084000c 	andi	r2,r4,4096
   81990:	10005326 	beq	r2,zero,81ae0 <_fflush_r+0x1b4>
   81994:	94001417 	ldw	r16,80(r18)
   81998:	9080030b 	ldhu	r2,12(r18)
   8199c:	1080010c 	andi	r2,r2,4
   819a0:	1000481e 	bne	r2,zero,81ac4 <_fflush_r+0x198>
   819a4:	91400717 	ldw	r5,28(r18)
   819a8:	9809883a 	mov	r4,r19
   819ac:	800d883a 	mov	r6,r16
   819b0:	000f883a 	mov	r7,zero
   819b4:	403ee83a 	callr	r8
   819b8:	8080261e 	bne	r16,r2,81a54 <_fflush_r+0x128>
   819bc:	9080030b 	ldhu	r2,12(r18)
   819c0:	91000417 	ldw	r4,16(r18)
   819c4:	90000115 	stw	zero,4(r18)
   819c8:	10bdffcc 	andi	r2,r2,63487
   819cc:	10ffffcc 	andi	r3,r2,65535
   819d0:	18c4000c 	andi	r3,r3,4096
   819d4:	9080030d 	sth	r2,12(r18)
   819d8:	91000015 	stw	r4,0(r18)
   819dc:	18002b26 	beq	r3,zero,81a8c <_fflush_r+0x160>
   819e0:	0007883a 	mov	r3,zero
   819e4:	1805883a 	mov	r2,r3
   819e8:	94001415 	stw	r16,80(r18)
   819ec:	dfc00417 	ldw	ra,16(sp)
   819f0:	dcc00317 	ldw	r19,12(sp)
   819f4:	dc800217 	ldw	r18,8(sp)
   819f8:	dc400117 	ldw	r17,4(sp)
   819fc:	dc000017 	ldw	r16,0(sp)
   81a00:	dec00504 	addi	sp,sp,20
   81a04:	f800283a 	ret
   81a08:	94400417 	ldw	r17,16(r18)
   81a0c:	88001f26 	beq	r17,zero,81a8c <_fflush_r+0x160>
   81a10:	90800017 	ldw	r2,0(r18)
   81a14:	18c000cc 	andi	r3,r3,3
   81a18:	94400015 	stw	r17,0(r18)
   81a1c:	1461c83a 	sub	r16,r2,r17
   81a20:	18002526 	beq	r3,zero,81ab8 <_fflush_r+0x18c>
   81a24:	0005883a 	mov	r2,zero
   81a28:	90800215 	stw	r2,8(r18)
   81a2c:	0400170e 	bge	zero,r16,81a8c <_fflush_r+0x160>
   81a30:	90c00917 	ldw	r3,36(r18)
   81a34:	91400717 	ldw	r5,28(r18)
   81a38:	880d883a 	mov	r6,r17
   81a3c:	800f883a 	mov	r7,r16
   81a40:	9809883a 	mov	r4,r19
   81a44:	183ee83a 	callr	r3
   81a48:	88a3883a 	add	r17,r17,r2
   81a4c:	80a1c83a 	sub	r16,r16,r2
   81a50:	00bff616 	blt	zero,r2,81a2c <_fflush_r+0x100>
   81a54:	9080030b 	ldhu	r2,12(r18)
   81a58:	00ffffc4 	movi	r3,-1
   81a5c:	10801014 	ori	r2,r2,64
   81a60:	9080030d 	sth	r2,12(r18)
   81a64:	1805883a 	mov	r2,r3
   81a68:	dfc00417 	ldw	ra,16(sp)
   81a6c:	dcc00317 	ldw	r19,12(sp)
   81a70:	dc800217 	ldw	r18,8(sp)
   81a74:	dc400117 	ldw	r17,4(sp)
   81a78:	dc000017 	ldw	r16,0(sp)
   81a7c:	dec00504 	addi	sp,sp,20
   81a80:	f800283a 	ret
   81a84:	90800f17 	ldw	r2,60(r18)
   81a88:	00bfbe16 	blt	zero,r2,81984 <_fflush_r+0x58>
   81a8c:	0007883a 	mov	r3,zero
   81a90:	1805883a 	mov	r2,r3
   81a94:	dfc00417 	ldw	ra,16(sp)
   81a98:	dcc00317 	ldw	r19,12(sp)
   81a9c:	dc800217 	ldw	r18,8(sp)
   81aa0:	dc400117 	ldw	r17,4(sp)
   81aa4:	dc000017 	ldw	r16,0(sp)
   81aa8:	dec00504 	addi	sp,sp,20
   81aac:	f800283a 	ret
   81ab0:	0081bc40 	call	81bc4 <__sinit>
   81ab4:	003fa806 	br	81958 <_fflush_r+0x2c>
   81ab8:	90800517 	ldw	r2,20(r18)
   81abc:	90800215 	stw	r2,8(r18)
   81ac0:	003fda06 	br	81a2c <_fflush_r+0x100>
   81ac4:	90800117 	ldw	r2,4(r18)
   81ac8:	90c00c17 	ldw	r3,48(r18)
   81acc:	80a1c83a 	sub	r16,r16,r2
   81ad0:	183fb426 	beq	r3,zero,819a4 <_fflush_r+0x78>
   81ad4:	90800f17 	ldw	r2,60(r18)
   81ad8:	80a1c83a 	sub	r16,r16,r2
   81adc:	003fb106 	br	819a4 <_fflush_r+0x78>
   81ae0:	91400717 	ldw	r5,28(r18)
   81ae4:	9809883a 	mov	r4,r19
   81ae8:	000d883a 	mov	r6,zero
   81aec:	01c00044 	movi	r7,1
   81af0:	403ee83a 	callr	r8
   81af4:	1021883a 	mov	r16,r2
   81af8:	00bfffc4 	movi	r2,-1
   81afc:	80800226 	beq	r16,r2,81b08 <_fflush_r+0x1dc>
   81b00:	92000a17 	ldw	r8,40(r18)
   81b04:	003fa406 	br	81998 <_fflush_r+0x6c>
   81b08:	98c00017 	ldw	r3,0(r19)
   81b0c:	00800744 	movi	r2,29
   81b10:	18bfde26 	beq	r3,r2,81a8c <_fflush_r+0x160>
   81b14:	9080030b 	ldhu	r2,12(r18)
   81b18:	8007883a 	mov	r3,r16
   81b1c:	10801014 	ori	r2,r2,64
   81b20:	9080030d 	sth	r2,12(r18)
   81b24:	003fcf06 	br	81a64 <_fflush_r+0x138>

00081b28 <fflush>:
   81b28:	01400234 	movhi	r5,8
   81b2c:	29464b04 	addi	r5,r5,6444
   81b30:	2007883a 	mov	r3,r4
   81b34:	20000526 	beq	r4,zero,81b4c <fflush+0x24>
   81b38:	00800274 	movhi	r2,9
   81b3c:	10a1b804 	addi	r2,r2,-31008
   81b40:	11000017 	ldw	r4,0(r2)
   81b44:	180b883a 	mov	r5,r3
   81b48:	008192c1 	jmpi	8192c <_fflush_r>
   81b4c:	00800274 	movhi	r2,9
   81b50:	10a1b904 	addi	r2,r2,-31004
   81b54:	11000017 	ldw	r4,0(r2)
   81b58:	00822901 	jmpi	82290 <_fwalk_reent>

00081b5c <std>:
   81b5c:	00800234 	movhi	r2,8
   81b60:	10898f04 	addi	r2,r2,9788
   81b64:	20800b15 	stw	r2,44(r4)
   81b68:	00800234 	movhi	r2,8
   81b6c:	1089ca04 	addi	r2,r2,10024
   81b70:	20800815 	stw	r2,32(r4)
   81b74:	00c00234 	movhi	r3,8
   81b78:	18c9ab04 	addi	r3,r3,9900
   81b7c:	00800234 	movhi	r2,8
   81b80:	10899104 	addi	r2,r2,9796
   81b84:	2140030d 	sth	r5,12(r4)
   81b88:	2180038d 	sth	r6,14(r4)
   81b8c:	20c00915 	stw	r3,36(r4)
   81b90:	20800a15 	stw	r2,40(r4)
   81b94:	20000015 	stw	zero,0(r4)
   81b98:	20000115 	stw	zero,4(r4)
   81b9c:	20000215 	stw	zero,8(r4)
   81ba0:	20000415 	stw	zero,16(r4)
   81ba4:	20000515 	stw	zero,20(r4)
   81ba8:	20000615 	stw	zero,24(r4)
   81bac:	21000715 	stw	r4,28(r4)
   81bb0:	f800283a 	ret

00081bb4 <__sfp_lock_acquire>:
   81bb4:	f800283a 	ret

00081bb8 <__sfp_lock_release>:
   81bb8:	f800283a 	ret

00081bbc <__sinit_lock_acquire>:
   81bbc:	f800283a 	ret

00081bc0 <__sinit_lock_release>:
   81bc0:	f800283a 	ret

00081bc4 <__sinit>:
   81bc4:	20800e17 	ldw	r2,56(r4)
   81bc8:	defffd04 	addi	sp,sp,-12
   81bcc:	dc400115 	stw	r17,4(sp)
   81bd0:	dc000015 	stw	r16,0(sp)
   81bd4:	dfc00215 	stw	ra,8(sp)
   81bd8:	04400044 	movi	r17,1
   81bdc:	01400104 	movi	r5,4
   81be0:	000d883a 	mov	r6,zero
   81be4:	2021883a 	mov	r16,r4
   81be8:	2200bb04 	addi	r8,r4,748
   81bec:	200f883a 	mov	r7,r4
   81bf0:	10000526 	beq	r2,zero,81c08 <__sinit+0x44>
   81bf4:	dfc00217 	ldw	ra,8(sp)
   81bf8:	dc400117 	ldw	r17,4(sp)
   81bfc:	dc000017 	ldw	r16,0(sp)
   81c00:	dec00304 	addi	sp,sp,12
   81c04:	f800283a 	ret
   81c08:	21000117 	ldw	r4,4(r4)
   81c0c:	00800234 	movhi	r2,8
   81c10:	10872a04 	addi	r2,r2,7336
   81c14:	00c000c4 	movi	r3,3
   81c18:	80800f15 	stw	r2,60(r16)
   81c1c:	80c0b915 	stw	r3,740(r16)
   81c20:	8200ba15 	stw	r8,744(r16)
   81c24:	84400e15 	stw	r17,56(r16)
   81c28:	8000b815 	stw	zero,736(r16)
   81c2c:	0081b5c0 	call	81b5c <std>
   81c30:	81000217 	ldw	r4,8(r16)
   81c34:	880d883a 	mov	r6,r17
   81c38:	800f883a 	mov	r7,r16
   81c3c:	01400284 	movi	r5,10
   81c40:	0081b5c0 	call	81b5c <std>
   81c44:	81000317 	ldw	r4,12(r16)
   81c48:	800f883a 	mov	r7,r16
   81c4c:	01400484 	movi	r5,18
   81c50:	01800084 	movi	r6,2
   81c54:	dfc00217 	ldw	ra,8(sp)
   81c58:	dc400117 	ldw	r17,4(sp)
   81c5c:	dc000017 	ldw	r16,0(sp)
   81c60:	dec00304 	addi	sp,sp,12
   81c64:	0081b5c1 	jmpi	81b5c <std>

00081c68 <__fp_lock>:
   81c68:	0005883a 	mov	r2,zero
   81c6c:	f800283a 	ret

00081c70 <__fp_unlock>:
   81c70:	0005883a 	mov	r2,zero
   81c74:	f800283a 	ret

00081c78 <__fp_unlock_all>:
   81c78:	00800274 	movhi	r2,9
   81c7c:	10a1b804 	addi	r2,r2,-31008
   81c80:	11000017 	ldw	r4,0(r2)
   81c84:	01400234 	movhi	r5,8
   81c88:	29471c04 	addi	r5,r5,7280
   81c8c:	00823581 	jmpi	82358 <_fwalk>

00081c90 <__fp_lock_all>:
   81c90:	00800274 	movhi	r2,9
   81c94:	10a1b804 	addi	r2,r2,-31008
   81c98:	11000017 	ldw	r4,0(r2)
   81c9c:	01400234 	movhi	r5,8
   81ca0:	29471a04 	addi	r5,r5,7272
   81ca4:	00823581 	jmpi	82358 <_fwalk>

00081ca8 <_cleanup_r>:
   81ca8:	01400234 	movhi	r5,8
   81cac:	294a6004 	addi	r5,r5,10624
   81cb0:	00823581 	jmpi	82358 <_fwalk>

00081cb4 <_cleanup>:
   81cb4:	00800274 	movhi	r2,9
   81cb8:	10a1b904 	addi	r2,r2,-31004
   81cbc:	11000017 	ldw	r4,0(r2)
   81cc0:	0081ca81 	jmpi	81ca8 <_cleanup_r>

00081cc4 <__sfmoreglue>:
   81cc4:	defffc04 	addi	sp,sp,-16
   81cc8:	dc000015 	stw	r16,0(sp)
   81ccc:	2821883a 	mov	r16,r5
   81cd0:	dc400115 	stw	r17,4(sp)
   81cd4:	01401704 	movi	r5,92
   81cd8:	2023883a 	mov	r17,r4
   81cdc:	8009883a 	mov	r4,r16
   81ce0:	dfc00315 	stw	ra,12(sp)
   81ce4:	dcc00215 	stw	r19,8(sp)
   81ce8:	0082b680 	call	82b68 <__mulsi3>
   81cec:	11400304 	addi	r5,r2,12
   81cf0:	8809883a 	mov	r4,r17
   81cf4:	1027883a 	mov	r19,r2
   81cf8:	00807e80 	call	807e8 <_malloc_r>
   81cfc:	10c00304 	addi	r3,r2,12
   81d00:	1023883a 	mov	r17,r2
   81d04:	1809883a 	mov	r4,r3
   81d08:	980d883a 	mov	r6,r19
   81d0c:	000b883a 	mov	r5,zero
   81d10:	10000b26 	beq	r2,zero,81d40 <__sfmoreglue+0x7c>
   81d14:	14000115 	stw	r16,4(r2)
   81d18:	10c00215 	stw	r3,8(r2)
   81d1c:	10000015 	stw	zero,0(r2)
   81d20:	00825a40 	call	825a4 <memset>
   81d24:	8805883a 	mov	r2,r17
   81d28:	dfc00317 	ldw	ra,12(sp)
   81d2c:	dcc00217 	ldw	r19,8(sp)
   81d30:	dc400117 	ldw	r17,4(sp)
   81d34:	dc000017 	ldw	r16,0(sp)
   81d38:	dec00404 	addi	sp,sp,16
   81d3c:	f800283a 	ret
   81d40:	0023883a 	mov	r17,zero
   81d44:	8805883a 	mov	r2,r17
   81d48:	dfc00317 	ldw	ra,12(sp)
   81d4c:	dcc00217 	ldw	r19,8(sp)
   81d50:	dc400117 	ldw	r17,4(sp)
   81d54:	dc000017 	ldw	r16,0(sp)
   81d58:	dec00404 	addi	sp,sp,16
   81d5c:	f800283a 	ret

00081d60 <__sfp>:
   81d60:	defffd04 	addi	sp,sp,-12
   81d64:	00800274 	movhi	r2,9
   81d68:	10a1b904 	addi	r2,r2,-31004
   81d6c:	dc000015 	stw	r16,0(sp)
   81d70:	14000017 	ldw	r16,0(r2)
   81d74:	dc400115 	stw	r17,4(sp)
   81d78:	dfc00215 	stw	ra,8(sp)
   81d7c:	80800e17 	ldw	r2,56(r16)
   81d80:	2023883a 	mov	r17,r4
   81d84:	10002626 	beq	r2,zero,81e20 <__sfp+0xc0>
   81d88:	8400b804 	addi	r16,r16,736
   81d8c:	80800117 	ldw	r2,4(r16)
   81d90:	81000217 	ldw	r4,8(r16)
   81d94:	10ffffc4 	addi	r3,r2,-1
   81d98:	18000916 	blt	r3,zero,81dc0 <__sfp+0x60>
   81d9c:	2080030f 	ldh	r2,12(r4)
   81da0:	10000b26 	beq	r2,zero,81dd0 <__sfp+0x70>
   81da4:	017fffc4 	movi	r5,-1
   81da8:	00000206 	br	81db4 <__sfp+0x54>
   81dac:	2080030f 	ldh	r2,12(r4)
   81db0:	10000726 	beq	r2,zero,81dd0 <__sfp+0x70>
   81db4:	18ffffc4 	addi	r3,r3,-1
   81db8:	21001704 	addi	r4,r4,92
   81dbc:	197ffb1e 	bne	r3,r5,81dac <__sfp+0x4c>
   81dc0:	80800017 	ldw	r2,0(r16)
   81dc4:	10001926 	beq	r2,zero,81e2c <__sfp+0xcc>
   81dc8:	1021883a 	mov	r16,r2
   81dcc:	003fef06 	br	81d8c <__sfp+0x2c>
   81dd0:	00bfffc4 	movi	r2,-1
   81dd4:	00c00044 	movi	r3,1
   81dd8:	2080038d 	sth	r2,14(r4)
   81ddc:	20c0030d 	sth	r3,12(r4)
   81de0:	20000015 	stw	zero,0(r4)
   81de4:	20000215 	stw	zero,8(r4)
   81de8:	20000115 	stw	zero,4(r4)
   81dec:	20000415 	stw	zero,16(r4)
   81df0:	20000515 	stw	zero,20(r4)
   81df4:	20000615 	stw	zero,24(r4)
   81df8:	20000c15 	stw	zero,48(r4)
   81dfc:	20000d15 	stw	zero,52(r4)
   81e00:	20001115 	stw	zero,68(r4)
   81e04:	20001215 	stw	zero,72(r4)
   81e08:	2005883a 	mov	r2,r4
   81e0c:	dfc00217 	ldw	ra,8(sp)
   81e10:	dc400117 	ldw	r17,4(sp)
   81e14:	dc000017 	ldw	r16,0(sp)
   81e18:	dec00304 	addi	sp,sp,12
   81e1c:	f800283a 	ret
   81e20:	8009883a 	mov	r4,r16
   81e24:	0081bc40 	call	81bc4 <__sinit>
   81e28:	003fd706 	br	81d88 <__sfp+0x28>
   81e2c:	8809883a 	mov	r4,r17
   81e30:	01400104 	movi	r5,4
   81e34:	0081cc40 	call	81cc4 <__sfmoreglue>
   81e38:	80800015 	stw	r2,0(r16)
   81e3c:	103fe21e 	bne	r2,zero,81dc8 <__sfp+0x68>
   81e40:	00800304 	movi	r2,12
   81e44:	0009883a 	mov	r4,zero
   81e48:	88800015 	stw	r2,0(r17)
   81e4c:	003fee06 	br	81e08 <__sfp+0xa8>

00081e50 <_malloc_trim_r>:
   81e50:	defffb04 	addi	sp,sp,-20
   81e54:	dcc00315 	stw	r19,12(sp)
   81e58:	04c00234 	movhi	r19,8
   81e5c:	9cdbec04 	addi	r19,r19,28592
   81e60:	dc800215 	stw	r18,8(sp)
   81e64:	dc400115 	stw	r17,4(sp)
   81e68:	dc000015 	stw	r16,0(sp)
   81e6c:	2823883a 	mov	r17,r5
   81e70:	2025883a 	mov	r18,r4
   81e74:	dfc00415 	stw	ra,16(sp)
   81e78:	00832340 	call	83234 <__malloc_lock>
   81e7c:	98800217 	ldw	r2,8(r19)
   81e80:	9009883a 	mov	r4,r18
   81e84:	000b883a 	mov	r5,zero
   81e88:	10c00117 	ldw	r3,4(r2)
   81e8c:	00bfff04 	movi	r2,-4
   81e90:	18a0703a 	and	r16,r3,r2
   81e94:	8463c83a 	sub	r17,r16,r17
   81e98:	8c43fbc4 	addi	r17,r17,4079
   81e9c:	8822d33a 	srli	r17,r17,12
   81ea0:	0083ffc4 	movi	r2,4095
   81ea4:	8c7fffc4 	addi	r17,r17,-1
   81ea8:	8822933a 	slli	r17,r17,12
   81eac:	1440060e 	bge	r2,r17,81ec8 <_malloc_trim_r+0x78>
   81eb0:	00817800 	call	81780 <_sbrk_r>
   81eb4:	98c00217 	ldw	r3,8(r19)
   81eb8:	9009883a 	mov	r4,r18
   81ebc:	044bc83a 	sub	r5,zero,r17
   81ec0:	80c7883a 	add	r3,r16,r3
   81ec4:	10c00926 	beq	r2,r3,81eec <_malloc_trim_r+0x9c>
   81ec8:	00832540 	call	83254 <__malloc_unlock>
   81ecc:	0005883a 	mov	r2,zero
   81ed0:	dfc00417 	ldw	ra,16(sp)
   81ed4:	dcc00317 	ldw	r19,12(sp)
   81ed8:	dc800217 	ldw	r18,8(sp)
   81edc:	dc400117 	ldw	r17,4(sp)
   81ee0:	dc000017 	ldw	r16,0(sp)
   81ee4:	dec00504 	addi	sp,sp,20
   81ee8:	f800283a 	ret
   81eec:	9009883a 	mov	r4,r18
   81ef0:	00817800 	call	81780 <_sbrk_r>
   81ef4:	844dc83a 	sub	r6,r16,r17
   81ef8:	00ffffc4 	movi	r3,-1
   81efc:	9009883a 	mov	r4,r18
   81f00:	000b883a 	mov	r5,zero
   81f04:	01c00274 	movhi	r7,9
   81f08:	39e8b004 	addi	r7,r7,-23872
   81f0c:	31800054 	ori	r6,r6,1
   81f10:	10c00926 	beq	r2,r3,81f38 <_malloc_trim_r+0xe8>
   81f14:	38800017 	ldw	r2,0(r7)
   81f18:	98c00217 	ldw	r3,8(r19)
   81f1c:	9009883a 	mov	r4,r18
   81f20:	1445c83a 	sub	r2,r2,r17
   81f24:	38800015 	stw	r2,0(r7)
   81f28:	19800115 	stw	r6,4(r3)
   81f2c:	00832540 	call	83254 <__malloc_unlock>
   81f30:	00800044 	movi	r2,1
   81f34:	003fe606 	br	81ed0 <_malloc_trim_r+0x80>
   81f38:	00817800 	call	81780 <_sbrk_r>
   81f3c:	99800217 	ldw	r6,8(r19)
   81f40:	100f883a 	mov	r7,r2
   81f44:	9009883a 	mov	r4,r18
   81f48:	1187c83a 	sub	r3,r2,r6
   81f4c:	008003c4 	movi	r2,15
   81f50:	19400054 	ori	r5,r3,1
   81f54:	10ffdc0e 	bge	r2,r3,81ec8 <_malloc_trim_r+0x78>
   81f58:	00800274 	movhi	r2,9
   81f5c:	10a1bb04 	addi	r2,r2,-30996
   81f60:	10c00017 	ldw	r3,0(r2)
   81f64:	00800274 	movhi	r2,9
   81f68:	10a8b004 	addi	r2,r2,-23872
   81f6c:	31400115 	stw	r5,4(r6)
   81f70:	38c7c83a 	sub	r3,r7,r3
   81f74:	10c00015 	stw	r3,0(r2)
   81f78:	003fd306 	br	81ec8 <_malloc_trim_r+0x78>

00081f7c <_free_r>:
   81f7c:	defffd04 	addi	sp,sp,-12
   81f80:	dc400115 	stw	r17,4(sp)
   81f84:	dc000015 	stw	r16,0(sp)
   81f88:	dfc00215 	stw	ra,8(sp)
   81f8c:	2821883a 	mov	r16,r5
   81f90:	2023883a 	mov	r17,r4
   81f94:	28005a26 	beq	r5,zero,82100 <_free_r+0x184>
   81f98:	00832340 	call	83234 <__malloc_lock>
   81f9c:	823ffe04 	addi	r8,r16,-8
   81fa0:	41400117 	ldw	r5,4(r8)
   81fa4:	00bfff84 	movi	r2,-2
   81fa8:	02800234 	movhi	r10,8
   81fac:	529bec04 	addi	r10,r10,28592
   81fb0:	288e703a 	and	r7,r5,r2
   81fb4:	41cd883a 	add	r6,r8,r7
   81fb8:	30c00117 	ldw	r3,4(r6)
   81fbc:	51000217 	ldw	r4,8(r10)
   81fc0:	00bfff04 	movi	r2,-4
   81fc4:	1892703a 	and	r9,r3,r2
   81fc8:	5017883a 	mov	r11,r10
   81fcc:	31006726 	beq	r6,r4,8216c <_free_r+0x1f0>
   81fd0:	2880004c 	andi	r2,r5,1
   81fd4:	1005003a 	cmpeq	r2,r2,zero
   81fd8:	32400115 	stw	r9,4(r6)
   81fdc:	10001a1e 	bne	r2,zero,82048 <_free_r+0xcc>
   81fe0:	000b883a 	mov	r5,zero
   81fe4:	3247883a 	add	r3,r6,r9
   81fe8:	18800117 	ldw	r2,4(r3)
   81fec:	1080004c 	andi	r2,r2,1
   81ff0:	1000231e 	bne	r2,zero,82080 <_free_r+0x104>
   81ff4:	280ac03a 	cmpne	r5,r5,zero
   81ff8:	3a4f883a 	add	r7,r7,r9
   81ffc:	2800451e 	bne	r5,zero,82114 <_free_r+0x198>
   82000:	31000217 	ldw	r4,8(r6)
   82004:	00800234 	movhi	r2,8
   82008:	109bee04 	addi	r2,r2,28600
   8200c:	20807b26 	beq	r4,r2,821fc <_free_r+0x280>
   82010:	30800317 	ldw	r2,12(r6)
   82014:	3a07883a 	add	r3,r7,r8
   82018:	19c00015 	stw	r7,0(r3)
   8201c:	11000215 	stw	r4,8(r2)
   82020:	20800315 	stw	r2,12(r4)
   82024:	38800054 	ori	r2,r7,1
   82028:	40800115 	stw	r2,4(r8)
   8202c:	28001a26 	beq	r5,zero,82098 <_free_r+0x11c>
   82030:	8809883a 	mov	r4,r17
   82034:	dfc00217 	ldw	ra,8(sp)
   82038:	dc400117 	ldw	r17,4(sp)
   8203c:	dc000017 	ldw	r16,0(sp)
   82040:	dec00304 	addi	sp,sp,12
   82044:	00832541 	jmpi	83254 <__malloc_unlock>
   82048:	80bffe17 	ldw	r2,-8(r16)
   8204c:	50c00204 	addi	r3,r10,8
   82050:	4091c83a 	sub	r8,r8,r2
   82054:	41000217 	ldw	r4,8(r8)
   82058:	388f883a 	add	r7,r7,r2
   8205c:	20c06126 	beq	r4,r3,821e4 <_free_r+0x268>
   82060:	40800317 	ldw	r2,12(r8)
   82064:	3247883a 	add	r3,r6,r9
   82068:	000b883a 	mov	r5,zero
   8206c:	11000215 	stw	r4,8(r2)
   82070:	20800315 	stw	r2,12(r4)
   82074:	18800117 	ldw	r2,4(r3)
   82078:	1080004c 	andi	r2,r2,1
   8207c:	103fdd26 	beq	r2,zero,81ff4 <_free_r+0x78>
   82080:	38800054 	ori	r2,r7,1
   82084:	3a07883a 	add	r3,r7,r8
   82088:	280ac03a 	cmpne	r5,r5,zero
   8208c:	40800115 	stw	r2,4(r8)
   82090:	19c00015 	stw	r7,0(r3)
   82094:	283fe61e 	bne	r5,zero,82030 <_free_r+0xb4>
   82098:	00807fc4 	movi	r2,511
   8209c:	11c01f2e 	bgeu	r2,r7,8211c <_free_r+0x1a0>
   820a0:	3806d27a 	srli	r3,r7,9
   820a4:	1800481e 	bne	r3,zero,821c8 <_free_r+0x24c>
   820a8:	3804d0fa 	srli	r2,r7,3
   820ac:	100690fa 	slli	r3,r2,3
   820b0:	1acd883a 	add	r6,r3,r11
   820b4:	31400217 	ldw	r5,8(r6)
   820b8:	31405926 	beq	r6,r5,82220 <_free_r+0x2a4>
   820bc:	28800117 	ldw	r2,4(r5)
   820c0:	00ffff04 	movi	r3,-4
   820c4:	10c4703a 	and	r2,r2,r3
   820c8:	3880022e 	bgeu	r7,r2,820d4 <_free_r+0x158>
   820cc:	29400217 	ldw	r5,8(r5)
   820d0:	317ffa1e 	bne	r6,r5,820bc <_free_r+0x140>
   820d4:	29800317 	ldw	r6,12(r5)
   820d8:	41800315 	stw	r6,12(r8)
   820dc:	41400215 	stw	r5,8(r8)
   820e0:	8809883a 	mov	r4,r17
   820e4:	2a000315 	stw	r8,12(r5)
   820e8:	32000215 	stw	r8,8(r6)
   820ec:	dfc00217 	ldw	ra,8(sp)
   820f0:	dc400117 	ldw	r17,4(sp)
   820f4:	dc000017 	ldw	r16,0(sp)
   820f8:	dec00304 	addi	sp,sp,12
   820fc:	00832541 	jmpi	83254 <__malloc_unlock>
   82100:	dfc00217 	ldw	ra,8(sp)
   82104:	dc400117 	ldw	r17,4(sp)
   82108:	dc000017 	ldw	r16,0(sp)
   8210c:	dec00304 	addi	sp,sp,12
   82110:	f800283a 	ret
   82114:	31000217 	ldw	r4,8(r6)
   82118:	003fbd06 	br	82010 <_free_r+0x94>
   8211c:	3806d0fa 	srli	r3,r7,3
   82120:	00800044 	movi	r2,1
   82124:	51400117 	ldw	r5,4(r10)
   82128:	180890fa 	slli	r4,r3,3
   8212c:	1807d0ba 	srai	r3,r3,2
   82130:	22c9883a 	add	r4,r4,r11
   82134:	21800217 	ldw	r6,8(r4)
   82138:	10c4983a 	sll	r2,r2,r3
   8213c:	41000315 	stw	r4,12(r8)
   82140:	41800215 	stw	r6,8(r8)
   82144:	288ab03a 	or	r5,r5,r2
   82148:	22000215 	stw	r8,8(r4)
   8214c:	8809883a 	mov	r4,r17
   82150:	51400115 	stw	r5,4(r10)
   82154:	32000315 	stw	r8,12(r6)
   82158:	dfc00217 	ldw	ra,8(sp)
   8215c:	dc400117 	ldw	r17,4(sp)
   82160:	dc000017 	ldw	r16,0(sp)
   82164:	dec00304 	addi	sp,sp,12
   82168:	00832541 	jmpi	83254 <__malloc_unlock>
   8216c:	2880004c 	andi	r2,r5,1
   82170:	3a4d883a 	add	r6,r7,r9
   82174:	1000071e 	bne	r2,zero,82194 <_free_r+0x218>
   82178:	80bffe17 	ldw	r2,-8(r16)
   8217c:	4091c83a 	sub	r8,r8,r2
   82180:	41000317 	ldw	r4,12(r8)
   82184:	40c00217 	ldw	r3,8(r8)
   82188:	308d883a 	add	r6,r6,r2
   8218c:	20c00215 	stw	r3,8(r4)
   82190:	19000315 	stw	r4,12(r3)
   82194:	00800274 	movhi	r2,9
   82198:	10a1ba04 	addi	r2,r2,-31000
   8219c:	11000017 	ldw	r4,0(r2)
   821a0:	30c00054 	ori	r3,r6,1
   821a4:	52000215 	stw	r8,8(r10)
   821a8:	40c00115 	stw	r3,4(r8)
   821ac:	313fa036 	bltu	r6,r4,82030 <_free_r+0xb4>
   821b0:	00800274 	movhi	r2,9
   821b4:	10a8a404 	addi	r2,r2,-23920
   821b8:	11400017 	ldw	r5,0(r2)
   821bc:	8809883a 	mov	r4,r17
   821c0:	0081e500 	call	81e50 <_malloc_trim_r>
   821c4:	003f9a06 	br	82030 <_free_r+0xb4>
   821c8:	00800104 	movi	r2,4
   821cc:	10c0072e 	bgeu	r2,r3,821ec <_free_r+0x270>
   821d0:	00800504 	movi	r2,20
   821d4:	10c01936 	bltu	r2,r3,8223c <_free_r+0x2c0>
   821d8:	188016c4 	addi	r2,r3,91
   821dc:	100690fa 	slli	r3,r2,3
   821e0:	003fb306 	br	820b0 <_free_r+0x134>
   821e4:	01400044 	movi	r5,1
   821e8:	003f7e06 	br	81fe4 <_free_r+0x68>
   821ec:	3804d1ba 	srli	r2,r7,6
   821f0:	10800e04 	addi	r2,r2,56
   821f4:	100690fa 	slli	r3,r2,3
   821f8:	003fad06 	br	820b0 <_free_r+0x134>
   821fc:	22000315 	stw	r8,12(r4)
   82200:	22000215 	stw	r8,8(r4)
   82204:	3a05883a 	add	r2,r7,r8
   82208:	38c00054 	ori	r3,r7,1
   8220c:	11c00015 	stw	r7,0(r2)
   82210:	41000215 	stw	r4,8(r8)
   82214:	40c00115 	stw	r3,4(r8)
   82218:	41000315 	stw	r4,12(r8)
   8221c:	003f8406 	br	82030 <_free_r+0xb4>
   82220:	1005d0ba 	srai	r2,r2,2
   82224:	00c00044 	movi	r3,1
   82228:	51000117 	ldw	r4,4(r10)
   8222c:	1886983a 	sll	r3,r3,r2
   82230:	20c8b03a 	or	r4,r4,r3
   82234:	51000115 	stw	r4,4(r10)
   82238:	003fa706 	br	820d8 <_free_r+0x15c>
   8223c:	00801504 	movi	r2,84
   82240:	10c00436 	bltu	r2,r3,82254 <_free_r+0x2d8>
   82244:	3804d33a 	srli	r2,r7,12
   82248:	10801b84 	addi	r2,r2,110
   8224c:	100690fa 	slli	r3,r2,3
   82250:	003f9706 	br	820b0 <_free_r+0x134>
   82254:	00805504 	movi	r2,340
   82258:	10c00436 	bltu	r2,r3,8226c <_free_r+0x2f0>
   8225c:	3804d3fa 	srli	r2,r7,15
   82260:	10801dc4 	addi	r2,r2,119
   82264:	100690fa 	slli	r3,r2,3
   82268:	003f9106 	br	820b0 <_free_r+0x134>
   8226c:	00815504 	movi	r2,1364
   82270:	10c0032e 	bgeu	r2,r3,82280 <_free_r+0x304>
   82274:	00801f84 	movi	r2,126
   82278:	00c0fc04 	movi	r3,1008
   8227c:	003f8c06 	br	820b0 <_free_r+0x134>
   82280:	3804d4ba 	srli	r2,r7,18
   82284:	10801f04 	addi	r2,r2,124
   82288:	100690fa 	slli	r3,r2,3
   8228c:	003f8806 	br	820b0 <_free_r+0x134>

00082290 <_fwalk_reent>:
   82290:	defff704 	addi	sp,sp,-36
   82294:	dcc00315 	stw	r19,12(sp)
   82298:	24c0b804 	addi	r19,r4,736
   8229c:	dd800615 	stw	r22,24(sp)
   822a0:	dd400515 	stw	r21,20(sp)
   822a4:	dfc00815 	stw	ra,32(sp)
   822a8:	ddc00715 	stw	r23,28(sp)
   822ac:	dd000415 	stw	r20,16(sp)
   822b0:	dc800215 	stw	r18,8(sp)
   822b4:	dc400115 	stw	r17,4(sp)
   822b8:	dc000015 	stw	r16,0(sp)
   822bc:	202b883a 	mov	r21,r4
   822c0:	282d883a 	mov	r22,r5
   822c4:	0081bb40 	call	81bb4 <__sfp_lock_acquire>
   822c8:	98002126 	beq	r19,zero,82350 <_fwalk_reent+0xc0>
   822cc:	002f883a 	mov	r23,zero
   822d0:	9c800117 	ldw	r18,4(r19)
   822d4:	9c000217 	ldw	r16,8(r19)
   822d8:	90bfffc4 	addi	r2,r18,-1
   822dc:	10000d16 	blt	r2,zero,82314 <_fwalk_reent+0x84>
   822e0:	0023883a 	mov	r17,zero
   822e4:	053fffc4 	movi	r20,-1
   822e8:	8080030f 	ldh	r2,12(r16)
   822ec:	8c400044 	addi	r17,r17,1
   822f0:	10000626 	beq	r2,zero,8230c <_fwalk_reent+0x7c>
   822f4:	8080038f 	ldh	r2,14(r16)
   822f8:	800b883a 	mov	r5,r16
   822fc:	a809883a 	mov	r4,r21
   82300:	15000226 	beq	r2,r20,8230c <_fwalk_reent+0x7c>
   82304:	b03ee83a 	callr	r22
   82308:	b8aeb03a 	or	r23,r23,r2
   8230c:	84001704 	addi	r16,r16,92
   82310:	947ff51e 	bne	r18,r17,822e8 <_fwalk_reent+0x58>
   82314:	9cc00017 	ldw	r19,0(r19)
   82318:	983fed1e 	bne	r19,zero,822d0 <_fwalk_reent+0x40>
   8231c:	0081bb80 	call	81bb8 <__sfp_lock_release>
   82320:	b805883a 	mov	r2,r23
   82324:	dfc00817 	ldw	ra,32(sp)
   82328:	ddc00717 	ldw	r23,28(sp)
   8232c:	dd800617 	ldw	r22,24(sp)
   82330:	dd400517 	ldw	r21,20(sp)
   82334:	dd000417 	ldw	r20,16(sp)
   82338:	dcc00317 	ldw	r19,12(sp)
   8233c:	dc800217 	ldw	r18,8(sp)
   82340:	dc400117 	ldw	r17,4(sp)
   82344:	dc000017 	ldw	r16,0(sp)
   82348:	dec00904 	addi	sp,sp,36
   8234c:	f800283a 	ret
   82350:	002f883a 	mov	r23,zero
   82354:	003ff106 	br	8231c <_fwalk_reent+0x8c>

00082358 <_fwalk>:
   82358:	defff804 	addi	sp,sp,-32
   8235c:	dcc00315 	stw	r19,12(sp)
   82360:	24c0b804 	addi	r19,r4,736
   82364:	dd400515 	stw	r21,20(sp)
   82368:	dfc00715 	stw	ra,28(sp)
   8236c:	dd800615 	stw	r22,24(sp)
   82370:	dd000415 	stw	r20,16(sp)
   82374:	dc800215 	stw	r18,8(sp)
   82378:	dc400115 	stw	r17,4(sp)
   8237c:	dc000015 	stw	r16,0(sp)
   82380:	282b883a 	mov	r21,r5
   82384:	0081bb40 	call	81bb4 <__sfp_lock_acquire>
   82388:	98001f26 	beq	r19,zero,82408 <_fwalk+0xb0>
   8238c:	002d883a 	mov	r22,zero
   82390:	9c800117 	ldw	r18,4(r19)
   82394:	9c000217 	ldw	r16,8(r19)
   82398:	90bfffc4 	addi	r2,r18,-1
   8239c:	10000c16 	blt	r2,zero,823d0 <_fwalk+0x78>
   823a0:	0023883a 	mov	r17,zero
   823a4:	053fffc4 	movi	r20,-1
   823a8:	8080030f 	ldh	r2,12(r16)
   823ac:	8c400044 	addi	r17,r17,1
   823b0:	10000526 	beq	r2,zero,823c8 <_fwalk+0x70>
   823b4:	8080038f 	ldh	r2,14(r16)
   823b8:	8009883a 	mov	r4,r16
   823bc:	15000226 	beq	r2,r20,823c8 <_fwalk+0x70>
   823c0:	a83ee83a 	callr	r21
   823c4:	b0acb03a 	or	r22,r22,r2
   823c8:	84001704 	addi	r16,r16,92
   823cc:	947ff61e 	bne	r18,r17,823a8 <_fwalk+0x50>
   823d0:	9cc00017 	ldw	r19,0(r19)
   823d4:	983fee1e 	bne	r19,zero,82390 <_fwalk+0x38>
   823d8:	0081bb80 	call	81bb8 <__sfp_lock_release>
   823dc:	b005883a 	mov	r2,r22
   823e0:	dfc00717 	ldw	ra,28(sp)
   823e4:	dd800617 	ldw	r22,24(sp)
   823e8:	dd400517 	ldw	r21,20(sp)
   823ec:	dd000417 	ldw	r20,16(sp)
   823f0:	dcc00317 	ldw	r19,12(sp)
   823f4:	dc800217 	ldw	r18,8(sp)
   823f8:	dc400117 	ldw	r17,4(sp)
   823fc:	dc000017 	ldw	r16,0(sp)
   82400:	dec00804 	addi	sp,sp,32
   82404:	f800283a 	ret
   82408:	002d883a 	mov	r22,zero
   8240c:	003ff206 	br	823d8 <_fwalk+0x80>

00082410 <__smakebuf_r>:
   82410:	2880030b 	ldhu	r2,12(r5)
   82414:	deffed04 	addi	sp,sp,-76
   82418:	dc401015 	stw	r17,64(sp)
   8241c:	1080008c 	andi	r2,r2,2
   82420:	dc000f15 	stw	r16,60(sp)
   82424:	dfc01215 	stw	ra,72(sp)
   82428:	dc801115 	stw	r18,68(sp)
   8242c:	2821883a 	mov	r16,r5
   82430:	2023883a 	mov	r17,r4
   82434:	10000b26 	beq	r2,zero,82464 <__smakebuf_r+0x54>
   82438:	28c010c4 	addi	r3,r5,67
   8243c:	00800044 	movi	r2,1
   82440:	28800515 	stw	r2,20(r5)
   82444:	28c00415 	stw	r3,16(r5)
   82448:	28c00015 	stw	r3,0(r5)
   8244c:	dfc01217 	ldw	ra,72(sp)
   82450:	dc801117 	ldw	r18,68(sp)
   82454:	dc401017 	ldw	r17,64(sp)
   82458:	dc000f17 	ldw	r16,60(sp)
   8245c:	dec01304 	addi	sp,sp,76
   82460:	f800283a 	ret
   82464:	2940038f 	ldh	r5,14(r5)
   82468:	28002116 	blt	r5,zero,824f0 <__smakebuf_r+0xe0>
   8246c:	d80d883a 	mov	r6,sp
   82470:	00829940 	call	82994 <_fstat_r>
   82474:	10001e16 	blt	r2,zero,824f0 <__smakebuf_r+0xe0>
   82478:	d8800117 	ldw	r2,4(sp)
   8247c:	00e00014 	movui	r3,32768
   82480:	113c000c 	andi	r4,r2,61440
   82484:	20c03126 	beq	r4,r3,8254c <__smakebuf_r+0x13c>
   82488:	8080030b 	ldhu	r2,12(r16)
   8248c:	00c80004 	movi	r3,8192
   82490:	10820014 	ori	r2,r2,2048
   82494:	8080030d 	sth	r2,12(r16)
   82498:	20c01e26 	beq	r4,r3,82514 <__smakebuf_r+0x104>
   8249c:	04810004 	movi	r18,1024
   824a0:	8809883a 	mov	r4,r17
   824a4:	900b883a 	mov	r5,r18
   824a8:	00807e80 	call	807e8 <_malloc_r>
   824ac:	1009883a 	mov	r4,r2
   824b0:	10003126 	beq	r2,zero,82578 <__smakebuf_r+0x168>
   824b4:	80c0030b 	ldhu	r3,12(r16)
   824b8:	00800234 	movhi	r2,8
   824bc:	10872a04 	addi	r2,r2,7336
   824c0:	88800f15 	stw	r2,60(r17)
   824c4:	18c02014 	ori	r3,r3,128
   824c8:	84800515 	stw	r18,20(r16)
   824cc:	80c0030d 	sth	r3,12(r16)
   824d0:	81000415 	stw	r4,16(r16)
   824d4:	81000015 	stw	r4,0(r16)
   824d8:	dfc01217 	ldw	ra,72(sp)
   824dc:	dc801117 	ldw	r18,68(sp)
   824e0:	dc401017 	ldw	r17,64(sp)
   824e4:	dc000f17 	ldw	r16,60(sp)
   824e8:	dec01304 	addi	sp,sp,76
   824ec:	f800283a 	ret
   824f0:	80c0030b 	ldhu	r3,12(r16)
   824f4:	1880200c 	andi	r2,r3,128
   824f8:	10000426 	beq	r2,zero,8250c <__smakebuf_r+0xfc>
   824fc:	04801004 	movi	r18,64
   82500:	18820014 	ori	r2,r3,2048
   82504:	8080030d 	sth	r2,12(r16)
   82508:	003fe506 	br	824a0 <__smakebuf_r+0x90>
   8250c:	04810004 	movi	r18,1024
   82510:	003ffb06 	br	82500 <__smakebuf_r+0xf0>
   82514:	8140038f 	ldh	r5,14(r16)
   82518:	8809883a 	mov	r4,r17
   8251c:	0082a080 	call	82a08 <_isatty_r>
   82520:	103fde26 	beq	r2,zero,8249c <__smakebuf_r+0x8c>
   82524:	8080030b 	ldhu	r2,12(r16)
   82528:	80c010c4 	addi	r3,r16,67
   8252c:	04810004 	movi	r18,1024
   82530:	10800054 	ori	r2,r2,1
   82534:	8080030d 	sth	r2,12(r16)
   82538:	00800044 	movi	r2,1
   8253c:	80c00415 	stw	r3,16(r16)
   82540:	80800515 	stw	r2,20(r16)
   82544:	80c00015 	stw	r3,0(r16)
   82548:	003fd506 	br	824a0 <__smakebuf_r+0x90>
   8254c:	80c00a17 	ldw	r3,40(r16)
   82550:	00800234 	movhi	r2,8
   82554:	10899104 	addi	r2,r2,9796
   82558:	18bfcb1e 	bne	r3,r2,82488 <__smakebuf_r+0x78>
   8255c:	8080030b 	ldhu	r2,12(r16)
   82560:	00c10004 	movi	r3,1024
   82564:	1825883a 	mov	r18,r3
   82568:	10c4b03a 	or	r2,r2,r3
   8256c:	8080030d 	sth	r2,12(r16)
   82570:	80c01315 	stw	r3,76(r16)
   82574:	003fca06 	br	824a0 <__smakebuf_r+0x90>
   82578:	8100030b 	ldhu	r4,12(r16)
   8257c:	2080800c 	andi	r2,r4,512
   82580:	103fb21e 	bne	r2,zero,8244c <__smakebuf_r+0x3c>
   82584:	80c010c4 	addi	r3,r16,67
   82588:	21000094 	ori	r4,r4,2
   8258c:	00800044 	movi	r2,1
   82590:	80800515 	stw	r2,20(r16)
   82594:	8100030d 	sth	r4,12(r16)
   82598:	80c00415 	stw	r3,16(r16)
   8259c:	80c00015 	stw	r3,0(r16)
   825a0:	003faa06 	br	8244c <__smakebuf_r+0x3c>

000825a4 <memset>:
   825a4:	008000c4 	movi	r2,3
   825a8:	29403fcc 	andi	r5,r5,255
   825ac:	2007883a 	mov	r3,r4
   825b0:	1180022e 	bgeu	r2,r6,825bc <memset+0x18>
   825b4:	2084703a 	and	r2,r4,r2
   825b8:	10000826 	beq	r2,zero,825dc <memset+0x38>
   825bc:	30000526 	beq	r6,zero,825d4 <memset+0x30>
   825c0:	2805883a 	mov	r2,r5
   825c4:	30cd883a 	add	r6,r6,r3
   825c8:	18800005 	stb	r2,0(r3)
   825cc:	18c00044 	addi	r3,r3,1
   825d0:	19bffd1e 	bne	r3,r6,825c8 <memset+0x24>
   825d4:	2005883a 	mov	r2,r4
   825d8:	f800283a 	ret
   825dc:	2804923a 	slli	r2,r5,8
   825e0:	020003c4 	movi	r8,15
   825e4:	200f883a 	mov	r7,r4
   825e8:	2884b03a 	or	r2,r5,r2
   825ec:	1006943a 	slli	r3,r2,16
   825f0:	10c6b03a 	or	r3,r2,r3
   825f4:	41800a2e 	bgeu	r8,r6,82620 <memset+0x7c>
   825f8:	4005883a 	mov	r2,r8
   825fc:	31bffc04 	addi	r6,r6,-16
   82600:	38c00015 	stw	r3,0(r7)
   82604:	38c00115 	stw	r3,4(r7)
   82608:	38c00215 	stw	r3,8(r7)
   8260c:	38c00315 	stw	r3,12(r7)
   82610:	39c00404 	addi	r7,r7,16
   82614:	11bff936 	bltu	r2,r6,825fc <memset+0x58>
   82618:	008000c4 	movi	r2,3
   8261c:	1180052e 	bgeu	r2,r6,82634 <memset+0x90>
   82620:	31bfff04 	addi	r6,r6,-4
   82624:	008000c4 	movi	r2,3
   82628:	38c00015 	stw	r3,0(r7)
   8262c:	39c00104 	addi	r7,r7,4
   82630:	11bffb36 	bltu	r2,r6,82620 <memset+0x7c>
   82634:	3807883a 	mov	r3,r7
   82638:	003fe006 	br	825bc <memset+0x18>

0008263c <__sclose>:
   8263c:	2940038f 	ldh	r5,14(r5)
   82640:	00828001 	jmpi	82800 <_close_r>

00082644 <__sseek>:
   82644:	defffe04 	addi	sp,sp,-8
   82648:	dc000015 	stw	r16,0(sp)
   8264c:	2821883a 	mov	r16,r5
   82650:	2940038f 	ldh	r5,14(r5)
   82654:	dfc00115 	stw	ra,4(sp)
   82658:	0082a780 	call	82a78 <_lseek_r>
   8265c:	1007883a 	mov	r3,r2
   82660:	00bfffc4 	movi	r2,-1
   82664:	18800926 	beq	r3,r2,8268c <__sseek+0x48>
   82668:	8080030b 	ldhu	r2,12(r16)
   8266c:	80c01415 	stw	r3,80(r16)
   82670:	10840014 	ori	r2,r2,4096
   82674:	8080030d 	sth	r2,12(r16)
   82678:	1805883a 	mov	r2,r3
   8267c:	dfc00117 	ldw	ra,4(sp)
   82680:	dc000017 	ldw	r16,0(sp)
   82684:	dec00204 	addi	sp,sp,8
   82688:	f800283a 	ret
   8268c:	8080030b 	ldhu	r2,12(r16)
   82690:	10bbffcc 	andi	r2,r2,61439
   82694:	8080030d 	sth	r2,12(r16)
   82698:	1805883a 	mov	r2,r3
   8269c:	dfc00117 	ldw	ra,4(sp)
   826a0:	dc000017 	ldw	r16,0(sp)
   826a4:	dec00204 	addi	sp,sp,8
   826a8:	f800283a 	ret

000826ac <__swrite>:
   826ac:	2880030b 	ldhu	r2,12(r5)
   826b0:	defffb04 	addi	sp,sp,-20
   826b4:	dcc00315 	stw	r19,12(sp)
   826b8:	1080400c 	andi	r2,r2,256
   826bc:	dc800215 	stw	r18,8(sp)
   826c0:	dc400115 	stw	r17,4(sp)
   826c4:	dc000015 	stw	r16,0(sp)
   826c8:	3027883a 	mov	r19,r6
   826cc:	3825883a 	mov	r18,r7
   826d0:	dfc00415 	stw	ra,16(sp)
   826d4:	2821883a 	mov	r16,r5
   826d8:	000d883a 	mov	r6,zero
   826dc:	01c00084 	movi	r7,2
   826e0:	2023883a 	mov	r17,r4
   826e4:	10000226 	beq	r2,zero,826f0 <__swrite+0x44>
   826e8:	2940038f 	ldh	r5,14(r5)
   826ec:	0082a780 	call	82a78 <_lseek_r>
   826f0:	8080030b 	ldhu	r2,12(r16)
   826f4:	8140038f 	ldh	r5,14(r16)
   826f8:	8809883a 	mov	r4,r17
   826fc:	10bbffcc 	andi	r2,r2,61439
   82700:	980d883a 	mov	r6,r19
   82704:	900f883a 	mov	r7,r18
   82708:	8080030d 	sth	r2,12(r16)
   8270c:	dfc00417 	ldw	ra,16(sp)
   82710:	dcc00317 	ldw	r19,12(sp)
   82714:	dc800217 	ldw	r18,8(sp)
   82718:	dc400117 	ldw	r17,4(sp)
   8271c:	dc000017 	ldw	r16,0(sp)
   82720:	dec00504 	addi	sp,sp,20
   82724:	00827881 	jmpi	82788 <_write_r>

00082728 <__sread>:
   82728:	defffe04 	addi	sp,sp,-8
   8272c:	dc000015 	stw	r16,0(sp)
   82730:	2821883a 	mov	r16,r5
   82734:	2940038f 	ldh	r5,14(r5)
   82738:	dfc00115 	stw	ra,4(sp)
   8273c:	0082af00 	call	82af0 <_read_r>
   82740:	1007883a 	mov	r3,r2
   82744:	10000816 	blt	r2,zero,82768 <__sread+0x40>
   82748:	80801417 	ldw	r2,80(r16)
   8274c:	10c5883a 	add	r2,r2,r3
   82750:	80801415 	stw	r2,80(r16)
   82754:	1805883a 	mov	r2,r3
   82758:	dfc00117 	ldw	ra,4(sp)
   8275c:	dc000017 	ldw	r16,0(sp)
   82760:	dec00204 	addi	sp,sp,8
   82764:	f800283a 	ret
   82768:	8080030b 	ldhu	r2,12(r16)
   8276c:	10bbffcc 	andi	r2,r2,61439
   82770:	8080030d 	sth	r2,12(r16)
   82774:	1805883a 	mov	r2,r3
   82778:	dfc00117 	ldw	ra,4(sp)
   8277c:	dc000017 	ldw	r16,0(sp)
   82780:	dec00204 	addi	sp,sp,8
   82784:	f800283a 	ret

00082788 <_write_r>:
   82788:	defffd04 	addi	sp,sp,-12
   8278c:	dc000015 	stw	r16,0(sp)
   82790:	04000274 	movhi	r16,9
   82794:	8428a704 	addi	r16,r16,-23908
   82798:	dc400115 	stw	r17,4(sp)
   8279c:	80000015 	stw	zero,0(r16)
   827a0:	2023883a 	mov	r17,r4
   827a4:	2809883a 	mov	r4,r5
   827a8:	300b883a 	mov	r5,r6
   827ac:	380d883a 	mov	r6,r7
   827b0:	dfc00215 	stw	ra,8(sp)
   827b4:	008352c0 	call	8352c <write>
   827b8:	1007883a 	mov	r3,r2
   827bc:	00bfffc4 	movi	r2,-1
   827c0:	18800626 	beq	r3,r2,827dc <_write_r+0x54>
   827c4:	1805883a 	mov	r2,r3
   827c8:	dfc00217 	ldw	ra,8(sp)
   827cc:	dc400117 	ldw	r17,4(sp)
   827d0:	dc000017 	ldw	r16,0(sp)
   827d4:	dec00304 	addi	sp,sp,12
   827d8:	f800283a 	ret
   827dc:	80800017 	ldw	r2,0(r16)
   827e0:	103ff826 	beq	r2,zero,827c4 <_write_r+0x3c>
   827e4:	88800015 	stw	r2,0(r17)
   827e8:	1805883a 	mov	r2,r3
   827ec:	dfc00217 	ldw	ra,8(sp)
   827f0:	dc400117 	ldw	r17,4(sp)
   827f4:	dc000017 	ldw	r16,0(sp)
   827f8:	dec00304 	addi	sp,sp,12
   827fc:	f800283a 	ret

00082800 <_close_r>:
   82800:	defffd04 	addi	sp,sp,-12
   82804:	dc000015 	stw	r16,0(sp)
   82808:	04000274 	movhi	r16,9
   8280c:	8428a704 	addi	r16,r16,-23908
   82810:	dc400115 	stw	r17,4(sp)
   82814:	80000015 	stw	zero,0(r16)
   82818:	2023883a 	mov	r17,r4
   8281c:	2809883a 	mov	r4,r5
   82820:	dfc00215 	stw	ra,8(sp)
   82824:	0082ba00 	call	82ba0 <close>
   82828:	1007883a 	mov	r3,r2
   8282c:	00bfffc4 	movi	r2,-1
   82830:	18800626 	beq	r3,r2,8284c <_close_r+0x4c>
   82834:	1805883a 	mov	r2,r3
   82838:	dfc00217 	ldw	ra,8(sp)
   8283c:	dc400117 	ldw	r17,4(sp)
   82840:	dc000017 	ldw	r16,0(sp)
   82844:	dec00304 	addi	sp,sp,12
   82848:	f800283a 	ret
   8284c:	80800017 	ldw	r2,0(r16)
   82850:	103ff826 	beq	r2,zero,82834 <_close_r+0x34>
   82854:	88800015 	stw	r2,0(r17)
   82858:	1805883a 	mov	r2,r3
   8285c:	dfc00217 	ldw	ra,8(sp)
   82860:	dc400117 	ldw	r17,4(sp)
   82864:	dc000017 	ldw	r16,0(sp)
   82868:	dec00304 	addi	sp,sp,12
   8286c:	f800283a 	ret

00082870 <_fclose_r>:
   82870:	defffc04 	addi	sp,sp,-16
   82874:	dc400115 	stw	r17,4(sp)
   82878:	dc000015 	stw	r16,0(sp)
   8287c:	dfc00315 	stw	ra,12(sp)
   82880:	dc800215 	stw	r18,8(sp)
   82884:	2821883a 	mov	r16,r5
   82888:	2023883a 	mov	r17,r4
   8288c:	28002926 	beq	r5,zero,82934 <_fclose_r+0xc4>
   82890:	0081bb40 	call	81bb4 <__sfp_lock_acquire>
   82894:	88000226 	beq	r17,zero,828a0 <_fclose_r+0x30>
   82898:	88800e17 	ldw	r2,56(r17)
   8289c:	10002d26 	beq	r2,zero,82954 <_fclose_r+0xe4>
   828a0:	8080030f 	ldh	r2,12(r16)
   828a4:	10002226 	beq	r2,zero,82930 <_fclose_r+0xc0>
   828a8:	8809883a 	mov	r4,r17
   828ac:	800b883a 	mov	r5,r16
   828b0:	008192c0 	call	8192c <_fflush_r>
   828b4:	1025883a 	mov	r18,r2
   828b8:	80800b17 	ldw	r2,44(r16)
   828bc:	10000426 	beq	r2,zero,828d0 <_fclose_r+0x60>
   828c0:	81400717 	ldw	r5,28(r16)
   828c4:	8809883a 	mov	r4,r17
   828c8:	103ee83a 	callr	r2
   828cc:	10002a16 	blt	r2,zero,82978 <_fclose_r+0x108>
   828d0:	8080030b 	ldhu	r2,12(r16)
   828d4:	1080200c 	andi	r2,r2,128
   828d8:	1000231e 	bne	r2,zero,82968 <_fclose_r+0xf8>
   828dc:	81400c17 	ldw	r5,48(r16)
   828e0:	28000526 	beq	r5,zero,828f8 <_fclose_r+0x88>
   828e4:	80801004 	addi	r2,r16,64
   828e8:	28800226 	beq	r5,r2,828f4 <_fclose_r+0x84>
   828ec:	8809883a 	mov	r4,r17
   828f0:	0081f7c0 	call	81f7c <_free_r>
   828f4:	80000c15 	stw	zero,48(r16)
   828f8:	81401117 	ldw	r5,68(r16)
   828fc:	28000326 	beq	r5,zero,8290c <_fclose_r+0x9c>
   82900:	8809883a 	mov	r4,r17
   82904:	0081f7c0 	call	81f7c <_free_r>
   82908:	80001115 	stw	zero,68(r16)
   8290c:	8000030d 	sth	zero,12(r16)
   82910:	0081bb80 	call	81bb8 <__sfp_lock_release>
   82914:	9005883a 	mov	r2,r18
   82918:	dfc00317 	ldw	ra,12(sp)
   8291c:	dc800217 	ldw	r18,8(sp)
   82920:	dc400117 	ldw	r17,4(sp)
   82924:	dc000017 	ldw	r16,0(sp)
   82928:	dec00404 	addi	sp,sp,16
   8292c:	f800283a 	ret
   82930:	0081bb80 	call	81bb8 <__sfp_lock_release>
   82934:	0025883a 	mov	r18,zero
   82938:	9005883a 	mov	r2,r18
   8293c:	dfc00317 	ldw	ra,12(sp)
   82940:	dc800217 	ldw	r18,8(sp)
   82944:	dc400117 	ldw	r17,4(sp)
   82948:	dc000017 	ldw	r16,0(sp)
   8294c:	dec00404 	addi	sp,sp,16
   82950:	f800283a 	ret
   82954:	8809883a 	mov	r4,r17
   82958:	0081bc40 	call	81bc4 <__sinit>
   8295c:	8080030f 	ldh	r2,12(r16)
   82960:	103fd11e 	bne	r2,zero,828a8 <_fclose_r+0x38>
   82964:	003ff206 	br	82930 <_fclose_r+0xc0>
   82968:	81400417 	ldw	r5,16(r16)
   8296c:	8809883a 	mov	r4,r17
   82970:	0081f7c0 	call	81f7c <_free_r>
   82974:	003fd906 	br	828dc <_fclose_r+0x6c>
   82978:	04bfffc4 	movi	r18,-1
   8297c:	003fd406 	br	828d0 <_fclose_r+0x60>

00082980 <fclose>:
   82980:	00800274 	movhi	r2,9
   82984:	10a1b804 	addi	r2,r2,-31008
   82988:	200b883a 	mov	r5,r4
   8298c:	11000017 	ldw	r4,0(r2)
   82990:	00828701 	jmpi	82870 <_fclose_r>

00082994 <_fstat_r>:
   82994:	defffd04 	addi	sp,sp,-12
   82998:	dc000015 	stw	r16,0(sp)
   8299c:	04000274 	movhi	r16,9
   829a0:	8428a704 	addi	r16,r16,-23908
   829a4:	dc400115 	stw	r17,4(sp)
   829a8:	80000015 	stw	zero,0(r16)
   829ac:	2023883a 	mov	r17,r4
   829b0:	2809883a 	mov	r4,r5
   829b4:	300b883a 	mov	r5,r6
   829b8:	dfc00215 	stw	ra,8(sp)
   829bc:	0082d2c0 	call	82d2c <fstat>
   829c0:	1007883a 	mov	r3,r2
   829c4:	00bfffc4 	movi	r2,-1
   829c8:	18800626 	beq	r3,r2,829e4 <_fstat_r+0x50>
   829cc:	1805883a 	mov	r2,r3
   829d0:	dfc00217 	ldw	ra,8(sp)
   829d4:	dc400117 	ldw	r17,4(sp)
   829d8:	dc000017 	ldw	r16,0(sp)
   829dc:	dec00304 	addi	sp,sp,12
   829e0:	f800283a 	ret
   829e4:	80800017 	ldw	r2,0(r16)
   829e8:	103ff826 	beq	r2,zero,829cc <_fstat_r+0x38>
   829ec:	88800015 	stw	r2,0(r17)
   829f0:	1805883a 	mov	r2,r3
   829f4:	dfc00217 	ldw	ra,8(sp)
   829f8:	dc400117 	ldw	r17,4(sp)
   829fc:	dc000017 	ldw	r16,0(sp)
   82a00:	dec00304 	addi	sp,sp,12
   82a04:	f800283a 	ret

00082a08 <_isatty_r>:
   82a08:	defffd04 	addi	sp,sp,-12
   82a0c:	dc000015 	stw	r16,0(sp)
   82a10:	04000274 	movhi	r16,9
   82a14:	8428a704 	addi	r16,r16,-23908
   82a18:	dc400115 	stw	r17,4(sp)
   82a1c:	80000015 	stw	zero,0(r16)
   82a20:	2023883a 	mov	r17,r4
   82a24:	2809883a 	mov	r4,r5
   82a28:	dfc00215 	stw	ra,8(sp)
   82a2c:	0082e640 	call	82e64 <isatty>
   82a30:	1007883a 	mov	r3,r2
   82a34:	00bfffc4 	movi	r2,-1
   82a38:	18800626 	beq	r3,r2,82a54 <_isatty_r+0x4c>
   82a3c:	1805883a 	mov	r2,r3
   82a40:	dfc00217 	ldw	ra,8(sp)
   82a44:	dc400117 	ldw	r17,4(sp)
   82a48:	dc000017 	ldw	r16,0(sp)
   82a4c:	dec00304 	addi	sp,sp,12
   82a50:	f800283a 	ret
   82a54:	80800017 	ldw	r2,0(r16)
   82a58:	103ff826 	beq	r2,zero,82a3c <_isatty_r+0x34>
   82a5c:	88800015 	stw	r2,0(r17)
   82a60:	1805883a 	mov	r2,r3
   82a64:	dfc00217 	ldw	ra,8(sp)
   82a68:	dc400117 	ldw	r17,4(sp)
   82a6c:	dc000017 	ldw	r16,0(sp)
   82a70:	dec00304 	addi	sp,sp,12
   82a74:	f800283a 	ret

00082a78 <_lseek_r>:
   82a78:	defffd04 	addi	sp,sp,-12
   82a7c:	dc000015 	stw	r16,0(sp)
   82a80:	04000274 	movhi	r16,9
   82a84:	8428a704 	addi	r16,r16,-23908
   82a88:	dc400115 	stw	r17,4(sp)
   82a8c:	80000015 	stw	zero,0(r16)
   82a90:	2023883a 	mov	r17,r4
   82a94:	2809883a 	mov	r4,r5
   82a98:	300b883a 	mov	r5,r6
   82a9c:	380d883a 	mov	r6,r7
   82aa0:	dfc00215 	stw	ra,8(sp)
   82aa4:	00830740 	call	83074 <lseek>
   82aa8:	1007883a 	mov	r3,r2
   82aac:	00bfffc4 	movi	r2,-1
   82ab0:	18800626 	beq	r3,r2,82acc <_lseek_r+0x54>
   82ab4:	1805883a 	mov	r2,r3
   82ab8:	dfc00217 	ldw	ra,8(sp)
   82abc:	dc400117 	ldw	r17,4(sp)
   82ac0:	dc000017 	ldw	r16,0(sp)
   82ac4:	dec00304 	addi	sp,sp,12
   82ac8:	f800283a 	ret
   82acc:	80800017 	ldw	r2,0(r16)
   82ad0:	103ff826 	beq	r2,zero,82ab4 <_lseek_r+0x3c>
   82ad4:	88800015 	stw	r2,0(r17)
   82ad8:	1805883a 	mov	r2,r3
   82adc:	dfc00217 	ldw	ra,8(sp)
   82ae0:	dc400117 	ldw	r17,4(sp)
   82ae4:	dc000017 	ldw	r16,0(sp)
   82ae8:	dec00304 	addi	sp,sp,12
   82aec:	f800283a 	ret

00082af0 <_read_r>:
   82af0:	defffd04 	addi	sp,sp,-12
   82af4:	dc000015 	stw	r16,0(sp)
   82af8:	04000274 	movhi	r16,9
   82afc:	8428a704 	addi	r16,r16,-23908
   82b00:	dc400115 	stw	r17,4(sp)
   82b04:	80000015 	stw	zero,0(r16)
   82b08:	2023883a 	mov	r17,r4
   82b0c:	2809883a 	mov	r4,r5
   82b10:	300b883a 	mov	r5,r6
   82b14:	380d883a 	mov	r6,r7
   82b18:	dfc00215 	stw	ra,8(sp)
   82b1c:	00832740 	call	83274 <read>
   82b20:	1007883a 	mov	r3,r2
   82b24:	00bfffc4 	movi	r2,-1
   82b28:	18800626 	beq	r3,r2,82b44 <_read_r+0x54>
   82b2c:	1805883a 	mov	r2,r3
   82b30:	dfc00217 	ldw	ra,8(sp)
   82b34:	dc400117 	ldw	r17,4(sp)
   82b38:	dc000017 	ldw	r16,0(sp)
   82b3c:	dec00304 	addi	sp,sp,12
   82b40:	f800283a 	ret
   82b44:	80800017 	ldw	r2,0(r16)
   82b48:	103ff826 	beq	r2,zero,82b2c <_read_r+0x3c>
   82b4c:	88800015 	stw	r2,0(r17)
   82b50:	1805883a 	mov	r2,r3
   82b54:	dfc00217 	ldw	ra,8(sp)
   82b58:	dc400117 	ldw	r17,4(sp)
   82b5c:	dc000017 	ldw	r16,0(sp)
   82b60:	dec00304 	addi	sp,sp,12
   82b64:	f800283a 	ret

00082b68 <__mulsi3>:
   82b68:	20000a26 	beq	r4,zero,82b94 <__mulsi3+0x2c>
   82b6c:	0007883a 	mov	r3,zero
   82b70:	2080004c 	andi	r2,r4,1
   82b74:	1005003a 	cmpeq	r2,r2,zero
   82b78:	2008d07a 	srli	r4,r4,1
   82b7c:	1000011e 	bne	r2,zero,82b84 <__mulsi3+0x1c>
   82b80:	1947883a 	add	r3,r3,r5
   82b84:	294b883a 	add	r5,r5,r5
   82b88:	203ff91e 	bne	r4,zero,82b70 <__mulsi3+0x8>
   82b8c:	1805883a 	mov	r2,r3
   82b90:	f800283a 	ret
   82b94:	0007883a 	mov	r3,zero
   82b98:	1805883a 	mov	r2,r3
   82b9c:	f800283a 	ret

00082ba0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   82ba0:	defff804 	addi	sp,sp,-32
   82ba4:	dfc00715 	stw	ra,28(sp)
   82ba8:	df000615 	stw	fp,24(sp)
   82bac:	df000604 	addi	fp,sp,24
   82bb0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   82bb4:	e0bffc17 	ldw	r2,-16(fp)
   82bb8:	1004803a 	cmplt	r2,r2,zero
   82bbc:	1000091e 	bne	r2,zero,82be4 <close+0x44>
   82bc0:	e13ffc17 	ldw	r4,-16(fp)
   82bc4:	01400304 	movi	r5,12
   82bc8:	0082b680 	call	82b68 <__mulsi3>
   82bcc:	1007883a 	mov	r3,r2
   82bd0:	00800234 	movhi	r2,8
   82bd4:	109cf804 	addi	r2,r2,29664
   82bd8:	1887883a 	add	r3,r3,r2
   82bdc:	e0ffff15 	stw	r3,-4(fp)
   82be0:	00000106 	br	82be8 <close+0x48>
   82be4:	e03fff15 	stw	zero,-4(fp)
   82be8:	e0bfff17 	ldw	r2,-4(fp)
   82bec:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   82bf0:	e0bffb17 	ldw	r2,-20(fp)
   82bf4:	1005003a 	cmpeq	r2,r2,zero
   82bf8:	10001d1e 	bne	r2,zero,82c70 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   82bfc:	e0bffb17 	ldw	r2,-20(fp)
   82c00:	10800017 	ldw	r2,0(r2)
   82c04:	10800417 	ldw	r2,16(r2)
   82c08:	1005003a 	cmpeq	r2,r2,zero
   82c0c:	1000071e 	bne	r2,zero,82c2c <close+0x8c>
   82c10:	e0bffb17 	ldw	r2,-20(fp)
   82c14:	10800017 	ldw	r2,0(r2)
   82c18:	10800417 	ldw	r2,16(r2)
   82c1c:	e13ffb17 	ldw	r4,-20(fp)
   82c20:	103ee83a 	callr	r2
   82c24:	e0bffe15 	stw	r2,-8(fp)
   82c28:	00000106 	br	82c30 <close+0x90>
   82c2c:	e03ffe15 	stw	zero,-8(fp)
   82c30:	e0bffe17 	ldw	r2,-8(fp)
   82c34:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   82c38:	e13ffc17 	ldw	r4,-16(fp)
   82c3c:	00833f80 	call	833f8 <alt_release_fd>
    if (rval < 0)
   82c40:	e0bffa17 	ldw	r2,-24(fp)
   82c44:	1004403a 	cmpge	r2,r2,zero
   82c48:	1000071e 	bne	r2,zero,82c68 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   82c4c:	0082ca00 	call	82ca0 <alt_get_errno>
   82c50:	e0fffa17 	ldw	r3,-24(fp)
   82c54:	00c7c83a 	sub	r3,zero,r3
   82c58:	10c00015 	stw	r3,0(r2)
      return -1;
   82c5c:	00bfffc4 	movi	r2,-1
   82c60:	e0bffd15 	stw	r2,-12(fp)
   82c64:	00000806 	br	82c88 <close+0xe8>
    }
    return 0;
   82c68:	e03ffd15 	stw	zero,-12(fp)
   82c6c:	00000606 	br	82c88 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   82c70:	0082ca00 	call	82ca0 <alt_get_errno>
   82c74:	1007883a 	mov	r3,r2
   82c78:	00801444 	movi	r2,81
   82c7c:	18800015 	stw	r2,0(r3)
    return -1;
   82c80:	00bfffc4 	movi	r2,-1
   82c84:	e0bffd15 	stw	r2,-12(fp)
   82c88:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   82c8c:	e037883a 	mov	sp,fp
   82c90:	dfc00117 	ldw	ra,4(sp)
   82c94:	df000017 	ldw	fp,0(sp)
   82c98:	dec00204 	addi	sp,sp,8
   82c9c:	f800283a 	ret

00082ca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82ca0:	defffd04 	addi	sp,sp,-12
   82ca4:	dfc00215 	stw	ra,8(sp)
   82ca8:	df000115 	stw	fp,4(sp)
   82cac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   82cb0:	00800274 	movhi	r2,9
   82cb4:	10a1c104 	addi	r2,r2,-30972
   82cb8:	10800017 	ldw	r2,0(r2)
   82cbc:	1005003a 	cmpeq	r2,r2,zero
   82cc0:	1000061e 	bne	r2,zero,82cdc <alt_get_errno+0x3c>
   82cc4:	00800274 	movhi	r2,9
   82cc8:	10a1c104 	addi	r2,r2,-30972
   82ccc:	10800017 	ldw	r2,0(r2)
   82cd0:	103ee83a 	callr	r2
   82cd4:	e0bfff15 	stw	r2,-4(fp)
   82cd8:	00000306 	br	82ce8 <alt_get_errno+0x48>
   82cdc:	00800274 	movhi	r2,9
   82ce0:	10a8a704 	addi	r2,r2,-23908
   82ce4:	e0bfff15 	stw	r2,-4(fp)
   82ce8:	e0bfff17 	ldw	r2,-4(fp)
}
   82cec:	e037883a 	mov	sp,fp
   82cf0:	dfc00117 	ldw	ra,4(sp)
   82cf4:	df000017 	ldw	fp,0(sp)
   82cf8:	dec00204 	addi	sp,sp,8
   82cfc:	f800283a 	ret

00082d00 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   82d00:	defffc04 	addi	sp,sp,-16
   82d04:	df000315 	stw	fp,12(sp)
   82d08:	df000304 	addi	fp,sp,12
   82d0c:	e13ffd15 	stw	r4,-12(fp)
   82d10:	e17ffe15 	stw	r5,-8(fp)
   82d14:	e1bfff15 	stw	r6,-4(fp)
  return len;
   82d18:	e0bfff17 	ldw	r2,-4(fp)
}
   82d1c:	e037883a 	mov	sp,fp
   82d20:	df000017 	ldw	fp,0(sp)
   82d24:	dec00104 	addi	sp,sp,4
   82d28:	f800283a 	ret

00082d2c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   82d2c:	defff904 	addi	sp,sp,-28
   82d30:	dfc00615 	stw	ra,24(sp)
   82d34:	df000515 	stw	fp,20(sp)
   82d38:	df000504 	addi	fp,sp,20
   82d3c:	e13ffc15 	stw	r4,-16(fp)
   82d40:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   82d44:	e0bffc17 	ldw	r2,-16(fp)
   82d48:	1004803a 	cmplt	r2,r2,zero
   82d4c:	1000091e 	bne	r2,zero,82d74 <fstat+0x48>
   82d50:	e13ffc17 	ldw	r4,-16(fp)
   82d54:	01400304 	movi	r5,12
   82d58:	0082b680 	call	82b68 <__mulsi3>
   82d5c:	1007883a 	mov	r3,r2
   82d60:	00800234 	movhi	r2,8
   82d64:	109cf804 	addi	r2,r2,29664
   82d68:	1887883a 	add	r3,r3,r2
   82d6c:	e0ffff15 	stw	r3,-4(fp)
   82d70:	00000106 	br	82d78 <fstat+0x4c>
   82d74:	e03fff15 	stw	zero,-4(fp)
   82d78:	e0bfff17 	ldw	r2,-4(fp)
   82d7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   82d80:	e0bffb17 	ldw	r2,-20(fp)
   82d84:	1005003a 	cmpeq	r2,r2,zero
   82d88:	1000121e 	bne	r2,zero,82dd4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   82d8c:	e0bffb17 	ldw	r2,-20(fp)
   82d90:	10800017 	ldw	r2,0(r2)
   82d94:	10800817 	ldw	r2,32(r2)
   82d98:	1005003a 	cmpeq	r2,r2,zero
   82d9c:	1000081e 	bne	r2,zero,82dc0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   82da0:	e0bffb17 	ldw	r2,-20(fp)
   82da4:	10800017 	ldw	r2,0(r2)
   82da8:	10800817 	ldw	r2,32(r2)
   82dac:	e13ffb17 	ldw	r4,-20(fp)
   82db0:	e17ffd17 	ldw	r5,-12(fp)
   82db4:	103ee83a 	callr	r2
   82db8:	e0bffe15 	stw	r2,-8(fp)
   82dbc:	00000b06 	br	82dec <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   82dc0:	e0fffd17 	ldw	r3,-12(fp)
   82dc4:	00880004 	movi	r2,8192
   82dc8:	18800115 	stw	r2,4(r3)
      return 0;
   82dcc:	e03ffe15 	stw	zero,-8(fp)
   82dd0:	00000606 	br	82dec <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   82dd4:	0082e040 	call	82e04 <alt_get_errno>
   82dd8:	1007883a 	mov	r3,r2
   82ddc:	00801444 	movi	r2,81
   82de0:	18800015 	stw	r2,0(r3)
    return -1;
   82de4:	00bfffc4 	movi	r2,-1
   82de8:	e0bffe15 	stw	r2,-8(fp)
   82dec:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   82df0:	e037883a 	mov	sp,fp
   82df4:	dfc00117 	ldw	ra,4(sp)
   82df8:	df000017 	ldw	fp,0(sp)
   82dfc:	dec00204 	addi	sp,sp,8
   82e00:	f800283a 	ret

00082e04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82e04:	defffd04 	addi	sp,sp,-12
   82e08:	dfc00215 	stw	ra,8(sp)
   82e0c:	df000115 	stw	fp,4(sp)
   82e10:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   82e14:	00800274 	movhi	r2,9
   82e18:	10a1c104 	addi	r2,r2,-30972
   82e1c:	10800017 	ldw	r2,0(r2)
   82e20:	1005003a 	cmpeq	r2,r2,zero
   82e24:	1000061e 	bne	r2,zero,82e40 <alt_get_errno+0x3c>
   82e28:	00800274 	movhi	r2,9
   82e2c:	10a1c104 	addi	r2,r2,-30972
   82e30:	10800017 	ldw	r2,0(r2)
   82e34:	103ee83a 	callr	r2
   82e38:	e0bfff15 	stw	r2,-4(fp)
   82e3c:	00000306 	br	82e4c <alt_get_errno+0x48>
   82e40:	00800274 	movhi	r2,9
   82e44:	10a8a704 	addi	r2,r2,-23908
   82e48:	e0bfff15 	stw	r2,-4(fp)
   82e4c:	e0bfff17 	ldw	r2,-4(fp)
}
   82e50:	e037883a 	mov	sp,fp
   82e54:	dfc00117 	ldw	ra,4(sp)
   82e58:	df000017 	ldw	fp,0(sp)
   82e5c:	dec00204 	addi	sp,sp,8
   82e60:	f800283a 	ret

00082e64 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   82e64:	deffeb04 	addi	sp,sp,-84
   82e68:	dfc01415 	stw	ra,80(sp)
   82e6c:	df001315 	stw	fp,76(sp)
   82e70:	df001304 	addi	fp,sp,76
   82e74:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   82e78:	e0bffd17 	ldw	r2,-12(fp)
   82e7c:	1004803a 	cmplt	r2,r2,zero
   82e80:	1000091e 	bne	r2,zero,82ea8 <isatty+0x44>
   82e84:	e13ffd17 	ldw	r4,-12(fp)
   82e88:	01400304 	movi	r5,12
   82e8c:	0082b680 	call	82b68 <__mulsi3>
   82e90:	1007883a 	mov	r3,r2
   82e94:	00800234 	movhi	r2,8
   82e98:	109cf804 	addi	r2,r2,29664
   82e9c:	1887883a 	add	r3,r3,r2
   82ea0:	e0ffff15 	stw	r3,-4(fp)
   82ea4:	00000106 	br	82eac <isatty+0x48>
   82ea8:	e03fff15 	stw	zero,-4(fp)
   82eac:	e0bfff17 	ldw	r2,-4(fp)
   82eb0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   82eb4:	e0bfed17 	ldw	r2,-76(fp)
   82eb8:	1005003a 	cmpeq	r2,r2,zero
   82ebc:	10000f1e 	bne	r2,zero,82efc <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   82ec0:	e0bfed17 	ldw	r2,-76(fp)
   82ec4:	10800017 	ldw	r2,0(r2)
   82ec8:	10800817 	ldw	r2,32(r2)
   82ecc:	1004c03a 	cmpne	r2,r2,zero
   82ed0:	1000031e 	bne	r2,zero,82ee0 <isatty+0x7c>
    {
      return 1;
   82ed4:	00800044 	movi	r2,1
   82ed8:	e0bffe15 	stw	r2,-8(fp)
   82edc:	00000c06 	br	82f10 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   82ee0:	e17fee04 	addi	r5,fp,-72
   82ee4:	e13ffd17 	ldw	r4,-12(fp)
   82ee8:	0082d2c0 	call	82d2c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   82eec:	e0bfef17 	ldw	r2,-68(fp)
   82ef0:	10880020 	cmpeqi	r2,r2,8192
   82ef4:	e0bffe15 	stw	r2,-8(fp)
   82ef8:	00000506 	br	82f10 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   82efc:	0082f280 	call	82f28 <alt_get_errno>
   82f00:	1007883a 	mov	r3,r2
   82f04:	00801444 	movi	r2,81
   82f08:	18800015 	stw	r2,0(r3)
    return 0;
   82f0c:	e03ffe15 	stw	zero,-8(fp)
   82f10:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   82f14:	e037883a 	mov	sp,fp
   82f18:	dfc00117 	ldw	ra,4(sp)
   82f1c:	df000017 	ldw	fp,0(sp)
   82f20:	dec00204 	addi	sp,sp,8
   82f24:	f800283a 	ret

00082f28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82f28:	defffd04 	addi	sp,sp,-12
   82f2c:	dfc00215 	stw	ra,8(sp)
   82f30:	df000115 	stw	fp,4(sp)
   82f34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   82f38:	00800274 	movhi	r2,9
   82f3c:	10a1c104 	addi	r2,r2,-30972
   82f40:	10800017 	ldw	r2,0(r2)
   82f44:	1005003a 	cmpeq	r2,r2,zero
   82f48:	1000061e 	bne	r2,zero,82f64 <alt_get_errno+0x3c>
   82f4c:	00800274 	movhi	r2,9
   82f50:	10a1c104 	addi	r2,r2,-30972
   82f54:	10800017 	ldw	r2,0(r2)
   82f58:	103ee83a 	callr	r2
   82f5c:	e0bfff15 	stw	r2,-4(fp)
   82f60:	00000306 	br	82f70 <alt_get_errno+0x48>
   82f64:	00800274 	movhi	r2,9
   82f68:	10a8a704 	addi	r2,r2,-23908
   82f6c:	e0bfff15 	stw	r2,-4(fp)
   82f70:	e0bfff17 	ldw	r2,-4(fp)
}
   82f74:	e037883a 	mov	sp,fp
   82f78:	dfc00117 	ldw	ra,4(sp)
   82f7c:	df000017 	ldw	fp,0(sp)
   82f80:	dec00204 	addi	sp,sp,8
   82f84:	f800283a 	ret

00082f88 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   82f88:	defffe04 	addi	sp,sp,-8
   82f8c:	dfc00115 	stw	ra,4(sp)
   82f90:	df000015 	stw	fp,0(sp)
   82f94:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   82f98:	01000274 	movhi	r4,9
   82f9c:	2121c804 	addi	r4,r4,-30944
   82fa0:	01400234 	movhi	r5,8
   82fa4:	295aec04 	addi	r5,r5,27568
   82fa8:	01800274 	movhi	r6,9
   82fac:	31a1c804 	addi	r6,r6,-30944
   82fb0:	00830080 	call	83008 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   82fb4:	01000234 	movhi	r4,8
   82fb8:	21000804 	addi	r4,r4,32
   82fbc:	01400234 	movhi	r5,8
   82fc0:	29400804 	addi	r5,r5,32
   82fc4:	01800234 	movhi	r6,8
   82fc8:	31806d04 	addi	r6,r6,436
   82fcc:	00830080 	call	83008 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   82fd0:	01000234 	movhi	r4,8
   82fd4:	211a3404 	addi	r4,r4,26832
   82fd8:	01400234 	movhi	r5,8
   82fdc:	295a3404 	addi	r5,r5,26832
   82fe0:	01800234 	movhi	r6,8
   82fe4:	319aec04 	addi	r6,r6,27568
   82fe8:	00830080 	call	83008 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   82fec:	00854900 	call	85490 <alt_dcache_flush_all>
  alt_icache_flush_all();
   82ff0:	00856880 	call	85688 <alt_icache_flush_all>
}
   82ff4:	e037883a 	mov	sp,fp
   82ff8:	dfc00117 	ldw	ra,4(sp)
   82ffc:	df000017 	ldw	fp,0(sp)
   83000:	dec00204 	addi	sp,sp,8
   83004:	f800283a 	ret

00083008 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   83008:	defffc04 	addi	sp,sp,-16
   8300c:	df000315 	stw	fp,12(sp)
   83010:	df000304 	addi	fp,sp,12
   83014:	e13ffd15 	stw	r4,-12(fp)
   83018:	e17ffe15 	stw	r5,-8(fp)
   8301c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   83020:	e0fffe17 	ldw	r3,-8(fp)
   83024:	e0bffd17 	ldw	r2,-12(fp)
   83028:	18800e26 	beq	r3,r2,83064 <alt_load_section+0x5c>
  {
    while( to != end )
   8302c:	00000a06 	br	83058 <alt_load_section+0x50>
    {
      *to++ = *from++;
   83030:	e0bffd17 	ldw	r2,-12(fp)
   83034:	10c00017 	ldw	r3,0(r2)
   83038:	e0bffe17 	ldw	r2,-8(fp)
   8303c:	10c00015 	stw	r3,0(r2)
   83040:	e0bffe17 	ldw	r2,-8(fp)
   83044:	10800104 	addi	r2,r2,4
   83048:	e0bffe15 	stw	r2,-8(fp)
   8304c:	e0bffd17 	ldw	r2,-12(fp)
   83050:	10800104 	addi	r2,r2,4
   83054:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   83058:	e0fffe17 	ldw	r3,-8(fp)
   8305c:	e0bfff17 	ldw	r2,-4(fp)
   83060:	18bff31e 	bne	r3,r2,83030 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   83064:	e037883a 	mov	sp,fp
   83068:	df000017 	ldw	fp,0(sp)
   8306c:	dec00104 	addi	sp,sp,4
   83070:	f800283a 	ret

00083074 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   83074:	defff804 	addi	sp,sp,-32
   83078:	dfc00715 	stw	ra,28(sp)
   8307c:	df000615 	stw	fp,24(sp)
   83080:	df000604 	addi	fp,sp,24
   83084:	e13ffc15 	stw	r4,-16(fp)
   83088:	e17ffd15 	stw	r5,-12(fp)
   8308c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   83090:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83094:	e0bffc17 	ldw	r2,-16(fp)
   83098:	1004803a 	cmplt	r2,r2,zero
   8309c:	1000091e 	bne	r2,zero,830c4 <lseek+0x50>
   830a0:	e13ffc17 	ldw	r4,-16(fp)
   830a4:	01400304 	movi	r5,12
   830a8:	0082b680 	call	82b68 <__mulsi3>
   830ac:	1007883a 	mov	r3,r2
   830b0:	00800234 	movhi	r2,8
   830b4:	109cf804 	addi	r2,r2,29664
   830b8:	1887883a 	add	r3,r3,r2
   830bc:	e0ffff15 	stw	r3,-4(fp)
   830c0:	00000106 	br	830c8 <lseek+0x54>
   830c4:	e03fff15 	stw	zero,-4(fp)
   830c8:	e0bfff17 	ldw	r2,-4(fp)
   830cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   830d0:	e0bffb17 	ldw	r2,-20(fp)
   830d4:	1005003a 	cmpeq	r2,r2,zero
   830d8:	1000111e 	bne	r2,zero,83120 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   830dc:	e0bffb17 	ldw	r2,-20(fp)
   830e0:	10800017 	ldw	r2,0(r2)
   830e4:	10800717 	ldw	r2,28(r2)
   830e8:	1005003a 	cmpeq	r2,r2,zero
   830ec:	1000091e 	bne	r2,zero,83114 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   830f0:	e0bffb17 	ldw	r2,-20(fp)
   830f4:	10800017 	ldw	r2,0(r2)
   830f8:	10800717 	ldw	r2,28(r2)
   830fc:	e13ffb17 	ldw	r4,-20(fp)
   83100:	e17ffd17 	ldw	r5,-12(fp)
   83104:	e1bffe17 	ldw	r6,-8(fp)
   83108:	103ee83a 	callr	r2
   8310c:	e0bffa15 	stw	r2,-24(fp)
   83110:	00000506 	br	83128 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   83114:	00bfde84 	movi	r2,-134
   83118:	e0bffa15 	stw	r2,-24(fp)
   8311c:	00000206 	br	83128 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   83120:	00bfebc4 	movi	r2,-81
   83124:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   83128:	e0bffa17 	ldw	r2,-24(fp)
   8312c:	1004403a 	cmpge	r2,r2,zero
   83130:	1000071e 	bne	r2,zero,83150 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   83134:	00831680 	call	83168 <alt_get_errno>
   83138:	1007883a 	mov	r3,r2
   8313c:	e0bffa17 	ldw	r2,-24(fp)
   83140:	0085c83a 	sub	r2,zero,r2
   83144:	18800015 	stw	r2,0(r3)
    rc = -1;
   83148:	00bfffc4 	movi	r2,-1
   8314c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   83150:	e0bffa17 	ldw	r2,-24(fp)
}
   83154:	e037883a 	mov	sp,fp
   83158:	dfc00117 	ldw	ra,4(sp)
   8315c:	df000017 	ldw	fp,0(sp)
   83160:	dec00204 	addi	sp,sp,8
   83164:	f800283a 	ret

00083168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83168:	defffd04 	addi	sp,sp,-12
   8316c:	dfc00215 	stw	ra,8(sp)
   83170:	df000115 	stw	fp,4(sp)
   83174:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   83178:	00800274 	movhi	r2,9
   8317c:	10a1c104 	addi	r2,r2,-30972
   83180:	10800017 	ldw	r2,0(r2)
   83184:	1005003a 	cmpeq	r2,r2,zero
   83188:	1000061e 	bne	r2,zero,831a4 <alt_get_errno+0x3c>
   8318c:	00800274 	movhi	r2,9
   83190:	10a1c104 	addi	r2,r2,-30972
   83194:	10800017 	ldw	r2,0(r2)
   83198:	103ee83a 	callr	r2
   8319c:	e0bfff15 	stw	r2,-4(fp)
   831a0:	00000306 	br	831b0 <alt_get_errno+0x48>
   831a4:	00800274 	movhi	r2,9
   831a8:	10a8a704 	addi	r2,r2,-23908
   831ac:	e0bfff15 	stw	r2,-4(fp)
   831b0:	e0bfff17 	ldw	r2,-4(fp)
}
   831b4:	e037883a 	mov	sp,fp
   831b8:	dfc00117 	ldw	ra,4(sp)
   831bc:	df000017 	ldw	fp,0(sp)
   831c0:	dec00204 	addi	sp,sp,8
   831c4:	f800283a 	ret

000831c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   831c8:	defffd04 	addi	sp,sp,-12
   831cc:	dfc00215 	stw	ra,8(sp)
   831d0:	df000115 	stw	fp,4(sp)
   831d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   831d8:	0009883a 	mov	r4,zero
   831dc:	00836b00 	call	836b0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   831e0:	00836e40 	call	836e4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   831e4:	01000234 	movhi	r4,8
   831e8:	211a3e04 	addi	r4,r4,26872
   831ec:	01400234 	movhi	r5,8
   831f0:	295a3e04 	addi	r5,r5,26872
   831f4:	01800234 	movhi	r6,8
   831f8:	319a3e04 	addi	r6,r6,26872
   831fc:	0085a480 	call	85a48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   83200:	00855c00 	call	855c0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   83204:	01000234 	movhi	r4,8
   83208:	21158904 	addi	r4,r4,22052
   8320c:	00863780 	call	86378 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   83210:	d126f017 	ldw	r4,-25664(gp)
   83214:	d166f117 	ldw	r5,-25660(gp)
   83218:	d1a6f217 	ldw	r6,-25656(gp)
   8321c:	00801f00 	call	801f0 <main>
   83220:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   83224:	01000044 	movi	r4,1
   83228:	0082ba00 	call	82ba0 <close>
  exit (result);
   8322c:	e13fff17 	ldw	r4,-4(fp)
   83230:	008638c0 	call	8638c <exit>

00083234 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   83234:	defffe04 	addi	sp,sp,-8
   83238:	df000115 	stw	fp,4(sp)
   8323c:	df000104 	addi	fp,sp,4
   83240:	e13fff15 	stw	r4,-4(fp)
}
   83244:	e037883a 	mov	sp,fp
   83248:	df000017 	ldw	fp,0(sp)
   8324c:	dec00104 	addi	sp,sp,4
   83250:	f800283a 	ret

00083254 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   83254:	defffe04 	addi	sp,sp,-8
   83258:	df000115 	stw	fp,4(sp)
   8325c:	df000104 	addi	fp,sp,4
   83260:	e13fff15 	stw	r4,-4(fp)
}
   83264:	e037883a 	mov	sp,fp
   83268:	df000017 	ldw	fp,0(sp)
   8326c:	dec00104 	addi	sp,sp,4
   83270:	f800283a 	ret

00083274 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   83274:	defff704 	addi	sp,sp,-36
   83278:	dfc00815 	stw	ra,32(sp)
   8327c:	df000715 	stw	fp,28(sp)
   83280:	df000704 	addi	fp,sp,28
   83284:	e13ffb15 	stw	r4,-20(fp)
   83288:	e17ffc15 	stw	r5,-16(fp)
   8328c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83290:	e0bffb17 	ldw	r2,-20(fp)
   83294:	1004803a 	cmplt	r2,r2,zero
   83298:	1000091e 	bne	r2,zero,832c0 <read+0x4c>
   8329c:	e13ffb17 	ldw	r4,-20(fp)
   832a0:	01400304 	movi	r5,12
   832a4:	0082b680 	call	82b68 <__mulsi3>
   832a8:	1007883a 	mov	r3,r2
   832ac:	00800234 	movhi	r2,8
   832b0:	109cf804 	addi	r2,r2,29664
   832b4:	1887883a 	add	r3,r3,r2
   832b8:	e0ffff15 	stw	r3,-4(fp)
   832bc:	00000106 	br	832c4 <read+0x50>
   832c0:	e03fff15 	stw	zero,-4(fp)
   832c4:	e0bfff17 	ldw	r2,-4(fp)
   832c8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   832cc:	e0bffa17 	ldw	r2,-24(fp)
   832d0:	1005003a 	cmpeq	r2,r2,zero
   832d4:	1000241e 	bne	r2,zero,83368 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   832d8:	e0bffa17 	ldw	r2,-24(fp)
   832dc:	10800217 	ldw	r2,8(r2)
   832e0:	108000cc 	andi	r2,r2,3
   832e4:	10800060 	cmpeqi	r2,r2,1
   832e8:	10001a1e 	bne	r2,zero,83354 <read+0xe0>
   832ec:	e0bffa17 	ldw	r2,-24(fp)
   832f0:	10800017 	ldw	r2,0(r2)
   832f4:	10800517 	ldw	r2,20(r2)
   832f8:	1005003a 	cmpeq	r2,r2,zero
   832fc:	1000151e 	bne	r2,zero,83354 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   83300:	e0bffa17 	ldw	r2,-24(fp)
   83304:	10800017 	ldw	r2,0(r2)
   83308:	10800517 	ldw	r2,20(r2)
   8330c:	e17ffc17 	ldw	r5,-16(fp)
   83310:	e1bffd17 	ldw	r6,-12(fp)
   83314:	e13ffa17 	ldw	r4,-24(fp)
   83318:	103ee83a 	callr	r2
   8331c:	e0bff915 	stw	r2,-28(fp)
   83320:	e0bff917 	ldw	r2,-28(fp)
   83324:	1004403a 	cmpge	r2,r2,zero
   83328:	1000071e 	bne	r2,zero,83348 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   8332c:	00833980 	call	83398 <alt_get_errno>
   83330:	e0fff917 	ldw	r3,-28(fp)
   83334:	00c7c83a 	sub	r3,zero,r3
   83338:	10c00015 	stw	r3,0(r2)
          return -1;
   8333c:	00bfffc4 	movi	r2,-1
   83340:	e0bffe15 	stw	r2,-8(fp)
   83344:	00000e06 	br	83380 <read+0x10c>
        }
        return rval;
   83348:	e0bff917 	ldw	r2,-28(fp)
   8334c:	e0bffe15 	stw	r2,-8(fp)
   83350:	00000b06 	br	83380 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   83354:	00833980 	call	83398 <alt_get_errno>
   83358:	1007883a 	mov	r3,r2
   8335c:	00800344 	movi	r2,13
   83360:	18800015 	stw	r2,0(r3)
   83364:	00000406 	br	83378 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   83368:	00833980 	call	83398 <alt_get_errno>
   8336c:	1007883a 	mov	r3,r2
   83370:	00801444 	movi	r2,81
   83374:	18800015 	stw	r2,0(r3)
  }
  return -1;
   83378:	00bfffc4 	movi	r2,-1
   8337c:	e0bffe15 	stw	r2,-8(fp)
   83380:	e0bffe17 	ldw	r2,-8(fp)
}
   83384:	e037883a 	mov	sp,fp
   83388:	dfc00117 	ldw	ra,4(sp)
   8338c:	df000017 	ldw	fp,0(sp)
   83390:	dec00204 	addi	sp,sp,8
   83394:	f800283a 	ret

00083398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83398:	defffd04 	addi	sp,sp,-12
   8339c:	dfc00215 	stw	ra,8(sp)
   833a0:	df000115 	stw	fp,4(sp)
   833a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   833a8:	00800274 	movhi	r2,9
   833ac:	10a1c104 	addi	r2,r2,-30972
   833b0:	10800017 	ldw	r2,0(r2)
   833b4:	1005003a 	cmpeq	r2,r2,zero
   833b8:	1000061e 	bne	r2,zero,833d4 <alt_get_errno+0x3c>
   833bc:	00800274 	movhi	r2,9
   833c0:	10a1c104 	addi	r2,r2,-30972
   833c4:	10800017 	ldw	r2,0(r2)
   833c8:	103ee83a 	callr	r2
   833cc:	e0bfff15 	stw	r2,-4(fp)
   833d0:	00000306 	br	833e0 <alt_get_errno+0x48>
   833d4:	00800274 	movhi	r2,9
   833d8:	10a8a704 	addi	r2,r2,-23908
   833dc:	e0bfff15 	stw	r2,-4(fp)
   833e0:	e0bfff17 	ldw	r2,-4(fp)
}
   833e4:	e037883a 	mov	sp,fp
   833e8:	dfc00117 	ldw	ra,4(sp)
   833ec:	df000017 	ldw	fp,0(sp)
   833f0:	dec00204 	addi	sp,sp,8
   833f4:	f800283a 	ret

000833f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   833f8:	defffc04 	addi	sp,sp,-16
   833fc:	dfc00315 	stw	ra,12(sp)
   83400:	df000215 	stw	fp,8(sp)
   83404:	dc000115 	stw	r16,4(sp)
   83408:	df000104 	addi	fp,sp,4
   8340c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   83410:	e0bfff17 	ldw	r2,-4(fp)
   83414:	108000d0 	cmplti	r2,r2,3
   83418:	10000f1e 	bne	r2,zero,83458 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   8341c:	e13fff17 	ldw	r4,-4(fp)
   83420:	04000234 	movhi	r16,8
   83424:	841cf804 	addi	r16,r16,29664
   83428:	01400304 	movi	r5,12
   8342c:	0082b680 	call	82b68 <__mulsi3>
   83430:	1405883a 	add	r2,r2,r16
   83434:	10800204 	addi	r2,r2,8
   83438:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8343c:	e13fff17 	ldw	r4,-4(fp)
   83440:	04000234 	movhi	r16,8
   83444:	841cf804 	addi	r16,r16,29664
   83448:	01400304 	movi	r5,12
   8344c:	0082b680 	call	82b68 <__mulsi3>
   83450:	1405883a 	add	r2,r2,r16
   83454:	10000015 	stw	zero,0(r2)
  }
}
   83458:	e037883a 	mov	sp,fp
   8345c:	dfc00217 	ldw	ra,8(sp)
   83460:	df000117 	ldw	fp,4(sp)
   83464:	dc000017 	ldw	r16,0(sp)
   83468:	dec00304 	addi	sp,sp,12
   8346c:	f800283a 	ret

00083470 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   83470:	defff804 	addi	sp,sp,-32
   83474:	df000715 	stw	fp,28(sp)
   83478:	df000704 	addi	fp,sp,28
   8347c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83480:	0005303a 	rdctl	r2,status
   83484:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83488:	e0fffb17 	ldw	r3,-20(fp)
   8348c:	00bfff84 	movi	r2,-2
   83490:	1884703a 	and	r2,r3,r2
   83494:	1001703a 	wrctl	status,r2
  
  return context;
   83498:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8349c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   834a0:	d0a00a17 	ldw	r2,-32728(gp)
   834a4:	10c000c4 	addi	r3,r2,3
   834a8:	00bfff04 	movi	r2,-4
   834ac:	1884703a 	and	r2,r3,r2
   834b0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   834b4:	d0e00a17 	ldw	r3,-32728(gp)
   834b8:	e0bffe17 	ldw	r2,-8(fp)
   834bc:	1887883a 	add	r3,r3,r2
   834c0:	00800434 	movhi	r2,16
   834c4:	10800004 	addi	r2,r2,0
   834c8:	10c0072e 	bgeu	r2,r3,834e8 <sbrk+0x78>
   834cc:	e0bffd17 	ldw	r2,-12(fp)
   834d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   834d4:	e0bffa17 	ldw	r2,-24(fp)
   834d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   834dc:	00bfffc4 	movi	r2,-1
   834e0:	e0bfff15 	stw	r2,-4(fp)
   834e4:	00000c06 	br	83518 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   834e8:	d0a00a17 	ldw	r2,-32728(gp)
   834ec:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   834f0:	d0e00a17 	ldw	r3,-32728(gp)
   834f4:	e0bffe17 	ldw	r2,-8(fp)
   834f8:	1885883a 	add	r2,r3,r2
   834fc:	d0a00a15 	stw	r2,-32728(gp)
   83500:	e0bffd17 	ldw	r2,-12(fp)
   83504:	e0bff915 	stw	r2,-28(fp)
   83508:	e0bff917 	ldw	r2,-28(fp)
   8350c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   83510:	e0bffc17 	ldw	r2,-16(fp)
   83514:	e0bfff15 	stw	r2,-4(fp)
   83518:	e0bfff17 	ldw	r2,-4(fp)
} 
   8351c:	e037883a 	mov	sp,fp
   83520:	df000017 	ldw	fp,0(sp)
   83524:	dec00104 	addi	sp,sp,4
   83528:	f800283a 	ret

0008352c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8352c:	defff704 	addi	sp,sp,-36
   83530:	dfc00815 	stw	ra,32(sp)
   83534:	df000715 	stw	fp,28(sp)
   83538:	df000704 	addi	fp,sp,28
   8353c:	e13ffb15 	stw	r4,-20(fp)
   83540:	e17ffc15 	stw	r5,-16(fp)
   83544:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83548:	e0bffb17 	ldw	r2,-20(fp)
   8354c:	1004803a 	cmplt	r2,r2,zero
   83550:	1000091e 	bne	r2,zero,83578 <write+0x4c>
   83554:	e13ffb17 	ldw	r4,-20(fp)
   83558:	01400304 	movi	r5,12
   8355c:	0082b680 	call	82b68 <__mulsi3>
   83560:	1007883a 	mov	r3,r2
   83564:	00800234 	movhi	r2,8
   83568:	109cf804 	addi	r2,r2,29664
   8356c:	1887883a 	add	r3,r3,r2
   83570:	e0ffff15 	stw	r3,-4(fp)
   83574:	00000106 	br	8357c <write+0x50>
   83578:	e03fff15 	stw	zero,-4(fp)
   8357c:	e0bfff17 	ldw	r2,-4(fp)
   83580:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   83584:	e0bffa17 	ldw	r2,-24(fp)
   83588:	1005003a 	cmpeq	r2,r2,zero
   8358c:	1000241e 	bne	r2,zero,83620 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   83590:	e0bffa17 	ldw	r2,-24(fp)
   83594:	10800217 	ldw	r2,8(r2)
   83598:	108000cc 	andi	r2,r2,3
   8359c:	1005003a 	cmpeq	r2,r2,zero
   835a0:	10001a1e 	bne	r2,zero,8360c <write+0xe0>
   835a4:	e0bffa17 	ldw	r2,-24(fp)
   835a8:	10800017 	ldw	r2,0(r2)
   835ac:	10800617 	ldw	r2,24(r2)
   835b0:	1005003a 	cmpeq	r2,r2,zero
   835b4:	1000151e 	bne	r2,zero,8360c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   835b8:	e0bffa17 	ldw	r2,-24(fp)
   835bc:	10800017 	ldw	r2,0(r2)
   835c0:	10800617 	ldw	r2,24(r2)
   835c4:	e17ffc17 	ldw	r5,-16(fp)
   835c8:	e1bffd17 	ldw	r6,-12(fp)
   835cc:	e13ffa17 	ldw	r4,-24(fp)
   835d0:	103ee83a 	callr	r2
   835d4:	e0bff915 	stw	r2,-28(fp)
   835d8:	e0bff917 	ldw	r2,-28(fp)
   835dc:	1004403a 	cmpge	r2,r2,zero
   835e0:	1000071e 	bne	r2,zero,83600 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   835e4:	00836500 	call	83650 <alt_get_errno>
   835e8:	e0fff917 	ldw	r3,-28(fp)
   835ec:	00c7c83a 	sub	r3,zero,r3
   835f0:	10c00015 	stw	r3,0(r2)
        return -1;
   835f4:	00bfffc4 	movi	r2,-1
   835f8:	e0bffe15 	stw	r2,-8(fp)
   835fc:	00000e06 	br	83638 <write+0x10c>
      }
      return rval;
   83600:	e0bff917 	ldw	r2,-28(fp)
   83604:	e0bffe15 	stw	r2,-8(fp)
   83608:	00000b06 	br	83638 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8360c:	00836500 	call	83650 <alt_get_errno>
   83610:	1007883a 	mov	r3,r2
   83614:	00800344 	movi	r2,13
   83618:	18800015 	stw	r2,0(r3)
   8361c:	00000406 	br	83630 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   83620:	00836500 	call	83650 <alt_get_errno>
   83624:	1007883a 	mov	r3,r2
   83628:	00801444 	movi	r2,81
   8362c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   83630:	00bfffc4 	movi	r2,-1
   83634:	e0bffe15 	stw	r2,-8(fp)
   83638:	e0bffe17 	ldw	r2,-8(fp)
}
   8363c:	e037883a 	mov	sp,fp
   83640:	dfc00117 	ldw	ra,4(sp)
   83644:	df000017 	ldw	fp,0(sp)
   83648:	dec00204 	addi	sp,sp,8
   8364c:	f800283a 	ret

00083650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83650:	defffd04 	addi	sp,sp,-12
   83654:	dfc00215 	stw	ra,8(sp)
   83658:	df000115 	stw	fp,4(sp)
   8365c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   83660:	00800274 	movhi	r2,9
   83664:	10a1c104 	addi	r2,r2,-30972
   83668:	10800017 	ldw	r2,0(r2)
   8366c:	1005003a 	cmpeq	r2,r2,zero
   83670:	1000061e 	bne	r2,zero,8368c <alt_get_errno+0x3c>
   83674:	00800274 	movhi	r2,9
   83678:	10a1c104 	addi	r2,r2,-30972
   8367c:	10800017 	ldw	r2,0(r2)
   83680:	103ee83a 	callr	r2
   83684:	e0bfff15 	stw	r2,-4(fp)
   83688:	00000306 	br	83698 <alt_get_errno+0x48>
   8368c:	00800274 	movhi	r2,9
   83690:	10a8a704 	addi	r2,r2,-23908
   83694:	e0bfff15 	stw	r2,-4(fp)
   83698:	e0bfff17 	ldw	r2,-4(fp)
}
   8369c:	e037883a 	mov	sp,fp
   836a0:	dfc00117 	ldw	ra,4(sp)
   836a4:	df000017 	ldw	fp,0(sp)
   836a8:	dec00204 	addi	sp,sp,8
   836ac:	f800283a 	ret

000836b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   836b0:	defffd04 	addi	sp,sp,-12
   836b4:	dfc00215 	stw	ra,8(sp)
   836b8:	df000115 	stw	fp,4(sp)
   836bc:	df000104 	addi	fp,sp,4
   836c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
   836c4:	0085f780 	call	85f78 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   836c8:	00800044 	movi	r2,1
   836cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   836d0:	e037883a 	mov	sp,fp
   836d4:	dfc00117 	ldw	ra,4(sp)
   836d8:	df000017 	ldw	fp,0(sp)
   836dc:	dec00204 	addi	sp,sp,8
   836e0:	f800283a 	ret

000836e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   836e4:	defffe04 	addi	sp,sp,-8
   836e8:	dfc00115 	stw	ra,4(sp)
   836ec:	df000015 	stw	fp,0(sp)
   836f0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
   836f4:	01000434 	movhi	r4,16
   836f8:	21040004 	addi	r4,r4,4096
   836fc:	000b883a 	mov	r5,zero
   83700:	01800084 	movi	r6,2
   83704:	01c0fa04 	movi	r7,1000
   83708:	00852ac0 	call	852ac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
   8370c:	00c00274 	movhi	r3,9
   83710:	18e8ab04 	addi	r3,r3,-23892
   83714:	00800434 	movhi	r2,16
   83718:	10840804 	addi	r2,r2,4128
   8371c:	18800015 	stw	r2,0(r3)
   83720:	00c00274 	movhi	r3,9
   83724:	18e8ac04 	addi	r3,r3,-23888
   83728:	0080bef4 	movhi	r2,763
   8372c:	10bc2004 	addi	r2,r2,-3968
   83730:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   83734:	01000234 	movhi	r4,8
   83738:	211d6204 	addi	r4,r4,30088
   8373c:	000b883a 	mov	r5,zero
   83740:	000d883a 	mov	r6,zero
   83744:	00839000 	call	83900 <altera_avalon_jtag_uart_init>
   83748:	01000234 	movhi	r4,8
   8374c:	211d5804 	addi	r4,r4,30048
   83750:	00837800 	call	83780 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_0, lcd_0);
   83754:	01000274 	movhi	r4,9
   83758:	21217a04 	addi	r4,r4,-31256
   8375c:	00850a80 	call	850a8 <altera_avalon_lcd_16207_init>
   83760:	01000274 	movhi	r4,9
   83764:	21217004 	addi	r4,r4,-31296
   83768:	00837800 	call	83780 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
   8376c:	e037883a 	mov	sp,fp
   83770:	dfc00117 	ldw	ra,4(sp)
   83774:	df000017 	ldw	fp,0(sp)
   83778:	dec00204 	addi	sp,sp,8
   8377c:	f800283a 	ret

00083780 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   83780:	defffd04 	addi	sp,sp,-12
   83784:	dfc00215 	stw	ra,8(sp)
   83788:	df000115 	stw	fp,4(sp)
   8378c:	df000104 	addi	fp,sp,4
   83790:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   83794:	e13fff17 	ldw	r4,-4(fp)
   83798:	01400274 	movhi	r5,9
   8379c:	2961be04 	addi	r5,r5,-30984
   837a0:	00854ac0 	call	854ac <alt_dev_llist_insert>
}
   837a4:	e037883a 	mov	sp,fp
   837a8:	dfc00117 	ldw	ra,4(sp)
   837ac:	df000017 	ldw	fp,0(sp)
   837b0:	dec00204 	addi	sp,sp,8
   837b4:	f800283a 	ret

000837b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   837b8:	defffa04 	addi	sp,sp,-24
   837bc:	dfc00515 	stw	ra,20(sp)
   837c0:	df000415 	stw	fp,16(sp)
   837c4:	df000404 	addi	fp,sp,16
   837c8:	e13ffd15 	stw	r4,-12(fp)
   837cc:	e17ffe15 	stw	r5,-8(fp)
   837d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   837d4:	e0bffd17 	ldw	r2,-12(fp)
   837d8:	10800017 	ldw	r2,0(r2)
   837dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   837e0:	e0bffc17 	ldw	r2,-16(fp)
   837e4:	11000a04 	addi	r4,r2,40
   837e8:	e0bffd17 	ldw	r2,-12(fp)
   837ec:	11c00217 	ldw	r7,8(r2)
   837f0:	e17ffe17 	ldw	r5,-8(fp)
   837f4:	e1bfff17 	ldw	r6,-4(fp)
   837f8:	0083e000 	call	83e00 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   837fc:	e037883a 	mov	sp,fp
   83800:	dfc00117 	ldw	ra,4(sp)
   83804:	df000017 	ldw	fp,0(sp)
   83808:	dec00204 	addi	sp,sp,8
   8380c:	f800283a 	ret

00083810 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   83810:	defffa04 	addi	sp,sp,-24
   83814:	dfc00515 	stw	ra,20(sp)
   83818:	df000415 	stw	fp,16(sp)
   8381c:	df000404 	addi	fp,sp,16
   83820:	e13ffd15 	stw	r4,-12(fp)
   83824:	e17ffe15 	stw	r5,-8(fp)
   83828:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8382c:	e0bffd17 	ldw	r2,-12(fp)
   83830:	10800017 	ldw	r2,0(r2)
   83834:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   83838:	e0bffc17 	ldw	r2,-16(fp)
   8383c:	11000a04 	addi	r4,r2,40
   83840:	e0bffd17 	ldw	r2,-12(fp)
   83844:	11c00217 	ldw	r7,8(r2)
   83848:	e17ffe17 	ldw	r5,-8(fp)
   8384c:	e1bfff17 	ldw	r6,-4(fp)
   83850:	00840240 	call	84024 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   83854:	e037883a 	mov	sp,fp
   83858:	dfc00117 	ldw	ra,4(sp)
   8385c:	df000017 	ldw	fp,0(sp)
   83860:	dec00204 	addi	sp,sp,8
   83864:	f800283a 	ret

00083868 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   83868:	defffc04 	addi	sp,sp,-16
   8386c:	dfc00315 	stw	ra,12(sp)
   83870:	df000215 	stw	fp,8(sp)
   83874:	df000204 	addi	fp,sp,8
   83878:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8387c:	e0bfff17 	ldw	r2,-4(fp)
   83880:	10800017 	ldw	r2,0(r2)
   83884:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   83888:	e0bffe17 	ldw	r2,-8(fp)
   8388c:	11000a04 	addi	r4,r2,40
   83890:	e0bfff17 	ldw	r2,-4(fp)
   83894:	11400217 	ldw	r5,8(r2)
   83898:	0083c980 	call	83c98 <altera_avalon_jtag_uart_close>
}
   8389c:	e037883a 	mov	sp,fp
   838a0:	dfc00117 	ldw	ra,4(sp)
   838a4:	df000017 	ldw	fp,0(sp)
   838a8:	dec00204 	addi	sp,sp,8
   838ac:	f800283a 	ret

000838b0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   838b0:	defffa04 	addi	sp,sp,-24
   838b4:	dfc00515 	stw	ra,20(sp)
   838b8:	df000415 	stw	fp,16(sp)
   838bc:	df000404 	addi	fp,sp,16
   838c0:	e13ffd15 	stw	r4,-12(fp)
   838c4:	e17ffe15 	stw	r5,-8(fp)
   838c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   838cc:	e0bffd17 	ldw	r2,-12(fp)
   838d0:	10800017 	ldw	r2,0(r2)
   838d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   838d8:	e0bffc17 	ldw	r2,-16(fp)
   838dc:	11000a04 	addi	r4,r2,40
   838e0:	e17ffe17 	ldw	r5,-8(fp)
   838e4:	e1bfff17 	ldw	r6,-4(fp)
   838e8:	0083d0c0 	call	83d0c <altera_avalon_jtag_uart_ioctl>
}
   838ec:	e037883a 	mov	sp,fp
   838f0:	dfc00117 	ldw	ra,4(sp)
   838f4:	df000017 	ldw	fp,0(sp)
   838f8:	dec00204 	addi	sp,sp,8
   838fc:	f800283a 	ret

00083900 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   83900:	defffa04 	addi	sp,sp,-24
   83904:	dfc00515 	stw	ra,20(sp)
   83908:	df000415 	stw	fp,16(sp)
   8390c:	df000404 	addi	fp,sp,16
   83910:	e13ffd15 	stw	r4,-12(fp)
   83914:	e17ffe15 	stw	r5,-8(fp)
   83918:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8391c:	e0fffd17 	ldw	r3,-12(fp)
   83920:	00800044 	movi	r2,1
   83924:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   83928:	e0bffd17 	ldw	r2,-12(fp)
   8392c:	10800017 	ldw	r2,0(r2)
   83930:	11000104 	addi	r4,r2,4
   83934:	e0bffd17 	ldw	r2,-12(fp)
   83938:	10800817 	ldw	r2,32(r2)
   8393c:	1007883a 	mov	r3,r2
   83940:	2005883a 	mov	r2,r4
   83944:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   83948:	e13ffe17 	ldw	r4,-8(fp)
   8394c:	e17fff17 	ldw	r5,-4(fp)
   83950:	d8000015 	stw	zero,0(sp)
   83954:	01800234 	movhi	r6,8
   83958:	318e7004 	addi	r6,r6,14784
   8395c:	e1fffd17 	ldw	r7,-12(fp)
   83960:	00856a40 	call	856a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   83964:	e0bffd17 	ldw	r2,-12(fp)
   83968:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8396c:	e0bffd17 	ldw	r2,-12(fp)
   83970:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   83974:	00800274 	movhi	r2,9
   83978:	10a8ae04 	addi	r2,r2,-23880
   8397c:	10800017 	ldw	r2,0(r2)
   83980:	100b883a 	mov	r5,r2
   83984:	01800234 	movhi	r6,8
   83988:	318efa04 	addi	r6,r6,15336
   8398c:	e1fffd17 	ldw	r7,-12(fp)
   83990:	008533c0 	call	8533c <alt_alarm_start>
   83994:	1004403a 	cmpge	r2,r2,zero
   83998:	1000041e 	bne	r2,zero,839ac <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8399c:	e0fffd17 	ldw	r3,-12(fp)
   839a0:	00a00034 	movhi	r2,32768
   839a4:	10bfffc4 	addi	r2,r2,-1
   839a8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   839ac:	e037883a 	mov	sp,fp
   839b0:	dfc00117 	ldw	ra,4(sp)
   839b4:	df000017 	ldw	fp,0(sp)
   839b8:	dec00204 	addi	sp,sp,8
   839bc:	f800283a 	ret

000839c0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   839c0:	defff804 	addi	sp,sp,-32
   839c4:	df000715 	stw	fp,28(sp)
   839c8:	df000704 	addi	fp,sp,28
   839cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   839d0:	e0bfff17 	ldw	r2,-4(fp)
   839d4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   839d8:	e0bffe17 	ldw	r2,-8(fp)
   839dc:	10800017 	ldw	r2,0(r2)
   839e0:	e0bffd15 	stw	r2,-12(fp)
   839e4:	00000006 	br	839e8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   839e8:	e0bffd17 	ldw	r2,-12(fp)
   839ec:	10800104 	addi	r2,r2,4
   839f0:	10800037 	ldwio	r2,0(r2)
   839f4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   839f8:	e0bffc17 	ldw	r2,-16(fp)
   839fc:	1080c00c 	andi	r2,r2,768
   83a00:	1005003a 	cmpeq	r2,r2,zero
   83a04:	1000741e 	bne	r2,zero,83bd8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   83a08:	e0bffc17 	ldw	r2,-16(fp)
   83a0c:	1080400c 	andi	r2,r2,256
   83a10:	1005003a 	cmpeq	r2,r2,zero
   83a14:	1000351e 	bne	r2,zero,83aec <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   83a18:	00800074 	movhi	r2,1
   83a1c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83a20:	e0bffe17 	ldw	r2,-8(fp)
   83a24:	10800a17 	ldw	r2,40(r2)
   83a28:	10800044 	addi	r2,r2,1
   83a2c:	1081ffcc 	andi	r2,r2,2047
   83a30:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   83a34:	e0bffe17 	ldw	r2,-8(fp)
   83a38:	10c00b17 	ldw	r3,44(r2)
   83a3c:	e0bffa17 	ldw	r2,-24(fp)
   83a40:	18801626 	beq	r3,r2,83a9c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   83a44:	e0bffd17 	ldw	r2,-12(fp)
   83a48:	10800037 	ldwio	r2,0(r2)
   83a4c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   83a50:	e0bffb17 	ldw	r2,-20(fp)
   83a54:	10a0000c 	andi	r2,r2,32768
   83a58:	1005003a 	cmpeq	r2,r2,zero
   83a5c:	10000f1e 	bne	r2,zero,83a9c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   83a60:	e0bffe17 	ldw	r2,-8(fp)
   83a64:	10c00a17 	ldw	r3,40(r2)
   83a68:	e0bffb17 	ldw	r2,-20(fp)
   83a6c:	1009883a 	mov	r4,r2
   83a70:	e0bffe17 	ldw	r2,-8(fp)
   83a74:	1885883a 	add	r2,r3,r2
   83a78:	10800e04 	addi	r2,r2,56
   83a7c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83a80:	e0bffe17 	ldw	r2,-8(fp)
   83a84:	10800a17 	ldw	r2,40(r2)
   83a88:	10800044 	addi	r2,r2,1
   83a8c:	10c1ffcc 	andi	r3,r2,2047
   83a90:	e0bffe17 	ldw	r2,-8(fp)
   83a94:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   83a98:	003fe106 	br	83a20 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   83a9c:	e0bffb17 	ldw	r2,-20(fp)
   83aa0:	10bfffec 	andhi	r2,r2,65535
   83aa4:	1005003a 	cmpeq	r2,r2,zero
   83aa8:	1000101e 	bne	r2,zero,83aec <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83aac:	e0bffe17 	ldw	r2,-8(fp)
   83ab0:	10c00817 	ldw	r3,32(r2)
   83ab4:	00bfff84 	movi	r2,-2
   83ab8:	1886703a 	and	r3,r3,r2
   83abc:	e0bffe17 	ldw	r2,-8(fp)
   83ac0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   83ac4:	e0bffd17 	ldw	r2,-12(fp)
   83ac8:	11000104 	addi	r4,r2,4
   83acc:	e0bffe17 	ldw	r2,-8(fp)
   83ad0:	10800817 	ldw	r2,32(r2)
   83ad4:	1007883a 	mov	r3,r2
   83ad8:	2005883a 	mov	r2,r4
   83adc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83ae0:	e0bffd17 	ldw	r2,-12(fp)
   83ae4:	10800104 	addi	r2,r2,4
   83ae8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   83aec:	e0bffc17 	ldw	r2,-16(fp)
   83af0:	1080800c 	andi	r2,r2,512
   83af4:	1005003a 	cmpeq	r2,r2,zero
   83af8:	103fbb1e 	bne	r2,zero,839e8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   83afc:	e0bffc17 	ldw	r2,-16(fp)
   83b00:	10bfffec 	andhi	r2,r2,65535
   83b04:	1004d43a 	srli	r2,r2,16
   83b08:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   83b0c:	00001506 	br	83b64 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   83b10:	e13ffd17 	ldw	r4,-12(fp)
   83b14:	e0bffe17 	ldw	r2,-8(fp)
   83b18:	10c00d17 	ldw	r3,52(r2)
   83b1c:	e0bffe17 	ldw	r2,-8(fp)
   83b20:	1885883a 	add	r2,r3,r2
   83b24:	10820e04 	addi	r2,r2,2104
   83b28:	10800003 	ldbu	r2,0(r2)
   83b2c:	10c03fcc 	andi	r3,r2,255
   83b30:	18c0201c 	xori	r3,r3,128
   83b34:	18ffe004 	addi	r3,r3,-128
   83b38:	2005883a 	mov	r2,r4
   83b3c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83b40:	e0bffe17 	ldw	r2,-8(fp)
   83b44:	10800d17 	ldw	r2,52(r2)
   83b48:	10800044 	addi	r2,r2,1
   83b4c:	10c1ffcc 	andi	r3,r2,2047
   83b50:	e0bffe17 	ldw	r2,-8(fp)
   83b54:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   83b58:	e0bff917 	ldw	r2,-28(fp)
   83b5c:	10bfffc4 	addi	r2,r2,-1
   83b60:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   83b64:	e0bff917 	ldw	r2,-28(fp)
   83b68:	1005003a 	cmpeq	r2,r2,zero
   83b6c:	1000051e 	bne	r2,zero,83b84 <altera_avalon_jtag_uart_irq+0x1c4>
   83b70:	e0bffe17 	ldw	r2,-8(fp)
   83b74:	10c00d17 	ldw	r3,52(r2)
   83b78:	e0bffe17 	ldw	r2,-8(fp)
   83b7c:	10800c17 	ldw	r2,48(r2)
   83b80:	18bfe31e 	bne	r3,r2,83b10 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   83b84:	e0bff917 	ldw	r2,-28(fp)
   83b88:	1005003a 	cmpeq	r2,r2,zero
   83b8c:	103f961e 	bne	r2,zero,839e8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   83b90:	e0bffe17 	ldw	r2,-8(fp)
   83b94:	10c00817 	ldw	r3,32(r2)
   83b98:	00bfff44 	movi	r2,-3
   83b9c:	1886703a 	and	r3,r3,r2
   83ba0:	e0bffe17 	ldw	r2,-8(fp)
   83ba4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   83ba8:	e0bffe17 	ldw	r2,-8(fp)
   83bac:	10800017 	ldw	r2,0(r2)
   83bb0:	11000104 	addi	r4,r2,4
   83bb4:	e0bffe17 	ldw	r2,-8(fp)
   83bb8:	10800817 	ldw	r2,32(r2)
   83bbc:	1007883a 	mov	r3,r2
   83bc0:	2005883a 	mov	r2,r4
   83bc4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83bc8:	e0bffd17 	ldw	r2,-12(fp)
   83bcc:	10800104 	addi	r2,r2,4
   83bd0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   83bd4:	003f8406 	br	839e8 <altera_avalon_jtag_uart_irq+0x28>
}
   83bd8:	e037883a 	mov	sp,fp
   83bdc:	df000017 	ldw	fp,0(sp)
   83be0:	dec00104 	addi	sp,sp,4
   83be4:	f800283a 	ret

00083be8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   83be8:	defffc04 	addi	sp,sp,-16
   83bec:	df000315 	stw	fp,12(sp)
   83bf0:	df000304 	addi	fp,sp,12
   83bf4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   83bf8:	e0bfff17 	ldw	r2,-4(fp)
   83bfc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   83c00:	e0bffe17 	ldw	r2,-8(fp)
   83c04:	10800017 	ldw	r2,0(r2)
   83c08:	10800104 	addi	r2,r2,4
   83c0c:	10800037 	ldwio	r2,0(r2)
   83c10:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   83c14:	e0bffd17 	ldw	r2,-12(fp)
   83c18:	1081000c 	andi	r2,r2,1024
   83c1c:	1005003a 	cmpeq	r2,r2,zero
   83c20:	10000c1e 	bne	r2,zero,83c54 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   83c24:	e0bffe17 	ldw	r2,-8(fp)
   83c28:	10800017 	ldw	r2,0(r2)
   83c2c:	11000104 	addi	r4,r2,4
   83c30:	e0bffe17 	ldw	r2,-8(fp)
   83c34:	10800817 	ldw	r2,32(r2)
   83c38:	10810014 	ori	r2,r2,1024
   83c3c:	1007883a 	mov	r3,r2
   83c40:	2005883a 	mov	r2,r4
   83c44:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   83c48:	e0bffe17 	ldw	r2,-8(fp)
   83c4c:	10000915 	stw	zero,36(r2)
   83c50:	00000a06 	br	83c7c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   83c54:	e0bffe17 	ldw	r2,-8(fp)
   83c58:	10c00917 	ldw	r3,36(r2)
   83c5c:	00a00034 	movhi	r2,32768
   83c60:	10bfff04 	addi	r2,r2,-4
   83c64:	10c00536 	bltu	r2,r3,83c7c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   83c68:	e0bffe17 	ldw	r2,-8(fp)
   83c6c:	10800917 	ldw	r2,36(r2)
   83c70:	10c00044 	addi	r3,r2,1
   83c74:	e0bffe17 	ldw	r2,-8(fp)
   83c78:	10c00915 	stw	r3,36(r2)
   83c7c:	00800274 	movhi	r2,9
   83c80:	10a8ae04 	addi	r2,r2,-23880
   83c84:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   83c88:	e037883a 	mov	sp,fp
   83c8c:	df000017 	ldw	fp,0(sp)
   83c90:	dec00104 	addi	sp,sp,4
   83c94:	f800283a 	ret

00083c98 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   83c98:	defffc04 	addi	sp,sp,-16
   83c9c:	df000315 	stw	fp,12(sp)
   83ca0:	df000304 	addi	fp,sp,12
   83ca4:	e13ffd15 	stw	r4,-12(fp)
   83ca8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   83cac:	00000706 	br	83ccc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   83cb0:	e0bffe17 	ldw	r2,-8(fp)
   83cb4:	1090000c 	andi	r2,r2,16384
   83cb8:	1005003a 	cmpeq	r2,r2,zero
   83cbc:	1000031e 	bne	r2,zero,83ccc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   83cc0:	00bffd44 	movi	r2,-11
   83cc4:	e0bfff15 	stw	r2,-4(fp)
   83cc8:	00000b06 	br	83cf8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   83ccc:	e0bffd17 	ldw	r2,-12(fp)
   83cd0:	10c00d17 	ldw	r3,52(r2)
   83cd4:	e0bffd17 	ldw	r2,-12(fp)
   83cd8:	10800c17 	ldw	r2,48(r2)
   83cdc:	18800526 	beq	r3,r2,83cf4 <altera_avalon_jtag_uart_close+0x5c>
   83ce0:	e0bffd17 	ldw	r2,-12(fp)
   83ce4:	10c00917 	ldw	r3,36(r2)
   83ce8:	e0bffd17 	ldw	r2,-12(fp)
   83cec:	10800117 	ldw	r2,4(r2)
   83cf0:	18bfef36 	bltu	r3,r2,83cb0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   83cf4:	e03fff15 	stw	zero,-4(fp)
   83cf8:	e0bfff17 	ldw	r2,-4(fp)
}
   83cfc:	e037883a 	mov	sp,fp
   83d00:	df000017 	ldw	fp,0(sp)
   83d04:	dec00104 	addi	sp,sp,4
   83d08:	f800283a 	ret

00083d0c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   83d0c:	defff804 	addi	sp,sp,-32
   83d10:	df000715 	stw	fp,28(sp)
   83d14:	df000704 	addi	fp,sp,28
   83d18:	e13ffb15 	stw	r4,-20(fp)
   83d1c:	e17ffc15 	stw	r5,-16(fp)
   83d20:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   83d24:	00bff9c4 	movi	r2,-25
   83d28:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   83d2c:	e0bffc17 	ldw	r2,-16(fp)
   83d30:	e0bfff15 	stw	r2,-4(fp)
   83d34:	e0ffff17 	ldw	r3,-4(fp)
   83d38:	189a8060 	cmpeqi	r2,r3,27137
   83d3c:	1000041e 	bne	r2,zero,83d50 <altera_avalon_jtag_uart_ioctl+0x44>
   83d40:	e0ffff17 	ldw	r3,-4(fp)
   83d44:	189a80a0 	cmpeqi	r2,r3,27138
   83d48:	10001b1e 	bne	r2,zero,83db8 <altera_avalon_jtag_uart_ioctl+0xac>
   83d4c:	00002706 	br	83dec <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   83d50:	e0bffb17 	ldw	r2,-20(fp)
   83d54:	10c00117 	ldw	r3,4(r2)
   83d58:	00a00034 	movhi	r2,32768
   83d5c:	10bfffc4 	addi	r2,r2,-1
   83d60:	18802226 	beq	r3,r2,83dec <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   83d64:	e0bffd17 	ldw	r2,-12(fp)
   83d68:	10800017 	ldw	r2,0(r2)
   83d6c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   83d70:	e0bff917 	ldw	r2,-28(fp)
   83d74:	10800090 	cmplti	r2,r2,2
   83d78:	1000071e 	bne	r2,zero,83d98 <altera_avalon_jtag_uart_ioctl+0x8c>
   83d7c:	e0fff917 	ldw	r3,-28(fp)
   83d80:	00a00034 	movhi	r2,32768
   83d84:	10bfffc4 	addi	r2,r2,-1
   83d88:	18800326 	beq	r3,r2,83d98 <altera_avalon_jtag_uart_ioctl+0x8c>
   83d8c:	e0bff917 	ldw	r2,-28(fp)
   83d90:	e0bffe15 	stw	r2,-8(fp)
   83d94:	00000306 	br	83da4 <altera_avalon_jtag_uart_ioctl+0x98>
   83d98:	00e00034 	movhi	r3,32768
   83d9c:	18ffff84 	addi	r3,r3,-2
   83da0:	e0fffe15 	stw	r3,-8(fp)
   83da4:	e0bffb17 	ldw	r2,-20(fp)
   83da8:	e0fffe17 	ldw	r3,-8(fp)
   83dac:	10c00115 	stw	r3,4(r2)
      rc = 0;
   83db0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   83db4:	00000d06 	br	83dec <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   83db8:	e0bffb17 	ldw	r2,-20(fp)
   83dbc:	10c00117 	ldw	r3,4(r2)
   83dc0:	00a00034 	movhi	r2,32768
   83dc4:	10bfffc4 	addi	r2,r2,-1
   83dc8:	18800826 	beq	r3,r2,83dec <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   83dcc:	e13ffd17 	ldw	r4,-12(fp)
   83dd0:	e0bffb17 	ldw	r2,-20(fp)
   83dd4:	10c00917 	ldw	r3,36(r2)
   83dd8:	e0bffb17 	ldw	r2,-20(fp)
   83ddc:	10800117 	ldw	r2,4(r2)
   83de0:	1885803a 	cmpltu	r2,r3,r2
   83de4:	20800015 	stw	r2,0(r4)
      rc = 0;
   83de8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   83dec:	e0bffa17 	ldw	r2,-24(fp)
}
   83df0:	e037883a 	mov	sp,fp
   83df4:	df000017 	ldw	fp,0(sp)
   83df8:	dec00104 	addi	sp,sp,4
   83dfc:	f800283a 	ret

00083e00 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   83e00:	defff204 	addi	sp,sp,-56
   83e04:	dfc00d15 	stw	ra,52(sp)
   83e08:	df000c15 	stw	fp,48(sp)
   83e0c:	df000c04 	addi	fp,sp,48
   83e10:	e13ffb15 	stw	r4,-20(fp)
   83e14:	e17ffc15 	stw	r5,-16(fp)
   83e18:	e1bffd15 	stw	r6,-12(fp)
   83e1c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   83e20:	e0bffc17 	ldw	r2,-16(fp)
   83e24:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   83e28:	00004806 	br	83f4c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   83e2c:	e0bffb17 	ldw	r2,-20(fp)
   83e30:	10800a17 	ldw	r2,40(r2)
   83e34:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   83e38:	e0bffb17 	ldw	r2,-20(fp)
   83e3c:	10800b17 	ldw	r2,44(r2)
   83e40:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   83e44:	e0fff717 	ldw	r3,-36(fp)
   83e48:	e0bff617 	ldw	r2,-40(fp)
   83e4c:	18800536 	bltu	r3,r2,83e64 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   83e50:	e0bff717 	ldw	r2,-36(fp)
   83e54:	e0fff617 	ldw	r3,-40(fp)
   83e58:	10c5c83a 	sub	r2,r2,r3
   83e5c:	e0bff815 	stw	r2,-32(fp)
   83e60:	00000406 	br	83e74 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   83e64:	00820004 	movi	r2,2048
   83e68:	e0fff617 	ldw	r3,-40(fp)
   83e6c:	10c5c83a 	sub	r2,r2,r3
   83e70:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   83e74:	e0bff817 	ldw	r2,-32(fp)
   83e78:	1005003a 	cmpeq	r2,r2,zero
   83e7c:	10001f1e 	bne	r2,zero,83efc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   83e80:	e0fffd17 	ldw	r3,-12(fp)
   83e84:	e0bff817 	ldw	r2,-32(fp)
   83e88:	1880022e 	bgeu	r3,r2,83e94 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   83e8c:	e0bffd17 	ldw	r2,-12(fp)
   83e90:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   83e94:	e0bffb17 	ldw	r2,-20(fp)
   83e98:	10c00e04 	addi	r3,r2,56
   83e9c:	e0bff617 	ldw	r2,-40(fp)
   83ea0:	1887883a 	add	r3,r3,r2
   83ea4:	e0bffa17 	ldw	r2,-24(fp)
   83ea8:	1009883a 	mov	r4,r2
   83eac:	180b883a 	mov	r5,r3
   83eb0:	e1bff817 	ldw	r6,-32(fp)
   83eb4:	008100c0 	call	8100c <memcpy>
      ptr   += n;
   83eb8:	e0fff817 	ldw	r3,-32(fp)
   83ebc:	e0bffa17 	ldw	r2,-24(fp)
   83ec0:	10c5883a 	add	r2,r2,r3
   83ec4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   83ec8:	e0fffd17 	ldw	r3,-12(fp)
   83ecc:	e0bff817 	ldw	r2,-32(fp)
   83ed0:	1885c83a 	sub	r2,r3,r2
   83ed4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83ed8:	e0fff617 	ldw	r3,-40(fp)
   83edc:	e0bff817 	ldw	r2,-32(fp)
   83ee0:	1885883a 	add	r2,r3,r2
   83ee4:	10c1ffcc 	andi	r3,r2,2047
   83ee8:	e0bffb17 	ldw	r2,-20(fp)
   83eec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   83ef0:	e0bffd17 	ldw	r2,-12(fp)
   83ef4:	10800048 	cmpgei	r2,r2,1
   83ef8:	103fcc1e 	bne	r2,zero,83e2c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   83efc:	e0fffa17 	ldw	r3,-24(fp)
   83f00:	e0bffc17 	ldw	r2,-16(fp)
   83f04:	1880141e 	bne	r3,r2,83f58 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   83f08:	e0bffe17 	ldw	r2,-8(fp)
   83f0c:	1090000c 	andi	r2,r2,16384
   83f10:	1004c03a 	cmpne	r2,r2,zero
   83f14:	1000101e 	bne	r2,zero,83f58 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   83f18:	e0bffb17 	ldw	r2,-20(fp)
   83f1c:	10c00a17 	ldw	r3,40(r2)
   83f20:	e0bff717 	ldw	r2,-36(fp)
   83f24:	1880051e 	bne	r3,r2,83f3c <altera_avalon_jtag_uart_read+0x13c>
   83f28:	e0bffb17 	ldw	r2,-20(fp)
   83f2c:	10c00917 	ldw	r3,36(r2)
   83f30:	e0bffb17 	ldw	r2,-20(fp)
   83f34:	10800117 	ldw	r2,4(r2)
   83f38:	18bff736 	bltu	r3,r2,83f18 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   83f3c:	e0bffb17 	ldw	r2,-20(fp)
   83f40:	10c00a17 	ldw	r3,40(r2)
   83f44:	e0bff717 	ldw	r2,-36(fp)
   83f48:	18800326 	beq	r3,r2,83f58 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   83f4c:	e0bffd17 	ldw	r2,-12(fp)
   83f50:	10800048 	cmpgei	r2,r2,1
   83f54:	103fb51e 	bne	r2,zero,83e2c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   83f58:	e0fffa17 	ldw	r3,-24(fp)
   83f5c:	e0bffc17 	ldw	r2,-16(fp)
   83f60:	18801926 	beq	r3,r2,83fc8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83f64:	0005303a 	rdctl	r2,status
   83f68:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83f6c:	e0fff517 	ldw	r3,-44(fp)
   83f70:	00bfff84 	movi	r2,-2
   83f74:	1884703a 	and	r2,r3,r2
   83f78:	1001703a 	wrctl	status,r2
  
  return context;
   83f7c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   83f80:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83f84:	e0bffb17 	ldw	r2,-20(fp)
   83f88:	10800817 	ldw	r2,32(r2)
   83f8c:	10c00054 	ori	r3,r2,1
   83f90:	e0bffb17 	ldw	r2,-20(fp)
   83f94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   83f98:	e0bffb17 	ldw	r2,-20(fp)
   83f9c:	10800017 	ldw	r2,0(r2)
   83fa0:	11000104 	addi	r4,r2,4
   83fa4:	e0bffb17 	ldw	r2,-20(fp)
   83fa8:	10800817 	ldw	r2,32(r2)
   83fac:	1007883a 	mov	r3,r2
   83fb0:	2005883a 	mov	r2,r4
   83fb4:	10c00035 	stwio	r3,0(r2)
   83fb8:	e0bff917 	ldw	r2,-28(fp)
   83fbc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83fc0:	e0bff417 	ldw	r2,-48(fp)
   83fc4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   83fc8:	e0fffa17 	ldw	r3,-24(fp)
   83fcc:	e0bffc17 	ldw	r2,-16(fp)
   83fd0:	18800526 	beq	r3,r2,83fe8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   83fd4:	e0fffa17 	ldw	r3,-24(fp)
   83fd8:	e0bffc17 	ldw	r2,-16(fp)
   83fdc:	1887c83a 	sub	r3,r3,r2
   83fe0:	e0ffff15 	stw	r3,-4(fp)
   83fe4:	00000906 	br	8400c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   83fe8:	e0bffe17 	ldw	r2,-8(fp)
   83fec:	1090000c 	andi	r2,r2,16384
   83ff0:	1005003a 	cmpeq	r2,r2,zero
   83ff4:	1000031e 	bne	r2,zero,84004 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   83ff8:	00bffd44 	movi	r2,-11
   83ffc:	e0bfff15 	stw	r2,-4(fp)
   84000:	00000206 	br	8400c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   84004:	00bffec4 	movi	r2,-5
   84008:	e0bfff15 	stw	r2,-4(fp)
   8400c:	e0bfff17 	ldw	r2,-4(fp)
}
   84010:	e037883a 	mov	sp,fp
   84014:	dfc00117 	ldw	ra,4(sp)
   84018:	df000017 	ldw	fp,0(sp)
   8401c:	dec00204 	addi	sp,sp,8
   84020:	f800283a 	ret

00084024 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   84024:	defff204 	addi	sp,sp,-56
   84028:	dfc00d15 	stw	ra,52(sp)
   8402c:	df000c15 	stw	fp,48(sp)
   84030:	df000c04 	addi	fp,sp,48
   84034:	e13ffb15 	stw	r4,-20(fp)
   84038:	e17ffc15 	stw	r5,-16(fp)
   8403c:	e1bffd15 	stw	r6,-12(fp)
   84040:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   84044:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   84048:	e0bffc17 	ldw	r2,-16(fp)
   8404c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   84050:	00003a06 	br	8413c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   84054:	e0bffb17 	ldw	r2,-20(fp)
   84058:	10800c17 	ldw	r2,48(r2)
   8405c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   84060:	e0bffb17 	ldw	r2,-20(fp)
   84064:	10800d17 	ldw	r2,52(r2)
   84068:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   8406c:	e0fffa17 	ldw	r3,-24(fp)
   84070:	e0bff917 	ldw	r2,-28(fp)
   84074:	1880062e 	bgeu	r3,r2,84090 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   84078:	e0fff917 	ldw	r3,-28(fp)
   8407c:	e0bffa17 	ldw	r2,-24(fp)
   84080:	1885c83a 	sub	r2,r3,r2
   84084:	10bfffc4 	addi	r2,r2,-1
   84088:	e0bff815 	stw	r2,-32(fp)
   8408c:	00000c06 	br	840c0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   84090:	e0bff917 	ldw	r2,-28(fp)
   84094:	1005003a 	cmpeq	r2,r2,zero
   84098:	1000051e 	bne	r2,zero,840b0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8409c:	00820004 	movi	r2,2048
   840a0:	e0fffa17 	ldw	r3,-24(fp)
   840a4:	10c5c83a 	sub	r2,r2,r3
   840a8:	e0bff815 	stw	r2,-32(fp)
   840ac:	00000406 	br	840c0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   840b0:	0081ffc4 	movi	r2,2047
   840b4:	e0fffa17 	ldw	r3,-24(fp)
   840b8:	10c5c83a 	sub	r2,r2,r3
   840bc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   840c0:	e0bff817 	ldw	r2,-32(fp)
   840c4:	1005003a 	cmpeq	r2,r2,zero
   840c8:	10001f1e 	bne	r2,zero,84148 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   840cc:	e0fffd17 	ldw	r3,-12(fp)
   840d0:	e0bff817 	ldw	r2,-32(fp)
   840d4:	1880022e 	bgeu	r3,r2,840e0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   840d8:	e0bffd17 	ldw	r2,-12(fp)
   840dc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   840e0:	e0bffb17 	ldw	r2,-20(fp)
   840e4:	10c20e04 	addi	r3,r2,2104
   840e8:	e0bffa17 	ldw	r2,-24(fp)
   840ec:	1885883a 	add	r2,r3,r2
   840f0:	e0fffc17 	ldw	r3,-16(fp)
   840f4:	1009883a 	mov	r4,r2
   840f8:	180b883a 	mov	r5,r3
   840fc:	e1bff817 	ldw	r6,-32(fp)
   84100:	008100c0 	call	8100c <memcpy>
      ptr   += n;
   84104:	e0fff817 	ldw	r3,-32(fp)
   84108:	e0bffc17 	ldw	r2,-16(fp)
   8410c:	10c5883a 	add	r2,r2,r3
   84110:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   84114:	e0fffd17 	ldw	r3,-12(fp)
   84118:	e0bff817 	ldw	r2,-32(fp)
   8411c:	1885c83a 	sub	r2,r3,r2
   84120:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   84124:	e0fffa17 	ldw	r3,-24(fp)
   84128:	e0bff817 	ldw	r2,-32(fp)
   8412c:	1885883a 	add	r2,r3,r2
   84130:	10c1ffcc 	andi	r3,r2,2047
   84134:	e0bffb17 	ldw	r2,-20(fp)
   84138:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8413c:	e0bffd17 	ldw	r2,-12(fp)
   84140:	10800048 	cmpgei	r2,r2,1
   84144:	103fc31e 	bne	r2,zero,84054 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84148:	0005303a 	rdctl	r2,status
   8414c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84150:	e0fff517 	ldw	r3,-44(fp)
   84154:	00bfff84 	movi	r2,-2
   84158:	1884703a 	and	r2,r3,r2
   8415c:	1001703a 	wrctl	status,r2
  
  return context;
   84160:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   84164:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   84168:	e0bffb17 	ldw	r2,-20(fp)
   8416c:	10800817 	ldw	r2,32(r2)
   84170:	10c00094 	ori	r3,r2,2
   84174:	e0bffb17 	ldw	r2,-20(fp)
   84178:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8417c:	e0bffb17 	ldw	r2,-20(fp)
   84180:	10800017 	ldw	r2,0(r2)
   84184:	11000104 	addi	r4,r2,4
   84188:	e0bffb17 	ldw	r2,-20(fp)
   8418c:	10800817 	ldw	r2,32(r2)
   84190:	1007883a 	mov	r3,r2
   84194:	2005883a 	mov	r2,r4
   84198:	10c00035 	stwio	r3,0(r2)
   8419c:	e0bff717 	ldw	r2,-36(fp)
   841a0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   841a4:	e0bff417 	ldw	r2,-48(fp)
   841a8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   841ac:	e0bffd17 	ldw	r2,-12(fp)
   841b0:	10800050 	cmplti	r2,r2,1
   841b4:	1000111e 	bne	r2,zero,841fc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   841b8:	e0bffe17 	ldw	r2,-8(fp)
   841bc:	1090000c 	andi	r2,r2,16384
   841c0:	1004c03a 	cmpne	r2,r2,zero
   841c4:	1000101e 	bne	r2,zero,84208 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   841c8:	e0bffb17 	ldw	r2,-20(fp)
   841cc:	10c00d17 	ldw	r3,52(r2)
   841d0:	e0bff917 	ldw	r2,-28(fp)
   841d4:	1880051e 	bne	r3,r2,841ec <altera_avalon_jtag_uart_write+0x1c8>
   841d8:	e0bffb17 	ldw	r2,-20(fp)
   841dc:	10c00917 	ldw	r3,36(r2)
   841e0:	e0bffb17 	ldw	r2,-20(fp)
   841e4:	10800117 	ldw	r2,4(r2)
   841e8:	18bff736 	bltu	r3,r2,841c8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   841ec:	e0bffb17 	ldw	r2,-20(fp)
   841f0:	10c00d17 	ldw	r3,52(r2)
   841f4:	e0bff917 	ldw	r2,-28(fp)
   841f8:	18800326 	beq	r3,r2,84208 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   841fc:	e0bffd17 	ldw	r2,-12(fp)
   84200:	10800048 	cmpgei	r2,r2,1
   84204:	103fcd1e 	bne	r2,zero,8413c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   84208:	e0fffc17 	ldw	r3,-16(fp)
   8420c:	e0bff617 	ldw	r2,-40(fp)
   84210:	18800526 	beq	r3,r2,84228 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   84214:	e0fffc17 	ldw	r3,-16(fp)
   84218:	e0bff617 	ldw	r2,-40(fp)
   8421c:	1887c83a 	sub	r3,r3,r2
   84220:	e0ffff15 	stw	r3,-4(fp)
   84224:	00000906 	br	8424c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   84228:	e0bffe17 	ldw	r2,-8(fp)
   8422c:	1090000c 	andi	r2,r2,16384
   84230:	1005003a 	cmpeq	r2,r2,zero
   84234:	1000031e 	bne	r2,zero,84244 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   84238:	00bffd44 	movi	r2,-11
   8423c:	e0bfff15 	stw	r2,-4(fp)
   84240:	00000206 	br	8424c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   84244:	00bffec4 	movi	r2,-5
   84248:	e0bfff15 	stw	r2,-4(fp)
   8424c:	e0bfff17 	ldw	r2,-4(fp)
}
   84250:	e037883a 	mov	sp,fp
   84254:	dfc00117 	ldw	ra,4(sp)
   84258:	df000017 	ldw	fp,0(sp)
   8425c:	dec00204 	addi	sp,sp,8
   84260:	f800283a 	ret

00084264 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   84264:	defffa04 	addi	sp,sp,-24
   84268:	dfc00515 	stw	ra,20(sp)
   8426c:	df000415 	stw	fp,16(sp)
   84270:	df000404 	addi	fp,sp,16
   84274:	e13ffe15 	stw	r4,-8(fp)
   84278:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
   8427c:	e0bffe17 	ldw	r2,-8(fp)
   84280:	10800017 	ldw	r2,0(r2)
   84284:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   84288:	008003f4 	movhi	r2,15
   8428c:	10909004 	addi	r2,r2,16960
   84290:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   84294:	e0bffe17 	ldw	r2,-8(fp)
   84298:	10800803 	ldbu	r2,32(r2)
   8429c:	10803fcc 	andi	r2,r2,255
   842a0:	1080201c 	xori	r2,r2,128
   842a4:	10bfe004 	addi	r2,r2,-128
   842a8:	1004c03a 	cmpne	r2,r2,zero
   842ac:	1000161e 	bne	r2,zero,84308 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   842b0:	00000a06 	br	842dc <lcd_write_command+0x78>
    if (--i == 0)
   842b4:	e0bffc17 	ldw	r2,-16(fp)
   842b8:	10bfffc4 	addi	r2,r2,-1
   842bc:	e0bffc15 	stw	r2,-16(fp)
   842c0:	e0bffc17 	ldw	r2,-16(fp)
   842c4:	1004c03a 	cmpne	r2,r2,zero
   842c8:	1000041e 	bne	r2,zero,842dc <lcd_write_command+0x78>
    {
      sp->broken = 1;
   842cc:	e0fffe17 	ldw	r3,-8(fp)
   842d0:	00800044 	movi	r2,1
   842d4:	18800805 	stb	r2,32(r3)
      return;
   842d8:	00000b06 	br	84308 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   842dc:	e0bffd17 	ldw	r2,-12(fp)
   842e0:	10800104 	addi	r2,r2,4
   842e4:	10800037 	ldwio	r2,0(r2)
   842e8:	1080200c 	andi	r2,r2,128
   842ec:	1004c03a 	cmpne	r2,r2,zero
   842f0:	103ff01e 	bne	r2,zero,842b4 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   842f4:	01001904 	movi	r4,100
   842f8:	0085f480 	call	85f48 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   842fc:	e0bffd17 	ldw	r2,-12(fp)
   84300:	e0ffff03 	ldbu	r3,-4(fp)
   84304:	10c00035 	stwio	r3,0(r2)
}
   84308:	e037883a 	mov	sp,fp
   8430c:	dfc00117 	ldw	ra,4(sp)
   84310:	df000017 	ldw	fp,0(sp)
   84314:	dec00204 	addi	sp,sp,8
   84318:	f800283a 	ret

0008431c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   8431c:	defffa04 	addi	sp,sp,-24
   84320:	dfc00515 	stw	ra,20(sp)
   84324:	df000415 	stw	fp,16(sp)
   84328:	df000404 	addi	fp,sp,16
   8432c:	e13ffe15 	stw	r4,-8(fp)
   84330:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
   84334:	e0bffe17 	ldw	r2,-8(fp)
   84338:	10800017 	ldw	r2,0(r2)
   8433c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   84340:	008003f4 	movhi	r2,15
   84344:	10909004 	addi	r2,r2,16960
   84348:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   8434c:	e0bffe17 	ldw	r2,-8(fp)
   84350:	10800803 	ldbu	r2,32(r2)
   84354:	10803fcc 	andi	r2,r2,255
   84358:	1080201c 	xori	r2,r2,128
   8435c:	10bfe004 	addi	r2,r2,-128
   84360:	1004c03a 	cmpne	r2,r2,zero
   84364:	10001d1e 	bne	r2,zero,843dc <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   84368:	00000a06 	br	84394 <lcd_write_data+0x78>
    if (--i == 0)
   8436c:	e0bffc17 	ldw	r2,-16(fp)
   84370:	10bfffc4 	addi	r2,r2,-1
   84374:	e0bffc15 	stw	r2,-16(fp)
   84378:	e0bffc17 	ldw	r2,-16(fp)
   8437c:	1004c03a 	cmpne	r2,r2,zero
   84380:	1000041e 	bne	r2,zero,84394 <lcd_write_data+0x78>
    {
      sp->broken = 1;
   84384:	e0fffe17 	ldw	r3,-8(fp)
   84388:	00800044 	movi	r2,1
   8438c:	18800805 	stb	r2,32(r3)
      return;
   84390:	00001206 	br	843dc <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   84394:	e0bffd17 	ldw	r2,-12(fp)
   84398:	10800104 	addi	r2,r2,4
   8439c:	10800037 	ldwio	r2,0(r2)
   843a0:	1080200c 	andi	r2,r2,128
   843a4:	1004c03a 	cmpne	r2,r2,zero
   843a8:	103ff01e 	bne	r2,zero,8436c <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   843ac:	01001904 	movi	r4,100
   843b0:	0085f480 	call	85f48 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   843b4:	e0bffd17 	ldw	r2,-12(fp)
   843b8:	10800204 	addi	r2,r2,8
   843bc:	e0ffff03 	ldbu	r3,-4(fp)
   843c0:	10c00035 	stwio	r3,0(r2)

  sp->address++;
   843c4:	e0bffe17 	ldw	r2,-8(fp)
   843c8:	108008c3 	ldbu	r2,35(r2)
   843cc:	10800044 	addi	r2,r2,1
   843d0:	1007883a 	mov	r3,r2
   843d4:	e0bffe17 	ldw	r2,-8(fp)
   843d8:	10c008c5 	stb	r3,35(r2)
}
   843dc:	e037883a 	mov	sp,fp
   843e0:	dfc00117 	ldw	ra,4(sp)
   843e4:	df000017 	ldw	fp,0(sp)
   843e8:	dec00204 	addi	sp,sp,8
   843ec:	f800283a 	ret

000843f0 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   843f0:	defffb04 	addi	sp,sp,-20
   843f4:	dfc00415 	stw	ra,16(sp)
   843f8:	df000315 	stw	fp,12(sp)
   843fc:	dc000215 	stw	r16,8(sp)
   84400:	df000204 	addi	fp,sp,8
   84404:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   84408:	e13fff17 	ldw	r4,-4(fp)
   8440c:	01400044 	movi	r5,1
   84410:	00842640 	call	84264 <lcd_write_command>

  sp->x = 0;
   84414:	e0bfff17 	ldw	r2,-4(fp)
   84418:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   8441c:	e0bfff17 	ldw	r2,-4(fp)
   84420:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   84424:	e0bfff17 	ldw	r2,-4(fp)
   84428:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   8442c:	e03ffe15 	stw	zero,-8(fp)
   84430:	00001c06 	br	844a4 <lcd_clear_screen+0xb4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   84434:	e13ffe17 	ldw	r4,-8(fp)
   84438:	014018c4 	movi	r5,99
   8443c:	0082b680 	call	82b68 <__mulsi3>
   84440:	10c01004 	addi	r3,r2,64
   84444:	e0bfff17 	ldw	r2,-4(fp)
   84448:	1889883a 	add	r4,r3,r2
   8444c:	01400804 	movi	r5,32
   84450:	01801444 	movi	r6,81
   84454:	00825a40 	call	825a4 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   84458:	e13ffe17 	ldw	r4,-8(fp)
   8445c:	014018c4 	movi	r5,99
   84460:	0082b680 	call	82b68 <__mulsi3>
   84464:	10c00c04 	addi	r3,r2,48
   84468:	e0bfff17 	ldw	r2,-4(fp)
   8446c:	1889883a 	add	r4,r3,r2
   84470:	01400804 	movi	r5,32
   84474:	01800404 	movi	r6,16
   84478:	00825a40 	call	825a4 <memset>
    sp->line[y].width = 0;
   8447c:	e13ffe17 	ldw	r4,-8(fp)
   84480:	e43fff17 	ldw	r16,-4(fp)
   84484:	014018c4 	movi	r5,99
   84488:	0082b680 	call	82b68 <__mulsi3>
   8448c:	1405883a 	add	r2,r2,r16
   84490:	10802404 	addi	r2,r2,144
   84494:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   84498:	e0bffe17 	ldw	r2,-8(fp)
   8449c:	10800044 	addi	r2,r2,1
   844a0:	e0bffe15 	stw	r2,-8(fp)
   844a4:	e0bffe17 	ldw	r2,-8(fp)
   844a8:	10800090 	cmplti	r2,r2,2
   844ac:	103fe11e 	bne	r2,zero,84434 <lcd_clear_screen+0x44>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   844b0:	e037883a 	mov	sp,fp
   844b4:	dfc00217 	ldw	ra,8(sp)
   844b8:	df000117 	ldw	fp,4(sp)
   844bc:	dc000017 	ldw	r16,0(sp)
   844c0:	dec00304 	addi	sp,sp,12
   844c4:	f800283a 	ret

000844c8 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   844c8:	defff404 	addi	sp,sp,-48
   844cc:	dfc00b15 	stw	ra,44(sp)
   844d0:	df000a15 	stw	fp,40(sp)
   844d4:	dc800915 	stw	r18,36(sp)
   844d8:	dc400815 	stw	r17,32(sp)
   844dc:	dc000715 	stw	r16,28(sp)
   844e0:	df000704 	addi	fp,sp,28
   844e4:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   844e8:	e0bfff17 	ldw	r2,-4(fp)
   844ec:	10800943 	ldbu	r2,37(r2)
   844f0:	10803fcc 	andi	r2,r2,255
   844f4:	1080201c 	xori	r2,r2,128
   844f8:	10bfe004 	addi	r2,r2,-128
   844fc:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   84500:	e03ffe15 	stw	zero,-8(fp)
   84504:	00006a06 	br	846b0 <lcd_repaint_screen+0x1e8>
  {
    int width  = sp->line[y].width;
   84508:	e13ffe17 	ldw	r4,-8(fp)
   8450c:	e43fff17 	ldw	r16,-4(fp)
   84510:	014018c4 	movi	r5,99
   84514:	0082b680 	call	82b68 <__mulsi3>
   84518:	1405883a 	add	r2,r2,r16
   8451c:	10802404 	addi	r2,r2,144
   84520:	10800043 	ldbu	r2,1(r2)
   84524:	10803fcc 	andi	r2,r2,255
   84528:	1080201c 	xori	r2,r2,128
   8452c:	10bfe004 	addi	r2,r2,-128
   84530:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   84534:	e13ffe17 	ldw	r4,-8(fp)
   84538:	e43fff17 	ldw	r16,-4(fp)
   8453c:	014018c4 	movi	r5,99
   84540:	0082b680 	call	82b68 <__mulsi3>
   84544:	1405883a 	add	r2,r2,r16
   84548:	10802404 	addi	r2,r2,144
   8454c:	10800083 	ldbu	r2,2(r2)
   84550:	11003fcc 	andi	r4,r2,255
   84554:	e17ffc17 	ldw	r5,-16(fp)
   84558:	0082b680 	call	82b68 <__mulsi3>
   8455c:	1005d23a 	srai	r2,r2,8
   84560:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
   84564:	e0fffa17 	ldw	r3,-24(fp)
   84568:	e0bffb17 	ldw	r2,-20(fp)
   8456c:	18800116 	blt	r3,r2,84574 <lcd_repaint_screen+0xac>
      offset = 0;
   84570:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   84574:	e03ffd15 	stw	zero,-12(fp)
   84578:	00004706 	br	84698 <lcd_repaint_screen+0x1d0>
    {
      char c = sp->line[y].data[(x + offset) % width];
   8457c:	e47ffe17 	ldw	r17,-8(fp)
   84580:	e0fffd17 	ldw	r3,-12(fp)
   84584:	e0bffa17 	ldw	r2,-24(fp)
   84588:	1889883a 	add	r4,r3,r2
   8458c:	e17ffb17 	ldw	r5,-20(fp)
   84590:	00867fc0 	call	867fc <__modsi3>
   84594:	1025883a 	mov	r18,r2
   84598:	e43fff17 	ldw	r16,-4(fp)
   8459c:	8809883a 	mov	r4,r17
   845a0:	014018c4 	movi	r5,99
   845a4:	0082b680 	call	82b68 <__mulsi3>
   845a8:	1405883a 	add	r2,r2,r16
   845ac:	1485883a 	add	r2,r2,r18
   845b0:	10801004 	addi	r2,r2,64
   845b4:	10800003 	ldbu	r2,0(r2)
   845b8:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   845bc:	e13ffe17 	ldw	r4,-8(fp)
   845c0:	e47ffd17 	ldw	r17,-12(fp)
   845c4:	e43fff17 	ldw	r16,-4(fp)
   845c8:	014018c4 	movi	r5,99
   845cc:	0082b680 	call	82b68 <__mulsi3>
   845d0:	1405883a 	add	r2,r2,r16
   845d4:	1445883a 	add	r2,r2,r17
   845d8:	10800c04 	addi	r2,r2,48
   845dc:	10800003 	ldbu	r2,0(r2)
   845e0:	10c03fcc 	andi	r3,r2,255
   845e4:	18c0201c 	xori	r3,r3,128
   845e8:	18ffe004 	addi	r3,r3,-128
   845ec:	e0bff947 	ldb	r2,-27(fp)
   845f0:	18802626 	beq	r3,r2,8468c <lcd_repaint_screen+0x1c4>
      {
        unsigned char address = x + colstart[y];
   845f4:	e0fffe17 	ldw	r3,-8(fp)
   845f8:	d0a00b04 	addi	r2,gp,-32724
   845fc:	1885883a 	add	r2,r3,r2
   84600:	10800003 	ldbu	r2,0(r2)
   84604:	1007883a 	mov	r3,r2
   84608:	e0bffd17 	ldw	r2,-12(fp)
   8460c:	1885883a 	add	r2,r3,r2
   84610:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
   84614:	e0fff903 	ldbu	r3,-28(fp)
   84618:	e0bfff17 	ldw	r2,-4(fp)
   8461c:	108008c3 	ldbu	r2,35(r2)
   84620:	10803fcc 	andi	r2,r2,255
   84624:	1080201c 	xori	r2,r2,128
   84628:	10bfe004 	addi	r2,r2,-128
   8462c:	18800926 	beq	r3,r2,84654 <lcd_repaint_screen+0x18c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   84630:	e0fff903 	ldbu	r3,-28(fp)
   84634:	00bfe004 	movi	r2,-128
   84638:	1884b03a 	or	r2,r3,r2
   8463c:	11403fcc 	andi	r5,r2,255
   84640:	e13fff17 	ldw	r4,-4(fp)
   84644:	00842640 	call	84264 <lcd_write_command>
          sp->address = address;
   84648:	e0fff903 	ldbu	r3,-28(fp)
   8464c:	e0bfff17 	ldw	r2,-4(fp)
   84650:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   84654:	e0bff943 	ldbu	r2,-27(fp)
   84658:	11403fcc 	andi	r5,r2,255
   8465c:	e13fff17 	ldw	r4,-4(fp)
   84660:	008431c0 	call	8431c <lcd_write_data>
        sp->line[y].visible[x] = c;
   84664:	e13ffe17 	ldw	r4,-8(fp)
   84668:	e47ffd17 	ldw	r17,-12(fp)
   8466c:	e43fff17 	ldw	r16,-4(fp)
   84670:	014018c4 	movi	r5,99
   84674:	0082b680 	call	82b68 <__mulsi3>
   84678:	1405883a 	add	r2,r2,r16
   8467c:	1445883a 	add	r2,r2,r17
   84680:	10c00c04 	addi	r3,r2,48
   84684:	e0bff943 	ldbu	r2,-27(fp)
   84688:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   8468c:	e0bffd17 	ldw	r2,-12(fp)
   84690:	10800044 	addi	r2,r2,1
   84694:	e0bffd15 	stw	r2,-12(fp)
   84698:	e0bffd17 	ldw	r2,-12(fp)
   8469c:	10800410 	cmplti	r2,r2,16
   846a0:	103fb61e 	bne	r2,zero,8457c <lcd_repaint_screen+0xb4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   846a4:	e0bffe17 	ldw	r2,-8(fp)
   846a8:	10800044 	addi	r2,r2,1
   846ac:	e0bffe15 	stw	r2,-8(fp)
   846b0:	e0bffe17 	ldw	r2,-8(fp)
   846b4:	10800090 	cmplti	r2,r2,2
   846b8:	103f931e 	bne	r2,zero,84508 <lcd_repaint_screen+0x40>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   846bc:	e037883a 	mov	sp,fp
   846c0:	dfc00417 	ldw	ra,16(sp)
   846c4:	df000317 	ldw	fp,12(sp)
   846c8:	dc800217 	ldw	r18,8(sp)
   846cc:	dc400117 	ldw	r17,4(sp)
   846d0:	dc000017 	ldw	r16,0(sp)
   846d4:	dec00504 	addi	sp,sp,20
   846d8:	f800283a 	ret

000846dc <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   846dc:	defffb04 	addi	sp,sp,-20
   846e0:	dfc00415 	stw	ra,16(sp)
   846e4:	df000315 	stw	fp,12(sp)
   846e8:	dc000215 	stw	r16,8(sp)
   846ec:	df000204 	addi	fp,sp,8
   846f0:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   846f4:	e03ffe15 	stw	zero,-8(fp)
   846f8:	00002106 	br	84780 <lcd_scroll_up+0xa4>
  {
    if (y < ALT_LCD_HEIGHT-1)
   846fc:	e0bffe17 	ldw	r2,-8(fp)
   84700:	10800048 	cmpgei	r2,r2,1
   84704:	1000121e 	bne	r2,zero,84750 <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   84708:	e13ffe17 	ldw	r4,-8(fp)
   8470c:	014018c4 	movi	r5,99
   84710:	0082b680 	call	82b68 <__mulsi3>
   84714:	10c01004 	addi	r3,r2,64
   84718:	e0bfff17 	ldw	r2,-4(fp)
   8471c:	18a1883a 	add	r16,r3,r2
   84720:	e0bffe17 	ldw	r2,-8(fp)
   84724:	11000044 	addi	r4,r2,1
   84728:	014018c4 	movi	r5,99
   8472c:	0082b680 	call	82b68 <__mulsi3>
   84730:	10c01004 	addi	r3,r2,64
   84734:	e0bfff17 	ldw	r2,-4(fp)
   84738:	1885883a 	add	r2,r3,r2
   8473c:	8009883a 	mov	r4,r16
   84740:	100b883a 	mov	r5,r2
   84744:	01801404 	movi	r6,80
   84748:	008100c0 	call	8100c <memcpy>
   8474c:	00000906 	br	84774 <lcd_scroll_up+0x98>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   84750:	e13ffe17 	ldw	r4,-8(fp)
   84754:	014018c4 	movi	r5,99
   84758:	0082b680 	call	82b68 <__mulsi3>
   8475c:	10c01004 	addi	r3,r2,64
   84760:	e0bfff17 	ldw	r2,-4(fp)
   84764:	1889883a 	add	r4,r3,r2
   84768:	01400804 	movi	r5,32
   8476c:	01801404 	movi	r6,80
   84770:	00825a40 	call	825a4 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   84774:	e0bffe17 	ldw	r2,-8(fp)
   84778:	10800044 	addi	r2,r2,1
   8477c:	e0bffe15 	stw	r2,-8(fp)
   84780:	e0bffe17 	ldw	r2,-8(fp)
   84784:	10800090 	cmplti	r2,r2,2
   84788:	103fdc1e 	bne	r2,zero,846fc <lcd_scroll_up+0x20>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   8478c:	e0bfff17 	ldw	r2,-4(fp)
   84790:	10800883 	ldbu	r2,34(r2)
   84794:	10bfffc4 	addi	r2,r2,-1
   84798:	1007883a 	mov	r3,r2
   8479c:	e0bfff17 	ldw	r2,-4(fp)
   847a0:	10c00885 	stb	r3,34(r2)
}
   847a4:	e037883a 	mov	sp,fp
   847a8:	dfc00217 	ldw	ra,8(sp)
   847ac:	df000117 	ldw	fp,4(sp)
   847b0:	dc000017 	ldw	r16,0(sp)
   847b4:	dec00304 	addi	sp,sp,12
   847b8:	f800283a 	ret

000847bc <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   847bc:	defff804 	addi	sp,sp,-32
   847c0:	dfc00715 	stw	ra,28(sp)
   847c4:	df000615 	stw	fp,24(sp)
   847c8:	df000604 	addi	fp,sp,24
   847cc:	e13ffd15 	stw	r4,-12(fp)
   847d0:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
   847d4:	e03ffc15 	stw	zero,-16(fp)
   847d8:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
   847dc:	e0bffd17 	ldw	r2,-12(fp)
   847e0:	10800a03 	ldbu	r2,40(r2)
   847e4:	10803fcc 	andi	r2,r2,255
   847e8:	1080201c 	xori	r2,r2,128
   847ec:	10bfe004 	addi	r2,r2,-128
   847f0:	108016d8 	cmpnei	r2,r2,91
   847f4:	10004d1e 	bne	r2,zero,8492c <lcd_handle_escape+0x170>
  {
    char * ptr = sp->escape+1;
   847f8:	e0bffd17 	ldw	r2,-12(fp)
   847fc:	10800a04 	addi	r2,r2,40
   84800:	10800044 	addi	r2,r2,1
   84804:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
   84808:	00000f06 	br	84848 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   8480c:	e13ffc17 	ldw	r4,-16(fp)
   84810:	01400284 	movi	r5,10
   84814:	0082b680 	call	82b68 <__mulsi3>
   84818:	1007883a 	mov	r3,r2
   8481c:	e0bffa17 	ldw	r2,-24(fp)
   84820:	10800003 	ldbu	r2,0(r2)
   84824:	10803fcc 	andi	r2,r2,255
   84828:	1080201c 	xori	r2,r2,128
   8482c:	10bfe004 	addi	r2,r2,-128
   84830:	1885883a 	add	r2,r3,r2
   84834:	10bff404 	addi	r2,r2,-48
   84838:	e0bffc15 	stw	r2,-16(fp)
   8483c:	e0bffa17 	ldw	r2,-24(fp)
   84840:	10800044 	addi	r2,r2,1
   84844:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   84848:	e0bffa17 	ldw	r2,-24(fp)
   8484c:	10800003 	ldbu	r2,0(r2)
   84850:	10803fcc 	andi	r2,r2,255
   84854:	1080201c 	xori	r2,r2,128
   84858:	10bfe004 	addi	r2,r2,-128
   8485c:	1007883a 	mov	r3,r2
   84860:	00800274 	movhi	r2,9
   84864:	10a1c704 	addi	r2,r2,-30948
   84868:	10800017 	ldw	r2,0(r2)
   8486c:	1885883a 	add	r2,r3,r2
   84870:	10800003 	ldbu	r2,0(r2)
   84874:	10803fcc 	andi	r2,r2,255
   84878:	1080010c 	andi	r2,r2,4
   8487c:	1004c03a 	cmpne	r2,r2,zero
   84880:	103fe21e 	bne	r2,zero,8480c <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   84884:	e0bffa17 	ldw	r2,-24(fp)
   84888:	10800003 	ldbu	r2,0(r2)
   8488c:	10803fcc 	andi	r2,r2,255
   84890:	1080201c 	xori	r2,r2,128
   84894:	10bfe004 	addi	r2,r2,-128
   84898:	10800ed8 	cmpnei	r2,r2,59
   8489c:	1000251e 	bne	r2,zero,84934 <lcd_handle_escape+0x178>
    {
      ptr++;
   848a0:	e0bffa17 	ldw	r2,-24(fp)
   848a4:	10800044 	addi	r2,r2,1
   848a8:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
   848ac:	00000f06 	br	848ec <lcd_handle_escape+0x130>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   848b0:	e13ffb17 	ldw	r4,-20(fp)
   848b4:	01400284 	movi	r5,10
   848b8:	0082b680 	call	82b68 <__mulsi3>
   848bc:	1007883a 	mov	r3,r2
   848c0:	e0bffa17 	ldw	r2,-24(fp)
   848c4:	10800003 	ldbu	r2,0(r2)
   848c8:	10803fcc 	andi	r2,r2,255
   848cc:	1080201c 	xori	r2,r2,128
   848d0:	10bfe004 	addi	r2,r2,-128
   848d4:	1885883a 	add	r2,r3,r2
   848d8:	10bff404 	addi	r2,r2,-48
   848dc:	e0bffb15 	stw	r2,-20(fp)
   848e0:	e0bffa17 	ldw	r2,-24(fp)
   848e4:	10800044 	addi	r2,r2,1
   848e8:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   848ec:	e0bffa17 	ldw	r2,-24(fp)
   848f0:	10800003 	ldbu	r2,0(r2)
   848f4:	10803fcc 	andi	r2,r2,255
   848f8:	1080201c 	xori	r2,r2,128
   848fc:	10bfe004 	addi	r2,r2,-128
   84900:	1007883a 	mov	r3,r2
   84904:	00800274 	movhi	r2,9
   84908:	10a1c704 	addi	r2,r2,-30948
   8490c:	10800017 	ldw	r2,0(r2)
   84910:	1885883a 	add	r2,r3,r2
   84914:	10800003 	ldbu	r2,0(r2)
   84918:	10803fcc 	andi	r2,r2,255
   8491c:	1080010c 	andi	r2,r2,4
   84920:	1004c03a 	cmpne	r2,r2,zero
   84924:	103fe21e 	bne	r2,zero,848b0 <lcd_handle_escape+0xf4>
   84928:	00000206 	br	84934 <lcd_handle_escape+0x178>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   8492c:	00bfffc4 	movi	r2,-1
   84930:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
   84934:	e0bffe07 	ldb	r2,-8(fp)
   84938:	e0bfff15 	stw	r2,-4(fp)
   8493c:	e0ffff17 	ldw	r3,-4(fp)
   84940:	188012a0 	cmpeqi	r2,r3,74
   84944:	10002f1e 	bne	r2,zero,84a04 <lcd_handle_escape+0x248>
   84948:	e0ffff17 	ldw	r3,-4(fp)
   8494c:	188012c8 	cmpgei	r2,r3,75
   84950:	1000041e 	bne	r2,zero,84964 <lcd_handle_escape+0x1a8>
   84954:	e0ffff17 	ldw	r3,-4(fp)
   84958:	18801220 	cmpeqi	r2,r3,72
   8495c:	1000081e 	bne	r2,zero,84980 <lcd_handle_escape+0x1c4>
   84960:	00004a06 	br	84a8c <lcd_handle_escape+0x2d0>
   84964:	e0ffff17 	ldw	r3,-4(fp)
   84968:	188012e0 	cmpeqi	r2,r3,75
   8496c:	10002b1e 	bne	r2,zero,84a1c <lcd_handle_escape+0x260>
   84970:	e0ffff17 	ldw	r3,-4(fp)
   84974:	188019a0 	cmpeqi	r2,r3,102
   84978:	1000011e 	bne	r2,zero,84980 <lcd_handle_escape+0x1c4>
   8497c:	00004306 	br	84a8c <lcd_handle_escape+0x2d0>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   84980:	e0bffb17 	ldw	r2,-20(fp)
   84984:	10800050 	cmplti	r2,r2,1
   84988:	1000051e 	bne	r2,zero,849a0 <lcd_handle_escape+0x1e4>
      sp->x = parm2 - 1;
   8498c:	e0bffb17 	ldw	r2,-20(fp)
   84990:	10bfffc4 	addi	r2,r2,-1
   84994:	1007883a 	mov	r3,r2
   84998:	e0bffd17 	ldw	r2,-12(fp)
   8499c:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   849a0:	e0bffc17 	ldw	r2,-16(fp)
   849a4:	10800050 	cmplti	r2,r2,1
   849a8:	1000381e 	bne	r2,zero,84a8c <lcd_handle_escape+0x2d0>
    {
      sp->y = parm1 - 1;
   849ac:	e0bffc17 	ldw	r2,-16(fp)
   849b0:	10bfffc4 	addi	r2,r2,-1
   849b4:	1007883a 	mov	r3,r2
   849b8:	e0bffd17 	ldw	r2,-12(fp)
   849bc:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   849c0:	e0bffd17 	ldw	r2,-12(fp)
   849c4:	10800883 	ldbu	r2,34(r2)
   849c8:	10803fcc 	andi	r2,r2,255
   849cc:	10800170 	cmpltui	r2,r2,5
   849d0:	1000061e 	bne	r2,zero,849ec <lcd_handle_escape+0x230>
        sp->y = ALT_LCD_HEIGHT * 2;
   849d4:	e0fffd17 	ldw	r3,-12(fp)
   849d8:	00800104 	movi	r2,4
   849dc:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
   849e0:	00000206 	br	849ec <lcd_handle_escape+0x230>
        lcd_scroll_up(sp);
   849e4:	e13ffd17 	ldw	r4,-12(fp)
   849e8:	00846dc0 	call	846dc <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   849ec:	e0bffd17 	ldw	r2,-12(fp)
   849f0:	10800883 	ldbu	r2,34(r2)
   849f4:	10803fcc 	andi	r2,r2,255
   849f8:	108000e8 	cmpgeui	r2,r2,3
   849fc:	103ff91e 	bne	r2,zero,849e4 <lcd_handle_escape+0x228>
        lcd_scroll_up(sp);
    }
    break;
   84a00:	00002206 	br	84a8c <lcd_handle_escape+0x2d0>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   84a04:	e0bffc17 	ldw	r2,-16(fp)
   84a08:	10800098 	cmpnei	r2,r2,2
   84a0c:	10001f1e 	bne	r2,zero,84a8c <lcd_handle_escape+0x2d0>
      lcd_clear_screen(sp);
   84a10:	e13ffd17 	ldw	r4,-12(fp)
   84a14:	00843f00 	call	843f0 <lcd_clear_screen>
    break;
   84a18:	00001c06 	br	84a8c <lcd_handle_escape+0x2d0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   84a1c:	e0bffc17 	ldw	r2,-16(fp)
   84a20:	10800048 	cmpgei	r2,r2,1
   84a24:	1000191e 	bne	r2,zero,84a8c <lcd_handle_escape+0x2d0>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   84a28:	e0bffd17 	ldw	r2,-12(fp)
   84a2c:	10800843 	ldbu	r2,33(r2)
   84a30:	10803fcc 	andi	r2,r2,255
   84a34:	10801428 	cmpgeui	r2,r2,80
   84a38:	1000141e 	bne	r2,zero,84a8c <lcd_handle_escape+0x2d0>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   84a3c:	e0bffd17 	ldw	r2,-12(fp)
   84a40:	10800883 	ldbu	r2,34(r2)
   84a44:	11003fcc 	andi	r4,r2,255
   84a48:	014018c4 	movi	r5,99
   84a4c:	0082b680 	call	82b68 <__mulsi3>
   84a50:	10c01004 	addi	r3,r2,64
   84a54:	e0bffd17 	ldw	r2,-12(fp)
   84a58:	1887883a 	add	r3,r3,r2
   84a5c:	e0bffd17 	ldw	r2,-12(fp)
   84a60:	10800843 	ldbu	r2,33(r2)
   84a64:	10803fcc 	andi	r2,r2,255
   84a68:	1889883a 	add	r4,r3,r2
   84a6c:	e0bffd17 	ldw	r2,-12(fp)
   84a70:	10800843 	ldbu	r2,33(r2)
   84a74:	10c03fcc 	andi	r3,r2,255
   84a78:	00801404 	movi	r2,80
   84a7c:	10c5c83a 	sub	r2,r2,r3
   84a80:	100d883a 	mov	r6,r2
   84a84:	01400804 	movi	r5,32
   84a88:	00825a40 	call	825a4 <memset>
    }
    break;
  }
}
   84a8c:	e037883a 	mov	sp,fp
   84a90:	dfc00117 	ldw	ra,4(sp)
   84a94:	df000017 	ldw	fp,0(sp)
   84a98:	dec00204 	addi	sp,sp,8
   84a9c:	f800283a 	ret

00084aa0 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   84aa0:	defff004 	addi	sp,sp,-64
   84aa4:	dfc00f15 	stw	ra,60(sp)
   84aa8:	df000e15 	stw	fp,56(sp)
   84aac:	dc800d15 	stw	r18,52(sp)
   84ab0:	dc400c15 	stw	r17,48(sp)
   84ab4:	dc000b15 	stw	r16,44(sp)
   84ab8:	df000b04 	addi	fp,sp,44
   84abc:	e13ffc15 	stw	r4,-16(fp)
   84ac0:	e17ffd15 	stw	r5,-12(fp)
   84ac4:	e1bffe15 	stw	r6,-8(fp)
   84ac8:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
   84acc:	e0bffe17 	ldw	r2,-8(fp)
   84ad0:	1007883a 	mov	r3,r2
   84ad4:	e0bffd17 	ldw	r2,-12(fp)
   84ad8:	10c5883a 	add	r2,r2,r3
   84adc:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   84ae0:	e0fffc17 	ldw	r3,-16(fp)
   84ae4:	00800044 	movi	r2,1
   84ae8:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
   84aec:	0000a306 	br	84d7c <altera_avalon_lcd_16207_write+0x2dc>
  {
    char c = *ptr;
   84af0:	e0bffd17 	ldw	r2,-12(fp)
   84af4:	10800003 	ldbu	r2,0(r2)
   84af8:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
   84afc:	e0bffc17 	ldw	r2,-16(fp)
   84b00:	10800903 	ldbu	r2,36(r2)
   84b04:	10803fcc 	andi	r2,r2,255
   84b08:	1080201c 	xori	r2,r2,128
   84b0c:	10bfe004 	addi	r2,r2,-128
   84b10:	1004803a 	cmplt	r2,r2,zero
   84b14:	10003b1e 	bne	r2,zero,84c04 <altera_avalon_lcd_16207_write+0x164>
    {
      unsigned int esccount = sp->esccount;
   84b18:	e0bffc17 	ldw	r2,-16(fp)
   84b1c:	10800903 	ldbu	r2,36(r2)
   84b20:	10803fcc 	andi	r2,r2,255
   84b24:	1080201c 	xori	r2,r2,128
   84b28:	10bfe004 	addi	r2,r2,-128
   84b2c:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   84b30:	e0bff717 	ldw	r2,-36(fp)
   84b34:	1004c03a 	cmpne	r2,r2,zero
   84b38:	1000031e 	bne	r2,zero,84b48 <altera_avalon_lcd_16207_write+0xa8>
   84b3c:	e0bff807 	ldb	r2,-32(fp)
   84b40:	108016d8 	cmpnei	r2,r2,91
   84b44:	1000111e 	bne	r2,zero,84b8c <altera_avalon_lcd_16207_write+0xec>
   84b48:	e0bff717 	ldw	r2,-36(fp)
   84b4c:	1005003a 	cmpeq	r2,r2,zero
   84b50:	10001a1e 	bne	r2,zero,84bbc <altera_avalon_lcd_16207_write+0x11c>
   84b54:	e0bff807 	ldb	r2,-32(fp)
   84b58:	1007883a 	mov	r3,r2
   84b5c:	00800274 	movhi	r2,9
   84b60:	10a1c704 	addi	r2,r2,-30948
   84b64:	10800017 	ldw	r2,0(r2)
   84b68:	1885883a 	add	r2,r3,r2
   84b6c:	10800003 	ldbu	r2,0(r2)
   84b70:	10803fcc 	andi	r2,r2,255
   84b74:	1080010c 	andi	r2,r2,4
   84b78:	1004c03a 	cmpne	r2,r2,zero
   84b7c:	10000f1e 	bne	r2,zero,84bbc <altera_avalon_lcd_16207_write+0x11c>
   84b80:	e0bff807 	ldb	r2,-32(fp)
   84b84:	10800ee0 	cmpeqi	r2,r2,59
   84b88:	10000c1e 	bne	r2,zero,84bbc <altera_avalon_lcd_16207_write+0x11c>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
   84b8c:	e0fff717 	ldw	r3,-36(fp)
   84b90:	e0bffc17 	ldw	r2,-16(fp)
   84b94:	1885883a 	add	r2,r3,r2
   84b98:	10800a04 	addi	r2,r2,40
   84b9c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   84ba0:	e17ff807 	ldb	r5,-32(fp)
   84ba4:	e13ffc17 	ldw	r4,-16(fp)
   84ba8:	00847bc0 	call	847bc <lcd_handle_escape>

        sp->esccount = -1;
   84bac:	e0fffc17 	ldw	r3,-16(fp)
   84bb0:	00bfffc4 	movi	r2,-1
   84bb4:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   84bb8:	00006d06 	br	84d70 <altera_avalon_lcd_16207_write+0x2d0>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   84bbc:	e0bffc17 	ldw	r2,-16(fp)
   84bc0:	10800903 	ldbu	r2,36(r2)
   84bc4:	10803fcc 	andi	r2,r2,255
   84bc8:	108001e8 	cmpgeui	r2,r2,7
   84bcc:	1000681e 	bne	r2,zero,84d70 <altera_avalon_lcd_16207_write+0x2d0>
      {
        sp->escape[esccount] = c;
   84bd0:	e0fff717 	ldw	r3,-36(fp)
   84bd4:	e0bffc17 	ldw	r2,-16(fp)
   84bd8:	1885883a 	add	r2,r3,r2
   84bdc:	10c00a04 	addi	r3,r2,40
   84be0:	e0bff803 	ldbu	r2,-32(fp)
   84be4:	18800005 	stb	r2,0(r3)
        sp->esccount++;
   84be8:	e0bffc17 	ldw	r2,-16(fp)
   84bec:	10800903 	ldbu	r2,36(r2)
   84bf0:	10800044 	addi	r2,r2,1
   84bf4:	1007883a 	mov	r3,r2
   84bf8:	e0bffc17 	ldw	r2,-16(fp)
   84bfc:	10c00905 	stb	r3,36(r2)
   84c00:	00005b06 	br	84d70 <altera_avalon_lcd_16207_write+0x2d0>
      }
    }
    else if (c == 27) /* ESC */
   84c04:	e0bff807 	ldb	r2,-32(fp)
   84c08:	108006d8 	cmpnei	r2,r2,27
   84c0c:	1000031e 	bne	r2,zero,84c1c <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->esccount = 0;
   84c10:	e0bffc17 	ldw	r2,-16(fp)
   84c14:	10000905 	stb	zero,36(r2)
   84c18:	00005506 	br	84d70 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\r')
   84c1c:	e0bff807 	ldb	r2,-32(fp)
   84c20:	10800358 	cmpnei	r2,r2,13
   84c24:	1000031e 	bne	r2,zero,84c34 <altera_avalon_lcd_16207_write+0x194>
    {
      sp->x = 0;
   84c28:	e0bffc17 	ldw	r2,-16(fp)
   84c2c:	10000845 	stb	zero,33(r2)
   84c30:	00004f06 	br	84d70 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\n')
   84c34:	e0bff807 	ldb	r2,-32(fp)
   84c38:	10800298 	cmpnei	r2,r2,10
   84c3c:	1000101e 	bne	r2,zero,84c80 <altera_avalon_lcd_16207_write+0x1e0>
    {
      sp->x = 0;
   84c40:	e0bffc17 	ldw	r2,-16(fp)
   84c44:	10000845 	stb	zero,33(r2)
      sp->y++;
   84c48:	e0bffc17 	ldw	r2,-16(fp)
   84c4c:	10800883 	ldbu	r2,34(r2)
   84c50:	10800044 	addi	r2,r2,1
   84c54:	1007883a 	mov	r3,r2
   84c58:	e0bffc17 	ldw	r2,-16(fp)
   84c5c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   84c60:	e0bffc17 	ldw	r2,-16(fp)
   84c64:	10800883 	ldbu	r2,34(r2)
   84c68:	10803fcc 	andi	r2,r2,255
   84c6c:	108000f0 	cmpltui	r2,r2,3
   84c70:	10003f1e 	bne	r2,zero,84d70 <altera_avalon_lcd_16207_write+0x2d0>
        lcd_scroll_up(sp);
   84c74:	e13ffc17 	ldw	r4,-16(fp)
   84c78:	00846dc0 	call	846dc <lcd_scroll_up>
   84c7c:	00003c06 	br	84d70 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\b')
   84c80:	e0bff807 	ldb	r2,-32(fp)
   84c84:	10800218 	cmpnei	r2,r2,8
   84c88:	10000c1e 	bne	r2,zero,84cbc <altera_avalon_lcd_16207_write+0x21c>
    {
      if (sp->x > 0)
   84c8c:	e0bffc17 	ldw	r2,-16(fp)
   84c90:	10800843 	ldbu	r2,33(r2)
   84c94:	10803fcc 	andi	r2,r2,255
   84c98:	1005003a 	cmpeq	r2,r2,zero
   84c9c:	1000341e 	bne	r2,zero,84d70 <altera_avalon_lcd_16207_write+0x2d0>
        sp->x--;
   84ca0:	e0bffc17 	ldw	r2,-16(fp)
   84ca4:	10800843 	ldbu	r2,33(r2)
   84ca8:	10bfffc4 	addi	r2,r2,-1
   84cac:	1007883a 	mov	r3,r2
   84cb0:	e0bffc17 	ldw	r2,-16(fp)
   84cb4:	10c00845 	stb	r3,33(r2)
   84cb8:	00002d06 	br	84d70 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (isprint(c))
   84cbc:	e0bff807 	ldb	r2,-32(fp)
   84cc0:	1007883a 	mov	r3,r2
   84cc4:	00800274 	movhi	r2,9
   84cc8:	10a1c704 	addi	r2,r2,-30948
   84ccc:	10800017 	ldw	r2,0(r2)
   84cd0:	1885883a 	add	r2,r3,r2
   84cd4:	10800003 	ldbu	r2,0(r2)
   84cd8:	10803fcc 	andi	r2,r2,255
   84cdc:	1080201c 	xori	r2,r2,128
   84ce0:	10bfe004 	addi	r2,r2,-128
   84ce4:	108025cc 	andi	r2,r2,151
   84ce8:	1005003a 	cmpeq	r2,r2,zero
   84cec:	1000201e 	bne	r2,zero,84d70 <altera_avalon_lcd_16207_write+0x2d0>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   84cf0:	e0bffc17 	ldw	r2,-16(fp)
   84cf4:	10800883 	ldbu	r2,34(r2)
   84cf8:	10803fcc 	andi	r2,r2,255
   84cfc:	108000b0 	cmpltui	r2,r2,2
   84d00:	1000021e 	bne	r2,zero,84d0c <altera_avalon_lcd_16207_write+0x26c>
        lcd_scroll_up(sp);
   84d04:	e13ffc17 	ldw	r4,-16(fp)
   84d08:	00846dc0 	call	846dc <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   84d0c:	e0bffc17 	ldw	r2,-16(fp)
   84d10:	10800843 	ldbu	r2,33(r2)
   84d14:	10803fcc 	andi	r2,r2,255
   84d18:	10801428 	cmpgeui	r2,r2,80
   84d1c:	10000e1e 	bne	r2,zero,84d58 <altera_avalon_lcd_16207_write+0x2b8>
        sp->line[sp->y].data[sp->x] = c;
   84d20:	e0bffc17 	ldw	r2,-16(fp)
   84d24:	10800883 	ldbu	r2,34(r2)
   84d28:	11003fcc 	andi	r4,r2,255
   84d2c:	e0bffc17 	ldw	r2,-16(fp)
   84d30:	10800843 	ldbu	r2,33(r2)
   84d34:	14403fcc 	andi	r17,r2,255
   84d38:	e43ffc17 	ldw	r16,-16(fp)
   84d3c:	014018c4 	movi	r5,99
   84d40:	0082b680 	call	82b68 <__mulsi3>
   84d44:	1405883a 	add	r2,r2,r16
   84d48:	1445883a 	add	r2,r2,r17
   84d4c:	10c01004 	addi	r3,r2,64
   84d50:	e0bff803 	ldbu	r2,-32(fp)
   84d54:	18800005 	stb	r2,0(r3)

      sp->x++;
   84d58:	e0bffc17 	ldw	r2,-16(fp)
   84d5c:	10800843 	ldbu	r2,33(r2)
   84d60:	10800044 	addi	r2,r2,1
   84d64:	1007883a 	mov	r3,r2
   84d68:	e0bffc17 	ldw	r2,-16(fp)
   84d6c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   84d70:	e0bffd17 	ldw	r2,-12(fp)
   84d74:	10800044 	addi	r2,r2,1
   84d78:	e0bffd15 	stw	r2,-12(fp)
   84d7c:	e0fffd17 	ldw	r3,-12(fp)
   84d80:	e0bffb17 	ldw	r2,-20(fp)
   84d84:	18bf5a36 	bltu	r3,r2,84af0 <altera_avalon_lcd_16207_write+0x50>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   84d88:	00800404 	movi	r2,16
   84d8c:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   84d90:	e03ffa15 	stw	zero,-24(fp)
   84d94:	00003906 	br	84e7c <altera_avalon_lcd_16207_write+0x3dc>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   84d98:	00801404 	movi	r2,80
   84d9c:	e0bff615 	stw	r2,-40(fp)
   84da0:	00001206 	br	84dec <altera_avalon_lcd_16207_write+0x34c>
      if (sp->line[y].data[width-1] != ' ')
   84da4:	e13ffa17 	ldw	r4,-24(fp)
   84da8:	e0bff617 	ldw	r2,-40(fp)
   84dac:	147fffc4 	addi	r17,r2,-1
   84db0:	e43ffc17 	ldw	r16,-16(fp)
   84db4:	014018c4 	movi	r5,99
   84db8:	0082b680 	call	82b68 <__mulsi3>
   84dbc:	1405883a 	add	r2,r2,r16
   84dc0:	1445883a 	add	r2,r2,r17
   84dc4:	10801004 	addi	r2,r2,64
   84dc8:	10800003 	ldbu	r2,0(r2)
   84dcc:	10803fcc 	andi	r2,r2,255
   84dd0:	1080201c 	xori	r2,r2,128
   84dd4:	10bfe004 	addi	r2,r2,-128
   84dd8:	10800818 	cmpnei	r2,r2,32
   84ddc:	1000061e 	bne	r2,zero,84df8 <altera_avalon_lcd_16207_write+0x358>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   84de0:	e0bff617 	ldw	r2,-40(fp)
   84de4:	10bfffc4 	addi	r2,r2,-1
   84de8:	e0bff615 	stw	r2,-40(fp)
   84dec:	e0bff617 	ldw	r2,-40(fp)
   84df0:	10800048 	cmpgei	r2,r2,1
   84df4:	103feb1e 	bne	r2,zero,84da4 <altera_avalon_lcd_16207_write+0x304>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   84df8:	e0bff617 	ldw	r2,-40(fp)
   84dfc:	10800448 	cmpgei	r2,r2,17
   84e00:	1000031e 	bne	r2,zero,84e10 <altera_avalon_lcd_16207_write+0x370>
      width = ALT_LCD_WIDTH;
   84e04:	00800404 	movi	r2,16
   84e08:	e0bff615 	stw	r2,-40(fp)
   84e0c:	00000306 	br	84e1c <altera_avalon_lcd_16207_write+0x37c>
    else
      width++;
   84e10:	e0bff617 	ldw	r2,-40(fp)
   84e14:	10800044 	addi	r2,r2,1
   84e18:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
   84e1c:	e13ffa17 	ldw	r4,-24(fp)
   84e20:	e0bff617 	ldw	r2,-40(fp)
   84e24:	1023883a 	mov	r17,r2
   84e28:	e43ffc17 	ldw	r16,-16(fp)
   84e2c:	014018c4 	movi	r5,99
   84e30:	0082b680 	call	82b68 <__mulsi3>
   84e34:	1405883a 	add	r2,r2,r16
   84e38:	10802404 	addi	r2,r2,144
   84e3c:	14400045 	stb	r17,1(r2)
    if (widthmax < width)
   84e40:	e0fff917 	ldw	r3,-28(fp)
   84e44:	e0bff617 	ldw	r2,-40(fp)
   84e48:	1880020e 	bge	r3,r2,84e54 <altera_avalon_lcd_16207_write+0x3b4>
      widthmax = width;
   84e4c:	e0bff617 	ldw	r2,-40(fp)
   84e50:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   84e54:	e13ffa17 	ldw	r4,-24(fp)
   84e58:	e43ffc17 	ldw	r16,-16(fp)
   84e5c:	014018c4 	movi	r5,99
   84e60:	0082b680 	call	82b68 <__mulsi3>
   84e64:	1405883a 	add	r2,r2,r16
   84e68:	10802404 	addi	r2,r2,144
   84e6c:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   84e70:	e0bffa17 	ldw	r2,-24(fp)
   84e74:	10800044 	addi	r2,r2,1
   84e78:	e0bffa15 	stw	r2,-24(fp)
   84e7c:	e0bffa17 	ldw	r2,-24(fp)
   84e80:	10800090 	cmplti	r2,r2,2
   84e84:	103fc41e 	bne	r2,zero,84d98 <altera_avalon_lcd_16207_write+0x2f8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   84e88:	e0bff917 	ldw	r2,-28(fp)
   84e8c:	10800448 	cmpgei	r2,r2,17
   84e90:	1000031e 	bne	r2,zero,84ea0 <altera_avalon_lcd_16207_write+0x400>
    sp->scrollmax = 0;
   84e94:	e0bffc17 	ldw	r2,-16(fp)
   84e98:	10000985 	stb	zero,38(r2)
   84e9c:	00003106 	br	84f64 <altera_avalon_lcd_16207_write+0x4c4>
  else
  {
    widthmax *= 2;
   84ea0:	e0bff917 	ldw	r2,-28(fp)
   84ea4:	1085883a 	add	r2,r2,r2
   84ea8:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
   84eac:	e0bff917 	ldw	r2,-28(fp)
   84eb0:	1007883a 	mov	r3,r2
   84eb4:	e0bffc17 	ldw	r2,-16(fp)
   84eb8:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   84ebc:	e03ffa15 	stw	zero,-24(fp)
   84ec0:	00002506 	br	84f58 <altera_avalon_lcd_16207_write+0x4b8>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   84ec4:	e13ffa17 	ldw	r4,-24(fp)
   84ec8:	e43ffc17 	ldw	r16,-16(fp)
   84ecc:	014018c4 	movi	r5,99
   84ed0:	0082b680 	call	82b68 <__mulsi3>
   84ed4:	1405883a 	add	r2,r2,r16
   84ed8:	10802404 	addi	r2,r2,144
   84edc:	10800043 	ldbu	r2,1(r2)
   84ee0:	10803fcc 	andi	r2,r2,255
   84ee4:	1080201c 	xori	r2,r2,128
   84ee8:	10bfe004 	addi	r2,r2,-128
   84eec:	10800450 	cmplti	r2,r2,17
   84ef0:	1000161e 	bne	r2,zero,84f4c <altera_avalon_lcd_16207_write+0x4ac>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   84ef4:	e4bffa17 	ldw	r18,-24(fp)
   84ef8:	e13ffa17 	ldw	r4,-24(fp)
   84efc:	e43ffc17 	ldw	r16,-16(fp)
   84f00:	014018c4 	movi	r5,99
   84f04:	0082b680 	call	82b68 <__mulsi3>
   84f08:	1405883a 	add	r2,r2,r16
   84f0c:	10802404 	addi	r2,r2,144
   84f10:	10800043 	ldbu	r2,1(r2)
   84f14:	10803fcc 	andi	r2,r2,255
   84f18:	1080201c 	xori	r2,r2,128
   84f1c:	10bfe004 	addi	r2,r2,-128
   84f20:	1008923a 	slli	r4,r2,8
   84f24:	e17ff917 	ldw	r5,-28(fp)
   84f28:	008679c0 	call	8679c <__divsi3>
   84f2c:	1023883a 	mov	r17,r2
   84f30:	e43ffc17 	ldw	r16,-16(fp)
   84f34:	9009883a 	mov	r4,r18
   84f38:	014018c4 	movi	r5,99
   84f3c:	0082b680 	call	82b68 <__mulsi3>
   84f40:	1405883a 	add	r2,r2,r16
   84f44:	10802404 	addi	r2,r2,144
   84f48:	14400085 	stb	r17,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   84f4c:	e0bffa17 	ldw	r2,-24(fp)
   84f50:	10800044 	addi	r2,r2,1
   84f54:	e0bffa15 	stw	r2,-24(fp)
   84f58:	e0bffa17 	ldw	r2,-24(fp)
   84f5c:	10800090 	cmplti	r2,r2,2
   84f60:	103fd81e 	bne	r2,zero,84ec4 <altera_avalon_lcd_16207_write+0x424>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   84f64:	e0bffc17 	ldw	r2,-16(fp)
   84f68:	10800943 	ldbu	r2,37(r2)
   84f6c:	10803fcc 	andi	r2,r2,255
   84f70:	1080201c 	xori	r2,r2,128
   84f74:	10bfe004 	addi	r2,r2,-128
   84f78:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
   84f7c:	e13ffc17 	ldw	r4,-16(fp)
   84f80:	00844c80 	call	844c8 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   84f84:	e0bffc17 	ldw	r2,-16(fp)
   84f88:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   84f8c:	e0bffc17 	ldw	r2,-16(fp)
   84f90:	10800943 	ldbu	r2,37(r2)
   84f94:	10c03fcc 	andi	r3,r2,255
   84f98:	18c0201c 	xori	r3,r3,128
   84f9c:	18ffe004 	addi	r3,r3,-128
   84fa0:	e0bff517 	ldw	r2,-44(fp)
   84fa4:	18800426 	beq	r3,r2,84fb8 <altera_avalon_lcd_16207_write+0x518>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   84fa8:	e0fffc17 	ldw	r3,-16(fp)
   84fac:	00800044 	movi	r2,1
   84fb0:	188009c5 	stb	r2,39(r3)
  }
   84fb4:	003feb06 	br	84f64 <altera_avalon_lcd_16207_write+0x4c4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   84fb8:	e0bffe17 	ldw	r2,-8(fp)
}
   84fbc:	e037883a 	mov	sp,fp
   84fc0:	dfc00417 	ldw	ra,16(sp)
   84fc4:	df000317 	ldw	fp,12(sp)
   84fc8:	dc800217 	ldw	r18,8(sp)
   84fcc:	dc400117 	ldw	r17,4(sp)
   84fd0:	dc000017 	ldw	r16,0(sp)
   84fd4:	dec00504 	addi	sp,sp,20
   84fd8:	f800283a 	ret

00084fdc <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   84fdc:	defffc04 	addi	sp,sp,-16
   84fe0:	dfc00315 	stw	ra,12(sp)
   84fe4:	df000215 	stw	fp,8(sp)
   84fe8:	df000204 	addi	fp,sp,8
   84fec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   84ff0:	e0bfff17 	ldw	r2,-4(fp)
   84ff4:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   84ff8:	e0bffe17 	ldw	r2,-8(fp)
   84ffc:	10800943 	ldbu	r2,37(r2)
   85000:	10803fcc 	andi	r2,r2,255
   85004:	1080201c 	xori	r2,r2,128
   85008:	10bfe004 	addi	r2,r2,-128
   8500c:	10c00044 	addi	r3,r2,1
   85010:	e0bffe17 	ldw	r2,-8(fp)
   85014:	10800983 	ldbu	r2,38(r2)
   85018:	10803fcc 	andi	r2,r2,255
   8501c:	1080201c 	xori	r2,r2,128
   85020:	10bfe004 	addi	r2,r2,-128
   85024:	18800316 	blt	r3,r2,85034 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
   85028:	e0bffe17 	ldw	r2,-8(fp)
   8502c:	10000945 	stb	zero,37(r2)
   85030:	00000606 	br	8504c <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
   85034:	e0bffe17 	ldw	r2,-8(fp)
   85038:	10800943 	ldbu	r2,37(r2)
   8503c:	10800044 	addi	r2,r2,1
   85040:	1007883a 	mov	r3,r2
   85044:	e0bffe17 	ldw	r2,-8(fp)
   85048:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   8504c:	e0bffe17 	ldw	r2,-8(fp)
   85050:	10800983 	ldbu	r2,38(r2)
   85054:	10803fcc 	andi	r2,r2,255
   85058:	1080201c 	xori	r2,r2,128
   8505c:	10bfe004 	addi	r2,r2,-128
   85060:	10800050 	cmplti	r2,r2,1
   85064:	1000091e 	bne	r2,zero,8508c <alt_lcd_16207_timeout+0xb0>
   85068:	e0bffe17 	ldw	r2,-8(fp)
   8506c:	108009c3 	ldbu	r2,39(r2)
   85070:	10803fcc 	andi	r2,r2,255
   85074:	1080201c 	xori	r2,r2,128
   85078:	10bfe004 	addi	r2,r2,-128
   8507c:	1004c03a 	cmpne	r2,r2,zero
   85080:	1000021e 	bne	r2,zero,8508c <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
   85084:	e13ffe17 	ldw	r4,-8(fp)
   85088:	00844c80 	call	844c8 <lcd_repaint_screen>

  return sp->period;
   8508c:	e0bffe17 	ldw	r2,-8(fp)
   85090:	10800717 	ldw	r2,28(r2)
}
   85094:	e037883a 	mov	sp,fp
   85098:	dfc00117 	ldw	ra,4(sp)
   8509c:	df000017 	ldw	fp,0(sp)
   850a0:	dec00204 	addi	sp,sp,8
   850a4:	f800283a 	ret

000850a8 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   850a8:	defffc04 	addi	sp,sp,-16
   850ac:	dfc00315 	stw	ra,12(sp)
   850b0:	df000215 	stw	fp,8(sp)
   850b4:	df000204 	addi	fp,sp,8
   850b8:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   850bc:	e0bfff17 	ldw	r2,-4(fp)
   850c0:	10800017 	ldw	r2,0(r2)
   850c4:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   850c8:	e0bfff17 	ldw	r2,-4(fp)
   850cc:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   850d0:	010ea604 	movi	r4,15000
   850d4:	0085f480 	call	85f48 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   850d8:	e0bffe17 	ldw	r2,-8(fp)
   850dc:	1007883a 	mov	r3,r2
   850e0:	00800c04 	movi	r2,48
   850e4:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   850e8:	01040104 	movi	r4,4100
   850ec:	0085f480 	call	85f48 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   850f0:	e0bffe17 	ldw	r2,-8(fp)
   850f4:	1007883a 	mov	r3,r2
   850f8:	00800c04 	movi	r2,48
   850fc:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   85100:	0100fa04 	movi	r4,1000
   85104:	0085f480 	call	85f48 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   85108:	e0bffe17 	ldw	r2,-8(fp)
   8510c:	1007883a 	mov	r3,r2
   85110:	00800c04 	movi	r2,48
   85114:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   85118:	e13fff17 	ldw	r4,-4(fp)
   8511c:	01400e04 	movi	r5,56
   85120:	00842640 	call	84264 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   85124:	e13fff17 	ldw	r4,-4(fp)
   85128:	01400204 	movi	r5,8
   8512c:	00842640 	call	84264 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   85130:	e13fff17 	ldw	r4,-4(fp)
   85134:	00843f00 	call	843f0 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   85138:	e13fff17 	ldw	r4,-4(fp)
   8513c:	01400184 	movi	r5,6
   85140:	00842640 	call	84264 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   85144:	e13fff17 	ldw	r4,-4(fp)
   85148:	01400304 	movi	r5,12
   8514c:	00842640 	call	84264 <lcd_write_command>

  sp->esccount = -1;
   85150:	e0ffff17 	ldw	r3,-4(fp)
   85154:	00bfffc4 	movi	r2,-1
   85158:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
   8515c:	e0bfff17 	ldw	r2,-4(fp)
   85160:	11000a04 	addi	r4,r2,40
   85164:	000b883a 	mov	r5,zero
   85168:	01800204 	movi	r6,8
   8516c:	00825a40 	call	825a4 <memset>

  sp->scrollpos = 0;
   85170:	e0bfff17 	ldw	r2,-4(fp)
   85174:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   85178:	e0bfff17 	ldw	r2,-4(fp)
   8517c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   85180:	e0bfff17 	ldw	r2,-4(fp)
   85184:	100009c5 	stb	zero,39(r2)
   85188:	00800274 	movhi	r2,9
   8518c:	10a8ae04 	addi	r2,r2,-23880
   85190:	10800017 	ldw	r2,0(r2)
   85194:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   85198:	01400284 	movi	r5,10
   8519c:	008685c0 	call	8685c <__udivsi3>
   851a0:	1007883a 	mov	r3,r2
   851a4:	e0bfff17 	ldw	r2,-4(fp)
   851a8:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   851ac:	e0bfff17 	ldw	r2,-4(fp)
   851b0:	11000104 	addi	r4,r2,4
   851b4:	e0bfff17 	ldw	r2,-4(fp)
   851b8:	10800717 	ldw	r2,28(r2)
   851bc:	100b883a 	mov	r5,r2
   851c0:	01800234 	movhi	r6,8
   851c4:	3193f704 	addi	r6,r6,20444
   851c8:	e1ffff17 	ldw	r7,-4(fp)
   851cc:	008533c0 	call	8533c <alt_alarm_start>
}
   851d0:	e037883a 	mov	sp,fp
   851d4:	dfc00117 	ldw	ra,4(sp)
   851d8:	df000017 	ldw	fp,0(sp)
   851dc:	dec00204 	addi	sp,sp,8
   851e0:	f800283a 	ret

000851e4 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   851e4:	defffa04 	addi	sp,sp,-24
   851e8:	dfc00515 	stw	ra,20(sp)
   851ec:	df000415 	stw	fp,16(sp)
   851f0:	df000404 	addi	fp,sp,16
   851f4:	e13ffd15 	stw	r4,-12(fp)
   851f8:	e17ffe15 	stw	r5,-8(fp)
   851fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   85200:	e0bffd17 	ldw	r2,-12(fp)
   85204:	10800017 	ldw	r2,0(r2)
   85208:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   8520c:	e0bffc17 	ldw	r2,-16(fp)
   85210:	11000a04 	addi	r4,r2,40
   85214:	e0bffd17 	ldw	r2,-12(fp)
   85218:	11c00217 	ldw	r7,8(r2)
   8521c:	e17ffe17 	ldw	r5,-8(fp)
   85220:	e1bfff17 	ldw	r6,-4(fp)
   85224:	0084aa00 	call	84aa0 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   85228:	e037883a 	mov	sp,fp
   8522c:	dfc00117 	ldw	ra,4(sp)
   85230:	df000017 	ldw	fp,0(sp)
   85234:	dec00204 	addi	sp,sp,8
   85238:	f800283a 	ret

0008523c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   8523c:	defffa04 	addi	sp,sp,-24
   85240:	dfc00515 	stw	ra,20(sp)
   85244:	df000415 	stw	fp,16(sp)
   85248:	df000404 	addi	fp,sp,16
   8524c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   85250:	e0bfff17 	ldw	r2,-4(fp)
   85254:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   85258:	e0bfff17 	ldw	r2,-4(fp)
   8525c:	10800104 	addi	r2,r2,4
   85260:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85264:	0005303a 	rdctl	r2,status
   85268:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8526c:	e0fffd17 	ldw	r3,-12(fp)
   85270:	00bfff84 	movi	r2,-2
   85274:	1884703a 	and	r2,r3,r2
   85278:	1001703a 	wrctl	status,r2
  
  return context;
   8527c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   85280:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   85284:	0085e3c0 	call	85e3c <alt_tick>
   85288:	e0bffe17 	ldw	r2,-8(fp)
   8528c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85290:	e0bffc17 	ldw	r2,-16(fp)
   85294:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   85298:	e037883a 	mov	sp,fp
   8529c:	dfc00117 	ldw	ra,4(sp)
   852a0:	df000017 	ldw	fp,0(sp)
   852a4:	dec00204 	addi	sp,sp,8
   852a8:	f800283a 	ret

000852ac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   852ac:	defff804 	addi	sp,sp,-32
   852b0:	dfc00715 	stw	ra,28(sp)
   852b4:	df000615 	stw	fp,24(sp)
   852b8:	df000604 	addi	fp,sp,24
   852bc:	e13ffc15 	stw	r4,-16(fp)
   852c0:	e17ffd15 	stw	r5,-12(fp)
   852c4:	e1bffe15 	stw	r6,-8(fp)
   852c8:	e1ffff15 	stw	r7,-4(fp)
   852cc:	e0bfff17 	ldw	r2,-4(fp)
   852d0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   852d4:	00800274 	movhi	r2,9
   852d8:	10a8ae04 	addi	r2,r2,-23880
   852dc:	10800017 	ldw	r2,0(r2)
   852e0:	1004c03a 	cmpne	r2,r2,zero
   852e4:	1000041e 	bne	r2,zero,852f8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   852e8:	00c00274 	movhi	r3,9
   852ec:	18e8ae04 	addi	r3,r3,-23880
   852f0:	e0bffb17 	ldw	r2,-20(fp)
   852f4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   852f8:	e0bffc17 	ldw	r2,-16(fp)
   852fc:	10800104 	addi	r2,r2,4
   85300:	1007883a 	mov	r3,r2
   85304:	008001c4 	movi	r2,7
   85308:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   8530c:	d8000015 	stw	zero,0(sp)
   85310:	e13ffd17 	ldw	r4,-12(fp)
   85314:	e17ffe17 	ldw	r5,-8(fp)
   85318:	01800234 	movhi	r6,8
   8531c:	31948f04 	addi	r6,r6,21052
   85320:	e1fffc17 	ldw	r7,-16(fp)
   85324:	00856a40 	call	856a4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   85328:	e037883a 	mov	sp,fp
   8532c:	dfc00117 	ldw	ra,4(sp)
   85330:	df000017 	ldw	fp,0(sp)
   85334:	dec00204 	addi	sp,sp,8
   85338:	f800283a 	ret

0008533c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8533c:	defff404 	addi	sp,sp,-48
   85340:	df000b15 	stw	fp,44(sp)
   85344:	df000b04 	addi	fp,sp,44
   85348:	e13ffb15 	stw	r4,-20(fp)
   8534c:	e17ffc15 	stw	r5,-16(fp)
   85350:	e1bffd15 	stw	r6,-12(fp)
   85354:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   85358:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8535c:	00800274 	movhi	r2,9
   85360:	10a8ae04 	addi	r2,r2,-23880
   85364:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   85368:	1005003a 	cmpeq	r2,r2,zero
   8536c:	1000411e 	bne	r2,zero,85474 <alt_alarm_start+0x138>
  {
    if (alarm)
   85370:	e0bffb17 	ldw	r2,-20(fp)
   85374:	1005003a 	cmpeq	r2,r2,zero
   85378:	10003b1e 	bne	r2,zero,85468 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   8537c:	e0fffb17 	ldw	r3,-20(fp)
   85380:	e0bffd17 	ldw	r2,-12(fp)
   85384:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   85388:	e0fffb17 	ldw	r3,-20(fp)
   8538c:	e0bffe17 	ldw	r2,-8(fp)
   85390:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85394:	0005303a 	rdctl	r2,status
   85398:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8539c:	e0fff817 	ldw	r3,-32(fp)
   853a0:	00bfff84 	movi	r2,-2
   853a4:	1884703a 	and	r2,r3,r2
   853a8:	1001703a 	wrctl	status,r2
  
  return context;
   853ac:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   853b0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   853b4:	00800274 	movhi	r2,9
   853b8:	10a8af04 	addi	r2,r2,-23876
   853bc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   853c0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   853c4:	e0fffc17 	ldw	r3,-16(fp)
   853c8:	e0bff917 	ldw	r2,-28(fp)
   853cc:	1885883a 	add	r2,r3,r2
   853d0:	10c00044 	addi	r3,r2,1
   853d4:	e0bffb17 	ldw	r2,-20(fp)
   853d8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   853dc:	e0bffb17 	ldw	r2,-20(fp)
   853e0:	10c00217 	ldw	r3,8(r2)
   853e4:	e0bff917 	ldw	r2,-28(fp)
   853e8:	1880042e 	bgeu	r3,r2,853fc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   853ec:	e0fffb17 	ldw	r3,-20(fp)
   853f0:	00800044 	movi	r2,1
   853f4:	18800405 	stb	r2,16(r3)
   853f8:	00000206 	br	85404 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   853fc:	e0bffb17 	ldw	r2,-20(fp)
   85400:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   85404:	e0fffb17 	ldw	r3,-20(fp)
   85408:	00800274 	movhi	r2,9
   8540c:	10a1c504 	addi	r2,r2,-30956
   85410:	e0bff615 	stw	r2,-40(fp)
   85414:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   85418:	e0fff717 	ldw	r3,-36(fp)
   8541c:	e0bff617 	ldw	r2,-40(fp)
   85420:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   85424:	e0bff617 	ldw	r2,-40(fp)
   85428:	10c00017 	ldw	r3,0(r2)
   8542c:	e0bff717 	ldw	r2,-36(fp)
   85430:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   85434:	e0bff617 	ldw	r2,-40(fp)
   85438:	10c00017 	ldw	r3,0(r2)
   8543c:	e0bff717 	ldw	r2,-36(fp)
   85440:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   85444:	e0fff617 	ldw	r3,-40(fp)
   85448:	e0bff717 	ldw	r2,-36(fp)
   8544c:	18800015 	stw	r2,0(r3)
   85450:	e0bffa17 	ldw	r2,-24(fp)
   85454:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85458:	e0bff517 	ldw	r2,-44(fp)
   8545c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   85460:	e03fff15 	stw	zero,-4(fp)
   85464:	00000506 	br	8547c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   85468:	00bffa84 	movi	r2,-22
   8546c:	e0bfff15 	stw	r2,-4(fp)
   85470:	00000206 	br	8547c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   85474:	00bfde84 	movi	r2,-134
   85478:	e0bfff15 	stw	r2,-4(fp)
   8547c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   85480:	e037883a 	mov	sp,fp
   85484:	df000017 	ldw	fp,0(sp)
   85488:	dec00104 	addi	sp,sp,4
   8548c:	f800283a 	ret

00085490 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   85490:	deffff04 	addi	sp,sp,-4
   85494:	df000015 	stw	fp,0(sp)
   85498:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8549c:	e037883a 	mov	sp,fp
   854a0:	df000017 	ldw	fp,0(sp)
   854a4:	dec00104 	addi	sp,sp,4
   854a8:	f800283a 	ret

000854ac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   854ac:	defff904 	addi	sp,sp,-28
   854b0:	dfc00615 	stw	ra,24(sp)
   854b4:	df000515 	stw	fp,20(sp)
   854b8:	df000504 	addi	fp,sp,20
   854bc:	e13ffd15 	stw	r4,-12(fp)
   854c0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   854c4:	e0bffd17 	ldw	r2,-12(fp)
   854c8:	1005003a 	cmpeq	r2,r2,zero
   854cc:	1000041e 	bne	r2,zero,854e0 <alt_dev_llist_insert+0x34>
   854d0:	e0bffd17 	ldw	r2,-12(fp)
   854d4:	10800217 	ldw	r2,8(r2)
   854d8:	1004c03a 	cmpne	r2,r2,zero
   854dc:	1000071e 	bne	r2,zero,854fc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   854e0:	00855600 	call	85560 <alt_get_errno>
   854e4:	1007883a 	mov	r3,r2
   854e8:	00800584 	movi	r2,22
   854ec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   854f0:	00bffa84 	movi	r2,-22
   854f4:	e0bfff15 	stw	r2,-4(fp)
   854f8:	00001306 	br	85548 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   854fc:	e0fffd17 	ldw	r3,-12(fp)
   85500:	e0bffe17 	ldw	r2,-8(fp)
   85504:	e0bffb15 	stw	r2,-20(fp)
   85508:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8550c:	e0fffc17 	ldw	r3,-16(fp)
   85510:	e0bffb17 	ldw	r2,-20(fp)
   85514:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   85518:	e0bffb17 	ldw	r2,-20(fp)
   8551c:	10c00017 	ldw	r3,0(r2)
   85520:	e0bffc17 	ldw	r2,-16(fp)
   85524:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   85528:	e0bffb17 	ldw	r2,-20(fp)
   8552c:	10c00017 	ldw	r3,0(r2)
   85530:	e0bffc17 	ldw	r2,-16(fp)
   85534:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   85538:	e0fffb17 	ldw	r3,-20(fp)
   8553c:	e0bffc17 	ldw	r2,-16(fp)
   85540:	18800015 	stw	r2,0(r3)

  return 0;  
   85544:	e03fff15 	stw	zero,-4(fp)
   85548:	e0bfff17 	ldw	r2,-4(fp)
}
   8554c:	e037883a 	mov	sp,fp
   85550:	dfc00117 	ldw	ra,4(sp)
   85554:	df000017 	ldw	fp,0(sp)
   85558:	dec00204 	addi	sp,sp,8
   8555c:	f800283a 	ret

00085560 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85560:	defffd04 	addi	sp,sp,-12
   85564:	dfc00215 	stw	ra,8(sp)
   85568:	df000115 	stw	fp,4(sp)
   8556c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   85570:	00800274 	movhi	r2,9
   85574:	10a1c104 	addi	r2,r2,-30972
   85578:	10800017 	ldw	r2,0(r2)
   8557c:	1005003a 	cmpeq	r2,r2,zero
   85580:	1000061e 	bne	r2,zero,8559c <alt_get_errno+0x3c>
   85584:	00800274 	movhi	r2,9
   85588:	10a1c104 	addi	r2,r2,-30972
   8558c:	10800017 	ldw	r2,0(r2)
   85590:	103ee83a 	callr	r2
   85594:	e0bfff15 	stw	r2,-4(fp)
   85598:	00000306 	br	855a8 <alt_get_errno+0x48>
   8559c:	00800274 	movhi	r2,9
   855a0:	10a8a704 	addi	r2,r2,-23908
   855a4:	e0bfff15 	stw	r2,-4(fp)
   855a8:	e0bfff17 	ldw	r2,-4(fp)
}
   855ac:	e037883a 	mov	sp,fp
   855b0:	dfc00117 	ldw	ra,4(sp)
   855b4:	df000017 	ldw	fp,0(sp)
   855b8:	dec00204 	addi	sp,sp,8
   855bc:	f800283a 	ret

000855c0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   855c0:	defffd04 	addi	sp,sp,-12
   855c4:	dfc00215 	stw	ra,8(sp)
   855c8:	df000115 	stw	fp,4(sp)
   855cc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   855d0:	00bfff04 	movi	r2,-4
   855d4:	00c00234 	movhi	r3,8
   855d8:	18da3404 	addi	r3,r3,26832
   855dc:	1885883a 	add	r2,r3,r2
   855e0:	e0bfff15 	stw	r2,-4(fp)
   855e4:	00000606 	br	85600 <_do_ctors+0x40>
        (*ctor) (); 
   855e8:	e0bfff17 	ldw	r2,-4(fp)
   855ec:	10800017 	ldw	r2,0(r2)
   855f0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   855f4:	e0bfff17 	ldw	r2,-4(fp)
   855f8:	10bfff04 	addi	r2,r2,-4
   855fc:	e0bfff15 	stw	r2,-4(fp)
   85600:	e0ffff17 	ldw	r3,-4(fp)
   85604:	00800234 	movhi	r2,8
   85608:	109a3304 	addi	r2,r2,26828
   8560c:	18bff62e 	bgeu	r3,r2,855e8 <_do_ctors+0x28>
        (*ctor) (); 
}
   85610:	e037883a 	mov	sp,fp
   85614:	dfc00117 	ldw	ra,4(sp)
   85618:	df000017 	ldw	fp,0(sp)
   8561c:	dec00204 	addi	sp,sp,8
   85620:	f800283a 	ret

00085624 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   85624:	defffd04 	addi	sp,sp,-12
   85628:	dfc00215 	stw	ra,8(sp)
   8562c:	df000115 	stw	fp,4(sp)
   85630:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   85634:	00bfff04 	movi	r2,-4
   85638:	00c00234 	movhi	r3,8
   8563c:	18da3404 	addi	r3,r3,26832
   85640:	1885883a 	add	r2,r3,r2
   85644:	e0bfff15 	stw	r2,-4(fp)
   85648:	00000606 	br	85664 <_do_dtors+0x40>
        (*dtor) (); 
   8564c:	e0bfff17 	ldw	r2,-4(fp)
   85650:	10800017 	ldw	r2,0(r2)
   85654:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   85658:	e0bfff17 	ldw	r2,-4(fp)
   8565c:	10bfff04 	addi	r2,r2,-4
   85660:	e0bfff15 	stw	r2,-4(fp)
   85664:	e0ffff17 	ldw	r3,-4(fp)
   85668:	00800234 	movhi	r2,8
   8566c:	109a3404 	addi	r2,r2,26832
   85670:	18bff62e 	bgeu	r3,r2,8564c <_do_dtors+0x28>
        (*dtor) (); 
}
   85674:	e037883a 	mov	sp,fp
   85678:	dfc00117 	ldw	ra,4(sp)
   8567c:	df000017 	ldw	fp,0(sp)
   85680:	dec00204 	addi	sp,sp,8
   85684:	f800283a 	ret

00085688 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   85688:	deffff04 	addi	sp,sp,-4
   8568c:	df000015 	stw	fp,0(sp)
   85690:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   85694:	e037883a 	mov	sp,fp
   85698:	df000017 	ldw	fp,0(sp)
   8569c:	dec00104 	addi	sp,sp,4
   856a0:	f800283a 	ret

000856a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   856a4:	defff904 	addi	sp,sp,-28
   856a8:	dfc00615 	stw	ra,24(sp)
   856ac:	df000515 	stw	fp,20(sp)
   856b0:	df000504 	addi	fp,sp,20
   856b4:	e13ffc15 	stw	r4,-16(fp)
   856b8:	e17ffd15 	stw	r5,-12(fp)
   856bc:	e1bffe15 	stw	r6,-8(fp)
   856c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   856c4:	e0800217 	ldw	r2,8(fp)
   856c8:	d8800015 	stw	r2,0(sp)
   856cc:	e13ffc17 	ldw	r4,-16(fp)
   856d0:	e17ffd17 	ldw	r5,-12(fp)
   856d4:	e1bffe17 	ldw	r6,-8(fp)
   856d8:	e1ffff17 	ldw	r7,-4(fp)
   856dc:	00858780 	call	85878 <alt_iic_isr_register>
}  
   856e0:	e037883a 	mov	sp,fp
   856e4:	dfc00117 	ldw	ra,4(sp)
   856e8:	df000017 	ldw	fp,0(sp)
   856ec:	dec00204 	addi	sp,sp,8
   856f0:	f800283a 	ret

000856f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   856f4:	defff904 	addi	sp,sp,-28
   856f8:	df000615 	stw	fp,24(sp)
   856fc:	df000604 	addi	fp,sp,24
   85700:	e13ffe15 	stw	r4,-8(fp)
   85704:	e17fff15 	stw	r5,-4(fp)
   85708:	e0bfff17 	ldw	r2,-4(fp)
   8570c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85710:	0005303a 	rdctl	r2,status
   85714:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85718:	e0fffb17 	ldw	r3,-20(fp)
   8571c:	00bfff84 	movi	r2,-2
   85720:	1884703a 	and	r2,r3,r2
   85724:	1001703a 	wrctl	status,r2
  
  return context;
   85728:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8572c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   85730:	e0fffc17 	ldw	r3,-16(fp)
   85734:	00800044 	movi	r2,1
   85738:	10c4983a 	sll	r2,r2,r3
   8573c:	1007883a 	mov	r3,r2
   85740:	00800274 	movhi	r2,9
   85744:	10a8ad04 	addi	r2,r2,-23884
   85748:	10800017 	ldw	r2,0(r2)
   8574c:	1886b03a 	or	r3,r3,r2
   85750:	00800274 	movhi	r2,9
   85754:	10a8ad04 	addi	r2,r2,-23884
   85758:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8575c:	00800274 	movhi	r2,9
   85760:	10a8ad04 	addi	r2,r2,-23884
   85764:	10800017 	ldw	r2,0(r2)
   85768:	100170fa 	wrctl	ienable,r2
   8576c:	e0bffd17 	ldw	r2,-12(fp)
   85770:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85774:	e0bffa17 	ldw	r2,-24(fp)
   85778:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8577c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   85780:	e037883a 	mov	sp,fp
   85784:	df000017 	ldw	fp,0(sp)
   85788:	dec00104 	addi	sp,sp,4
   8578c:	f800283a 	ret

00085790 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   85790:	defff904 	addi	sp,sp,-28
   85794:	df000615 	stw	fp,24(sp)
   85798:	df000604 	addi	fp,sp,24
   8579c:	e13ffe15 	stw	r4,-8(fp)
   857a0:	e17fff15 	stw	r5,-4(fp)
   857a4:	e0bfff17 	ldw	r2,-4(fp)
   857a8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   857ac:	0005303a 	rdctl	r2,status
   857b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   857b4:	e0fffb17 	ldw	r3,-20(fp)
   857b8:	00bfff84 	movi	r2,-2
   857bc:	1884703a 	and	r2,r3,r2
   857c0:	1001703a 	wrctl	status,r2
  
  return context;
   857c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   857c8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   857cc:	e0fffc17 	ldw	r3,-16(fp)
   857d0:	00800044 	movi	r2,1
   857d4:	10c4983a 	sll	r2,r2,r3
   857d8:	0084303a 	nor	r2,zero,r2
   857dc:	1007883a 	mov	r3,r2
   857e0:	00800274 	movhi	r2,9
   857e4:	10a8ad04 	addi	r2,r2,-23884
   857e8:	10800017 	ldw	r2,0(r2)
   857ec:	1886703a 	and	r3,r3,r2
   857f0:	00800274 	movhi	r2,9
   857f4:	10a8ad04 	addi	r2,r2,-23884
   857f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   857fc:	00800274 	movhi	r2,9
   85800:	10a8ad04 	addi	r2,r2,-23884
   85804:	10800017 	ldw	r2,0(r2)
   85808:	100170fa 	wrctl	ienable,r2
   8580c:	e0bffd17 	ldw	r2,-12(fp)
   85810:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85814:	e0bffa17 	ldw	r2,-24(fp)
   85818:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8581c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   85820:	e037883a 	mov	sp,fp
   85824:	df000017 	ldw	fp,0(sp)
   85828:	dec00104 	addi	sp,sp,4
   8582c:	f800283a 	ret

00085830 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   85830:	defffc04 	addi	sp,sp,-16
   85834:	df000315 	stw	fp,12(sp)
   85838:	df000304 	addi	fp,sp,12
   8583c:	e13ffe15 	stw	r4,-8(fp)
   85840:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   85844:	000530fa 	rdctl	r2,ienable
   85848:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8584c:	e0ffff17 	ldw	r3,-4(fp)
   85850:	00800044 	movi	r2,1
   85854:	10c4983a 	sll	r2,r2,r3
   85858:	1007883a 	mov	r3,r2
   8585c:	e0bffd17 	ldw	r2,-12(fp)
   85860:	1884703a 	and	r2,r3,r2
   85864:	1004c03a 	cmpne	r2,r2,zero
}
   85868:	e037883a 	mov	sp,fp
   8586c:	df000017 	ldw	fp,0(sp)
   85870:	dec00104 	addi	sp,sp,4
   85874:	f800283a 	ret

00085878 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   85878:	defff404 	addi	sp,sp,-48
   8587c:	dfc00b15 	stw	ra,44(sp)
   85880:	df000a15 	stw	fp,40(sp)
   85884:	df000a04 	addi	fp,sp,40
   85888:	e13ffb15 	stw	r4,-20(fp)
   8588c:	e17ffc15 	stw	r5,-16(fp)
   85890:	e1bffd15 	stw	r6,-12(fp)
   85894:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   85898:	00bffa84 	movi	r2,-22
   8589c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   858a0:	e0bffc17 	ldw	r2,-16(fp)
   858a4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   858a8:	e0bff917 	ldw	r2,-28(fp)
   858ac:	10800808 	cmpgei	r2,r2,32
   858b0:	1000291e 	bne	r2,zero,85958 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   858b4:	0005303a 	rdctl	r2,status
   858b8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   858bc:	e0fff717 	ldw	r3,-36(fp)
   858c0:	00bfff84 	movi	r2,-2
   858c4:	1884703a 	and	r2,r3,r2
   858c8:	1001703a 	wrctl	status,r2
  
  return context;
   858cc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   858d0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   858d4:	e0bff917 	ldw	r2,-28(fp)
   858d8:	00c00274 	movhi	r3,9
   858dc:	18e8ba04 	addi	r3,r3,-23832
   858e0:	100490fa 	slli	r2,r2,3
   858e4:	10c7883a 	add	r3,r2,r3
   858e8:	e0bffd17 	ldw	r2,-12(fp)
   858ec:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   858f0:	e0bff917 	ldw	r2,-28(fp)
   858f4:	00c00274 	movhi	r3,9
   858f8:	18e8ba04 	addi	r3,r3,-23832
   858fc:	100490fa 	slli	r2,r2,3
   85900:	10c5883a 	add	r2,r2,r3
   85904:	10c00104 	addi	r3,r2,4
   85908:	e0bffe17 	ldw	r2,-8(fp)
   8590c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   85910:	e0bffd17 	ldw	r2,-12(fp)
   85914:	1005003a 	cmpeq	r2,r2,zero
   85918:	1000051e 	bne	r2,zero,85930 <alt_iic_isr_register+0xb8>
   8591c:	e17ff917 	ldw	r5,-28(fp)
   85920:	e13ffb17 	ldw	r4,-20(fp)
   85924:	00856f40 	call	856f4 <alt_ic_irq_enable>
   85928:	e0bfff15 	stw	r2,-4(fp)
   8592c:	00000406 	br	85940 <alt_iic_isr_register+0xc8>
   85930:	e17ff917 	ldw	r5,-28(fp)
   85934:	e13ffb17 	ldw	r4,-20(fp)
   85938:	00857900 	call	85790 <alt_ic_irq_disable>
   8593c:	e0bfff15 	stw	r2,-4(fp)
   85940:	e0bfff17 	ldw	r2,-4(fp)
   85944:	e0bffa15 	stw	r2,-24(fp)
   85948:	e0bff817 	ldw	r2,-32(fp)
   8594c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85950:	e0bff617 	ldw	r2,-40(fp)
   85954:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   85958:	e0bffa17 	ldw	r2,-24(fp)
}
   8595c:	e037883a 	mov	sp,fp
   85960:	dfc00117 	ldw	ra,4(sp)
   85964:	df000017 	ldw	fp,0(sp)
   85968:	dec00204 	addi	sp,sp,8
   8596c:	f800283a 	ret

00085970 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   85970:	defff804 	addi	sp,sp,-32
   85974:	dfc00715 	stw	ra,28(sp)
   85978:	df000615 	stw	fp,24(sp)
   8597c:	dc000515 	stw	r16,20(sp)
   85980:	df000504 	addi	fp,sp,20
   85984:	e13ffc15 	stw	r4,-16(fp)
   85988:	e17ffd15 	stw	r5,-12(fp)
   8598c:	e1bffe15 	stw	r6,-8(fp)
   85990:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   85994:	e13ffd17 	ldw	r4,-12(fp)
   85998:	e17ffe17 	ldw	r5,-8(fp)
   8599c:	e1bfff17 	ldw	r6,-4(fp)
   859a0:	0085bb80 	call	85bb8 <open>
   859a4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   859a8:	e0bffb17 	ldw	r2,-20(fp)
   859ac:	1004803a 	cmplt	r2,r2,zero
   859b0:	10001f1e 	bne	r2,zero,85a30 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   859b4:	e13ffb17 	ldw	r4,-20(fp)
   859b8:	04000234 	movhi	r16,8
   859bc:	841cf804 	addi	r16,r16,29664
   859c0:	01400304 	movi	r5,12
   859c4:	0082b680 	call	82b68 <__mulsi3>
   859c8:	1405883a 	add	r2,r2,r16
   859cc:	10c00017 	ldw	r3,0(r2)
   859d0:	e0bffc17 	ldw	r2,-16(fp)
   859d4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   859d8:	e13ffb17 	ldw	r4,-20(fp)
   859dc:	04000234 	movhi	r16,8
   859e0:	841cf804 	addi	r16,r16,29664
   859e4:	01400304 	movi	r5,12
   859e8:	0082b680 	call	82b68 <__mulsi3>
   859ec:	1405883a 	add	r2,r2,r16
   859f0:	10800104 	addi	r2,r2,4
   859f4:	10c00017 	ldw	r3,0(r2)
   859f8:	e0bffc17 	ldw	r2,-16(fp)
   859fc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   85a00:	e13ffb17 	ldw	r4,-20(fp)
   85a04:	04000234 	movhi	r16,8
   85a08:	841cf804 	addi	r16,r16,29664
   85a0c:	01400304 	movi	r5,12
   85a10:	0082b680 	call	82b68 <__mulsi3>
   85a14:	1405883a 	add	r2,r2,r16
   85a18:	10800204 	addi	r2,r2,8
   85a1c:	10c00017 	ldw	r3,0(r2)
   85a20:	e0bffc17 	ldw	r2,-16(fp)
   85a24:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   85a28:	e13ffb17 	ldw	r4,-20(fp)
   85a2c:	00833f80 	call	833f8 <alt_release_fd>
  }
} 
   85a30:	e037883a 	mov	sp,fp
   85a34:	dfc00217 	ldw	ra,8(sp)
   85a38:	df000117 	ldw	fp,4(sp)
   85a3c:	dc000017 	ldw	r16,0(sp)
   85a40:	dec00304 	addi	sp,sp,12
   85a44:	f800283a 	ret

00085a48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   85a48:	defffb04 	addi	sp,sp,-20
   85a4c:	dfc00415 	stw	ra,16(sp)
   85a50:	df000315 	stw	fp,12(sp)
   85a54:	df000304 	addi	fp,sp,12
   85a58:	e13ffd15 	stw	r4,-12(fp)
   85a5c:	e17ffe15 	stw	r5,-8(fp)
   85a60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   85a64:	01000234 	movhi	r4,8
   85a68:	211cfb04 	addi	r4,r4,29676
   85a6c:	e17ffd17 	ldw	r5,-12(fp)
   85a70:	01800044 	movi	r6,1
   85a74:	01c07fc4 	movi	r7,511
   85a78:	00859700 	call	85970 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   85a7c:	01000234 	movhi	r4,8
   85a80:	211cf804 	addi	r4,r4,29664
   85a84:	e17ffe17 	ldw	r5,-8(fp)
   85a88:	000d883a 	mov	r6,zero
   85a8c:	01c07fc4 	movi	r7,511
   85a90:	00859700 	call	85970 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   85a94:	01000234 	movhi	r4,8
   85a98:	211cfe04 	addi	r4,r4,29688
   85a9c:	e17fff17 	ldw	r5,-4(fp)
   85aa0:	01800044 	movi	r6,1
   85aa4:	01c07fc4 	movi	r7,511
   85aa8:	00859700 	call	85970 <alt_open_fd>
}  
   85aac:	e037883a 	mov	sp,fp
   85ab0:	dfc00117 	ldw	ra,4(sp)
   85ab4:	df000017 	ldw	fp,0(sp)
   85ab8:	dec00204 	addi	sp,sp,8
   85abc:	f800283a 	ret

00085ac0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   85ac0:	defffa04 	addi	sp,sp,-24
   85ac4:	dfc00515 	stw	ra,20(sp)
   85ac8:	df000415 	stw	fp,16(sp)
   85acc:	dc000315 	stw	r16,12(sp)
   85ad0:	df000304 	addi	fp,sp,12
   85ad4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   85ad8:	e0bffe17 	ldw	r2,-8(fp)
   85adc:	10800217 	ldw	r2,8(r2)
   85ae0:	10d00034 	orhi	r3,r2,16384
   85ae4:	e0bffe17 	ldw	r2,-8(fp)
   85ae8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   85aec:	e03ffd15 	stw	zero,-12(fp)
   85af0:	00002306 	br	85b80 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   85af4:	e13ffd17 	ldw	r4,-12(fp)
   85af8:	04000234 	movhi	r16,8
   85afc:	841cf804 	addi	r16,r16,29664
   85b00:	01400304 	movi	r5,12
   85b04:	0082b680 	call	82b68 <__mulsi3>
   85b08:	1405883a 	add	r2,r2,r16
   85b0c:	10c00017 	ldw	r3,0(r2)
   85b10:	e0bffe17 	ldw	r2,-8(fp)
   85b14:	10800017 	ldw	r2,0(r2)
   85b18:	1880161e 	bne	r3,r2,85b74 <alt_file_locked+0xb4>
   85b1c:	e13ffd17 	ldw	r4,-12(fp)
   85b20:	04000234 	movhi	r16,8
   85b24:	841cf804 	addi	r16,r16,29664
   85b28:	01400304 	movi	r5,12
   85b2c:	0082b680 	call	82b68 <__mulsi3>
   85b30:	1405883a 	add	r2,r2,r16
   85b34:	10800204 	addi	r2,r2,8
   85b38:	10800017 	ldw	r2,0(r2)
   85b3c:	1004403a 	cmpge	r2,r2,zero
   85b40:	10000c1e 	bne	r2,zero,85b74 <alt_file_locked+0xb4>
   85b44:	e13ffd17 	ldw	r4,-12(fp)
   85b48:	01400304 	movi	r5,12
   85b4c:	0082b680 	call	82b68 <__mulsi3>
   85b50:	1007883a 	mov	r3,r2
   85b54:	00800234 	movhi	r2,8
   85b58:	109cf804 	addi	r2,r2,29664
   85b5c:	1887883a 	add	r3,r3,r2
   85b60:	e0bffe17 	ldw	r2,-8(fp)
   85b64:	18800326 	beq	r3,r2,85b74 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   85b68:	00bffcc4 	movi	r2,-13
   85b6c:	e0bfff15 	stw	r2,-4(fp)
   85b70:	00000a06 	br	85b9c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   85b74:	e0bffd17 	ldw	r2,-12(fp)
   85b78:	10800044 	addi	r2,r2,1
   85b7c:	e0bffd15 	stw	r2,-12(fp)
   85b80:	00800274 	movhi	r2,9
   85b84:	10a1c004 	addi	r2,r2,-30976
   85b88:	10800017 	ldw	r2,0(r2)
   85b8c:	1007883a 	mov	r3,r2
   85b90:	e0bffd17 	ldw	r2,-12(fp)
   85b94:	18bfd72e 	bgeu	r3,r2,85af4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   85b98:	e03fff15 	stw	zero,-4(fp)
   85b9c:	e0bfff17 	ldw	r2,-4(fp)
}
   85ba0:	e037883a 	mov	sp,fp
   85ba4:	dfc00217 	ldw	ra,8(sp)
   85ba8:	df000117 	ldw	fp,4(sp)
   85bac:	dc000017 	ldw	r16,0(sp)
   85bb0:	dec00304 	addi	sp,sp,12
   85bb4:	f800283a 	ret

00085bb8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   85bb8:	defff404 	addi	sp,sp,-48
   85bbc:	dfc00b15 	stw	ra,44(sp)
   85bc0:	df000a15 	stw	fp,40(sp)
   85bc4:	df000a04 	addi	fp,sp,40
   85bc8:	e13ffb15 	stw	r4,-20(fp)
   85bcc:	e17ffc15 	stw	r5,-16(fp)
   85bd0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   85bd4:	00bfffc4 	movi	r2,-1
   85bd8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   85bdc:	00bffb44 	movi	r2,-19
   85be0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   85be4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   85be8:	e13ffb17 	ldw	r4,-20(fp)
   85bec:	01400274 	movhi	r5,9
   85bf0:	2961be04 	addi	r5,r5,-30984
   85bf4:	00860f40 	call	860f4 <alt_find_dev>
   85bf8:	e0bffa15 	stw	r2,-24(fp)
   85bfc:	e0bffa17 	ldw	r2,-24(fp)
   85c00:	1004c03a 	cmpne	r2,r2,zero
   85c04:	1000051e 	bne	r2,zero,85c1c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   85c08:	e13ffb17 	ldw	r4,-20(fp)
   85c0c:	00861880 	call	86188 <alt_find_file>
   85c10:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   85c14:	00800044 	movi	r2,1
   85c18:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   85c1c:	e0bffa17 	ldw	r2,-24(fp)
   85c20:	1005003a 	cmpeq	r2,r2,zero
   85c24:	1000311e 	bne	r2,zero,85cec <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   85c28:	e13ffa17 	ldw	r4,-24(fp)
   85c2c:	00862a80 	call	862a8 <alt_get_fd>
   85c30:	e0bff815 	stw	r2,-32(fp)
   85c34:	e0bff817 	ldw	r2,-32(fp)
   85c38:	1004403a 	cmpge	r2,r2,zero
   85c3c:	1000031e 	bne	r2,zero,85c4c <open+0x94>
    {
      status = index;
   85c40:	e0bff817 	ldw	r2,-32(fp)
   85c44:	e0bff715 	stw	r2,-36(fp)
   85c48:	00002a06 	br	85cf4 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   85c4c:	e13ff817 	ldw	r4,-32(fp)
   85c50:	01400304 	movi	r5,12
   85c54:	0082b680 	call	82b68 <__mulsi3>
   85c58:	1007883a 	mov	r3,r2
   85c5c:	00800234 	movhi	r2,8
   85c60:	109cf804 	addi	r2,r2,29664
   85c64:	1885883a 	add	r2,r3,r2
   85c68:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   85c6c:	e0fffc17 	ldw	r3,-16(fp)
   85c70:	00900034 	movhi	r2,16384
   85c74:	10bfffc4 	addi	r2,r2,-1
   85c78:	1886703a 	and	r3,r3,r2
   85c7c:	e0bff917 	ldw	r2,-28(fp)
   85c80:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   85c84:	e0bff617 	ldw	r2,-40(fp)
   85c88:	1004c03a 	cmpne	r2,r2,zero
   85c8c:	1000061e 	bne	r2,zero,85ca8 <open+0xf0>
   85c90:	e13ff917 	ldw	r4,-28(fp)
   85c94:	0085ac00 	call	85ac0 <alt_file_locked>
   85c98:	e0bff715 	stw	r2,-36(fp)
   85c9c:	e0bff717 	ldw	r2,-36(fp)
   85ca0:	1004803a 	cmplt	r2,r2,zero
   85ca4:	1000131e 	bne	r2,zero,85cf4 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   85ca8:	e0bffa17 	ldw	r2,-24(fp)
   85cac:	10800317 	ldw	r2,12(r2)
   85cb0:	1005003a 	cmpeq	r2,r2,zero
   85cb4:	1000091e 	bne	r2,zero,85cdc <open+0x124>
   85cb8:	e0bffa17 	ldw	r2,-24(fp)
   85cbc:	10800317 	ldw	r2,12(r2)
   85cc0:	e13ff917 	ldw	r4,-28(fp)
   85cc4:	e17ffb17 	ldw	r5,-20(fp)
   85cc8:	e1bffc17 	ldw	r6,-16(fp)
   85ccc:	e1fffd17 	ldw	r7,-12(fp)
   85cd0:	103ee83a 	callr	r2
   85cd4:	e0bfff15 	stw	r2,-4(fp)
   85cd8:	00000106 	br	85ce0 <open+0x128>
   85cdc:	e03fff15 	stw	zero,-4(fp)
   85ce0:	e0bfff17 	ldw	r2,-4(fp)
   85ce4:	e0bff715 	stw	r2,-36(fp)
   85ce8:	00000206 	br	85cf4 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   85cec:	00bffb44 	movi	r2,-19
   85cf0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   85cf4:	e0bff717 	ldw	r2,-36(fp)
   85cf8:	1004403a 	cmpge	r2,r2,zero
   85cfc:	1000091e 	bne	r2,zero,85d24 <open+0x16c>
  {
    alt_release_fd (index);  
   85d00:	e13ff817 	ldw	r4,-32(fp)
   85d04:	00833f80 	call	833f8 <alt_release_fd>
    ALT_ERRNO = -status;
   85d08:	0085d440 	call	85d44 <alt_get_errno>
   85d0c:	e0fff717 	ldw	r3,-36(fp)
   85d10:	00c7c83a 	sub	r3,zero,r3
   85d14:	10c00015 	stw	r3,0(r2)
    return -1;
   85d18:	00bfffc4 	movi	r2,-1
   85d1c:	e0bffe15 	stw	r2,-8(fp)
   85d20:	00000206 	br	85d2c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   85d24:	e0bff817 	ldw	r2,-32(fp)
   85d28:	e0bffe15 	stw	r2,-8(fp)
   85d2c:	e0bffe17 	ldw	r2,-8(fp)
}
   85d30:	e037883a 	mov	sp,fp
   85d34:	dfc00117 	ldw	ra,4(sp)
   85d38:	df000017 	ldw	fp,0(sp)
   85d3c:	dec00204 	addi	sp,sp,8
   85d40:	f800283a 	ret

00085d44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85d44:	defffd04 	addi	sp,sp,-12
   85d48:	dfc00215 	stw	ra,8(sp)
   85d4c:	df000115 	stw	fp,4(sp)
   85d50:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   85d54:	00800274 	movhi	r2,9
   85d58:	10a1c104 	addi	r2,r2,-30972
   85d5c:	10800017 	ldw	r2,0(r2)
   85d60:	1005003a 	cmpeq	r2,r2,zero
   85d64:	1000061e 	bne	r2,zero,85d80 <alt_get_errno+0x3c>
   85d68:	00800274 	movhi	r2,9
   85d6c:	10a1c104 	addi	r2,r2,-30972
   85d70:	10800017 	ldw	r2,0(r2)
   85d74:	103ee83a 	callr	r2
   85d78:	e0bfff15 	stw	r2,-4(fp)
   85d7c:	00000306 	br	85d8c <alt_get_errno+0x48>
   85d80:	00800274 	movhi	r2,9
   85d84:	10a8a704 	addi	r2,r2,-23908
   85d88:	e0bfff15 	stw	r2,-4(fp)
   85d8c:	e0bfff17 	ldw	r2,-4(fp)
}
   85d90:	e037883a 	mov	sp,fp
   85d94:	dfc00117 	ldw	ra,4(sp)
   85d98:	df000017 	ldw	fp,0(sp)
   85d9c:	dec00204 	addi	sp,sp,8
   85da0:	f800283a 	ret

00085da4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   85da4:	defffa04 	addi	sp,sp,-24
   85da8:	df000515 	stw	fp,20(sp)
   85dac:	df000504 	addi	fp,sp,20
   85db0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85db4:	0005303a 	rdctl	r2,status
   85db8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85dbc:	e0fffd17 	ldw	r3,-12(fp)
   85dc0:	00bfff84 	movi	r2,-2
   85dc4:	1884703a 	and	r2,r3,r2
   85dc8:	1001703a 	wrctl	status,r2
  
  return context;
   85dcc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   85dd0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   85dd4:	e0bfff17 	ldw	r2,-4(fp)
   85dd8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   85ddc:	e0bffc17 	ldw	r2,-16(fp)
   85de0:	10c00017 	ldw	r3,0(r2)
   85de4:	e0bffc17 	ldw	r2,-16(fp)
   85de8:	10800117 	ldw	r2,4(r2)
   85dec:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   85df0:	e0bffc17 	ldw	r2,-16(fp)
   85df4:	10c00117 	ldw	r3,4(r2)
   85df8:	e0bffc17 	ldw	r2,-16(fp)
   85dfc:	10800017 	ldw	r2,0(r2)
   85e00:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   85e04:	e0fffc17 	ldw	r3,-16(fp)
   85e08:	e0bffc17 	ldw	r2,-16(fp)
   85e0c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   85e10:	e0fffc17 	ldw	r3,-16(fp)
   85e14:	e0bffc17 	ldw	r2,-16(fp)
   85e18:	18800015 	stw	r2,0(r3)
   85e1c:	e0bffe17 	ldw	r2,-8(fp)
   85e20:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85e24:	e0bffb17 	ldw	r2,-20(fp)
   85e28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   85e2c:	e037883a 	mov	sp,fp
   85e30:	df000017 	ldw	fp,0(sp)
   85e34:	dec00104 	addi	sp,sp,4
   85e38:	f800283a 	ret

00085e3c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   85e3c:	defffb04 	addi	sp,sp,-20
   85e40:	dfc00415 	stw	ra,16(sp)
   85e44:	df000315 	stw	fp,12(sp)
   85e48:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   85e4c:	d0a00d17 	ldw	r2,-32716(gp)
   85e50:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   85e54:	d0a6f717 	ldw	r2,-25636(gp)
   85e58:	10800044 	addi	r2,r2,1
   85e5c:	d0a6f715 	stw	r2,-25636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   85e60:	00003106 	br	85f28 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   85e64:	e0bffe17 	ldw	r2,-8(fp)
   85e68:	10800017 	ldw	r2,0(r2)
   85e6c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   85e70:	e0bffe17 	ldw	r2,-8(fp)
   85e74:	10800403 	ldbu	r2,16(r2)
   85e78:	10803fcc 	andi	r2,r2,255
   85e7c:	1005003a 	cmpeq	r2,r2,zero
   85e80:	1000051e 	bne	r2,zero,85e98 <alt_tick+0x5c>
   85e84:	d0a6f717 	ldw	r2,-25636(gp)
   85e88:	1004c03a 	cmpne	r2,r2,zero
   85e8c:	1000021e 	bne	r2,zero,85e98 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   85e90:	e0bffe17 	ldw	r2,-8(fp)
   85e94:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   85e98:	e0bffe17 	ldw	r2,-8(fp)
   85e9c:	10c00217 	ldw	r3,8(r2)
   85ea0:	d0a6f717 	ldw	r2,-25636(gp)
   85ea4:	10c01e36 	bltu	r2,r3,85f20 <alt_tick+0xe4>
   85ea8:	e0bffe17 	ldw	r2,-8(fp)
   85eac:	10800403 	ldbu	r2,16(r2)
   85eb0:	10803fcc 	andi	r2,r2,255
   85eb4:	1004c03a 	cmpne	r2,r2,zero
   85eb8:	1000191e 	bne	r2,zero,85f20 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   85ebc:	e0bffe17 	ldw	r2,-8(fp)
   85ec0:	10c00317 	ldw	r3,12(r2)
   85ec4:	e0bffe17 	ldw	r2,-8(fp)
   85ec8:	11000517 	ldw	r4,20(r2)
   85ecc:	183ee83a 	callr	r3
   85ed0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   85ed4:	e0bffd17 	ldw	r2,-12(fp)
   85ed8:	1004c03a 	cmpne	r2,r2,zero
   85edc:	1000031e 	bne	r2,zero,85eec <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   85ee0:	e13ffe17 	ldw	r4,-8(fp)
   85ee4:	0085da40 	call	85da4 <alt_alarm_stop>
   85ee8:	00000d06 	br	85f20 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   85eec:	e0bffe17 	ldw	r2,-8(fp)
   85ef0:	10c00217 	ldw	r3,8(r2)
   85ef4:	e0bffd17 	ldw	r2,-12(fp)
   85ef8:	1887883a 	add	r3,r3,r2
   85efc:	e0bffe17 	ldw	r2,-8(fp)
   85f00:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   85f04:	e0bffe17 	ldw	r2,-8(fp)
   85f08:	10c00217 	ldw	r3,8(r2)
   85f0c:	d0a6f717 	ldw	r2,-25636(gp)
   85f10:	1880032e 	bgeu	r3,r2,85f20 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   85f14:	e0fffe17 	ldw	r3,-8(fp)
   85f18:	00800044 	movi	r2,1
   85f1c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   85f20:	e0bfff17 	ldw	r2,-4(fp)
   85f24:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   85f28:	d0e00d04 	addi	r3,gp,-32716
   85f2c:	e0bffe17 	ldw	r2,-8(fp)
   85f30:	10ffcc1e 	bne	r2,r3,85e64 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   85f34:	e037883a 	mov	sp,fp
   85f38:	dfc00117 	ldw	ra,4(sp)
   85f3c:	df000017 	ldw	fp,0(sp)
   85f40:	dec00204 	addi	sp,sp,8
   85f44:	f800283a 	ret

00085f48 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   85f48:	defffd04 	addi	sp,sp,-12
   85f4c:	dfc00215 	stw	ra,8(sp)
   85f50:	df000115 	stw	fp,4(sp)
   85f54:	df000104 	addi	fp,sp,4
   85f58:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   85f5c:	e13fff17 	ldw	r4,-4(fp)
   85f60:	0085f980 	call	85f98 <alt_busy_sleep>
}
   85f64:	e037883a 	mov	sp,fp
   85f68:	dfc00117 	ldw	ra,4(sp)
   85f6c:	df000017 	ldw	fp,0(sp)
   85f70:	dec00204 	addi	sp,sp,8
   85f74:	f800283a 	ret

00085f78 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
   85f78:	deffff04 	addi	sp,sp,-4
   85f7c:	df000015 	stw	fp,0(sp)
   85f80:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   85f84:	000170fa 	wrctl	ienable,zero
}
   85f88:	e037883a 	mov	sp,fp
   85f8c:	df000017 	ldw	fp,0(sp)
   85f90:	dec00104 	addi	sp,sp,4
   85f94:	f800283a 	ret

00085f98 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   85f98:	defffa04 	addi	sp,sp,-24
   85f9c:	dfc00515 	stw	ra,20(sp)
   85fa0:	df000415 	stw	fp,16(sp)
   85fa4:	df000404 	addi	fp,sp,16
   85fa8:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   85fac:	00800244 	movi	r2,9
   85fb0:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   85fb4:	e13ffc17 	ldw	r4,-16(fp)
   85fb8:	014003f4 	movhi	r5,15
   85fbc:	29509004 	addi	r5,r5,16960
   85fc0:	0082b680 	call	82b68 <__mulsi3>
   85fc4:	100b883a 	mov	r5,r2
   85fc8:	0100bef4 	movhi	r4,763
   85fcc:	213c2004 	addi	r4,r4,-3968
   85fd0:	008685c0 	call	8685c <__udivsi3>
   85fd4:	100b883a 	mov	r5,r2
   85fd8:	01200034 	movhi	r4,32768
   85fdc:	213fffc4 	addi	r4,r4,-1
   85fe0:	008685c0 	call	8685c <__udivsi3>
   85fe4:	100b883a 	mov	r5,r2
   85fe8:	e13fff17 	ldw	r4,-4(fp)
   85fec:	008685c0 	call	8685c <__udivsi3>
   85ff0:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   85ff4:	e0bffd17 	ldw	r2,-12(fp)
   85ff8:	1005003a 	cmpeq	r2,r2,zero
   85ffc:	10002a1e 	bne	r2,zero,860a8 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
   86000:	e03ffe15 	stw	zero,-8(fp)
   86004:	00001706 	br	86064 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   86008:	00a00034 	movhi	r2,32768
   8600c:	10bfffc4 	addi	r2,r2,-1
   86010:	10bfffc4 	addi	r2,r2,-1
   86014:	103ffe1e 	bne	r2,zero,86010 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   86018:	e13ffc17 	ldw	r4,-16(fp)
   8601c:	014003f4 	movhi	r5,15
   86020:	29509004 	addi	r5,r5,16960
   86024:	0082b680 	call	82b68 <__mulsi3>
   86028:	100b883a 	mov	r5,r2
   8602c:	0100bef4 	movhi	r4,763
   86030:	213c2004 	addi	r4,r4,-3968
   86034:	008685c0 	call	8685c <__udivsi3>
   86038:	100b883a 	mov	r5,r2
   8603c:	01200034 	movhi	r4,32768
   86040:	213fffc4 	addi	r4,r4,-1
   86044:	008685c0 	call	8685c <__udivsi3>
   86048:	1007883a 	mov	r3,r2
   8604c:	e0bfff17 	ldw	r2,-4(fp)
   86050:	10c5c83a 	sub	r2,r2,r3
   86054:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   86058:	e0bffe17 	ldw	r2,-8(fp)
   8605c:	10800044 	addi	r2,r2,1
   86060:	e0bffe15 	stw	r2,-8(fp)
   86064:	e0fffe17 	ldw	r3,-8(fp)
   86068:	e0bffd17 	ldw	r2,-12(fp)
   8606c:	18bfe616 	blt	r3,r2,86008 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   86070:	e13ffc17 	ldw	r4,-16(fp)
   86074:	014003f4 	movhi	r5,15
   86078:	29509004 	addi	r5,r5,16960
   8607c:	0082b680 	call	82b68 <__mulsi3>
   86080:	100b883a 	mov	r5,r2
   86084:	0100bef4 	movhi	r4,763
   86088:	213c2004 	addi	r4,r4,-3968
   8608c:	008685c0 	call	8685c <__udivsi3>
   86090:	1009883a 	mov	r4,r2
   86094:	e17fff17 	ldw	r5,-4(fp)
   86098:	0082b680 	call	82b68 <__mulsi3>
   8609c:	10bfffc4 	addi	r2,r2,-1
   860a0:	103ffe1e 	bne	r2,zero,8609c <alt_busy_sleep+0x104>
   860a4:	00000d06 	br	860dc <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   860a8:	e13ffc17 	ldw	r4,-16(fp)
   860ac:	014003f4 	movhi	r5,15
   860b0:	29509004 	addi	r5,r5,16960
   860b4:	0082b680 	call	82b68 <__mulsi3>
   860b8:	100b883a 	mov	r5,r2
   860bc:	0100bef4 	movhi	r4,763
   860c0:	213c2004 	addi	r4,r4,-3968
   860c4:	008685c0 	call	8685c <__udivsi3>
   860c8:	1009883a 	mov	r4,r2
   860cc:	e17fff17 	ldw	r5,-4(fp)
   860d0:	0082b680 	call	82b68 <__mulsi3>
   860d4:	10bfffc4 	addi	r2,r2,-1
   860d8:	00bffe16 	blt	zero,r2,860d4 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   860dc:	0005883a 	mov	r2,zero
}
   860e0:	e037883a 	mov	sp,fp
   860e4:	dfc00117 	ldw	ra,4(sp)
   860e8:	df000017 	ldw	fp,0(sp)
   860ec:	dec00204 	addi	sp,sp,8
   860f0:	f800283a 	ret

000860f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   860f4:	defff904 	addi	sp,sp,-28
   860f8:	dfc00615 	stw	ra,24(sp)
   860fc:	df000515 	stw	fp,20(sp)
   86100:	df000504 	addi	fp,sp,20
   86104:	e13ffd15 	stw	r4,-12(fp)
   86108:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8610c:	e0bffe17 	ldw	r2,-8(fp)
   86110:	10800017 	ldw	r2,0(r2)
   86114:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   86118:	e13ffd17 	ldw	r4,-12(fp)
   8611c:	00802d80 	call	802d8 <strlen>
   86120:	10800044 	addi	r2,r2,1
   86124:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   86128:	00000d06 	br	86160 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8612c:	e0bffc17 	ldw	r2,-16(fp)
   86130:	11000217 	ldw	r4,8(r2)
   86134:	e1bffb17 	ldw	r6,-20(fp)
   86138:	e17ffd17 	ldw	r5,-12(fp)
   8613c:	00863c40 	call	863c4 <memcmp>
   86140:	1004c03a 	cmpne	r2,r2,zero
   86144:	1000031e 	bne	r2,zero,86154 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   86148:	e0bffc17 	ldw	r2,-16(fp)
   8614c:	e0bfff15 	stw	r2,-4(fp)
   86150:	00000706 	br	86170 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   86154:	e0bffc17 	ldw	r2,-16(fp)
   86158:	10800017 	ldw	r2,0(r2)
   8615c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   86160:	e0fffe17 	ldw	r3,-8(fp)
   86164:	e0bffc17 	ldw	r2,-16(fp)
   86168:	10fff01e 	bne	r2,r3,8612c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8616c:	e03fff15 	stw	zero,-4(fp)
   86170:	e0bfff17 	ldw	r2,-4(fp)
}
   86174:	e037883a 	mov	sp,fp
   86178:	dfc00117 	ldw	ra,4(sp)
   8617c:	df000017 	ldw	fp,0(sp)
   86180:	dec00204 	addi	sp,sp,8
   86184:	f800283a 	ret

00086188 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   86188:	defffa04 	addi	sp,sp,-24
   8618c:	dfc00515 	stw	ra,20(sp)
   86190:	df000415 	stw	fp,16(sp)
   86194:	df000404 	addi	fp,sp,16
   86198:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8619c:	00800274 	movhi	r2,9
   861a0:	10a1bc04 	addi	r2,r2,-30992
   861a4:	10800017 	ldw	r2,0(r2)
   861a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   861ac:	00003306 	br	8627c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   861b0:	e0bffd17 	ldw	r2,-12(fp)
   861b4:	11000217 	ldw	r4,8(r2)
   861b8:	00802d80 	call	802d8 <strlen>
   861bc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   861c0:	e0bffd17 	ldw	r2,-12(fp)
   861c4:	10c00217 	ldw	r3,8(r2)
   861c8:	e0bffc17 	ldw	r2,-16(fp)
   861cc:	1885883a 	add	r2,r3,r2
   861d0:	10bfffc4 	addi	r2,r2,-1
   861d4:	10800003 	ldbu	r2,0(r2)
   861d8:	10803fcc 	andi	r2,r2,255
   861dc:	1080201c 	xori	r2,r2,128
   861e0:	10bfe004 	addi	r2,r2,-128
   861e4:	10800bd8 	cmpnei	r2,r2,47
   861e8:	1000031e 	bne	r2,zero,861f8 <alt_find_file+0x70>
    {
      len -= 1;
   861ec:	e0bffc17 	ldw	r2,-16(fp)
   861f0:	10bfffc4 	addi	r2,r2,-1
   861f4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   861f8:	e0bffc17 	ldw	r2,-16(fp)
   861fc:	1007883a 	mov	r3,r2
   86200:	e0bffe17 	ldw	r2,-8(fp)
   86204:	1885883a 	add	r2,r3,r2
   86208:	10800003 	ldbu	r2,0(r2)
   8620c:	10803fcc 	andi	r2,r2,255
   86210:	1080201c 	xori	r2,r2,128
   86214:	10bfe004 	addi	r2,r2,-128
   86218:	10800be0 	cmpeqi	r2,r2,47
   8621c:	10000a1e 	bne	r2,zero,86248 <alt_find_file+0xc0>
   86220:	e0bffc17 	ldw	r2,-16(fp)
   86224:	1007883a 	mov	r3,r2
   86228:	e0bffe17 	ldw	r2,-8(fp)
   8622c:	1885883a 	add	r2,r3,r2
   86230:	10800003 	ldbu	r2,0(r2)
   86234:	10803fcc 	andi	r2,r2,255
   86238:	1080201c 	xori	r2,r2,128
   8623c:	10bfe004 	addi	r2,r2,-128
   86240:	1004c03a 	cmpne	r2,r2,zero
   86244:	10000a1e 	bne	r2,zero,86270 <alt_find_file+0xe8>
   86248:	e0bffd17 	ldw	r2,-12(fp)
   8624c:	11000217 	ldw	r4,8(r2)
   86250:	e1bffc17 	ldw	r6,-16(fp)
   86254:	e17ffe17 	ldw	r5,-8(fp)
   86258:	00863c40 	call	863c4 <memcmp>
   8625c:	1004c03a 	cmpne	r2,r2,zero
   86260:	1000031e 	bne	r2,zero,86270 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   86264:	e0bffd17 	ldw	r2,-12(fp)
   86268:	e0bfff15 	stw	r2,-4(fp)
   8626c:	00000806 	br	86290 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   86270:	e0bffd17 	ldw	r2,-12(fp)
   86274:	10800017 	ldw	r2,0(r2)
   86278:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8627c:	00c00274 	movhi	r3,9
   86280:	18e1bc04 	addi	r3,r3,-30992
   86284:	e0bffd17 	ldw	r2,-12(fp)
   86288:	10ffc91e 	bne	r2,r3,861b0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8628c:	e03fff15 	stw	zero,-4(fp)
   86290:	e0bfff17 	ldw	r2,-4(fp)
}
   86294:	e037883a 	mov	sp,fp
   86298:	dfc00117 	ldw	ra,4(sp)
   8629c:	df000017 	ldw	fp,0(sp)
   862a0:	dec00204 	addi	sp,sp,8
   862a4:	f800283a 	ret

000862a8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   862a8:	defffa04 	addi	sp,sp,-24
   862ac:	dfc00515 	stw	ra,20(sp)
   862b0:	df000415 	stw	fp,16(sp)
   862b4:	dc000315 	stw	r16,12(sp)
   862b8:	df000304 	addi	fp,sp,12
   862bc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   862c0:	00bffa04 	movi	r2,-24
   862c4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   862c8:	e03ffe15 	stw	zero,-8(fp)
   862cc:	00002006 	br	86350 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   862d0:	e13ffe17 	ldw	r4,-8(fp)
   862d4:	04000234 	movhi	r16,8
   862d8:	841cf804 	addi	r16,r16,29664
   862dc:	01400304 	movi	r5,12
   862e0:	0082b680 	call	82b68 <__mulsi3>
   862e4:	1405883a 	add	r2,r2,r16
   862e8:	10800017 	ldw	r2,0(r2)
   862ec:	1004c03a 	cmpne	r2,r2,zero
   862f0:	1000141e 	bne	r2,zero,86344 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   862f4:	e13ffe17 	ldw	r4,-8(fp)
   862f8:	04000234 	movhi	r16,8
   862fc:	841cf804 	addi	r16,r16,29664
   86300:	01400304 	movi	r5,12
   86304:	0082b680 	call	82b68 <__mulsi3>
   86308:	1407883a 	add	r3,r2,r16
   8630c:	e0bfff17 	ldw	r2,-4(fp)
   86310:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   86314:	00800274 	movhi	r2,9
   86318:	10a1c004 	addi	r2,r2,-30976
   8631c:	10c00017 	ldw	r3,0(r2)
   86320:	e0bffe17 	ldw	r2,-8(fp)
   86324:	1880040e 	bge	r3,r2,86338 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   86328:	00c00274 	movhi	r3,9
   8632c:	18e1c004 	addi	r3,r3,-30976
   86330:	e0bffe17 	ldw	r2,-8(fp)
   86334:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   86338:	e0bffe17 	ldw	r2,-8(fp)
   8633c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   86340:	00000606 	br	8635c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   86344:	e0bffe17 	ldw	r2,-8(fp)
   86348:	10800044 	addi	r2,r2,1
   8634c:	e0bffe15 	stw	r2,-8(fp)
   86350:	e0bffe17 	ldw	r2,-8(fp)
   86354:	10800810 	cmplti	r2,r2,32
   86358:	103fdd1e 	bne	r2,zero,862d0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8635c:	e0bffd17 	ldw	r2,-12(fp)
}
   86360:	e037883a 	mov	sp,fp
   86364:	dfc00217 	ldw	ra,8(sp)
   86368:	df000117 	ldw	fp,4(sp)
   8636c:	dc000017 	ldw	r16,0(sp)
   86370:	dec00304 	addi	sp,sp,12
   86374:	f800283a 	ret

00086378 <atexit>:
   86378:	200b883a 	mov	r5,r4
   8637c:	000d883a 	mov	r6,zero
   86380:	0009883a 	mov	r4,zero
   86384:	000f883a 	mov	r7,zero
   86388:	00864381 	jmpi	86438 <__register_exitproc>

0008638c <exit>:
   8638c:	defffe04 	addi	sp,sp,-8
   86390:	000b883a 	mov	r5,zero
   86394:	dc000015 	stw	r16,0(sp)
   86398:	dfc00115 	stw	ra,4(sp)
   8639c:	2021883a 	mov	r16,r4
   863a0:	00865700 	call	86570 <__call_exitprocs>
   863a4:	00800274 	movhi	r2,9
   863a8:	10a1b904 	addi	r2,r2,-31004
   863ac:	11000017 	ldw	r4,0(r2)
   863b0:	20800f17 	ldw	r2,60(r4)
   863b4:	10000126 	beq	r2,zero,863bc <exit+0x30>
   863b8:	103ee83a 	callr	r2
   863bc:	8009883a 	mov	r4,r16
   863c0:	00868ac0 	call	868ac <_exit>

000863c4 <memcmp>:
   863c4:	00c000c4 	movi	r3,3
   863c8:	1980032e 	bgeu	r3,r6,863d8 <memcmp+0x14>
   863cc:	2144b03a 	or	r2,r4,r5
   863d0:	10c4703a 	and	r2,r2,r3
   863d4:	10000f26 	beq	r2,zero,86414 <memcmp+0x50>
   863d8:	31ffffc4 	addi	r7,r6,-1
   863dc:	3000061e 	bne	r6,zero,863f8 <memcmp+0x34>
   863e0:	00000a06 	br	8640c <memcmp+0x48>
   863e4:	39ffffc4 	addi	r7,r7,-1
   863e8:	00bfffc4 	movi	r2,-1
   863ec:	21000044 	addi	r4,r4,1
   863f0:	29400044 	addi	r5,r5,1
   863f4:	38800526 	beq	r7,r2,8640c <memcmp+0x48>
   863f8:	20c00003 	ldbu	r3,0(r4)
   863fc:	28800003 	ldbu	r2,0(r5)
   86400:	18bff826 	beq	r3,r2,863e4 <memcmp+0x20>
   86404:	1885c83a 	sub	r2,r3,r2
   86408:	f800283a 	ret
   8640c:	0005883a 	mov	r2,zero
   86410:	f800283a 	ret
   86414:	180f883a 	mov	r7,r3
   86418:	20c00017 	ldw	r3,0(r4)
   8641c:	28800017 	ldw	r2,0(r5)
   86420:	18bfed1e 	bne	r3,r2,863d8 <memcmp+0x14>
   86424:	31bfff04 	addi	r6,r6,-4
   86428:	21000104 	addi	r4,r4,4
   8642c:	29400104 	addi	r5,r5,4
   86430:	39bff936 	bltu	r7,r6,86418 <memcmp+0x54>
   86434:	003fe806 	br	863d8 <memcmp+0x14>

00086438 <__register_exitproc>:
   86438:	defffa04 	addi	sp,sp,-24
   8643c:	00800274 	movhi	r2,9
   86440:	10a1b904 	addi	r2,r2,-31004
   86444:	dc000015 	stw	r16,0(sp)
   86448:	14000017 	ldw	r16,0(r2)
   8644c:	dd000415 	stw	r20,16(sp)
   86450:	2829883a 	mov	r20,r5
   86454:	81405217 	ldw	r5,328(r16)
   86458:	dcc00315 	stw	r19,12(sp)
   8645c:	dc800215 	stw	r18,8(sp)
   86460:	dc400115 	stw	r17,4(sp)
   86464:	dfc00515 	stw	ra,20(sp)
   86468:	2023883a 	mov	r17,r4
   8646c:	3027883a 	mov	r19,r6
   86470:	3825883a 	mov	r18,r7
   86474:	28002526 	beq	r5,zero,8650c <__register_exitproc+0xd4>
   86478:	29000117 	ldw	r4,4(r5)
   8647c:	008007c4 	movi	r2,31
   86480:	11002716 	blt	r2,r4,86520 <__register_exitproc+0xe8>
   86484:	8800101e 	bne	r17,zero,864c8 <__register_exitproc+0x90>
   86488:	2105883a 	add	r2,r4,r4
   8648c:	1085883a 	add	r2,r2,r2
   86490:	20c00044 	addi	r3,r4,1
   86494:	1145883a 	add	r2,r2,r5
   86498:	0009883a 	mov	r4,zero
   8649c:	15000215 	stw	r20,8(r2)
   864a0:	28c00115 	stw	r3,4(r5)
   864a4:	2005883a 	mov	r2,r4
   864a8:	dfc00517 	ldw	ra,20(sp)
   864ac:	dd000417 	ldw	r20,16(sp)
   864b0:	dcc00317 	ldw	r19,12(sp)
   864b4:	dc800217 	ldw	r18,8(sp)
   864b8:	dc400117 	ldw	r17,4(sp)
   864bc:	dc000017 	ldw	r16,0(sp)
   864c0:	dec00604 	addi	sp,sp,24
   864c4:	f800283a 	ret
   864c8:	29802204 	addi	r6,r5,136
   864cc:	00800044 	movi	r2,1
   864d0:	110e983a 	sll	r7,r2,r4
   864d4:	30c04017 	ldw	r3,256(r6)
   864d8:	2105883a 	add	r2,r4,r4
   864dc:	1085883a 	add	r2,r2,r2
   864e0:	1185883a 	add	r2,r2,r6
   864e4:	19c6b03a 	or	r3,r3,r7
   864e8:	14802015 	stw	r18,128(r2)
   864ec:	14c00015 	stw	r19,0(r2)
   864f0:	00800084 	movi	r2,2
   864f4:	30c04015 	stw	r3,256(r6)
   864f8:	88bfe31e 	bne	r17,r2,86488 <__register_exitproc+0x50>
   864fc:	30804117 	ldw	r2,260(r6)
   86500:	11c4b03a 	or	r2,r2,r7
   86504:	30804115 	stw	r2,260(r6)
   86508:	003fdf06 	br	86488 <__register_exitproc+0x50>
   8650c:	00800274 	movhi	r2,9
   86510:	10a8fa04 	addi	r2,r2,-23576
   86514:	100b883a 	mov	r5,r2
   86518:	80805215 	stw	r2,328(r16)
   8651c:	003fd606 	br	86478 <__register_exitproc+0x40>
   86520:	00800034 	movhi	r2,0
   86524:	10800004 	addi	r2,r2,0
   86528:	1000021e 	bne	r2,zero,86534 <__register_exitproc+0xfc>
   8652c:	013fffc4 	movi	r4,-1
   86530:	003fdc06 	br	864a4 <__register_exitproc+0x6c>
   86534:	01006404 	movi	r4,400
   86538:	103ee83a 	callr	r2
   8653c:	1007883a 	mov	r3,r2
   86540:	103ffa26 	beq	r2,zero,8652c <__register_exitproc+0xf4>
   86544:	80805217 	ldw	r2,328(r16)
   86548:	180b883a 	mov	r5,r3
   8654c:	18000115 	stw	zero,4(r3)
   86550:	18800015 	stw	r2,0(r3)
   86554:	80c05215 	stw	r3,328(r16)
   86558:	18006215 	stw	zero,392(r3)
   8655c:	18006315 	stw	zero,396(r3)
   86560:	0009883a 	mov	r4,zero
   86564:	883fc826 	beq	r17,zero,86488 <__register_exitproc+0x50>
   86568:	003fd706 	br	864c8 <__register_exitproc+0x90>

0008656c <register_fini>:
   8656c:	f800283a 	ret

00086570 <__call_exitprocs>:
   86570:	00800274 	movhi	r2,9
   86574:	10a1b904 	addi	r2,r2,-31004
   86578:	10800017 	ldw	r2,0(r2)
   8657c:	defff304 	addi	sp,sp,-52
   86580:	df000b15 	stw	fp,44(sp)
   86584:	d8800115 	stw	r2,4(sp)
   86588:	00800034 	movhi	r2,0
   8658c:	10800004 	addi	r2,r2,0
   86590:	1005003a 	cmpeq	r2,r2,zero
   86594:	d8800215 	stw	r2,8(sp)
   86598:	d8800117 	ldw	r2,4(sp)
   8659c:	dd400815 	stw	r21,32(sp)
   865a0:	dd000715 	stw	r20,28(sp)
   865a4:	10805204 	addi	r2,r2,328
   865a8:	dfc00c15 	stw	ra,48(sp)
   865ac:	ddc00a15 	stw	r23,40(sp)
   865b0:	dd800915 	stw	r22,36(sp)
   865b4:	dcc00615 	stw	r19,24(sp)
   865b8:	dc800515 	stw	r18,20(sp)
   865bc:	dc400415 	stw	r17,16(sp)
   865c0:	dc000315 	stw	r16,12(sp)
   865c4:	282b883a 	mov	r21,r5
   865c8:	2039883a 	mov	fp,r4
   865cc:	d8800015 	stw	r2,0(sp)
   865d0:	2829003a 	cmpeq	r20,r5,zero
   865d4:	d8800117 	ldw	r2,4(sp)
   865d8:	14405217 	ldw	r17,328(r2)
   865dc:	88001026 	beq	r17,zero,86620 <__call_exitprocs+0xb0>
   865e0:	ddc00017 	ldw	r23,0(sp)
   865e4:	88800117 	ldw	r2,4(r17)
   865e8:	8c802204 	addi	r18,r17,136
   865ec:	143fffc4 	addi	r16,r2,-1
   865f0:	80000916 	blt	r16,zero,86618 <__call_exitprocs+0xa8>
   865f4:	05bfffc4 	movi	r22,-1
   865f8:	a000151e 	bne	r20,zero,86650 <__call_exitprocs+0xe0>
   865fc:	8409883a 	add	r4,r16,r16
   86600:	2105883a 	add	r2,r4,r4
   86604:	1485883a 	add	r2,r2,r18
   86608:	10c02017 	ldw	r3,128(r2)
   8660c:	a8c01126 	beq	r21,r3,86654 <__call_exitprocs+0xe4>
   86610:	843fffc4 	addi	r16,r16,-1
   86614:	85bff81e 	bne	r16,r22,865f8 <__call_exitprocs+0x88>
   86618:	d8800217 	ldw	r2,8(sp)
   8661c:	10003126 	beq	r2,zero,866e4 <__call_exitprocs+0x174>
   86620:	dfc00c17 	ldw	ra,48(sp)
   86624:	df000b17 	ldw	fp,44(sp)
   86628:	ddc00a17 	ldw	r23,40(sp)
   8662c:	dd800917 	ldw	r22,36(sp)
   86630:	dd400817 	ldw	r21,32(sp)
   86634:	dd000717 	ldw	r20,28(sp)
   86638:	dcc00617 	ldw	r19,24(sp)
   8663c:	dc800517 	ldw	r18,20(sp)
   86640:	dc400417 	ldw	r17,16(sp)
   86644:	dc000317 	ldw	r16,12(sp)
   86648:	dec00d04 	addi	sp,sp,52
   8664c:	f800283a 	ret
   86650:	8409883a 	add	r4,r16,r16
   86654:	88c00117 	ldw	r3,4(r17)
   86658:	2105883a 	add	r2,r4,r4
   8665c:	1445883a 	add	r2,r2,r17
   86660:	18ffffc4 	addi	r3,r3,-1
   86664:	11800217 	ldw	r6,8(r2)
   86668:	1c001526 	beq	r3,r16,866c0 <__call_exitprocs+0x150>
   8666c:	10000215 	stw	zero,8(r2)
   86670:	303fe726 	beq	r6,zero,86610 <__call_exitprocs+0xa0>
   86674:	00c00044 	movi	r3,1
   86678:	1c06983a 	sll	r3,r3,r16
   8667c:	90804017 	ldw	r2,256(r18)
   86680:	8cc00117 	ldw	r19,4(r17)
   86684:	1884703a 	and	r2,r3,r2
   86688:	10001426 	beq	r2,zero,866dc <__call_exitprocs+0x16c>
   8668c:	90804117 	ldw	r2,260(r18)
   86690:	1884703a 	and	r2,r3,r2
   86694:	10000c1e 	bne	r2,zero,866c8 <__call_exitprocs+0x158>
   86698:	2105883a 	add	r2,r4,r4
   8669c:	1485883a 	add	r2,r2,r18
   866a0:	11400017 	ldw	r5,0(r2)
   866a4:	e009883a 	mov	r4,fp
   866a8:	303ee83a 	callr	r6
   866ac:	88800117 	ldw	r2,4(r17)
   866b0:	98bfc81e 	bne	r19,r2,865d4 <__call_exitprocs+0x64>
   866b4:	b8800017 	ldw	r2,0(r23)
   866b8:	147fd526 	beq	r2,r17,86610 <__call_exitprocs+0xa0>
   866bc:	003fc506 	br	865d4 <__call_exitprocs+0x64>
   866c0:	8c000115 	stw	r16,4(r17)
   866c4:	003fea06 	br	86670 <__call_exitprocs+0x100>
   866c8:	2105883a 	add	r2,r4,r4
   866cc:	1485883a 	add	r2,r2,r18
   866d0:	11000017 	ldw	r4,0(r2)
   866d4:	303ee83a 	callr	r6
   866d8:	003ff406 	br	866ac <__call_exitprocs+0x13c>
   866dc:	303ee83a 	callr	r6
   866e0:	003ff206 	br	866ac <__call_exitprocs+0x13c>
   866e4:	88800117 	ldw	r2,4(r17)
   866e8:	1000081e 	bne	r2,zero,8670c <__call_exitprocs+0x19c>
   866ec:	89000017 	ldw	r4,0(r17)
   866f0:	20000726 	beq	r4,zero,86710 <__call_exitprocs+0x1a0>
   866f4:	b9000015 	stw	r4,0(r23)
   866f8:	8809883a 	mov	r4,r17
   866fc:	00000000 	call	0 <__alt_mem_sram_0-0x80000>
   86700:	bc400017 	ldw	r17,0(r23)
   86704:	883fb71e 	bne	r17,zero,865e4 <__call_exitprocs+0x74>
   86708:	003fc506 	br	86620 <__call_exitprocs+0xb0>
   8670c:	89000017 	ldw	r4,0(r17)
   86710:	882f883a 	mov	r23,r17
   86714:	2023883a 	mov	r17,r4
   86718:	883fb21e 	bne	r17,zero,865e4 <__call_exitprocs+0x74>
   8671c:	003fc006 	br	86620 <__call_exitprocs+0xb0>

00086720 <udivmodsi4>:
   86720:	29001b2e 	bgeu	r5,r4,86790 <udivmodsi4+0x70>
   86724:	28001a16 	blt	r5,zero,86790 <udivmodsi4+0x70>
   86728:	00800044 	movi	r2,1
   8672c:	0007883a 	mov	r3,zero
   86730:	01c007c4 	movi	r7,31
   86734:	00000306 	br	86744 <udivmodsi4+0x24>
   86738:	19c01326 	beq	r3,r7,86788 <udivmodsi4+0x68>
   8673c:	18c00044 	addi	r3,r3,1
   86740:	28000416 	blt	r5,zero,86754 <udivmodsi4+0x34>
   86744:	294b883a 	add	r5,r5,r5
   86748:	1085883a 	add	r2,r2,r2
   8674c:	293ffa36 	bltu	r5,r4,86738 <udivmodsi4+0x18>
   86750:	10000d26 	beq	r2,zero,86788 <udivmodsi4+0x68>
   86754:	0007883a 	mov	r3,zero
   86758:	21400236 	bltu	r4,r5,86764 <udivmodsi4+0x44>
   8675c:	2149c83a 	sub	r4,r4,r5
   86760:	1886b03a 	or	r3,r3,r2
   86764:	1004d07a 	srli	r2,r2,1
   86768:	280ad07a 	srli	r5,r5,1
   8676c:	103ffa1e 	bne	r2,zero,86758 <udivmodsi4+0x38>
   86770:	30000226 	beq	r6,zero,8677c <udivmodsi4+0x5c>
   86774:	2005883a 	mov	r2,r4
   86778:	f800283a 	ret
   8677c:	1809883a 	mov	r4,r3
   86780:	2005883a 	mov	r2,r4
   86784:	f800283a 	ret
   86788:	0007883a 	mov	r3,zero
   8678c:	003ff806 	br	86770 <udivmodsi4+0x50>
   86790:	00800044 	movi	r2,1
   86794:	0007883a 	mov	r3,zero
   86798:	003fef06 	br	86758 <udivmodsi4+0x38>

0008679c <__divsi3>:
   8679c:	defffe04 	addi	sp,sp,-8
   867a0:	dc000015 	stw	r16,0(sp)
   867a4:	dfc00115 	stw	ra,4(sp)
   867a8:	0021883a 	mov	r16,zero
   867ac:	20000c16 	blt	r4,zero,867e0 <__divsi3+0x44>
   867b0:	000d883a 	mov	r6,zero
   867b4:	28000e16 	blt	r5,zero,867f0 <__divsi3+0x54>
   867b8:	00867200 	call	86720 <udivmodsi4>
   867bc:	1007883a 	mov	r3,r2
   867c0:	8005003a 	cmpeq	r2,r16,zero
   867c4:	1000011e 	bne	r2,zero,867cc <__divsi3+0x30>
   867c8:	00c7c83a 	sub	r3,zero,r3
   867cc:	1805883a 	mov	r2,r3
   867d0:	dfc00117 	ldw	ra,4(sp)
   867d4:	dc000017 	ldw	r16,0(sp)
   867d8:	dec00204 	addi	sp,sp,8
   867dc:	f800283a 	ret
   867e0:	0109c83a 	sub	r4,zero,r4
   867e4:	04000044 	movi	r16,1
   867e8:	000d883a 	mov	r6,zero
   867ec:	283ff20e 	bge	r5,zero,867b8 <__divsi3+0x1c>
   867f0:	014bc83a 	sub	r5,zero,r5
   867f4:	8021003a 	cmpeq	r16,r16,zero
   867f8:	003fef06 	br	867b8 <__divsi3+0x1c>

000867fc <__modsi3>:
   867fc:	deffff04 	addi	sp,sp,-4
   86800:	dfc00015 	stw	ra,0(sp)
   86804:	01800044 	movi	r6,1
   86808:	2807883a 	mov	r3,r5
   8680c:	20000416 	blt	r4,zero,86820 <__modsi3+0x24>
   86810:	28000c16 	blt	r5,zero,86844 <__modsi3+0x48>
   86814:	dfc00017 	ldw	ra,0(sp)
   86818:	dec00104 	addi	sp,sp,4
   8681c:	00867201 	jmpi	86720 <udivmodsi4>
   86820:	0109c83a 	sub	r4,zero,r4
   86824:	28000b16 	blt	r5,zero,86854 <__modsi3+0x58>
   86828:	180b883a 	mov	r5,r3
   8682c:	01800044 	movi	r6,1
   86830:	00867200 	call	86720 <udivmodsi4>
   86834:	0085c83a 	sub	r2,zero,r2
   86838:	dfc00017 	ldw	ra,0(sp)
   8683c:	dec00104 	addi	sp,sp,4
   86840:	f800283a 	ret
   86844:	014bc83a 	sub	r5,zero,r5
   86848:	dfc00017 	ldw	ra,0(sp)
   8684c:	dec00104 	addi	sp,sp,4
   86850:	00867201 	jmpi	86720 <udivmodsi4>
   86854:	0147c83a 	sub	r3,zero,r5
   86858:	003ff306 	br	86828 <__modsi3+0x2c>

0008685c <__udivsi3>:
   8685c:	000d883a 	mov	r6,zero
   86860:	00867201 	jmpi	86720 <udivmodsi4>

00086864 <__umodsi3>:
   86864:	01800044 	movi	r6,1
   86868:	00867201 	jmpi	86720 <udivmodsi4>

0008686c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   8686c:	defffd04 	addi	sp,sp,-12
   86870:	df000215 	stw	fp,8(sp)
   86874:	df000204 	addi	fp,sp,8
   86878:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   8687c:	e0bfff17 	ldw	r2,-4(fp)
   86880:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   86884:	e0bffe17 	ldw	r2,-8(fp)
   86888:	1005003a 	cmpeq	r2,r2,zero
   8688c:	1000021e 	bne	r2,zero,86898 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   86890:	002af070 	cmpltui	zero,zero,43969
   86894:	00000106 	br	8689c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   86898:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   8689c:	e037883a 	mov	sp,fp
   868a0:	df000017 	ldw	fp,0(sp)
   868a4:	dec00104 	addi	sp,sp,4
   868a8:	f800283a 	ret

000868ac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   868ac:	defffd04 	addi	sp,sp,-12
   868b0:	dfc00215 	stw	ra,8(sp)
   868b4:	df000115 	stw	fp,4(sp)
   868b8:	df000104 	addi	fp,sp,4
   868bc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   868c0:	e13fff17 	ldw	r4,-4(fp)
   868c4:	008686c0 	call	8686c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   868c8:	003fff06 	br	868c8 <_exit+0x1c>
   868cc:	0008656c 	andhi	zero,zero,8597
