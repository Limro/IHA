De første 5 minutter er om rapportens Architecture afsnit.
Er der huller spørger de ind.


1) Discuss the main differences between imperative, functional and logic programming.
Main problem in each paradigms - compare to the others
- Variables
- Side effects
- Main concepts

	Logic
		- Deals in facts
			- relations = predicates
			- names = atoms
			- Atoms and numbers = constants
			- Value assigned to predicate = arity
			- Methods = functors
			- Operators:
				:- 	separate head and body
				?-	query (rules without head)
				, 	separate goals
				is 	Arithmetic evaluation
			- Returns true/false unless variables (X) are used

		- Explain EXACTLY what should happen and give me solutions
			- Will not return what is wrong or where it's wrong
				- Can use Unification and repeat and reminds of C-family (very inefficient)
	Functional
		- 
		- No variabels out of a procedure / method
			- Use parameters and let/let*/letrec
		- Really good for math and message passing (distributed systems)
			- Erland satelite
	Imperative
		- Object oriented.
		- Explain exactly what should happen and what not should happen

2) Explain the "Substitution Model" as used by Scheme.
- The way computation works 
- Use substitutionmodel to a Scheme function
	

	- This is expression, this and this
	- Bring example:
		(( lambda (x)
			(+ x 2))
			23)
		(let*)...
- Must talk about 3)

3) Explain what higher-order programming is, what it requires, and what it allows.
- High-order
	Concept
- Connect to material in the course
	- Pass funciton
	- Abstraction
		- lambda is an operator in higher-order
			Give it more information to pass
		- Erlang
			Upgrade on the fly
			Default function
				Fold function



4) Explain the correspondence between search trees and Prolog.
- It fit, doesn't fit, try next clause
- Show a fail of refutation

5) Explain how logical variables are used in Prolog computations.
- Unifiers, refutation

6) Discuss the concept of concurrency in functional and logic programming as presented in the lectures.
- Logic: Coroutining
	- Restructure to smaller
	- !!! Simple examples !!!
	- No deep theory
	- Prolog.now (små opgaver der kan vises)
	
- Functional: 




Substitution:
((( lambda (x)
     (lambda (y)
       (+ x y)))
  12)
 23)

;; ( nr 2 - komplek expression

( ;
 ( ;
  ( ; #<function lambda (y) (+ x y )) : [?/x]> ; indsæt på x
   12)
  23))

;;
(; lambda (y) (+ x y)) : [12/x]
 23)

;;
((lambda (y) (+ 12 y))
  23)

;;
; ends up being
(+ 12 23)
35
;;;;;;;;;;;;;;;;;;;;;;

(let (( x 5))
  (+ 2 x))
;;
((lambda (x)
   (+ 2 x))
 5)
;function value with the substitution (5)
(+ 2 5)