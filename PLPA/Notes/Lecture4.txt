Scheme og LISP
==============

Lisp
----
- A family of programmin language
- Can adapt to modern language

Scheme
------
Dialect og LISP
We use R5RS-revesion


Syntax
======

(define x 5)

(define plus1
    (lambda (x) (+1 x)))

(plus1 3)

(let ((x 1) (y 2))
	(+ x y))

(let* ((x 1) (y x))
	(+ x y))

(cons 1 2) //Det samme som et array med 1 og 2
(car (cons 1 2))

(list 1 2 3) //En liste med 1 2 3

(null? (list 1 2 3)) //Er listen tom?

(length (list 1 2 3)) //LÃ¦ndge af en liste



====================
Atom
	- constanter, null lister, identifier (operatorer), variables

Compound excpression
	- Starts with ()
	- Will apply the first and the second to the third element

Scheme calculates something once, saves the value and recall the value when needed (for another identic calculcation).



Tail recursive
--------------
Must return the same function and NO MORE in an else

