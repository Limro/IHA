##########################################################
List what CAN be explained - only do a few
##########################################################

1. Contents of a good specification

	- Check that all parts match and everything is included
	- Validate that stakeholders are happy (customer, user, developer)

	- Write down business goals!
	- Understandable for the customer
		- Word != meaning
		- Meaning != consequences for business
		- Show similar system/ pilot test.

	- Correct: was that customer's actual need
	- Unambiguous: Må ikke kunne misforståes
	- Complete: Få alle ikke-trivielle krav skrevet (Også GUI)
	- Consistent: Ingen konflikter
	- Verifiable: Et "nice" user interface, kan ikke måles.
	- Modifiable: Kategoriser, prioriter og brug statiske labels i SRS
	- Traceable: Forward and backward

	- Describe data (Do CRUDO check on tasks vs. )
	- Quality (performance, security, reliability, availability, interoperability, usability)
	- ID on req.
	- Risk assessment
	- Tests
	- Run through check list

	(1)
	Agenda:
	- Stakeholders
	- 7 checks
	- Data
	- Quality

	Excellent:
	- Structured + agenda
	- Good with stakeholders
	- Good with examples
	- Good combination of practice and theory
	- Good at keeping time
	- Good body language

	Remember:
	- State it's an informal spec
	- Happy stakeholders can't all be happy
	- Requirement level, domain level
	- Tendering process from proposal to ...
	- Perspective / ref to checklist etc.
	- CRUDO drawing
	- Template for specs missing
	- Write more on the board
	- Verify must be "Verifyable"
	- More references to other parts
	- Short sentence


2. Discuss pros and cons with informal specification
	# Agenda
		- Informal (hvad er)
		- UC vs. Tasks
		- Informal Pros
		- Informal Cons

	- Informal spec er beskrivende ord.
		Task description eller IEEE standard
		- Formal spec beskrives med matematisk tilgang og bruges abstrakt - mere i spg. 3

	Use Case:
		- Trigger (kan være meget uklar)
		- Aktor gør dit, computer gør dat
		- Opfinder dialogbokse, som kan være skadelige for udviklingen
		- Kan indeholde trivielle detaljer
		- Bruges hvis der bygges noget helt fra scratch
		- Gemmer business goals
		- Skabelon kan give forkerte requirements

	Tasks:
		- Tasks løses af bruger OG computer
		- Mange løsningsmuligheder
		- Frit flow (Meget nem at gøre dynamisk [MS Word eksempel])
		- Kunden kan se en løsningsmulighed
		- Bruges hvis det erstatter noget
		- Stor reuse i skabelon for maintenance, dokumentation, useability og security
		- Work areas opdeler overordnede problemer
		- Programmer ikke
			Ikke noget if this then that
		- Viser om supplier har løsning
		- Håndtere mange krav i andre sektioner

	Pros:
		- Kunden forstår hvad der sker
			- Alle stakeholders (både supplier og customer) kan være med
		- Reviews bliver meget nemmere
		- Ikke abstrakt
		- Domain-level og high-level can blive udtrykt
		- Ikke-funktionelle krav (GUI) kan beskrives

	Cons:
		- Man kan misforstå naturligt sprog (ambiguity)
		- Hvis der skal bruges sikkerhed kan det kun beskrives og ikke eftervises
		- Matematik / logik kan ikke bruges
		- Der skal review'es, som kunne have være repeatable analyser
		- Giver ikke lige så stor indsigt i softwaren som formal
		- Giver ikke elegant software design
		- Implementationsfriheden er besgrænset
		- Kan ikke direkte overføres til kode

3. Discuss pros and cons with formal specification
	#Agenda#
	- Hvad er formal spec
	- Pro & cons
	- Alternativer

	- Hvad er formal spec?
		- Abstrakt representation af system med matematik og concepter
		- Modeller bruges til at analysere og bevise det kan lade sig gøre og udlede ny behaviour
		- 
		- Elicitation of req.
		- Example for critical system

	- Focus on model based techniques
		- ZDM-SL, Z, B
		- Mention other techniques
			- Logic base
			- Algebraic 

	- Pros og cons
		- (Pro) Kan reducere udviklingproblemer op til 2½ gange mindre (IBM: CICS 198X)
		- (Pro) Pris på udvikling kan falde (IBM: CICS 198X)
		- (Pro) Kan opdage fejl i algoritmer (INMOS)
		- (Pro) Kvaliteten af software meget højrere (Pracis)
		- (Pro) Kunder kan blive mere tilfredse (Siemens)
		- (Pro) Reviews er ikke behøvet pga. repeatable analyser
		
		- (Con) Kunden skal have kendskab til algebra og modellering
		- (Con) Alle stakeholders kan ikke være med
		- (Con) Abstrakt - måske godt
		- (Con) Kan ikke udtrykke domain-level go high level goals
		- (COn) Kan ikke beskrive GUI

	- Compare with informal spec Question 2
		- When to use what

4. Relationships between assumptions, specifications and system properties
	# Agenda
		- Korttårn
		- A + S => P
		- Elcitation
		- Inspektionstyper (informal)

	- Eksempel med korttårn
	- Assumption: 
		- Noget man antager skal stå der
			Vær opmærksom på req. der ikke er eksplisite 

	- Specifications:
		- Listede krav fra kunden

	- Properties:
		- Ønsket behaviour af det nye system i miljøet

	- Assumption + Specification => properties
		- Vi troede tårnet blot skulle være 12 ft høj, men antog 15 var fint (14 limit)
		
	- Elicitation teknik (Spg 7):
		- Lav brainstorm
		- Send spørgsmål til brugerne af systemet
		- Lav brugerinterviews
		- Fokusgroups
		- Observation
		- Task demonstration
		- Domain workshop
		- Stakeholder analyse

	- Afhængigt af projektet vælges (in)formal specification, der underbygger statements

	- Inspektionstyper:
		- Ad-hoc: 
			- Tag en ekspert med, som kan belyse problemer for systemet
			- Manglende funktionallitet, performance, interfaces og omgivelser
			- Find tvetydig, ikke-konsistent info, forkerte facts osv.
		- Scenario:
			- Se på data typer og deres informationer
			- Se på data for funktionelle krav
			- Find in- og output for funktionelle krav
			- Find system events for funktionelle krav
			- Find precision og reponsetids krav (ambigiuos / tvetydige)
			
5. Compare different specification techniques
	# Agenda:
		- Formal (Pros og cons)
		- Informal (Pros og cons)
		- IEEE standard
			- Use Case
		- Task description
			- Tasks

	- Formal (Description + pros and cons)
		- Abstract og giver frihed til implementering
		- Kan gøre brug af matemtik og logik
		- Kan overføres til kode til implementering
		- Ingen GUI
		- MEGET svær at forstå for mening mand
		- Meget stor insigt i, hvordan software skal være
		- Bruger ikke reviews men repeatable analyser
		- Kan ikke misforståes hvis man kan læse det.


	- Informal (Description + pros and cons)
		- Kunden forstår hvad der sker
			- Alle stakeholders (både supplier og customer) kan være med
		- Reviews bliver meget nemmere
		- Ikke abstrakt
		- Domain-level og high-level can blive udtrykt
		- Ikke-funktionelle krav (GUI) kan beskrives
		- Bruger 'shall' og 'should' til at beskrive hvad skal og hvad kunne tænkes

	Use Case:
		- Bruges hvis der bygges noget helt fra scratch
		- Trigger (kan være meget uklar)
		- Aktor gør dit, computer gør dat
		- Opfinder dialogbokse, som kan være skadelige for udviklingen
		- Kan indeholde trivielle detaljer
		- Gemmer business goals
		- Skabelon kan give forkerte requirements

	Tasks:
		- Tasks løses af bruger OG computer
		- Mange løsningsmuligheder
		- Frit flow (Meget nem at gøre dynamisk [MS Word eksempel])
		- Kunden kan se en løsningsmulighed
		- Bruges hvis det erstatter noget
		- Stor reuse i skabelon for maintenance, dokumentation, useability og security
		- Work areas opdeler overordnede problemer
		- Programmer ikke
			Ikke noget if this then that
		- Viser om supplier har løsning
		- Håndtere mange krav i andre sektioner

	- IEEE template (Ucs + pros and cons)

	- Task Description(Tasks + pros and cons)

6. Reviewing and validating a specification
	# Agenda
		- Hvorfor
		- God spec
		- Review vs, Inspektion
		- Inspektionstyper
		- CRUDO
		- Formal spec

	- Hvorfor?
		- Det er aldrig rigtigt første gang
		- Man finder mange ting der mangler
		- Man finder forkerte ting

	- Hvad er en god spec?
		- Correct: was that customer's actual need
		- Unambiguous: Må ikke kunne misforståes
		- Complete: Få alle ikke-trivielle krav skrevet (Også GUI)
		- Consistent: Ingen konflikter
		- Verifiable: Et "nice" user interface, kan ikke måles.
		- Modifiable: Kategoriser, prioriter og brug statiske labels i SRS
		- Traceable: Forward and backward

	- Review vs. inspection
		- Review holdes med Stakeholders
			- Review i spg 4
		- Inspection gør ikke nødvendigvis
			- Her skal også findes løsning
			- Alt noteres

	- Ad-hoc (inspektion):
		- (Pro) Tag en ekspert med, som kan belyse problemer for systemet
		- (Pro) Manglende funktionallitet, performance, interfaces og omgivelser
		- (Pro) Find tvetydig, ikke-konsistent info, forkerte facts osv.
		- (Con) Finder kun hvad der ses
		- (Con) Inspection team vurderer det / ikke stakeholders

	- Checklist (inspektion):
		- (Pro) Samme som Ad-hoc, blot mere systematisk
		- (Con) Meget lang
		- (Pro/Con) Typisk lavet til et specielt område inden for firmaets arbejde

	- Scenario (Flere perspektiver):
		- Se på data typer og deres informationer
		- Se på data for funktionelle krav
		- Find in- og output for funktionelle krav
		- Find system events for funktionelle krav
		- Find precision og reponsetids krav (ambigiuos / tvetydige)
		- (Pro) Meget analytisk
		- (Con) Ingen list at køre igennem

	- CRUDO (Tegn!!)
	
	- Formal specification
		- Design og udfør et VDM-program og flow

7. The tendering process using specifications
	# Agenda
		- Elicitation
		- Teknikker
		- Public vs. privat sektor
		- Specifikations typer (spg. 5)

	- Talk about picture SolIT01 p. 66
		- Talk about IEEE template and Søren Lauesen's task-description (Write specification)
			- Will formal or informal specs be best? (customer dependant)
		
	- Tekniker 
		- Lav brainstorm
		- Send spørgsmål til brugerne af systemet
		- Lav brugerinterviews
		- Fokusgroups
		- Observation
		- Task demonstration
		- Domain workshop
		- Stakeholder analyse
		
	- Puplic vs. private sector
		- I den private sektor er overstående fint
		- I den offentlige sektor er alle spørgsmål offentlige
		- Offentlige skal vudere ud fra fastsatte mål (x% pris, y% leveringstid, z% kvalitet)

8. Requirements elicitation (WAY OF FINDING!!!)
	# Agenda
		- Elicitation
		- Teknikker
		- Formuler mål
		- Specifikations typer (spg. 5)

	- Formuler business goals
		- Kan ikke blot læses af needs (sjældent)
		- Tower-projekt

	- Tekniker 
		- Lav brainstorm
		- Send spørgsmål til brugerne af systemet
		- Lav brugerinterviews
		- Fokusgroups
		- Observation
		- Task demonstration
		- Domain workshop
		- Stakeholder analyse

	- Formulating the goal
		- How the elecitation process goes
		- Finding stakeholders

	- Talk about picture SolIT01 p. 66

9. Formal VDM-SL specifications
	# Agenda 
		- Hvad er VDM-SL
		- Formal sprog
		- Eksempel
		- Informelle og formelle pros and cons

	- What is VDM-SL
		- s. 24, 63
		- Typer specificer data
		- Funktioner specificer opførelse
		- Bruges til at opstille modeller for systemer

	- More than one langauge
		- Model-baseret (VDM)
		- Algebra
		- Transition-baseret
		- Process algebra
		- Logik-baseret
		- Reaktive

	- Example (SMALL) - the one you did
		- Data types
		- Functions
		- Operations
		- States

		- Tilføj CardId (p. 3, cs. 5)
		- Gør dem alle unikke (p. 4, cs. 6)
		- Map gæsterne til et SÆT af nøgler (kan være 1) og søg for ingen har de samme (p. 4, cs. 7)
		- Opret kopi af nøgle med unikt ID (p.4 cs. 8)
		- 

	- Refer to Question 3 and 4

