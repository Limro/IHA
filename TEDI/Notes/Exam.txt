1. Model - checking safety and liveness properties 
	- Discuss the difference between safety and liveness. 
		- Safety: Must never happen
			Mutual exclusion: 
			ltl mutex { []!(csP && csQ) }
			(and set JSpin in safety mode)

		- Liveness: Must eventually happen
			Absence of deadlock:
			ltl dlk { []<>(!wantP || !wantQ) }
			(and set JSpin in acceptance mode)

		- What each button do

	- Explain how LTL, automata and never claims are related. 
		- Promela != ltl 
			LTL = Linear Temporal logic
			Spin translate it to Promela
			Translation = never claim with Büchi acceptance condition.

		- Simple axample
	(Slides, Chapters 5, 8 and 10 in Principles of the Spin Model Checker) 

2. Fairness and nondeterminism 
	- Explain the concepts of nondeterminism fairness. 
		- Weakly fairness:
			"If always executable then it's eventually executed"
		- Fairness:
			"If something is infinitely enabled (true) it is eventually taken"
		- Non-determinism
			"2 processes can execute whenever they want and we don't know in which order"

	- Discuss their relationship. 

	- How is fairness related to  deadlock, termination and safety? 
		- Safety - must never happen:
			ltl mutex { []!(csP && csQ) }
		- Termination of program:
			active proctype Q(){ endProcP = true; }
		- Deadlock:
			"if deadlock is possible, it will happen".

	- What are the limitations of weak fairness? 

	- Does nondeterminism  occur in C-- programs? 
		Yes, if a prrocess is stated within a 'cobegin'

	- How can C-- programs be made (weakly) fair? 
		int i = 2;
		void proc1() {... i++ ...}
		void proc2() { i = 1;}
		main(){ cobegin {proc1(), proc2(); } }

	- Aspects
		- Real life
		- Modelling
	(Slides, Exercises, Chapter 5 in Principles of the Spin Model Checker) 

3. Monitoring distributed computations and consistent observations 
	- Explain the concepts of causality, runs, cuts and consistent observations of distributed systems, the problems involved .
		- Runs:
			Total ordering, R, including all events of global history, H.
			May not correspond with physical execution.
			A single DS can in many runs have different executions.

		- Cuts:
			A cut is the current state of all processes
			Mark a cut, see how long the other processes will run before the first interferes.

		- Consistency of observed state:
			How cuts are created.
			Only consistent cuts are consistent
				Predicate values are only meaningful when evaluated in the context of a consistent global state.
			A run, R, is consistent if:
				∀ events e, e’ where e→e’,
				e appears before e’ in R.
				So if R = e^1, e^2, e^3 then e^1 -> e^2 -> e^3

		- Problem:
			Deliver messages out-of-order

	- Explain how an observer of distributed computations may draw valid or invalid conclusions about system global state.
		- Bad reading of an run, R.


	- You should use plenty of space - time diagrams to exemplify your explanation. 
		- Global space time diagram: TEDI Lesson 6, slide 19.

	(Slides, Section 1 - 2 (cursory) and 3 - 6 in "Consistent Global States of Distributed Systems: Fundamental Concepts and Mechanisms") 


	- Problem of DS
	- Why do they exist
	- Why no "global observer state"
	- Space-time diagram

4. The mutex problem for distributed systems and the Neilsen - Mizuno algorithm 
	- Outline (some of) the problems inherent in asynchronous distributed systems that a mutex (mutual exclusion) algorithm must overcome. 
		- Message exchange
			- Permission (common agreement) or token (I have flag, I'm going in)
		- Problems:
			- Deadlock
			- Starvation
			- Out-of-order messages
			- Response time
			- Loss of token
		

	- Explain the Neilsen - Mizuno algorithm as an example of a mutex algorithm.
		- A big tree (show a line).
		- Parent link FROM children.
		- A request is recursive send up to parent.
		- Request gets "deferred" link (which can send token directly).
		- Requesters have a "ground" if no to defer to.
	
	-Talk about 5 

5. Your own improved “Broadcast I want the token” - algorithm 
	- Bragging algo
	- What is the problem with non-bragging
	- Explain your own improved “Broadcast I want the token” - algorithm, 
		- Use your BACI/C-- implementation and Spin model to demonstrate or argue its properties. 
		If you don’t have a working C—implementation it’s okay to use the whiteboard, handouts etc. to outline your algorithm, the way it works and its rationale. 

		- Apart from simply running Spin on your model, you must present your model and your reasoning behind it (why does it look like it does, what specific traits and properties of your algorithm did you want to capture and verify etc.). 
	(Slides, Exercises) 

6. Making snapshots of distributed systems and the Chandy - Lamport snapshot algorithm 
	- Outline (some of) the problems inherent in asynchronous distributed systems that a snapshot algorithm must address. 
		Good:
			- Used for roll back and restart
			- Can create "system dump" for debugging
		Not good:
			- May send messages
			- May require dedicated computations
			- Can leave a footprint on memory, cpu, network bandwidth
			- 

	- Explain the Chandy-Lamport algorithm as an example of a snapshot algorithm. 
		- Record local state when a special message is received (easy)
		- Send message to all connected channels
		- Record all incomming messages on channel until follow-up message arives

	
	- Cuts:
		A cut is the current state of all processes
		Mark a cut, see how long the other processes will run before the first interferes.

	(Slides, Section13 in "Consistent Global States of Distributed Systems: Fundamental Concepts and Mechanisms", selected parts of Section 1 - 2 (cursory) and 3 - 6 in "Consistent Global States of Distributed Systems: Fundamental Concepts and Mechanisms") 

7. Specifying systems and properties. 
	- What is a specification? 
		- Exact statement of needs and characteristics.
		- Things that should always hold.
			- No deadlocks, starvation and so on.
	
	- How are safety properties and liveness properties specified? 
		- Safety: Must never happen
			Mutual exclusion: 
			ltl mutex { []!(csP && csQ) }
			(and set JSpin in safety mode)

		- Liveness: Must eventually happen
			Absence of deadlock:
			ltl dlk { []<>(!wantP || !wantQ) }
			(and set JSpin in acceptance mode)
	
	- How are assertions used? 
		- Something that should hold
			- If not, stop the program and throw the error
		- Pre and postconditions

	- What is the purpose of verification? 
		- errors written in the code, syntax errors
		- Search for assertion errors. 
			If it finds one it stops
		- Trail the steps
			Log a file with every state and run in "Guided Simulation"
			This will show what steps caused an error

	- What are counterexamples? 
		- When asserting for, lets say, n > 2, SPIN looks for something where n <= 2.
			One example is enough to active the assertion.

	- LTL-formulars
		- new variables to look with
			- Safety - must never happen:
				ltl mutex { []!(csP && csQ) }
	
	(Slides, Chapters 2, 3, 4, 5 in Principles of the Spin Model Checker) 

8. Testing and modeling 
	- Explain the purpose of Promela models. 
	- Discuss verification, model checking and testing. 
	- Explain the relationship between C-- programs and Promela models. 
	- How can test cases for C-- be generated with  the help of Promela models? 
	- Can Promela models be used to verify C-- programs? 
	(Slides, Chapters 2, 3, 4, 5 in Principles of the Spin Model Checker) 