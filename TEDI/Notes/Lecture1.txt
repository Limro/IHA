Arbitrarily interleaving atomic statements
	- Process one does one thing, next process does something

Non-determinism
	- 2 statements from any 2 processes may or may not execute truly parallel.
	- Changing time will change concurrency processes
	- Distributed computer have their own time stamp. These must be send around or shared.
	- No common time must be send around
	- One cannot observe the system's GLOBALE state (all processes)
		- Only if you turn it off
	- Best to do is constructed images of state that may have existed

Channels
	- You can lose data because of different routing
	- Things can be reordered due to delay


LTL
====

Always 		En firkant - "for any time, t, in the future"
Eventually 	En ruder - "for some time, t, in the future"
not:		!,	
and:		&&,	
or:			||,	
implies:	->,	
equivalent:	<->	
always:		[],	
eventually	<>,	
until:		U


Patterns
========

Invariance: []p
	- p is always true

latching: <>[]p
	- Eventually p is always true

Infinitely often: [] <>p
	- Will always switch back and forth

ltl commands:
=============

Overtaking: ltl otk {
[](ptry->(!qcsU(qcsU(!qcsU pcs))))
}


Lifeness:
	- eventually p, means
		- ? -> ? -> p -> ? -> ?...
	- Now it will try to find
		- !p -> !p -> !p -> !p -> !p ...

Weak fairness:
	- If there's a choise of !p and p, then !p will be chosen


Array syntax
============

- int a[5] 
	is like a[0] to a[4]
- No for loop can assign values
- Multidimentional arrays are not allowed
- Be carefull - it will blow up the program

Records (L4S5)
=======
- Like structs
- Be careful - it will blow up the program

Symbolic names (L4S6)
==============
- Max 244
- Bruges som reference

Sparse arrays
=============
- Only stores value not equal '0'

Channels
========
- Communication channels used to model distributed systems
- Sends or receive messages
	- ch !e
		Send 'e' on channel ch (push())
	- ch = e
		Receive 'e' on channel ch (pop())

If there's only one process:
chan c = [0] of byte:
...
c! 1 /* Deadlock, since only one process */
...

/**/
chan c = [1] of byte
...
c! 1 /* Will run pass, since the channel now is a buffer */

- Anyone can receive a channel.
	To come around this, create a channel within a proctype, and a channel of [0] byte in another, and send the first channel as a buffer. (L4S15)
- A channel can be a buffer

- Rendezvous (run-devu') is capacity = 0
- Buffered is capacity > 0

- Do a request-Reply (S4L19)


Random receive (L4S25-26)
--------------
- Returns the first element in buffer that matches'e'.

- Without removing:
ch ? <e> //Assign first value 

ch ? [e] //The first is, return true
ch ?? [e] //Any such is, return true






Concurrent Systems (CoSy) to Distributed Systems (DiSy)
=======================================================


DS is
-----
- No shared clock
- No shared memory


Asynchronous DS
---------------
- Collection of sequential processes
	- Each execute a sequence of EVENTS
- Channels are reliable but may deliver messages out-of-order
- Asynchronous means: no bounds on relative speeds of processes and message delays

- Will normally be shown in timelines
	- A process is denoted P_i
	- An event is denoted e_i^k
	- The sequence event is denoted h_i = e_i^0, e_i^1...
	- Global events are denoted H = h_1 \union h_2 \union ...

- Communication through send(m) and receive(m)
- Events can affects each other:
	- Send from P_1 -> P_3
	- Send from P_1 -> P_2 -> P_3
	- L6S12-14

- For denoting global event ordering, see L6S15


Global state
------------
\omega_i^k = local state of process p_i after event e_i^k
\omega_i^0 = initial state of process p_i

Global states: \sum = (\omega_1, \omega_2, ...)

Cut
---
- A cut is the latest events before the cut of each processes
- A cut is denoted C, C', C'' ...
- If all events are to be listed in a cut, they must be shown as they occur in time (not separated by process)


Run
---
- A run list all events in global history, H, but HAS not be in correct sequence.


Observed / constructed states (L6S22-28)
========================================
- Cuts kan vÃ¦re consistent eller ej. Der skal bruges en metode til dette: (L6S23)
	\forall event e, e': (e \in C) \and (e' -> e) => e' \in C
	
	This means "an event will not cross a cut"

- A run, R, is consistent if
	\forall event e, e' where e -> e', e appears before e' in R

A run, R = e^1 e^2 e^3 ... result in a sequence of global states \sum^0 \sum^1 \sum^2 \sum^3, where \sum^0 = (\omega_1^0, \omega_2^0, ..., \omega_n^0)


DS properties (S6L30-31)
========================
- Absence of dead-lock or starvation
- Efficiency in memory usage or numbers of messages that needs to be exchanged
- Robustness

Errors
------
- A fail-safe system is one that, in the event of failure, responds in a way that will cause no harm, or at least a minimum of harm, to other systems or danger to personnel.

- Fault-tolerance is the property that enables a system) to continue operating properly in the event of the failure of (or one or more faults within) some of its components. If its operating quality decreases at all, the decrease is proportional to the severity of the failure, as compared to a naively-designed system in which even a small failure can cause total breakdown.


Mutual exclusion (L6S33-40)
================
- Use shared resources (file, hardware, net, bandwidth)
	- No nice synchronization like semaphores or shared clock
	- must send a request or take a token (as a request as well)

- Desired properties (and metrics) of algorithms (s 35)

- Round-robin token: (S.37)
	- Fault: token can be lost
	- Deadlock: can happen
	- Response time: Can be quite large, since it has to pass all processes
	- Memory: Small - few states needed remembered (have/have not token)
	- 




